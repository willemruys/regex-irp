[
    {
      "regex": "Transform\\._handle",
      "exceptionStackTrace": null,
      "matches": ["Transform._handle"]
    },
    {
      "regex": "(?<!\\\\)(\\$|\\\\)",
      "exceptionStackTrace": null,
      "matches": ["\\", "$"]
    },
    {
      "regex": "_mmaCalendar",
      "exceptionStackTrace": null,
      "matches": ["_mmaCalendar"]
    },
    {
      "regex": ".*?/projects/(.*?)/zones/(.*?)/instances/(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "evil/projects/evil/zones/evil/instances//",
        "evil/projects/evil/zones/evil/instances/eVil",
        "evil/projects/evil/zones/evil/instances/EVIL",
        "evil/projects/evil/zones/evil/instances/ev_il",
        "evil/projects/evil/zones/evil/instances/ev il",
        "evil/projects/evil/zones/evil/instances/ev4il",
        "evil/projects/evil/zones/evil/instances/e",
        "evil/projects/evil/zones/evil/instances/ ",
        "evil/projects/evil/zones/evil/instances/6",
        "evil/projects/evil/zones/evil/instances/_",
        "evil/projects/evil/zones/evil/instances/",
        "evil/projects/evil/zones///instances/evil",
        "evil/projects/evil/zones/eVil/instances/evil",
        "evil/projects/evil/zones/EVIL/instances/evil",
        "evil/projects/evil/zones/ev_il/instances/evil",
        "evil/projects/evil/zones/ev il/instances/evil",
        "evil/projects/evil/zones/ev4il/instances/evil",
        "evil/projects/evil/zones/e/instances/evil",
        "evil/projects/evil/zones/ /instances/evil",
        "evil/projects/evil/zones/6/instances/evil",
        "evil/projects/evil/zones/_/instances/evil",
        "evil/projects/evil/zones//instances/evil",
        "evil/projects///zones/evil/instances/evil",
        "evil/projects/eVil/zones/evil/instances/evil",
        "evil/projects/EVIL/zones/evil/instances/evil",
        "evil/projects/ev_il/zones/evil/instances/evil",
        "evil/projects/ev il/zones/evil/instances/evil",
        "evil/projects/ev4il/zones/evil/instances/evil",
        "evil/projects/e/zones/evil/instances/evil",
        "evil/projects/ /zones/evil/instances/evil",
        "evil/projects/6/zones/evil/instances/evil",
        "evil/projects/_/zones/evil/instances/evil",
        "evil/projects//zones/evil/instances/evil",
        "//projects/evil/zones/evil/instances/evil",
        "eVil/projects/evil/zones/evil/instances/evil",
        "EVIL/projects/evil/zones/evil/instances/evil",
        "ev_il/projects/evil/zones/evil/instances/evil",
        "ev il/projects/evil/zones/evil/instances/evil",
        "ev4il/projects/evil/zones/evil/instances/evil",
        "e/projects/evil/zones/evil/instances/evil",
        " /projects/evil/zones/evil/instances/evil",
        "6/projects/evil/zones/evil/instances/evil",
        "_/projects/evil/zones/evil/instances/evil",
        "/projects/evil/zones/evil/instances/evil",
        "/projects//zones//instances/",
        "evil/projects/evil/zones/evil/instances/evil"
      ]
    },
    {
      "regex": "##FORMAT=<ID=([^,]+),Number=([^,]+),Type=([^,]+),Description=\"([^\"]*)\">",
      "exceptionStackTrace": null,
      "matches": [
        "##FORMAT=<ID=evil,Number=evil,Type=evil,Description=\">\">",
        "##FORMAT=<ID=evil,Number=evil,Type=evil,Description=\"=\">",
        "##FORMAT=<ID=evil,Number=evil,Type=evil,Description=\"<\">",
        "##FORMAT=<ID=evil,Number=evil,Type=evil,Description=\",\">",
        "##FORMAT=<ID=evil,Number=evil,Type=evil,Description=\"#\">",
        "##FORMAT=<ID=evil,Number=evil,Type=evil,Description=\"\"\">",
        "##FORMAT=<ID=evil,Number=evil,Type=evil,Description=\"eVil\">",
        "##FORMAT=<ID=evil,Number=evil,Type=evil,Description=\"EVIL\">",
        "##FORMAT=<ID=evil,Number=evil,Type=evil,Description=\"ev_il\">",
        "##FORMAT=<ID=evil,Number=evil,Type=evil,Description=\"ev il\">",
        "##FORMAT=<ID=evil,Number=evil,Type=evil,Description=\"ev4il\">",
        "##FORMAT=<ID=evil,Number=evil,Type=evil,Description=\"e\">",
        "##FORMAT=<ID=evil,Number=evil,Type=evil,Description=\" \">",
        "##FORMAT=<ID=evil,Number=evil,Type=evil,Description=\"6\">",
        "##FORMAT=<ID=evil,Number=evil,Type=evil,Description=\"_\">",
        "##FORMAT=<ID=evil,Number=evil,Type=>,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number=evil,Type==,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number=evil,Type=<,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number=evil,Type=,,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number=evil,Type=#,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number=evil,Type=\",Description=\"evil\">",
        "##FORMAT=<ID=evil,Number=evil,Type=eVil,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number=evil,Type=EVIL,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number=evil,Type=ev_il,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number=evil,Type=ev il,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number=evil,Type=ev4il,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number=evil,Type=e,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number=evil,Type= ,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number=evil,Type=6,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number=evil,Type=_,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number=evil,Type=,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number=>,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number==,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number=<,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number=,,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number=#,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number=\",Type=evil,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number=eVil,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number=EVIL,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number=ev_il,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number=ev il,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number=ev4il,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number=e,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number= ,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number=6,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number=_,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number=,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID=>,Number=evil,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID==,Number=evil,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID=<,Number=evil,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID=,,Number=evil,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID=#,Number=evil,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID=\",Number=evil,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID=eVil,Number=evil,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID=EVIL,Number=evil,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID=ev_il,Number=evil,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID=ev il,Number=evil,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID=ev4il,Number=evil,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID=e,Number=evil,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID= ,Number=evil,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID=6,Number=evil,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID=_,Number=evil,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID=,Number=evil,Type=evil,Description=\"evil\">",
        "##FORMAT=<ID=evil,Number=evil,Type=evil,Description=\"\">",
        "##FORMAT=<ID=evil,Number=evil,Type=evil,Description=\"evil\">"
      ]
    },
    {
      "regex": "Attempt to override an already evaluated resource, defined at \\(line: 4\\), with new values \\(line: 6\\)",
      "exceptionStackTrace": null,
      "matches": [
        "Attempt to override an already evaluated resource, defined at (line: 4), with new values (line: 6)"
      ]
    },
    {
      "regex": "Category:\\s*",
      "exceptionStackTrace": null,
      "matches": ["Category:  ", "Category:", "Category: "]
    },
    {
      "regex": "Windows|mswin",
      "exceptionStackTrace": null,
      "matches": ["mswin", "Windows"]
    },
    {
      "regex": "PatchPerl\\.pm",
      "exceptionStackTrace": null,
      "matches": ["PatchPerl.pm"]
    },
    {
      "regex": "o[iu]s$",
      "exceptionStackTrace": null,
      "matches": ["ois", "oas", "ous"]
    },
    {
      "regex": "\\u{1D306}",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "incomplete escape \\u"
      },
      "matches": []
    },
    {
      "regex": "end of life",
      "exceptionStackTrace": null,
      "matches": ["end of life"]
    },
    {
      "regex": "\\((.+?)\\) is managing this device",
      "exceptionStackTrace": null,
      "matches": [
        "()) is managing this device",
        "(() is managing this device",
        "(eVil) is managing this device",
        "(EVIL) is managing this device",
        "(ev_il) is managing this device",
        "(ev il) is managing this device",
        "(ev4il) is managing this device",
        "(e) is managing this device",
        "( ) is managing this device",
        "(6) is managing this device",
        "(_) is managing this device",
        "() is managing this device",
        "(evil) is managing this device"
      ]
    },
    {
      "regex": "; ?(KFAPWA) Build\\b",
      "exceptionStackTrace": null,
      "matches": [";  KFAPWA Build", ";KFAPWA Build", "; KFAPWA Build"]
    },
    {
      "regex": "\\A([0-9a-zA-Z\\.\\/\\-_]+): (.*)\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "\\A ( $pattern ) \\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "^GRID_PPEM",
      "exceptionStackTrace": null,
      "matches": ["GRID_PPEM"]
    },
    {
      "regex": "\\$\\Q$k\\E",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\Q"
      },
      "matches": []
    },
    {
      "regex": "^\\s*(\\w+)\\s*=\\s*['\"]?([^'\"]+)['\"]?\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        " evil = \"evil\"  ",
        " evil = \"evil\"",
        " evil = \"evil\"\" ",
        " evil = \"evil ",
        " evil = \"evil' ",
        " evil = \"=\" ",
        " evil = \"'\" ",
        " evil = \"\"\" ",
        " evil = \"eVil\" ",
        " evil = \"EVIL\" ",
        " evil = \"ev_il\" ",
        " evil = \"ev il\" ",
        " evil = \"ev4il\" ",
        " evil = \"e\" ",
        " evil = \" \" ",
        " evil = \"6\" ",
        " evil = \"_\" ",
        " evil = \"\" ",
        " evil = \"\"evil\" ",
        " evil = evil\" ",
        " evil = 'evil\" ",
        " evil =  \"evil\" ",
        " evil =\"evil\" ",
        " evil  = \"evil\" ",
        " evil= \"evil\" ",
        " eVil = \"evil\" ",
        " EVIL = \"evil\" ",
        " ev_il = \"evil\" ",
        " ev il = \"evil\" ",
        " ev4il = \"evil\" ",
        " e = \"evil\" ",
        "   = \"evil\" ",
        " 6 = \"evil\" ",
        " _ = \"evil\" ",
        "  = \"evil\" ",
        "  evil = \"evil\" ",
        "evil = \"evil\" ",
        "evil=evil",
        " evil = \"evil\" "
      ]
    },
    {
      "regex": "^(\\w+:)?tape-record-admin$",
      "exceptionStackTrace": null,
      "matches": [
        "evil:evil:tape-record-admin",
        "eVil:tape-record-admin",
        "EVIL:tape-record-admin",
        "ev_il:tape-record-admin",
        "ev il:tape-record-admin",
        "ev4il:tape-record-admin",
        "e:tape-record-admin",
        " :tape-record-admin",
        "6:tape-record-admin",
        "_:tape-record-admin",
        ":tape-record-admin",
        "tape-record-admin",
        "evil:tape-record-admin"
      ]
    },
    {
      "regex": "<meta name=\"twitter:card\" content=\"summary\" \\/>",
      "exceptionStackTrace": null,
      "matches": ["<meta name=\"twitter:card\" content=\"summary\" />"]
    },
    {
      "regex": "\\bno root\\b",
      "exceptionStackTrace": null,
      "matches": ["no root"]
    },
    {
      "regex": "use_target_ruby",
      "exceptionStackTrace": null,
      "matches": ["use_target_ruby"]
    },
    { "regex": "\\ble\\b", "exceptionStackTrace": null, "matches": ["le"] },
    {
      "regex": "applying.*?jquery.*?script",
      "exceptionStackTrace": null,
      "matches": [
        "applyingeviljqueryeVilscript",
        "applyingeviljqueryEVILscript",
        "applyingeviljqueryev_ilscript",
        "applyingeviljqueryev ilscript",
        "applyingeviljqueryev4ilscript",
        "applyingeviljqueryescript",
        "applyingeviljquery script",
        "applyingeviljquery6script",
        "applyingeviljquery_script",
        "applyingeviljqueryscript",
        "applyingeViljqueryevilscript",
        "applyingEVILjqueryevilscript",
        "applyingev_iljqueryevilscript",
        "applyingev iljqueryevilscript",
        "applyingev4iljqueryevilscript",
        "applyingejqueryevilscript",
        "applying jqueryevilscript",
        "applying6jqueryevilscript",
        "applying_jqueryevilscript",
        "applyingjqueryevilscript",
        "applyingjqueryscript",
        "applyingeviljqueryevilscript"
      ]
    },
    {
      "regex": "^\\s*undisclosed-recipients:?\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        " undisclosed-recipients:  ",
        " undisclosed-recipients:",
        " undisclosed-recipients:: ",
        " undisclosed-recipients ",
        "  undisclosed-recipients: ",
        "undisclosed-recipients: ",
        "undisclosed-recipients",
        " undisclosed-recipients: "
      ]
    },
    {
      "regex": "\\\\hackscore\\s*{[^}]*}",
      "exceptionStackTrace": null,
      "matches": [
        "\\hackscore {}}",
        "\\hackscore {{}",
        "\\hackscore {\\}",
        "\\hackscore {eVil}",
        "\\hackscore {EVIL}",
        "\\hackscore {ev_il}",
        "\\hackscore {ev il}",
        "\\hackscore {ev4il}",
        "\\hackscore {e}",
        "\\hackscore { }",
        "\\hackscore {6}",
        "\\hackscore {_}",
        "\\hackscore {}",
        "\\hackscore  {evil}",
        "\\hackscore{evil}",
        "\\hackscore{}",
        "\\hackscore {evil}"
      ]
    },
    {
      "regex": "^(solid|double|dotted|dashed)$",
      "exceptionStackTrace": null,
      "matches": ["dashed", "dotted", "double", "solid"]
    },
    {
      "regex": ",([\\\"]{0,1}([^\\\"]*)[^\\\"]{0,1}$)",
      "exceptionStackTrace": null,
      "matches": [
        ",\"evilaa",
        ",\"evil",
        ",\"evilA",
        ",\"evil0",
        ",\"evil,",
        ",\"evil\"",
        ",\"evil ",
        ",\",a",
        ",\"\"a",
        ",\"eVila",
        ",\"EVILa",
        ",\"ev_ila",
        ",\"ev ila",
        ",\"ev4ila",
        ",\"ea",
        ",\" a",
        ",\"6a",
        ",\"_a",
        ",\"a",
        ",\"\"evila",
        ",evila",
        ",",
        ",\"evila"
      ]
    },
    {
      "regex": "\\G([ ]{4}|\\t).*$\\n?",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\G"
      },
      "matches": []
    },
    {
      "regex": "\n      `[^`]*? # The opening backtick on a plugin path\n      ([[[:alnum:]]_+-]+?) # The plugin name\n      (- ([[:xdigit:]]+ | ",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "missing ), unterminated subpattern"
      },
      "matches": []
    },
    { "regex": "thu", "exceptionStackTrace": null, "matches": ["thu"] },
    {
      "regex": "(?:(?:^|\\s)\\/\\/(.+?)$)|(?:\\/\\*([\\S\\s]*?)\\*\\/)",
      "exceptionStackTrace": null,
      "matches": [
        "/*/*/",
        "/***/",
        "/*eVil*/",
        "/*EVIL*/",
        "/*ev_il*/",
        "/*ev il*/",
        "/*ev4il*/",
        "/*e*/",
        "/* */",
        "/*6*/",
        "/*_*/",
        "///",
        "//*",
        "//eVil",
        "//EVIL",
        "//ev_il",
        "//ev il",
        "//ev4il",
        "//e",
        "// ",
        "//6",
        "//_",
        "//",
        "/**/",
        "/*evil*/",
        " //evil",
        "//evil"
      ]
    },
    {
      "regex": "^\\[([\\d.]+)\\]",
      "exceptionStackTrace": null,
      "matches": ["[..]", "[]", "[0]", "[.]"]
    },
    {
      "regex": "<td>(\\\\d+\\\\.){3}\\\\d+</td>.+?(\\\\d{2,4})</td>",
      "exceptionStackTrace": null,
      "matches": [
        "<td>\\d\\a\\d\\a\\d\\a\\d</td>evil\\ddddd</td>",
        "<td>\\d\\a\\d\\a\\d\\a\\d</td>evil\\dddd</td>",
        "<td>\\d\\a\\d\\a\\d\\a\\d</td>evil\\d</td>",
        "<td>\\d\\a\\d\\a\\d\\a\\d</td>\\\\dd</td>",
        "<td>\\d\\a\\d\\a\\d\\a\\d</td>>\\dd</td>",
        "<td>\\d\\a\\d\\a\\d\\a\\d</td><\\dd</td>",
        "<td>\\d\\a\\d\\a\\d\\a\\d</td>/\\dd</td>",
        "<td>\\d\\a\\d\\a\\d\\a\\d</td>eVil\\dd</td>",
        "<td>\\d\\a\\d\\a\\d\\a\\d</td>EVIL\\dd</td>",
        "<td>\\d\\a\\d\\a\\d\\a\\d</td>ev_il\\dd</td>",
        "<td>\\d\\a\\d\\a\\d\\a\\d</td>ev il\\dd</td>",
        "<td>\\d\\a\\d\\a\\d\\a\\d</td>ev4il\\dd</td>",
        "<td>\\d\\a\\d\\a\\d\\a\\d</td>e\\dd</td>",
        "<td>\\d\\a\\d\\a\\d\\a\\d</td> \\dd</td>",
        "<td>\\d\\a\\d\\a\\d\\a\\d</td>6\\dd</td>",
        "<td>\\d\\a\\d\\a\\d\\a\\d</td>_\\dd</td>",
        "<td>\\d\\a\\d\\a\\d\\a\\d</td>\\dd</td>",
        "<td>\\d\\a\\d\\a\\d\\a\\dd</td>evil\\dd</td>",
        "<td>\\d\\a\\d\\a\\d\\a\\</td>evil\\dd</td>",
        "<td>\\d\\a\\d\\a\\d\\a\\d\\a\\d</td>evil\\dd</td>",
        "<td>\\d\\a\\d\\a\\d</td>evil\\dd</td>",
        "<td>\\d\\\\\\d\\a\\d\\a\\d</td>evil\\dd</td>",
        "<td>\\d\\A\\d\\a\\d\\a\\d</td>evil\\dd</td>",
        "<td>\\d\\>\\d\\a\\d\\a\\d</td>evil\\dd</td>",
        "<td>\\d\\<\\d\\a\\d\\a\\d</td>evil\\dd</td>",
        "<td>\\d\\0\\d\\a\\d\\a\\d</td>evil\\dd</td>",
        "<td>\\d\\/\\d\\a\\d\\a\\d</td>evil\\dd</td>",
        "<td>\\d\\ \\d\\a\\d\\a\\d</td>evil\\dd</td>",
        "<td>\\dd\\a\\d\\a\\d\\a\\d</td>evil\\dd</td>",
        "<td>\\\\a\\d\\a\\d\\a\\d</td>evil\\dd</td>",
        "<td>\\d\\a\\d\\a\\d\\a\\d</td>evil\\dd</td>"
      ]
    },
    {
      "regex": "^(?:\\t?| {0,3})(?:[\\*\\-\\+]|[0-9]{1,9}\\.)[ \\t]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "\\A= Action Pack",
      "exceptionStackTrace": null,
      "matches": ["= Action Pack"]
    },
    {
      "regex": ":(80|443)$",
      "exceptionStackTrace": null,
      "matches": [":443", ":80"]
    },
    {
      "regex": "public\\s+function\\s+canConvertFrom\\s*\\(",
      "exceptionStackTrace": null,
      "matches": [
        "public function canConvertFrom  (",
        "public function  canConvertFrom (",
        "public functioncanConvertFrom (",
        "public  function canConvertFrom (",
        "publicfunction canConvertFrom (",
        "public function canConvertFrom(",
        "public function canConvertFrom ("
      ]
    },
    {
      "regex": "EXEC_FLOW_JOB_PID=(\\d+)\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    { "regex": "BUCH\\/sa", "exceptionStackTrace": null, "matches": ["BUCH/sa"] },
    { "regex": "(@@)", "exceptionStackTrace": null, "matches": ["@@"] },
    {
      "regex": "\\$director",
      "exceptionStackTrace": null,
      "matches": ["$director"]
    },
    {
      "regex": "(\\A(if|unless|else|elsif|when|begin|rescue|ensure|case)\\b)|\\bdo\\s*(\\|[^\\|]*\\|\\s*)?\\Z",
      "exceptionStackTrace": null,
      "matches": [
        "do |evil| |evil| ",
        "do ",
        "do |evil|  ",
        "do |evil|",
        "do ||| ",
        "do |eVil| ",
        "do |EVIL| ",
        "do |ev_il| ",
        "do |ev il| ",
        "do |ev4il| ",
        "do |e| ",
        "do | | ",
        "do |6| ",
        "do |_| ",
        "do || ",
        "do  |evil| ",
        "do|evil| ",
        "do",
        "do |evil| ",
        "case",
        "ensure",
        "rescue",
        "begin",
        "when",
        "elsif",
        "else",
        "unless",
        "if"
      ]
    },
    {
      "regex": "[\\-\\[\\]\\/\\{\\}\\(\\)\\+\\.\\\\\\^\\$\\|\\,\\#]",
      "exceptionStackTrace": null,
      "matches": [
        "}",
        "|",
        "{",
        "^",
        "]",
        "\\",
        "[",
        "/",
        ".",
        "-",
        ",",
        "+",
        ")",
        "(",
        "$",
        "#"
      ]
    },
    {
      "regex": "^[\\[\\];:?()!.,><=+-/*|&@^%\"'$~]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (bad range): Invalid range: +-/"
      },
      "matches": []
    },
    {
      "regex": "desc\\[\\\"english\\\"\\]\\s*\\=\\s*string\\s*\\(\\s*\\\"\\s*([^\\)]*)\\\"\\s*\\)\\s*\\;",
      "exceptionStackTrace": null,
      "matches": [
        "desc[\"english\"] = string ( \" evil\" )  ;",
        "desc[\"english\"] = string ( \" evil\" );",
        "desc[\"english\"] = string ( \" evil\"  ) ;",
        "desc[\"english\"] = string ( \" evil\") ;",
        "desc[\"english\"] = string ( \" ]\" ) ;",
        "desc[\"english\"] = string ( \" [\" ) ;",
        "desc[\"english\"] = string ( \" =\" ) ;",
        "desc[\"english\"] = string ( \" ;\" ) ;",
        "desc[\"english\"] = string ( \" )\" ) ;",
        "desc[\"english\"] = string ( \" (\" ) ;",
        "desc[\"english\"] = string ( \" \"\" ) ;",
        "desc[\"english\"] = string ( \" eVil\" ) ;",
        "desc[\"english\"] = string ( \" EVIL\" ) ;",
        "desc[\"english\"] = string ( \" ev_il\" ) ;",
        "desc[\"english\"] = string ( \" ev il\" ) ;",
        "desc[\"english\"] = string ( \" ev4il\" ) ;",
        "desc[\"english\"] = string ( \" e\" ) ;",
        "desc[\"english\"] = string ( \"  \" ) ;",
        "desc[\"english\"] = string ( \" 6\" ) ;",
        "desc[\"english\"] = string ( \" _\" ) ;",
        "desc[\"english\"] = string ( \" \" ) ;",
        "desc[\"english\"] = string ( \"  evil\" ) ;",
        "desc[\"english\"] = string ( \"evil\" ) ;",
        "desc[\"english\"] = string (  \" evil\" ) ;",
        "desc[\"english\"] = string (\" evil\" ) ;",
        "desc[\"english\"] = string  ( \" evil\" ) ;",
        "desc[\"english\"] = string( \" evil\" ) ;",
        "desc[\"english\"] =  string ( \" evil\" ) ;",
        "desc[\"english\"] =string ( \" evil\" ) ;",
        "desc[\"english\"]  = string ( \" evil\" ) ;",
        "desc[\"english\"]= string ( \" evil\" ) ;",
        "desc[\"english\"]=string(\"\");",
        "desc[\"english\"] = string ( \" evil\" ) ;"
      ]
    },
    {
      "regex": "[\\+\\-]?(?:\\d*\\.\\d+|\\d+)|[a-z]+",
      "exceptionStackTrace": null,
      "matches": [
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "-00",
        "-",
        "-0.00",
        "-0.",
        "-00.0",
        "-.0",
        "--0.0",
        "0.0",
        "+0.0",
        "0",
        ".0",
        "evil",
        "-0",
        "-0.0"
      ]
    },
    {
      "regex": "cannot query field.+updateReadonlyTag",
      "exceptionStackTrace": null,
      "matches": [
        "cannot query fieldeVilupdateReadonlyTag",
        "cannot query fieldEVILupdateReadonlyTag",
        "cannot query fieldev_ilupdateReadonlyTag",
        "cannot query fieldev ilupdateReadonlyTag",
        "cannot query fieldev4ilupdateReadonlyTag",
        "cannot query fieldeupdateReadonlyTag",
        "cannot query field updateReadonlyTag",
        "cannot query field6updateReadonlyTag",
        "cannot query field_updateReadonlyTag",
        "cannot query fieldupdateReadonlyTag",
        "cannot query fieldevilupdateReadonlyTag"
      ]
    },
    { "regex": "\\bSHA1\\b", "exceptionStackTrace": null, "matches": ["SHA1"] },
    {
      "regex": "Reader.ask: No argument or function required",
      "exceptionStackTrace": null,
      "matches": [
        "ReaderAask: No argument or function required",
        "Reader:ask: No argument or function required",
        "Reader0ask: No argument or function required",
        "Reader ask: No argument or function required",
        "Readeraask: No argument or function required"
      ]
    },
    {
      "regex": "Node 'scheme' can not be a scalar",
      "exceptionStackTrace": null,
      "matches": ["Node 'scheme' can not be a scalar"]
    },
    {
      "regex": "\\|([a-zA-Z0-9.()]+)\\|_?",
      "exceptionStackTrace": null,
      "matches": [
        "|evil|__",
        "|||_",
        "|.|_",
        "|)|_",
        "|(|_",
        "|eVil|_",
        "|EVIL|_",
        "|ev_il|_",
        "|ev il|_",
        "|ev4il|_",
        "|e|_",
        "| |_",
        "|6|_",
        "|_|_",
        "||_",
        "|evil|",
        "|evil|_"
      ]
    },
    {
      "regex": "ancestor-or-self::([^\\:]*)(?:\\:(.*)){0,1}$",
      "exceptionStackTrace": null,
      "matches": [
        "ancestor-or-self::evil:evil:evil",
        "ancestor-or-self::evil",
        "ancestor-or-self::evil::",
        "ancestor-or-self::evil:-",
        "ancestor-or-self::evil:eVil",
        "ancestor-or-self::evil:EVIL",
        "ancestor-or-self::evil:ev_il",
        "ancestor-or-self::evil:ev il",
        "ancestor-or-self::evil:ev4il",
        "ancestor-or-self::evil:e",
        "ancestor-or-self::evil: ",
        "ancestor-or-self::evil:6",
        "ancestor-or-self::evil:_",
        "ancestor-or-self::evil:",
        "ancestor-or-self::::evil",
        "ancestor-or-self::-:evil",
        "ancestor-or-self::eVil:evil",
        "ancestor-or-self::EVIL:evil",
        "ancestor-or-self::ev_il:evil",
        "ancestor-or-self::ev il:evil",
        "ancestor-or-self::ev4il:evil",
        "ancestor-or-self::e:evil",
        "ancestor-or-self:: :evil",
        "ancestor-or-self::6:evil",
        "ancestor-or-self::_:evil",
        "ancestor-or-self:::evil",
        "ancestor-or-self::",
        "ancestor-or-self::evil:evil"
      ]
    },
    {
      "regex": "^([a-z]*((-)))+[a-z]*$",
      "exceptionStackTrace": null,
      "matches": [
        "evil-eVil",
        "evil-EVIL",
        "evil-ev_il",
        "evil-ev il",
        "evil-ev4il",
        "evil-e",
        "evil- ",
        "evil-6",
        "evil-_",
        "evil-",
        "evil-evil-evil",
        "evil",
        "eVil-evil",
        "EVIL-evil",
        "ev_il-evil",
        "ev il-evil",
        "ev4il-evil",
        "e-evil",
        " -evil",
        "6-evil",
        "_-evil",
        "-evil",
        "-",
        "evil-evil"
      ]
    },
    {
      "regex": "Test_validation\\[bye\\]: test_validation.param expect.* an Integer value, got String",
      "exceptionStackTrace": null,
      "matches": [
        "Test_validation[bye]: test_validationaparam expect] an Integer value, got String",
        "Test_validation[bye]: test_validationaparam expect[ an Integer value, got String",
        "Test_validation[bye]: test_validationaparam expect: an Integer value, got String",
        "Test_validation[bye]: test_validationaparam expect, an Integer value, got String",
        "Test_validation[bye]: test_validationaparam expecteVil an Integer value, got String",
        "Test_validation[bye]: test_validationaparam expectEVIL an Integer value, got String",
        "Test_validation[bye]: test_validationaparam expectev_il an Integer value, got String",
        "Test_validation[bye]: test_validationaparam expectev il an Integer value, got String",
        "Test_validation[bye]: test_validationaparam expectev4il an Integer value, got String",
        "Test_validation[bye]: test_validationaparam expecte an Integer value, got String",
        "Test_validation[bye]: test_validationaparam expect  an Integer value, got String",
        "Test_validation[bye]: test_validationaparam expect6 an Integer value, got String",
        "Test_validation[bye]: test_validationaparam expect_ an Integer value, got String",
        "Test_validation[bye]: test_validation_param expectevil an Integer value, got String",
        "Test_validation[bye]: test_validation]param expectevil an Integer value, got String",
        "Test_validation[bye]: test_validation[param expectevil an Integer value, got String",
        "Test_validation[bye]: test_validationAparam expectevil an Integer value, got String",
        "Test_validation[bye]: test_validation:param expectevil an Integer value, got String",
        "Test_validation[bye]: test_validation0param expectevil an Integer value, got String",
        "Test_validation[bye]: test_validation,param expectevil an Integer value, got String",
        "Test_validation[bye]: test_validation param expectevil an Integer value, got String",
        "Test_validation[bye]: test_validationaparam expect an Integer value, got String",
        "Test_validation[bye]: test_validationaparam expectevil an Integer value, got String"
      ]
    },
    { "regex": "Hana", "exceptionStackTrace": null, "matches": ["Hana"] },
    {
      "regex": "\\n\\/[*/][@#]\\s+sourceMappingURL=((?:(?!\\s+\\*\\/).)*).*",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^% No entries found",
      "exceptionStackTrace": null,
      "matches": ["% No entries found"]
    },
    {
      "regex": "^<(.+)>; rel=\"https://tent.io/rels/profile\"$",
      "exceptionStackTrace": null,
      "matches": [
        "<evil>; rel=\"https://tentAio/rels/profile\"",
        "<evil>; rel=\"https://tent>io/rels/profile\"",
        "<evil>; rel=\"https://tent=io/rels/profile\"",
        "<evil>; rel=\"https://tent<io/rels/profile\"",
        "<evil>; rel=\"https://tent;io/rels/profile\"",
        "<evil>; rel=\"https://tent:io/rels/profile\"",
        "<evil>; rel=\"https://tent0io/rels/profile\"",
        "<evil>; rel=\"https://tent/io/rels/profile\"",
        "<evil>; rel=\"https://tent\"io/rels/profile\"",
        "<evil>; rel=\"https://tent io/rels/profile\"",
        "<>>; rel=\"https://tentaio/rels/profile\"",
        "<=>; rel=\"https://tentaio/rels/profile\"",
        "<<>; rel=\"https://tentaio/rels/profile\"",
        "<;>; rel=\"https://tentaio/rels/profile\"",
        "<:>; rel=\"https://tentaio/rels/profile\"",
        "</>; rel=\"https://tentaio/rels/profile\"",
        "<\">; rel=\"https://tentaio/rels/profile\"",
        "<eVil>; rel=\"https://tentaio/rels/profile\"",
        "<EVIL>; rel=\"https://tentaio/rels/profile\"",
        "<ev_il>; rel=\"https://tentaio/rels/profile\"",
        "<ev il>; rel=\"https://tentaio/rels/profile\"",
        "<ev4il>; rel=\"https://tentaio/rels/profile\"",
        "<e>; rel=\"https://tentaio/rels/profile\"",
        "< >; rel=\"https://tentaio/rels/profile\"",
        "<6>; rel=\"https://tentaio/rels/profile\"",
        "<_>; rel=\"https://tentaio/rels/profile\"",
        "<>; rel=\"https://tentaio/rels/profile\"",
        "<evil>; rel=\"https://tentaio/rels/profile\""
      ]
    },
    {
      "regex": "^(:[0-5]?[0-9])+$",
      "exceptionStackTrace": null,
      "matches": [":00:00", "", ":000", ":60", ":0", ":00"]
    },
    {
      "regex": "_$foreign_id$",
      "exceptionStackTrace": null,
      "matches": ["_foreign_id"]
    },
    { "regex": "\\$a->", "exceptionStackTrace": null, "matches": ["$a->"] },
    {
      "regex": "__([a-z]+)__ = \"([^\"]+)",
      "exceptionStackTrace": null,
      "matches": [
        "__evil__ = \"=",
        "__evil__ = \"\"",
        "__evil__ = \"eVil",
        "__evil__ = \"EVIL",
        "__evil__ = \"ev_il",
        "__evil__ = \"ev il",
        "__evil__ = \"ev4il",
        "__evil__ = \"e",
        "__evil__ = \" ",
        "__evil__ = \"6",
        "__evil__ = \"_",
        "__evil__ = \"",
        "__eVil__ = \"evil",
        "__EVIL__ = \"evil",
        "__ev_il__ = \"evil",
        "__ev il__ = \"evil",
        "__ev4il__ = \"evil",
        "__e__ = \"evil",
        "__ __ = \"evil",
        "__6__ = \"evil",
        "_____ = \"evil",
        "____ = \"evil",
        "__evil__ = \"evil"
      ]
    },
    {
      "regex": "K|Y|W|M|R|S",
      "exceptionStackTrace": null,
      "matches": ["S", "R", "M", "W", "Y", "K"]
    },
    {
      "regex": "(\\u03BC)+",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 956"
      },
      "matches": []
    },
    {
      "regex": "^\\d+:return:(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "0:return::",
        "0:return:eVil",
        "0:return:EVIL",
        "0:return:ev_il",
        "0:return:ev il",
        "0:return:ev4il",
        "0:return:e",
        "0:return: ",
        "0:return:6",
        "0:return:_",
        "00:return:evil",
        ":return:evil",
        "0:return:",
        "0:return:evil"
      ]
    },
    { "regex": "\\bASC\\b", "exceptionStackTrace": null, "matches": ["ASC"] },
    {
      "regex": "(\\w+)",
      "exceptionStackTrace": null,
      "matches": [
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "as anonymous user",
      "exceptionStackTrace": null,
      "matches": ["as anonymous user"]
    },
    {
      "regex": "[,\\. ]+",
      "exceptionStackTrace": null,
      "matches": ["  ", "", ".", ",", " "]
    },
    {
      "regex": "create(.*)db/migrate/\\d+_test_abc_args\\.rb",
      "exceptionStackTrace": null,
      "matches": [
        "createevildb/migrate/00_test_abc_args.rb",
        "createevildb/migrate/_test_abc_args.rb",
        "create/db/migrate/0_test_abc_args.rb",
        "create.db/migrate/0_test_abc_args.rb",
        "createeVildb/migrate/0_test_abc_args.rb",
        "createEVILdb/migrate/0_test_abc_args.rb",
        "createev_ildb/migrate/0_test_abc_args.rb",
        "createev ildb/migrate/0_test_abc_args.rb",
        "createev4ildb/migrate/0_test_abc_args.rb",
        "createedb/migrate/0_test_abc_args.rb",
        "create db/migrate/0_test_abc_args.rb",
        "create6db/migrate/0_test_abc_args.rb",
        "create_db/migrate/0_test_abc_args.rb",
        "createdb/migrate/0_test_abc_args.rb",
        "createevildb/migrate/0_test_abc_args.rb"
      ]
    },
    {
      "regex": "^mes[ei]$",
      "exceptionStackTrace": null,
      "matches": ["mese", "mesa", "mesi"]
    },
    {
      "regex": "[^-A-Za-z0-9_.]",
      "exceptionStackTrace": null,
      "matches": ["a", "_", "A", "0", ".", "-", " "]
    },
    { "regex": "^deny$", "exceptionStackTrace": null, "matches": ["deny"] },
    {
      "regex": "[\\n\\r\\u0004]*$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^Access is denied",
      "exceptionStackTrace": null,
      "matches": ["Access is denied"]
    },
    {
      "regex": "^\u09b6\u09c1\u0995\u09cd\u09b0\u09ac\u09be\u09b0",
      "exceptionStackTrace": null,
      "matches": ["\u09b6\u09c1\u0995\u09cd\u09b0\u09ac\u09be\u09b0"]
    },
    {
      "regex": "\\/Encrypt\\s+(\\d+)\\s+0\\s+R",
      "exceptionStackTrace": null,
      "matches": [
        "/Encrypt 0 0  R",
        "/Encrypt 0 0R",
        "/Encrypt 0  0 R",
        "/Encrypt 00 R",
        "/Encrypt 00 0 R",
        "/Encrypt  0 R",
        "/Encrypt  0 0 R",
        "/Encrypt0 0 R",
        "/Encrypt 0 0 R"
      ]
    },
    {
      "regex": "\\A.*(passwor[dt]|_pwd?).*\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "^to?m+o?r+o?w?",
      "exceptionStackTrace": null,
      "matches": [
        "tomoroww",
        "tomoro",
        "tomoroow",
        "tomorw",
        "tomorrow",
        "tomoow",
        "tomoorow",
        "tomrow",
        "tommorow",
        "toorow",
        "toomorow",
        "tmorow",
        "tmr",
        "tomorow"
      ]
    },
    {
      "regex": "\\[\\[[!gbiuso]*;[^;]*;[^\\]]*\\]?$",
      "exceptionStackTrace": null,
      "matches": [
        "[[o;evil;evil]]",
        "[[o;evil;evil",
        "[[o;evil;]]",
        "[[o;evil;[]",
        "[[o;evil;;]",
        "[[o;evil;!]",
        "[[o;evil;eVil]",
        "[[o;evil;EVIL]",
        "[[o;evil;ev_il]",
        "[[o;evil;ev il]",
        "[[o;evil;ev4il]",
        "[[o;evil;e]",
        "[[o;evil; ]",
        "[[o;evil;6]",
        "[[o;evil;_]",
        "[[o;evil;]",
        "[[o;];evil]",
        "[[o;[;evil]",
        "[[o;;;evil]",
        "[[o;!;evil]",
        "[[o;eVil;evil]",
        "[[o;EVIL;evil]",
        "[[o;ev_il;evil]",
        "[[o;ev il;evil]",
        "[[o;ev4il;evil]",
        "[[o;e;evil]",
        "[[o; ;evil]",
        "[[o;6;evil]",
        "[[o;_;evil]",
        "[[o;;evil]",
        "[[oo;evil;evil]",
        "[[;evil;evil]",
        "[[u;evil;evil]",
        "[[s;evil;evil]",
        "[[i;evil;evil]",
        "[[g;evil;evil]",
        "[[b;evil;evil]",
        "[[a;evil;evil]",
        "[[!;evil;evil]",
        "[[;;",
        "[[o;evil;evil]"
      ]
    },
    {
      "regex": "^(?:TEXT\\s*)?(\\d+|\\(\\s*\\d+\\s*\\))$",
      "exceptionStackTrace": null,
      "matches": [
        "TEXT ( 0  )",
        "TEXT ( 0)",
        "TEXT ( 00 )",
        "TEXT (  )",
        "TEXT (  0 )",
        "TEXT (0 )",
        "TEXT 00",
        "TEXT ",
        "TEXT TEXT 0",
        "TEXT  0",
        "TEXT0",
        "(0)",
        "0",
        "TEXT ( 0 )",
        "TEXT 0"
      ]
    },
    {
      "regex": "[\\u00CB\\u00C8\\u00CA]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 203"
      },
      "matches": []
    },
    {
      "regex": "(^\\s*>.*\\n){2,}\\s*\\Z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^[\\w.@_()-]+[#].*$",
      "exceptionStackTrace": null,
      "matches": [
        "evil#@",
        "evil#.",
        "evil#-",
        "evil#)",
        "evil#(",
        "evil##",
        "evil#eVil",
        "evil#EVIL",
        "evil#ev_il",
        "evil#ev il",
        "evil#ev4il",
        "evil#e",
        "evil# ",
        "evil#6",
        "evil#_",
        "@#evil",
        ".#evil",
        "-#evil",
        ")#evil",
        "(#evil",
        "##evil",
        "eVil#evil",
        "EVIL#evil",
        "ev_il#evil",
        "ev il#evil",
        "ev4il#evil",
        "e#evil",
        " #evil",
        "6#evil",
        "_#evil",
        "#evil",
        "evil#",
        "evil#evil"
      ]
    },
    {
      "regex": "\\-?[0-9]:\\-?[0-9]",
      "exceptionStackTrace": null,
      "matches": ["-0:--0", "-0:0", "--0:-0", "0:-0", "0:0", "-0:-0"]
    },
    {
      "regex": "[^a-zA-Z0-9\\/\\+=]",
      "exceptionStackTrace": null,
      "matches": ["a", "A", "=", "0", "/", "+", " "]
    },
    {
      "regex": "exports\\.paths = \\{",
      "exceptionStackTrace": null,
      "matches": ["exports.paths = {"]
    },
    {
      "regex": "it should fail with a login hint",
      "exceptionStackTrace": null,
      "matches": ["it should fail with a login hint"]
    },
    {
      "regex": "\\[-\\/127.0.0.1\\/-\\/\\d+ms GET \\/logger] aaa",
      "exceptionStackTrace": null,
      "matches": [
        "[-/127a0a0a1/-/00ms GET /logger] aaa",
        "[-/127a0a0a1/-/ms GET /logger] aaa",
        "[-/127a0a0]1/-/0ms GET /logger] aaa",
        "[-/127a0a0[1/-/0ms GET /logger] aaa",
        "[-/127a0a0A1/-/0ms GET /logger] aaa",
        "[-/127a0a001/-/0ms GET /logger] aaa",
        "[-/127a0a0/1/-/0ms GET /logger] aaa",
        "[-/127a0a0-1/-/0ms GET /logger] aaa",
        "[-/127a0a0 1/-/0ms GET /logger] aaa",
        "[-/127a0]0a1/-/0ms GET /logger] aaa",
        "[-/127a0[0a1/-/0ms GET /logger] aaa",
        "[-/127a0A0a1/-/0ms GET /logger] aaa",
        "[-/127a000a1/-/0ms GET /logger] aaa",
        "[-/127a0/0a1/-/0ms GET /logger] aaa",
        "[-/127a0-0a1/-/0ms GET /logger] aaa",
        "[-/127a0 0a1/-/0ms GET /logger] aaa",
        "[-/127]0a0a1/-/0ms GET /logger] aaa",
        "[-/127[0a0a1/-/0ms GET /logger] aaa",
        "[-/127A0a0a1/-/0ms GET /logger] aaa",
        "[-/12700a0a1/-/0ms GET /logger] aaa",
        "[-/127/0a0a1/-/0ms GET /logger] aaa",
        "[-/127-0a0a1/-/0ms GET /logger] aaa",
        "[-/127 0a0a1/-/0ms GET /logger] aaa",
        "[-/127a0a0a1/-/0ms GET /logger] aaa"
      ]
    },
    {
      "regex": "(konqueror)\\/((\\d+)?[\\w\\.]+)",
      "exceptionStackTrace": null,
      "matches": [
        "konqueror/0/",
        "konqueror/0.",
        "konqueror/0eVil",
        "konqueror/0EVIL",
        "konqueror/0ev_il",
        "konqueror/0ev il",
        "konqueror/0ev4il",
        "konqueror/0e",
        "konqueror/0 ",
        "konqueror/06",
        "konqueror/0_",
        "konqueror/0",
        "konqueror/00evil",
        "konqueror/evil",
        "konqueror/0evil"
      ]
    },
    {
      "regex": "(^http(s)?://.+?/).*",
      "exceptionStackTrace": null,
      "matches": [
        "https://evil/:",
        "https://evil//",
        "https://evil/eVil",
        "https://evil/EVIL",
        "https://evil/ev_il",
        "https://evil/ev il",
        "https://evil/ev4il",
        "https://evil/e",
        "https://evil/ ",
        "https://evil/6",
        "https://evil/_",
        "https://evil/",
        "https://:/evil",
        "https:////evil",
        "https://eVil/evil",
        "https://EVIL/evil",
        "https://ev_il/evil",
        "https://ev il/evil",
        "https://ev4il/evil",
        "https://e/evil",
        "https:// /evil",
        "https://6/evil",
        "https://_/evil",
        "https:///evil",
        "httpss://evil/evil",
        "http://evil/evil",
        "http://evil/",
        "https://evil/evil"
      ]
    },
    {
      "regex": ";\\s*(use|((drop|create)\\s+database))\\b",
      "exceptionStackTrace": null,
      "matches": [
        "; drop  database",
        "; dropdatabase",
        ";  use",
        ";create database",
        ";drop database",
        ";use",
        "; create database",
        "; drop database",
        "; use"
      ]
    },
    {
      "regex": "^(([^<>()[]\\.,;:s@\"]+(.[^<>()[]\\.,;:s@\"]+)*)|(\".+\"))@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}])|(([a-zA-Z-0-9]+.)+[a-zA-Z]{2,}))$",
      "exceptionStackTrace": null,
      "matches": [
        "\"]\"@[a0a0a0]",
        "\"[\"@[a0a0a0]",
        "\"@\"@[a0a0a0]",
        "\">\"@[a0a0a0]",
        "\"<\"@[a0a0a0]",
        "\";\"@[a0a0a0]",
        "\":\"@[a0a0a0]",
        "\".\"@[a0a0a0]",
        "\"-\"@[a0a0a0]",
        "\",\"@[a0a0a0]",
        "\")\"@[a0a0a0]",
        "\"(\"@[a0a0a0]",
        "\"\"\"@[a0a0a0]",
        "\"eVil\"@[a0a0a0]",
        "\"EVIL\"@[a0a0a0]",
        "\"ev_il\"@[a0a0a0]",
        "\"ev il\"@[a0a0a0]",
        "\"ev4il\"@[a0a0a0]",
        "\"e\"@[a0a0a0]",
        "\" \"@[a0a0a0]",
        "\"6\"@[a0a0a0]",
        "\"_\"@[a0a0a0]",
        "\"\"@[a0a0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@evilaA",
        "a.,;:s@\"]aa.,;:s@\"]@evilaaA",
        "a.,;:s@\"]aa.,;:s@\"]@evilaevilaAA",
        "a.,;:s@\"]aa.,;:s@\"]@AA",
        "a.,;:s@\"]aa.,;:s@\"]@evil]AA",
        "a.,;:s@\"]aa.,;:s@\"]@evil[AA",
        "a.,;:s@\"]aa.,;:s@\"]@evilAAA",
        "a.,;:s@\"]aa.,;:s@\"]@evil@AA",
        "a.,;:s@\"]aa.,;:s@\"]@evil>AA",
        "a.,;:s@\"]aa.,;:s@\"]@evil<AA",
        "a.,;:s@\"]aa.,;:s@\"]@evil;AA",
        "a.,;:s@\"]aa.,;:s@\"]@evil:AA",
        "a.,;:s@\"]aa.,;:s@\"]@evil0AA",
        "a.,;:s@\"]aa.,;:s@\"]@evil.AA",
        "a.,;:s@\"]aa.,;:s@\"]@evil-AA",
        "a.,;:s@\"]aa.,;:s@\"]@evil,AA",
        "a.,;:s@\"]aa.,;:s@\"]@evil)AA",
        "a.,;:s@\"]aa.,;:s@\"]@evil(AA",
        "a.,;:s@\"]aa.,;:s@\"]@evil\"AA",
        "a.,;:s@\"]aa.,;:s@\"]@evil AA",
        "a.,;:s@\"]aa.,;:s@\"]@]aAA",
        "a.,;:s@\"]aa.,;:s@\"]@[aAA",
        "a.,;:s@\"]aa.,;:s@\"]@@aAA",
        "a.,;:s@\"]aa.,;:s@\"]@>aAA",
        "a.,;:s@\"]aa.,;:s@\"]@<aAA",
        "a.,;:s@\"]aa.,;:s@\"]@;aAA",
        "a.,;:s@\"]aa.,;:s@\"]@:aAA",
        "a.,;:s@\"]aa.,;:s@\"]@.aAA",
        "a.,;:s@\"]aa.,;:s@\"]@-aAA",
        "a.,;:s@\"]aa.,;:s@\"]@,aAA",
        "a.,;:s@\"]aa.,;:s@\"]@)aAA",
        "a.,;:s@\"]aa.,;:s@\"]@(aAA",
        "a.,;:s@\"]aa.,;:s@\"]@\"aAA",
        "a.,;:s@\"]aa.,;:s@\"]@eVilaAA",
        "a.,;:s@\"]aa.,;:s@\"]@EVILaAA",
        "a.,;:s@\"]aa.,;:s@\"]@ev_ilaAA",
        "a.,;:s@\"]aa.,;:s@\"]@ev ilaAA",
        "a.,;:s@\"]aa.,;:s@\"]@ev4ilaAA",
        "a.,;:s@\"]aa.,;:s@\"]@eaAA",
        "a.,;:s@\"]aa.,;:s@\"]@ aAA",
        "a.,;:s@\"]aa.,;:s@\"]@6aAA",
        "a.,;:s@\"]aa.,;:s@\"]@_aAA",
        "a.,;:s@\"]aa.,;:s@\"]@aAA",
        "a.,;:s@\"]aa.,;:s@\"]@[a0a0a0000]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0a0a000]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0a0a]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0a0]0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0a0[0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0a0A0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0a0@0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0a0>0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0a0<0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0a0;0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0a0:0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0a000]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0a0.0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0a0-0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0a0,0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0a0)0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0a0(0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0a0\"0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0a0 0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0a0000a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0a000a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0aa0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0]0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0[0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0A0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0@0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0>0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0<0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0;0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0:0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a000a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0.0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0-0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0,0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0)0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0(0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0\"0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0 0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a0000a0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[a000a0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[aa0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[]0a0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[[0a0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[A0a0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[@0a0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[>0a0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[<0a0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[;0a0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[:0a0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[00a0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[.0a0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[-0a0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[,0a0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[)0a0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[(0a0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[\"0a0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[ 0a0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[[[[a0a0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@[[[a0a0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@a0a0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@0a0a0a0]",
        "a.,;:s@\"]aa.,;:s@\"]aa.,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"]aa.,;:s@\"]]@[a0a0a0]",
        "a.,;:s@\"]aa.,;:s@\"@[a0a0a0]",
        "a.,;:s@\"]a].,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"]a[.,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"]aA.,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"]a@.,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"]a>.,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"]a<.,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"]a;.,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"]a:.,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"]a0.,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"]a..,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"]a-.,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"]a,.,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"]a).,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"]a(.,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"]a\".,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"]a .,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"]]a.,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"][a.,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"]Aa.,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"]@a.,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"]>a.,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"]<a.,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"];a.,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"]:a.,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"]0a.,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"].a.,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"]-a.,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"],a.,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"])a.,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"](a.,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"]\"a.,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"] a.,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"]]aa.,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"aa.,;:s@\"]@[a0a0a0]",
        "].,;:s@\"]aa.,;:s@\"]@[a0a0a0]",
        "[.,;:s@\"]aa.,;:s@\"]@[a0a0a0]",
        "A.,;:s@\"]aa.,;:s@\"]@[a0a0a0]",
        "@.,;:s@\"]aa.,;:s@\"]@[a0a0a0]",
        ">.,;:s@\"]aa.,;:s@\"]@[a0a0a0]",
        "<.,;:s@\"]aa.,;:s@\"]@[a0a0a0]",
        ";.,;:s@\"]aa.,;:s@\"]@[a0a0a0]",
        ":.,;:s@\"]aa.,;:s@\"]@[a0a0a0]",
        "0.,;:s@\"]aa.,;:s@\"]@[a0a0a0]",
        "..,;:s@\"]aa.,;:s@\"]@[a0a0a0]",
        "-.,;:s@\"]aa.,;:s@\"]@[a0a0a0]",
        ",.,;:s@\"]aa.,;:s@\"]@[a0a0a0]",
        ").,;:s@\"]aa.,;:s@\"]@[a0a0a0]",
        "(.,;:s@\"]aa.,;:s@\"]@[a0a0a0]",
        "\".,;:s@\"]aa.,;:s@\"]@[a0a0a0]",
        " .,;:s@\"]aa.,;:s@\"]@[a0a0a0]",
        "a.,;:s@\"]@evilaAA",
        "a.,;:s@\"]@[a0a0a0]",
        "\"evil\"@[a0a0a0]",
        "a.,;:s@\"]aa.,;:s@\"]@evilaAA",
        "a.,;:s@\"]aa.,;:s@\"]@[a0a0a0]"
      ]
    },
    {
      "regex": "\\{\\*[\\s\\S]*?\\*\\}|\\{[\\s\\S]+?\\}",
      "exceptionStackTrace": null,
      "matches": [
        "{}}",
        "{{}",
        "{*}",
        "{eVil}",
        "{EVIL}",
        "{ev_il}",
        "{ev il}",
        "{ev4il}",
        "{e}",
        "{ }",
        "{6}",
        "{_}",
        "{}",
        "{*}*}",
        "{*{*}",
        "{***}",
        "{*eVil*}",
        "{*EVIL*}",
        "{*ev_il*}",
        "{*ev il*}",
        "{*ev4il*}",
        "{*e*}",
        "{* *}",
        "{*6*}",
        "{*_*}",
        "{**}",
        "{evil}",
        "{*evil*}"
      ]
    },
    {
      "regex": "<a href=\"/admin/posts/\\d+/edit\\?locale=en\">Hello World</a>",
      "exceptionStackTrace": null,
      "matches": [
        "<a href=\"/admin/posts/00/edit?locale=en\">Hello World</a>",
        "<a href=\"/admin/posts//edit?locale=en\">Hello World</a>",
        "<a href=\"/admin/posts/0/edit?locale=en\">Hello World</a>"
      ]
    },
    {
      "regex": "(?<![<>])(<S>[Ff]aoin?<\\/S> <V cop=\"y\">(?:is|ar|arb)<\\/V>)(?![<>])",
      "exceptionStackTrace": null,
      "matches": [
        "<S>faoinn</S> <V cop=\"y\">is</V>",
        "<S>aaoin</S> <V cop=\"y\">is</V>",
        "<S>Faoin</S> <V cop=\"y\">is</V>",
        "<S>Aaoin</S> <V cop=\"y\">is</V>",
        "<S>faoi</S> <V cop=\"y\">arb</V>",
        "<S>faoi</S> <V cop=\"y\">ar</V>",
        "<S>faoi</S> <V cop=\"y\">is</V>",
        "<S>faoin</S> <V cop=\"y\">arb</V>",
        "<S>faoin</S> <V cop=\"y\">ar</V>",
        "<S>faoin</S> <V cop=\"y\">is</V>"
      ]
    },
    {
      "regex": "([aeou])de$",
      "exceptionStackTrace": null,
      "matches": ["ode", "ede", "bde", "ade", "ude"]
    },
    {
      "regex": "^git@([^:\\/]+):([^/]+)/([^/]+)",
      "exceptionStackTrace": null,
      "matches": [
        "git@evil:evil/@",
        "git@evil:evil/:",
        "git@evil:evil//",
        "git@evil:evil/eVil",
        "git@evil:evil/EVIL",
        "git@evil:evil/ev_il",
        "git@evil:evil/ev il",
        "git@evil:evil/ev4il",
        "git@evil:evil/e",
        "git@evil:evil/ ",
        "git@evil:evil/6",
        "git@evil:evil/_",
        "git@evil:evil/",
        "git@evil:@/evil",
        "git@evil::/evil",
        "git@evil://evil",
        "git@evil:eVil/evil",
        "git@evil:EVIL/evil",
        "git@evil:ev_il/evil",
        "git@evil:ev il/evil",
        "git@evil:ev4il/evil",
        "git@evil:e/evil",
        "git@evil: /evil",
        "git@evil:6/evil",
        "git@evil:_/evil",
        "git@evil:/evil",
        "git@@:evil/evil",
        "git@::evil/evil",
        "git@/:evil/evil",
        "git@eVil:evil/evil",
        "git@EVIL:evil/evil",
        "git@ev_il:evil/evil",
        "git@ev il:evil/evil",
        "git@ev4il:evil/evil",
        "git@e:evil/evil",
        "git@ :evil/evil",
        "git@6:evil/evil",
        "git@_:evil/evil",
        "git@:evil/evil",
        "git@evil:evil/evil"
      ]
    },
    {
      "regex": "no invoice",
      "exceptionStackTrace": null,
      "matches": ["no invoice"]
    },
    {
      "regex": "<title[^>]*>(.*?)<\\/title>",
      "exceptionStackTrace": null,
      "matches": [
        "<titleevil>></title>",
        "<titleevil><</title>",
        "<titleevil>/</title>",
        "<titleevil>eVil</title>",
        "<titleevil>EVIL</title>",
        "<titleevil>ev_il</title>",
        "<titleevil>ev il</title>",
        "<titleevil>ev4il</title>",
        "<titleevil>e</title>",
        "<titleevil> </title>",
        "<titleevil>6</title>",
        "<titleevil>_</title>",
        "<titleevil></title>",
        "<title>>evil</title>",
        "<title<>evil</title>",
        "<title/>evil</title>",
        "<titleeVil>evil</title>",
        "<titleEVIL>evil</title>",
        "<titleev_il>evil</title>",
        "<titleev il>evil</title>",
        "<titleev4il>evil</title>",
        "<titlee>evil</title>",
        "<title >evil</title>",
        "<title6>evil</title>",
        "<title_>evil</title>",
        "<title>evil</title>",
        "<title></title>",
        "<titleevil>evil</title>"
      ]
    },
    {
      "regex": ".+trying to set field missing which is not declared in the model.",
      "exceptionStackTrace": null,
      "matches": [
        "eviltrying to set field missing which is not declared in the model_",
        "eviltrying to set field missing which is not declared in the modelA",
        "eviltrying to set field missing which is not declared in the model0",
        "eviltrying to set field missing which is not declared in the model ",
        "eViltrying to set field missing which is not declared in the modela",
        "EVILtrying to set field missing which is not declared in the modela",
        "ev_iltrying to set field missing which is not declared in the modela",
        "ev iltrying to set field missing which is not declared in the modela",
        "ev4iltrying to set field missing which is not declared in the modela",
        "etrying to set field missing which is not declared in the modela",
        " trying to set field missing which is not declared in the modela",
        "6trying to set field missing which is not declared in the modela",
        "_trying to set field missing which is not declared in the modela",
        "trying to set field missing which is not declared in the modela",
        "eviltrying to set field missing which is not declared in the modela"
      ]
    },
    {
      "regex": "Can't.*'zzz'",
      "exceptionStackTrace": null,
      "matches": [
        "Can't''zzz'",
        "Can'teVil'zzz'",
        "Can'tEVIL'zzz'",
        "Can'tev_il'zzz'",
        "Can'tev il'zzz'",
        "Can'tev4il'zzz'",
        "Can'te'zzz'",
        "Can't 'zzz'",
        "Can't6'zzz'",
        "Can't_'zzz'",
        "Can't'zzz'",
        "Can'tevil'zzz'"
      ]
    },
    {
      "regex": "^(?:entry|\\*)$",
      "exceptionStackTrace": null,
      "matches": ["*", "entry"]
    },
    {
      "regex": "\\b(?:m|qr)\\s*([^a-zA-Z0-9\\s\\{\\(\\[<])(\\\\?.)*?\\s*\\1[msixpodualgc]*",
      "exceptionStackTrace": null,
      "matches": [
        "m !\\a !cc",
        "m !\\a !",
        "m !\\a !x",
        "m !\\a !u",
        "m !\\a !s",
        "m !\\a !p",
        "m !\\a !o",
        "m !\\a !m",
        "m !\\a !l",
        "m !\\a !i",
        "m !\\a !g",
        "m !\\a !d",
        "m !\\a !b",
        "m !\\a !a",
        "m !\\a  !c",
        "m !\\a!c",
        "m !\\a\\a !c",
        "m ! !c",
        "m !\\{ !c",
        "m !\\\\ !c",
        "m !\\[ !c",
        "m !\\A !c",
        "m !\\< !c",
        "m !\\0 !c",
        "m !\\( !c",
        "m !\\  !c",
        "m !\\\\a !c",
        "m !a !c",
        "m {\\a !c",
        "m a\\a !c",
        "m \\\\a !c",
        "m [\\a !c",
        "m A\\a !c",
        "m <\\a !c",
        "m 0\\a !c",
        "m (\\a !c",
        "m  \\a !c",
        "m  !\\a !c",
        "m!\\a !c",
        "qr!!",
        "m!!",
        "qr !\\a !c",
        "m !\\a !c"
      ]
    },
    {
      "regex": "^(?:\\s+\\n+)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "\n        ((?>/\\*.*?\\*/\\s+))\n        (static\\s+)?\n        void\\s+\n        Init_",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?>"
      },
      "matches": []
    },
    {
      "regex": "(^|[^0-9A-Za-z\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u024f\u0300-\u0374\u0376-\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u03ff\u1dc0-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u20d0-\u20ff\u2c60-\u2c7f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua7ff])((?:\u0392['\u02b9\u0374\u0384\u2019][\\s\\xa0]*[\u0388\u0395]\u03c3\u03b4\u03c1\u03b1\u03c2|2Esd|\u0392['\u02b9\u0374\u0384\u2019][\\s\\xa0]*[\u0388\u0395]\u03c3\u03b4\u03c1?|[\u0388\u0395]\u03c3\u03b4\u03c1\u03b1\u03c2[\\s\\xa0]*\u0392['\u02b9\u0374\u0384\u2019]))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 160"
      },
      "matches": []
    },
    {
      "regex": "(?<_1>.|(?<_2>\\\\.))\\-(?<_3>[^\\]]|(?<_4>\\\\.))",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<_"
      },
      "matches": []
    },
    {
      "regex": "^(https?://)([^@]+)@(.+:[0-9]+)$",
      "exceptionStackTrace": null,
      "matches": [
        "https://evil@evil:00",
        "https://evil@evil:",
        "https://evil@@:0",
        "https://evil@::0",
        "https://evil@/:0",
        "https://evil@eVil:0",
        "https://evil@EVIL:0",
        "https://evil@ev_il:0",
        "https://evil@ev il:0",
        "https://evil@ev4il:0",
        "https://evil@e:0",
        "https://evil@ :0",
        "https://evil@6:0",
        "https://evil@_:0",
        "https://evil@:0",
        "https://@@evil:0",
        "https://:@evil:0",
        "https:///@evil:0",
        "https://eVil@evil:0",
        "https://EVIL@evil:0",
        "https://ev_il@evil:0",
        "https://ev il@evil:0",
        "https://ev4il@evil:0",
        "https://e@evil:0",
        "https:// @evil:0",
        "https://6@evil:0",
        "https://_@evil:0",
        "https://@evil:0",
        "httpss://evil@evil:0",
        "http://evil@evil:0",
        "https://evil@evil:0"
      ]
    },
    {
      "regex": "<p>by (.*?)<br",
      "exceptionStackTrace": null,
      "matches": [
        "<p>by ><br",
        "<p>by <<br",
        "<p>by eVil<br",
        "<p>by EVIL<br",
        "<p>by ev_il<br",
        "<p>by ev il<br",
        "<p>by ev4il<br",
        "<p>by e<br",
        "<p>by  <br",
        "<p>by 6<br",
        "<p>by _<br",
        "<p>by <br",
        "<p>by evil<br"
      ]
    },
    {
      "regex": ".*-([0-9a-f]{1,8})",
      "exceptionStackTrace": null,
      "matches": [
        "evil-aaaaaaaaa",
        "evil-aaaaaaaa",
        "evil-",
        "evil-g",
        "evil-0",
        "--a",
        "eVil-a",
        "EVIL-a",
        "ev_il-a",
        "ev il-a",
        "ev4il-a",
        "e-a",
        " -a",
        "6-a",
        "_-a",
        "-a",
        "evil-a"
      ]
    },
    {
      "regex": "\\A(?:NULLS\\s+LAST)",
      "exceptionStackTrace": null,
      "matches": ["NULLS  LAST", "NULLSLAST", "NULLS LAST"]
    },
    {
      "regex": "SVt_(\\w+),?\\s+/\\*\\s+(\\d+)\\s+\\*/",
      "exceptionStackTrace": null,
      "matches": [
        "SVt_evil, /* 0  */",
        "SVt_evil, /* 0*/",
        "SVt_evil, /* 00 */",
        "SVt_evil, /*  */",
        "SVt_evil, /*  0 */",
        "SVt_evil, /*0 */",
        "SVt_evil,  /* 0 */",
        "SVt_evil,/* 0 */",
        "SVt_evil,, /* 0 */",
        "SVt_eVil, /* 0 */",
        "SVt_EVIL, /* 0 */",
        "SVt_ev_il, /* 0 */",
        "SVt_ev il, /* 0 */",
        "SVt_ev4il, /* 0 */",
        "SVt_e, /* 0 */",
        "SVt_ , /* 0 */",
        "SVt_6, /* 0 */",
        "SVt__, /* 0 */",
        "SVt_, /* 0 */",
        "SVt_evil /* 0 */",
        "SVt_evil, /* 0 */"
      ]
    },
    {
      "regex": "CHECK: INST HEALTH_STATUS TEMP1 == -200.0 failed",
      "exceptionStackTrace": null,
      "matches": [
        "CHECK: INST HEALTH_STATUS TEMP1 == -200_0 failed",
        "CHECK: INST HEALTH_STATUS TEMP1 == -200A0 failed",
        "CHECK: INST HEALTH_STATUS TEMP1 == -200=0 failed",
        "CHECK: INST HEALTH_STATUS TEMP1 == -200:0 failed",
        "CHECK: INST HEALTH_STATUS TEMP1 == -20000 failed",
        "CHECK: INST HEALTH_STATUS TEMP1 == -200-0 failed",
        "CHECK: INST HEALTH_STATUS TEMP1 == -200 0 failed",
        "CHECK: INST HEALTH_STATUS TEMP1 == -200a0 failed"
      ]
    },
    {
      "regex": "^.*(\\.({|{[a-zA-Z,]*,)|\\.)(png)(,[,a-zA-Z]*}|}|)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil.{},png,evil}",
        "evil.{{,png,evil}",
        "evil.{.,png,evil}",
        "evil.{,,png,evil}",
        "evil.{eVil,png,evil}",
        "evil.{EVIL,png,evil}",
        "evil.{ev_il,png,evil}",
        "evil.{ev il,png,evil}",
        "evil.{ev4il,png,evil}",
        "evil.{e,png,evil}",
        "evil.{ ,png,evil}",
        "evil.{6,png,evil}",
        "evil.{_,png,evil}",
        "evil.{,png,evil}",
        "evil.{png}}",
        "evil.{png",
        "evil.{png,}}",
        "evil.{png,{}",
        "evil.{png,.}",
        "evil.{png,,}",
        "evil.{png,eVil}",
        "evil.{png,EVIL}",
        "evil.{png,ev_il}",
        "evil.{png,ev il}",
        "evil.{png,ev4il}",
        "evil.{png,e}",
        "evil.{png, }",
        "evil.{png,6}",
        "evil.{png,_}",
        "evil.{png,}",
        "}.{png,evil}",
        "{.{png,evil}",
        "..{png,evil}",
        ",.{png,evil}",
        "eVil.{png,evil}",
        "EVIL.{png,evil}",
        "ev_il.{png,evil}",
        "ev il.{png,evil}",
        "ev4il.{png,evil}",
        "e.{png,evil}",
        " .{png,evil}",
        "6.{png,evil}",
        "_.{png,evil}",
        ".{png,evil}",
        ".png,}",
        ".{,png,}",
        ".{png",
        ".{png,}",
        "evil.png,evil}",
        "evil.{evil,png,evil}",
        "evil.{png}",
        "evil.{png,evil}"
      ]
    },
    {
      "regex": "^((0|[1-9][0-9]*)(\\.[0-9]+)?)(ms|s|m|h|d|w|M|y|)$",
      "exceptionStackTrace": null,
      "matches": [
        "100.0ms",
        "1.0ms",
        "00.0ms",
        "0.0yy",
        "0.0",
        "0.0.0ms",
        "0.00ms",
        "0.ms",
        "1ms",
        "0",
        "0M",
        "0w",
        "0d",
        "0h",
        "0m",
        "0s",
        "0ms",
        "10.0ms",
        "0.0y",
        "0.0M",
        "0.0w",
        "0.0d",
        "0.0h",
        "0.0m",
        "0.0s",
        "0.0ms"
      ]
    },
    { "regex": "{{!}},", "exceptionStackTrace": null, "matches": ["{{!}},"] },
    {
      "regex": ".*/lookup\\b.*",
      "exceptionStackTrace": null,
      "matches": [
        "evil/lookup/",
        "evil/lookupeVil",
        "evil/lookupEVIL",
        "evil/lookupev_il",
        "evil/lookupev il",
        "evil/lookupev4il",
        "evil/lookupe",
        "evil/lookup ",
        "evil/lookup6",
        "evil/lookup_",
        "evil/lookup",
        "//lookupevil",
        "eVil/lookupevil",
        "EVIL/lookupevil",
        "ev_il/lookupevil",
        "ev il/lookupevil",
        "ev4il/lookupevil",
        "e/lookupevil",
        " /lookupevil",
        "6/lookupevil",
        "_/lookupevil",
        "/lookupevil",
        "/lookup",
        "evil/lookupevil"
      ]
    },
    { "regex": "^noop$", "exceptionStackTrace": null, "matches": ["noop"] },
    {
      "regex": "(?><<-'((?:\\w+_|)SQL)')",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?>"
      },
      "matches": []
    },
    {
      "regex": "(\\d+[.,]?\\d*)(\\+(\\d+[.,]?\\d*)){1}i",
      "exceptionStackTrace": null,
      "matches": [
        "0,0+0,0+0,0i",
        "0,0i",
        "0,0+0,00i",
        "0,0+0,i",
        "0,0+0,,0i",
        "0,0+00i",
        "0,0+0.0i",
        "0,0+00,0i",
        "0,0+,0i",
        "0,00+0,0i",
        "0,+0,0i",
        "0,,0+0,0i",
        "00+0,0i",
        "0.0+0,0i",
        "00,0+0,0i",
        ",0+0,0i",
        "0+0i",
        "0,0+0,0i"
      ]
    },
    {
      "regex": "^[\\s\\S]+",
      "exceptionStackTrace": null,
      "matches": [
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    { "regex": "\\$|n:", "exceptionStackTrace": null, "matches": ["n:", "$"] },
    {
      "regex": "[^A-Z0-9:]+",
      "exceptionStackTrace": null,
      "matches": [
        ":",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "^-(pluggable_options|load_plugins)$",
      "exceptionStackTrace": null,
      "matches": ["-load_plugins", "-pluggable_options"]
    },
    {
      "regex": "length.js v.* ",
      "exceptionStackTrace": null,
      "matches": [
        "lengthajs veVil ",
        "lengthajs vEVIL ",
        "lengthajs vev_il ",
        "lengthajs vev il ",
        "lengthajs vev4il ",
        "lengthajs ve ",
        "lengthajs v  ",
        "lengthajs v6 ",
        "lengthajs v_ ",
        "length_js vevil ",
        "lengthAjs vevil ",
        "length0js vevil ",
        "length js vevil ",
        "lengthajs v ",
        "lengthajs vevil "
      ]
    },
    {
      "regex": "(\".+?\")",
      "exceptionStackTrace": null,
      "matches": [
        "\"\"\"",
        "\"eVil\"",
        "\"EVIL\"",
        "\"ev_il\"",
        "\"ev il\"",
        "\"ev4il\"",
        "\"e\"",
        "\" \"",
        "\"6\"",
        "\"_\"",
        "\"\"",
        "\"evil\""
      ]
    },
    {
      "regex": "[^a-zA-Z\\-]*width: *([0-9]+)px",
      "exceptionStackTrace": null,
      "matches": [
        "evilwidth: 00px",
        "evilwidth: px",
        "evilwidth:  0px",
        "evilwidth:0px",
        ":width: 0px",
        "-width: 0px",
        "eVilwidth: 0px",
        "EVILwidth: 0px",
        "ev_ilwidth: 0px",
        "ev ilwidth: 0px",
        "ev4ilwidth: 0px",
        "ewidth: 0px",
        " width: 0px",
        "6width: 0px",
        "_width: 0px",
        "width: 0px",
        "width:0px",
        "evilwidth: 0px"
      ]
    },
    {
      "regex": "<td class=\"title\"><span class=\"title\">Format</span></td>\\s*<td><span class=\"object\">([^<]+)",
      "exceptionStackTrace": null,
      "matches": [
        "<td class=\"title\"><span class=\"title\">Format</span></td> <td><span class=\"object\">>",
        "<td class=\"title\"><span class=\"title\">Format</span></td> <td><span class=\"object\">=",
        "<td class=\"title\"><span class=\"title\">Format</span></td> <td><span class=\"object\"><",
        "<td class=\"title\"><span class=\"title\">Format</span></td> <td><span class=\"object\">/",
        "<td class=\"title\"><span class=\"title\">Format</span></td> <td><span class=\"object\">\"",
        "<td class=\"title\"><span class=\"title\">Format</span></td> <td><span class=\"object\">eVil",
        "<td class=\"title\"><span class=\"title\">Format</span></td> <td><span class=\"object\">EVIL",
        "<td class=\"title\"><span class=\"title\">Format</span></td> <td><span class=\"object\">ev_il",
        "<td class=\"title\"><span class=\"title\">Format</span></td> <td><span class=\"object\">ev il",
        "<td class=\"title\"><span class=\"title\">Format</span></td> <td><span class=\"object\">ev4il",
        "<td class=\"title\"><span class=\"title\">Format</span></td> <td><span class=\"object\">e",
        "<td class=\"title\"><span class=\"title\">Format</span></td> <td><span class=\"object\"> ",
        "<td class=\"title\"><span class=\"title\">Format</span></td> <td><span class=\"object\">6",
        "<td class=\"title\"><span class=\"title\">Format</span></td> <td><span class=\"object\">_",
        "<td class=\"title\"><span class=\"title\">Format</span></td> <td><span class=\"object\">",
        "<td class=\"title\"><span class=\"title\">Format</span></td>  <td><span class=\"object\">evil",
        "<td class=\"title\"><span class=\"title\">Format</span></td><td><span class=\"object\">evil",
        "<td class=\"title\"><span class=\"title\">Format</span></td> <td><span class=\"object\">evil"
      ]
    },
    {
      "regex": "^[[:alpha:]_]$",
      "exceptionStackTrace": null,
      "matches": ["p_]", "l_]", "h_]", "b_]", "a_]", "[_]", ":_]"]
    },
    {
      "regex": "speaks? \\d\\d? language",
      "exceptionStackTrace": null,
      "matches": [
        "speaks 000 language",
        "speaks 0 language",
        "speakss 00 language",
        "speak 00 language",
        "speak 0 language",
        "speaks 00 language"
      ]
    },
    {
      "regex": "^-?-verbose",
      "exceptionStackTrace": null,
      "matches": ["---verbose", "-verbose", "--verbose"]
    },
    {
      "regex": "^\"(?:[^\\n\\f\\r\"\\\\]|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\S\\s])*\"",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^([\\s\\n\\t]*|\\s*\\/\\*.*?\\*\\/\\s*)graph\\s*:\\s*\\{",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "( |\\().*",
      "exceptionStackTrace": null,
      "matches": [
        " (",
        " eVil",
        " EVIL",
        " ev_il",
        " ev il",
        " ev4il",
        " e",
        "  ",
        " 6",
        " _",
        "(",
        " ",
        "(evil",
        " evil"
      ]
    },
    {
      "regex": "[\\w\\d]+\\.[a-zA-Z]{2,}$",
      "exceptionStackTrace": null,
      "matches": [
        "evil.A",
        "evil.aA",
        "eVil.AA",
        "EVIL.AA",
        "ev_il.AA",
        "ev il.AA",
        "ev4il.AA",
        "e.AA",
        " .AA",
        "6.AA",
        "_.AA",
        ".AA",
        "evil.AA"
      ]
    },
    {
      "regex": "Cyclical dependency detected between a <-> c",
      "exceptionStackTrace": null,
      "matches": ["Cyclical dependency detected between a <-> c"]
    },
    {
      "regex": "[\\u042E]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 1070"
      },
      "matches": []
    },
    {
      "regex": "\\.(?:less|css)$",
      "exceptionStackTrace": null,
      "matches": [".css", ".less"]
    },
    {
      "regex": "^[cC] ",
      "exceptionStackTrace": null,
      "matches": ["c ", "a ", "A ", "C "]
    },
    {
      "regex": "(\\s*\\n)+",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "${killfile_message_ids}",
      "exceptionStackTrace": null,
      "matches": ["{killfile_message_ids}"]
    },
    {
      "regex": "^[a-zA-Z]:[/\\\\]",
      "exceptionStackTrace": null,
      "matches": ["A:/", "a:\\", "A:\\"]
    },
    {
      "regex": "x(?:...|(...))\\1x",
      "exceptionStackTrace": null,
      "matches": [
        "xaa_x",
        "xaaAx",
        "xaa0x",
        "xaa x",
        "xa_ax",
        "xaAax",
        "xa0ax",
        "xa ax",
        "x_aax",
        "xAaax",
        "x0aax",
        "x aax",
        "xaaax"
      ]
    },
    {
      "regex": "\\bchd=s:A_9\\b",
      "exceptionStackTrace": null,
      "matches": ["chd=s:A_9"]
    },
    { "regex": "[ .]$", "exceptionStackTrace": null, "matches": [" ", "."] },
    {
      "regex": "\\Alast\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": ".*<title>(.+)</title>.*",
      "exceptionStackTrace": null,
      "matches": [
        "evil<title>evil</title>>",
        "evil<title>evil</title><",
        "evil<title>evil</title>/",
        "evil<title>evil</title>eVil",
        "evil<title>evil</title>EVIL",
        "evil<title>evil</title>ev_il",
        "evil<title>evil</title>ev il",
        "evil<title>evil</title>ev4il",
        "evil<title>evil</title>e",
        "evil<title>evil</title> ",
        "evil<title>evil</title>6",
        "evil<title>evil</title>_",
        "evil<title>evil</title>",
        "evil<title>></title>evil",
        "evil<title><</title>evil",
        "evil<title>/</title>evil",
        "evil<title>eVil</title>evil",
        "evil<title>EVIL</title>evil",
        "evil<title>ev_il</title>evil",
        "evil<title>ev il</title>evil",
        "evil<title>ev4il</title>evil",
        "evil<title>e</title>evil",
        "evil<title> </title>evil",
        "evil<title>6</title>evil",
        "evil<title>_</title>evil",
        "evil<title></title>evil",
        "><title>evil</title>evil",
        "<<title>evil</title>evil",
        "/<title>evil</title>evil",
        "eVil<title>evil</title>evil",
        "EVIL<title>evil</title>evil",
        "ev_il<title>evil</title>evil",
        "ev il<title>evil</title>evil",
        "ev4il<title>evil</title>evil",
        "e<title>evil</title>evil",
        " <title>evil</title>evil",
        "6<title>evil</title>evil",
        "_<title>evil</title>evil",
        "<title>evil</title>evil",
        "<title>evil</title>",
        "evil<title>evil</title>evil"
      ]
    },
    {
      "regex": "at Array\\.map \\((native|<anonymous>)\\)",
      "exceptionStackTrace": null,
      "matches": ["at Array.map (<anonymous>)", "at Array.map (native)"]
    },
    {
      "regex": "^processing-instruction\\(\\)$",
      "exceptionStackTrace": null,
      "matches": ["processing-instruction()"]
    },
    {
      "regex": "background:(.+?)[; \"]{1,1}",
      "exceptionStackTrace": null,
      "matches": [
        "background:evil\"\"",
        "background:evil",
        "background:evil;",
        "background:evil ",
        "background:;\"",
        "background::\"",
        "background:\"\"",
        "background:eVil\"",
        "background:EVIL\"",
        "background:ev_il\"",
        "background:ev il\"",
        "background:ev4il\"",
        "background:e\"",
        "background: \"",
        "background:6\"",
        "background:_\"",
        "background:\"",
        "background:evil\""
      ]
    },
    { "regex": "msgctxt", "exceptionStackTrace": null, "matches": ["msgctxt"] },
    {
      "regex": "g/\\n\\n+/\\n/;               # no empty lines\n      $val ~~ s",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^\\*\\*\\*VAR\\*\\*\\* ([^:]*): (.*)\\*\\*\\*$",
      "exceptionStackTrace": null,
      "matches": [
        "***VAR*** evil: :***",
        "***VAR*** evil: ****",
        "***VAR*** evil: eVil***",
        "***VAR*** evil: EVIL***",
        "***VAR*** evil: ev_il***",
        "***VAR*** evil: ev il***",
        "***VAR*** evil: ev4il***",
        "***VAR*** evil: e***",
        "***VAR*** evil:  ***",
        "***VAR*** evil: 6***",
        "***VAR*** evil: _***",
        "***VAR*** evil: ***",
        "***VAR*** :: evil***",
        "***VAR*** *: evil***",
        "***VAR*** eVil: evil***",
        "***VAR*** EVIL: evil***",
        "***VAR*** ev_il: evil***",
        "***VAR*** ev il: evil***",
        "***VAR*** ev4il: evil***",
        "***VAR*** e: evil***",
        "***VAR***  : evil***",
        "***VAR*** 6: evil***",
        "***VAR*** _: evil***",
        "***VAR*** : evil***",
        "***VAR*** : ***",
        "***VAR*** evil: evil***"
      ]
    },
    {
      "regex": "^ {6}- (ADDED|FIXED|CHANGED|REMOVED): ",
      "exceptionStackTrace": null,
      "matches": [
        "       - ADDED: ",
        "     - ADDED: ",
        "      - REMOVED: ",
        "      - CHANGED: ",
        "      - FIXED: ",
        "      - ADDED: "
      ]
    },
    {
      "regex": "^$data_dir",
      "exceptionStackTrace": null,
      "matches": ["data_dir"]
    },
    {
      "regex": "\\.(d|spec|test|fake)\\.ts",
      "exceptionStackTrace": null,
      "matches": [".fake.ts", ".test.ts", ".spec.ts", ".d.ts"]
    },
    {
      "regex": "#.*\\Q$keyword\\E isa ($CLASS)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\Q"
      },
      "matches": []
    },
    {
      "regex": "script1\\.js\\.js",
      "exceptionStackTrace": null,
      "matches": ["script1.js.js"]
    },
    {
      "regex": "^/([a-zA-Z_][a-zA-Z0-9._-]*)\\((.*)\\)$",
      "exceptionStackTrace": null,
      "matches": [
        "/_evil(/)",
        "/_evil(.)",
        "/_evil(-)",
        "/_evil())",
        "/_evil(()",
        "/_evil(eVil)",
        "/_evil(EVIL)",
        "/_evil(ev_il)",
        "/_evil(ev il)",
        "/_evil(ev4il)",
        "/_evil(e)",
        "/_evil( )",
        "/_evil(6)",
        "/_evil(_)",
        "/_evil()",
        "/_/(evil)",
        "/_.(evil)",
        "/_-(evil)",
        "/_)(evil)",
        "/_((evil)",
        "/_eVil(evil)",
        "/_EVIL(evil)",
        "/_ev_il(evil)",
        "/_ev il(evil)",
        "/_ev4il(evil)",
        "/_e(evil)",
        "/_ (evil)",
        "/_6(evil)",
        "/__(evil)",
        "/_(evil)",
        "/aevil(evil)",
        "/Aevil(evil)",
        "/_()",
        "/_evil(evil)"
      ]
    },
    {
      "regex": "<span class=\\\"",
      "exceptionStackTrace": null,
      "matches": ["<span class=\""]
    },
    {
      "regex": "rel=\"privacy\"",
      "exceptionStackTrace": null,
      "matches": ["rel=\"privacy\""]
    },
    {
      "regex": "DeviceID: (?P<deviceID>[0-9]+)",
      "exceptionStackTrace": null,
      "matches": ["DeviceID: 00", "DeviceID: ", "DeviceID: 0"]
    },
    {
      "regex": "client host.*blocked",
      "exceptionStackTrace": null,
      "matches": [
        "client hosteVilblocked",
        "client hostEVILblocked",
        "client hostev_ilblocked",
        "client hostev ilblocked",
        "client hostev4ilblocked",
        "client hosteblocked",
        "client host blocked",
        "client host6blocked",
        "client host_blocked",
        "client hostblocked",
        "client hostevilblocked"
      ]
    },
    {
      "regex": "^([0-9]+)-(old|new|throw|user|db)\\.json$",
      "exceptionStackTrace": null,
      "matches": [
        "00-old.json",
        "-old.json",
        "0-db.json",
        "0-user.json",
        "0-throw.json",
        "0-new.json",
        "0-old.json"
      ]
    },
    {
      "regex": "(.+)(\\.[^.]+$)",
      "exceptionStackTrace": null,
      "matches": [
        "evil..",
        "evil.eVil",
        "evil.EVIL",
        "evil.ev_il",
        "evil.ev il",
        "evil.ev4il",
        "evil.e",
        "evil. ",
        "evil.6",
        "evil._",
        "evil.",
        "..evil",
        "eVil.evil",
        "EVIL.evil",
        "ev_il.evil",
        "ev il.evil",
        "ev4il.evil",
        "e.evil",
        " .evil",
        "6.evil",
        "_.evil",
        ".evil",
        "evil.evil"
      ]
    },
    {
      "regex": "^\\d+(\\.\\d*)?\\Z",
      "exceptionStackTrace": null,
      "matches": ["0.0.0", "0.00", "0.", "00.0", ".0", "0", "0.0"]
    },
    {
      "regex": "^extensions$",
      "exceptionStackTrace": null,
      "matches": ["extensions"]
    },
    {
      "regex": "\\G\\w+\\s*",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\G"
      },
      "matches": []
    },
    {
      "regex": "The option \"datadir\" must be set to the place your wallet.dat is set.",
      "exceptionStackTrace": null,
      "matches": [
        "The option \"datadir\" must be set to the place your walletadat is setA",
        "The option \"datadir\" must be set to the place your walletadat is set0",
        "The option \"datadir\" must be set to the place your walletadat is set\"",
        "The option \"datadir\" must be set to the place your walletadat is set ",
        "The option \"datadir\" must be set to the place your walletAdat is seta",
        "The option \"datadir\" must be set to the place your wallet0dat is seta",
        "The option \"datadir\" must be set to the place your wallet\"dat is seta",
        "The option \"datadir\" must be set to the place your wallet dat is seta",
        "The option \"datadir\" must be set to the place your walletadat is seta"
      ]
    },
    {
      "regex": "build-esm",
      "exceptionStackTrace": null,
      "matches": ["build-esm"]
    },
    {
      "regex": "\\A~{3,}\\s*\\Z",
      "exceptionStackTrace": null,
      "matches": ["~~~  ", "~~ ", "~~~", "~~~ "]
    },
    {
      "regex": "Cure(Egret|Windy)",
      "exceptionStackTrace": null,
      "matches": ["CureWindy", "CureEgret"]
    },
    {
      "regex": "^a newly created Subversion project$",
      "exceptionStackTrace": null,
      "matches": ["a newly created Subversion project"]
    },
    {
      "regex": "^_.*?_(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "_evil_eVil",
        "_evil_EVIL",
        "_evil_ev_il",
        "_evil_ev il",
        "_evil_ev4il",
        "_evil_e",
        "_evil_ ",
        "_evil_6",
        "_evil__",
        "_evil_",
        "_eVil_evil",
        "_EVIL_evil",
        "_ev_il_evil",
        "_ev il_evil",
        "_ev4il_evil",
        "_e_evil",
        "_ _evil",
        "_6_evil",
        "___evil",
        "__evil",
        "__",
        "_evil_evil"
      ]
    },
    {
      "regex": "^HTMLPurifier_ConfigSchema::.+?\\);[\n\r]*",
      "exceptionStackTrace": null,
      "matches": [
        "HTMLPurifier_ConfigSchema::evil);\r\r",
        "HTMLPurifier_ConfigSchema::evil);\n",
        "HTMLPurifier_ConfigSchema::;);\r",
        "HTMLPurifier_ConfigSchema:::);\r",
        "HTMLPurifier_ConfigSchema::));\r",
        "HTMLPurifier_ConfigSchema::eVil);\r",
        "HTMLPurifier_ConfigSchema::EVIL);\r",
        "HTMLPurifier_ConfigSchema::ev_il);\r",
        "HTMLPurifier_ConfigSchema::ev il);\r",
        "HTMLPurifier_ConfigSchema::ev4il);\r",
        "HTMLPurifier_ConfigSchema::e);\r",
        "HTMLPurifier_ConfigSchema:: );\r",
        "HTMLPurifier_ConfigSchema::6);\r",
        "HTMLPurifier_ConfigSchema::_);\r",
        "HTMLPurifier_ConfigSchema::);\r",
        "HTMLPurifier_ConfigSchema::evil);",
        "HTMLPurifier_ConfigSchema::evil);\r"
      ]
    },
    {
      "regex": "^(\\-?\\d+\\.?\\d*),(\\-?\\d+\\.?\\d*)$",
      "exceptionStackTrace": null,
      "matches": [
        "-0.0,-0.00",
        "-0.0,-0.",
        "-0.0,-0..0",
        "-0.0,-00",
        "-0.0,-00.0",
        "-0.0,-.0",
        "-0.0,--0.0",
        "-0.0,0.0",
        "-0.00,-0.0",
        "-0.,-0.0",
        "-0..0,-0.0",
        "-00,-0.0",
        "-00.0,-0.0",
        "-.0,-0.0",
        "--0.0,-0.0",
        "0.0,-0.0",
        "0,0",
        "-0.0,-0.0"
      ]
    },
    {
      "regex": "!DB_DEVELOPMENT!",
      "exceptionStackTrace": null,
      "matches": ["!DB_DEVELOPMENT!"]
    },
    {
      "regex": "^Status: 5\\.6\\.0",
      "exceptionStackTrace": null,
      "matches": ["Status: 5.6.0"]
    },
    {
      "regex": "^[^\\W\\d]\\w*(?:(?:\\'|::)[^\\W]\\w*)*$",
      "exceptionStackTrace": null,
      "matches": [
        "aevil'aevil'aevil",
        "aevil",
        "aevil'aeVil",
        "aevil'aEVIL",
        "aevil'aev_il",
        "aevil'aev il",
        "aevil'aev4il",
        "aevil'ae",
        "aevil'a ",
        "aevil'a6",
        "aevil'a_",
        "aevil'a",
        "aevil'_evil",
        "aevil'Aevil",
        "aevil':evil",
        "aevil'0evil",
        "aevil''evil",
        "aevil' evil",
        "aeVil'aevil",
        "aEVIL'aevil",
        "aev_il'aevil",
        "aev il'aevil",
        "aev4il'aevil",
        "ae'aevil",
        "a 'aevil",
        "a6'aevil",
        "a_'aevil",
        "a'aevil",
        "_evil'aevil",
        "Aevil'aevil",
        ":evil'aevil",
        "0evil'aevil",
        "'evil'aevil",
        " evil'aevil",
        "a",
        "aevil::aevil",
        "aevil'aevil"
      ]
    },
    {
      "regex": "Star\\( MockCrock \\).second: Computation must return a type of MockCrock",
      "exceptionStackTrace": null,
      "matches": [
        "Star( MockCrock )Asecond: Computation must return a type of MockCrock",
        "Star( MockCrock ):second: Computation must return a type of MockCrock",
        "Star( MockCrock )0second: Computation must return a type of MockCrock",
        "Star( MockCrock ))second: Computation must return a type of MockCrock",
        "Star( MockCrock )(second: Computation must return a type of MockCrock",
        "Star( MockCrock ) second: Computation must return a type of MockCrock",
        "Star( MockCrock )asecond: Computation must return a type of MockCrock"
      ]
    },
    {
      "regex": "^after\\s+(\\d[\\w:]*)$",
      "exceptionStackTrace": null,
      "matches": [
        "after 0:",
        "after 0eVil",
        "after 0EVIL",
        "after 0ev_il",
        "after 0ev il",
        "after 0ev4il",
        "after 0e",
        "after 0 ",
        "after 06",
        "after 0_",
        "after  0evil",
        "after0evil",
        "after 0",
        "after 0evil"
      ]
    },
    {
      "regex": "#<Thread:(\\S+) run",
      "exceptionStackTrace": null,
      "matches": [
        "#<Thread:< run",
        "#<Thread:: run",
        "#<Thread:# run",
        "#<Thread:eVil run",
        "#<Thread:EVIL run",
        "#<Thread:ev_il run",
        "#<Thread:ev il run",
        "#<Thread:ev4il run",
        "#<Thread:e run",
        "#<Thread:  run",
        "#<Thread:6 run",
        "#<Thread:_ run",
        "#<Thread: run",
        "#<Thread:evil run"
      ]
    },
    {
      "regex": "^show\\s+extensions?(?:\\s+by\\s+(id|preference|name))?$",
      "exceptionStackTrace": null,
      "matches": [
        "show extensions by id by id",
        "show extensions",
        "show extensions by  id",
        "show extensions byid",
        "show extensions  by id",
        "show extensionsby id",
        "show extensionss by id",
        "show extension by id",
        "show  extensions by id",
        "showextensions by id",
        "show extension",
        "show extensions by name",
        "show extensions by preference",
        "show extensions by id"
      ]
    },
    {
      "regex": "^<A HREF=\"(\\d\\.\\d)/\">(Lua )?\\1</A>",
      "exceptionStackTrace": null,
      "matches": [
        "<A HREF=\"0.0/\">Lua Lua 0.0</A>",
        "<A HREF=\"0.0/\">0.0</A>",
        "<A HREF=\"0.0/\">Lua 0.0</A>"
      ]
    },
    {
      "regex": "^I add a file without checking it in$",
      "exceptionStackTrace": null,
      "matches": ["I add a file without checking it in"]
    },
    { "regex": "rule_X", "exceptionStackTrace": null, "matches": ["rule_X"] },
    {
      "regex": "function.(.+).php",
      "exceptionStackTrace": null,
      "matches": [
        "functionaevil_php",
        "functionaevilAphp",
        "functionaevil0php",
        "functionaevil php",
        "functionaeVilaphp",
        "functionaEVILaphp",
        "functionaev_ilaphp",
        "functionaev ilaphp",
        "functionaev4ilaphp",
        "functionaeaphp",
        "functiona aphp",
        "functiona6aphp",
        "functiona_aphp",
        "functionaaphp",
        "function_evilaphp",
        "functionAevilaphp",
        "function0evilaphp",
        "function evilaphp",
        "functionaevilaphp"
      ]
    },
    {
      "regex": " - (.+)$",
      "exceptionStackTrace": null,
      "matches": [
        " - -",
        " - eVil",
        " - EVIL",
        " - ev_il",
        " - ev il",
        " - ev4il",
        " - e",
        " -  ",
        " - 6",
        " - _",
        " - ",
        " - evil"
      ]
    },
    {
      "regex": "^(?:(15(?:0[06]|1[12]|35|4[04]|55|6[26]|77|88|99)\\d))",
      "exceptionStackTrace": null,
      "matches": [
        "15620",
        "15600",
        "15410",
        "15400",
        "15110",
        "15100",
        "15010",
        "15000",
        "15990",
        "15880",
        "15770",
        "15660",
        "15550",
        "15440",
        "15350",
        "15120",
        "15060"
      ]
    },
    {
      "regex": "\"(?P<Major>\\d*?)\\.(?P<Minor>\\d*?)\\.(?P<Patch>\\d*?)\"",
      "exceptionStackTrace": null,
      "matches": [
        "\"0.0.00\"",
        "\"0.0.\"",
        "\"0.00.0\"",
        "\"0..0\"",
        "\"00.0.0\"",
        "\".0.0\"",
        "\"..\"",
        "\"0.0.0\""
      ]
    },
    {
      "regex": "Sprint APA(9292)",
      "exceptionStackTrace": null,
      "matches": ["Sprint APA9292"]
    },
    {
      "regex": "openebs_read_time 0",
      "exceptionStackTrace": null,
      "matches": ["openebs_read_time 0"]
    },
    { "regex": "^Gp", "exceptionStackTrace": null, "matches": ["Gp"] },
    {
      "regex": "https?://www.cnews.fr/[^ ]+",
      "exceptionStackTrace": null,
      "matches": [
        "https://wwwacnewsafr/:",
        "https://wwwacnewsafr//",
        "https://wwwacnewsafr/eVil",
        "https://wwwacnewsafr/EVIL",
        "https://wwwacnewsafr/ev_il",
        "https://wwwacnewsafr/ev il",
        "https://wwwacnewsafr/ev4il",
        "https://wwwacnewsafr/e",
        "https://wwwacnewsafr/ ",
        "https://wwwacnewsafr/6",
        "https://wwwacnewsafr/_",
        "https://wwwacnewsafr/",
        "https://wwwacnewsAfr/evil",
        "https://wwwacnews:fr/evil",
        "https://wwwacnews0fr/evil",
        "https://wwwacnews/fr/evil",
        "https://wwwacnews fr/evil",
        "https://wwwAcnewsafr/evil",
        "https://www:cnewsafr/evil",
        "https://www0cnewsafr/evil",
        "https://www/cnewsafr/evil",
        "https://www cnewsafr/evil",
        "httpss://wwwacnewsafr/evil",
        "http://wwwacnewsafr/evil",
        "https://wwwacnewsafr/evil"
      ]
    },
    {
      "regex": "[\\x00-\\x09\\x0b-\\x0d\\x0e-\\x1f\\x7f-\\x9f\\'\\n]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 0"
      },
      "matches": []
    },
    {
      "regex": " *([0-9]+) *- *([0-9]+) *",
      "exceptionStackTrace": null,
      "matches": [
        " 0 - 0  ",
        " 0 - 0",
        " 0 - 00 ",
        " 0 -  ",
        " 0 -  0 ",
        " 0 -0 ",
        " 0  - 0 ",
        " 0- 0 ",
        " 00 - 0 ",
        "  - 0 ",
        "  0 - 0 ",
        "0 - 0 ",
        "0-0",
        " 0 - 0 "
      ]
    },
    {
      "regex": "^pathexam",
      "exceptionStackTrace": null,
      "matches": ["pathexam"]
    },
    {
      "regex": "(\\d+)\\-(\\d+)\\/(\\d+)\\:(\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "0-0/0:00",
        "0-0/0:",
        "0-0/00:0",
        "0-0/:0",
        "0-00/0:0",
        "0-/0:0",
        "00-0/0:0",
        "-0/0:0",
        "0-0/0:0"
      ]
    },
    {
      "regex": "^(#{1,6}) $",
      "exceptionStackTrace": null,
      "matches": ["####### ", "###### ", " ", "# "]
    },
    {
      "regex": "(^\\[\\s*|\\s*\\]$)",
      "exceptionStackTrace": null,
      "matches": ["  ]", "[  ", "]", "[", " ]", "[ "]
    },
    {
      "regex": "(?=\\P{sc=Adlm})\\p{scx=Adlm}",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\P"
      },
      "matches": []
    },
    { "regex": "^Py,", "exceptionStackTrace": null, "matches": ["Py,"] },
    {
      "regex": "^(\\.svn|sub)$",
      "exceptionStackTrace": null,
      "matches": ["sub", ".svn"]
    },
    {
      "regex": "profiler not started",
      "exceptionStackTrace": null,
      "matches": ["profiler not started"]
    },
    {
      "regex": "All routers sucessfully completed",
      "exceptionStackTrace": null,
      "matches": ["All routers sucessfully completed"]
    },
    {
      "regex": "^[ \\t]*(-|\\*\\**|\\u2022)[ \\t]+(",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "missing ), unterminated subpattern"
      },
      "matches": []
    },
    {
      "regex": "(.{0,10} \\- .{0,10})",
      "exceptionStackTrace": null,
      "matches": [
        "a - aaaaaaaaaaa",
        "a - aaaaaaaaaa",
        "a - ",
        "a - A",
        "a - 0",
        "a - -",
        "a -  ",
        "aaaaaaaaaaa - a",
        "aaaaaaaaaa - a",
        " - a",
        "A - a",
        "0 - a",
        "- - a",
        "  - a",
        " - ",
        "a - a"
      ]
    },
    {
      "regex": "top|left",
      "exceptionStackTrace": null,
      "matches": ["left", "top"]
    },
    { "regex": "',", "exceptionStackTrace": null, "matches": ["',"] },
    {
      "regex": "^(\\@)?\\*:($NCName|\\*)$",
      "exceptionStackTrace": null,
      "matches": ["@@*:NCName", "*:*", "*:NCName", "@*:*", "@*:NCName"]
    },
    {
      "regex": "^Capybara::Session Poltergeist Capybara::Window#fullscreen should be able to fullscreen the window",
      "exceptionStackTrace": null,
      "matches": [
        "Capybara::Session Poltergeist Capybara::Window#fullscreen should be able to fullscreen the window"
      ]
    },
    {
      "regex": "^\\s*((http|https|ftp|mailto):[\\p{L}_a-z0-9-:\\.\\*\\/%#!@\\?\\+=~\\|\\,&\\(\\)]+)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\p"
      },
      "matches": []
    },
    {
      "regex": "^I should fail when ask if there is some options setted$",
      "exceptionStackTrace": null,
      "matches": ["I should fail when ask if there is some options setted"]
    },
    { "regex": "TD", "exceptionStackTrace": null, "matches": ["TD"] },
    {
      "regex": "ssid\\s*=\\s*\"(.*?)\"",
      "exceptionStackTrace": null,
      "matches": [
        "ssid = \"=\"",
        "ssid = \"\"\"",
        "ssid = \"eVil\"",
        "ssid = \"EVIL\"",
        "ssid = \"ev_il\"",
        "ssid = \"ev il\"",
        "ssid = \"ev4il\"",
        "ssid = \"e\"",
        "ssid = \" \"",
        "ssid = \"6\"",
        "ssid = \"_\"",
        "ssid = \"\"",
        "ssid =  \"evil\"",
        "ssid =\"evil\"",
        "ssid  = \"evil\"",
        "ssid= \"evil\"",
        "ssid=\"\"",
        "ssid = \"evil\""
      ]
    },
    {
      "regex": "tbi_aware.*_3$",
      "exceptionStackTrace": null,
      "matches": [
        "tbi_awareeVil_3",
        "tbi_awareEVIL_3",
        "tbi_awareev_il_3",
        "tbi_awareev il_3",
        "tbi_awareev4il_3",
        "tbi_awaree_3",
        "tbi_aware _3",
        "tbi_aware6_3",
        "tbi_aware__3",
        "tbi_aware_3",
        "tbi_awareevil_3"
      ]
    },
    {
      "regex": ".p12$",
      "exceptionStackTrace": null,
      "matches": ["_p12", "Ap12", "0p12", " p12", "ap12"]
    },
    {
      "regex": "^( *)([^\\n]+)\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^[0-3]?[0-9]W$",
      "exceptionStackTrace": null,
      "matches": ["000W", "40W", "0W", "00W"]
    },
    { "regex": "^:fi\\)", "exceptionStackTrace": null, "matches": [":fi)"] },
    {
      "regex": "gfx_clip[\\d]+",
      "exceptionStackTrace": null,
      "matches": ["gfx_clip00", "gfx_clip", "gfx_clip0"]
    },
    {
      "regex": "<\\/?br\\/?>",
      "exceptionStackTrace": null,
      "matches": ["</br//>", "</br>", "<//br/>", "<br/>", "<br>", "</br/>"]
    },
    {
      "regex": "([ 0-9a-zA-Z.:;()_#&,]+)",
      "exceptionStackTrace": null,
      "matches": [
        ";",
        ":",
        ".",
        ",",
        ")",
        "(",
        "&",
        "#",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "(upper___[A-Za-z0-9]+)\\.(upper___)",
      "exceptionStackTrace": null,
      "matches": [
        "upper___eVil.upper___",
        "upper___EVIL.upper___",
        "upper___ev_il.upper___",
        "upper___ev il.upper___",
        "upper___ev4il.upper___",
        "upper___e.upper___",
        "upper___ .upper___",
        "upper___6.upper___",
        "upper____.upper___",
        "upper___.upper___",
        "upper___evil.upper___"
      ]
    },
    { "regex": "root", "exceptionStackTrace": null, "matches": ["root"] },
    {
      "regex": "File content must be a String or IO",
      "exceptionStackTrace": null,
      "matches": ["File content must be a String or IO"]
    },
    {
      "regex": "<\\s*PKIT_COMPONENT\\s+(\\w+)\\s*/?>",
      "exceptionStackTrace": null,
      "matches": [
        "< PKIT_COMPONENT evil //>",
        "< PKIT_COMPONENT evil >",
        "< PKIT_COMPONENT evil  />",
        "< PKIT_COMPONENT evil/>",
        "< PKIT_COMPONENT eVil />",
        "< PKIT_COMPONENT EVIL />",
        "< PKIT_COMPONENT ev_il />",
        "< PKIT_COMPONENT ev il />",
        "< PKIT_COMPONENT ev4il />",
        "< PKIT_COMPONENT e />",
        "< PKIT_COMPONENT   />",
        "< PKIT_COMPONENT 6 />",
        "< PKIT_COMPONENT _ />",
        "< PKIT_COMPONENT  />",
        "< PKIT_COMPONENT  evil />",
        "< PKIT_COMPONENTevil />",
        "<  PKIT_COMPONENT evil />",
        "<PKIT_COMPONENT evil />",
        "<PKIT_COMPONENT evil>",
        "< PKIT_COMPONENT evil />"
      ]
    },
    {
      "regex": " {0,3}\\t",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "(\\w)/",
      "exceptionStackTrace": null,
      "matches": ["_/", "A/", "0/", "a/"]
    },
    {
      "regex": "(?i)\\boci(setbufferinglob|_(s(tatement_type|e(t_prefetch|rver_version))|c(o(nnect|llection_(size|trim|element_(assign|get)|a(ssign|ppend)|max)|mmit)|lose|ancel)|n(um_(fields|rows)|ew_(c(o(nnect|llection)|ursor)|descriptor))|internal_debug|define_by_name|p(connect|a(ssword_change|rse))|e(rror|xecute)|f(ield_(s(cale|ize)|name|is_null|type(_raw)?|precision)|etch(_(object|a(ssoc|ll|rray)|row))?|ree_(statement|collection|descriptor))|lob_(s(ize|eek|ave)|c(opy|lose)|t(ell|runcate)|i(s_equal|mport)|e(of|rase|xport)|flush|append|write(_temporary)?|load|re(wind|ad))|r(ollback|esult)|bind_(array_by_name|by_name))|fetchinto|getbufferinglob)(?=\\s*\\()",
      "exceptionStackTrace": null,
      "matches": [
        "oci_lob_write_temporary_temporary",
        "oci_fetch_object_object",
        "oci_field_type_raw_raw",
        "oci_lob_write",
        "oci_fetch",
        "oci_field_type",
        "ocigetbufferinglob",
        "ocifetchinto",
        "oci_bind_by_name",
        "oci_bind_array_by_name",
        "oci_result",
        "oci_rollback",
        "oci_lob_read",
        "oci_lob_rewind",
        "oci_lob_load",
        "oci_lob_write_temporary",
        "oci_lob_append",
        "oci_lob_flush",
        "oci_lob_export",
        "oci_lob_erase",
        "oci_lob_eof",
        "oci_lob_import",
        "oci_lob_is_equal",
        "oci_lob_truncate",
        "oci_lob_tell",
        "oci_lob_close",
        "oci_lob_copy",
        "oci_lob_save",
        "oci_lob_seek",
        "oci_lob_size",
        "oci_free_descriptor",
        "oci_free_collection",
        "oci_free_statement",
        "oci_fetch_row",
        "oci_fetch_array",
        "oci_fetch_all",
        "oci_fetch_assoc",
        "oci_fetch_object",
        "oci_field_precision",
        "oci_field_type_raw",
        "oci_field_is_null",
        "oci_field_name",
        "oci_field_size",
        "oci_field_scale",
        "oci_execute",
        "oci_error",
        "oci_parse",
        "oci_password_change",
        "oci_pconnect",
        "oci_define_by_name",
        "oci_internal_debug",
        "oci_new_descriptor",
        "oci_new_cursor",
        "oci_new_collection",
        "oci_new_connect",
        "oci_num_rows",
        "oci_num_fields",
        "oci_cancel",
        "oci_close",
        "oci_commit",
        "oci_collection_max",
        "oci_collection_append",
        "oci_collection_assign",
        "oci_collection_element_get",
        "oci_collection_element_assign",
        "oci_collection_trim",
        "oci_collection_size",
        "oci_connect",
        "oci_server_version",
        "oci_set_prefetch",
        "oci_statement_type",
        "ocisetbufferinglob"
      ]
    },
    {
      "regex": "\\$PORT \\s* = \\s* (\\d+)    ",
      "exceptionStackTrace": null,
      "matches": [
        "$PORT   =   00    ",
        "$PORT   =       ",
        "$PORT   =    0    ",
        "$PORT   =  0    ",
        "$PORT    =   0    ",
        "$PORT  =   0    ",
        "$PORT  =  0    ",
        "$PORT   =   0    "
      ]
    },
    { "regex": "AliTB", "exceptionStackTrace": null, "matches": ["AliTB"] },
    {
      "regex": "(1)\u6642\u7684",
      "exceptionStackTrace": null,
      "matches": ["1\u6642\u7684"]
    },
    {
      "regex": " ' ( [^\\n']|'' ) (?:'|$) ",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "\\s*,\\s*",
      "exceptionStackTrace": null,
      "matches": [" ,  ", " ,", "  , ", ", ", ",", " , "]
    },
    {
      "regex": "g[a-f0-9]{7}",
      "exceptionStackTrace": null,
      "matches": ["g00000000", "g000000", "gg000000", "ga000000", "g0000000"]
    },
    {
      "regex": "NotAccepted",
      "exceptionStackTrace": null,
      "matches": ["NotAccepted"]
    },
    {
      "regex": "failed: Can\\'t use string",
      "exceptionStackTrace": null,
      "matches": ["failed: Can't use string"]
    },
    {
      "regex": "\n          \\\"",
      "exceptionStackTrace": null,
      "matches": ["\n          \""]
    },
    {
      "regex": "\"?\\{\\{([a-zA-Z0-9\\-_]+)(\\([^()]+\\))?\\}\\}\"?",
      "exceptionStackTrace": null,
      "matches": [
        "\"{{evil(evil)}}\"\"",
        "\"{{evil(evil)}}",
        "\"{{evil(evil)(evil)}}\"",
        "\"{{evil}}\"",
        "\"{{evil(})}}\"",
        "\"{{evil({)}}\"",
        "\"{{evil(-)}}\"",
        "\"{{evil())}}\"",
        "\"{{evil(()}}\"",
        "\"{{evil(\")}}\"",
        "\"{{evil(eVil)}}\"",
        "\"{{evil(EVIL)}}\"",
        "\"{{evil(ev_il)}}\"",
        "\"{{evil(ev il)}}\"",
        "\"{{evil(ev4il)}}\"",
        "\"{{evil(e)}}\"",
        "\"{{evil( )}}\"",
        "\"{{evil(6)}}\"",
        "\"{{evil(_)}}\"",
        "\"{{evil()}}\"",
        "\"{{}(evil)}}\"",
        "\"{{{(evil)}}\"",
        "\"{{-(evil)}}\"",
        "\"{{)(evil)}}\"",
        "\"{{((evil)}}\"",
        "\"{{\"(evil)}}\"",
        "\"{{eVil(evil)}}\"",
        "\"{{EVIL(evil)}}\"",
        "\"{{ev_il(evil)}}\"",
        "\"{{ev il(evil)}}\"",
        "\"{{ev4il(evil)}}\"",
        "\"{{e(evil)}}\"",
        "\"{{ (evil)}}\"",
        "\"{{6(evil)}}\"",
        "\"{{_(evil)}}\"",
        "\"{{(evil)}}\"",
        "\"\"{{evil(evil)}}\"",
        "{{evil(evil)}}\"",
        "{{evil}}",
        "\"{{evil(evil)}}\""
      ]
    },
    {
      "regex": "&&\\[\\^?",
      "exceptionStackTrace": null,
      "matches": ["&&[^^", "&&[", "&&[^"]
    },
    {
      "regex": "(^.*$)\\n(^ +return)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "550\\s+relay\\s+not\\s+permitted",
      "exceptionStackTrace": null,
      "matches": [
        "550 relay not  permitted",
        "550 relay notpermitted",
        "550 relay  not permitted",
        "550 relaynot permitted",
        "550  relay not permitted",
        "550relay not permitted",
        "550 relay not permitted"
      ]
    },
    {
      "regex": "@incremental-dom.+(enable|disable)-fastRoot",
      "exceptionStackTrace": null,
      "matches": [
        "@incremental-dom@enable-fastRoot",
        "@incremental-dom-enable-fastRoot",
        "@incremental-domeVilenable-fastRoot",
        "@incremental-domEVILenable-fastRoot",
        "@incremental-domev_ilenable-fastRoot",
        "@incremental-domev ilenable-fastRoot",
        "@incremental-domev4ilenable-fastRoot",
        "@incremental-domeenable-fastRoot",
        "@incremental-dom enable-fastRoot",
        "@incremental-dom6enable-fastRoot",
        "@incremental-dom_enable-fastRoot",
        "@incremental-domenable-fastRoot",
        "@incremental-domevildisable-fastRoot",
        "@incremental-domevilenable-fastRoot"
      ]
    },
    {
      "regex": "\\[\\!\\ (_\\w+)\\](.+?)\\[\\:\\](.+?)\\[\\;\\]",
      "exceptionStackTrace": null,
      "matches": [
        "[! _evil]evil[:]][;]",
        "[! _evil]evil[:][[;]",
        "[! _evil]evil[:];[;]",
        "[! _evil]evil[:]:[;]",
        "[! _evil]evil[:]![;]",
        "[! _evil]evil[:]eVil[;]",
        "[! _evil]evil[:]EVIL[;]",
        "[! _evil]evil[:]ev_il[;]",
        "[! _evil]evil[:]ev il[;]",
        "[! _evil]evil[:]ev4il[;]",
        "[! _evil]evil[:]e[;]",
        "[! _evil]evil[:] [;]",
        "[! _evil]evil[:]6[;]",
        "[! _evil]evil[:]_[;]",
        "[! _evil]evil[:][;]",
        "[! _evil]][:]evil[;]",
        "[! _evil][[:]evil[;]",
        "[! _evil];[:]evil[;]",
        "[! _evil]:[:]evil[;]",
        "[! _evil]![:]evil[;]",
        "[! _evil]eVil[:]evil[;]",
        "[! _evil]EVIL[:]evil[;]",
        "[! _evil]ev_il[:]evil[;]",
        "[! _evil]ev il[:]evil[;]",
        "[! _evil]ev4il[:]evil[;]",
        "[! _evil]e[:]evil[;]",
        "[! _evil] [:]evil[;]",
        "[! _evil]6[:]evil[;]",
        "[! _evil]_[:]evil[;]",
        "[! _evil][:]evil[;]",
        "[! _eVil]evil[:]evil[;]",
        "[! _EVIL]evil[:]evil[;]",
        "[! _ev_il]evil[:]evil[;]",
        "[! _ev il]evil[:]evil[;]",
        "[! _ev4il]evil[:]evil[;]",
        "[! _e]evil[:]evil[;]",
        "[! _ ]evil[:]evil[;]",
        "[! _6]evil[:]evil[;]",
        "[! __]evil[:]evil[;]",
        "[! _]evil[:]evil[;]",
        "[! _evil]evil[:]evil[;]"
      ]
    },
    {
      "regex": "[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 160"
      },
      "matches": []
    },
    { "regex": "^public_", "exceptionStackTrace": null, "matches": ["public_"] },
    {
      "regex": "^1\\.(6|7)",
      "exceptionStackTrace": null,
      "matches": ["1.7", "1.6"]
    },
    {
      "regex": "Checked all files in \\d+\\.\\d+ seconds, \\d+\\.\\d+ MB memory used",
      "exceptionStackTrace": null,
      "matches": [
        "Checked all files in 0.0 seconds, 0.00 MB memory used",
        "Checked all files in 0.0 seconds, 0. MB memory used",
        "Checked all files in 0.0 seconds, 00.0 MB memory used",
        "Checked all files in 0.0 seconds, .0 MB memory used",
        "Checked all files in 0.00 seconds, 0.0 MB memory used",
        "Checked all files in 0. seconds, 0.0 MB memory used",
        "Checked all files in 00.0 seconds, 0.0 MB memory used",
        "Checked all files in .0 seconds, 0.0 MB memory used",
        "Checked all files in 0.0 seconds, 0.0 MB memory used"
      ]
    },
    {
      "regex": " HTMLCS-disabled",
      "exceptionStackTrace": null,
      "matches": [" HTMLCS-disabled"]
    },
    {
      "regex": "(class=\"MsoListParagraph[^>]+>\\x3c!--\\[if !supportLists\\]--\\x3e)([^<]+<span[^<]+<\\/span>)(\\x3c!--\\[endif\\]--\\x3e)",
      "exceptionStackTrace": null,
      "matches": [
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->evil<span]</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->evil<span[</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->evil<span></span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->evil<span=</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->evil<span<</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->evil<span/</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->evil<span-</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->evil<span\"</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->evil<span!</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->evil<spaneVil</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->evil<spanEVIL</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->evil<spanev_il</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->evil<spanev il</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->evil<spanev4il</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->evil<spane</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->evil<span </span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->evil<span6</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->evil<span_</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->evil<span</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->]<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->[<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->><spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->=<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]--><<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->/<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->-<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->\"<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->!<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->eVil<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->EVIL<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->ev_il<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->ev il<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->ev4il<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->e<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]--> <spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->6<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->_<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]--><spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraph]><!--[if !supportLists]-->evil<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraph[><!--[if !supportLists]-->evil<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraph>><!--[if !supportLists]-->evil<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraph=><!--[if !supportLists]-->evil<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraph<><!--[if !supportLists]-->evil<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraph/><!--[if !supportLists]-->evil<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraph-><!--[if !supportLists]-->evil<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraph\"><!--[if !supportLists]-->evil<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraph!><!--[if !supportLists]-->evil<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagrapheVil><!--[if !supportLists]-->evil<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraphEVIL><!--[if !supportLists]-->evil<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraphev_il><!--[if !supportLists]-->evil<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraphev il><!--[if !supportLists]-->evil<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraphev4il><!--[if !supportLists]-->evil<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraphe><!--[if !supportLists]-->evil<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraph ><!--[if !supportLists]-->evil<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraph6><!--[if !supportLists]-->evil<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraph_><!--[if !supportLists]-->evil<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraph><!--[if !supportLists]-->evil<spanevil</span><!--[endif]-->",
        "class=\"MsoListParagraphevil><!--[if !supportLists]-->evil<spanevil</span><!--[endif]-->"
      ]
    },
    {
      "regex": ".*[Cc]{2,3}(\\d{5,})[CcAa]{3,6}(\\d{5,})[CcAa]{2,3}(\\d{5,})[Cc]{2,3}.*",
      "exceptionStackTrace": null,
      "matches": [
        "evilcc00000aaa00000aa00000cceVil",
        "evilcc00000aaa00000aa00000ccEVIL",
        "evilcc00000aaa00000aa00000ccev_il",
        "evilcc00000aaa00000aa00000ccev il",
        "evilcc00000aaa00000aa00000ccev4il",
        "evilcc00000aaa00000aa00000cce",
        "evilcc00000aaa00000aa00000cc ",
        "evilcc00000aaa00000aa00000cc6",
        "evilcc00000aaa00000aa00000cc_",
        "evilcc00000aaa00000aa00000cc",
        "evilcc00000aaa00000aa00000ccccevil",
        "evilcc00000aaa00000aa00000cccevil",
        "evilcc00000aaa00000aa00000cevil",
        "evilcc00000aaa00000aa00000acevil",
        "evilcc00000aaa00000aa00000Ccevil",
        "evilcc00000aaa00000aa00000Acevil",
        "evilcc00000aaa00000aa0000ccevil",
        "evilcc00000aaa00000aaaa00000ccevil",
        "evilcc00000aaa00000aaa00000ccevil",
        "evilcc00000aaa00000a00000ccevil",
        "evilcc00000aaa00000ca00000ccevil",
        "evilcc00000aaa00000ba00000ccevil",
        "evilcc00000aaa00000Ca00000ccevil",
        "evilcc00000aaa00000Ba00000ccevil",
        "evilcc00000aaa00000Aa00000ccevil",
        "evilcc00000aaa0000aa00000ccevil",
        "evilcc00000aaaaaaa00000aa00000ccevil",
        "evilcc00000aaaaaa00000aa00000ccevil",
        "evilcc00000aa00000aa00000ccevil",
        "evilcc00000caa00000aa00000ccevil",
        "evilcc00000baa00000aa00000ccevil",
        "evilcc00000Caa00000aa00000ccevil",
        "evilcc00000Baa00000aa00000ccevil",
        "evilcc00000Aaa00000aa00000ccevil",
        "evilcc0000aaa00000aa00000ccevil",
        "evilcccc00000aaa00000aa00000ccevil",
        "evilccc00000aaa00000aa00000ccevil",
        "evilc00000aaa00000aa00000ccevil",
        "evilac00000aaa00000aa00000ccevil",
        "evilCc00000aaa00000aa00000ccevil",
        "evilAc00000aaa00000aa00000ccevil",
        "eVilcc00000aaa00000aa00000ccevil",
        "EVILcc00000aaa00000aa00000ccevil",
        "ev_ilcc00000aaa00000aa00000ccevil",
        "ev ilcc00000aaa00000aa00000ccevil",
        "ev4ilcc00000aaa00000aa00000ccevil",
        "ecc00000aaa00000aa00000ccevil",
        " cc00000aaa00000aa00000ccevil",
        "6cc00000aaa00000aa00000ccevil",
        "_cc00000aaa00000aa00000ccevil",
        "cc00000aaa00000aa00000ccevil",
        "cc00000aaa00000aa00000cc",
        "evilcc00000aaa00000aa00000ccevil"
      ]
    },
    {
      "regex": "\\/\\/[\\s\\S]*i18n[\\s\\S]*\\([\\s\\S]*ph[\\s\\S]*=[\\s\\S]*\"([\\s\\S]*?)\"[\\s\\S]*\\)",
      "exceptionStackTrace": null,
      "matches": [
        "//evili18nevil(evilphevil=evil\"evil\"=)",
        "//evili18nevil(evilphevil=evil\"evil\"/)",
        "//evili18nevil(evilphevil=evil\"evil\"))",
        "//evili18nevil(evilphevil=evil\"evil\"()",
        "//evili18nevil(evilphevil=evil\"evil\"\")",
        "//evili18nevil(evilphevil=evil\"evil\"eVil)",
        "//evili18nevil(evilphevil=evil\"evil\"EVIL)",
        "//evili18nevil(evilphevil=evil\"evil\"ev_il)",
        "//evili18nevil(evilphevil=evil\"evil\"ev il)",
        "//evili18nevil(evilphevil=evil\"evil\"ev4il)",
        "//evili18nevil(evilphevil=evil\"evil\"e)",
        "//evili18nevil(evilphevil=evil\"evil\" )",
        "//evili18nevil(evilphevil=evil\"evil\"6)",
        "//evili18nevil(evilphevil=evil\"evil\"_)",
        "//evili18nevil(evilphevil=evil\"evil\")",
        "//evili18nevil(evilphevil=evil\"=\"evil)",
        "//evili18nevil(evilphevil=evil\"/\"evil)",
        "//evili18nevil(evilphevil=evil\")\"evil)",
        "//evili18nevil(evilphevil=evil\"(\"evil)",
        "//evili18nevil(evilphevil=evil\"\"\"evil)",
        "//evili18nevil(evilphevil=evil\"eVil\"evil)",
        "//evili18nevil(evilphevil=evil\"EVIL\"evil)",
        "//evili18nevil(evilphevil=evil\"ev_il\"evil)",
        "//evili18nevil(evilphevil=evil\"ev il\"evil)",
        "//evili18nevil(evilphevil=evil\"ev4il\"evil)",
        "//evili18nevil(evilphevil=evil\"e\"evil)",
        "//evili18nevil(evilphevil=evil\" \"evil)",
        "//evili18nevil(evilphevil=evil\"6\"evil)",
        "//evili18nevil(evilphevil=evil\"_\"evil)",
        "//evili18nevil(evilphevil=evil\"\"evil)",
        "//evili18nevil(evilphevil==\"evil\"evil)",
        "//evili18nevil(evilphevil=/\"evil\"evil)",
        "//evili18nevil(evilphevil=)\"evil\"evil)",
        "//evili18nevil(evilphevil=(\"evil\"evil)",
        "//evili18nevil(evilphevil=\"\"evil\"evil)",
        "//evili18nevil(evilphevil=eVil\"evil\"evil)",
        "//evili18nevil(evilphevil=EVIL\"evil\"evil)",
        "//evili18nevil(evilphevil=ev_il\"evil\"evil)",
        "//evili18nevil(evilphevil=ev il\"evil\"evil)",
        "//evili18nevil(evilphevil=ev4il\"evil\"evil)",
        "//evili18nevil(evilphevil=e\"evil\"evil)",
        "//evili18nevil(evilphevil= \"evil\"evil)",
        "//evili18nevil(evilphevil=6\"evil\"evil)",
        "//evili18nevil(evilphevil=_\"evil\"evil)",
        "//evili18nevil(evilphevil=\"evil\"evil)",
        "//evili18nevil(evilph==evil\"evil\"evil)",
        "//evili18nevil(evilph/=evil\"evil\"evil)",
        "//evili18nevil(evilph)=evil\"evil\"evil)",
        "//evili18nevil(evilph(=evil\"evil\"evil)",
        "//evili18nevil(evilph\"=evil\"evil\"evil)",
        "//evili18nevil(evilpheVil=evil\"evil\"evil)",
        "//evili18nevil(evilphEVIL=evil\"evil\"evil)",
        "//evili18nevil(evilphev_il=evil\"evil\"evil)",
        "//evili18nevil(evilphev il=evil\"evil\"evil)",
        "//evili18nevil(evilphev4il=evil\"evil\"evil)",
        "//evili18nevil(evilphe=evil\"evil\"evil)",
        "//evili18nevil(evilph =evil\"evil\"evil)",
        "//evili18nevil(evilph6=evil\"evil\"evil)",
        "//evili18nevil(evilph_=evil\"evil\"evil)",
        "//evili18nevil(evilph=evil\"evil\"evil)",
        "//evili18nevil(=phevil=evil\"evil\"evil)",
        "//evili18nevil(/phevil=evil\"evil\"evil)",
        "//evili18nevil()phevil=evil\"evil\"evil)",
        "//evili18nevil((phevil=evil\"evil\"evil)",
        "//evili18nevil(\"phevil=evil\"evil\"evil)",
        "//evili18nevil(eVilphevil=evil\"evil\"evil)",
        "//evili18nevil(EVILphevil=evil\"evil\"evil)",
        "//evili18nevil(ev_ilphevil=evil\"evil\"evil)",
        "//evili18nevil(ev ilphevil=evil\"evil\"evil)",
        "//evili18nevil(ev4ilphevil=evil\"evil\"evil)",
        "//evili18nevil(ephevil=evil\"evil\"evil)",
        "//evili18nevil( phevil=evil\"evil\"evil)",
        "//evili18nevil(6phevil=evil\"evil\"evil)",
        "//evili18nevil(_phevil=evil\"evil\"evil)",
        "//evili18nevil(phevil=evil\"evil\"evil)",
        "//evili18n=(evilphevil=evil\"evil\"evil)",
        "//evili18n/(evilphevil=evil\"evil\"evil)",
        "//evili18n)(evilphevil=evil\"evil\"evil)",
        "//evili18n((evilphevil=evil\"evil\"evil)",
        "//evili18n\"(evilphevil=evil\"evil\"evil)",
        "//evili18neVil(evilphevil=evil\"evil\"evil)",
        "//evili18nEVIL(evilphevil=evil\"evil\"evil)",
        "//evili18nev_il(evilphevil=evil\"evil\"evil)",
        "//evili18nev il(evilphevil=evil\"evil\"evil)",
        "//evili18nev4il(evilphevil=evil\"evil\"evil)",
        "//evili18ne(evilphevil=evil\"evil\"evil)",
        "//evili18n (evilphevil=evil\"evil\"evil)",
        "//evili18n6(evilphevil=evil\"evil\"evil)",
        "//evili18n_(evilphevil=evil\"evil\"evil)",
        "//evili18n(evilphevil=evil\"evil\"evil)",
        "//=i18nevil(evilphevil=evil\"evil\"evil)",
        "///i18nevil(evilphevil=evil\"evil\"evil)",
        "//)i18nevil(evilphevil=evil\"evil\"evil)",
        "//(i18nevil(evilphevil=evil\"evil\"evil)",
        "//\"i18nevil(evilphevil=evil\"evil\"evil)",
        "//eVili18nevil(evilphevil=evil\"evil\"evil)",
        "//EVILi18nevil(evilphevil=evil\"evil\"evil)",
        "//ev_ili18nevil(evilphevil=evil\"evil\"evil)",
        "//ev ili18nevil(evilphevil=evil\"evil\"evil)",
        "//ev4ili18nevil(evilphevil=evil\"evil\"evil)",
        "//ei18nevil(evilphevil=evil\"evil\"evil)",
        "// i18nevil(evilphevil=evil\"evil\"evil)",
        "//6i18nevil(evilphevil=evil\"evil\"evil)",
        "//_i18nevil(evilphevil=evil\"evil\"evil)",
        "//i18nevil(evilphevil=evil\"evil\"evil)",
        "//i18n(ph=\"\")",
        "//evili18nevil(evilphevil=evil\"evil\"evil)"
      ]
    },
    {
      "regex": "dw\\(RuntimeCodeVersion\\)(?:.+?)table2(?:.+?)>&nbsp;(.+?)</td>",
      "exceptionStackTrace": null,
      "matches": [
        "dw(RuntimeCodeVersion)eviltable2evil>&nbsp;></td>",
        "dw(RuntimeCodeVersion)eviltable2evil>&nbsp;<</td>",
        "dw(RuntimeCodeVersion)eviltable2evil>&nbsp;;</td>",
        "dw(RuntimeCodeVersion)eviltable2evil>&nbsp;/</td>",
        "dw(RuntimeCodeVersion)eviltable2evil>&nbsp;)</td>",
        "dw(RuntimeCodeVersion)eviltable2evil>&nbsp;(</td>",
        "dw(RuntimeCodeVersion)eviltable2evil>&nbsp;&</td>",
        "dw(RuntimeCodeVersion)eviltable2evil>&nbsp;eVil</td>",
        "dw(RuntimeCodeVersion)eviltable2evil>&nbsp;EVIL</td>",
        "dw(RuntimeCodeVersion)eviltable2evil>&nbsp;ev_il</td>",
        "dw(RuntimeCodeVersion)eviltable2evil>&nbsp;ev il</td>",
        "dw(RuntimeCodeVersion)eviltable2evil>&nbsp;ev4il</td>",
        "dw(RuntimeCodeVersion)eviltable2evil>&nbsp;e</td>",
        "dw(RuntimeCodeVersion)eviltable2evil>&nbsp; </td>",
        "dw(RuntimeCodeVersion)eviltable2evil>&nbsp;6</td>",
        "dw(RuntimeCodeVersion)eviltable2evil>&nbsp;_</td>",
        "dw(RuntimeCodeVersion)eviltable2evil>&nbsp;</td>",
        "dw(RuntimeCodeVersion)eviltable2>>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)eviltable2<>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)eviltable2;>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)eviltable2/>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)eviltable2)>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)eviltable2(>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)eviltable2&>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)eviltable2eVil>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)eviltable2EVIL>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)eviltable2ev_il>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)eviltable2ev il>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)eviltable2ev4il>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)eviltable2e>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)eviltable2 >&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)eviltable26>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)eviltable2_>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)eviltable2>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)>table2evil>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)<table2evil>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion);table2evil>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)/table2evil>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion))table2evil>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)(table2evil>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)&table2evil>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)eViltable2evil>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)EVILtable2evil>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)ev_iltable2evil>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)ev iltable2evil>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)ev4iltable2evil>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)etable2evil>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion) table2evil>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)6table2evil>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)_table2evil>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)table2evil>&nbsp;evil</td>",
        "dw(RuntimeCodeVersion)eviltable2evil>&nbsp;evil</td>"
      ]
    },
    {
      "regex": "hostonlyadapter2=\"(.*?)\"",
      "exceptionStackTrace": null,
      "matches": [
        "hostonlyadapter2=\"=\"",
        "hostonlyadapter2=\"\"\"",
        "hostonlyadapter2=\"eVil\"",
        "hostonlyadapter2=\"EVIL\"",
        "hostonlyadapter2=\"ev_il\"",
        "hostonlyadapter2=\"ev il\"",
        "hostonlyadapter2=\"ev4il\"",
        "hostonlyadapter2=\"e\"",
        "hostonlyadapter2=\" \"",
        "hostonlyadapter2=\"6\"",
        "hostonlyadapter2=\"_\"",
        "hostonlyadapter2=\"\"",
        "hostonlyadapter2=\"evil\""
      ]
    },
    {
      "regex": "To view this shared photo, go to: <a href=\\\"https://api.asm.skype.com/s/i?",
      "exceptionStackTrace": null,
      "matches": [
        "To view this shared photo, go to: <a href=\"https://apiaasmaskypeacom/s/ii",
        "To view this shared photo, go to: <a href=\"https://apiaasmaskypeAcom/s/i",
        "To view this shared photo, go to: <a href=\"https://apiaasmaskype=com/s/i",
        "To view this shared photo, go to: <a href=\"https://apiaasmaskype<com/s/i",
        "To view this shared photo, go to: <a href=\"https://apiaasmaskype:com/s/i",
        "To view this shared photo, go to: <a href=\"https://apiaasmaskype0com/s/i",
        "To view this shared photo, go to: <a href=\"https://apiaasmaskype/com/s/i",
        "To view this shared photo, go to: <a href=\"https://apiaasmaskype,com/s/i",
        "To view this shared photo, go to: <a href=\"https://apiaasmaskype\"com/s/i",
        "To view this shared photo, go to: <a href=\"https://apiaasmaskype com/s/i",
        "To view this shared photo, go to: <a href=\"https://apiaasmAskypeacom/s/i",
        "To view this shared photo, go to: <a href=\"https://apiaasm=skypeacom/s/i",
        "To view this shared photo, go to: <a href=\"https://apiaasm<skypeacom/s/i",
        "To view this shared photo, go to: <a href=\"https://apiaasm:skypeacom/s/i",
        "To view this shared photo, go to: <a href=\"https://apiaasm0skypeacom/s/i",
        "To view this shared photo, go to: <a href=\"https://apiaasm/skypeacom/s/i",
        "To view this shared photo, go to: <a href=\"https://apiaasm,skypeacom/s/i",
        "To view this shared photo, go to: <a href=\"https://apiaasm\"skypeacom/s/i",
        "To view this shared photo, go to: <a href=\"https://apiaasm skypeacom/s/i",
        "To view this shared photo, go to: <a href=\"https://apiAasmaskypeacom/s/i",
        "To view this shared photo, go to: <a href=\"https://api=asmaskypeacom/s/i",
        "To view this shared photo, go to: <a href=\"https://api<asmaskypeacom/s/i",
        "To view this shared photo, go to: <a href=\"https://api:asmaskypeacom/s/i",
        "To view this shared photo, go to: <a href=\"https://api0asmaskypeacom/s/i",
        "To view this shared photo, go to: <a href=\"https://api/asmaskypeacom/s/i",
        "To view this shared photo, go to: <a href=\"https://api,asmaskypeacom/s/i",
        "To view this shared photo, go to: <a href=\"https://api\"asmaskypeacom/s/i",
        "To view this shared photo, go to: <a href=\"https://api asmaskypeacom/s/i",
        "To view this shared photo, go to: <a href=\"https://apiaasmaskypeacom/s/",
        "To view this shared photo, go to: <a href=\"https://apiaasmaskypeacom/s/i"
      ]
    },
    {
      "regex": "^click|mousedown|mousemove$",
      "exceptionStackTrace": null,
      "matches": ["mousemove", "mousedown", "click"]
    },
    {
      "regex": "^([-]{5}END[ ])(?:X[.]?509|TRUSTED)[ ](CERTIFICATE[-]{5})",
      "exceptionStackTrace": null,
      "matches": [
        "-----END X.509 CERTIFICATE------",
        "-----END X.509 CERTIFICATE----",
        "-----END X..509 CERTIFICATE-----",
        "------END X.509 CERTIFICATE-----",
        "----END X.509 CERTIFICATE-----",
        "-----END X509 CERTIFICATE-----",
        "-----END TRUSTED CERTIFICATE-----",
        "-----END X.509 CERTIFICATE-----"
      ]
    },
    {
      "regex": "<div class=\"yt-alert-message\"[^>]*>([^<]+)</div>",
      "exceptionStackTrace": null,
      "matches": [
        "<div class=\"yt-alert-message\"evil>></div>",
        "<div class=\"yt-alert-message\"evil>=</div>",
        "<div class=\"yt-alert-message\"evil><</div>",
        "<div class=\"yt-alert-message\"evil>/</div>",
        "<div class=\"yt-alert-message\"evil>-</div>",
        "<div class=\"yt-alert-message\"evil>\"</div>",
        "<div class=\"yt-alert-message\"evil>eVil</div>",
        "<div class=\"yt-alert-message\"evil>EVIL</div>",
        "<div class=\"yt-alert-message\"evil>ev_il</div>",
        "<div class=\"yt-alert-message\"evil>ev il</div>",
        "<div class=\"yt-alert-message\"evil>ev4il</div>",
        "<div class=\"yt-alert-message\"evil>e</div>",
        "<div class=\"yt-alert-message\"evil> </div>",
        "<div class=\"yt-alert-message\"evil>6</div>",
        "<div class=\"yt-alert-message\"evil>_</div>",
        "<div class=\"yt-alert-message\"evil></div>",
        "<div class=\"yt-alert-message\">>evil</div>",
        "<div class=\"yt-alert-message\"=>evil</div>",
        "<div class=\"yt-alert-message\"<>evil</div>",
        "<div class=\"yt-alert-message\"/>evil</div>",
        "<div class=\"yt-alert-message\"->evil</div>",
        "<div class=\"yt-alert-message\"\">evil</div>",
        "<div class=\"yt-alert-message\"eVil>evil</div>",
        "<div class=\"yt-alert-message\"EVIL>evil</div>",
        "<div class=\"yt-alert-message\"ev_il>evil</div>",
        "<div class=\"yt-alert-message\"ev il>evil</div>",
        "<div class=\"yt-alert-message\"ev4il>evil</div>",
        "<div class=\"yt-alert-message\"e>evil</div>",
        "<div class=\"yt-alert-message\" >evil</div>",
        "<div class=\"yt-alert-message\"6>evil</div>",
        "<div class=\"yt-alert-message\"_>evil</div>",
        "<div class=\"yt-alert-message\">evil</div>",
        "<div class=\"yt-alert-message\"evil>evil</div>"
      ]
    },
    {
      "regex": ".+\\/$",
      "exceptionStackTrace": null,
      "matches": [
        "//",
        "eVil/",
        "EVIL/",
        "ev_il/",
        "ev il/",
        "ev4il/",
        "e/",
        " /",
        "6/",
        "_/",
        "/",
        "evil/"
      ]
    },
    {
      "regex": "[^a-z0-9]+([a-z])",
      "exceptionStackTrace": null,
      "matches": [
        "eVila",
        "EVILa",
        "ev_ila",
        "ev ila",
        "ev4ila",
        "ea",
        " a",
        "6a",
        "_a",
        "a",
        "evila"
      ]
    },
    {
      "regex": "conflict.*chwhat.*chwhat2",
      "exceptionStackTrace": null,
      "matches": [
        "conflictevilchwhateVilchwhat2",
        "conflictevilchwhatEVILchwhat2",
        "conflictevilchwhatev_ilchwhat2",
        "conflictevilchwhatev ilchwhat2",
        "conflictevilchwhatev4ilchwhat2",
        "conflictevilchwhatechwhat2",
        "conflictevilchwhat chwhat2",
        "conflictevilchwhat6chwhat2",
        "conflictevilchwhat_chwhat2",
        "conflictevilchwhatchwhat2",
        "conflicteVilchwhatevilchwhat2",
        "conflictEVILchwhatevilchwhat2",
        "conflictev_ilchwhatevilchwhat2",
        "conflictev ilchwhatevilchwhat2",
        "conflictev4ilchwhatevilchwhat2",
        "conflictechwhatevilchwhat2",
        "conflict chwhatevilchwhat2",
        "conflict6chwhatevilchwhat2",
        "conflict_chwhatevilchwhat2",
        "conflictchwhatevilchwhat2",
        "conflictchwhatchwhat2",
        "conflictevilchwhatevilchwhat2"
      ]
    },
    {
      "regex": "(?:\\s*\\d+\\)\\s)",
      "exceptionStackTrace": null,
      "matches": [" 00) ", " ) ", "  0) ", "0) ", " 0) "]
    },
    {
      "regex": "^.+-(?<locale>\\w+).yml$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<l"
      },
      "matches": []
    },
    {
      "regex": "\\/+?$",
      "exceptionStackTrace": null,
      "matches": ["//", "", "/"]
    },
    { "regex": "popover1", "exceptionStackTrace": null, "matches": ["popover1"] },
    {
      "regex": "Queued. Thank you.",
      "exceptionStackTrace": null,
      "matches": [
        "Queueda Thank you_",
        "Queueda Thank youA",
        "Queueda Thank you0",
        "Queueda Thank you ",
        "Queued_ Thank youa",
        "QueuedA Thank youa",
        "Queued0 Thank youa",
        "Queued  Thank youa",
        "Queueda Thank youa"
      ]
    },
    {
      "regex": "^(.{0,$bpl})(\\s|\\z)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    { "regex": "(<SUBJ>)", "exceptionStackTrace": null, "matches": ["<SUBJ>"] },
    {
      "regex": "\\Q$start\\E\\s*(.*?)\\s*\\Q$stop\\E",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\Q"
      },
      "matches": []
    },
    {
      "regex": "^(.*?)\\r?\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": "^<input type=\"text\"",
      "exceptionStackTrace": null,
      "matches": ["<input type=\"text\""]
    },
    {
      "regex": "^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*arguments\\)",
      "exceptionStackTrace": null,
      "matches": [
        "function evil() {evil.apply(this,  arguments)",
        "function evil() {evil.apply(this,arguments)",
        "function evil() {{.apply(this, arguments)",
        "function evil() {..apply(this, arguments)",
        "function evil() {,.apply(this, arguments)",
        "function evil() {).apply(this, arguments)",
        "function evil() {(.apply(this, arguments)",
        "function evil() {eVil.apply(this, arguments)",
        "function evil() {EVIL.apply(this, arguments)",
        "function evil() {ev_il.apply(this, arguments)",
        "function evil() {ev il.apply(this, arguments)",
        "function evil() {ev4il.apply(this, arguments)",
        "function evil() {e.apply(this, arguments)",
        "function evil() { .apply(this, arguments)",
        "function evil() {6.apply(this, arguments)",
        "function evil() {_.apply(this, arguments)",
        "function evil() {.apply(this, arguments)",
        "function evil()  {evil.apply(this, arguments)",
        "function evil(){evil.apply(this, arguments)",
        "function {() {evil.apply(this, arguments)",
        "function .() {evil.apply(this, arguments)",
        "function ,() {evil.apply(this, arguments)",
        "function )() {evil.apply(this, arguments)",
        "function (() {evil.apply(this, arguments)",
        "function eVil() {evil.apply(this, arguments)",
        "function EVIL() {evil.apply(this, arguments)",
        "function ev_il() {evil.apply(this, arguments)",
        "function ev il() {evil.apply(this, arguments)",
        "function ev4il() {evil.apply(this, arguments)",
        "function e() {evil.apply(this, arguments)",
        "function  () {evil.apply(this, arguments)",
        "function 6() {evil.apply(this, arguments)",
        "function _() {evil.apply(this, arguments)",
        "function () {evil.apply(this, arguments)",
        "function  evil() {evil.apply(this, arguments)",
        "functionevil() {evil.apply(this, arguments)",
        "function evil(){evil.apply(this,arguments)",
        "function evil() {evil.apply(this, arguments)"
      ]
    },
    {
      "regex": "(.+)\uff3b\uff03\u300c\\1\u300d\u306f\u7f6b\u56f2\u307f\uff3d",
      "exceptionStackTrace": null,
      "matches": [
        "eVil\uff3b\uff03\u300cevil\u300d\u306f\u7f6b\u56f2\u307f\uff3d",
        "EVIL\uff3b\uff03\u300cevil\u300d\u306f\u7f6b\u56f2\u307f\uff3d",
        "ev_il\uff3b\uff03\u300cevil\u300d\u306f\u7f6b\u56f2\u307f\uff3d",
        "ev il\uff3b\uff03\u300cevil\u300d\u306f\u7f6b\u56f2\u307f\uff3d",
        "ev4il\uff3b\uff03\u300cevil\u300d\u306f\u7f6b\u56f2\u307f\uff3d",
        "e\uff3b\uff03\u300cevil\u300d\u306f\u7f6b\u56f2\u307f\uff3d",
        " \uff3b\uff03\u300cevil\u300d\u306f\u7f6b\u56f2\u307f\uff3d",
        "6\uff3b\uff03\u300cevil\u300d\u306f\u7f6b\u56f2\u307f\uff3d",
        "_\uff3b\uff03\u300cevil\u300d\u306f\u7f6b\u56f2\u307f\uff3d",
        "\uff3b\uff03\u300cevil\u300d\u306f\u7f6b\u56f2\u307f\uff3d",
        "evil\uff3b\uff03\u300cevil\u300d\u306f\u7f6b\u56f2\u307f\uff3d"
      ]
    },
    {
      "regex": "((?:Mac ?|; )OS X)[\\s/](?:(\\d+)[_.](\\d+)(?:[_.](\\d+))?|Mach-O)",
      "exceptionStackTrace": null,
      "matches": [
        "Mac OS X/0.0.0.0",
        "Mac OS X/0.0",
        "Mac OS X/0.0.00",
        "Mac OS X/0.0.",
        "Mac OS X/0.0_0",
        "Mac OS X/0.00.0",
        "Mac OS X/0..0",
        "Mac OS X/0_0.0",
        "Mac OS X/00.0.0",
        "Mac OS X/.0.0",
        "Mac OS X 0.0.0",
        "Mac  OS X/0.0.0",
        "MacOS X/0.0.0",
        "; OS X/0.0",
        "MacOS X/Mach-O",
        "MacOS X/0.0",
        "; OS X/0.0.0",
        "Mac OS X/Mach-O",
        "Mac OS X/0.0.0"
      ]
    },
    {
      "regex": "(?<!\\.)\\b(wrldmagm|updateNodes|updateCamera|updateBodies|update|show|saveas|rrtheta|rrsigma|rrdelta|removeViewpoint|removeNode|removeBody|read|quatrotate|quatnormalize|quatnorm|quatmultiply|quatmod|quatinv|quatdivide|quatconj|quat2dcm|quat2angle|play|nodeInfo|moveBody|move|mjuliandate|machnumber|load|lla2ecef|leapyear|juliandate|initialize|initIfNeeded|hide|gravitywgs84|geoidegm96|geod2geoc|geocradius|geoc2geod|generatePatches|findstartstoptimes|fganimation|ecef2lla|dpressure|delete|decyear|dcmecef2ned|dcmbody2wind|dcm2quat|dcm2latlon|dcm2angle|dcm2alphabeta|datcomimport|createBody|correctairspeed|convvel|convtemp|convpres|convmass|convlength|convforce|convdensity|convangvel|convangacc|convang|convacc|atmospalt|atmosnrlmsise00|atmosnonstd|atmoslapse|atmosisa|atmoscoesa|atmoscira|angle2quat|angle2dcm|alphabeta|airspeed|addViewpoint|addRoute|addNode|addBody|VirtualRealityAnimation|Viewpoint|Node|Geometry|GenerateRunScript|Camera|Body|Animation)\\b",
      "exceptionStackTrace": null,
      "matches": [
        "Animation",
        "Body",
        "Camera",
        "GenerateRunScript",
        "Geometry",
        "Node",
        "Viewpoint",
        "VirtualRealityAnimation",
        "addBody",
        "addNode",
        "addRoute",
        "addViewpoint",
        "airspeed",
        "alphabeta",
        "angle2dcm",
        "angle2quat",
        "atmoscira",
        "atmoscoesa",
        "atmosisa",
        "atmoslapse",
        "atmosnonstd",
        "atmosnrlmsise00",
        "atmospalt",
        "convacc",
        "convang",
        "convangacc",
        "convangvel",
        "convdensity",
        "convforce",
        "convlength",
        "convmass",
        "convpres",
        "convtemp",
        "convvel",
        "correctairspeed",
        "createBody",
        "datcomimport",
        "dcm2alphabeta",
        "dcm2angle",
        "dcm2latlon",
        "dcm2quat",
        "dcmbody2wind",
        "dcmecef2ned",
        "decyear",
        "delete",
        "dpressure",
        "ecef2lla",
        "fganimation",
        "findstartstoptimes",
        "generatePatches",
        "geoc2geod",
        "geocradius",
        "geod2geoc",
        "geoidegm96",
        "gravitywgs84",
        "hide",
        "initIfNeeded",
        "initialize",
        "juliandate",
        "leapyear",
        "lla2ecef",
        "load",
        "machnumber",
        "mjuliandate",
        "move",
        "moveBody",
        "nodeInfo",
        "play",
        "quat2angle",
        "quat2dcm",
        "quatconj",
        "quatdivide",
        "quatinv",
        "quatmod",
        "quatmultiply",
        "quatnorm",
        "quatnormalize",
        "quatrotate",
        "read",
        "removeBody",
        "removeNode",
        "removeViewpoint",
        "rrdelta",
        "rrsigma",
        "rrtheta",
        "saveas",
        "show",
        "update",
        "updateBodies",
        "updateCamera",
        "updateNodes",
        "wrldmagm"
      ]
    },
    {
      "regex": "[Rr]ead(?:\\p{Zs}*|[\\p{Pd}\\p{Pc}])?[Oo]nly\\p{Zs}*:\\p{Zs}*(true|false)$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\p"
      },
      "matches": []
    },
    {
      "regex": "([\\x00-\\x1F\\x7F-\\xFF])",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 0"
      },
      "matches": []
    },
    {
      "regex": "(end|endblock)",
      "exceptionStackTrace": null,
      "matches": ["endblock", "end"]
    },
    {
      "regex": "^(\\d\\d-?\\d{8}-?)(\\d)$",
      "exceptionStackTrace": null,
      "matches": [
        "00-00000000--0",
        "00-000000000",
        "00-000000000-0",
        "00-0000000-0",
        "00--00000000-0",
        "0000000000-0",
        "00000000000",
        "00-00000000-0"
      ]
    },
    {
      "regex": "^(additive|internet|local-AS|no-advertise|no-export|none|\\d+:\\d+)$",
      "exceptionStackTrace": null,
      "matches": [
        "0:00",
        "0:",
        "00:0",
        ":0",
        "0:0",
        "none",
        "no-export",
        "no-advertise",
        "local-AS",
        "internet",
        "additive"
      ]
    },
    {
      "regex": "(<S>[Aa]r<\\/S> <D>(?:\\x{e1}r|bhur|a)<\\/D> <E[^>]*><N pl=\"n\" gnt=\"n\">[Ss]on<\\/N><\\/E>)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "incomplete escape \\x"
      },
      "matches": []
    },
    {
      "regex": "^a step that fails with a generator interface$",
      "exceptionStackTrace": null,
      "matches": ["a step that fails with a generator interface"]
    },
    {
      "regex": "AppleWebKit.+ (NX)/(\\d+)\\.(\\d+)\\.(\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "AppleWebKitevil NX/0.0.00",
        "AppleWebKitevil NX/0.0.",
        "AppleWebKitevil NX/0.00.0",
        "AppleWebKitevil NX/0..0",
        "AppleWebKitevil NX/00.0.0",
        "AppleWebKitevil NX/.0.0",
        "AppleWebKit/ NX/0.0.0",
        "AppleWebKit. NX/0.0.0",
        "AppleWebKiteVil NX/0.0.0",
        "AppleWebKitEVIL NX/0.0.0",
        "AppleWebKitev_il NX/0.0.0",
        "AppleWebKitev il NX/0.0.0",
        "AppleWebKitev4il NX/0.0.0",
        "AppleWebKite NX/0.0.0",
        "AppleWebKit  NX/0.0.0",
        "AppleWebKit6 NX/0.0.0",
        "AppleWebKit_ NX/0.0.0",
        "AppleWebKit NX/0.0.0",
        "AppleWebKitevil NX/0.0.0"
      ]
    },
    {
      "regex": "^10.7",
      "exceptionStackTrace": null,
      "matches": ["10_7", "10A7", "1007", "10 7", "10a7"]
    },
    {
      "regex": "$seg_token",
      "exceptionStackTrace": null,
      "matches": ["seg_token"]
    },
    {
      "regex": "^$D?$wkexp(?:$of$mmm?$Y)?$",
      "exceptionStackTrace": null,
      "matches": [
        "DwkexpofmmmYofmmmY",
        "Dwkexp",
        "DwkexpofmmmmY",
        "DwkexpofmmY",
        "DDwkexpofmmmY",
        "wkexpofmmmY",
        "wkexp",
        "DwkexpofmmmY"
      ]
    },
    {
      "regex": "[&?]+",
      "exceptionStackTrace": null,
      "matches": ["??", "", "&", "?"]
    },
    {
      "regex": "\\pN",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\p"
      },
      "matches": []
    },
    {
      "regex": "^(\\d+)\\.[0]+$",
      "exceptionStackTrace": null,
      "matches": ["0.00", "0.", "00.0", ".0", "0.0"]
    },
    {
      "regex": "swagger:[\\s'\"]*\\d\\.?\\d?",
      "exceptionStackTrace": null,
      "matches": [
        "swagger:\"0.00",
        "swagger:\"0.",
        "swagger:\"0..0",
        "swagger:\"00",
        "swagger:\"\"0.0",
        "swagger:0.0",
        "swagger:'0.0",
        "swagger: 0.0",
        "swagger:0",
        "swagger:\"0.0"
      ]
    },
    {
      "regex": "^host=myHost metric=cpu\\.3  foo=fancy 0\\.28 \\d{10,}$",
      "exceptionStackTrace": null,
      "matches": [
        "host=myHost metric=cpu.3  foo=fancy 0.28 000000000",
        "host=myHost metric=cpu.3  foo=fancy 0.28 0000000000"
      ]
    },
    {
      "regex": "(\\d+)(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "0eVil",
        "0EVIL",
        "0ev_il",
        "0ev il",
        "0ev4il",
        "0e",
        "0 ",
        "06",
        "0_",
        "00evil",
        "evil",
        "0",
        "0evil"
      ]
    },
    {
      "regex": "\\b0b[01]+\\b|\\b0x[\\da-f]*\\.?[\\da-fp-]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?[df]?",
      "exceptionStackTrace": null,
      "matches": [
        ".00e-0f",
        ".e-0f",
        "0.0e-0ff",
        "0.0e-0",
        "0.0e-0d",
        "0.0e-0a",
        "0.0e-0e-0f",
        "0.0f",
        "0.0e-00f",
        "0.0e-f",
        "0.0e--0f",
        "0.0e0f",
        "0.0e+0f",
        "0.00e-0f",
        "0.e-0f",
        "0..0e-0f",
        "00e-0f",
        "00.0e-0f",
        "0xa.--",
        "0xa.",
        "0xa.p",
        "0xa.g",
        "0xa.a",
        "0xa.0",
        "0xa..-",
        "0xa-",
        "0xaa.-",
        "0x.-",
        "0xg.-",
        "0x0.-",
        "0b11",
        "0b",
        "0b2",
        "0b0",
        ".0",
        "0",
        "0x-",
        ".0e-0f",
        "0.0e-0f",
        "0xa.-",
        "0b1"
      ]
    },
    { "regex": "-OOM ", "exceptionStackTrace": null, "matches": ["-OOM "] },
    {
      "regex": "(validate)",
      "exceptionStackTrace": null,
      "matches": ["validate"]
    },
    {
      "regex": "CLOSED:\\s*<(\\d+)\\-(\\d+)\\-(\\d+)\\s*\\w+",
      "exceptionStackTrace": null,
      "matches": [
        "CLOSED: <0-0-0 eVil",
        "CLOSED: <0-0-0 EVIL",
        "CLOSED: <0-0-0 ev_il",
        "CLOSED: <0-0-0 ev il",
        "CLOSED: <0-0-0 ev4il",
        "CLOSED: <0-0-0 e",
        "CLOSED: <0-0-0  ",
        "CLOSED: <0-0-0 6",
        "CLOSED: <0-0-0 _",
        "CLOSED: <0-0-0 ",
        "CLOSED: <0-0-0  evil",
        "CLOSED: <0-0-0evil",
        "CLOSED: <0-0-00 evil",
        "CLOSED: <0-0- evil",
        "CLOSED: <0-00-0 evil",
        "CLOSED: <0--0 evil",
        "CLOSED: <00-0-0 evil",
        "CLOSED: <-0-0 evil",
        "CLOSED:  <0-0-0 evil",
        "CLOSED:<0-0-0 evil",
        "CLOSED:<0-0-0evil",
        "CLOSED: <0-0-0 evil"
      ]
    },
    {
      "regex": "[ \\t\\r\\n\\/]+",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": ",\\ *}",
      "exceptionStackTrace": null,
      "matches": [",  }", ",}", ", }"]
    },
    {
      "regex": "^uwin(-nt)?$",
      "exceptionStackTrace": null,
      "matches": ["uwin-nt-nt", "uwin", "uwin-nt"]
    },
    {
      "regex": "^=\\?\\w",
      "exceptionStackTrace": null,
      "matches": ["=?_", "=?A", "=?0", "=?a"]
    },
    {
      "regex": "\\Q$self->{ldap_inseparator}\\E",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\Q"
      },
      "matches": []
    },
    {
      "regex": "screenshots\\/test_run_(\\d+)\\/screenshot_(\\d+)\\.png",
      "exceptionStackTrace": null,
      "matches": [
        "screenshots/test_run_0/screenshot_00.png",
        "screenshots/test_run_0/screenshot_.png",
        "screenshots/test_run_00/screenshot_0.png",
        "screenshots/test_run_/screenshot_0.png",
        "screenshots/test_run_0/screenshot_0.png"
      ]
    },
    {
      "regex": "^\\w+(\\.\\w+)*?$",
      "exceptionStackTrace": null,
      "matches": [
        "evil.evil.evil",
        "evil.eVil",
        "evil.EVIL",
        "evil.ev_il",
        "evil.ev il",
        "evil.ev4il",
        "evil.e",
        "evil. ",
        "evil.6",
        "evil._",
        "evil.",
        "eVil.evil",
        "EVIL.evil",
        "ev_il.evil",
        "ev il.evil",
        "ev4il.evil",
        "e.evil",
        " .evil",
        "6.evil",
        "_.evil",
        ".evil",
        "evil",
        "evil.evil"
      ]
    },
    {
      "regex": "^content-type:.*(image/|multipart)",
      "exceptionStackTrace": null,
      "matches": [
        "content-type::image/",
        "content-type:/image/",
        "content-type:-image/",
        "content-type:eVilimage/",
        "content-type:EVILimage/",
        "content-type:ev_ilimage/",
        "content-type:ev ilimage/",
        "content-type:ev4ilimage/",
        "content-type:eimage/",
        "content-type: image/",
        "content-type:6image/",
        "content-type:_image/",
        "content-type:multipart",
        "content-type:image/",
        "content-type:evilmultipart",
        "content-type:evilimage/"
      ]
    },
    {
      "regex": "\\/demokit\\/",
      "exceptionStackTrace": null,
      "matches": ["/demokit/"]
    },
    {
      "regex": "([a-z\\*]+/[a-z0-9\\+\\*\\-=;\\s]+)",
      "exceptionStackTrace": null,
      "matches": [
        "evil/=",
        "evil/;",
        "evil//",
        "evil/-",
        "evil/+",
        "evil/*",
        "evil/eVil",
        "evil/EVIL",
        "evil/ev_il",
        "evil/ev il",
        "evil/ev4il",
        "evil/e",
        "evil/ ",
        "evil/6",
        "evil/_",
        "evil/",
        "=/evil",
        ";/evil",
        "//evil",
        "-/evil",
        "+/evil",
        "*/evil",
        "eVil/evil",
        "EVIL/evil",
        "ev_il/evil",
        "ev il/evil",
        "ev4il/evil",
        "e/evil",
        " /evil",
        "6/evil",
        "_/evil",
        "/evil",
        "evil/evil"
      ]
    },
    {
      "regex": "<rect.*? x=\"(.*?)\".*?/>",
      "exceptionStackTrace": null,
      "matches": [
        "<rectevil x=\"evil\">/>",
        "<rectevil x=\"evil\"=/>",
        "<rectevil x=\"evil\"</>",
        "<rectevil x=\"evil\"//>",
        "<rectevil x=\"evil\"\"/>",
        "<rectevil x=\"evil\"eVil/>",
        "<rectevil x=\"evil\"EVIL/>",
        "<rectevil x=\"evil\"ev_il/>",
        "<rectevil x=\"evil\"ev il/>",
        "<rectevil x=\"evil\"ev4il/>",
        "<rectevil x=\"evil\"e/>",
        "<rectevil x=\"evil\" />",
        "<rectevil x=\"evil\"6/>",
        "<rectevil x=\"evil\"_/>",
        "<rectevil x=\"evil\"/>",
        "<rectevil x=\">\"evil/>",
        "<rectevil x=\"=\"evil/>",
        "<rectevil x=\"<\"evil/>",
        "<rectevil x=\"/\"evil/>",
        "<rectevil x=\"\"\"evil/>",
        "<rectevil x=\"eVil\"evil/>",
        "<rectevil x=\"EVIL\"evil/>",
        "<rectevil x=\"ev_il\"evil/>",
        "<rectevil x=\"ev il\"evil/>",
        "<rectevil x=\"ev4il\"evil/>",
        "<rectevil x=\"e\"evil/>",
        "<rectevil x=\" \"evil/>",
        "<rectevil x=\"6\"evil/>",
        "<rectevil x=\"_\"evil/>",
        "<rectevil x=\"\"evil/>",
        "<rect> x=\"evil\"evil/>",
        "<rect= x=\"evil\"evil/>",
        "<rect< x=\"evil\"evil/>",
        "<rect/ x=\"evil\"evil/>",
        "<rect\" x=\"evil\"evil/>",
        "<recteVil x=\"evil\"evil/>",
        "<rectEVIL x=\"evil\"evil/>",
        "<rectev_il x=\"evil\"evil/>",
        "<rectev il x=\"evil\"evil/>",
        "<rectev4il x=\"evil\"evil/>",
        "<recte x=\"evil\"evil/>",
        "<rect  x=\"evil\"evil/>",
        "<rect6 x=\"evil\"evil/>",
        "<rect_ x=\"evil\"evil/>",
        "<rect x=\"evil\"evil/>",
        "<rect x=\"\"/>",
        "<rectevil x=\"evil\"evil/>"
      ]
    },
    {
      "regex": "Minify images",
      "exceptionStackTrace": null,
      "matches": ["Minify images"]
    },
    { "regex": "^np", "exceptionStackTrace": null, "matches": ["np"] },
    {
      "regex": "^[\\-\\s]+|[\\-\\s]+\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "^\\/?i18n(\\/.*)?$",
      "exceptionStackTrace": null,
      "matches": [
        "/i18n/evil/evil",
        "/i18n",
        "/i18n//",
        "/i18n/eVil",
        "/i18n/EVIL",
        "/i18n/ev_il",
        "/i18n/ev il",
        "/i18n/ev4il",
        "/i18n/e",
        "/i18n/ ",
        "/i18n/6",
        "/i18n/_",
        "/i18n/",
        "//i18n/evil",
        "i18n/evil",
        "i18n",
        "/i18n/evil"
      ]
    },
    {
      "regex": "$prefix\\K\\b$regex\\b",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\K"
      },
      "matches": []
    },
    {
      "regex": "([a-z0-9!#$%&'*+\\/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+\\/=?^_`\"\"{|}~-]+)*(@|\\sat\\s)(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?(\\.|\"\"\\sdot\\s))+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)",
      "exceptionStackTrace": null,
      "matches": [
        "evil.evil@0evil0.0evil0evil0",
        "evil.evil@0evil0.0",
        "evil.evil@0evil0.0evila",
        "evil.evil@0evil0.0~0",
        "evil.evil@0evil0.0}0",
        "evil.evil@0evil0.0|0",
        "evil.evil@0evil0.0{0",
        "evil.evil@0evil0.0`0",
        "evil.evil@0evil0.0^0",
        "evil.evil@0evil0.0@0",
        "evil.evil@0evil0.0?0",
        "evil.evil@0evil0.0=0",
        "evil.evil@0evil0.0/0",
        "evil.evil@0evil0.0.0",
        "evil.evil@0evil0.0-0",
        "evil.evil@0evil0.0+0",
        "evil.evil@0evil0.0*0",
        "evil.evil@0evil0.0'0",
        "evil.evil@0evil0.0&0",
        "evil.evil@0evil0.0%0",
        "evil.evil@0evil0.0$0",
        "evil.evil@0evil0.0#0",
        "evil.evil@0evil0.0\"0",
        "evil.evil@0evil0.0!0",
        "evil.evil@0evil0.0eVil0",
        "evil.evil@0evil0.0EVIL0",
        "evil.evil@0evil0.0ev_il0",
        "evil.evil@0evil0.0ev il0",
        "evil.evil@0evil0.0ev4il0",
        "evil.evil@0evil0.0e0",
        "evil.evil@0evil0.0 0",
        "evil.evil@0evil0.060",
        "evil.evil@0evil0.0_0",
        "evil.evil@0evil0.00",
        "evil.evil@0evil0.aevil0",
        "evil.evil@0evil0.0evil0.0evil0",
        "evil.evil@0evil0",
        "evil.evil@0evil0evil0.0evil0",
        "evil.evil@0.0evil0",
        "evil.evil@0evila.0evil0",
        "evil.evil@0~0.0evil0",
        "evil.evil@0}0.0evil0",
        "evil.evil@0|0.0evil0",
        "evil.evil@0{0.0evil0",
        "evil.evil@0`0.0evil0",
        "evil.evil@0^0.0evil0",
        "evil.evil@0@0.0evil0",
        "evil.evil@0?0.0evil0",
        "evil.evil@0=0.0evil0",
        "evil.evil@0/0.0evil0",
        "evil.evil@0.0.0evil0",
        "evil.evil@0-0.0evil0",
        "evil.evil@0+0.0evil0",
        "evil.evil@0*0.0evil0",
        "evil.evil@0'0.0evil0",
        "evil.evil@0&0.0evil0",
        "evil.evil@0%0.0evil0",
        "evil.evil@0$0.0evil0",
        "evil.evil@0#0.0evil0",
        "evil.evil@0\"0.0evil0",
        "evil.evil@0!0.0evil0",
        "evil.evil@0eVil0.0evil0",
        "evil.evil@0EVIL0.0evil0",
        "evil.evil@0ev_il0.0evil0",
        "evil.evil@0ev il0.0evil0",
        "evil.evil@0ev4il0.0evil0",
        "evil.evil@0e0.0evil0",
        "evil.evil@0 0.0evil0",
        "evil.evil@060.0evil0",
        "evil.evil@0_0.0evil0",
        "evil.evil@00.0evil0",
        "evil.evil@aevil0.0evil0",
        "evil.evil.evil@0evil0.0evil0",
        "evil@0evil0.0evil0",
        "evil.~@0evil0.0evil0",
        "evil.}@0evil0.0evil0",
        "evil.|@0evil0.0evil0",
        "evil.{@0evil0.0evil0",
        "evil.`@0evil0.0evil0",
        "evil.^@0evil0.0evil0",
        "evil.@@0evil0.0evil0",
        "evil.?@0evil0.0evil0",
        "evil.=@0evil0.0evil0",
        "evil./@0evil0.0evil0",
        "evil..@0evil0.0evil0",
        "evil.-@0evil0.0evil0",
        "evil.+@0evil0.0evil0",
        "evil.*@0evil0.0evil0",
        "evil.'@0evil0.0evil0",
        "evil.&@0evil0.0evil0",
        "evil.%@0evil0.0evil0",
        "evil.$@0evil0.0evil0",
        "evil.#@0evil0.0evil0",
        "evil.\"@0evil0.0evil0",
        "evil.!@0evil0.0evil0",
        "evil.eVil@0evil0.0evil0",
        "evil.EVIL@0evil0.0evil0",
        "evil.ev_il@0evil0.0evil0",
        "evil.ev il@0evil0.0evil0",
        "evil.ev4il@0evil0.0evil0",
        "evil.e@0evil0.0evil0",
        "evil. @0evil0.0evil0",
        "evil.6@0evil0.0evil0",
        "evil._@0evil0.0evil0",
        "evil.@0evil0.0evil0",
        "~.evil@0evil0.0evil0",
        "}.evil@0evil0.0evil0",
        "|.evil@0evil0.0evil0",
        "{.evil@0evil0.0evil0",
        "`.evil@0evil0.0evil0",
        "^.evil@0evil0.0evil0",
        "@.evil@0evil0.0evil0",
        "?.evil@0evil0.0evil0",
        "=.evil@0evil0.0evil0",
        "/.evil@0evil0.0evil0",
        "..evil@0evil0.0evil0",
        "-.evil@0evil0.0evil0",
        "+.evil@0evil0.0evil0",
        "*.evil@0evil0.0evil0",
        "'.evil@0evil0.0evil0",
        "&.evil@0evil0.0evil0",
        "%.evil@0evil0.0evil0",
        "$.evil@0evil0.0evil0",
        "#.evil@0evil0.0evil0",
        "\".evil@0evil0.0evil0",
        "!.evil@0evil0.0evil0",
        "eVil.evil@0evil0.0evil0",
        "EVIL.evil@0evil0.0evil0",
        "ev_il.evil@0evil0.0evil0",
        "ev il.evil@0evil0.0evil0",
        "ev4il.evil@0evil0.0evil0",
        "e.evil@0evil0.0evil0",
        " .evil@0evil0.0evil0",
        "6.evil@0evil0.0evil0",
        "_.evil@0evil0.0evil0",
        ".evil@0evil0.0evil0",
        "evil at 0.0",
        "evil@0\"\" dot 0",
        "evil@0.0",
        "evil.evil at 0evil0.0evil0",
        "evil.evil@0evil0\"\" dot 0evil0",
        "evil.evil@0evil0.0evil0"
      ]
    },
    {
      "regex": "^The template file \"([^\"]*)\" is not uploaded$",
      "exceptionStackTrace": null,
      "matches": [
        "The template file \"\"\" is not uploaded",
        "The template file \"eVil\" is not uploaded",
        "The template file \"EVIL\" is not uploaded",
        "The template file \"ev_il\" is not uploaded",
        "The template file \"ev il\" is not uploaded",
        "The template file \"ev4il\" is not uploaded",
        "The template file \"e\" is not uploaded",
        "The template file \" \" is not uploaded",
        "The template file \"6\" is not uploaded",
        "The template file \"_\" is not uploaded",
        "The template file \"\" is not uploaded",
        "The template file \"evil\" is not uploaded"
      ]
    },
    {
      "regex": "\\r?\\n-----END RSA PRIVATE KEY-----\\r?\\n*$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": "my\\(\\$regex\\)\\s=\\s\\$FORMAT",
      "exceptionStackTrace": null,
      "matches": ["my($regex) = $FORMAT"]
    },
    {
      "regex": "^[^\\s\\/] $",
      "exceptionStackTrace": null,
      "matches": ["A ", "0 ", "/ ", "  ", "a "]
    },
    {
      "regex": "(?<=\\s)[\\-*]+\\s",
      "exceptionStackTrace": null,
      "matches": ["** ", " ", "- ", "* "]
    },
    {
      "regex": "\"((?:[^\\n\\r\\f\\\"]|\\\\(?:\\$|\\n|[0-9a-fA-F]{1,6}\\s?))*)(:?\"|$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "\\[url=.*\\]",
      "exceptionStackTrace": null,
      "matches": [
        "[url=]]",
        "[url=[]",
        "[url==]",
        "[url=eVil]",
        "[url=EVIL]",
        "[url=ev_il]",
        "[url=ev il]",
        "[url=ev4il]",
        "[url=e]",
        "[url= ]",
        "[url=6]",
        "[url=_]",
        "[url=]",
        "[url=evil]"
      ]
    },
    {
      "regex": "where\\s*\\([^)]*\\)\\Z",
      "exceptionStackTrace": null,
      "matches": [
        "where ())",
        "where (()",
        "where (eVil)",
        "where (EVIL)",
        "where (ev_il)",
        "where (ev il)",
        "where (ev4il)",
        "where (e)",
        "where ( )",
        "where (6)",
        "where (_)",
        "where ()",
        "where  (evil)",
        "where(evil)",
        "where()",
        "where (evil)"
      ]
    },
    {
      "regex": "(^|\\s)[ld\\-][\\-rwx]+\\s",
      "exceptionStackTrace": null,
      "matches": [
        "-xx ",
        "- ",
        "-w ",
        "-r ",
        "-a ",
        "-- ",
        "lx ",
        "dx ",
        "ax ",
        " -x ",
        "-x "
      ]
    },
    { "regex": "^ALTER_", "exceptionStackTrace": null, "matches": ["ALTER_"] },
    {
      "regex": "\\ACompressed at level \\d with zlib [0-9.]+\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "\n    (?<!\\?)     #if no preceding escape (?)\n    '           #apostrophe\n    (?![\n\r])  #if no following CR of LF\n    ",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?)"
      },
      "matches": []
    },
    {
      "regex": "More than one module matches",
      "exceptionStackTrace": null,
      "matches": ["More than one module matches"]
    },
    { "regex": "$eed", "exceptionStackTrace": null, "matches": ["eed"] },
    {
      "regex": "^the time grid should have \"(.*)\" hours for a running total$",
      "exceptionStackTrace": null,
      "matches": [
        "the time grid should have \"\"\" hours for a running total",
        "the time grid should have \"eVil\" hours for a running total",
        "the time grid should have \"EVIL\" hours for a running total",
        "the time grid should have \"ev_il\" hours for a running total",
        "the time grid should have \"ev il\" hours for a running total",
        "the time grid should have \"ev4il\" hours for a running total",
        "the time grid should have \"e\" hours for a running total",
        "the time grid should have \" \" hours for a running total",
        "the time grid should have \"6\" hours for a running total",
        "the time grid should have \"_\" hours for a running total",
        "the time grid should have \"\" hours for a running total",
        "the time grid should have \"evil\" hours for a running total"
      ]
    },
    {
      "regex": "grant_type",
      "exceptionStackTrace": null,
      "matches": ["grant_type"]
    },
    {
      "regex": "^\\%([^\\s]+)\\s+(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "%evil %",
        "%evil eVil",
        "%evil EVIL",
        "%evil ev_il",
        "%evil ev il",
        "%evil ev4il",
        "%evil e",
        "%evil  ",
        "%evil 6",
        "%evil _",
        "%evil  evil",
        "%evilevil",
        "%% evil",
        "%eVil evil",
        "%EVIL evil",
        "%ev_il evil",
        "%ev il evil",
        "%ev4il evil",
        "%e evil",
        "%  evil",
        "%6 evil",
        "%_ evil",
        "% evil",
        "%evil ",
        "%evil evil"
      ]
    },
    {
      "regex": "(?<![a-km-zA-HJ-NP-Z0-9])[13][a-km-zA-HJ-NP-Z0-9]{26,33}(?![a-km-zA-HJ-NP-Z0-9])",
      "exceptionStackTrace": null,
      "matches": [
        "30000000000000000000000000000000000",
        "3000000000000000000000000000000000",
        "30000000000000000000000000",
        "3m0000000000000000000000000",
        "3l0000000000000000000000000",
        "3a0000000000000000000000000",
        "3P0000000000000000000000000",
        "3J0000000000000000000000000",
        "3I0000000000000000000000000",
        "3A0000000000000000000000000",
        "100000000000000000000000000",
        "000000000000000000000000000",
        "300000000000000000000000000"
      ]
    },
    {
      "regex": "\\A(<style.*?>.*?<\\/style>)",
      "exceptionStackTrace": null,
      "matches": [
        "<styleevil>></style>",
        "<styleevil><</style>",
        "<styleevil>/</style>",
        "<styleevil>eVil</style>",
        "<styleevil>EVIL</style>",
        "<styleevil>ev_il</style>",
        "<styleevil>ev il</style>",
        "<styleevil>ev4il</style>",
        "<styleevil>e</style>",
        "<styleevil> </style>",
        "<styleevil>6</style>",
        "<styleevil>_</style>",
        "<styleevil></style>",
        "<style>>evil</style>",
        "<style<>evil</style>",
        "<style/>evil</style>",
        "<styleeVil>evil</style>",
        "<styleEVIL>evil</style>",
        "<styleev_il>evil</style>",
        "<styleev il>evil</style>",
        "<styleev4il>evil</style>",
        "<stylee>evil</style>",
        "<style >evil</style>",
        "<style6>evil</style>",
        "<style_>evil</style>",
        "<style>evil</style>",
        "<style></style>",
        "<styleevil>evil</style>"
      ]
    },
    {
      "regex": "^COLOR|SHAPE|ICON|FONT$",
      "exceptionStackTrace": null,
      "matches": ["FONT", "ICON", "SHAPE", "COLOR"]
    },
    {
      "regex": "^((> *)?```\\w*|(> *)?~~~~*(\\s*{.*})?)$",
      "exceptionStackTrace": null,
      "matches": [
        "> ~~~~ {evil} {evil}",
        "> ~~~~",
        "> ~~~~ {~}",
        "> ~~~~ {}}",
        "> ~~~~ {{}",
        "> ~~~~ {`}",
        "> ~~~~ {>}",
        "> ~~~~ {eVil}",
        "> ~~~~ {EVIL}",
        "> ~~~~ {ev_il}",
        "> ~~~~ {ev il}",
        "> ~~~~ {ev4il}",
        "> ~~~~ {e}",
        "> ~~~~ { }",
        "> ~~~~ {6}",
        "> ~~~~ {_}",
        "> ~~~~ {}",
        "> ~~~~  {evil}",
        "> ~~~~{evil}",
        "> ~~~~~ {evil}",
        "> ~~~ {evil}",
        "> > ~~~~ {evil}",
        "~~~~ {evil}",
        ">  ~~~~ {evil}",
        ">~~~~ {evil}",
        "> ```eVil",
        "> ```EVIL",
        "> ```ev_il",
        "> ```ev il",
        "> ```ev4il",
        "> ```e",
        "> ``` ",
        "> ```6",
        "> ```_",
        "> ```",
        "> > ```evil",
        "```evil",
        ">  ```evil",
        ">```evil",
        "~~~",
        "```",
        "> ~~~~ {evil}",
        "> ```evil"
      ]
    },
    {
      "regex": "\\r|(?:\\r?\\n)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": "([^\\$\\w\\d])reverse([^\\w\\d])",
      "exceptionStackTrace": null,
      "matches": [
        " reversea",
        " reverse_",
        " reverseA",
        " reverse0",
        " reverse$",
        "areverse ",
        "_reverse ",
        "Areverse ",
        "0reverse ",
        "$reverse ",
        " reverse "
      ]
    },
    {
      "regex": ">\\s+(.*)\\s\\w",
      "exceptionStackTrace": null,
      "matches": [
        "> evil _",
        "> evil A",
        "> evil 0",
        "> > a",
        "> eVil a",
        "> EVIL a",
        "> ev_il a",
        "> ev il a",
        "> ev4il a",
        "> e a",
        ">   a",
        "> 6 a",
        "> _ a",
        ">  evil a",
        ">evil a",
        ">  a",
        "> evil a"
      ]
    },
    {
      "regex": "^--.*?--",
      "exceptionStackTrace": null,
      "matches": [
        "-----",
        "--eVil--",
        "--EVIL--",
        "--ev_il--",
        "--ev il--",
        "--ev4il--",
        "--e--",
        "-- --",
        "--6--",
        "--_--",
        "----",
        "--evil--"
      ]
    },
    {
      "regex": "\\b(x|y|z|s(ize)?|r(ot(ate)?)?|f(lip)?|skew)\\b",
      "exceptionStackTrace": null,
      "matches": [
        "fliplip",
        "rotateotate",
        "rotateate",
        "rot",
        "sizeize",
        "f",
        "r",
        "s",
        "skew",
        "flip",
        "rotate",
        "size",
        "z",
        "y",
        "x"
      ]
    },
    {
      "regex": "[[:cntrl:] \"&'\\/:<>@]",
      "exceptionStackTrace": null,
      "matches": [
        "t \"&'/:<>@]",
        "r \"&'/:<>@]",
        "n \"&'/:<>@]",
        "l \"&'/:<>@]",
        "c \"&'/:<>@]",
        "a \"&'/:<>@]",
        "[ \"&'/:<>@]",
        ": \"&'/:<>@]"
      ]
    },
    {
      "regex": "\\.(\\w*)?$",
      "exceptionStackTrace": null,
      "matches": [
        ".evilevil",
        ".eVil",
        ".EVIL",
        ".ev_il",
        ".ev il",
        ".ev4il",
        ".e",
        ". ",
        ".6",
        "._",
        ".",
        ".evil"
      ]
    },
    {
      "regex": "^[-+*/]$",
      "exceptionStackTrace": null,
      "matches": ["-", "+", "*", "/"]
    },
    {
      "regex": "<\\/([^<>]*)>",
      "exceptionStackTrace": null,
      "matches": [
        "</>>",
        "</<>",
        "<//>",
        "</eVil>",
        "</EVIL>",
        "</ev_il>",
        "</ev il>",
        "</ev4il>",
        "</e>",
        "</ >",
        "</6>",
        "</_>",
        "</>",
        "</evil>"
      ]
    },
    {
      "regex": "([\\\\`]|\\$\\{)",
      "exceptionStackTrace": null,
      "matches": ["\\", "${", "`"]
    },
    {
      "regex": "^[a-zA-Z0-9][a-zA-Z0-9_-]{1,}$",
      "exceptionStackTrace": null,
      "matches": [
        "0-",
        "0eVil",
        "0EVIL",
        "0ev_il",
        "0ev il",
        "0ev4il",
        "0e",
        "0 ",
        "06",
        "0_",
        "0",
        "aevil",
        "Aevil",
        "0evil"
      ]
    },
    {
      "regex": "^BEGIN:(V)?(\\w+)$",
      "exceptionStackTrace": null,
      "matches": [
        "BEGIN:VeVil",
        "BEGIN:VEVIL",
        "BEGIN:Vev_il",
        "BEGIN:Vev il",
        "BEGIN:Vev4il",
        "BEGIN:Ve",
        "BEGIN:V ",
        "BEGIN:V6",
        "BEGIN:V_",
        "BEGIN:V",
        "BEGIN:VVevil",
        "BEGIN:evil",
        "BEGIN:Vevil"
      ]
    },
    {
      "regex": "e(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "eeVil",
        "eEVIL",
        "eev_il",
        "eev il",
        "eev4il",
        "ee",
        "e ",
        "e6",
        "e_",
        "e",
        "eevil"
      ]
    },
    { "regex": "moget", "exceptionStackTrace": null, "matches": ["moget"] },
    {
      "regex": "and awesome!!!, yo",
      "exceptionStackTrace": null,
      "matches": ["and awesome!!!, yo"]
    },
    { "regex": "didyou", "exceptionStackTrace": null, "matches": ["didyou"] },
    {
      "regex": "validates_presence_of :country",
      "exceptionStackTrace": null,
      "matches": ["validates_presence_of :country"]
    },
    {
      "regex": "^(.*?)\\~$",
      "exceptionStackTrace": null,
      "matches": [
        "~~",
        "eVil~",
        "EVIL~",
        "ev_il~",
        "ev il~",
        "ev4il~",
        "e~",
        " ~",
        "6~",
        "_~",
        "~",
        "evil~"
      ]
    },
    {
      "regex": ".*/subscriptions/(?:.*)/resourceGroups/(.+)/providers/Microsoft.Network/networkInterfaces/(?:.*)",
      "exceptionStackTrace": null,
      "matches": [
        "evil/subscriptions/evil/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces//",
        "evil/subscriptions/evil/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/eVil",
        "evil/subscriptions/evil/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/EVIL",
        "evil/subscriptions/evil/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/ev_il",
        "evil/subscriptions/evil/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/ev il",
        "evil/subscriptions/evil/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/ev4il",
        "evil/subscriptions/evil/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/e",
        "evil/subscriptions/evil/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/ ",
        "evil/subscriptions/evil/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/6",
        "evil/subscriptions/evil/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/_",
        "evil/subscriptions/evil/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/",
        "evil/subscriptions/evil/resourceGroups/evil/providers/MicrosoftANetwork/networkInterfaces/evil",
        "evil/subscriptions/evil/resourceGroups/evil/providers/Microsoft0Network/networkInterfaces/evil",
        "evil/subscriptions/evil/resourceGroups/evil/providers/Microsoft/Network/networkInterfaces/evil",
        "evil/subscriptions/evil/resourceGroups/evil/providers/Microsoft Network/networkInterfaces/evil",
        "evil/subscriptions/evil/resourceGroups///providers/MicrosoftaNetwork/networkInterfaces/evil",
        "evil/subscriptions/evil/resourceGroups/eVil/providers/MicrosoftaNetwork/networkInterfaces/evil",
        "evil/subscriptions/evil/resourceGroups/EVIL/providers/MicrosoftaNetwork/networkInterfaces/evil",
        "evil/subscriptions/evil/resourceGroups/ev_il/providers/MicrosoftaNetwork/networkInterfaces/evil",
        "evil/subscriptions/evil/resourceGroups/ev il/providers/MicrosoftaNetwork/networkInterfaces/evil",
        "evil/subscriptions/evil/resourceGroups/ev4il/providers/MicrosoftaNetwork/networkInterfaces/evil",
        "evil/subscriptions/evil/resourceGroups/e/providers/MicrosoftaNetwork/networkInterfaces/evil",
        "evil/subscriptions/evil/resourceGroups/ /providers/MicrosoftaNetwork/networkInterfaces/evil",
        "evil/subscriptions/evil/resourceGroups/6/providers/MicrosoftaNetwork/networkInterfaces/evil",
        "evil/subscriptions/evil/resourceGroups/_/providers/MicrosoftaNetwork/networkInterfaces/evil",
        "evil/subscriptions/evil/resourceGroups//providers/MicrosoftaNetwork/networkInterfaces/evil",
        "evil/subscriptions///resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/evil",
        "evil/subscriptions/eVil/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/evil",
        "evil/subscriptions/EVIL/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/evil",
        "evil/subscriptions/ev_il/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/evil",
        "evil/subscriptions/ev il/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/evil",
        "evil/subscriptions/ev4il/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/evil",
        "evil/subscriptions/e/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/evil",
        "evil/subscriptions/ /resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/evil",
        "evil/subscriptions/6/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/evil",
        "evil/subscriptions/_/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/evil",
        "evil/subscriptions//resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/evil",
        "//subscriptions/evil/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/evil",
        "eVil/subscriptions/evil/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/evil",
        "EVIL/subscriptions/evil/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/evil",
        "ev_il/subscriptions/evil/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/evil",
        "ev il/subscriptions/evil/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/evil",
        "ev4il/subscriptions/evil/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/evil",
        "e/subscriptions/evil/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/evil",
        " /subscriptions/evil/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/evil",
        "6/subscriptions/evil/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/evil",
        "_/subscriptions/evil/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/evil",
        "/subscriptions/evil/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/evil",
        "/subscriptions//resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/",
        "evil/subscriptions/evil/resourceGroups/evil/providers/MicrosoftaNetwork/networkInterfaces/evil"
      ]
    },
    {
      "regex": "^([^\\w\\s\\/]*)\\s*",
      "exceptionStackTrace": null,
      "matches": [
        "evil  ",
        "evil",
        "/ ",
        "eVil ",
        "EVIL ",
        "ev_il ",
        "ev il ",
        "ev4il ",
        "e ",
        "  ",
        "6 ",
        "_ ",
        " ",
        "",
        "evil "
      ]
    },
    {
      "regex": "hive-*",
      "exceptionStackTrace": null,
      "matches": ["hive--", "hive", "hive-"]
    },
    {
      "regex": "some regular expression",
      "exceptionStackTrace": null,
      "matches": ["some regular expression"]
    },
    {
      "regex": "^I create a load balancer with name prefix \"([^\"]*)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "I create a load balancer with name prefix \"\"\"",
        "I create a load balancer with name prefix \"eVil\"",
        "I create a load balancer with name prefix \"EVIL\"",
        "I create a load balancer with name prefix \"ev_il\"",
        "I create a load balancer with name prefix \"ev il\"",
        "I create a load balancer with name prefix \"ev4il\"",
        "I create a load balancer with name prefix \"e\"",
        "I create a load balancer with name prefix \" \"",
        "I create a load balancer with name prefix \"6\"",
        "I create a load balancer with name prefix \"_\"",
        "I create a load balancer with name prefix \"\"",
        "I create a load balancer with name prefix \"evil\""
      ]
    },
    { "regex": "^ \\| ", "exceptionStackTrace": null, "matches": [" | "] },
    {
      "regex": "^[0-9,]*",
      "exceptionStackTrace": null,
      "matches": [",,", "0", "", ","]
    },
    {
      "regex": "^ex:b a ex:class;$",
      "exceptionStackTrace": null,
      "matches": ["ex:b a ex:class;"]
    },
    {
      "regex": "{{ *item *}},",
      "exceptionStackTrace": null,
      "matches": [
        "{{ item  }},",
        "{{ item}},",
        "{{  item }},",
        "{{item }},",
        "{{item}},",
        "{{ item }},"
      ]
    },
    {
      "regex": "firstInstallTime=(?P<time>.*)",
      "exceptionStackTrace": null,
      "matches": [
        "firstInstallTime==",
        "firstInstallTime=eVil",
        "firstInstallTime=EVIL",
        "firstInstallTime=ev_il",
        "firstInstallTime=ev il",
        "firstInstallTime=ev4il",
        "firstInstallTime=e",
        "firstInstallTime= ",
        "firstInstallTime=6",
        "firstInstallTime=_",
        "firstInstallTime=",
        "firstInstallTime=evil"
      ]
    },
    { "regex": "^python-", "exceptionStackTrace": null, "matches": ["python-"] },
    {
      "regex": "http:\\/\\/api\\.tumblr\\.com\\/v2\\/user\\/dashboard*",
      "exceptionStackTrace": null,
      "matches": [
        "http://api.tumblr.com/v2/user/dashboardd",
        "http://api.tumblr.com/v2/user/dashboar",
        "http://api.tumblr.com/v2/user/dashboard"
      ]
    },
    {
      "regex": "([\\w-]+)(?:\\s+(.+))?",
      "exceptionStackTrace": null,
      "matches": [
        "evil evil evil",
        "evil -",
        "evil eVil",
        "evil EVIL",
        "evil ev_il",
        "evil ev il",
        "evil ev4il",
        "evil e",
        "evil  ",
        "evil 6",
        "evil _",
        "evil ",
        "evil  evil",
        "evilevil",
        "- evil",
        "eVil evil",
        "EVIL evil",
        "ev_il evil",
        "ev il evil",
        "ev4il evil",
        "e evil",
        "  evil",
        "6 evil",
        "_ evil",
        " evil",
        "evil",
        "evil evil"
      ]
    },
    {
      "regex": "\\A\\[\\[(.*?)\\]\\]\\s(.*?)\\s(https?://.*?)\\s\\*\\s(.*?)\\s\\*\\s(.*?)\\Z",
      "exceptionStackTrace": null,
      "matches": [
        "[[evil]] evil https://evil * evil * ]",
        "[[evil]] evil https://evil * evil * [",
        "[[evil]] evil https://evil * evil * :",
        "[[evil]] evil https://evil * evil * /",
        "[[evil]] evil https://evil * evil * *",
        "[[evil]] evil https://evil * evil * eVil",
        "[[evil]] evil https://evil * evil * EVIL",
        "[[evil]] evil https://evil * evil * ev_il",
        "[[evil]] evil https://evil * evil * ev il",
        "[[evil]] evil https://evil * evil * ev4il",
        "[[evil]] evil https://evil * evil * e",
        "[[evil]] evil https://evil * evil *  ",
        "[[evil]] evil https://evil * evil * 6",
        "[[evil]] evil https://evil * evil * _",
        "[[evil]] evil https://evil * evil * ",
        "[[evil]] evil https://evil * ] * evil",
        "[[evil]] evil https://evil * [ * evil",
        "[[evil]] evil https://evil * : * evil",
        "[[evil]] evil https://evil * / * evil",
        "[[evil]] evil https://evil * * * evil",
        "[[evil]] evil https://evil * eVil * evil",
        "[[evil]] evil https://evil * EVIL * evil",
        "[[evil]] evil https://evil * ev_il * evil",
        "[[evil]] evil https://evil * ev il * evil",
        "[[evil]] evil https://evil * ev4il * evil",
        "[[evil]] evil https://evil * e * evil",
        "[[evil]] evil https://evil *   * evil",
        "[[evil]] evil https://evil * 6 * evil",
        "[[evil]] evil https://evil * _ * evil",
        "[[evil]] evil https://evil *  * evil",
        "[[evil]] evil https://] * evil * evil",
        "[[evil]] evil https://[ * evil * evil",
        "[[evil]] evil https://: * evil * evil",
        "[[evil]] evil https:/// * evil * evil",
        "[[evil]] evil https://* * evil * evil",
        "[[evil]] evil https://eVil * evil * evil",
        "[[evil]] evil https://EVIL * evil * evil",
        "[[evil]] evil https://ev_il * evil * evil",
        "[[evil]] evil https://ev il * evil * evil",
        "[[evil]] evil https://ev4il * evil * evil",
        "[[evil]] evil https://e * evil * evil",
        "[[evil]] evil https://  * evil * evil",
        "[[evil]] evil https://6 * evil * evil",
        "[[evil]] evil https://_ * evil * evil",
        "[[evil]] evil https:// * evil * evil",
        "[[evil]] evil httpss://evil * evil * evil",
        "[[evil]] evil http://evil * evil * evil",
        "[[evil]] ] https://evil * evil * evil",
        "[[evil]] [ https://evil * evil * evil",
        "[[evil]] : https://evil * evil * evil",
        "[[evil]] / https://evil * evil * evil",
        "[[evil]] * https://evil * evil * evil",
        "[[evil]] eVil https://evil * evil * evil",
        "[[evil]] EVIL https://evil * evil * evil",
        "[[evil]] ev_il https://evil * evil * evil",
        "[[evil]] ev il https://evil * evil * evil",
        "[[evil]] ev4il https://evil * evil * evil",
        "[[evil]] e https://evil * evil * evil",
        "[[evil]]   https://evil * evil * evil",
        "[[evil]] 6 https://evil * evil * evil",
        "[[evil]] _ https://evil * evil * evil",
        "[[evil]]  https://evil * evil * evil",
        "[[]]] evil https://evil * evil * evil",
        "[[[]] evil https://evil * evil * evil",
        "[[:]] evil https://evil * evil * evil",
        "[[/]] evil https://evil * evil * evil",
        "[[*]] evil https://evil * evil * evil",
        "[[eVil]] evil https://evil * evil * evil",
        "[[EVIL]] evil https://evil * evil * evil",
        "[[ev_il]] evil https://evil * evil * evil",
        "[[ev il]] evil https://evil * evil * evil",
        "[[ev4il]] evil https://evil * evil * evil",
        "[[e]] evil https://evil * evil * evil",
        "[[ ]] evil https://evil * evil * evil",
        "[[6]] evil https://evil * evil * evil",
        "[[_]] evil https://evil * evil * evil",
        "[[]] evil https://evil * evil * evil",
        "[[]]  http:// *  * ",
        "[[evil]] evil https://evil * evil * evil"
      ]
    },
    {
      "regex": "^<div[^>]*><span[^>]*>attribute<\\/span><\\/div>$",
      "exceptionStackTrace": null,
      "matches": [
        "<divevil><span>>attribute</span></div>",
        "<divevil><span<>attribute</span></div>",
        "<divevil><span/>attribute</span></div>",
        "<divevil><spaneVil>attribute</span></div>",
        "<divevil><spanEVIL>attribute</span></div>",
        "<divevil><spanev_il>attribute</span></div>",
        "<divevil><spanev il>attribute</span></div>",
        "<divevil><spanev4il>attribute</span></div>",
        "<divevil><spane>attribute</span></div>",
        "<divevil><span >attribute</span></div>",
        "<divevil><span6>attribute</span></div>",
        "<divevil><span_>attribute</span></div>",
        "<divevil><span>attribute</span></div>",
        "<div>><spanevil>attribute</span></div>",
        "<div<><spanevil>attribute</span></div>",
        "<div/><spanevil>attribute</span></div>",
        "<diveVil><spanevil>attribute</span></div>",
        "<divEVIL><spanevil>attribute</span></div>",
        "<divev_il><spanevil>attribute</span></div>",
        "<divev il><spanevil>attribute</span></div>",
        "<divev4il><spanevil>attribute</span></div>",
        "<dive><spanevil>attribute</span></div>",
        "<div ><spanevil>attribute</span></div>",
        "<div6><spanevil>attribute</span></div>",
        "<div_><spanevil>attribute</span></div>",
        "<div><spanevil>attribute</span></div>",
        "<div><span>attribute</span></div>",
        "<divevil><spanevil>attribute</span></div>"
      ]
    },
    {
      "regex": "\\bEdge\\/12\\b|\\bTrident\\/[567]\\b|\\bVersion\\/7.0 Safari\\b",
      "exceptionStackTrace": null,
      "matches": [
        "Version/7A0 Safari",
        "Version/700 Safari",
        "Version/7/0 Safari",
        "Version/7 0 Safari",
        "Trident/6",
        "Trident/5",
        "Trident/0",
        "Version/7a0 Safari",
        "Trident/7",
        "Edge/12"
      ]
    },
    {
      "regex": "^Reply-To\\:\\s+(.*?)$",
      "exceptionStackTrace": null,
      "matches": [
        "Reply-To: :",
        "Reply-To: -",
        "Reply-To: eVil",
        "Reply-To: EVIL",
        "Reply-To: ev_il",
        "Reply-To: ev il",
        "Reply-To: ev4il",
        "Reply-To: e",
        "Reply-To:  ",
        "Reply-To: 6",
        "Reply-To: _",
        "Reply-To:  evil",
        "Reply-To:evil",
        "Reply-To: ",
        "Reply-To: evil"
      ]
    },
    {
      "regex": "[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}",
      "exceptionStackTrace": null,
      "matches": [
        "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaaa",
        "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa",
        "aaaaaaaa-aaaa-aaaa-aaaa-gaaaaaaaaaaa",
        "aaaaaaaa-aaaa-aaaa-aaaa-0aaaaaaaaaaa",
        "aaaaaaaa-aaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
        "aaaaaaaa-aaaa-aaaa-aaaaaaaaaaaa",
        "aaaaaaaa-aaaaa-aaaa-aaaa-aaaaaaaaaaaa",
        "aaaaaaaa-aaa-aaaa-aaaa-aaaaaaaaaaaa",
        "aaaaaaaa-gaaa-aaaa-aaaa-aaaaaaaaaaaa",
        "aaaaaaaa-0aaa-aaaa-aaaa-aaaaaaaaaaaa",
        "aaaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
        "aaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
        "gaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
        "0aaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
        "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
      ]
    },
    {
      "regex": "/b/.+/o/.+alt=json&projection=full",
      "exceptionStackTrace": null,
      "matches": [
        "/b/evil/o/=alt=json&projection=full",
        "/b/evil/o//alt=json&projection=full",
        "/b/evil/o/&alt=json&projection=full",
        "/b/evil/o/eVilalt=json&projection=full",
        "/b/evil/o/EVILalt=json&projection=full",
        "/b/evil/o/ev_ilalt=json&projection=full",
        "/b/evil/o/ev ilalt=json&projection=full",
        "/b/evil/o/ev4ilalt=json&projection=full",
        "/b/evil/o/ealt=json&projection=full",
        "/b/evil/o/ alt=json&projection=full",
        "/b/evil/o/6alt=json&projection=full",
        "/b/evil/o/_alt=json&projection=full",
        "/b/evil/o/alt=json&projection=full",
        "/b/=/o/evilalt=json&projection=full",
        "/b///o/evilalt=json&projection=full",
        "/b/&/o/evilalt=json&projection=full",
        "/b/eVil/o/evilalt=json&projection=full",
        "/b/EVIL/o/evilalt=json&projection=full",
        "/b/ev_il/o/evilalt=json&projection=full",
        "/b/ev il/o/evilalt=json&projection=full",
        "/b/ev4il/o/evilalt=json&projection=full",
        "/b/e/o/evilalt=json&projection=full",
        "/b/ /o/evilalt=json&projection=full",
        "/b/6/o/evilalt=json&projection=full",
        "/b/_/o/evilalt=json&projection=full",
        "/b//o/evilalt=json&projection=full",
        "/b/evil/o/evilalt=json&projection=full"
      ]
    },
    { "regex": "allianz", "exceptionStackTrace": null, "matches": ["allianz"] },
    {
      "regex": "^list\\[(.*)\\]$",
      "exceptionStackTrace": null,
      "matches": [
        "list[]]",
        "list[[]",
        "list[eVil]",
        "list[EVIL]",
        "list[ev_il]",
        "list[ev il]",
        "list[ev4il]",
        "list[e]",
        "list[ ]",
        "list[6]",
        "list[_]",
        "list[]",
        "list[evil]"
      ]
    },
    {
      "regex": "\\\\([\\s\\S])",
      "exceptionStackTrace": null,
      "matches": ["\\_", "\\\\", "\\A", "\\0", "\\ ", "\\a"]
    },
    {
      "regex": "<[uU]\\+([0-9A-Fa-f]{4})>",
      "exceptionStackTrace": null,
      "matches": [
        "<U+aaaaa>",
        "<U+aaa>",
        "<U+gaaa>",
        "<U+Gaaa>",
        "<U+Aaaa>",
        "<U+0aaa>",
        "<u+aaaa>",
        "<a+aaaa>",
        "<A+aaaa>",
        "<U+aaaa>"
      ]
    },
    { "regex": "^PNM$", "exceptionStackTrace": null, "matches": ["PNM"] },
    {
      "regex": "(http://)?(www\\.)?imgur\\.com",
      "exceptionStackTrace": null,
      "matches": [
        "http://www.www.imgur.com",
        "http://imgur.com",
        "http://http://www.imgur.com",
        "www.imgur.com",
        "imgur.com",
        "http://www.imgur.com"
      ]
    },
    {
      "regex": "\\[(.+\\|?)+\\]$",
      "exceptionStackTrace": null,
      "matches": [
        "[evil|evil|]",
        "[]",
        "[evil||]",
        "[||]",
        "[]|]",
        "[[|]",
        "[eVil|]",
        "[EVIL|]",
        "[ev_il|]",
        "[ev il|]",
        "[ev4il|]",
        "[e|]",
        "[ |]",
        "[6|]",
        "[_|]",
        "[|]",
        "[evil]",
        "[evil|]"
      ]
    },
    {
      "regex": "{{([a-zA-Z0-9]*)}},",
      "exceptionStackTrace": null,
      "matches": [
        "{{eVil}},",
        "{{EVIL}},",
        "{{ev_il}},",
        "{{ev il}},",
        "{{ev4il}},",
        "{{e}},",
        "{{ }},",
        "{{6}},",
        "{{_}},",
        "{{}},",
        "{{evil}},"
      ]
    },
    {
      "regex": "@[^:\\[\\]\\|\\\\\\s]+\\[\\=",
      "exceptionStackTrace": null,
      "matches": [
        "@|[=",
        "@][=",
        "@\\[=",
        "@[[=",
        "@@[=",
        "@=[=",
        "@:[=",
        "@eVil[=",
        "@EVIL[=",
        "@ev_il[=",
        "@ev il[=",
        "@ev4il[=",
        "@e[=",
        "@ [=",
        "@6[=",
        "@_[=",
        "@[=",
        "@evil[="
      ]
    },
    {
      "regex": "cloudlinux",
      "exceptionStackTrace": null,
      "matches": ["cloudlinux"]
    },
    {
      "regex": "(?:<p>|<br ?\\/?>)*\\s*\\[caption([^\\[]+)\\[\\/caption\\]\\s*(?:<\\/p>|<br ?\\/?>)*",
      "exceptionStackTrace": null,
      "matches": [
        "<br //> [captionevil[/caption] </p>",
        "<br > [captionevil[/caption] </p>",
        "<br  /> [captionevil[/caption] </p>",
        "<br/> [captionevil[/caption] </p>",
        "<p> [captionevil[/caption] <br //>",
        "<p> [captionevil[/caption] <br >",
        "<p> [captionevil[/caption] <br  />",
        "<p> [captionevil[/caption] <br/>",
        "<p> [captionevil[/caption] </p></p>",
        "<p> [captionevil[/caption] ",
        "<p> [captionevil[/caption]  </p>",
        "<p> [captionevil[/caption]</p>",
        "<p> [caption][/caption] </p>",
        "<p> [caption[[/caption] </p>",
        "<p> [caption>[/caption] </p>",
        "<p> [caption<[/caption] </p>",
        "<p> [caption/[/caption] </p>",
        "<p> [captioneVil[/caption] </p>",
        "<p> [captionEVIL[/caption] </p>",
        "<p> [captionev_il[/caption] </p>",
        "<p> [captionev il[/caption] </p>",
        "<p> [captionev4il[/caption] </p>",
        "<p> [captione[/caption] </p>",
        "<p> [caption [/caption] </p>",
        "<p> [caption6[/caption] </p>",
        "<p> [caption_[/caption] </p>",
        "<p> [caption[/caption] </p>",
        "<p>  [captionevil[/caption] </p>",
        "<p>[captionevil[/caption] </p>",
        "<p><p> [captionevil[/caption] </p>",
        " [captionevil[/caption] </p>",
        "[captionevil[/caption]",
        "<br /> [captionevil[/caption] </p>",
        "<p> [captionevil[/caption] <br />",
        "<p> [captionevil[/caption] </p>"
      ]
    },
    {
      "regex": ":jar:|:pom:",
      "exceptionStackTrace": null,
      "matches": [":pom:", ":jar:"]
    },
    {
      "regex": "[.0-9]+(?:px|pt|pc|em|ex|%|in|mm|cm)|(?:thin|medium|thick)",
      "exceptionStackTrace": null,
      "matches": [
        "..px",
        "px",
        "0px",
        "thick",
        "medium",
        "thin",
        ".cm",
        ".mm",
        ".in",
        ".%",
        ".ex",
        ".em",
        ".pc",
        ".pt",
        ".px"
      ]
    },
    {
      "regex": ".from_file needs to know :octofacts_fixture_path",
      "exceptionStackTrace": null,
      "matches": [
        "_from_file needs to know :octofacts_fixture_path",
        "Afrom_file needs to know :octofacts_fixture_path",
        ":from_file needs to know :octofacts_fixture_path",
        "0from_file needs to know :octofacts_fixture_path",
        " from_file needs to know :octofacts_fixture_path",
        "afrom_file needs to know :octofacts_fixture_path"
      ]
    },
    {
      "regex": "'str':'hello'",
      "exceptionStackTrace": null,
      "matches": ["'str':'hello'"]
    },
    { "regex": "##css##", "exceptionStackTrace": null, "matches": ["##css##"] },
    {
      "regex": "thorntail\\S+[0-9]{5,}.\\S{5,}",
      "exceptionStackTrace": null,
      "matches": [
        "thorntailevil00000aaaaa",
        "thorntailevil00000a_aaaa",
        "thorntailevil00000aAaaaa",
        "thorntailevil00000a0aaaa",
        "thorntailevil00000a aaaa",
        "thorntailevil00000_aaaaa",
        "thorntailevil00000Aaaaaa",
        "thorntailevil000000aaaaa",
        "thorntailevil00000 aaaaa",
        "thorntailevil0000aaaaaa",
        "thorntaileVil00000aaaaaa",
        "thorntailEVIL00000aaaaaa",
        "thorntailev_il00000aaaaaa",
        "thorntailev il00000aaaaaa",
        "thorntailev4il00000aaaaaa",
        "thorntaile00000aaaaaa",
        "thorntail 00000aaaaaa",
        "thorntail600000aaaaaa",
        "thorntail_00000aaaaaa",
        "thorntail00000aaaaaa",
        "thorntailevil00000aaaaaa"
      ]
    },
    {
      "regex": "\\A5[.]4[.]1\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "///([gim]+\\b|\\B)",
      "exceptionStackTrace": null,
      "matches": ["///mm", "///i", "///g", "///a", "///", "///m"]
    },
    {
      "regex": "(&lt;|<)#[\\s\\S]*?#(&gt;|>)",
      "exceptionStackTrace": null,
      "matches": [
        "&lt;#>#&gt;",
        "&lt;#<#&gt;",
        "&lt;#;#&gt;",
        "&lt;#&#&gt;",
        "&lt;###&gt;",
        "&lt;#eVil#&gt;",
        "&lt;#EVIL#&gt;",
        "&lt;#ev_il#&gt;",
        "&lt;#ev il#&gt;",
        "&lt;#ev4il#&gt;",
        "&lt;#e#&gt;",
        "&lt;# #&gt;",
        "&lt;#6#&gt;",
        "&lt;#_#&gt;",
        "<##&gt;",
        "&lt;##>",
        "&lt;##&gt;",
        "<#evil#&gt;",
        "&lt;#evil#>",
        "&lt;#evil#&gt;"
      ]
    },
    {
      "regex": "^a slow, generator step$",
      "exceptionStackTrace": null,
      "matches": ["a slow, generator step"]
    },
    {
      "regex": "(?x)\n        ^\n            (?:(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun)\\x20)?\n            (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\n            \\x20\n            (\\d+)\n            \\x20\n            (\\d{2}):(\\d{2}):(\\d{2})\n            (?:\\.\\d+)?\n            [\\t\\x20]\n            (.*)\n        $\n    ",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "(?m)^Bundler could not find compatible versions for gem",
      "exceptionStackTrace": null,
      "matches": ["Bundler could not find compatible versions for gem"]
    },
    {
      "regex": "$input->{split}",
      "exceptionStackTrace": null,
      "matches": ["input->{split}"]
    },
    {
      "regex": "^(bit_clear|bit_set|set)$",
      "exceptionStackTrace": null,
      "matches": ["set", "bit_set", "bit_clear"]
    },
    {
      "regex": "^file\\://(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "file://:",
        "file:///",
        "file://eVil",
        "file://EVIL",
        "file://ev_il",
        "file://ev il",
        "file://ev4il",
        "file://e",
        "file:// ",
        "file://6",
        "file://_",
        "file://",
        "file://evil"
      ]
    },
    {
      "regex": "((<)((data))(>))",
      "exceptionStackTrace": null,
      "matches": ["<data>"]
    },
    {
      "regex": "<!(--(?:(?:[^>-]|-[^>])(?:[^-]|-[^-])*)--)>",
      "exceptionStackTrace": null,
      "matches": [
        "<!---Aa-->",
        "<!--->a-->",
        "<!---<a-->",
        "<!---0a-->",
        "<!----a-->",
        "<!---!a-->",
        "<!--- a-->",
        "<!--a-A-->",
        "<!--a->-->",
        "<!--a-<-->",
        "<!--a-0-->",
        "<!--a---->",
        "<!--a-!-->",
        "<!--a- -->",
        "<!--aaa-->",
        "<!--aA-->",
        "<!--a>-->",
        "<!--a<-->",
        "<!--a0-->",
        "<!--a--->",
        "<!--a!-->",
        "<!--a -->",
        "<!--Aa-->",
        "<!-->a-->",
        "<!--<a-->",
        "<!--0a-->",
        "<!--!a-->",
        "<!-- a-->",
        "<!---a-->",
        "<!--a-->",
        "<!---aa-->",
        "<!--a-a-->",
        "<!--aa-->"
      ]
    },
    {
      "regex": "^Cannot perform.*replica.*",
      "exceptionStackTrace": null,
      "matches": [
        "Cannot performevilreplicaeVil",
        "Cannot performevilreplicaEVIL",
        "Cannot performevilreplicaev_il",
        "Cannot performevilreplicaev il",
        "Cannot performevilreplicaev4il",
        "Cannot performevilreplicae",
        "Cannot performevilreplica ",
        "Cannot performevilreplica6",
        "Cannot performevilreplica_",
        "Cannot performevilreplica",
        "Cannot performeVilreplicaevil",
        "Cannot performEVILreplicaevil",
        "Cannot performev_ilreplicaevil",
        "Cannot performev ilreplicaevil",
        "Cannot performev4ilreplicaevil",
        "Cannot performereplicaevil",
        "Cannot perform replicaevil",
        "Cannot perform6replicaevil",
        "Cannot perform_replicaevil",
        "Cannot performreplicaevil",
        "Cannot performreplica",
        "Cannot performevilreplicaevil"
      ]
    },
    {
      "regex": "(\\w+-gradient)\\(([^\\)]*)\\)",
      "exceptionStackTrace": null,
      "matches": [
        "evil-gradient(-)",
        "evil-gradient())",
        "evil-gradient(()",
        "evil-gradient(eVil)",
        "evil-gradient(EVIL)",
        "evil-gradient(ev_il)",
        "evil-gradient(ev il)",
        "evil-gradient(ev4il)",
        "evil-gradient(e)",
        "evil-gradient( )",
        "evil-gradient(6)",
        "evil-gradient(_)",
        "eVil-gradient(evil)",
        "EVIL-gradient(evil)",
        "ev_il-gradient(evil)",
        "ev il-gradient(evil)",
        "ev4il-gradient(evil)",
        "e-gradient(evil)",
        " -gradient(evil)",
        "6-gradient(evil)",
        "_-gradient(evil)",
        "-gradient(evil)",
        "evil-gradient()",
        "evil-gradient(evil)"
      ]
    },
    { "regex": "\\bIon\\b", "exceptionStackTrace": null, "matches": ["Ion"] },
    {
      "regex": "^the following new rows in the \"([^\"]*)\" database table:$",
      "exceptionStackTrace": null,
      "matches": [
        "the following new rows in the \":\" database table:",
        "the following new rows in the \"\"\" database table:",
        "the following new rows in the \"eVil\" database table:",
        "the following new rows in the \"EVIL\" database table:",
        "the following new rows in the \"ev_il\" database table:",
        "the following new rows in the \"ev il\" database table:",
        "the following new rows in the \"ev4il\" database table:",
        "the following new rows in the \"e\" database table:",
        "the following new rows in the \" \" database table:",
        "the following new rows in the \"6\" database table:",
        "the following new rows in the \"_\" database table:",
        "the following new rows in the \"\" database table:",
        "the following new rows in the \"evil\" database table:"
      ]
    },
    {
      "regex": "(\\/\\*.*?\\*\\/)|(\\/\\/[^\\n]*)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^isobuild:",
      "exceptionStackTrace": null,
      "matches": ["isobuild:"]
    },
    {
      "regex": "href=([^\\s>]+)",
      "exceptionStackTrace": null,
      "matches": [
        "href=>",
        "href==",
        "href=eVil",
        "href=EVIL",
        "href=ev_il",
        "href=ev il",
        "href=ev4il",
        "href=e",
        "href= ",
        "href=6",
        "href=_",
        "href=",
        "href=evil"
      ]
    },
    {
      "regex": "={4}(.*)={4}",
      "exceptionStackTrace": null,
      "matches": [
        "====evil=====",
        "====evil===",
        "=========",
        "====eVil====",
        "====EVIL====",
        "====ev_il====",
        "====ev il====",
        "====ev4il====",
        "====e====",
        "==== ====",
        "====6====",
        "====_====",
        "=====evil====",
        "===evil====",
        "========",
        "====evil===="
      ]
    },
    {
      "regex": "^(\\-)?\\d+(\\.{1}\\d+)?([Ee]{1}([\\+\\-]{1})?\\d+)?[mM]{1}$",
      "exceptionStackTrace": null,
      "matches": [
        "-0.0e-0MM",
        "-0.0e-0",
        "-0.0e-0m",
        "-0.0e-0a",
        "-0.0e-0A",
        "-0.0e-0e-0M",
        "-0.0M",
        "-0.0e-00M",
        "-0.0e-M",
        "-0.0e--0M",
        "-0.0e0M",
        "-0.0e+0M",
        "-0.0ee-0M",
        "-0.0-0M",
        "-0.0a-0M",
        "-0.0E-0M",
        "-0.0A-0M",
        "-0.0.0e-0M",
        "-0e-0M",
        "-0.00e-0M",
        "-0.e-0M",
        "-0..0e-0M",
        "-00e-0M",
        "-00.0e-0M",
        "-.0e-0M",
        "--0.0e-0M",
        "0.0e-0M",
        "0M",
        "-0.0e-0M"
      ]
    },
    {
      "regex": "input{(.*)}",
      "exceptionStackTrace": null,
      "matches": [
        "input{}}",
        "input{{}",
        "input{eVil}",
        "input{EVIL}",
        "input{ev_il}",
        "input{ev il}",
        "input{ev4il}",
        "input{e}",
        "input{ }",
        "input{6}",
        "input{_}",
        "input{}",
        "input{evil}"
      ]
    },
    {
      "regex": "^([$q_qm].*)$",
      "exceptionStackTrace": null,
      "matches": [
        "m$",
        "meVil",
        "mEVIL",
        "mev_il",
        "mev il",
        "mev4il",
        "me",
        "m ",
        "m6",
        "m_",
        "qevil",
        "aevil",
        "_evil",
        "$evil",
        "m",
        "mevil"
      ]
    },
    {
      "regex": "^(https?|s?ftps?|mailto):",
      "exceptionStackTrace": null,
      "matches": [
        "sftpss:",
        "sftp:",
        "ssftps:",
        "ftps:",
        "httpss:",
        "ftp:",
        "http:",
        "mailto:",
        "sftps:",
        "https:"
      ]
    },
    {
      "regex": "\\\\ding\\{101\\}",
      "exceptionStackTrace": null,
      "matches": ["\\ding{101}"]
    },
    {
      "regex": "over Session window capacity",
      "exceptionStackTrace": null,
      "matches": ["over Session window capacity"]
    },
    { "regex": "file 1", "exceptionStackTrace": null, "matches": ["file 1"] },
    {
      "regex": "/[^/]+/\\.\\.$",
      "exceptionStackTrace": null,
      "matches": [
        "///..",
        "/./..",
        "/eVil/..",
        "/EVIL/..",
        "/ev_il/..",
        "/ev il/..",
        "/ev4il/..",
        "/e/..",
        "/ /..",
        "/6/..",
        "/_/..",
        "//..",
        "/evil/.."
      ]
    },
    {
      "regex": "(.+):\\s+(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "evil: :",
        "evil: eVil",
        "evil: EVIL",
        "evil: ev_il",
        "evil: ev il",
        "evil: ev4il",
        "evil: e",
        "evil:  ",
        "evil: 6",
        "evil: _",
        "evil:  evil",
        "evil:evil",
        ":: evil",
        "eVil: evil",
        "EVIL: evil",
        "ev_il: evil",
        "ev il: evil",
        "ev4il: evil",
        "e: evil",
        " : evil",
        "6: evil",
        "_: evil",
        ": evil",
        "evil: ",
        "evil: evil"
      ]
    },
    {
      "regex": "\\b%[x]*mm[0-7]\\b|OPENSSL_ia32cap_P\\b",
      "exceptionStackTrace": null,
      "matches": ["%xmm8", "%xxmm0", "%mm0", "OPENSSL_ia32cap_P", "%xmm0"]
    },
    {
      "regex": "^https?://([^/]+)",
      "exceptionStackTrace": null,
      "matches": [
        "https://:",
        "https:///",
        "https://eVil",
        "https://EVIL",
        "https://ev_il",
        "https://ev il",
        "https://ev4il",
        "https://e",
        "https:// ",
        "https://6",
        "https://_",
        "https://",
        "httpss://evil",
        "http://evil",
        "https://evil"
      ]
    },
    {
      "regex": "^Warn: invalid auction delegate",
      "exceptionStackTrace": null,
      "matches": ["Warn: invalid auction delegate"]
    },
    {
      "regex": "^[ABCDEFGHJKNPQRSUVW]{1}",
      "exceptionStackTrace": null,
      "matches": [
        "WW",
        "",
        "V",
        "U",
        "S",
        "R",
        "Q",
        "P",
        "N",
        "K",
        "J",
        "I",
        "H",
        "G",
        "F",
        "E",
        "D",
        "C",
        "B",
        "A",
        "W"
      ]
    },
    {
      "regex": "\\x1f",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 31"
      },
      "matches": []
    },
    {
      "regex": "(?s).*second\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    { "regex": "^ \\] \\] ", "exceptionStackTrace": null, "matches": [" ] ] "] },
    {
      "regex": "<.*?>$",
      "exceptionStackTrace": null,
      "matches": [
        "<>>",
        "<<>",
        "<eVil>",
        "<EVIL>",
        "<ev_il>",
        "<ev il>",
        "<ev4il>",
        "<e>",
        "< >",
        "<6>",
        "<_>",
        "<>",
        "<evil>"
      ]
    },
    {
      "regex": " +and | or +",
      "exceptionStackTrace": null,
      "matches": [" or  ", " or", "  and ", "and ", " or ", " and "]
    },
    {
      "regex": "(<)(profiles)\\s*(>)(?!<\\s*/\\2\\s*>)",
      "exceptionStackTrace": null,
      "matches": ["<profiles  >", "<profiles>", "<profiles >"]
    },
    {
      "regex": "video\\/mp4",
      "exceptionStackTrace": null,
      "matches": ["video/mp4"]
    },
    {
      "regex": "(<S>[Ll]eis<\\/S> <T>[Aa]n<\\/T> <E[^>]*>(?:<N[^>]*pl=\"n\" gnt=\"[nd]\"[^>]*>(?:g[Cc]|b[Pp]|m[Bb]|n[Gg]|bh[fF])[^<]+<\\/N>)<\\/E>)",
      "exceptionStackTrace": null,
      "matches": [
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>bhfevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>bhaevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>bhAevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>naevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>nGevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>nAevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>maevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>mBevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>mAevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>baevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>bPevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>bAevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>gc></N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>gc=</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>gc<</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>gc/</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>gc\"</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>gceVil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>gcEVIL</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>gcev_il</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>gcev il</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>gcev4il</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>gce</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>gc </N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>gc6</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>gc_</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>gc</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>gaevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>gCevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>gAevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\">>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"=>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"<>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"/>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"\">gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"eVil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"EVIL>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"ev_il>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"ev il>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"ev4il>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"e>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\" >gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"6>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"_>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\">gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"n\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"a\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><N>pl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><N=pl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><N<pl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><N/pl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><N\"pl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><NeVilpl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><NEVILpl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nev_ilpl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nev ilpl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nev4ilpl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nepl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><N pl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><N6pl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><N_pl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Npl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <E>><Nevilpl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <E=><Nevilpl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <E<><Nevilpl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <E/><Nevilpl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <E\"><Nevilpl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <EeVil><Nevilpl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <EEVIL><Nevilpl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eev_il><Nevilpl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eev il><Nevilpl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eev4il><Nevilpl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Ee><Nevilpl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <E ><Nevilpl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <E6><Nevilpl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <E_><Nevilpl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <E><Nevilpl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>bn</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>Bn</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>An</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>aeis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>Leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>Aeis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>gcevil</N></E>",
        "<S>leis</S> <T>an</T> <E><Npl=\"n\" gnt=\"d\">bhFevil</N></E>",
        "<S>leis</S> <T>an</T> <E><Npl=\"n\" gnt=\"d\">ngevil</N></E>",
        "<S>leis</S> <T>an</T> <E><Npl=\"n\" gnt=\"d\">mbevil</N></E>",
        "<S>leis</S> <T>an</T> <E><Npl=\"n\" gnt=\"d\">bpevil</N></E>",
        "<S>leis</S> <T>an</T> <E><Npl=\"n\" gnt=\"d\">gcevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>bhFevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>ngevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>mbevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>bpevil</N></E>",
        "<S>leis</S> <T>an</T> <Eevil><Nevilpl=\"n\" gnt=\"d\"evil>gcevil</N></E>"
      ]
    },
    {
      "regex": "(new)\\s+(Fx\\.Slide)(\\()",
      "exceptionStackTrace": null,
      "matches": ["new  Fx.Slide(", "newFx.Slide(", "new Fx.Slide("]
    },
    {
      "regex": "'SDLK_(\\w+)'",
      "exceptionStackTrace": null,
      "matches": [
        "'SDLK_eVil'",
        "'SDLK_EVIL'",
        "'SDLK_ev_il'",
        "'SDLK_ev il'",
        "'SDLK_ev4il'",
        "'SDLK_e'",
        "'SDLK_ '",
        "'SDLK_6'",
        "'SDLK__'",
        "'SDLK_'",
        "'SDLK_evil'"
      ]
    },
    {
      "regex": "^jasmine_suite_result",
      "exceptionStackTrace": null,
      "matches": ["jasmine_suite_result"]
    },
    {
      "regex": "(?<!\\.)\\b(?<_1>wvarchg|wtreemgr|wthrmngr|wthresh|wthcoef2|wthcoef|wtbxmngr|wtbo|wscalogram|write|wrev|wrcoef2|wrcoef|wpviewcf|wptree|wpthcoef|wpsplt|wprec2|wprec|wprcoef|wpjoin|wpfun|wpdencmp|wpdec2|wpdec|wpcutree|wpcoef|wpbmpen|wp2wtree|wnoisest|wnoise|wmulden|wmspca|wmaxlev|wkeep|wfusmat|wfusimg|wfilters|wfbmesti|wfbm|wextend|wentropy|wenergy2|wenergy|wdencmp|wden|wdcenergy|wdcbm2|wdcbm|wcodemat|wbmpen|waverec2|waverec|wavenames|wavemngr|wavemenu|waveinfo|wavefun2|wavefun|wavedemo|wavedec2|wavedec|wave2lp|upwlev2|upwlev|upcoef2|upcoef|treeord|treedpth|tnodes|thselect|symwavf|symaux|swt2|swt|shanwavf|set|scal2frq|readtree|read|rbiowavf|qmf|plot|pat2cwav|orthfilt|ntree|ntnode|noleaves|nodesplt|nodepar|nodejoin|nodedesc|nodeasc|mswthresh|mswden|mswcmptp|mswcmpscr|mswcmp|morlet|meyeraux|meyer|mexihat|mdwtrec|mdwtdec|mdwtcluster|lwtcoef2|lwtcoef|lwt2|lwt|lsinfo|ls2filt|liftwave|liftfilt|leaves|laurpoly|laurmat|iswt2|iswt|istnode|isnode|intwave|ind2depo|ilwt2|ilwt|idwt2|idwt|get|gauswavf|filt2ls|fbspwavf|entrupd|dyadup|dyaddown|dwtmode|dwt2|dwt|dtree|drawtree|displs|disp|detcoef2|detcoef|depo2ind|ddencmp|dbwavf|dbaux|cwt|coifwavf|cmorwavf|chgwdeccfs|cgauwavf|cfs2wpt|centfrq|bswfun|biorwavf|biorfilt|besttree|bestlevt|appcoef2|appcoef|allnodes|addlift)\\b",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<_"
      },
      "matches": []
    },
    {
      "regex": "(\\d+)(:(.+))?",
      "exceptionStackTrace": null,
      "matches": [
        "0:evil:evil",
        "0::",
        "0:eVil",
        "0:EVIL",
        "0:ev_il",
        "0:ev il",
        "0:ev4il",
        "0:e",
        "0: ",
        "0:6",
        "0:_",
        "0:",
        "00:evil",
        ":evil",
        "0",
        "0:evil"
      ]
    },
    {
      "regex": "Name.*string",
      "exceptionStackTrace": null,
      "matches": [
        "NameeVilstring",
        "NameEVILstring",
        "Nameev_ilstring",
        "Nameev ilstring",
        "Nameev4ilstring",
        "Nameestring",
        "Name string",
        "Name6string",
        "Name_string",
        "Namestring",
        "Nameevilstring"
      ]
    },
    {
      "regex": "{ide.staticPrefix}",
      "exceptionStackTrace": null,
      "matches": [
        "{ide}staticPrefix}",
        "{ide{staticPrefix}",
        "{ideAstaticPrefix}",
        "{ide0staticPrefix}",
        "{ide staticPrefix}",
        "{ideastaticPrefix}"
      ]
    },
    {
      "regex": "ceph_osd_up{cluster=\"ceph\",osd=\"osd.4\"} 0",
      "exceptionStackTrace": null,
      "matches": [
        "ceph_osd_up{cluster=\"ceph\",osd=\"osd}4\"} 0",
        "ceph_osd_up{cluster=\"ceph\",osd=\"osd{4\"} 0",
        "ceph_osd_up{cluster=\"ceph\",osd=\"osd_4\"} 0",
        "ceph_osd_up{cluster=\"ceph\",osd=\"osdA4\"} 0",
        "ceph_osd_up{cluster=\"ceph\",osd=\"osd=4\"} 0",
        "ceph_osd_up{cluster=\"ceph\",osd=\"osd04\"} 0",
        "ceph_osd_up{cluster=\"ceph\",osd=\"osd,4\"} 0",
        "ceph_osd_up{cluster=\"ceph\",osd=\"osd\"4\"} 0",
        "ceph_osd_up{cluster=\"ceph\",osd=\"osd 4\"} 0",
        "ceph_osd_up{cluster=\"ceph\",osd=\"osda4\"} 0"
      ]
    },
    { "regex": "\\/150\\/", "exceptionStackTrace": null, "matches": ["/150/"] },
    {
      "regex": "\\b((?:$opus)\\b\\.?)\\s*(\\d+[a-d]?(?:-\\d[.\\d]*)?)(?:(?:[.,:;]\\s*)No\\.?\\s*(\\d[.\\d]*))?",
      "exceptionStackTrace": null,
      "matches": [
        "opus. 0a-0.; No. 0.; No. 0.",
        "opus. 0a-0.",
        "opus. 0a-0.; No. 0..",
        "opus. 0a-0.; No. 0",
        "opus. 0a-0.; No. 00",
        "opus. 0a-0.; No.  0.",
        "opus. 0a-0.; No.0.",
        "opus. 0a-0.; No.. 0.",
        "opus. 0a-0.; No 0.",
        "opus. 0a-0.;  No. 0.",
        "opus. 0a-0.;No. 0.",
        "opus. 0a-0.: No. 0.",
        "opus. 0a-0.. No. 0.",
        "opus. 0a-0., No. 0.",
        "opus. 0a-0.-0.; No. 0.",
        "opus. 0a; No. 0.",
        "opus. 0a-0..; No. 0.",
        "opus. 0a-0; No. 0.",
        "opus. 0a-00; No. 0.",
        "opus. 0aa-0.; No. 0.",
        "opus. 0-0.; No. 0.",
        "opus. 0e-0.; No. 0.",
        "opus. 00a-0.; No. 0.",
        "opus. a-0.; No. 0.",
        "opus.  0a-0.; No. 0.",
        "opus.0a-0.; No. 0.",
        "opus.. 0a-0.; No. 0.",
        "opus 0a-0.; No. 0.",
        "opus0",
        "opus. 0a-0.; No. 0."
      ]
    },
    {
      "regex": "\n          <payment>\n          .*<items>\n            .*<item>\n              .*<amount>10.00\n        ",
      "exceptionStackTrace": null,
      "matches": [
        "\n          <payment>\n          evil<items>\n            evil<item>\n              evil<amount>10A00\n        ",
        "\n          <payment>\n          evil<items>\n            evil<item>\n              evil<amount>10>00\n        ",
        "\n          <payment>\n          evil<items>\n            evil<item>\n              evil<amount>10<00\n        ",
        "\n          <payment>\n          evil<items>\n            evil<item>\n              evil<amount>10000\n        ",
        "\n          <payment>\n          evil<items>\n            evil<item>\n              evil<amount>10 00\n        ",
        "\n          <payment>\n          evil<items>\n            evil<item>\n              ><amount>10a00\n        ",
        "\n          <payment>\n          evil<items>\n            evil<item>\n              <<amount>10a00\n        ",
        "\n          <payment>\n          evil<items>\n            evil<item>\n              eVil<amount>10a00\n        ",
        "\n          <payment>\n          evil<items>\n            evil<item>\n              EVIL<amount>10a00\n        ",
        "\n          <payment>\n          evil<items>\n            evil<item>\n              ev_il<amount>10a00\n        ",
        "\n          <payment>\n          evil<items>\n            evil<item>\n              ev il<amount>10a00\n        ",
        "\n          <payment>\n          evil<items>\n            evil<item>\n              ev4il<amount>10a00\n        ",
        "\n          <payment>\n          evil<items>\n            evil<item>\n              e<amount>10a00\n        ",
        "\n          <payment>\n          evil<items>\n            evil<item>\n               <amount>10a00\n        ",
        "\n          <payment>\n          evil<items>\n            evil<item>\n              6<amount>10a00\n        ",
        "\n          <payment>\n          evil<items>\n            evil<item>\n              _<amount>10a00\n        ",
        "\n          <payment>\n          evil<items>\n            evil<item>\n              <amount>10a00\n        ",
        "\n          <payment>\n          evil<items>\n            ><item>\n              evil<amount>10a00\n        ",
        "\n          <payment>\n          evil<items>\n            <<item>\n              evil<amount>10a00\n        ",
        "\n          <payment>\n          evil<items>\n            eVil<item>\n              evil<amount>10a00\n        ",
        "\n          <payment>\n          evil<items>\n            EVIL<item>\n              evil<amount>10a00\n        ",
        "\n          <payment>\n          evil<items>\n            ev_il<item>\n              evil<amount>10a00\n        ",
        "\n          <payment>\n          evil<items>\n            ev il<item>\n              evil<amount>10a00\n        ",
        "\n          <payment>\n          evil<items>\n            ev4il<item>\n              evil<amount>10a00\n        ",
        "\n          <payment>\n          evil<items>\n            e<item>\n              evil<amount>10a00\n        ",
        "\n          <payment>\n          evil<items>\n             <item>\n              evil<amount>10a00\n        ",
        "\n          <payment>\n          evil<items>\n            6<item>\n              evil<amount>10a00\n        ",
        "\n          <payment>\n          evil<items>\n            _<item>\n              evil<amount>10a00\n        ",
        "\n          <payment>\n          evil<items>\n            <item>\n              evil<amount>10a00\n        ",
        "\n          <payment>\n          ><items>\n            evil<item>\n              evil<amount>10a00\n        ",
        "\n          <payment>\n          <<items>\n            evil<item>\n              evil<amount>10a00\n        ",
        "\n          <payment>\n          eVil<items>\n            evil<item>\n              evil<amount>10a00\n        ",
        "\n          <payment>\n          EVIL<items>\n            evil<item>\n              evil<amount>10a00\n        ",
        "\n          <payment>\n          ev_il<items>\n            evil<item>\n              evil<amount>10a00\n        ",
        "\n          <payment>\n          ev il<items>\n            evil<item>\n              evil<amount>10a00\n        ",
        "\n          <payment>\n          ev4il<items>\n            evil<item>\n              evil<amount>10a00\n        ",
        "\n          <payment>\n          e<items>\n            evil<item>\n              evil<amount>10a00\n        ",
        "\n          <payment>\n           <items>\n            evil<item>\n              evil<amount>10a00\n        ",
        "\n          <payment>\n          6<items>\n            evil<item>\n              evil<amount>10a00\n        ",
        "\n          <payment>\n          _<items>\n            evil<item>\n              evil<amount>10a00\n        ",
        "\n          <payment>\n          <items>\n            evil<item>\n              evil<amount>10a00\n        ",
        "\n          <payment>\n          <items>\n            <item>\n              <amount>10a00\n        ",
        "\n          <payment>\n          evil<items>\n            evil<item>\n              evil<amount>10a00\n        "
      ]
    },
    {
      "regex": "the requested PHP extension [a-z-A-Z-_]+ is missing from your system",
      "exceptionStackTrace": null,
      "matches": [
        "the requested PHP extension - is missing from your system",
        "the requested PHP extension eVil is missing from your system",
        "the requested PHP extension EVIL is missing from your system",
        "the requested PHP extension ev_il is missing from your system",
        "the requested PHP extension ev il is missing from your system",
        "the requested PHP extension ev4il is missing from your system",
        "the requested PHP extension e is missing from your system",
        "the requested PHP extension   is missing from your system",
        "the requested PHP extension 6 is missing from your system",
        "the requested PHP extension _ is missing from your system",
        "the requested PHP extension  is missing from your system",
        "the requested PHP extension evil is missing from your system"
      ]
    },
    {
      "regex": "/recurringCharges/item/frequency$",
      "exceptionStackTrace": null,
      "matches": ["/recurringCharges/item/frequency"]
    },
    {
      "regex": "\\A:l\\s+(\\S+)",
      "exceptionStackTrace": null,
      "matches": [
        ":l :",
        ":l eVil",
        ":l EVIL",
        ":l ev_il",
        ":l ev il",
        ":l ev4il",
        ":l e",
        ":l  ",
        ":l 6",
        ":l _",
        ":l ",
        ":l  evil",
        ":levil",
        ":l evil"
      ]
    },
    {
      "regex": "$chunk1(.*?)$chunk2",
      "exceptionStackTrace": null,
      "matches": [
        "chunk1eVilchunk2",
        "chunk1EVILchunk2",
        "chunk1ev_ilchunk2",
        "chunk1ev ilchunk2",
        "chunk1ev4ilchunk2",
        "chunk1echunk2",
        "chunk1 chunk2",
        "chunk16chunk2",
        "chunk1_chunk2",
        "chunk1chunk2",
        "chunk1evilchunk2"
      ]
    },
    {
      "regex": "^([\\w\\*\\s]+)\\[(\\d+)\\](\\w+)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil[0]eVil",
        "evil[0]EVIL",
        "evil[0]ev_il",
        "evil[0]ev il",
        "evil[0]ev4il",
        "evil[0]e",
        "evil[0] ",
        "evil[0]6",
        "evil[0]_",
        "evil[0]",
        "evil[00]evil",
        "evil[]evil",
        "][0]evil",
        "[[0]evil",
        "*[0]evil",
        "eVil[0]evil",
        "EVIL[0]evil",
        "ev_il[0]evil",
        "ev il[0]evil",
        "ev4il[0]evil",
        "e[0]evil",
        " [0]evil",
        "6[0]evil",
        "_[0]evil",
        "[0]evil",
        "evil[0]evil"
      ]
    },
    {
      "regex": "\\b(?<_1>sig)\\b",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<_"
      },
      "matches": []
    },
    {
      "regex": "\\A~(\\w+)/?",
      "exceptionStackTrace": null,
      "matches": [
        "~evil//",
        "~eVil/",
        "~EVIL/",
        "~ev_il/",
        "~ev il/",
        "~ev4il/",
        "~e/",
        "~ /",
        "~6/",
        "~_/",
        "~/",
        "~evil",
        "~evil/"
      ]
    },
    {
      "regex": "illegal operation for the \"Hero\" collection",
      "exceptionStackTrace": null,
      "matches": ["illegal operation for the \"Hero\" collection"]
    },
    {
      "regex": "Directory not found",
      "exceptionStackTrace": null,
      "matches": ["Directory not found"]
    },
    {
      "regex": "(\\d+)(?:\\.(\\d)(?:\\.\\d+)?)?$",
      "exceptionStackTrace": null,
      "matches": [
        "0.0.0.0.0",
        "0.0.0.0",
        "0.0",
        "0.0.00",
        "0.0.",
        "00.0.0",
        ".0.0",
        "0",
        "0.0.0"
      ]
    },
    { "regex": "a|bc", "exceptionStackTrace": null, "matches": ["bc", "a"] },
    {
      "regex": "'(\\\\.|[^\\\\']|(\\\\x[0-9a-fA-F]{2})|(\\\\u{[0-9a-fA-F]{1,6}},))'",
      "exceptionStackTrace": null,
      "matches": [
        "'\\u{AAAAAAA},'",
        "'\\u{AAAAAA},'",
        "'\\u{},'",
        "'\\u{g},'",
        "'\\u{a},'",
        "'\\u{G},'",
        "'\\u{0},'",
        "'\\xAAA'",
        "'\\xA'",
        "'\\xgA'",
        "'\\xaA'",
        "'\\xGA'",
        "'\\x0A'",
        "'}'",
        "'{'",
        "'\\'",
        "'A'",
        "'0'",
        "','",
        "'''",
        "' '",
        "'\\}'",
        "'\\{'",
        "'\\\\'",
        "'\\A'",
        "'\\0'",
        "'\\,'",
        "'\\''",
        "'\\ '",
        "'\\u{A},'",
        "'\\xAA'",
        "'a'",
        "'\\a'"
      ]
    },
    { "regex": "24 hours", "exceptionStackTrace": null, "matches": ["24 hours"] },
    {
      "regex": "MSIE ([0-9.]*)",
      "exceptionStackTrace": null,
      "matches": ["MSIE ..", "MSIE 0", "MSIE ", "MSIE ."]
    },
    {
      "regex": "PaymentAccount created",
      "exceptionStackTrace": null,
      "matches": ["PaymentAccount created"]
    },
    {
      "regex": "^[A-Z\u010c\u0106\u017d\u0160\u0110]*$",
      "exceptionStackTrace": null,
      "matches": [
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "(\\\\[0-9]{3})+",
      "exceptionStackTrace": null,
      "matches": ["\\000\\000", "", "\\0000", "\\00", "\\000"]
    },
    {
      "regex": "\\b(?:Android|Symbian OS|Tablet OS|webOS)\\b",
      "exceptionStackTrace": null,
      "matches": ["webOS", "Tablet OS", "Symbian OS", "Android"]
    },
    {
      "regex": "^sce\\-autodraft\\-",
      "exceptionStackTrace": null,
      "matches": ["sce-autodraft-"]
    },
    {
      "regex": "^[\\+<>|]+",
      "exceptionStackTrace": null,
      "matches": ["||", "", ">", "<", "+", "|"]
    },
    {
      "regex": "(Test\\.js$)|(Helper\\.js$)",
      "exceptionStackTrace": null,
      "matches": ["Helper.js", "Test.js"]
    },
    {
      "regex": "^ \\s+              ($SEQ_STR)               \\s* $",
      "exceptionStackTrace": null,
      "matches": [
        "                SEQ_STR                  ",
        "                 SEQ_STR                 ",
        "               SEQ_STR                 ",
        "                SEQ_STR                ",
        "                SEQ_STR                 "
      ]
    },
    {
      "regex": "(\\\\verb(\\W).*?\\2)",
      "exceptionStackTrace": null,
      "matches": [
        "\\verb;\\;",
        "\\verb;eVil;",
        "\\verb;EVIL;",
        "\\verb;ev_il;",
        "\\verb;ev il;",
        "\\verb;ev4il;",
        "\\verb;e;",
        "\\verb; ;",
        "\\verb;6;",
        "\\verb;_;",
        "\\verbaevil;",
        "\\verb_evil;",
        "\\verb\\evil;",
        "\\verbAevil;",
        "\\verb0evil;",
        "\\verb evil;",
        "\\verb;;",
        "\\verb;evil;"
      ]
    },
    {
      "regex": "^<(\\/?)([a-zA-Z1-6]+)\\b(.*)( ?\\/)?>$",
      "exceptionStackTrace": null,
      "matches": [
        "</1evil / />",
        "</1evil>",
        "</1evil  />",
        "</1evil/>",
        "</1> />",
        "</1< />",
        "</1/ />",
        "</1eVil />",
        "</1EVIL />",
        "</1ev_il />",
        "</1ev il />",
        "</1ev4il />",
        "</1e />",
        "</1  />",
        "</16 />",
        "</1_ />",
        "</1 />",
        "</11evil />",
        "</evil />",
        "</aevil />",
        "</Aevil />",
        "</0evil />",
        "<//1evil />",
        "<1evil />",
        "<1>",
        "</1evil />"
      ]
    },
    { "regex": "rbconfig", "exceptionStackTrace": null, "matches": ["rbconfig"] },
    { "regex": "^cmd\\=", "exceptionStackTrace": null, "matches": ["cmd="] },
    {
      "regex": "\\.yahoo\\.com/(about|jobseeker|preferences|search)/",
      "exceptionStackTrace": null,
      "matches": [
        ".yahoo.com/search/",
        ".yahoo.com/preferences/",
        ".yahoo.com/jobseeker/",
        ".yahoo.com/about/"
      ]
    },
    {
      "regex": "^~([^/]*)",
      "exceptionStackTrace": null,
      "matches": [
        "~~",
        "~/",
        "~eVil",
        "~EVIL",
        "~ev_il",
        "~ev il",
        "~ev4il",
        "~e",
        "~ ",
        "~6",
        "~_",
        "~",
        "~evil"
      ]
    },
    {
      "regex": "^\\s*end(module|primitive)\\b",
      "exceptionStackTrace": null,
      "matches": [
        "  endmodule",
        "endprimitive",
        "endmodule",
        " endprimitive",
        " endmodule"
      ]
    },
    {
      "regex": "^(?:row|column)",
      "exceptionStackTrace": null,
      "matches": ["column", "row"]
    },
    {
      "regex": "(\\s+)?(\\*+)$",
      "exceptionStackTrace": null,
      "matches": [" **", " ", "  *", "*", " *"]
    },
    {
      "regex": "toplevel constant Hash referenced by",
      "exceptionStackTrace": null,
      "matches": ["toplevel constant Hash referenced by"]
    },
    {
      "regex": "[\\\\\\/]bluebird[\\\\\\/]js[\\\\\\/](release|debug|instrumented)",
      "exceptionStackTrace": null,
      "matches": [
        "/bluebird/js\\release",
        "/bluebird\\js/release",
        "\\bluebird/js/release",
        "/bluebird/js/instrumented",
        "/bluebird/js/debug",
        "/bluebird/js/release"
      ]
    },
    {
      "regex": "style.css",
      "exceptionStackTrace": null,
      "matches": ["style_css", "styleAcss", "style0css", "style css", "styleacss"]
    },
    {
      "regex": "\\A(\\w+(\\-\\w+)*)",
      "exceptionStackTrace": null,
      "matches": [
        "evil-evil-evil",
        "evil-eVil",
        "evil-EVIL",
        "evil-ev_il",
        "evil-ev il",
        "evil-ev4il",
        "evil-e",
        "evil- ",
        "evil-6",
        "evil-_",
        "evil-",
        "eVil-evil",
        "EVIL-evil",
        "ev_il-evil",
        "ev il-evil",
        "ev4il-evil",
        "e-evil",
        " -evil",
        "6-evil",
        "_-evil",
        "-evil",
        "evil",
        "evil-evil"
      ]
    },
    {
      "regex": "\\s*(\\w+)\\s*=\\s*\"?([^\"]*)",
      "exceptionStackTrace": null,
      "matches": [
        " evil = \"=",
        " evil = \"\"",
        " evil = \"eVil",
        " evil = \"EVIL",
        " evil = \"ev_il",
        " evil = \"ev il",
        " evil = \"ev4il",
        " evil = \"e",
        " evil = \" ",
        " evil = \"6",
        " evil = \"_",
        " evil = \"",
        " evil = \"\"evil",
        " evil = evil",
        " evil =  \"evil",
        " evil =\"evil",
        " evil  = \"evil",
        " evil= \"evil",
        " eVil = \"evil",
        " EVIL = \"evil",
        " ev_il = \"evil",
        " ev il = \"evil",
        " ev4il = \"evil",
        " e = \"evil",
        "   = \"evil",
        " 6 = \"evil",
        " _ = \"evil",
        "  = \"evil",
        "  evil = \"evil",
        "evil = \"evil",
        "evil=",
        " evil = \"evil"
      ]
    },
    {
      "regex": "^Control-",
      "exceptionStackTrace": null,
      "matches": ["Control-"]
    },
    { "regex": "^try\\b", "exceptionStackTrace": null, "matches": ["try"] },
    {
      "regex": "account|address",
      "exceptionStackTrace": null,
      "matches": ["address", "account"]
    },
    {
      "regex": ":controller=>\"content\"",
      "exceptionStackTrace": null,
      "matches": [":controller=>\"content\""]
    },
    {
      "regex": "(\\d)\u5341",
      "exceptionStackTrace": null,
      "matches": ["0\u5341"]
    },
    {
      "regex": "\\s+\\w+(?=\\s*=)",
      "exceptionStackTrace": null,
      "matches": [
        " eVil",
        " EVIL",
        " ev_il",
        " ev il",
        " ev4il",
        " e",
        "  ",
        " 6",
        " _",
        " ",
        "  evil",
        "evil",
        " evil"
      ]
    },
    {
      "regex": "(\\{\\{cite[^{}]+)\\|\\s*format\\s*=\\s*(\\[\\[[^][|]+\\||\\[\\[|)(\\]\\]| |html?|world|wide|web)+\\s*(?=\\||\\}\\})",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (parse error): expected character type but received RIGHT_BRACKET"
      },
      "matches": []
    },
    {
      "regex": "^(\\d\\d?)/(\\d{4})$",
      "exceptionStackTrace": null,
      "matches": ["00/00000", "00/000", "000/0000", "0/0000", "00/0000"]
    },
    {
      "regex": "^(.+)_Model$",
      "exceptionStackTrace": null,
      "matches": [
        "eVil_Model",
        "EVIL_Model",
        "ev_il_Model",
        "ev il_Model",
        "ev4il_Model",
        "e_Model",
        " _Model",
        "6_Model",
        "__Model",
        "_Model",
        "evil_Model"
      ]
    },
    {
      "regex": "^(-d|-host|-reader)",
      "exceptionStackTrace": null,
      "matches": ["-reader", "-host", "-d"]
    },
    {
      "regex": "machine_test_instance_profile",
      "exceptionStackTrace": null,
      "matches": ["machine_test_instance_profile"]
    },
    {
      "regex": "^([#|\\.])([\\w\\-]+)$",
      "exceptionStackTrace": null,
      "matches": [
        ".|",
        "..",
        ".-",
        ".#",
        ".eVil",
        ".EVIL",
        ".ev_il",
        ".ev il",
        ".ev4il",
        ".e",
        ". ",
        ".6",
        "._",
        ".",
        "|evil",
        "#evil",
        ".evil"
      ]
    },
    {
      "regex": "^(unreachable)\\s+([0-9a-fA-F\\.:/]+)\\s+dev\\s+([a-z0-9\\.]+)\\s+(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "unreachable / dev evil :",
        "unreachable / dev evil /",
        "unreachable / dev evil .",
        "unreachable / dev evil eVil",
        "unreachable / dev evil EVIL",
        "unreachable / dev evil ev_il",
        "unreachable / dev evil ev il",
        "unreachable / dev evil ev4il",
        "unreachable / dev evil e",
        "unreachable / dev evil  ",
        "unreachable / dev evil 6",
        "unreachable / dev evil _",
        "unreachable / dev evil  evil",
        "unreachable / dev evilevil",
        "unreachable / dev : evil",
        "unreachable / dev / evil",
        "unreachable / dev . evil",
        "unreachable / dev eVil evil",
        "unreachable / dev EVIL evil",
        "unreachable / dev ev_il evil",
        "unreachable / dev ev il evil",
        "unreachable / dev ev4il evil",
        "unreachable / dev e evil",
        "unreachable / dev   evil",
        "unreachable / dev 6 evil",
        "unreachable / dev _ evil",
        "unreachable / dev  evil",
        "unreachable / dev  evil evil",
        "unreachable / devevil evil",
        "unreachable /  dev evil evil",
        "unreachable /dev evil evil",
        "unreachable // dev evil evil",
        "unreachable  dev evil evil",
        "unreachable g dev evil evil",
        "unreachable a dev evil evil",
        "unreachable G dev evil evil",
        "unreachable A dev evil evil",
        "unreachable : dev evil evil",
        "unreachable 0 dev evil evil",
        "unreachable . dev evil evil",
        "unreachable  / dev evil evil",
        "unreachable/ dev evil evil",
        "unreachable / dev evil ",
        "unreachable / dev evil evil"
      ]
    },
    {
      "regex": "^([0-9a-z-]+)$",
      "exceptionStackTrace": null,
      "matches": [
        "-",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "^msgstr\\s*\".*\"\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        "msgstr \"evil\"  ",
        "msgstr \"evil\"",
        "msgstr \"\"\" ",
        "msgstr \"eVil\" ",
        "msgstr \"EVIL\" ",
        "msgstr \"ev_il\" ",
        "msgstr \"ev il\" ",
        "msgstr \"ev4il\" ",
        "msgstr \"e\" ",
        "msgstr \" \" ",
        "msgstr \"6\" ",
        "msgstr \"_\" ",
        "msgstr \"\" ",
        "msgstr  \"evil\" ",
        "msgstr\"evil\" ",
        "msgstr\"\"",
        "msgstr \"evil\" "
      ]
    },
    {
      "regex": "^DBLINKS\\s{5}(\\S+):\\s(.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "DBLINKS     evil: :",
        "DBLINKS     evil: eVil",
        "DBLINKS     evil: EVIL",
        "DBLINKS     evil: ev_il",
        "DBLINKS     evil: ev il",
        "DBLINKS     evil: ev4il",
        "DBLINKS     evil: e",
        "DBLINKS     evil:  ",
        "DBLINKS     evil: 6",
        "DBLINKS     evil: _",
        "DBLINKS     evil: ",
        "DBLINKS     :: evil",
        "DBLINKS     eVil: evil",
        "DBLINKS     EVIL: evil",
        "DBLINKS     ev_il: evil",
        "DBLINKS     ev il: evil",
        "DBLINKS     ev4il: evil",
        "DBLINKS     e: evil",
        "DBLINKS      : evil",
        "DBLINKS     6: evil",
        "DBLINKS     _: evil",
        "DBLINKS     : evil",
        "DBLINKS      evil: evil",
        "DBLINKS    evil: evil",
        "DBLINKS     evil: evil"
      ]
    },
    {
      "regex": "List.*.of_",
      "exceptionStackTrace": null,
      "matches": [
        "Listevil_of_",
        "ListevilAof_",
        "Listevil0of_",
        "Listevil of_",
        "ListeVilaof_",
        "ListEVILaof_",
        "Listev_ilaof_",
        "Listev ilaof_",
        "Listev4ilaof_",
        "Listeaof_",
        "List aof_",
        "List6aof_",
        "List_aof_",
        "Listaof_",
        "Listevilaof_"
      ]
    },
    {
      "regex": "(?:\\s*)<\\?php",
      "exceptionStackTrace": null,
      "matches": ["  <?php", "<?php", " <?php"]
    },
    { "regex": "just", "exceptionStackTrace": null, "matches": ["just"] },
    {
      "regex": "SUBSTRING",
      "exceptionStackTrace": null,
      "matches": ["SUBSTRING"]
    },
    {
      "regex": "^\\d+[mhdw]$",
      "exceptionStackTrace": null,
      "matches": ["0m", "0h", "0d", "0a", "00w", "w", "0w"]
    },
    {
      "regex": "(-?[0-9]\\d*):\\W+(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "-00:;:",
        "-00:;-",
        "-00:;eVil",
        "-00:;EVIL",
        "-00:;ev_il",
        "-00:;ev il",
        "-00:;ev4il",
        "-00:;e",
        "-00:; ",
        "-00:;6",
        "-00:;_",
        "-00:;",
        "-00:;;evil",
        "-00:evil",
        "-00:aevil",
        "-00:_evil",
        "-00:Aevil",
        "-00::evil",
        "-00:0evil",
        "-00:-evil",
        "-00: evil",
        "-000:;evil",
        "-0:;evil",
        "--00:;evil",
        "00:;evil",
        "0:;",
        "-00:;evil"
      ]
    },
    {
      "regex": "<span[^>]*font-style:italic[^>]*>",
      "exceptionStackTrace": null,
      "matches": [
        "<spanevilfont-style:italic>>",
        "<spanevilfont-style:italic<>",
        "<spanevilfont-style:italic:>",
        "<spanevilfont-style:italic->",
        "<spanevilfont-style:italiceVil>",
        "<spanevilfont-style:italicEVIL>",
        "<spanevilfont-style:italicev_il>",
        "<spanevilfont-style:italicev il>",
        "<spanevilfont-style:italicev4il>",
        "<spanevilfont-style:italice>",
        "<spanevilfont-style:italic >",
        "<spanevilfont-style:italic6>",
        "<spanevilfont-style:italic_>",
        "<spanevilfont-style:italic>",
        "<span>font-style:italicevil>",
        "<span<font-style:italicevil>",
        "<span:font-style:italicevil>",
        "<span-font-style:italicevil>",
        "<spaneVilfont-style:italicevil>",
        "<spanEVILfont-style:italicevil>",
        "<spanev_ilfont-style:italicevil>",
        "<spanev ilfont-style:italicevil>",
        "<spanev4ilfont-style:italicevil>",
        "<spanefont-style:italicevil>",
        "<span font-style:italicevil>",
        "<span6font-style:italicevil>",
        "<span_font-style:italicevil>",
        "<spanfont-style:italicevil>",
        "<spanfont-style:italic>",
        "<spanevilfont-style:italicevil>"
      ]
    },
    {
      "regex": "^(\\d+(?:\\.\\d+)?) *(kb|mb|gb)$",
      "exceptionStackTrace": null,
      "matches": [
        "0.0  kb",
        "0.0kb",
        "0.0.0 kb",
        "0 kb",
        "0.00 kb",
        "0. kb",
        "00.0 kb",
        ".0 kb",
        "0gb",
        "0mb",
        "0kb",
        "0.0 gb",
        "0.0 mb",
        "0.0 kb"
      ]
    },
    {
      "regex": "(.*?)[A|N|T]",
      "exceptionStackTrace": null,
      "matches": [
        "evil|",
        "evilN",
        "evilB",
        "evilA",
        "|T",
        "eVilT",
        "EVILT",
        "ev_ilT",
        "ev ilT",
        "ev4ilT",
        "eT",
        " T",
        "6T",
        "_T",
        "T",
        "evilT"
      ]
    },
    {
      "regex": "info.*|common.*|page.*|chars.*|char id=\\d\\d\\d\\d\\d\\d.*|char id=[7-9]\\d\\d\\d\\d.*|char id=6[6-9]\\d\\d\\d.*|char id=65[6-9]\\d\\d.*|char id=655[4-9]\\d.*|char id=6553[6-9].*| xoff.*|char id=|x=|y=|width=|height=",
      "exceptionStackTrace": null,
      "matches": [
        " xoff=",
        " xoffeVil",
        " xoffEVIL",
        " xoffev_il",
        " xoffev il",
        " xoffev4il",
        " xoffe",
        " xoff ",
        " xoff6",
        " xoff_",
        "char id=65536=",
        "char id=65536eVil",
        "char id=65536EVIL",
        "char id=65536ev_il",
        "char id=65536ev il",
        "char id=65536ev4il",
        "char id=65536e",
        "char id=65536 ",
        "char id=655366",
        "char id=65536_",
        "char id=65530evil",
        "char id=65540=",
        "char id=65540eVil",
        "char id=65540EVIL",
        "char id=65540ev_il",
        "char id=65540ev il",
        "char id=65540ev4il",
        "char id=65540e",
        "char id=65540 ",
        "char id=655406",
        "char id=65540_",
        "char id=65500evil",
        "char id=65600=",
        "char id=65600eVil",
        "char id=65600EVIL",
        "char id=65600ev_il",
        "char id=65600ev il",
        "char id=65600ev4il",
        "char id=65600e",
        "char id=65600 ",
        "char id=656006",
        "char id=65600_",
        "char id=65000evil",
        "char id=66000=",
        "char id=66000eVil",
        "char id=66000EVIL",
        "char id=66000ev_il",
        "char id=66000ev il",
        "char id=66000ev4il",
        "char id=66000e",
        "char id=66000 ",
        "char id=660006",
        "char id=66000_",
        "char id=60000evil",
        "char id=70000=",
        "char id=70000eVil",
        "char id=70000EVIL",
        "char id=70000ev_il",
        "char id=70000ev il",
        "char id=70000ev4il",
        "char id=70000e",
        "char id=70000 ",
        "char id=700006",
        "char id=70000_",
        "char id=00000evil",
        "char id=000000=",
        "char id=000000eVil",
        "char id=000000EVIL",
        "char id=000000ev_il",
        "char id=000000ev il",
        "char id=000000ev4il",
        "char id=000000e",
        "char id=000000 ",
        "char id=0000006",
        "char id=000000_",
        "chars=",
        "charseVil",
        "charsEVIL",
        "charsev_il",
        "charsev il",
        "charsev4il",
        "charse",
        "chars ",
        "chars6",
        "chars_",
        "page=",
        "pageeVil",
        "pageEVIL",
        "pageev_il",
        "pageev il",
        "pageev4il",
        "pagee",
        "page ",
        "page6",
        "page_",
        "common=",
        "commoneVil",
        "commonEVIL",
        "commonev_il",
        "commonev il",
        "commonev4il",
        "commone",
        "common ",
        "common6",
        "common_",
        "info=",
        "infoeVil",
        "infoEVIL",
        "infoev_il",
        "infoev il",
        "infoev4il",
        "infoe",
        "info ",
        "info6",
        "info_",
        " xoff",
        "char id=65536",
        "char id=65540",
        "char id=65600",
        "char id=66000",
        "char id=70000",
        "char id=000000",
        "chars",
        "page",
        "common",
        "info",
        "height=",
        "width=",
        "y=",
        "x=",
        "char id=",
        " xoffevil",
        "char id=65536evil",
        "char id=65540evil",
        "char id=65600evil",
        "char id=66000evil",
        "char id=70000evil",
        "char id=000000evil",
        "charsevil",
        "pageevil",
        "commonevil",
        "infoevil"
      ]
    },
    {
      "regex": "[A-Za-z]{3} \\d{4}$",
      "exceptionStackTrace": null,
      "matches": [
        "aaa 00000",
        "aaa 000",
        "aaaa 0000",
        "aa 0000",
        "Aaa 0000",
        "aaa 0000"
      ]
    },
    {
      "regex": "the credentials page",
      "exceptionStackTrace": null,
      "matches": ["the credentials page"]
    },
    {
      "regex": "^\\d+ warnings?, \\d+ errors? were found!",
      "exceptionStackTrace": null,
      "matches": [
        "0 warnings, 0 errorss were found!",
        "0 warnings, 0 error were found!",
        "0 warnings, 00 errors were found!",
        "0 warnings,  errors were found!",
        "0 warningss, 0 errors were found!",
        "0 warning, 0 errors were found!",
        "00 warnings, 0 errors were found!",
        " warnings, 0 errors were found!",
        "0 warning, 0 error were found!",
        "0 warnings, 0 errors were found!"
      ]
    },
    {
      "regex": "meta name=\"robots\" content=\"index",
      "exceptionStackTrace": null,
      "matches": ["meta name=\"robots\" content=\"index"]
    },
    {
      "regex": "(Darwin 10.3|Mac OS X 10.3)",
      "exceptionStackTrace": null,
      "matches": [
        "Mac OS X 10_3",
        "Mac OS X 10A3",
        "Mac OS X 1003",
        "Mac OS X 10 3",
        "Darwin 10_3",
        "Darwin 10A3",
        "Darwin 1003",
        "Darwin 10 3",
        "Mac OS X 10a3",
        "Darwin 10a3"
      ]
    },
    {
      "regex": "void([1-9]|[1-5][0-9]|6[0-4])",
      "exceptionStackTrace": null,
      "matches": ["void65", "void00", "void0", "void60", "void10", "void1"]
    },
    {
      "regex": "Invalid.*(?:alias|account|recipient|address|email|mailbox|user).*<(\\S+@\\S+\\w)>",
      "exceptionStackTrace": null,
      "matches": [
        "Invalidevilaliasevil<evil@evil_>",
        "Invalidevilaliasevil<evil@evilA>",
        "Invalidevilaliasevil<evil@evil0>",
        "Invalidevilaliasevil<evil@@a>",
        "Invalidevilaliasevil<evil@>a>",
        "Invalidevilaliasevil<evil@<a>",
        "Invalidevilaliasevil<evil@eVila>",
        "Invalidevilaliasevil<evil@EVILa>",
        "Invalidevilaliasevil<evil@ev_ila>",
        "Invalidevilaliasevil<evil@ev ila>",
        "Invalidevilaliasevil<evil@ev4ila>",
        "Invalidevilaliasevil<evil@ea>",
        "Invalidevilaliasevil<evil@ a>",
        "Invalidevilaliasevil<evil@6a>",
        "Invalidevilaliasevil<evil@_a>",
        "Invalidevilaliasevil<evil@a>",
        "Invalidevilaliasevil<@@evila>",
        "Invalidevilaliasevil<>@evila>",
        "Invalidevilaliasevil<<@evila>",
        "Invalidevilaliasevil<eVil@evila>",
        "Invalidevilaliasevil<EVIL@evila>",
        "Invalidevilaliasevil<ev_il@evila>",
        "Invalidevilaliasevil<ev il@evila>",
        "Invalidevilaliasevil<ev4il@evila>",
        "Invalidevilaliasevil<e@evila>",
        "Invalidevilaliasevil< @evila>",
        "Invalidevilaliasevil<6@evila>",
        "Invalidevilaliasevil<_@evila>",
        "Invalidevilaliasevil<@evila>",
        "Invalidevilalias@<evil@evila>",
        "Invalidevilalias><evil@evila>",
        "Invalidevilalias<<evil@evila>",
        "InvalidevilaliaseVil<evil@evila>",
        "InvalidevilaliasEVIL<evil@evila>",
        "Invalidevilaliasev_il<evil@evila>",
        "Invalidevilaliasev il<evil@evila>",
        "Invalidevilaliasev4il<evil@evila>",
        "Invalidevilaliase<evil@evila>",
        "Invalidevilalias <evil@evila>",
        "Invalidevilalias6<evil@evila>",
        "Invalidevilalias_<evil@evila>",
        "Invalidevilalias<evil@evila>",
        "Invalid@aliasevil<evil@evila>",
        "Invalid>aliasevil<evil@evila>",
        "Invalid<aliasevil<evil@evila>",
        "InvalideVilaliasevil<evil@evila>",
        "InvalidEVILaliasevil<evil@evila>",
        "Invalidev_ilaliasevil<evil@evila>",
        "Invalidev ilaliasevil<evil@evila>",
        "Invalidev4ilaliasevil<evil@evila>",
        "Invalidealiasevil<evil@evila>",
        "Invalid aliasevil<evil@evila>",
        "Invalid6aliasevil<evil@evila>",
        "Invalid_aliasevil<evil@evila>",
        "Invalidaliasevil<evil@evila>",
        "Invaliduser<evil@evila>",
        "Invalidmailbox<evil@evila>",
        "Invalidemail<evil@evila>",
        "Invalidaddress<evil@evila>",
        "Invalidrecipient<evil@evila>",
        "Invalidaccount<evil@evila>",
        "Invalidalias<evil@evila>",
        "Invalideviluserevil<evil@evila>",
        "Invalidevilmailboxevil<evil@evila>",
        "Invalidevilemailevil<evil@evila>",
        "Invalideviladdressevil<evil@evila>",
        "Invalidevilrecipientevil<evil@evila>",
        "Invalidevilaccountevil<evil@evila>",
        "Invalidevilaliasevil<evil@evila>"
      ]
    },
    {
      "regex": "^E11000 duplicate key error",
      "exceptionStackTrace": null,
      "matches": ["E11000 duplicate key error"]
    },
    {
      "regex": "You need to qualify.* with one or more platforms",
      "exceptionStackTrace": null,
      "matches": [
        "You need to qualifyeVil with one or more platforms",
        "You need to qualifyEVIL with one or more platforms",
        "You need to qualifyev_il with one or more platforms",
        "You need to qualifyev il with one or more platforms",
        "You need to qualifyev4il with one or more platforms",
        "You need to qualifye with one or more platforms",
        "You need to qualify  with one or more platforms",
        "You need to qualify6 with one or more platforms",
        "You need to qualify_ with one or more platforms",
        "You need to qualify with one or more platforms",
        "You need to qualifyevil with one or more platforms"
      ]
    },
    {
      "regex": "Test_validation\\[new\\]/ensure: defined 'ensure' as 'present'",
      "exceptionStackTrace": null,
      "matches": ["Test_validation[new]/ensure: defined 'ensure' as 'present'"]
    },
    { "regex": "sco", "exceptionStackTrace": null, "matches": ["sco"] },
    {
      "regex": "^\\s*log",
      "exceptionStackTrace": null,
      "matches": ["  log", "log", " log"]
    },
    {
      "regex": "\\A[\\-\\+]?\\d+\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    { "regex": "-CONJ", "exceptionStackTrace": null, "matches": ["-CONJ"] },
    {
      "regex": "^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))",
      "exceptionStackTrace": null,
      "matches": [
        "evil?",
        "evil/",
        "?#",
        ":#",
        "/#",
        "##",
        "eVil#",
        "EVIL#",
        "ev_il#",
        "ev il#",
        "ev4il#",
        "e#",
        " #",
        "6#",
        "_#",
        "httpss:",
        "",
        "#",
        "http:",
        "evil",
        "evil#",
        "ftp:",
        "mailto:",
        "https:"
      ]
    },
    {
      "regex": "^/user/check$",
      "exceptionStackTrace": null,
      "matches": ["/user/check"]
    },
    {
      "regex": "[_ ]Mozilla$",
      "exceptionStackTrace": null,
      "matches": ["_Mozilla", " Mozilla"]
    },
    {
      "regex": "[^a-zA-Z0-9\\s@_.\\-\\+\\(\\)]",
      "exceptionStackTrace": null,
      "matches": ["a", "_", "A", "@", "0", ".", "-", "+", ")", "(", " ", "!"]
    },
    {
      "regex": "(d+\\/(\\d+)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "missing ), unterminated subpattern"
      },
      "matches": []
    },
    {
      "regex": "{\\d+}",
      "exceptionStackTrace": null,
      "matches": ["{00}", "{}", "{0}"]
    },
    {
      "regex": "(([!#$%&'*+.0-9A-Zdiff^_`a-z{|}~-]*)\\*)(\\d*)=(\\s*\".*?[^\\\\]\";?|\\S*)",
      "exceptionStackTrace": null,
      "matches": [
        "evil*0=~",
        "evil*0=}",
        "evil*0=|",
        "evil*0={",
        "evil*0=`",
        "evil*0=^",
        "evil*0=\\",
        "evil*0==",
        "evil*0=;",
        "evil*0=.",
        "evil*0=-",
        "evil*0=+",
        "evil*0=*",
        "evil*0='",
        "evil*0=&",
        "evil*0=%",
        "evil*0=$",
        "evil*0=#",
        "evil*0=\"",
        "evil*0=!",
        "evil*0=eVil",
        "evil*0=EVIL",
        "evil*0=ev_il",
        "evil*0=ev il",
        "evil*0=ev4il",
        "evil*0=e",
        "evil*0= ",
        "evil*0=6",
        "evil*0=_",
        "evil*0=",
        "evil*0= \"evila\";;",
        "evil*0= \"evila\"",
        "evil*0= \"evil~\";",
        "evil*0= \"evil}\";",
        "evil*0= \"evil|\";",
        "evil*0= \"evil{\";",
        "evil*0= \"evil`\";",
        "evil*0= \"evil_\";",
        "evil*0= \"evil^\";",
        "evil*0= \"evil\\\";",
        "evil*0= \"evilA\";",
        "evil*0= \"evil=\";",
        "evil*0= \"evil;\";",
        "evil*0= \"evil0\";",
        "evil*0= \"evil.\";",
        "evil*0= \"evil-\";",
        "evil*0= \"evil+\";",
        "evil*0= \"evil*\";",
        "evil*0= \"evil'\";",
        "evil*0= \"evil&\";",
        "evil*0= \"evil%\";",
        "evil*0= \"evil$\";",
        "evil*0= \"evil#\";",
        "evil*0= \"evil\"\";",
        "evil*0= \"evil!\";",
        "evil*0= \"evil \";",
        "evil*0= \"~a\";",
        "evil*0= \"}a\";",
        "evil*0= \"|a\";",
        "evil*0= \"{a\";",
        "evil*0= \"`a\";",
        "evil*0= \"^a\";",
        "evil*0= \"\\a\";",
        "evil*0= \"=a\";",
        "evil*0= \";a\";",
        "evil*0= \".a\";",
        "evil*0= \"-a\";",
        "evil*0= \"+a\";",
        "evil*0= \"*a\";",
        "evil*0= \"'a\";",
        "evil*0= \"&a\";",
        "evil*0= \"%a\";",
        "evil*0= \"$a\";",
        "evil*0= \"#a\";",
        "evil*0= \"\"a\";",
        "evil*0= \"!a\";",
        "evil*0= \"eVila\";",
        "evil*0= \"EVILa\";",
        "evil*0= \"ev_ila\";",
        "evil*0= \"ev ila\";",
        "evil*0= \"ev4ila\";",
        "evil*0= \"ea\";",
        "evil*0= \" a\";",
        "evil*0= \"6a\";",
        "evil*0= \"_a\";",
        "evil*0= \"a\";",
        "evil*0=  \"evila\";",
        "evil*0=\"evila\";",
        "evil*00= \"evila\";",
        "evil*= \"evila\";",
        "~*0= \"evila\";",
        "}*0= \"evila\";",
        "|*0= \"evila\";",
        "{*0= \"evila\";",
        "`*0= \"evila\";",
        "^*0= \"evila\";",
        "\\*0= \"evila\";",
        "=*0= \"evila\";",
        ";*0= \"evila\";",
        ".*0= \"evila\";",
        "-*0= \"evila\";",
        "+*0= \"evila\";",
        "**0= \"evila\";",
        "'*0= \"evila\";",
        "&*0= \"evila\";",
        "%*0= \"evila\";",
        "$*0= \"evila\";",
        "#*0= \"evila\";",
        "\"*0= \"evila\";",
        "!*0= \"evila\";",
        "eVil*0= \"evila\";",
        "EVIL*0= \"evila\";",
        "ev_il*0= \"evila\";",
        "ev il*0= \"evila\";",
        "ev4il*0= \"evila\";",
        "e*0= \"evila\";",
        " *0= \"evila\";",
        "6*0= \"evila\";",
        "_*0= \"evila\";",
        "*0= \"evila\";",
        "*=",
        "*=\"a\"",
        "evil*0=evil",
        "evil*0= \"evila\";"
      ]
    },
    {
      "regex": "Couldn't find",
      "exceptionStackTrace": null,
      "matches": ["Couldn't find"]
    },
    {
      "regex": "^test-job-",
      "exceptionStackTrace": null,
      "matches": ["test-job-"]
    },
    {
      "regex": "failed accepting client connection",
      "exceptionStackTrace": null,
      "matches": ["failed accepting client connection"]
    },
    {
      "regex": "^disable_portfaults.*",
      "exceptionStackTrace": null,
      "matches": [
        "disable_portfaultseVil",
        "disable_portfaultsEVIL",
        "disable_portfaultsev_il",
        "disable_portfaultsev il",
        "disable_portfaultsev4il",
        "disable_portfaultse",
        "disable_portfaults ",
        "disable_portfaults6",
        "disable_portfaults_",
        "disable_portfaults",
        "disable_portfaultsevil"
      ]
    },
    {
      "regex": "^\\Q$dir\\E([/\\\\]?.*)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\Q"
      },
      "matches": []
    },
    {
      "regex": "\\e\\[31mE\\e\\[0m\\n\\n\\e\\[31mError:\\nTestUnitReporterTest::ExampleTest#woot:\\nArgumentError: wups\\n    \\n\\e\\[0m",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\e"
      },
      "matches": []
    },
    {
      "regex": "EGG_SESS=[\\w-]+",
      "exceptionStackTrace": null,
      "matches": [
        "EGG_SESS==",
        "EGG_SESS=-",
        "EGG_SESS=eVil",
        "EGG_SESS=EVIL",
        "EGG_SESS=ev_il",
        "EGG_SESS=ev il",
        "EGG_SESS=ev4il",
        "EGG_SESS=e",
        "EGG_SESS= ",
        "EGG_SESS=6",
        "EGG_SESS=_",
        "EGG_SESS=",
        "EGG_SESS=evil"
      ]
    },
    {
      "regex": "(?P<msec>^0?\\.\\d+) (?P<sec>\\d+)$",
      "exceptionStackTrace": null,
      "matches": ["0.0 00", "0.0 ", "0.00 0", "0. 0", "00.0 0", ".0 0", "0.0 0"]
    },
    {
      "regex": "<div class=\"shit-spider\"[\\s\\S]+?<\\/div>",
      "exceptionStackTrace": null,
      "matches": [
        "<div class=\"shit-spider\"></div>",
        "<div class=\"shit-spider\"=</div>",
        "<div class=\"shit-spider\"<</div>",
        "<div class=\"shit-spider\"/</div>",
        "<div class=\"shit-spider\"-</div>",
        "<div class=\"shit-spider\"\"</div>",
        "<div class=\"shit-spider\"eVil</div>",
        "<div class=\"shit-spider\"EVIL</div>",
        "<div class=\"shit-spider\"ev_il</div>",
        "<div class=\"shit-spider\"ev il</div>",
        "<div class=\"shit-spider\"ev4il</div>",
        "<div class=\"shit-spider\"e</div>",
        "<div class=\"shit-spider\" </div>",
        "<div class=\"shit-spider\"6</div>",
        "<div class=\"shit-spider\"_</div>",
        "<div class=\"shit-spider\"</div>",
        "<div class=\"shit-spider\"evil</div>"
      ]
    },
    {
      "regex": "[0-9a-f]{12}4[0-9a-f]{19}",
      "exceptionStackTrace": null,
      "matches": [
        "aaaaaaaaaaaa4aaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaa4aaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaa4gaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaa40aaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaa4aaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaa4aaaaaaaaaaaaaaaaaaa",
        "gaaaaaaaaaaa4aaaaaaaaaaaaaaaaaaa",
        "0aaaaaaaaaaa4aaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaa4aaaaaaaaaaaaaaaaaaa"
      ]
    },
    {
      "regex": "^<A HREF=\"manual.html#pdf-(.+)\">\\1</A>",
      "exceptionStackTrace": null,
      "matches": [
        "<A HREF=\"manualahtml#pdf->\">evil</A>",
        "<A HREF=\"manualahtml#pdf-=\">evil</A>",
        "<A HREF=\"manualahtml#pdf-<\">evil</A>",
        "<A HREF=\"manualahtml#pdf-/\">evil</A>",
        "<A HREF=\"manualahtml#pdf--\">evil</A>",
        "<A HREF=\"manualahtml#pdf-#\">evil</A>",
        "<A HREF=\"manualahtml#pdf-\"\">evil</A>",
        "<A HREF=\"manualahtml#pdf-eVil\">evil</A>",
        "<A HREF=\"manualahtml#pdf-EVIL\">evil</A>",
        "<A HREF=\"manualahtml#pdf-ev_il\">evil</A>",
        "<A HREF=\"manualahtml#pdf-ev il\">evil</A>",
        "<A HREF=\"manualahtml#pdf-ev4il\">evil</A>",
        "<A HREF=\"manualahtml#pdf-e\">evil</A>",
        "<A HREF=\"manualahtml#pdf- \">evil</A>",
        "<A HREF=\"manualahtml#pdf-6\">evil</A>",
        "<A HREF=\"manualahtml#pdf-_\">evil</A>",
        "<A HREF=\"manualahtml#pdf-\">evil</A>",
        "<A HREF=\"manualAhtml#pdf-evil\">evil</A>",
        "<A HREF=\"manual>html#pdf-evil\">evil</A>",
        "<A HREF=\"manual=html#pdf-evil\">evil</A>",
        "<A HREF=\"manual<html#pdf-evil\">evil</A>",
        "<A HREF=\"manual0html#pdf-evil\">evil</A>",
        "<A HREF=\"manual/html#pdf-evil\">evil</A>",
        "<A HREF=\"manual-html#pdf-evil\">evil</A>",
        "<A HREF=\"manual#html#pdf-evil\">evil</A>",
        "<A HREF=\"manual\"html#pdf-evil\">evil</A>",
        "<A HREF=\"manual html#pdf-evil\">evil</A>",
        "<A HREF=\"manualahtml#pdf-evil\">evil</A>"
      ]
    },
    {
      "regex": ".pes$",
      "exceptionStackTrace": null,
      "matches": ["_pes", "Apes", "0pes", " pes", "apes"]
    },
    {
      "regex": "\\bhadn'?t\\b",
      "exceptionStackTrace": null,
      "matches": ["hadn''t", "hadnt", "hadn't"]
    },
    {
      "regex": "([a-zA-Z0-9_\\.\\-\\/\\']+)",
      "exceptionStackTrace": null,
      "matches": [
        "/",
        ".",
        "-",
        "'",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "\\s+\\d+\\s+\\d+\\s+(\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        " 0 0 00",
        " 0 0 ",
        " 0 0  0",
        " 0 00",
        " 0 00 0",
        " 0  0",
        " 0  0 0",
        " 00 0",
        " 00 0 0",
        "  0 0",
        "  0 0 0",
        "0 0 0",
        " 0 0 0"
      ]
    },
    {
      "regex": "(?i:\\b(Contents|StaticObjects|ClientCertificate|Cookies|Form|QueryString|ServerVariables)\\b)",
      "exceptionStackTrace": null,
      "matches": [""]
    },
    {
      "regex": "(item|head)(\\d+)",
      "exceptionStackTrace": null,
      "matches": ["item00", "item", "head0", "item0"]
    },
    {
      "regex": "^image::?(.*?)\\[(.*?)\\]$",
      "exceptionStackTrace": null,
      "matches": [
        "image::evil[]]",
        "image::evil[[]",
        "image::evil[:]",
        "image::evil[eVil]",
        "image::evil[EVIL]",
        "image::evil[ev_il]",
        "image::evil[ev il]",
        "image::evil[ev4il]",
        "image::evil[e]",
        "image::evil[ ]",
        "image::evil[6]",
        "image::evil[_]",
        "image::evil[]",
        "image::][evil]",
        "image::[[evil]",
        "image:::[evil]",
        "image::eVil[evil]",
        "image::EVIL[evil]",
        "image::ev_il[evil]",
        "image::ev il[evil]",
        "image::ev4il[evil]",
        "image::e[evil]",
        "image:: [evil]",
        "image::6[evil]",
        "image::_[evil]",
        "image::[evil]",
        "image:::evil[evil]",
        "image:evil[evil]",
        "image:[]",
        "image::evil[evil]"
      ]
    },
    {
      "regex": "^pre\\.cmd\\.(\\d+)$",
      "exceptionStackTrace": null,
      "matches": ["pre.cmd.00", "pre.cmd.", "pre.cmd.0"]
    },
    {
      "regex": "^\\s*\\\\l\\s+(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        " \\l \\",
        " \\l eVil",
        " \\l EVIL",
        " \\l ev_il",
        " \\l ev il",
        " \\l ev4il",
        " \\l e",
        " \\l  ",
        " \\l 6",
        " \\l _",
        " \\l ",
        " \\l  evil",
        " \\levil",
        "  \\l evil",
        "\\l evil",
        "\\l ",
        " \\l evil"
      ]
    },
    {
      "regex": "^ *write-dashrep-definitions-listed-in-phrase-to-file +([^ \\[\\]]+) +([^ \\[\\]]+) *$",
      "exceptionStackTrace": null,
      "matches": [
        " write-dashrep-definitions-listed-in-phrase-to-file evil evil  ",
        " write-dashrep-definitions-listed-in-phrase-to-file evil evil",
        " write-dashrep-definitions-listed-in-phrase-to-file evil ] ",
        " write-dashrep-definitions-listed-in-phrase-to-file evil [ ",
        " write-dashrep-definitions-listed-in-phrase-to-file evil - ",
        " write-dashrep-definitions-listed-in-phrase-to-file evil eVil ",
        " write-dashrep-definitions-listed-in-phrase-to-file evil EVIL ",
        " write-dashrep-definitions-listed-in-phrase-to-file evil ev_il ",
        " write-dashrep-definitions-listed-in-phrase-to-file evil ev il ",
        " write-dashrep-definitions-listed-in-phrase-to-file evil ev4il ",
        " write-dashrep-definitions-listed-in-phrase-to-file evil e ",
        " write-dashrep-definitions-listed-in-phrase-to-file evil   ",
        " write-dashrep-definitions-listed-in-phrase-to-file evil 6 ",
        " write-dashrep-definitions-listed-in-phrase-to-file evil _ ",
        " write-dashrep-definitions-listed-in-phrase-to-file evil  ",
        " write-dashrep-definitions-listed-in-phrase-to-file evil  evil ",
        " write-dashrep-definitions-listed-in-phrase-to-file evilevil ",
        " write-dashrep-definitions-listed-in-phrase-to-file ] evil ",
        " write-dashrep-definitions-listed-in-phrase-to-file [ evil ",
        " write-dashrep-definitions-listed-in-phrase-to-file - evil ",
        " write-dashrep-definitions-listed-in-phrase-to-file eVil evil ",
        " write-dashrep-definitions-listed-in-phrase-to-file EVIL evil ",
        " write-dashrep-definitions-listed-in-phrase-to-file ev_il evil ",
        " write-dashrep-definitions-listed-in-phrase-to-file ev il evil ",
        " write-dashrep-definitions-listed-in-phrase-to-file ev4il evil ",
        " write-dashrep-definitions-listed-in-phrase-to-file e evil ",
        " write-dashrep-definitions-listed-in-phrase-to-file   evil ",
        " write-dashrep-definitions-listed-in-phrase-to-file 6 evil ",
        " write-dashrep-definitions-listed-in-phrase-to-file _ evil ",
        " write-dashrep-definitions-listed-in-phrase-to-file  evil ",
        " write-dashrep-definitions-listed-in-phrase-to-file  evil evil ",
        " write-dashrep-definitions-listed-in-phrase-to-fileevil evil ",
        "  write-dashrep-definitions-listed-in-phrase-to-file evil evil ",
        "write-dashrep-definitions-listed-in-phrase-to-file evil evil ",
        "write-dashrep-definitions-listed-in-phrase-to-file evil evil",
        " write-dashrep-definitions-listed-in-phrase-to-file evil evil "
      ]
    },
    {
      "regex": "\\[\\*\\*.\\*\\*\\]",
      "exceptionStackTrace": null,
      "matches": [
        "[**]**]",
        "[**[**]",
        "[**A**]",
        "[**0**]",
        "[*****]",
        "[** **]",
        "[**a**]"
      ]
    },
    {
      "regex": "(\\w)lphabet|umbers?|atakana|paces?|unctuation",
      "exceptionStackTrace": null,
      "matches": [
        "pacess",
        "umberss",
        "_lphabet",
        "Alphabet",
        "0lphabet",
        "pace",
        "umber",
        "unctuation",
        "paces",
        "atakana",
        "umbers",
        "alphabet"
      ]
    },
    {
      "regex": "^SDBM|ODBM|NDBM",
      "exceptionStackTrace": null,
      "matches": ["NDBM", "ODBM", "SDBM"]
    },
    { "regex": "$tbl_tab", "exceptionStackTrace": null, "matches": ["tbl_tab"] },
    {
      "regex": "^[a-zA-Z0-9_.@]{3,32}$",
      "exceptionStackTrace": null,
      "matches": [
        "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
        "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
        "@@",
        "a@@",
        "_@@",
        "A@@",
        "0@@",
        ".@@",
        "@@@"
      ]
    },
    {
      "regex": " \\A trailer\\s* ",
      "exceptionStackTrace": null,
      "matches": ["  trailer   ", "  trailer ", "  trailer  "]
    },
    {
      "regex": "main card header",
      "exceptionStackTrace": null,
      "matches": ["main card header"]
    },
    {
      "regex": "^\\$[{\\w]",
      "exceptionStackTrace": null,
      "matches": ["$a", "$_", "$A", "$0", "${"]
    },
    {
      "regex": "\\-\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "((?:^|\\n)>*)([^\\n]*)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^\\s*[^@\\s]+@[^@\\s]+\\.[^@\\s]+\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        " evil@evil.evil  ",
        " evil@evil.evil",
        " evil@evil.@ ",
        " evil@evil.. ",
        " evil@evil.eVil ",
        " evil@evil.EVIL ",
        " evil@evil.ev_il ",
        " evil@evil.ev il ",
        " evil@evil.ev4il ",
        " evil@evil.e ",
        " evil@evil.  ",
        " evil@evil.6 ",
        " evil@evil._ ",
        " evil@evil. ",
        " evil@@.evil ",
        " evil@..evil ",
        " evil@eVil.evil ",
        " evil@EVIL.evil ",
        " evil@ev_il.evil ",
        " evil@ev il.evil ",
        " evil@ev4il.evil ",
        " evil@e.evil ",
        " evil@ .evil ",
        " evil@6.evil ",
        " evil@_.evil ",
        " evil@.evil ",
        " @@evil.evil ",
        " .@evil.evil ",
        " eVil@evil.evil ",
        " EVIL@evil.evil ",
        " ev_il@evil.evil ",
        " ev il@evil.evil ",
        " ev4il@evil.evil ",
        " e@evil.evil ",
        "  @evil.evil ",
        " 6@evil.evil ",
        " _@evil.evil ",
        " @evil.evil ",
        "  evil@evil.evil ",
        "evil@evil.evil ",
        "evil@evil.evil",
        " evil@evil.evil "
      ]
    },
    {
      "regex": "\\/artists\\/Is%252FIs",
      "exceptionStackTrace": null,
      "matches": ["/artists/Is%252FIs"]
    },
    {
      "regex": "^\n                (?:\n                    var(?:char2?|binary) |\n                    (?:char(?:acter(?:\\s+varying)?)?) |\n                    binary |\n                    (?:tiny|medium|long)?blob |\n                    (?:tiny|medium|long)?text |\n                    clob |\n                    comment |\n                    bytea\n                )\n            $",
      "exceptionStackTrace": null,
      "matches": [
        "\n                \n                    tinytinytext \n            ",
        "\n                \n                    tinytinyblob \n            ",
        "\n                \n                    character varyingacter varying \n            ",
        "\n                \n                    character varying varying \n            ",
        "\n                \n                    character \n            ",
        "\n                \n                    character  varying \n            ",
        "\n                \n                    charactervarying \n            ",
        "\n                \n                    varchar22 \n            ",
        "\n                \n                    text \n            ",
        "\n                \n                    blob \n            ",
        "\n                \n                    char \n            ",
        "\n                \n                    varchar \n            ",
        "\n                \n                    bytea\n                \n            ",
        "\n                \n                    comment \n            ",
        "\n                \n                    clob \n            ",
        "\n                \n                    longtext \n            ",
        "\n                \n                    mediumtext \n            ",
        "\n                \n                    tinytext \n            ",
        "\n                \n                    longblob \n            ",
        "\n                \n                    mediumblob \n            ",
        "\n                \n                    tinyblob \n            ",
        "\n                \n                    binary \n            ",
        "\n                \n                    character varying \n            ",
        "\n                \n                    varbinary \n            ",
        "\n                \n                    varchar2 \n            "
      ]
    },
    {
      "regex": "^exports\\.(\\w+)\\s*=\\s*[\\w.]+;$",
      "exceptionStackTrace": null,
      "matches": [
        "exports.evil = =;",
        "exports.evil = ;;",
        "exports.evil = .;",
        "exports.evil = eVil;",
        "exports.evil = EVIL;",
        "exports.evil = ev_il;",
        "exports.evil = ev il;",
        "exports.evil = ev4il;",
        "exports.evil = e;",
        "exports.evil =  ;",
        "exports.evil = 6;",
        "exports.evil = _;",
        "exports.evil = ;",
        "exports.evil =  evil;",
        "exports.evil =evil;",
        "exports.evil  = evil;",
        "exports.evil= evil;",
        "exports.eVil = evil;",
        "exports.EVIL = evil;",
        "exports.ev_il = evil;",
        "exports.ev il = evil;",
        "exports.ev4il = evil;",
        "exports.e = evil;",
        "exports.  = evil;",
        "exports.6 = evil;",
        "exports._ = evil;",
        "exports. = evil;",
        "exports.evil=evil;",
        "exports.evil = evil;"
      ]
    },
    {
      "regex": "\\[\\\"\\.\\((L_[A-Z_+]+)\\)\\.\\\"\\]",
      "exceptionStackTrace": null,
      "matches": [
        "[\".(L_]).\"]",
        "[\".(L_[).\"]",
        "[\".(L_.).\"]",
        "[\".(L_+).\"]",
        "[\".(L_)).\"]",
        "[\".(L_().\"]",
        "[\".(L_\").\"]",
        "[\".(L_eVil).\"]",
        "[\".(L_EVIL).\"]",
        "[\".(L_ev_il).\"]",
        "[\".(L_ev il).\"]",
        "[\".(L_ev4il).\"]",
        "[\".(L_e).\"]",
        "[\".(L_ ).\"]",
        "[\".(L_6).\"]",
        "[\".(L__).\"]",
        "[\".(L_).\"]",
        "[\".(L_evil).\"]"
      ]
    },
    {
      "regex": "/(\\d+)(?=/|\\?|$)",
      "exceptionStackTrace": null,
      "matches": ["/00", "/", "/0"]
    },
    {
      "regex": ".* (\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}.\\d{1,3}).*",
      "exceptionStackTrace": null,
      "matches": [
        "evil 0.0.0a0.",
        "evil 0.0.0a0eVil",
        "evil 0.0.0a0EVIL",
        "evil 0.0.0a0ev_il",
        "evil 0.0.0a0ev il",
        "evil 0.0.0a0ev4il",
        "evil 0.0.0a0e",
        "evil 0.0.0a0 ",
        "evil 0.0.0a06",
        "evil 0.0.0a0_",
        "evil 0.0.0a0",
        "evil 0.0.0a0000evil",
        "evil 0.0.0a000evil",
        "evil 0.0.0aevil",
        "evil 0.0.0A0evil",
        "evil 0.0.000evil",
        "evil 0.0.0.0evil",
        "evil 0.0.0 0evil",
        "evil 0.0.0000a0evil",
        "evil 0.0.000a0evil",
        "evil 0.0.a0evil",
        "evil 0.0000.0a0evil",
        "evil 0.000.0a0evil",
        "evil 0..0a0evil",
        "evil 0000.0.0a0evil",
        "evil 000.0.0a0evil",
        "evil .0.0a0evil",
        ". 0.0.0a0evil",
        "eVil 0.0.0a0evil",
        "EVIL 0.0.0a0evil",
        "ev_il 0.0.0a0evil",
        "ev il 0.0.0a0evil",
        "ev4il 0.0.0a0evil",
        "e 0.0.0a0evil",
        "  0.0.0a0evil",
        "6 0.0.0a0evil",
        "_ 0.0.0a0evil",
        " 0.0.0a0evil",
        " 0.0.0a0",
        "evil 0.0.0a0evil"
      ]
    },
    {
      "regex": "\\.(p|P)(d|D)(f|F)$",
      "exceptionStackTrace": null,
      "matches": [".Pdf", ".pDf", ".pdF", ".pdf"]
    },
    {
      "regex": "^[\\u0020-\\u007e\\u0080-\\u00ff]+$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 128"
      },
      "matches": []
    },
    {
      "regex": "END Transmitting.*",
      "exceptionStackTrace": null,
      "matches": [
        "END TransmittingeVil",
        "END TransmittingEVIL",
        "END Transmittingev_il",
        "END Transmittingev il",
        "END Transmittingev4il",
        "END Transmittinge",
        "END Transmitting ",
        "END Transmitting6",
        "END Transmitting_",
        "END Transmitting",
        "END Transmittingevil"
      ]
    },
    { "regex": "^([}\\]])$", "exceptionStackTrace": null, "matches": ["}", "]"] },
    {
      "regex": "^(\\d\\d):(\\d\\d)(:(\\d\\d(\\.\\d+)?))?",
      "exceptionStackTrace": null,
      "matches": [
        "00:00:00.0:00.0",
        "00:00:00.0.0",
        "00:00:00",
        "00:00:00.00",
        "00:00:00.",
        "00:00",
        "00:00:00.0"
      ]
    },
    {
      "regex": "^(?:\"([^\"]*)\"\u3068\u3044\u3046\u5165\u529b\u65b9\u6cd5\u3067)?\"([^\"]*)\"\u3068\u5165\u529b(?:\u3057\u305f\u3089)?$",
      "exceptionStackTrace": null,
      "matches": [
        "\"evil\"\u3068\u3044\u3046\u5165\u529b\u65b9\u6cd5\u3067\"evil\"\u3068\u5165\u529b\u3057\u305f\u3089\u3057\u305f\u3089",
        "\"evil\"\u3068\u3044\u3046\u5165\u529b\u65b9\u6cd5\u3067\"evil\"\u3068\u5165\u529b",
        "\"evil\"\u3068\u3044\u3046\u5165\u529b\u65b9\u6cd5\u3067\"\"\"\u3068\u5165\u529b\u3057\u305f\u3089",
        "\"evil\"\u3068\u3044\u3046\u5165\u529b\u65b9\u6cd5\u3067\"eVil\"\u3068\u5165\u529b\u3057\u305f\u3089",
        "\"evil\"\u3068\u3044\u3046\u5165\u529b\u65b9\u6cd5\u3067\"EVIL\"\u3068\u5165\u529b\u3057\u305f\u3089",
        "\"evil\"\u3068\u3044\u3046\u5165\u529b\u65b9\u6cd5\u3067\"ev_il\"\u3068\u5165\u529b\u3057\u305f\u3089",
        "\"evil\"\u3068\u3044\u3046\u5165\u529b\u65b9\u6cd5\u3067\"ev il\"\u3068\u5165\u529b\u3057\u305f\u3089",
        "\"evil\"\u3068\u3044\u3046\u5165\u529b\u65b9\u6cd5\u3067\"ev4il\"\u3068\u5165\u529b\u3057\u305f\u3089",
        "\"evil\"\u3068\u3044\u3046\u5165\u529b\u65b9\u6cd5\u3067\"e\"\u3068\u5165\u529b\u3057\u305f\u3089",
        "\"evil\"\u3068\u3044\u3046\u5165\u529b\u65b9\u6cd5\u3067\" \"\u3068\u5165\u529b\u3057\u305f\u3089",
        "\"evil\"\u3068\u3044\u3046\u5165\u529b\u65b9\u6cd5\u3067\"6\"\u3068\u5165\u529b\u3057\u305f\u3089",
        "\"evil\"\u3068\u3044\u3046\u5165\u529b\u65b9\u6cd5\u3067\"_\"\u3068\u5165\u529b\u3057\u305f\u3089",
        "\"evil\"\u3068\u3044\u3046\u5165\u529b\u65b9\u6cd5\u3067\"\"\u3068\u5165\u529b\u3057\u305f\u3089",
        "\"evil\"\u3068\u3044\u3046\u5165\u529b\u65b9\u6cd5\u3067\"evil\"\u3068\u3044\u3046\u5165\u529b\u65b9\u6cd5\u3067\"evil\"\u3068\u5165\u529b\u3057\u305f\u3089",
        "\"evil\"\u3068\u5165\u529b\u3057\u305f\u3089",
        "\"\"\"\u3068\u3044\u3046\u5165\u529b\u65b9\u6cd5\u3067\"evil\"\u3068\u5165\u529b\u3057\u305f\u3089",
        "\"eVil\"\u3068\u3044\u3046\u5165\u529b\u65b9\u6cd5\u3067\"evil\"\u3068\u5165\u529b\u3057\u305f\u3089",
        "\"EVIL\"\u3068\u3044\u3046\u5165\u529b\u65b9\u6cd5\u3067\"evil\"\u3068\u5165\u529b\u3057\u305f\u3089",
        "\"ev_il\"\u3068\u3044\u3046\u5165\u529b\u65b9\u6cd5\u3067\"evil\"\u3068\u5165\u529b\u3057\u305f\u3089",
        "\"ev il\"\u3068\u3044\u3046\u5165\u529b\u65b9\u6cd5\u3067\"evil\"\u3068\u5165\u529b\u3057\u305f\u3089",
        "\"ev4il\"\u3068\u3044\u3046\u5165\u529b\u65b9\u6cd5\u3067\"evil\"\u3068\u5165\u529b\u3057\u305f\u3089",
        "\"e\"\u3068\u3044\u3046\u5165\u529b\u65b9\u6cd5\u3067\"evil\"\u3068\u5165\u529b\u3057\u305f\u3089",
        "\" \"\u3068\u3044\u3046\u5165\u529b\u65b9\u6cd5\u3067\"evil\"\u3068\u5165\u529b\u3057\u305f\u3089",
        "\"6\"\u3068\u3044\u3046\u5165\u529b\u65b9\u6cd5\u3067\"evil\"\u3068\u5165\u529b\u3057\u305f\u3089",
        "\"_\"\u3068\u3044\u3046\u5165\u529b\u65b9\u6cd5\u3067\"evil\"\u3068\u5165\u529b\u3057\u305f\u3089",
        "\"\"\u3068\u3044\u3046\u5165\u529b\u65b9\u6cd5\u3067\"evil\"\u3068\u5165\u529b\u3057\u305f\u3089",
        "\"\"\u3068\u5165\u529b",
        "\"evil\"\u3068\u3044\u3046\u5165\u529b\u65b9\u6cd5\u3067\"evil\"\u3068\u5165\u529b\u3057\u305f\u3089"
      ]
    },
    {
      "regex": "^http://www\\.w3\\.org/1999/xhtml/vocab\\#\n\t\t\t\t\t\t\t\t\t\t(alternate|appendix|bookmark|cite|\n\t\t\t\t\t\t\t\t\t\tchapter|contents|copyright|first|glossary|help|icon|\n\t\t\t\t\t\t\t\t\t\tindex|last|license|meta|next|p3pv1|prev|role|section|\n\t\t\t\t\t\t\t\t\t\tstylesheet|subsection|start|top|up)$",
      "exceptionStackTrace": null,
      "matches": [
        "http://www.w3.org/1999/xhtml/vocab#\n\t\t\t\t\t\t\t\t\t\tup",
        "http://www.w3.org/1999/xhtml/vocab#\n\t\t\t\t\t\t\t\t\t\ttop",
        "http://www.w3.org/1999/xhtml/vocab#\n\t\t\t\t\t\t\t\t\t\tstart",
        "http://www.w3.org/1999/xhtml/vocab#\n\t\t\t\t\t\t\t\t\t\tsubsection",
        "http://www.w3.org/1999/xhtml/vocab#\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tstylesheet",
        "http://www.w3.org/1999/xhtml/vocab#\n\t\t\t\t\t\t\t\t\t\tsection",
        "http://www.w3.org/1999/xhtml/vocab#\n\t\t\t\t\t\t\t\t\t\trole",
        "http://www.w3.org/1999/xhtml/vocab#\n\t\t\t\t\t\t\t\t\t\tprev",
        "http://www.w3.org/1999/xhtml/vocab#\n\t\t\t\t\t\t\t\t\t\tp3pv1",
        "http://www.w3.org/1999/xhtml/vocab#\n\t\t\t\t\t\t\t\t\t\tnext",
        "http://www.w3.org/1999/xhtml/vocab#\n\t\t\t\t\t\t\t\t\t\tmeta",
        "http://www.w3.org/1999/xhtml/vocab#\n\t\t\t\t\t\t\t\t\t\tlicense",
        "http://www.w3.org/1999/xhtml/vocab#\n\t\t\t\t\t\t\t\t\t\tlast",
        "http://www.w3.org/1999/xhtml/vocab#\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tindex",
        "http://www.w3.org/1999/xhtml/vocab#\n\t\t\t\t\t\t\t\t\t\ticon",
        "http://www.w3.org/1999/xhtml/vocab#\n\t\t\t\t\t\t\t\t\t\thelp",
        "http://www.w3.org/1999/xhtml/vocab#\n\t\t\t\t\t\t\t\t\t\tglossary",
        "http://www.w3.org/1999/xhtml/vocab#\n\t\t\t\t\t\t\t\t\t\tfirst",
        "http://www.w3.org/1999/xhtml/vocab#\n\t\t\t\t\t\t\t\t\t\tcopyright",
        "http://www.w3.org/1999/xhtml/vocab#\n\t\t\t\t\t\t\t\t\t\tcontents",
        "http://www.w3.org/1999/xhtml/vocab#\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tchapter",
        "http://www.w3.org/1999/xhtml/vocab#\n\t\t\t\t\t\t\t\t\t\tcite",
        "http://www.w3.org/1999/xhtml/vocab#\n\t\t\t\t\t\t\t\t\t\tbookmark",
        "http://www.w3.org/1999/xhtml/vocab#\n\t\t\t\t\t\t\t\t\t\tappendix",
        "http://www.w3.org/1999/xhtml/vocab#\n\t\t\t\t\t\t\t\t\t\talternate"
      ]
    },
    {
      "regex": "sport=(\\d+).*dport=2379",
      "exceptionStackTrace": null,
      "matches": [
        "sport=0=dport=2379",
        "sport=0eVildport=2379",
        "sport=0EVILdport=2379",
        "sport=0ev_ildport=2379",
        "sport=0ev ildport=2379",
        "sport=0ev4ildport=2379",
        "sport=0edport=2379",
        "sport=0 dport=2379",
        "sport=06dport=2379",
        "sport=0_dport=2379",
        "sport=00evildport=2379",
        "sport=evildport=2379",
        "sport=0dport=2379",
        "sport=0evildport=2379"
      ]
    },
    {
      "regex": "Timestamp array must have the same size as the coordinates array",
      "exceptionStackTrace": null,
      "matches": [
        "Timestamp array must have the same size as the coordinates array"
      ]
    },
    {
      "regex": "^HTTP/(?<version>\\d(?:\\.\\d)?)\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<v"
      },
      "matches": []
    },
    {
      "regex": "\\u202f",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 8239"
      },
      "matches": []
    },
    {
      "regex": "(?:^|,)(?:disabled-by-default-)?v8(?:[,.]|$)",
      "exceptionStackTrace": null,
      "matches": [
        "disabled-by-default-v8,",
        "disabled-by-default-disabled-by-default-v8.",
        ",v8.",
        "v8",
        "v8.",
        ",disabled-by-default-v8.",
        "disabled-by-default-v8",
        "disabled-by-default-v8."
      ]
    },
    {
      "regex": "/phylows/$section/(.+?):(.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "/phylows/section/evil::",
        "/phylows/section/evil:/",
        "/phylows/section/evil:eVil",
        "/phylows/section/evil:EVIL",
        "/phylows/section/evil:ev_il",
        "/phylows/section/evil:ev il",
        "/phylows/section/evil:ev4il",
        "/phylows/section/evil:e",
        "/phylows/section/evil: ",
        "/phylows/section/evil:6",
        "/phylows/section/evil:_",
        "/phylows/section/evil:",
        "/phylows/section/::evil",
        "/phylows/section//:evil",
        "/phylows/section/eVil:evil",
        "/phylows/section/EVIL:evil",
        "/phylows/section/ev_il:evil",
        "/phylows/section/ev il:evil",
        "/phylows/section/ev4il:evil",
        "/phylows/section/e:evil",
        "/phylows/section/ :evil",
        "/phylows/section/6:evil",
        "/phylows/section/_:evil",
        "/phylows/section/:evil",
        "/phylows/section/evil:evil"
      ]
    },
    {
      "regex": "<wi num=\".+?\" entity=\"(.+?)\">(.+?)</wi>",
      "exceptionStackTrace": null,
      "matches": [
        "<wi num=\"evil\" entity=\"evil\">></wi>",
        "<wi num=\"evil\" entity=\"evil\">=</wi>",
        "<wi num=\"evil\" entity=\"evil\"><</wi>",
        "<wi num=\"evil\" entity=\"evil\">/</wi>",
        "<wi num=\"evil\" entity=\"evil\">\"</wi>",
        "<wi num=\"evil\" entity=\"evil\">eVil</wi>",
        "<wi num=\"evil\" entity=\"evil\">EVIL</wi>",
        "<wi num=\"evil\" entity=\"evil\">ev_il</wi>",
        "<wi num=\"evil\" entity=\"evil\">ev il</wi>",
        "<wi num=\"evil\" entity=\"evil\">ev4il</wi>",
        "<wi num=\"evil\" entity=\"evil\">e</wi>",
        "<wi num=\"evil\" entity=\"evil\"> </wi>",
        "<wi num=\"evil\" entity=\"evil\">6</wi>",
        "<wi num=\"evil\" entity=\"evil\">_</wi>",
        "<wi num=\"evil\" entity=\"evil\"></wi>",
        "<wi num=\"evil\" entity=\">\">evil</wi>",
        "<wi num=\"evil\" entity=\"=\">evil</wi>",
        "<wi num=\"evil\" entity=\"<\">evil</wi>",
        "<wi num=\"evil\" entity=\"/\">evil</wi>",
        "<wi num=\"evil\" entity=\"\"\">evil</wi>",
        "<wi num=\"evil\" entity=\"eVil\">evil</wi>",
        "<wi num=\"evil\" entity=\"EVIL\">evil</wi>",
        "<wi num=\"evil\" entity=\"ev_il\">evil</wi>",
        "<wi num=\"evil\" entity=\"ev il\">evil</wi>",
        "<wi num=\"evil\" entity=\"ev4il\">evil</wi>",
        "<wi num=\"evil\" entity=\"e\">evil</wi>",
        "<wi num=\"evil\" entity=\" \">evil</wi>",
        "<wi num=\"evil\" entity=\"6\">evil</wi>",
        "<wi num=\"evil\" entity=\"_\">evil</wi>",
        "<wi num=\"evil\" entity=\"\">evil</wi>",
        "<wi num=\">\" entity=\"evil\">evil</wi>",
        "<wi num=\"=\" entity=\"evil\">evil</wi>",
        "<wi num=\"<\" entity=\"evil\">evil</wi>",
        "<wi num=\"/\" entity=\"evil\">evil</wi>",
        "<wi num=\"\"\" entity=\"evil\">evil</wi>",
        "<wi num=\"eVil\" entity=\"evil\">evil</wi>",
        "<wi num=\"EVIL\" entity=\"evil\">evil</wi>",
        "<wi num=\"ev_il\" entity=\"evil\">evil</wi>",
        "<wi num=\"ev il\" entity=\"evil\">evil</wi>",
        "<wi num=\"ev4il\" entity=\"evil\">evil</wi>",
        "<wi num=\"e\" entity=\"evil\">evil</wi>",
        "<wi num=\" \" entity=\"evil\">evil</wi>",
        "<wi num=\"6\" entity=\"evil\">evil</wi>",
        "<wi num=\"_\" entity=\"evil\">evil</wi>",
        "<wi num=\"\" entity=\"evil\">evil</wi>",
        "<wi num=\"evil\" entity=\"evil\">evil</wi>"
      ]
    },
    {
      "regex": "^\\s*Constructor\\.\\s*",
      "exceptionStackTrace": null,
      "matches": [
        " Constructor.  ",
        " Constructor.",
        "  Constructor. ",
        "Constructor. ",
        "Constructor.",
        " Constructor. "
      ]
    },
    {
      "regex": "comment><comment>##\t\t}<",
      "exceptionStackTrace": null,
      "matches": ["comment><comment>##\t\t}<"]
    },
    {
      "regex": ".*(backports\\/.*)",
      "exceptionStackTrace": null,
      "matches": [
        "evilbackports//",
        "evilbackports/eVil",
        "evilbackports/EVIL",
        "evilbackports/ev_il",
        "evilbackports/ev il",
        "evilbackports/ev4il",
        "evilbackports/e",
        "evilbackports/ ",
        "evilbackports/6",
        "evilbackports/_",
        "evilbackports/",
        "/backports/evil",
        "eVilbackports/evil",
        "EVILbackports/evil",
        "ev_ilbackports/evil",
        "ev ilbackports/evil",
        "ev4ilbackports/evil",
        "ebackports/evil",
        " backports/evil",
        "6backports/evil",
        "_backports/evil",
        "backports/evil",
        "backports/",
        "evilbackports/evil"
      ]
    },
    {
      "regex": "\\{\\{/listing\\}\\}",
      "exceptionStackTrace": null,
      "matches": ["{{/listing}}"]
    },
    {
      "regex": "^\\[if\\s*([^\\]]*)\\]>\\s*(?:<!)?$",
      "exceptionStackTrace": null,
      "matches": [
        "[if evil]> <!<!",
        "[if evil]> ",
        "[if evil]>  <!",
        "[if evil]><!",
        "[if ]]> <!",
        "[if []> <!",
        "[if >]> <!",
        "[if <]> <!",
        "[if !]> <!",
        "[if eVil]> <!",
        "[if EVIL]> <!",
        "[if ev_il]> <!",
        "[if ev il]> <!",
        "[if ev4il]> <!",
        "[if e]> <!",
        "[if  ]> <!",
        "[if 6]> <!",
        "[if _]> <!",
        "[if ]> <!",
        "[if  evil]> <!",
        "[ifevil]> <!",
        "[if]>",
        "[if evil]> <!"
      ]
    },
    {
      "regex": "^=(cut|head1)",
      "exceptionStackTrace": null,
      "matches": ["=head1", "=cut"]
    },
    {
      "regex": "^<(\\S+)>;rel=\"(\\S+)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "<evil>;rel=\">\"",
        "<evil>;rel=\"=\"",
        "<evil>;rel=\"<\"",
        "<evil>;rel=\";\"",
        "<evil>;rel=\"\"\"",
        "<evil>;rel=\"eVil\"",
        "<evil>;rel=\"EVIL\"",
        "<evil>;rel=\"ev_il\"",
        "<evil>;rel=\"ev il\"",
        "<evil>;rel=\"ev4il\"",
        "<evil>;rel=\"e\"",
        "<evil>;rel=\" \"",
        "<evil>;rel=\"6\"",
        "<evil>;rel=\"_\"",
        "<evil>;rel=\"\"",
        "<>>;rel=\"evil\"",
        "<=>;rel=\"evil\"",
        "<<>;rel=\"evil\"",
        "<;>;rel=\"evil\"",
        "<\">;rel=\"evil\"",
        "<eVil>;rel=\"evil\"",
        "<EVIL>;rel=\"evil\"",
        "<ev_il>;rel=\"evil\"",
        "<ev il>;rel=\"evil\"",
        "<ev4il>;rel=\"evil\"",
        "<e>;rel=\"evil\"",
        "< >;rel=\"evil\"",
        "<6>;rel=\"evil\"",
        "<_>;rel=\"evil\"",
        "<>;rel=\"evil\"",
        "<evil>;rel=\"evil\""
      ]
    },
    {
      "regex": "using \"magic\" compression",
      "exceptionStackTrace": null,
      "matches": ["using \"magic\" compression"]
    },
    {
      "regex": "^(2\\.|4\\.1)",
      "exceptionStackTrace": null,
      "matches": ["4.1", "2."]
    },
    {
      "regex": "(\"version\":\\s*\")[^\"]*",
      "exceptionStackTrace": null,
      "matches": [
        "\"version\": \":",
        "\"version\": \"\"",
        "\"version\": \"eVil",
        "\"version\": \"EVIL",
        "\"version\": \"ev_il",
        "\"version\": \"ev il",
        "\"version\": \"ev4il",
        "\"version\": \"e",
        "\"version\": \" ",
        "\"version\": \"6",
        "\"version\": \"_",
        "\"version\": \"",
        "\"version\":  \"evil",
        "\"version\":\"evil",
        "\"version\":\"",
        "\"version\": \"evil"
      ]
    },
    {
      "regex": "^\\s*\\/\\/\\/\\s*<reference\\s+types.+?\"react-scripts\".*\\/>.*(?:\\n|$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "$delimiter_pattern",
      "exceptionStackTrace": null,
      "matches": ["delimiter_pattern"]
    },
    {
      "regex": "------------- Standard Output ---------------$\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "\\W(XSkat\\WLicense)\\W",
      "exceptionStackTrace": null,
      "matches": [
        ";XSkat;Licensea",
        ";XSkat;License_",
        ";XSkat;LicenseA",
        ";XSkat;License0",
        ";XSkat;License ",
        ";XSkataLicense;",
        ";XSkat_License;",
        ";XSkatALicense;",
        ";XSkat0License;",
        ";XSkat License;",
        "aXSkat;License;",
        "_XSkat;License;",
        "AXSkat;License;",
        "0XSkat;License;",
        " XSkat;License;",
        ";XSkat;License;"
      ]
    },
    {
      "regex": "^(.*)\\.tpl$",
      "exceptionStackTrace": null,
      "matches": [
        "..tpl",
        "eVil.tpl",
        "EVIL.tpl",
        "ev_il.tpl",
        "ev il.tpl",
        "ev4il.tpl",
        "e.tpl",
        " .tpl",
        "6.tpl",
        "_.tpl",
        ".tpl",
        "evil.tpl"
      ]
    },
    {
      "regex": "No such plugin installed: .+ - update failed",
      "exceptionStackTrace": null,
      "matches": [
        "No such plugin installed: : - update failed",
        "No such plugin installed: - - update failed",
        "No such plugin installed: eVil - update failed",
        "No such plugin installed: EVIL - update failed",
        "No such plugin installed: ev_il - update failed",
        "No such plugin installed: ev il - update failed",
        "No such plugin installed: ev4il - update failed",
        "No such plugin installed: e - update failed",
        "No such plugin installed:   - update failed",
        "No such plugin installed: 6 - update failed",
        "No such plugin installed: _ - update failed",
        "No such plugin installed:  - update failed",
        "No such plugin installed: evil - update failed"
      ]
    },
    {
      "regex": "([\\$\\\"\\\\])",
      "exceptionStackTrace": null,
      "matches": ["$", "\"", "\\"]
    },
    {
      "regex": "\\( state (.*) \\)",
      "exceptionStackTrace": null,
      "matches": [
        "( state ) )",
        "( state ( )",
        "( state eVil )",
        "( state EVIL )",
        "( state ev_il )",
        "( state ev il )",
        "( state ev4il )",
        "( state e )",
        "( state   )",
        "( state 6 )",
        "( state _ )",
        "( state  )",
        "( state evil )"
      ]
    },
    { "regex": "irix", "exceptionStackTrace": null, "matches": ["irix"] },
    {
      "regex": "^[\\w]+-([\\d]+).([\\d]+).([\\d]+)([\\w.]+)?-.*\\.whl",
      "exceptionStackTrace": null,
      "matches": [
        "evil-0a0a0evil-..whl",
        "evil-0a0a0evil--.whl",
        "evil-0a0a0evil-eVil.whl",
        "evil-0a0a0evil-EVIL.whl",
        "evil-0a0a0evil-ev_il.whl",
        "evil-0a0a0evil-ev il.whl",
        "evil-0a0a0evil-ev4il.whl",
        "evil-0a0a0evil-e.whl",
        "evil-0a0a0evil- .whl",
        "evil-0a0a0evil-6.whl",
        "evil-0a0a0evil-_.whl",
        "evil-0a0a0evil-.whl",
        "evil-0a0a0evilevil-evil.whl",
        "evil-0a0a0.-evil.whl",
        "evil-0a0a0--evil.whl",
        "evil-0a0a0eVil-evil.whl",
        "evil-0a0a0EVIL-evil.whl",
        "evil-0a0a0ev_il-evil.whl",
        "evil-0a0a0ev il-evil.whl",
        "evil-0a0a0ev4il-evil.whl",
        "evil-0a0a0e-evil.whl",
        "evil-0a0a0 -evil.whl",
        "evil-0a0a06-evil.whl",
        "evil-0a0a0_-evil.whl",
        "evil-0a0a0-evil.whl",
        "evil-0a0a00evil-evil.whl",
        "evil-0a0aevil-evil.whl",
        "evil-0a0A0evil-evil.whl",
        "evil-0a000evil-evil.whl",
        "evil-0a0.0evil-evil.whl",
        "evil-0a0-0evil-evil.whl",
        "evil-0a0 0evil-evil.whl",
        "evil-0a00a0evil-evil.whl",
        "evil-0aa0evil-evil.whl",
        "evil-0A0a0evil-evil.whl",
        "evil-000a0evil-evil.whl",
        "evil-0.0a0evil-evil.whl",
        "evil-0-0a0evil-evil.whl",
        "evil-0 0a0evil-evil.whl",
        "evil-00a0a0evil-evil.whl",
        "evil-a0a0evil-evil.whl",
        "eVil-0a0a0evil-evil.whl",
        "EVIL-0a0a0evil-evil.whl",
        "ev_il-0a0a0evil-evil.whl",
        "ev il-0a0a0evil-evil.whl",
        "ev4il-0a0a0evil-evil.whl",
        "e-0a0a0evil-evil.whl",
        " -0a0a0evil-evil.whl",
        "6-0a0a0evil-evil.whl",
        "_-0a0a0evil-evil.whl",
        "-0a0a0evil-evil.whl",
        "evil-0a0a0-.whl",
        "evil-0a0a0evil-evil.whl"
      ]
    },
    {
      "regex": "^(do_reply|learn)$",
      "exceptionStackTrace": null,
      "matches": ["learn", "do_reply"]
    },
    {
      "regex": "^I go to '\\/(.+)'$",
      "exceptionStackTrace": null,
      "matches": [
        "I go to '//'",
        "I go to '/''",
        "I go to '/eVil'",
        "I go to '/EVIL'",
        "I go to '/ev_il'",
        "I go to '/ev il'",
        "I go to '/ev4il'",
        "I go to '/e'",
        "I go to '/ '",
        "I go to '/6'",
        "I go to '/_'",
        "I go to '/'",
        "I go to '/evil'"
      ]
    },
    {
      "regex": "Non-2xx or 3xx responses: (\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "Non-2xx or 3xx responses: 00",
        "Non-2xx or 3xx responses: ",
        "Non-2xx or 3xx responses: 0"
      ]
    },
    {
      "regex": "^pen([aiueo])(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "penoeVil",
        "penoEVIL",
        "penoev_il",
        "penoev il",
        "penoev4il",
        "penoe",
        "peno ",
        "peno6",
        "peno_",
        "penuevil",
        "penievil",
        "peneevil",
        "penbevil",
        "penaevil",
        "peno",
        "penoevil"
      ]
    },
    { "regex": "BLA", "exceptionStackTrace": null, "matches": ["BLA"] },
    {
      "regex": "Unknown Runtyper option name: abc",
      "exceptionStackTrace": null,
      "matches": ["Unknown Runtyper option name: abc"]
    },
    {
      "regex": "^the cache parameter group name is in the result$",
      "exceptionStackTrace": null,
      "matches": ["the cache parameter group name is in the result"]
    },
    { "regex": "1Mo\\.dat", "exceptionStackTrace": null, "matches": ["1Mo.dat"] },
    {
      "regex": "\\(pending",
      "exceptionStackTrace": null,
      "matches": ["(pending"]
    },
    { "regex": "\\.xhtml$", "exceptionStackTrace": null, "matches": [".xhtml"] },
    {
      "regex": "@(.*)([{(])",
      "exceptionStackTrace": null,
      "matches": [
        "@evil{",
        "@{(",
        "@@(",
        "@((",
        "@eVil(",
        "@EVIL(",
        "@ev_il(",
        "@ev il(",
        "@ev4il(",
        "@e(",
        "@ (",
        "@6(",
        "@_(",
        "@(",
        "@evil("
      ]
    },
    {
      "regex": ".*? \\(.*?\\) ([\\d.]+).*?",
      "exceptionStackTrace": null,
      "matches": [
        "evil (evil) ..",
        "evil (evil) .)",
        "evil (evil) .(",
        "evil (evil) .eVil",
        "evil (evil) .EVIL",
        "evil (evil) .ev_il",
        "evil (evil) .ev il",
        "evil (evil) .ev4il",
        "evil (evil) .e",
        "evil (evil) . ",
        "evil (evil) .6",
        "evil (evil) ._",
        "evil (evil) .",
        "evil (evil) ..evil",
        "evil (evil) evil",
        "evil (evil) 0evil",
        "evil (.) .evil",
        "evil ()) .evil",
        "evil (() .evil",
        "evil (eVil) .evil",
        "evil (EVIL) .evil",
        "evil (ev_il) .evil",
        "evil (ev il) .evil",
        "evil (ev4il) .evil",
        "evil (e) .evil",
        "evil ( ) .evil",
        "evil (6) .evil",
        "evil (_) .evil",
        "evil () .evil",
        ". (evil) .evil",
        ") (evil) .evil",
        "( (evil) .evil",
        "eVil (evil) .evil",
        "EVIL (evil) .evil",
        "ev_il (evil) .evil",
        "ev il (evil) .evil",
        "ev4il (evil) .evil",
        "e (evil) .evil",
        "  (evil) .evil",
        "6 (evil) .evil",
        "_ (evil) .evil",
        " (evil) .evil",
        " () .",
        "evil (evil) .evil"
      ]
    },
    {
      "regex": "\\\\?(\\{-?[0-9.,q]*?})",
      "exceptionStackTrace": null,
      "matches": [
        "\\{-qq}",
        "\\{-}",
        "\\{-a}",
        "\\{-0}",
        "\\{-.}",
        "\\{-,}",
        "\\{--q}",
        "\\{q}",
        "\\\\{-q}",
        "{-q}",
        "{}",
        "\\{-q}"
      ]
    },
    {
      "regex": "^--squirrel-",
      "exceptionStackTrace": null,
      "matches": ["--squirrel-"]
    },
    {
      "regex": "/deploy[^/]*$",
      "exceptionStackTrace": null,
      "matches": [
        "/deploy/",
        "/deployeVil",
        "/deployEVIL",
        "/deployev_il",
        "/deployev il",
        "/deployev4il",
        "/deploye",
        "/deploy ",
        "/deploy6",
        "/deploy_",
        "/deploy",
        "/deployevil"
      ]
    },
    {
      "regex": "^[A-Za-z0-9_.-]+\\/[A-Za-z0-9_.-]+$",
      "exceptionStackTrace": null,
      "matches": [
        "evil//",
        "evil/.",
        "evil/-",
        "evil/eVil",
        "evil/EVIL",
        "evil/ev_il",
        "evil/ev il",
        "evil/ev4il",
        "evil/e",
        "evil/ ",
        "evil/6",
        "evil/_",
        "evil/",
        "//evil",
        "./evil",
        "-/evil",
        "eVil/evil",
        "EVIL/evil",
        "ev_il/evil",
        "ev il/evil",
        "ev4il/evil",
        "e/evil",
        " /evil",
        "6/evil",
        "_/evil",
        "/evil",
        "evil/evil"
      ]
    },
    {
      "regex": "^[\\x{9}\\x{A}\\x{D}\\x{20}-\\x{7E}\\x{A0}-\\x{D7FF}\\x{E000}-\\x{FFFD}\\x{10000}-\\x{10FFFF}]*$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "incomplete escape \\x"
      },
      "matches": []
    },
    {
      "regex": "^([a-zA-Z0-9]+:)?\\/\\/",
      "exceptionStackTrace": null,
      "matches": [
        "evil:evil://",
        "eVil://",
        "EVIL://",
        "ev_il://",
        "ev il://",
        "ev4il://",
        "e://",
        " ://",
        "6://",
        "_://",
        "://",
        "//",
        "evil://"
      ]
    },
    {
      "regex": "^g(i.*)",
      "exceptionStackTrace": null,
      "matches": [
        "gieVil",
        "giEVIL",
        "giev_il",
        "giev il",
        "giev4il",
        "gie",
        "gi ",
        "gi6",
        "gi_",
        "gi",
        "gievil"
      ]
    },
    {
      "regex": "traditional-encryption-and-compression",
      "exceptionStackTrace": null,
      "matches": ["traditional-encryption-and-compression"]
    },
    {
      "regex": "Ok, come back any time",
      "exceptionStackTrace": null,
      "matches": ["Ok, come back any time"]
    },
    {
      "regex": "^rest_graph",
      "exceptionStackTrace": null,
      "matches": ["rest_graph"]
    },
    {
      "regex": "\\bINSERT[\\w\\s]*\\sINTO\\s*$id\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        "INSERTevil INTO id  ",
        "INSERTevil INTO id",
        "INSERTevil INTO  id ",
        "INSERTevil INTOid ",
        "INSERTeVil INTO id ",
        "INSERTEVIL INTO id ",
        "INSERTev_il INTO id ",
        "INSERTev il INTO id ",
        "INSERTev4il INTO id ",
        "INSERTe INTO id ",
        "INSERT  INTO id ",
        "INSERT6 INTO id ",
        "INSERT_ INTO id ",
        "INSERT INTO id ",
        "INSERT INTOid",
        "INSERTevil INTO id "
      ]
    },
    {
      "regex": "^(\\d)+\\.col$",
      "exceptionStackTrace": null,
      "matches": ["00.col", ".col", "0.col"]
    },
    {
      "regex": "\\s*(#.*)?",
      "exceptionStackTrace": null,
      "matches": [
        " #evil#evil",
        " ",
        " ##",
        " #eVil",
        " #EVIL",
        " #ev_il",
        " #ev il",
        " #ev4il",
        " #e",
        " # ",
        " #6",
        " #_",
        " #",
        "  #evil",
        "#evil",
        "",
        " #evil"
      ]
    },
    {
      "regex": "rundeck job(?:s)?",
      "exceptionStackTrace": null,
      "matches": ["rundeck jobss", "rundeck job", "rundeck jobs"]
    },
    {
      "regex": "^detect_web$",
      "exceptionStackTrace": null,
      "matches": ["detect_web"]
    },
    {
      "regex": "^sab(ato)?$",
      "exceptionStackTrace": null,
      "matches": ["sabatoato", "sab", "sabato"]
    },
    {
      "regex": "\\>[\\t ]+\\<",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "^go[0-9a-z.]+\\.[0-9a-z.-]+\\.(tar\\.gz|pkg|msi|zip)$",
      "exceptionStackTrace": null,
      "matches": [
        "goevil...tar.gz",
        "goevil.-.tar.gz",
        "goevil.eVil.tar.gz",
        "goevil.EVIL.tar.gz",
        "goevil.ev_il.tar.gz",
        "goevil.ev il.tar.gz",
        "goevil.ev4il.tar.gz",
        "goevil.e.tar.gz",
        "goevil. .tar.gz",
        "goevil.6.tar.gz",
        "goevil._.tar.gz",
        "goevil..tar.gz",
        "go..evil.tar.gz",
        "go-.evil.tar.gz",
        "goeVil.evil.tar.gz",
        "goEVIL.evil.tar.gz",
        "goev_il.evil.tar.gz",
        "goev il.evil.tar.gz",
        "goev4il.evil.tar.gz",
        "goe.evil.tar.gz",
        "go .evil.tar.gz",
        "go6.evil.tar.gz",
        "go_.evil.tar.gz",
        "go.evil.tar.gz",
        "goevil.evil.zip",
        "goevil.evil.msi",
        "goevil.evil.pkg",
        "goevil.evil.tar.gz"
      ]
    },
    {
      "regex": "^--simplifiedonly",
      "exceptionStackTrace": null,
      "matches": ["--simplifiedonly"]
    },
    {
      "regex": "^-\\s.*$",
      "exceptionStackTrace": null,
      "matches": [
        "- -",
        "- eVil",
        "- EVIL",
        "- ev_il",
        "- ev il",
        "- ev4il",
        "- e",
        "-  ",
        "- 6",
        "- _",
        "- ",
        "- evil"
      ]
    },
    {
      "regex": "^(\\d+\\.\\d+)\\..*",
      "exceptionStackTrace": null,
      "matches": [
        "0.0..",
        "0.0.eVil",
        "0.0.EVIL",
        "0.0.ev_il",
        "0.0.ev il",
        "0.0.ev4il",
        "0.0.e",
        "0.0. ",
        "0.0.6",
        "0.0._",
        "0.00.evil",
        "0..evil",
        "00.0.evil",
        ".0.evil",
        "0.0.",
        "0.0.evil"
      ]
    },
    { "regex": "^$qgood", "exceptionStackTrace": null, "matches": ["qgood"] },
    {
      "regex": "host: ([0-9]{4})",
      "exceptionStackTrace": null,
      "matches": ["host: 00000", "host: 000", "host: 0000"]
    },
    {
      "regex": "</BODY></HTML>$",
      "exceptionStackTrace": null,
      "matches": ["</BODY></HTML>"]
    },
    { "regex": "\\*\\:", "exceptionStackTrace": null, "matches": ["*:"] },
    {
      "regex": "\\b([a-z_][a-z0-9_]*)([.:])",
      "exceptionStackTrace": null,
      "matches": [
        "_evil.",
        "_::",
        "_.:",
        "_eVil:",
        "_EVIL:",
        "_ev_il:",
        "_ev il:",
        "_ev4il:",
        "_e:",
        "_ :",
        "_6:",
        "__:",
        "aevil:",
        "_:",
        "_evil:"
      ]
    },
    {
      "regex": "return *(_0x[a-f0-9]{4,6}) *\\+ *(_0x[a-f0-9]{4,6});",
      "exceptionStackTrace": null,
      "matches": [
        "return _0x0000 + _0x0000000;",
        "return _0x0000 + _0x000000;",
        "return _0x0000 + _0x000;",
        "return _0x0000 + _0xg000;",
        "return _0x0000 + _0xa000;",
        "return _0x0000 +  _0x0000;",
        "return _0x0000 +_0x0000;",
        "return _0x0000  + _0x0000;",
        "return _0x0000+ _0x0000;",
        "return _0x0000000 + _0x0000;",
        "return _0x000000 + _0x0000;",
        "return _0x000 + _0x0000;",
        "return _0xg000 + _0x0000;",
        "return _0xa000 + _0x0000;",
        "return  _0x0000 + _0x0000;",
        "return_0x0000 + _0x0000;",
        "return_0x0000+_0x0000;",
        "return _0x0000 + _0x0000;"
      ]
    },
    {
      "regex": "12:00:00-05:00",
      "exceptionStackTrace": null,
      "matches": ["12:00:00-05:00"]
    },
    {
      "regex": ":?(\\w+)\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "Exec(Start|Stop)",
      "exceptionStackTrace": null,
      "matches": ["ExecStop", "ExecStart"]
    },
    {
      "regex": "SectorChange",
      "exceptionStackTrace": null,
      "matches": ["SectorChange"]
    },
    {
      "regex": "every ([0-9]+) (hour|minute|second)",
      "exceptionStackTrace": null,
      "matches": [
        "every 00 hour",
        "every  hour",
        "every 0 second",
        "every 0 minute",
        "every 0 hour"
      ]
    },
    {
      "regex": "^[a-zA-Z0-9]+(-*[a-zA-Z0-9])*$",
      "exceptionStackTrace": null,
      "matches": [
        "evil-0-0",
        "evil-a",
        "evil-A",
        "evil--0",
        "evil0",
        "eVil-0",
        "EVIL-0",
        "ev_il-0",
        "ev il-0",
        "ev4il-0",
        "e-0",
        " -0",
        "6-0",
        "_-0",
        "-0",
        "evil",
        "evil-0"
      ]
    },
    { "regex": "^$type\\.", "exceptionStackTrace": null, "matches": ["type."] },
    {
      "regex": "^Processing by (?<controller>[\\w\\:]+)#(?<action>\\w+) as (?<format>[\\w\\/\\-\\.]+)$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<c"
      },
      "matches": []
    },
    {
      "regex": "(\\d+) ([kKmMgG][bB])/s wr",
      "exceptionStackTrace": null,
      "matches": [
        "0 Gb/s wr",
        "0 Ga/s wr",
        "0 GA/s wr",
        "0 mB/s wr",
        "0 kB/s wr",
        "0 gB/s wr",
        "0 aB/s wr",
        "0 MB/s wr",
        "0 KB/s wr",
        "0 AB/s wr",
        "00 GB/s wr",
        " GB/s wr",
        "0 GB/s wr"
      ]
    },
    {
      "regex": "(\\r\\n|\\n|\\r)\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "<(\\/?)([^ >]*)(\\s+(.*))?>",
      "exceptionStackTrace": null,
      "matches": [
        "</evil evil evil>",
        "</evil>",
        "</evil >>",
        "</evil <>",
        "</evil />",
        "</evil eVil>",
        "</evil EVIL>",
        "</evil ev_il>",
        "</evil ev il>",
        "</evil ev4il>",
        "</evil e>",
        "</evil  >",
        "</evil 6>",
        "</evil _>",
        "</evil >",
        "</evil  evil>",
        "</evilevil>",
        "</> evil>",
        "</< evil>",
        "<// evil>",
        "</eVil evil>",
        "</EVIL evil>",
        "</ev_il evil>",
        "</ev il evil>",
        "</ev4il evil>",
        "</e evil>",
        "</  evil>",
        "</6 evil>",
        "</_ evil>",
        "</ evil>",
        "<//evil evil>",
        "<evil evil>",
        "<>",
        "</evil evil>"
      ]
    },
    {
      "regex": "\\w+(?=\\()",
      "exceptionStackTrace": null,
      "matches": [
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "(scriptaculous|protoaculous)\\.js",
      "exceptionStackTrace": null,
      "matches": ["protoaculous.js", "scriptaculous.js"]
    },
    {
      "regex": "(\\n+)|(\\.\\W)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "`[^`]*+`|\"(?:[^\"\\\\]++|\\\\.)*+\"|'(?:[^'\\\\]++|\\\\.)*+'|(\\?)|:(\\w++)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "multiple repeat"
      },
      "matches": []
    },
    {
      "regex": "^I run the \"jh ([^\"]*)\" command inside folder \"([^\"]*)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "I run the \"jh evil\" command inside folder \"\"\"",
        "I run the \"jh evil\" command inside folder \"eVil\"",
        "I run the \"jh evil\" command inside folder \"EVIL\"",
        "I run the \"jh evil\" command inside folder \"ev_il\"",
        "I run the \"jh evil\" command inside folder \"ev il\"",
        "I run the \"jh evil\" command inside folder \"ev4il\"",
        "I run the \"jh evil\" command inside folder \"e\"",
        "I run the \"jh evil\" command inside folder \" \"",
        "I run the \"jh evil\" command inside folder \"6\"",
        "I run the \"jh evil\" command inside folder \"_\"",
        "I run the \"jh evil\" command inside folder \"\"",
        "I run the \"jh \"\" command inside folder \"evil\"",
        "I run the \"jh eVil\" command inside folder \"evil\"",
        "I run the \"jh EVIL\" command inside folder \"evil\"",
        "I run the \"jh ev_il\" command inside folder \"evil\"",
        "I run the \"jh ev il\" command inside folder \"evil\"",
        "I run the \"jh ev4il\" command inside folder \"evil\"",
        "I run the \"jh e\" command inside folder \"evil\"",
        "I run the \"jh  \" command inside folder \"evil\"",
        "I run the \"jh 6\" command inside folder \"evil\"",
        "I run the \"jh _\" command inside folder \"evil\"",
        "I run the \"jh \" command inside folder \"evil\"",
        "I run the \"jh \" command inside folder \"\"",
        "I run the \"jh evil\" command inside folder \"evil\""
      ]
    },
    {
      "regex": "([a-z]{1,8}(-[a-z]{1,8})*)\\s*(;\\s*q\\s*=\\s*(1|0\\.[0-9]+))?",
      "exceptionStackTrace": null,
      "matches": [
        "a-a ; q = 0.00",
        "a-a ; q = 0.",
        "a-a ; q = 1; q = 1",
        "a-a ",
        "a-a ; q =  1",
        "a-a ; q =1",
        "a-a ; q  = 1",
        "a-a ; q= 1",
        "a-a ;  q = 1",
        "a-a ;q = 1",
        "a-a  ; q = 1",
        "a-a; q = 1",
        "a-a-a ; q = 1",
        "a ; q = 1",
        "a-aaaaaaaaa ; q = 1",
        "a-aaaaaaaa ; q = 1",
        "a- ; q = 1",
        "aaaaaaaaa-a ; q = 1",
        "aaaaaaaa-a ; q = 1",
        "-a ; q = 1",
        "a",
        "a-a ; q = 0.0",
        "a-a ; q = 1"
      ]
    },
    {
      "regex": "^policy syntax error$",
      "exceptionStackTrace": null,
      "matches": ["policy syntax error"]
    },
    {
      "regex": "\\btest.*\\.c$",
      "exceptionStackTrace": null,
      "matches": [
        "test..c",
        "testeVil.c",
        "testEVIL.c",
        "testev_il.c",
        "testev il.c",
        "testev4il.c",
        "teste.c",
        "test .c",
        "test6.c",
        "test_.c",
        "test.c",
        "testevil.c"
      ]
    },
    {
      "regex": "[- 0-9X]{10,19}",
      "exceptionStackTrace": null,
      "matches": [
        "XXXXXXXXXXXXXXXXXXXX",
        "XXXXXXXXXXXXXXXXXXX",
        "XXXXXXXXX",
        "AXXXXXXXXX",
        "0XXXXXXXXX",
        "-XXXXXXXXX",
        " XXXXXXXXX",
        "XXXXXXXXXX"
      ]
    },
    {
      "regex": "^([-\\w:]+)\\s*\\/?",
      "exceptionStackTrace": null,
      "matches": [
        "evil //",
        "evil ",
        "evil  /",
        "evil/",
        ": /",
        "/ /",
        "- /",
        "eVil /",
        "EVIL /",
        "ev_il /",
        "ev il /",
        "ev4il /",
        "e /",
        "  /",
        "6 /",
        "_ /",
        " /",
        "evil",
        "evil /"
      ]
    },
    { "regex": "a[(]\\/", "exceptionStackTrace": null, "matches": ["a(/"] },
    { "regex": "$root", "exceptionStackTrace": null, "matches": ["root"] },
    {
      "regex": "(\\s*(/\\*(.*?\\s*?)*\\*/)*)*",
      "exceptionStackTrace": null,
      "matches": [
        " /*evil */ /*evil */",
        " /*evil *//*evil */",
        " ",
        " /*evil evil */",
        " /**/",
        " /*evil  */",
        " /*evil*/",
        " /*/ */",
        " /** */",
        " /*eVil */",
        " /*EVIL */",
        " /*ev_il */",
        " /*ev il */",
        " /*ev4il */",
        " /*e */",
        " /*  */",
        " /*6 */",
        " /*_ */",
        " /* */",
        "  /*evil */",
        "/*evil */",
        "",
        " /*evil */"
      ]
    },
    {
      "regex": "^[0-9\\.\\-]+in$",
      "exceptionStackTrace": null,
      "matches": ["--in", "in", "0in", ".in", "-in"]
    },
    {
      "regex": "([a-zA-Z])\\'il",
      "exceptionStackTrace": null,
      "matches": ["a'il", "A'il"]
    },
    {
      "regex": "^(get|set)(.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "geteVil",
        "getEVIL",
        "getev_il",
        "getev il",
        "getev4il",
        "gete",
        "get ",
        "get6",
        "get_",
        "get",
        "setevil",
        "getevil"
      ]
    },
    {
      "regex": "(^|:| )operator\\(\\) ?\\(.*\\).*$",
      "exceptionStackTrace": null,
      "matches": [
        "operator() (evil):",
        "operator() (evil))",
        "operator() (evil)(",
        "operator() (evil)eVil",
        "operator() (evil)EVIL",
        "operator() (evil)ev_il",
        "operator() (evil)ev il",
        "operator() (evil)ev4il",
        "operator() (evil)e",
        "operator() (evil) ",
        "operator() (evil)6",
        "operator() (evil)_",
        "operator() (evil)",
        "operator() (:)evil",
        "operator() ())evil",
        "operator() (()evil",
        "operator() (eVil)evil",
        "operator() (EVIL)evil",
        "operator() (ev_il)evil",
        "operator() (ev il)evil",
        "operator() (ev4il)evil",
        "operator() (e)evil",
        "operator() ( )evil",
        "operator() (6)evil",
        "operator() (_)evil",
        "operator() ()evil",
        "operator()  (evil)evil",
        "operator()(evil)evil",
        " operator()()",
        ":operator()()",
        "operator()()",
        " operator() (evil)evil",
        ":operator() (evil)evil",
        "operator() (evil)evil"
      ]
    },
    {
      "regex": "app/assets/javascripts/(.+?)\\.(js\\.coffee|js|coffee)(?:\\.\\w+)*$",
      "exceptionStackTrace": null,
      "matches": [
        "app/assets/javascripts/evil.js.coffee.evil.evil",
        "app/assets/javascripts/evil.js.coffee.eVil",
        "app/assets/javascripts/evil.js.coffee.EVIL",
        "app/assets/javascripts/evil.js.coffee.ev_il",
        "app/assets/javascripts/evil.js.coffee.ev il",
        "app/assets/javascripts/evil.js.coffee.ev4il",
        "app/assets/javascripts/evil.js.coffee.e",
        "app/assets/javascripts/evil.js.coffee. ",
        "app/assets/javascripts/evil.js.coffee.6",
        "app/assets/javascripts/evil.js.coffee._",
        "app/assets/javascripts/evil.js.coffee.",
        "app/assets/javascripts//.js.coffee.evil",
        "app/assets/javascripts/..js.coffee.evil",
        "app/assets/javascripts/eVil.js.coffee.evil",
        "app/assets/javascripts/EVIL.js.coffee.evil",
        "app/assets/javascripts/ev_il.js.coffee.evil",
        "app/assets/javascripts/ev il.js.coffee.evil",
        "app/assets/javascripts/ev4il.js.coffee.evil",
        "app/assets/javascripts/e.js.coffee.evil",
        "app/assets/javascripts/ .js.coffee.evil",
        "app/assets/javascripts/6.js.coffee.evil",
        "app/assets/javascripts/_.js.coffee.evil",
        "app/assets/javascripts/.js.coffee.evil",
        "app/assets/javascripts/evil.coffee",
        "app/assets/javascripts/evil.js",
        "app/assets/javascripts/evil.js.coffee",
        "app/assets/javascripts/evil.coffee.evil",
        "app/assets/javascripts/evil.js.evil",
        "app/assets/javascripts/evil.js.coffee.evil"
      ]
    },
    {
      "regex": "^([<|>])",
      "exceptionStackTrace": null,
      "matches": ["|", "<", ">"]
    },
    {
      "regex": "[A-Z_][a-zA-Z0-9]+$",
      "exceptionStackTrace": null,
      "matches": [
        "_eVil",
        "_EVIL",
        "_ev_il",
        "_ev il",
        "_ev4il",
        "_e",
        "_ ",
        "_6",
        "__",
        "_",
        "Aevil",
        "_evil"
      ]
    },
    {
      "regex": "--?([^= ]+)=([^ ]+)?",
      "exceptionStackTrace": null,
      "matches": [
        "--evil=evilevil",
        "--evil==",
        "--evil=-",
        "--evil=eVil",
        "--evil=EVIL",
        "--evil=ev_il",
        "--evil=ev il",
        "--evil=ev4il",
        "--evil=e",
        "--evil= ",
        "--evil=6",
        "--evil=_",
        "--evil=",
        "--==evil",
        "---=evil",
        "--eVil=evil",
        "--EVIL=evil",
        "--ev_il=evil",
        "--ev il=evil",
        "--ev4il=evil",
        "--e=evil",
        "-- =evil",
        "--6=evil",
        "--_=evil",
        "--=evil",
        "---evil=evil",
        "-evil=evil",
        "-evil=",
        "--evil=evil"
      ]
    },
    {
      "regex": "^([=-])(?:\\1| )+\\1 *$",
      "exceptionStackTrace": null,
      "matches": ["---  ", "---- ", "-- ", "=-- ", "- -", "---", "- - ", "--- "]
    },
    {
      "regex": "^I should be able to click on the first image$",
      "exceptionStackTrace": null,
      "matches": ["I should be able to click on the first image"]
    },
    {
      "regex": "\\x{0637}",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "incomplete escape \\x"
      },
      "matches": []
    },
    {
      "regex": "--environment='([^']+)' --account='([^']+)'",
      "exceptionStackTrace": null,
      "matches": [
        "--environment='evil' --account='='",
        "--environment='evil' --account='-'",
        "--environment='evil' --account='''",
        "--environment='evil' --account='eVil'",
        "--environment='evil' --account='EVIL'",
        "--environment='evil' --account='ev_il'",
        "--environment='evil' --account='ev il'",
        "--environment='evil' --account='ev4il'",
        "--environment='evil' --account='e'",
        "--environment='evil' --account=' '",
        "--environment='evil' --account='6'",
        "--environment='evil' --account='_'",
        "--environment='evil' --account=''",
        "--environment='=' --account='evil'",
        "--environment='-' --account='evil'",
        "--environment=''' --account='evil'",
        "--environment='eVil' --account='evil'",
        "--environment='EVIL' --account='evil'",
        "--environment='ev_il' --account='evil'",
        "--environment='ev il' --account='evil'",
        "--environment='ev4il' --account='evil'",
        "--environment='e' --account='evil'",
        "--environment=' ' --account='evil'",
        "--environment='6' --account='evil'",
        "--environment='_' --account='evil'",
        "--environment='' --account='evil'",
        "--environment='evil' --account='evil'"
      ]
    },
    {
      "regex": "^(\\s*)\"location\" arg,\\s*\"contact\" arg,",
      "exceptionStackTrace": null,
      "matches": [
        " \"location\" arg,  \"contact\" arg,",
        " \"location\" arg,\"contact\" arg,",
        "  \"location\" arg, \"contact\" arg,",
        "\"location\" arg, \"contact\" arg,",
        "\"location\" arg,\"contact\" arg,",
        " \"location\" arg, \"contact\" arg,"
      ]
    },
    {
      "regex": "\\-+END CERTIFICATE\\-+",
      "exceptionStackTrace": null,
      "matches": [
        "-END CERTIFICATE--",
        "-END CERTIFICATE",
        "--END CERTIFICATE-",
        "END CERTIFICATE-",
        "-END CERTIFICATE-"
      ]
    },
    {
      "regex": "Usage: ls",
      "exceptionStackTrace": null,
      "matches": ["Usage: ls"]
    },
    {
      "regex": "(^|[^0-9A-Za-z\u0900-\u0902\u0904-\u093a\u093c-\u093d\u0941-\u0948\u094d\u0950-\u0963\u0971-\u0977\u0979-\u097f\ua8e0-\ua8f7\ua8fb])((?:2Esd))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 160"
      },
      "matches": []
    },
    {
      "regex": "^1\\.[89]\\.",
      "exceptionStackTrace": null,
      "matches": ["1.8.", "1.0.", "1.9."]
    },
    {
      "regex": "^\\/[^\\s]*\\/[^\\s]*$",
      "exceptionStackTrace": null,
      "matches": [
        "/evil//",
        "/evil/eVil",
        "/evil/EVIL",
        "/evil/ev_il",
        "/evil/ev il",
        "/evil/ev4il",
        "/evil/e",
        "/evil/ ",
        "/evil/6",
        "/evil/_",
        "/evil/",
        "///evil",
        "/eVil/evil",
        "/EVIL/evil",
        "/ev_il/evil",
        "/ev il/evil",
        "/ev4il/evil",
        "/e/evil",
        "/ /evil",
        "/6/evil",
        "/_/evil",
        "//evil",
        "//",
        "/evil/evil"
      ]
    },
    { "regex": "srm://", "exceptionStackTrace": null, "matches": ["srm://"] },
    {
      "regex": "^.*?plural=",
      "exceptionStackTrace": null,
      "matches": [
        "=plural=",
        "eVilplural=",
        "EVILplural=",
        "ev_ilplural=",
        "ev ilplural=",
        "ev4ilplural=",
        "eplural=",
        " plural=",
        "6plural=",
        "_plural=",
        "plural=",
        "evilplural="
      ]
    },
    {
      "regex": "(`)([^<`]+)\\s+(<)(.*?)(>)(`_)",
      "exceptionStackTrace": null,
      "matches": [
        "`evil <`>`_",
        "`evil <>>`_",
        "`evil <<>`_",
        "`evil <eVil>`_",
        "`evil <EVIL>`_",
        "`evil <ev_il>`_",
        "`evil <ev il>`_",
        "`evil <ev4il>`_",
        "`evil <e>`_",
        "`evil < >`_",
        "`evil <6>`_",
        "`evil <_>`_",
        "`evil  <evil>`_",
        "`evil<evil>`_",
        "`` <evil>`_",
        "`> <evil>`_",
        "`< <evil>`_",
        "`eVil <evil>`_",
        "`EVIL <evil>`_",
        "`ev_il <evil>`_",
        "`ev il <evil>`_",
        "`ev4il <evil>`_",
        "`e <evil>`_",
        "`  <evil>`_",
        "`6 <evil>`_",
        "`_ <evil>`_",
        "` <evil>`_",
        "`evil <>`_",
        "`evil <evil>`_"
      ]
    },
    { "regex": "^-\\s", "exceptionStackTrace": null, "matches": ["- "] },
    {
      "regex": "(?<gefr??ig>x)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<g"
      },
      "matches": []
    },
    {
      "regex": "$line_is{TITLE}",
      "exceptionStackTrace": null,
      "matches": ["line_is{TITLE}"]
    },
    {
      "regex": "(?:\\uD807[\\uDEE0-\\uDEF8])",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 55303"
      },
      "matches": []
    },
    {
      "regex": "does not support `should_not !~ expected`.  Use `should =~ expected`",
      "exceptionStackTrace": null,
      "matches": [
        "does not support `should_not !~ expected`~  Use `should =~ expected`",
        "does not support `should_not !~ expected``  Use `should =~ expected`",
        "does not support `should_not !~ expected`_  Use `should =~ expected`",
        "does not support `should_not !~ expected`A  Use `should =~ expected`",
        "does not support `should_not !~ expected`=  Use `should =~ expected`",
        "does not support `should_not !~ expected`0  Use `should =~ expected`",
        "does not support `should_not !~ expected`!  Use `should =~ expected`",
        "does not support `should_not !~ expected`   Use `should =~ expected`",
        "does not support `should_not !~ expected`a  Use `should =~ expected`"
      ]
    },
    {
      "regex": "[&?]file=([^&]+)",
      "exceptionStackTrace": null,
      "matches": [
        "?file=?",
        "?file==",
        "?file=&",
        "?file=eVil",
        "?file=EVIL",
        "?file=ev_il",
        "?file=ev il",
        "?file=ev4il",
        "?file=e",
        "?file= ",
        "?file=6",
        "?file=_",
        "?file=",
        "&file=evil",
        "?file=evil"
      ]
    },
    {
      "regex": "(\\[[^\\[]*\\])|(\\\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|x|X|zz?|ZZ?|.)",
      "exceptionStackTrace": null,
      "matches": [
        "\\|",
        "\\]",
        "\\\\",
        "\\[",
        "\\0",
        "\\ ",
        "\\ZZZ",
        "\\Z",
        "\\zzz",
        "\\z",
        "\\SSSSS",
        "\\SSSS",
        "\\",
        "\\sss",
        "\\s",
        "\\mmm",
        "\\m",
        "\\HHH",
        "\\H",
        "\\hhh",
        "\\h",
        "\\GGGGGGGG",
        "\\GG",
        "\\GGGGGG",
        "\\GGGG",
        "\\gggggggg",
        "\\gg",
        "\\gggggg",
        "\\gggg",
        "\\WWW",
        "\\W",
        "\\W|",
        "\\Wo",
        "\\Wa",
        "\\WA",
        "\\www",
        "\\w",
        "\\w|",
        "\\wo",
        "\\wa",
        "\\doo",
        "\\d",
        "\\ddddd",
        "\\ddd",
        "\\DDDDD",
        "\\DDD",
        "\\MMMMM",
        "\\MMM",
        "\\\\Mo",
        "[|]",
        "[]]",
        "[\\]",
        "[[]",
        "[eVil]",
        "[EVIL]",
        "[ev_il]",
        "[ev il]",
        "[ev4il]",
        "[e]",
        "[ ]",
        "[6]",
        "[_]",
        "Z",
        "z",
        "X",
        "x",
        "S",
        "s",
        "m",
        "H",
        "h",
        "A",
        "a",
        "E",
        "e",
        "GG",
        "gg",
        "YY",
        "YYYY",
        "YYYYY",
        "YYYYYY",
        "Q",
        "W",
        "w",
        "d",
        "dd",
        "D",
        "DDDo",
        "Do",
        "M",
        "Mo",
        "[]",
        "\\ZZ",
        "\\zz",
        "\\X",
        "\\x",
        "\\S",
        "\\ss",
        "\\mm",
        "\\HH",
        "\\hh",
        "\\A",
        "\\a",
        "\\E",
        "\\e",
        "\\GGGGG",
        "\\ggggg",
        "\\YY",
        "\\YYYY",
        "\\YYYYY",
        "\\YYYYYY",
        "\\Q",
        "\\WW",
        "\\ww",
        "\\do",
        "\\dddd",
        "\\DDDD",
        "\\DDDo",
        "\\Do",
        "\\MMMM",
        "\\Mo",
        "[evil]"
      ]
    },
    {
      "regex": "^I have a brand new project with no files$",
      "exceptionStackTrace": null,
      "matches": ["I have a brand new project with no files"]
    },
    {
      "regex": "@returns.*$",
      "exceptionStackTrace": null,
      "matches": [
        "@returns@",
        "@returnseVil",
        "@returnsEVIL",
        "@returnsev_il",
        "@returnsev il",
        "@returnsev4il",
        "@returnse",
        "@returns ",
        "@returns6",
        "@returns_",
        "@returns",
        "@returnsevil"
      ]
    },
    {
      "regex": "require\\(\"([^\"]+)\"\\)",
      "exceptionStackTrace": null,
      "matches": [
        "require(\")\")",
        "require(\"(\")",
        "require(\"\"\")",
        "require(\"eVil\")",
        "require(\"EVIL\")",
        "require(\"ev_il\")",
        "require(\"ev il\")",
        "require(\"ev4il\")",
        "require(\"e\")",
        "require(\" \")",
        "require(\"6\")",
        "require(\"_\")",
        "require(\"\")",
        "require(\"evil\")"
      ]
    },
    {
      "regex": "^[[:graph:]]+\\t[-+]\\t[[:graph:]]+\\t\\d+\\t([[:alpha:]]+)\\t([[:graph:]]+)\\t\\d+\\t[[:graph:]]?",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "\\d{1,2}-(\\u0439|\\u0433\\u043e)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 1081"
      },
      "matches": []
    },
    {
      "regex": "^([-+]?[\\d]*\\.?[\\d]+([eE][-+]?[\\d]+)?)\\s?([k|m|g|t]?b)?",
      "exceptionStackTrace": null,
      "matches": [
        "+0.0E+0 tbtb",
        "+0.0E+0 ",
        "+0.0E+0 ttb",
        "+0.0E+0 b",
        "+0.0E+0 |b",
        "+0.0E+0 mb",
        "+0.0E+0 kb",
        "+0.0E+0 gb",
        "+0.0E+0 ab",
        "+0.0E+0  tb",
        "+0.0E+0tb",
        "+0.0E+0E+0 tb",
        "+0.0 tb",
        "+0.0E+00 tb",
        "+0.0E+ tb",
        "+0.0E++0 tb",
        "+0.0E0 tb",
        "+0.0E-0 tb",
        "+0.0e+0 tb",
        "+0.0a+0 tb",
        "+0.0A+0 tb",
        "+0.00E+0 tb",
        "+0.E+0 tb",
        "+0..0E+0 tb",
        "+00E+0 tb",
        "+00.0E+0 tb",
        "+.0E+0 tb",
        "++0.0E+0 tb",
        "0.0E+0 tb",
        "-0.0E+0 tb",
        "0",
        "+0.0E+0 tb"
      ]
    },
    {
      "regex": "([\\w]+)\\.graph\\ .*$",
      "exceptionStackTrace": null,
      "matches": [
        "evil.graph .",
        "evil.graph eVil",
        "evil.graph EVIL",
        "evil.graph ev_il",
        "evil.graph ev il",
        "evil.graph ev4il",
        "evil.graph e",
        "evil.graph  ",
        "evil.graph 6",
        "evil.graph _",
        "eVil.graph evil",
        "EVIL.graph evil",
        "ev_il.graph evil",
        "ev il.graph evil",
        "ev4il.graph evil",
        "e.graph evil",
        " .graph evil",
        "6.graph evil",
        "_.graph evil",
        ".graph evil",
        "evil.graph ",
        "evil.graph evil"
      ]
    },
    {
      "regex": "payloadToken",
      "exceptionStackTrace": null,
      "matches": ["payloadToken"]
    },
    {
      "regex": "^(superator_(definition|alias_for))?((_?\\d{2,3})+)((__\\d{2,3})+)$",
      "exceptionStackTrace": null,
      "matches": [
        "superator_definition_00__00__00",
        "superator_definition_00",
        "superator_definition_00__0000",
        "superator_definition_00__000",
        "superator_definition_00__0",
        "superator_definition_00_00__00",
        "superator_definition__00",
        "superator_definition_0000__00",
        "superator_definition_000__00",
        "superator_definition_0__00",
        "superator_definition__00__00",
        "superator_definition00__00",
        "superator_definitionsuperator_definition_00__00",
        "_00__00",
        "00__00",
        "superator_alias_for_00__00",
        "superator_definition_00__00"
      ]
    },
    { "regex": "^GLN", "exceptionStackTrace": null, "matches": ["GLN"] },
    {
      "regex": "^=head1\\s+(?i-xsm:CONTENTS)",
      "exceptionStackTrace": null,
      "matches": ["=head1  ", "=head1", "=head1 "]
    },
    {
      "regex": ".*=(\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "evil=00",
        "evil=",
        "==0",
        "eVil=0",
        "EVIL=0",
        "ev_il=0",
        "ev il=0",
        "ev4il=0",
        "e=0",
        " =0",
        "6=0",
        "_=0",
        "=0",
        "evil=0"
      ]
    },
    { "regex": "^odbc", "exceptionStackTrace": null, "matches": ["odbc"] },
    {
      "regex": "(<!-- @@(?:(?:\\n?.)*?)-->)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "\\377\\377\\377*",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported octal value 255"
      },
      "matches": []
    },
    {
      "regex": "^edgeswitch",
      "exceptionStackTrace": null,
      "matches": ["edgeswitch"]
    },
    {
      "regex": "^DBIx::Skinny::DBD::(.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "DBIx::Skinny::DBD:::",
        "DBIx::Skinny::DBD::eVil",
        "DBIx::Skinny::DBD::EVIL",
        "DBIx::Skinny::DBD::ev_il",
        "DBIx::Skinny::DBD::ev il",
        "DBIx::Skinny::DBD::ev4il",
        "DBIx::Skinny::DBD::e",
        "DBIx::Skinny::DBD:: ",
        "DBIx::Skinny::DBD::6",
        "DBIx::Skinny::DBD::_",
        "DBIx::Skinny::DBD::",
        "DBIx::Skinny::DBD::evil"
      ]
    },
    {
      "regex": "^\\s*e?\\s*$",
      "exceptionStackTrace": null,
      "matches": [" e  ", " e", " ee ", "  ", "  e ", "e ", "", " e "]
    },
    { "regex": "@class", "exceptionStackTrace": null, "matches": ["@class"] },
    {
      "regex": "<(\\/?)i(\\s[^>]*)?>",
      "exceptionStackTrace": null,
      "matches": [
        "</i evil evil>",
        "</i>",
        "</i >>",
        "</i <>",
        "</i />",
        "</i eVil>",
        "</i EVIL>",
        "</i ev_il>",
        "</i ev il>",
        "</i ev4il>",
        "</i e>",
        "</i  >",
        "</i 6>",
        "</i _>",
        "</i >",
        "<//i evil>",
        "<i evil>",
        "<i>",
        "</i evil>"
      ]
    },
    {
      "regex": "(?i)keratin",
      "exceptionStackTrace": null,
      "matches": ["keratin"]
    },
    {
      "regex": "(.*/\\..*)|(.*[a-f0-9]{8}+$)|(.*\\.tmp$)|(.*atmp[0-9]+$)|(.*\\.wbk$)|(.*\\.bak$)|(.*\\~$)|(.*backup.*\\.do[ct]{1}[x]?[m]?$)|(.*\\.sb\\-\\w{8}\\-\\w{6}$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "multiple repeat"
      },
      "matches": []
    },
    {
      "regex": "\\AObjectIntersectionOf",
      "exceptionStackTrace": null,
      "matches": ["ObjectIntersectionOf"]
    },
    {
      "regex": "^(\\s+IN)",
      "exceptionStackTrace": null,
      "matches": ["  IN", "IN", " IN"]
    },
    {
      "regex": "^([=<@&])[?]?(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "&?@",
        "&??",
        "&?=",
        "&?<",
        "&?&",
        "&?eVil",
        "&?EVIL",
        "&?ev_il",
        "&?ev il",
        "&?ev4il",
        "&?e",
        "&? ",
        "&?6",
        "&?_",
        "&?",
        "&??evil",
        "&evil",
        "@?evil",
        "=?evil",
        "<?evil",
        "&",
        "&?evil"
      ]
    },
    {
      "regex": "https:\\/\\/qasecommerce\\.cielo\\.com\\.br\\/web\\/index.cbmp\\?id=.+",
      "exceptionStackTrace": null,
      "matches": [
        "https://qasecommerce.cielo.com.br/web/indexacbmp?id=?",
        "https://qasecommerce.cielo.com.br/web/indexacbmp?id==",
        "https://qasecommerce.cielo.com.br/web/indexacbmp?id=:",
        "https://qasecommerce.cielo.com.br/web/indexacbmp?id=/",
        "https://qasecommerce.cielo.com.br/web/indexacbmp?id=.",
        "https://qasecommerce.cielo.com.br/web/indexacbmp?id=eVil",
        "https://qasecommerce.cielo.com.br/web/indexacbmp?id=EVIL",
        "https://qasecommerce.cielo.com.br/web/indexacbmp?id=ev_il",
        "https://qasecommerce.cielo.com.br/web/indexacbmp?id=ev il",
        "https://qasecommerce.cielo.com.br/web/indexacbmp?id=ev4il",
        "https://qasecommerce.cielo.com.br/web/indexacbmp?id=e",
        "https://qasecommerce.cielo.com.br/web/indexacbmp?id= ",
        "https://qasecommerce.cielo.com.br/web/indexacbmp?id=6",
        "https://qasecommerce.cielo.com.br/web/indexacbmp?id=_",
        "https://qasecommerce.cielo.com.br/web/indexacbmp?id=",
        "https://qasecommerce.cielo.com.br/web/indexAcbmp?id=evil",
        "https://qasecommerce.cielo.com.br/web/index?cbmp?id=evil",
        "https://qasecommerce.cielo.com.br/web/index=cbmp?id=evil",
        "https://qasecommerce.cielo.com.br/web/index:cbmp?id=evil",
        "https://qasecommerce.cielo.com.br/web/index0cbmp?id=evil",
        "https://qasecommerce.cielo.com.br/web/index/cbmp?id=evil",
        "https://qasecommerce.cielo.com.br/web/index.cbmp?id=evil",
        "https://qasecommerce.cielo.com.br/web/index cbmp?id=evil",
        "https://qasecommerce.cielo.com.br/web/indexacbmp?id=evil"
      ]
    },
    {
      "regex": "^(?:the )?directory(?: \"([^\"]*)\")? feature files are as follows:$",
      "exceptionStackTrace": null,
      "matches": [
        "the directory \"evil\" \"evil\" feature files are as follows:",
        "the directory feature files are as follows:",
        "the directory \":\" feature files are as follows:",
        "the directory \"\"\" feature files are as follows:",
        "the directory \"eVil\" feature files are as follows:",
        "the directory \"EVIL\" feature files are as follows:",
        "the directory \"ev_il\" feature files are as follows:",
        "the directory \"ev il\" feature files are as follows:",
        "the directory \"ev4il\" feature files are as follows:",
        "the directory \"e\" feature files are as follows:",
        "the directory \" \" feature files are as follows:",
        "the directory \"6\" feature files are as follows:",
        "the directory \"_\" feature files are as follows:",
        "the directory \"\" feature files are as follows:",
        "the the directory \"evil\" feature files are as follows:",
        "directory \"evil\" feature files are as follows:",
        "directory feature files are as follows:",
        "the directory \"evil\" feature files are as follows:"
      ]
    },
    {
      "regex": "^(?:https?://)?(?:www\\.)?inke\\.cn/live\\.html\\?uid=[0-9]+",
      "exceptionStackTrace": null,
      "matches": [
        "https://www.inke.cn/live.html?uid=00",
        "https://www.inke.cn/live.html?uid=",
        "https://www.www.inke.cn/live.html?uid=0",
        "https://inke.cn/live.html?uid=0",
        "https://https://www.inke.cn/live.html?uid=0",
        "www.inke.cn/live.html?uid=0",
        "httpss://www.inke.cn/live.html?uid=0",
        "http://www.inke.cn/live.html?uid=0",
        "inke.cn/live.html?uid=0",
        "https://www.inke.cn/live.html?uid=0"
      ]
    },
    {
      "regex": "$self->{unicode_punctuation}",
      "exceptionStackTrace": null,
      "matches": ["self->{unicode_punctuation}"]
    },
    { "regex": "$address", "exceptionStackTrace": null, "matches": ["address"] },
    {
      "regex": "\\s+|\\s+",
      "exceptionStackTrace": null,
      "matches": ["  ", "", " "]
    },
    {
      "regex": "\\Ahttp://www\\.tube8\\.com/.*/(\\d+)(?:/|$)",
      "exceptionStackTrace": null,
      "matches": [
        "http://www.tube8.com/evil/00/",
        "http://www.tube8.com/evil//",
        "http://www.tube8.com/:/0/",
        "http://www.tube8.com///0/",
        "http://www.tube8.com/./0/",
        "http://www.tube8.com/eVil/0/",
        "http://www.tube8.com/EVIL/0/",
        "http://www.tube8.com/ev_il/0/",
        "http://www.tube8.com/ev il/0/",
        "http://www.tube8.com/ev4il/0/",
        "http://www.tube8.com/e/0/",
        "http://www.tube8.com/ /0/",
        "http://www.tube8.com/6/0/",
        "http://www.tube8.com/_/0/",
        "http://www.tube8.com//0",
        "http://www.tube8.com//0/",
        "http://www.tube8.com/evil/0",
        "http://www.tube8.com/evil/0/"
      ]
    },
    {
      "regex": "^\\/(.*)\\/([gimy]*)$",
      "exceptionStackTrace": null,
      "matches": [
        "/evil/yy",
        "/evil/",
        "/evil/m",
        "/evil/i",
        "/evil/g",
        "/evil/a",
        "///y",
        "/eVil/y",
        "/EVIL/y",
        "/ev_il/y",
        "/ev il/y",
        "/ev4il/y",
        "/e/y",
        "/ /y",
        "/6/y",
        "/_/y",
        "//y",
        "//",
        "/evil/y"
      ]
    },
    {
      "regex": "(?:^|/)data/([^/]{2,})$",
      "exceptionStackTrace": null,
      "matches": [
        "data/a",
        "data/Aa",
        "data/0a",
        "data//a",
        "data/ a",
        "/data/aa",
        "data/aa"
      ]
    },
    {
      "regex": "(?:([^\\\\]|^))!([^!]|\\\\!)+!",
      "exceptionStackTrace": null,
      "matches": [
        "a!aa!",
        "a!!",
        "a!\\!",
        "a!A!",
        "a!0!",
        "a!!!",
        "a! !",
        "\\!a!",
        "A!a!",
        "0!a!",
        "!!a!",
        " !a!",
        "!a!",
        "a!\\!!",
        "a!a!"
      ]
    },
    {
      "regex": "[-]frame\\d+[TMB][LCR]$",
      "exceptionStackTrace": null,
      "matches": [
        "-frame0BL",
        "-frame0BC",
        "-frame0BA",
        "-frame0TR",
        "-frame0MR",
        "-frame0AR",
        "-frame00BR",
        "-frameBR",
        "-frame0BR"
      ]
    },
    { "regex": "^input_", "exceptionStackTrace": null, "matches": ["input_"] },
    {
      "regex": "^[\\t]?(\\w*):(.*)$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "&[a-z0-9#]{2,10};",
      "exceptionStackTrace": null,
      "matches": ["&###########;", "&##########;", "&#;", "&a#;", "&0#;", "&##;"]
    },
    {
      "regex": "(?<![<>])(<N pl=\"n\" gnt=\"n\" gnd=\"f\">g?[Cc]h?luas<\\/N> (?:<N[^>]*gnt=\"y\"[^>]*>(?:[CcDdFfGgMmPpSsTt][Hh]|[Bb]h[^fF])[^<]+<\\/N>))(?![<>])",
      "exceptionStackTrace": null,
      "matches": [
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>bhfevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>bhFevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>bhAevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>bh>evil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>bh=evil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>bh<evil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>bh0evil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>bh/evil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>bh\"evil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>bh evil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>ahaevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>Bhaevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>Ahaevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>th></N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>th=</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>th<</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>th/</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>th\"</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>theVil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>thEVIL</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>thev_il</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>thev il</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>thev4il</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>the</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>th </N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>th6</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>th_</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>th</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>taevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>tHevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>tAevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>shevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>phevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>mhevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>ghevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>fhevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>dhevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>chevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>ahevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>Thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>Shevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>Phevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>Mhevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>Ghevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>Fhevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>Dhevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>Chevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>Ahevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\">>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"=>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"<>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"/>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"\">thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"eVil>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"EVIL>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"ev_il>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"ev il>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"ev4il>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"e>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\" >thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"6>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"_>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\">thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <N>gnt=\"y\"evil>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <N=gnt=\"y\"evil>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <N<gnt=\"y\"evil>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <N/gnt=\"y\"evil>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <N\"gnt=\"y\"evil>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <NeVilgnt=\"y\"evil>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <NEVILgnt=\"y\"evil>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nev_ilgnt=\"y\"evil>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nev ilgnt=\"y\"evil>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nev4ilgnt=\"y\"evil>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Negnt=\"y\"evil>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <N gnt=\"y\"evil>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <N6gnt=\"y\"evil>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <N_gnt=\"y\"evil>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Ngnt=\"y\"evil>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchhluas</N> <Nevilgnt=\"y\"evil>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gcluas</N> <Nevilgnt=\"y\"evil>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gahluas</N> <Nevilgnt=\"y\"evil>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gChluas</N> <Nevilgnt=\"y\"evil>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gAhluas</N> <Nevilgnt=\"y\"evil>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">ggchluas</N> <Nevilgnt=\"y\"evil>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">chluas</N> <Nevilgnt=\"y\"evil>thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">cluas</N> <Ngnt=\"y\">bhaevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">cluas</N> <Ngnt=\"y\">thevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>bhaevil</N>",
        "<N pl=\"n\" gnt=\"n\" gnd=\"f\">gchluas</N> <Nevilgnt=\"y\"evil>thevil</N>"
      ]
    },
    {
      "regex": "\\A[0-8]\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "(a(b))_1(?>33|3)37",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?>"
      },
      "matches": []
    },
    {
      "regex": "^\\$stderr$",
      "exceptionStackTrace": null,
      "matches": ["$stderr"]
    },
    {
      "regex": "&#\\d+;",
      "exceptionStackTrace": null,
      "matches": ["&#00;", "&#;", "&#0;"]
    },
    { "regex": "^db", "exceptionStackTrace": null, "matches": ["db"] },
    {
      "regex": "([0-9+,-.]*)(.*)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (bad range): Invalid range: ,-."
      },
      "matches": []
    },
    {
      "regex": "^be indexable$",
      "exceptionStackTrace": null,
      "matches": ["be indexable"]
    },
    {
      "regex": "^(?:(?:(?:full|nick)nam|languag|postcod|timezon)e|country|gender|email|dob)$",
      "exceptionStackTrace": null,
      "matches": [
        "dob",
        "email",
        "gender",
        "country",
        "timezone",
        "postcode",
        "language",
        "nickname",
        "fullname"
      ]
    },
    {
      "regex": "\\[url=(.*?)\\](.*?)\\[\\/url\\]",
      "exceptionStackTrace": null,
      "matches": [
        "[url=evil]][/url]",
        "[url=evil][[/url]",
        "[url=evil]=[/url]",
        "[url=evil]/[/url]",
        "[url=evil]eVil[/url]",
        "[url=evil]EVIL[/url]",
        "[url=evil]ev_il[/url]",
        "[url=evil]ev il[/url]",
        "[url=evil]ev4il[/url]",
        "[url=evil]e[/url]",
        "[url=evil] [/url]",
        "[url=evil]6[/url]",
        "[url=evil]_[/url]",
        "[url=evil][/url]",
        "[url=]]evil[/url]",
        "[url=[]evil[/url]",
        "[url==]evil[/url]",
        "[url=/]evil[/url]",
        "[url=eVil]evil[/url]",
        "[url=EVIL]evil[/url]",
        "[url=ev_il]evil[/url]",
        "[url=ev il]evil[/url]",
        "[url=ev4il]evil[/url]",
        "[url=e]evil[/url]",
        "[url= ]evil[/url]",
        "[url=6]evil[/url]",
        "[url=_]evil[/url]",
        "[url=]evil[/url]",
        "[url=][/url]",
        "[url=evil]evil[/url]"
      ]
    },
    {
      "regex": "\\x{A0}+",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "incomplete escape \\x"
      },
      "matches": []
    },
    {
      "regex": "(<cvc>)[^<]+(</cvc>)",
      "exceptionStackTrace": null,
      "matches": [
        "<cvc>></cvc>",
        "<cvc><</cvc>",
        "<cvc>/</cvc>",
        "<cvc>eVil</cvc>",
        "<cvc>EVIL</cvc>",
        "<cvc>ev_il</cvc>",
        "<cvc>ev il</cvc>",
        "<cvc>ev4il</cvc>",
        "<cvc>e</cvc>",
        "<cvc> </cvc>",
        "<cvc>6</cvc>",
        "<cvc>_</cvc>",
        "<cvc></cvc>",
        "<cvc>evil</cvc>"
      ]
    },
    { "regex": "^\\.NOT\\.", "exceptionStackTrace": null, "matches": [".NOT."] },
    {
      "regex": "(?<=missing argument:\\s).*",
      "exceptionStackTrace": null,
      "matches": [
        ":",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}).*?MAC\\s(\\S+)\\s",
      "exceptionStackTrace": null,
      "matches": [
        "0.0.0.0evilMAC . ",
        "0.0.0.0evilMAC eVil ",
        "0.0.0.0evilMAC EVIL ",
        "0.0.0.0evilMAC ev_il ",
        "0.0.0.0evilMAC ev il ",
        "0.0.0.0evilMAC ev4il ",
        "0.0.0.0evilMAC e ",
        "0.0.0.0evilMAC   ",
        "0.0.0.0evilMAC 6 ",
        "0.0.0.0evilMAC _ ",
        "0.0.0.0evilMAC  ",
        "0.0.0.0.MAC evil ",
        "0.0.0.0eVilMAC evil ",
        "0.0.0.0EVILMAC evil ",
        "0.0.0.0ev_ilMAC evil ",
        "0.0.0.0ev ilMAC evil ",
        "0.0.0.0ev4ilMAC evil ",
        "0.0.0.0eMAC evil ",
        "0.0.0.0 MAC evil ",
        "0.0.0.06MAC evil ",
        "0.0.0.0_MAC evil ",
        "0.0.0.0000evilMAC evil ",
        "0.0.0.000evilMAC evil ",
        "0.0.0.evilMAC evil ",
        "0.0.0000.0evilMAC evil ",
        "0.0.000.0evilMAC evil ",
        "0.0..0evilMAC evil ",
        "0.0000.0.0evilMAC evil ",
        "0.000.0.0evilMAC evil ",
        "0..0.0evilMAC evil ",
        "0000.0.0.0evilMAC evil ",
        "000.0.0.0evilMAC evil ",
        ".0.0.0evilMAC evil ",
        "0.0.0.0MAC evil ",
        "0.0.0.0evilMAC evil "
      ]
    },
    {
      "regex": "^\\e\\[1mindex [a-z0-9]{7}",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\e"
      },
      "matches": []
    },
    {
      "regex": "(?i)Bearer (.*)",
      "exceptionStackTrace": null,
      "matches": [
        "Bearer eVil",
        "Bearer EVIL",
        "Bearer ev_il",
        "Bearer ev il",
        "Bearer ev4il",
        "Bearer e",
        "Bearer  ",
        "Bearer 6",
        "Bearer _",
        "Bearer ",
        "Bearer evil"
      ]
    },
    {
      "regex": "^SHA1 Fingerprint=(\\S+)",
      "exceptionStackTrace": null,
      "matches": [
        "SHA1 Fingerprint==",
        "SHA1 Fingerprint=eVil",
        "SHA1 Fingerprint=EVIL",
        "SHA1 Fingerprint=ev_il",
        "SHA1 Fingerprint=ev il",
        "SHA1 Fingerprint=ev4il",
        "SHA1 Fingerprint=e",
        "SHA1 Fingerprint= ",
        "SHA1 Fingerprint=6",
        "SHA1 Fingerprint=_",
        "SHA1 Fingerprint=",
        "SHA1 Fingerprint=evil"
      ]
    },
    {
      "regex": "(?<_1>(?<_2><<) *HTML\\b).*\\n?",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<_"
      },
      "matches": []
    },
    {
      "regex": "^Elastica\\\\Test",
      "exceptionStackTrace": null,
      "matches": ["Elastica\\Test"]
    },
    {
      "regex": "has \"keepFirst\" operator with invalid value in \"reqList\"",
      "exceptionStackTrace": null,
      "matches": ["has \"keepFirst\" operator with invalid value in \"reqList\""]
    },
    {
      "regex": "^([ \\t\\n]+)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "[/\\.]$dom_frag\\.",
      "exceptionStackTrace": null,
      "matches": ["/dom_frag.", ".dom_frag."]
    },
    {
      "regex": "DaemonSet/ds-app\\s+",
      "exceptionStackTrace": null,
      "matches": ["DaemonSet/ds-app  ", "DaemonSet/ds-app", "DaemonSet/ds-app "]
    },
    { "regex": "&rsaquo;", "exceptionStackTrace": null, "matches": ["&rsaquo;"] },
    {
      "regex": "(?:\\+|;|,|-|\\*\\*|\\*|\\/|>=|<=|=|<>|<|>|OR|AND|NOT|MOD|\\(|\\)|\\[|\\])",
      "exceptionStackTrace": null,
      "matches": [
        "]",
        "[",
        ")",
        "(",
        "MOD",
        "NOT",
        "AND",
        "OR",
        ">",
        "<",
        "<>",
        "=",
        "<=",
        ">=",
        "/",
        "*",
        "**",
        "-",
        ",",
        ";",
        "+"
      ]
    },
    {
      "regex": "^\\s*<<include\\s+(.+?)>>\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        " <<include evil>>  ",
        " <<include evil>>",
        " <<include >>> ",
        " <<include <>> ",
        " <<include eVil>> ",
        " <<include EVIL>> ",
        " <<include ev_il>> ",
        " <<include ev il>> ",
        " <<include ev4il>> ",
        " <<include e>> ",
        " <<include  >> ",
        " <<include 6>> ",
        " <<include _>> ",
        " <<include >> ",
        " <<include  evil>> ",
        " <<includeevil>> ",
        "  <<include evil>> ",
        "<<include evil>> ",
        "<<include evil>>",
        " <<include evil>> "
      ]
    },
    {
      "regex": "([^ ]+) : ?",
      "exceptionStackTrace": null,
      "matches": [
        "evil :  ",
        ": : ",
        "eVil : ",
        "EVIL : ",
        "ev_il : ",
        "ev il : ",
        "ev4il : ",
        "e : ",
        "  : ",
        "6 : ",
        "_ : ",
        " : ",
        "evil :",
        "evil : "
      ]
    },
    {
      "regex": "[^A-Za-z@_]",
      "exceptionStackTrace": null,
      "matches": ["a", "_", "A", "@", " ", "0"]
    },
    {
      "regex": "^\\w+\\s+(.+?)\\s+\\d+$",
      "exceptionStackTrace": null,
      "matches": [
        "evil evil 00",
        "evil evil ",
        "evil evil  0",
        "evil evil0",
        "evil eVil 0",
        "evil EVIL 0",
        "evil ev_il 0",
        "evil ev il 0",
        "evil ev4il 0",
        "evil e 0",
        "evil   0",
        "evil 6 0",
        "evil _ 0",
        "evil  0",
        "evil  evil 0",
        "evilevil 0",
        "eVil evil 0",
        "EVIL evil 0",
        "ev_il evil 0",
        "ev il evil 0",
        "ev4il evil 0",
        "e evil 0",
        "  evil 0",
        "6 evil 0",
        "_ evil 0",
        " evil 0",
        "evil evil 0"
      ]
    },
    {
      "regex": "(<E[^>]*><S>[Ii] ngach<\\/S> <A pl=\"n\" gnt=\"n\">(?:[Dd]h\\x{e1}|[Dd]ara|[Uu]ile|[Mm]\\x{ed}le)<\\/A><\\/E>)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "incomplete escape \\x"
      },
      "matches": []
    },
    {
      "regex": "^([^/\\s#]+\\/[^/\\s#]+)(#([^/\\s#]+))?$",
      "exceptionStackTrace": null,
      "matches": [
        "evil/evil#evil#evil",
        "evil/evil#/",
        "evil/evil##",
        "evil/evil#eVil",
        "evil/evil#EVIL",
        "evil/evil#ev_il",
        "evil/evil#ev il",
        "evil/evil#ev4il",
        "evil/evil#e",
        "evil/evil# ",
        "evil/evil#6",
        "evil/evil#_",
        "evil/evil#",
        "evil//#evil",
        "evil/##evil",
        "evil/eVil#evil",
        "evil/EVIL#evil",
        "evil/ev_il#evil",
        "evil/ev il#evil",
        "evil/ev4il#evil",
        "evil/e#evil",
        "evil/ #evil",
        "evil/6#evil",
        "evil/_#evil",
        "evil/#evil",
        "//evil#evil",
        "#/evil#evil",
        "eVil/evil#evil",
        "EVIL/evil#evil",
        "ev_il/evil#evil",
        "ev il/evil#evil",
        "ev4il/evil#evil",
        "e/evil#evil",
        " /evil#evil",
        "6/evil#evil",
        "_/evil#evil",
        "/evil#evil",
        "evil/evil",
        "evil/evil#evil"
      ]
    },
    {
      "regex": "\"endDelay\" is invalid",
      "exceptionStackTrace": null,
      "matches": ["\"endDelay\" is invalid"]
    },
    {
      "regex": "^\\S+/\\S+\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    { "regex": "fastflux", "exceptionStackTrace": null, "matches": ["fastflux"] },
    {
      "regex": "[^\\x09-\\x7f\\ufeff]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 9"
      },
      "matches": []
    },
    {
      "regex": "___HANY_NEWLINE___[ \t]*___HANY_NEWLINE___",
      "exceptionStackTrace": null,
      "matches": [
        "___HANY_NEWLINE___\t\t___HANY_NEWLINE___",
        "___HANY_NEWLINE___ ___HANY_NEWLINE___",
        "___HANY_NEWLINE______HANY_NEWLINE___",
        "___HANY_NEWLINE___\t___HANY_NEWLINE___"
      ]
    },
    {
      "regex": "browser_validations = false",
      "exceptionStackTrace": null,
      "matches": ["browser_validations = false"]
    },
    {
      "regex": "^Sir,.*",
      "exceptionStackTrace": null,
      "matches": [
        "Sir,,",
        "Sir,eVil",
        "Sir,EVIL",
        "Sir,ev_il",
        "Sir,ev il",
        "Sir,ev4il",
        "Sir,e",
        "Sir, ",
        "Sir,6",
        "Sir,_",
        "Sir,",
        "Sir,evil"
      ]
    },
    {
      "regex": "http:\\/\\/dynamicfoghost\\.com",
      "exceptionStackTrace": null,
      "matches": ["http://dynamicfoghost.com"]
    },
    {
      "regex": "GeoIP|GeoIP2|DB_File|Fast",
      "exceptionStackTrace": null,
      "matches": ["Fast", "DB_File", "GeoIP2", "GeoIP"]
    },
    {
      "regex": "storageservices\\/[-\\w]*$",
      "exceptionStackTrace": null,
      "matches": [
        "storageservices//",
        "storageservices/-",
        "storageservices/eVil",
        "storageservices/EVIL",
        "storageservices/ev_il",
        "storageservices/ev il",
        "storageservices/ev4il",
        "storageservices/e",
        "storageservices/ ",
        "storageservices/6",
        "storageservices/_",
        "storageservices/",
        "storageservices/evil"
      ]
    },
    {
      "regex": "\\.(js|jsx|tsx|ts)$",
      "exceptionStackTrace": null,
      "matches": [".ts", ".tsx", ".jsx", ".js"]
    },
    {
      "regex": "^(?P<station_name>[^_]+)_(?P<channel_nums>0\\+1_0|0\\+1_1)_(?P<year>\\d\\d\\d\\d)(?P<month>\\d\\d)(?P<day>\\d\\d)(_|\\$)(?P<hour>\\d\\d)(?P<minute>\\d\\d)(?P<second>\\d\\d)_(?P<fraction>\\d\\d\\d)\\.wav$",
      "exceptionStackTrace": null,
      "matches": [
        "._0+1_0_00000000_000000_000.wav",
        "+_0+1_0_00000000_000000_000.wav",
        "$_0+1_0_00000000_000000_000.wav",
        "eVil_0+1_0_00000000_000000_000.wav",
        "EVIL_0+1_0_00000000_000000_000.wav",
        "ev_il_0+1_0_00000000_000000_000.wav",
        "ev il_0+1_0_00000000_000000_000.wav",
        "ev4il_0+1_0_00000000_000000_000.wav",
        "e_0+1_0_00000000_000000_000.wav",
        " _0+1_0_00000000_000000_000.wav",
        "6_0+1_0_00000000_000000_000.wav",
        "__0+1_0_00000000_000000_000.wav",
        "_0+1_0_00000000_000000_000.wav",
        "evil_0+1_1_00000000_000000_000.wav",
        "evil_0+1_0_00000000$000000_000.wav",
        "evil_0+1_0_00000000_000000_000.wav"
      ]
    },
    {
      "regex": "\\d{13}",
      "exceptionStackTrace": null,
      "matches": ["00000000000000", "000000000000", "0000000000000"]
    },
    {
      "regex": "\n        ",
      "exceptionStackTrace": null,
      "matches": ["\n        "]
    },
    {
      "regex": "^(?:approve|reject)$",
      "exceptionStackTrace": null,
      "matches": ["reject", "approve"]
    },
    {
      "regex": "[a-zA-Z0-9-_\\. ]{0,100}",
      "exceptionStackTrace": null,
      "matches": [
        "                                                                                                     ",
        "                                                                                                    ",
        "a",
        "_",
        "A",
        "0",
        ".",
        "-",
        "",
        " "
      ]
    },
    { "regex": "infinity", "exceptionStackTrace": null, "matches": ["infinity"] },
    {
      "regex": "edit server",
      "exceptionStackTrace": null,
      "matches": ["edit server"]
    },
    {
      "regex": "\\-\\-|\\+\\+",
      "exceptionStackTrace": null,
      "matches": ["++", "--"]
    },
    {
      "regex": "^(?:NUMERIC\\b)",
      "exceptionStackTrace": null,
      "matches": ["NUMERIC"]
    },
    {
      "regex": "^create_dptable$",
      "exceptionStackTrace": null,
      "matches": ["create_dptable"]
    },
    {
      "regex": "^it is outputted$",
      "exceptionStackTrace": null,
      "matches": ["it is outputted"]
    },
    {
      "regex": "__DECRYPT\\('([A-Za-z0-9_]+)'\\)__",
      "exceptionStackTrace": null,
      "matches": [
        "__DECRYPT(')')__",
        "__DECRYPT('(')__",
        "__DECRYPT(''')__",
        "__DECRYPT('eVil')__",
        "__DECRYPT('EVIL')__",
        "__DECRYPT('ev_il')__",
        "__DECRYPT('ev il')__",
        "__DECRYPT('ev4il')__",
        "__DECRYPT('e')__",
        "__DECRYPT(' ')__",
        "__DECRYPT('6')__",
        "__DECRYPT('_')__",
        "__DECRYPT('')__",
        "__DECRYPT('evil')__"
      ]
    },
    {
      "regex": "(?<all>\\$\\{(?<label>[a-zA-Z0-9\\-_:\\.]+)\\})",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<a"
      },
      "matches": []
    },
    {
      "regex": "^www\\.reddit\\.com/r/([a-z\\d]+?)/",
      "exceptionStackTrace": null,
      "matches": [
        "www.reddit.com/r/eVil/",
        "www.reddit.com/r/EVIL/",
        "www.reddit.com/r/ev_il/",
        "www.reddit.com/r/ev il/",
        "www.reddit.com/r/ev4il/",
        "www.reddit.com/r/e/",
        "www.reddit.com/r/ /",
        "www.reddit.com/r/6/",
        "www.reddit.com/r/_/",
        "www.reddit.com/r//",
        "www.reddit.com/r/evil/"
      ]
    },
    {
      "regex": "^(\\w+):\\/\\/([a-z0-9\\.\\-]+)\\:?([0-9]{2,5})?(\\/[^?]*)[\\?]?(.*)?$",
      "exceptionStackTrace": null,
      "matches": [
        "evil://evil:00/evil?evilevil",
        "evil://evil:00/evil??",
        "evil://evil:00/evil?:",
        "evil://evil:00/evil?/",
        "evil://evil:00/evil?.",
        "evil://evil:00/evil?-",
        "evil://evil:00/evil?eVil",
        "evil://evil:00/evil?EVIL",
        "evil://evil:00/evil?ev_il",
        "evil://evil:00/evil?ev il",
        "evil://evil:00/evil?ev4il",
        "evil://evil:00/evil?e",
        "evil://evil:00/evil? ",
        "evil://evil:00/evil?6",
        "evil://evil:00/evil?_",
        "evil://evil:00/evil?",
        "evil://evil:00/evil??evil",
        "evil://evil:00/evilevil",
        "evil://evil:00/??evil",
        "evil://evil:00/:?evil",
        "evil://evil:00//?evil",
        "evil://evil:00/.?evil",
        "evil://evil:00/-?evil",
        "evil://evil:00/eVil?evil",
        "evil://evil:00/EVIL?evil",
        "evil://evil:00/ev_il?evil",
        "evil://evil:00/ev il?evil",
        "evil://evil:00/ev4il?evil",
        "evil://evil:00/e?evil",
        "evil://evil:00/ ?evil",
        "evil://evil:00/6?evil",
        "evil://evil:00/_?evil",
        "evil://evil:00/?evil",
        "evil://evil:0000/evil?evil",
        "evil://evil:/evil?evil",
        "evil://evil:000000/evil?evil",
        "evil://evil:00000/evil?evil",
        "evil://evil:0/evil?evil",
        "evil://evil::00/evil?evil",
        "evil://evil00/evil?evil",
        "evil://?:00/evil?evil",
        "evil://::00/evil?evil",
        "evil:///:00/evil?evil",
        "evil://.:00/evil?evil",
        "evil://-:00/evil?evil",
        "evil://eVil:00/evil?evil",
        "evil://EVIL:00/evil?evil",
        "evil://ev_il:00/evil?evil",
        "evil://ev il:00/evil?evil",
        "evil://ev4il:00/evil?evil",
        "evil://e:00/evil?evil",
        "evil:// :00/evil?evil",
        "evil://6:00/evil?evil",
        "evil://_:00/evil?evil",
        "evil://:00/evil?evil",
        "eVil://evil:00/evil?evil",
        "EVIL://evil:00/evil?evil",
        "ev_il://evil:00/evil?evil",
        "ev il://evil:00/evil?evil",
        "ev4il://evil:00/evil?evil",
        "e://evil:00/evil?evil",
        " ://evil:00/evil?evil",
        "6://evil:00/evil?evil",
        "_://evil:00/evil?evil",
        "://evil:00/evil?evil",
        "evil://evil/",
        "evil://evil:00/evil?evil"
      ]
    },
    {
      "regex": "^([0-9a-f]+)$",
      "exceptionStackTrace": null,
      "matches": ["aa", "", "g", "0", "a"]
    },
    { "regex": "\u03b1", "exceptionStackTrace": null, "matches": ["\u03b1"] },
    {
      "regex": "^([0-9]){5}$",
      "exceptionStackTrace": null,
      "matches": ["000000", "0000", "00000"]
    },
    {
      "regex": "(\\.css)?\\.liquid$",
      "exceptionStackTrace": null,
      "matches": [".css.css.liquid", ".liquid", ".css.liquid"]
    },
    { "regex": " \\(DBD:", "exceptionStackTrace": null, "matches": [" (DBD:"] },
    {
      "regex": "No such module",
      "exceptionStackTrace": null,
      "matches": ["No such module"]
    },
    {
      "regex": "Tries must be an integer",
      "exceptionStackTrace": null,
      "matches": ["Tries must be an integer"]
    },
    {
      "regex": "^[-:\\w]*$",
      "exceptionStackTrace": null,
      "matches": [
        ":",
        "-",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "(</?textarea.*>)",
      "exceptionStackTrace": null,
      "matches": [
        "</textarea>>",
        "</textarea<>",
        "</textarea/>",
        "</textareaeVil>",
        "</textareaEVIL>",
        "</textareaev_il>",
        "</textareaev il>",
        "</textareaev4il>",
        "</textareae>",
        "</textarea >",
        "</textarea6>",
        "</textarea_>",
        "</textarea>",
        "<//textareaevil>",
        "<textareaevil>",
        "<textarea>",
        "</textareaevil>"
      ]
    },
    {
      "regex": "(?:https?:)?\\\\{2,}",
      "exceptionStackTrace": null,
      "matches": [
        "https:\\",
        "https:https:\\\\",
        "httpss:\\\\",
        "http:\\\\",
        "\\\\",
        "https:\\\\"
      ]
    },
    { "regex": "<session", "exceptionStackTrace": null, "matches": ["<session"] },
    {
      "regex": "\\\\u(d[89ab][0-9a-f]{2})\\\\u(d[cdef][0-9a-f]{2})",
      "exceptionStackTrace": null,
      "matches": [
        "\\udbaa\\udfaaa",
        "\\udbaa\\udfa",
        "\\udbaa\\udfga",
        "\\udbaa\\udf0a",
        "\\udbaa\\udeaa",
        "\\udbaa\\uddaa",
        "\\udbaa\\udcaa",
        "\\udbaa\\udaaa",
        "\\udbaaa\\udfaa",
        "\\udba\\udfaa",
        "\\udbga\\udfaa",
        "\\udb0a\\udfaa",
        "\\udcaa\\udfaa",
        "\\udaaa\\udfaa",
        "\\ud9aa\\udfaa",
        "\\ud8aa\\udfaa",
        "\\ud0aa\\udfaa",
        "\\udbaa\\udfaa"
      ]
    },
    {
      "regex": "^(lt|amp|quot)$",
      "exceptionStackTrace": null,
      "matches": ["quot", "amp", "lt"]
    },
    {
      "regex": "Confirm selected station    \\[ y/n \\] -->\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        "Confirm selected station    [ y/n ] -->  ",
        "Confirm selected station    [ y/n ] -->",
        "Confirm selected station    [ y/n ] --> "
      ]
    },
    { "regex": "SOFTWARE", "exceptionStackTrace": null, "matches": ["SOFTWARE"] },
    { "regex": "^use_", "exceptionStackTrace": null, "matches": ["use_"] },
    {
      "regex": "^(?P<INTERFACE>\\S+):\\s+Type:\\s(?P<TYPE>.*)\\s+Bus:\\s+(?P<BUS>.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil: Type: evil Bus: :",
        "evil: Type: evil Bus: eVil",
        "evil: Type: evil Bus: EVIL",
        "evil: Type: evil Bus: ev_il",
        "evil: Type: evil Bus: ev il",
        "evil: Type: evil Bus: ev4il",
        "evil: Type: evil Bus: e",
        "evil: Type: evil Bus:  ",
        "evil: Type: evil Bus: 6",
        "evil: Type: evil Bus: _",
        "evil: Type: evil Bus: ",
        "evil: Type: evil Bus:  evil",
        "evil: Type: evil Bus:evil",
        "evil: Type: evil  Bus: evil",
        "evil: Type: evilBus: evil",
        "evil: Type: : Bus: evil",
        "evil: Type: eVil Bus: evil",
        "evil: Type: EVIL Bus: evil",
        "evil: Type: ev_il Bus: evil",
        "evil: Type: ev il Bus: evil",
        "evil: Type: ev4il Bus: evil",
        "evil: Type: e Bus: evil",
        "evil: Type:   Bus: evil",
        "evil: Type: 6 Bus: evil",
        "evil: Type: _ Bus: evil",
        "evil: Type:  Bus: evil",
        "evil:  Type: evil Bus: evil",
        "evil:Type: evil Bus: evil",
        ":: Type: evil Bus: evil",
        "eVil: Type: evil Bus: evil",
        "EVIL: Type: evil Bus: evil",
        "ev_il: Type: evil Bus: evil",
        "ev il: Type: evil Bus: evil",
        "ev4il: Type: evil Bus: evil",
        "e: Type: evil Bus: evil",
        " : Type: evil Bus: evil",
        "6: Type: evil Bus: evil",
        "_: Type: evil Bus: evil",
        ": Type: evil Bus: evil",
        "evil: Type:  Bus: ",
        "evil: Type: evil Bus: evil"
      ]
    },
    {
      "regex": "(^|\\b|@)(\\.\\/~|\\.{0,2}\\/[^\\s]+\\/node_modules)\\/\\w+-loader(\\/[^?!]+)?(\\?\\?[\\w_.-]+|\\?({[\\s\\S]*?})?)?!",
      "exceptionStackTrace": null,
      "matches": [
        "./~/node_modules/evil-loader/evil??evil!",
        "./}/node_modules/evil-loader/evil??evil!",
        "./{/node_modules/evil-loader/evil??evil!",
        "./@/node_modules/evil-loader/evil??evil!",
        "./?/node_modules/evil-loader/evil??evil!",
        ".///node_modules/evil-loader/evil??evil!",
        "././node_modules/evil-loader/evil??evil!",
        "./-/node_modules/evil-loader/evil??evil!",
        "./!/node_modules/evil-loader/evil??evil!",
        "./eVil/node_modules/evil-loader/evil??evil!",
        "./EVIL/node_modules/evil-loader/evil??evil!",
        "./ev_il/node_modules/evil-loader/evil??evil!",
        "./ev il/node_modules/evil-loader/evil??evil!",
        "./ev4il/node_modules/evil-loader/evil??evil!",
        "./e/node_modules/evil-loader/evil??evil!",
        "./ /node_modules/evil-loader/evil??evil!",
        "./6/node_modules/evil-loader/evil??evil!",
        "./_/node_modules/evil-loader/evil??evil!",
        ".//node_modules/evil-loader/evil??evil!",
        ".../evil/node_modules/evil-loader/evil??evil!",
        "../evil/node_modules/evil-loader/evil??evil!",
        "/evil/node_modules/evil-loader/evil??evil!",
        "./~/evil-loader/evil?{evil}{evil}!",
        "./~/evil-loader/evil?!",
        "./~/evil-loader/evil?{~}!",
        "./~/evil-loader/evil?{}}!",
        "./~/evil-loader/evil?{{}!",
        "./~/evil-loader/evil?{@}!",
        "./~/evil-loader/evil?{?}!",
        "./~/evil-loader/evil?{/}!",
        "./~/evil-loader/evil?{.}!",
        "./~/evil-loader/evil?{-}!",
        "./~/evil-loader/evil?{!}!",
        "./~/evil-loader/evil?{eVil}!",
        "./~/evil-loader/evil?{EVIL}!",
        "./~/evil-loader/evil?{ev_il}!",
        "./~/evil-loader/evil?{ev il}!",
        "./~/evil-loader/evil?{ev4il}!",
        "./~/evil-loader/evil?{e}!",
        "./~/evil-loader/evil?{ }!",
        "./~/evil-loader/evil?{6}!",
        "./~/evil-loader/evil?{_}!",
        "./~/evil-loader/evil?{}!",
        "./~/evil-loader/evil??evil??evil!",
        "./~/evil-loader/evil!",
        "./~/evil-loader/evil??~!",
        "./~/evil-loader/evil??}!",
        "./~/evil-loader/evil??{!",
        "./~/evil-loader/evil??@!",
        "./~/evil-loader/evil???!",
        "./~/evil-loader/evil??/!",
        "./~/evil-loader/evil??.!",
        "./~/evil-loader/evil??-!",
        "./~/evil-loader/evil??!!",
        "./~/evil-loader/evil??eVil!",
        "./~/evil-loader/evil??EVIL!",
        "./~/evil-loader/evil??ev_il!",
        "./~/evil-loader/evil??ev il!",
        "./~/evil-loader/evil??ev4il!",
        "./~/evil-loader/evil??e!",
        "./~/evil-loader/evil?? !",
        "./~/evil-loader/evil??6!",
        "./~/evil-loader/evil??_!",
        "./~/evil-loader/evil??!",
        "./~/evil-loader/evil/evil??evil!",
        "./~/evil-loader??evil!",
        "./~/evil-loader/~??evil!",
        "./~/evil-loader/}??evil!",
        "./~/evil-loader/{??evil!",
        "./~/evil-loader/@??evil!",
        "./~/evil-loader/???evil!",
        "./~/evil-loader//??evil!",
        "./~/evil-loader/.??evil!",
        "./~/evil-loader/-??evil!",
        "./~/evil-loader/!??evil!",
        "./~/evil-loader/eVil??evil!",
        "./~/evil-loader/EVIL??evil!",
        "./~/evil-loader/ev_il??evil!",
        "./~/evil-loader/ev il??evil!",
        "./~/evil-loader/ev4il??evil!",
        "./~/evil-loader/e??evil!",
        "./~/evil-loader/ ??evil!",
        "./~/evil-loader/6??evil!",
        "./~/evil-loader/_??evil!",
        "./~/evil-loader/??evil!",
        "./~/eVil-loader/evil??evil!",
        "./~/EVIL-loader/evil??evil!",
        "./~/ev_il-loader/evil??evil!",
        "./~/ev il-loader/evil??evil!",
        "./~/ev4il-loader/evil??evil!",
        "./~/e-loader/evil??evil!",
        "./~/ -loader/evil??evil!",
        "./~/6-loader/evil??evil!",
        "./~/_-loader/evil??evil!",
        "./~/-loader/evil??evil!",
        "@./~/evil-loader!",
        "/evil/node_modules/evil-loader!",
        "./~/evil-loader!",
        "@./~/evil-loader/evil??evil!",
        "./evil/node_modules/evil-loader/evil??evil!",
        "./~/evil-loader/evil?{evil}!",
        "./~/evil-loader/evil??evil!"
      ]
    },
    {
      "regex": "so[0-9\\.]*$",
      "exceptionStackTrace": null,
      "matches": ["so..", "so0", "so", "so."]
    },
    {
      "regex": "routes = ",
      "exceptionStackTrace": null,
      "matches": ["routes = "]
    },
    {
      "regex": "\"\"\"(?!\")",
      "exceptionStackTrace": null,
      "matches": ["\"\"\""]
    },
    {
      "regex": "^[^0-9\\-\\.]$",
      "exceptionStackTrace": null,
      "matches": ["A", "0", ".", "-", " ", "a"]
    },
    {
      "regex": "^\\{to:(.+)}(.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "{to:evil}}",
        "{to:evil}{",
        "{to:evil}:",
        "{to:evil}eVil",
        "{to:evil}EVIL",
        "{to:evil}ev_il",
        "{to:evil}ev il",
        "{to:evil}ev4il",
        "{to:evil}e",
        "{to:evil} ",
        "{to:evil}6",
        "{to:evil}_",
        "{to:evil}",
        "{to:}}evil",
        "{to:{}evil",
        "{to::}evil",
        "{to:eVil}evil",
        "{to:EVIL}evil",
        "{to:ev_il}evil",
        "{to:ev il}evil",
        "{to:ev4il}evil",
        "{to:e}evil",
        "{to: }evil",
        "{to:6}evil",
        "{to:_}evil",
        "{to:}evil",
        "{to:evil}evil"
      ]
    },
    {
      "regex": "[\\u0113]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 275"
      },
      "matches": []
    },
    {
      "regex": " => (?P<path>.+)\\[\\+0x(?P<offset>.\\S*)\\] \\<(?P<pos>.\\S+)\\>",
      "exceptionStackTrace": null,
      "matches": [
        " => evil[+0xaevil] <a]>",
        " => evil[+0xaevil] <a[>",
        " => evil[+0xaevil] <a>>",
        " => evil[+0xaevil] <a=>",
        " => evil[+0xaevil] <a<>",
        " => evil[+0xaevil] <a+>",
        " => evil[+0xaevil] <aeVil>",
        " => evil[+0xaevil] <aEVIL>",
        " => evil[+0xaevil] <aev_il>",
        " => evil[+0xaevil] <aev il>",
        " => evil[+0xaevil] <aev4il>",
        " => evil[+0xaevil] <ae>",
        " => evil[+0xaevil] <a >",
        " => evil[+0xaevil] <a6>",
        " => evil[+0xaevil] <a_>",
        " => evil[+0xaevil] <a>",
        " => evil[+0xaevil] <]evil>",
        " => evil[+0xaevil] <[evil>",
        " => evil[+0xaevil] <Aevil>",
        " => evil[+0xaevil] <>evil>",
        " => evil[+0xaevil] <=evil>",
        " => evil[+0xaevil] <<evil>",
        " => evil[+0xaevil] <0evil>",
        " => evil[+0xaevil] <+evil>",
        " => evil[+0xaevil] < evil>",
        " => evil[+0xa]] <aevil>",
        " => evil[+0xa[] <aevil>",
        " => evil[+0xa>] <aevil>",
        " => evil[+0xa=] <aevil>",
        " => evil[+0xa<] <aevil>",
        " => evil[+0xa+] <aevil>",
        " => evil[+0xaeVil] <aevil>",
        " => evil[+0xaEVIL] <aevil>",
        " => evil[+0xaev_il] <aevil>",
        " => evil[+0xaev il] <aevil>",
        " => evil[+0xaev4il] <aevil>",
        " => evil[+0xae] <aevil>",
        " => evil[+0xa ] <aevil>",
        " => evil[+0xa6] <aevil>",
        " => evil[+0xa_] <aevil>",
        " => evil[+0x]evil] <aevil>",
        " => evil[+0x[evil] <aevil>",
        " => evil[+0xAevil] <aevil>",
        " => evil[+0x>evil] <aevil>",
        " => evil[+0x=evil] <aevil>",
        " => evil[+0x<evil] <aevil>",
        " => evil[+0x0evil] <aevil>",
        " => evil[+0x+evil] <aevil>",
        " => evil[+0x evil] <aevil>",
        " => ][+0xaevil] <aevil>",
        " => [[+0xaevil] <aevil>",
        " => >[+0xaevil] <aevil>",
        " => =[+0xaevil] <aevil>",
        " => <[+0xaevil] <aevil>",
        " => +[+0xaevil] <aevil>",
        " => eVil[+0xaevil] <aevil>",
        " => EVIL[+0xaevil] <aevil>",
        " => ev_il[+0xaevil] <aevil>",
        " => ev il[+0xaevil] <aevil>",
        " => ev4il[+0xaevil] <aevil>",
        " => e[+0xaevil] <aevil>",
        " =>  [+0xaevil] <aevil>",
        " => 6[+0xaevil] <aevil>",
        " => _[+0xaevil] <aevil>",
        " => [+0xaevil] <aevil>",
        " => evil[+0xa] <aevil>",
        " => evil[+0xaevil] <aevil>"
      ]
    },
    {
      "regex": "^(Arrow)?FunctionExpression$",
      "exceptionStackTrace": null,
      "matches": [
        "ArrowArrowFunctionExpression",
        "FunctionExpression",
        "ArrowFunctionExpression"
      ]
    },
    {
      "regex": " *= require_self$\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^--rows=(\\d*)",
      "exceptionStackTrace": null,
      "matches": ["--rows=00", "--rows=", "--rows=0"]
    },
    {
      "regex": "^alias:(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "alias::",
        "alias:eVil",
        "alias:EVIL",
        "alias:ev_il",
        "alias:ev il",
        "alias:ev4il",
        "alias:e",
        "alias: ",
        "alias:6",
        "alias:_",
        "alias:",
        "alias:evil"
      ]
    },
    {
      "regex": "[\\x{A0}\\x{2000}-\\x{200B}]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "incomplete escape \\x"
      },
      "matches": []
    },
    {
      "regex": "\\/.cache\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "util\\.debug is deprecated",
      "exceptionStackTrace": null,
      "matches": ["util.debug is deprecated"]
    },
    {
      "regex": "[&<>\\\"\\']",
      "exceptionStackTrace": null,
      "matches": [">", "<", "&", "\"", "'"]
    },
    {
      "regex": "(\\r?\\n)*\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "qqxqwxeqw",
      "exceptionStackTrace": null,
      "matches": ["qqxqwxeqw"]
    },
    {
      "regex": "<?xml version",
      "exceptionStackTrace": null,
      "matches": ["<<xml version", "xml version", "<xml version"]
    },
    {
      "regex": "^(?:SQLCODE\\b)",
      "exceptionStackTrace": null,
      "matches": ["SQLCODE"]
    },
    {
      "regex": "[0-9a-f.]+",
      "exceptionStackTrace": null,
      "matches": ["..", "", "g", "a", "0", "."]
    },
    {
      "regex": "^\\s*arboleya:electrify\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        " arboleya:electrify  ",
        " arboleya:electrify",
        "  arboleya:electrify ",
        "arboleya:electrify ",
        "arboleya:electrify",
        " arboleya:electrify "
      ]
    },
    {
      "regex": "PostBuildScript((.)*?)(\\n|\\r)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "(install :: .*)$",
      "exceptionStackTrace": null,
      "matches": [
        "install :: :",
        "install :: eVil",
        "install :: EVIL",
        "install :: ev_il",
        "install :: ev il",
        "install :: ev4il",
        "install :: e",
        "install ::  ",
        "install :: 6",
        "install :: _",
        "install :: ",
        "install :: evil"
      ]
    },
    {
      "regex": "^(622338)\\d{13}$",
      "exceptionStackTrace": null,
      "matches": [
        "62233800000000000000",
        "622338000000000000",
        "6223380000000000000"
      ]
    },
    {
      "regex": "^Sbjct:\\s+(\\d+)\\s*(\\S+)\\s+(\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "Sbjct: 0 evil 00",
        "Sbjct: 0 evil ",
        "Sbjct: 0 evil  0",
        "Sbjct: 0 evil0",
        "Sbjct: 0 : 0",
        "Sbjct: 0 eVil 0",
        "Sbjct: 0 EVIL 0",
        "Sbjct: 0 ev_il 0",
        "Sbjct: 0 ev il 0",
        "Sbjct: 0 ev4il 0",
        "Sbjct: 0 e 0",
        "Sbjct: 0   0",
        "Sbjct: 0 6 0",
        "Sbjct: 0 _ 0",
        "Sbjct: 0  0",
        "Sbjct: 0  evil 0",
        "Sbjct: 00 evil 0",
        "Sbjct:  evil 0",
        "Sbjct:  0 evil 0",
        "Sbjct:0 evil 0",
        "Sbjct: 0evil 0",
        "Sbjct: 0 evil 0"
      ]
    },
    {
      "regex": "InnoDB|IBMDB2I",
      "exceptionStackTrace": null,
      "matches": ["IBMDB2I", "InnoDB"]
    },
    {
      "regex": " \\s* [>] \\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    { "regex": "TICK", "exceptionStackTrace": null, "matches": ["TICK"] },
    {
      "regex": "\\beventName\\b",
      "exceptionStackTrace": null,
      "matches": ["eventName"]
    },
    {
      "regex": "(\n%changelog\n\\*[^\n]+\n)\n",
      "exceptionStackTrace": null,
      "matches": [
        "\n%changelog\n**\n\n",
        "\n%changelog\n*%\n\n",
        "\n%changelog\n*eVil\n\n",
        "\n%changelog\n*EVIL\n\n",
        "\n%changelog\n*ev_il\n\n",
        "\n%changelog\n*ev il\n\n",
        "\n%changelog\n*ev4il\n\n",
        "\n%changelog\n*e\n\n",
        "\n%changelog\n* \n\n",
        "\n%changelog\n*6\n\n",
        "\n%changelog\n*_\n\n",
        "\n%changelog\n*\n\n",
        "\n%changelog\n*evil\n\n"
      ]
    },
    {
      "regex": "\\(this\\)\\);?$",
      "exceptionStackTrace": null,
      "matches": ["(this));;", "(this))", "(this));"]
    },
    {
      "regex": "([\\d]+)\\%",
      "exceptionStackTrace": null,
      "matches": ["00%", "%", "0%"]
    },
    {
      "regex": "[ntvbrfa\\\\\\?'\"\\(\\[\\{]",
      "exceptionStackTrace": null,
      "matches": [
        "v",
        "t",
        "r",
        "n",
        "f",
        "c",
        "b",
        "a",
        "\\",
        "[",
        "?",
        "(",
        "'",
        "\"",
        "{"
      ]
    },
    {
      "regex": "^(npm|yarn):(\\S+)(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "npm:evil:",
        "npm:evileVil",
        "npm:evilEVIL",
        "npm:evilev_il",
        "npm:evilev il",
        "npm:evilev4il",
        "npm:evile",
        "npm:evil ",
        "npm:evil6",
        "npm:evil_",
        "npm::evil",
        "npm:eVilevil",
        "npm:EVILevil",
        "npm:ev_ilevil",
        "npm:ev ilevil",
        "npm:ev4ilevil",
        "npm:eevil",
        "npm: evil",
        "npm:6evil",
        "npm:_evil",
        "yarn:evil",
        "npm:evil",
        "yarn:evilevil",
        "npm:evilevil"
      ]
    },
    {
      "regex": "^(.*?)(\\/|%|\\?|;|#|$)",
      "exceptionStackTrace": null,
      "matches": [
        "?/",
        ";/",
        "//",
        "%/",
        "#/",
        "eVil/",
        "EVIL/",
        "ev_il/",
        "ev il/",
        "ev4il/",
        "e/",
        " /",
        "6/",
        "_/",
        "",
        "#",
        ";",
        "?",
        "%",
        "/",
        "evil",
        "evil#",
        "evil;",
        "evil?",
        "evil%",
        "evil/"
      ]
    },
    { "regex": "fasta", "exceptionStackTrace": null, "matches": ["fasta"] },
    {
      "regex": "(\\d{4})[\\/\\-]*(\\d{2})[\\/\\-]*(\\d{2})[\\/\\-]*(.+?)(\\.[^\\.]+|\\.[^\\.]+\\.[^\\.]+)$",
      "exceptionStackTrace": null,
      "matches": [
        "0000-00-00-evil.evil./",
        "0000-00-00-evil.evil..",
        "0000-00-00-evil.evil.-",
        "0000-00-00-evil.evil.eVil",
        "0000-00-00-evil.evil.EVIL",
        "0000-00-00-evil.evil.ev_il",
        "0000-00-00-evil.evil.ev il",
        "0000-00-00-evil.evil.ev4il",
        "0000-00-00-evil.evil.e",
        "0000-00-00-evil.evil. ",
        "0000-00-00-evil.evil.6",
        "0000-00-00-evil.evil._",
        "0000-00-00-evil.evil.",
        "0000-00-00-evil./.evil",
        "0000-00-00-evil...evil",
        "0000-00-00-evil.-.evil",
        "0000-00-00-evil.eVil.evil",
        "0000-00-00-evil.EVIL.evil",
        "0000-00-00-evil.ev_il.evil",
        "0000-00-00-evil.ev il.evil",
        "0000-00-00-evil.ev4il.evil",
        "0000-00-00-evil.e.evil",
        "0000-00-00-evil. .evil",
        "0000-00-00-evil.6.evil",
        "0000-00-00-evil._.evil",
        "0000-00-00-evil..evil",
        "0000-00-00-evil./",
        "0000-00-00-evil..",
        "0000-00-00-evil.-",
        "0000-00-00-evil.eVil",
        "0000-00-00-evil.EVIL",
        "0000-00-00-evil.ev_il",
        "0000-00-00-evil.ev il",
        "0000-00-00-evil.ev4il",
        "0000-00-00-evil.e",
        "0000-00-00-evil. ",
        "0000-00-00-evil.6",
        "0000-00-00-evil._",
        "0000-00-00-evil.",
        "0000-00-00-/.evil",
        "0000-00-00-..evil",
        "0000-00-00--.evil",
        "0000-00-00-eVil.evil",
        "0000-00-00-EVIL.evil",
        "0000-00-00-ev_il.evil",
        "0000-00-00-ev il.evil",
        "0000-00-00-ev4il.evil",
        "0000-00-00-e.evil",
        "0000-00-00- .evil",
        "0000-00-00-6.evil",
        "0000-00-00-_.evil",
        "0000-00-00-.evil",
        "0000-00-00--evil.evil",
        "0000-00-00evil.evil",
        "0000-00-00/evil.evil",
        "0000-00-000-evil.evil",
        "0000-00-0-evil.evil",
        "0000-00--00-evil.evil",
        "0000-0000-evil.evil",
        "0000-00/00-evil.evil",
        "0000-000-00-evil.evil",
        "0000-0-00-evil.evil",
        "0000--00-00-evil.evil",
        "000000-00-evil.evil",
        "0000/00-00-evil.evil",
        "00000-00-00-evil.evil",
        "000-00-00-evil.evil",
        "00000000evil.evil.evil",
        "00000000evil.evil",
        "0000-00-00-evil.evil.evil",
        "0000-00-00-evil.evil"
      ]
    },
    {
      "regex": "^Terraform v([0-9]*).([0-9]*).([0-9]*)$",
      "exceptionStackTrace": null,
      "matches": [
        "Terraform v0a0a00",
        "Terraform v0a0a",
        "Terraform v0a0_0",
        "Terraform v0a0A0",
        "Terraform v0a000",
        "Terraform v0a0 0",
        "Terraform v0a00a0",
        "Terraform v0aa0",
        "Terraform v0_0a0",
        "Terraform v0A0a0",
        "Terraform v000a0",
        "Terraform v0 0a0",
        "Terraform v00a0a0",
        "Terraform va0a0",
        "Terraform vaa",
        "Terraform v0a0a0"
      ]
    },
    {
      "regex": "[a-zA-Z0-9:\\-_]*?\\.box",
      "exceptionStackTrace": null,
      "matches": [
        ":.box",
        "..box",
        "-.box",
        "eVil.box",
        "EVIL.box",
        "ev_il.box",
        "ev il.box",
        "ev4il.box",
        "e.box",
        " .box",
        "6.box",
        "_.box",
        ".box",
        "evil.box"
      ]
    },
    {
      "regex": "react-heatpack[\\\\/]entry.js$",
      "exceptionStackTrace": null,
      "matches": [
        "react-heatpack/entry\\js",
        "react-heatpack/entryAjs",
        "react-heatpack/entry0js",
        "react-heatpack/entry/js",
        "react-heatpack/entry-js",
        "react-heatpack/entry js",
        "react-heatpack\\entryajs",
        "react-heatpack/entryajs"
      ]
    },
    {
      "regex": "Info: Caching catalog for",
      "exceptionStackTrace": null,
      "matches": ["Info: Caching catalog for"]
    },
    {
      "regex": "seq\\.(.*?)\\.(\\d*?)\\.(\\d+)$",
      "exceptionStackTrace": null,
      "matches": [
        "seq.evil.0.00",
        "seq.evil.0.",
        "seq.evil.00.0",
        "seq.evil..0",
        "seq...0.0",
        "seq.eVil.0.0",
        "seq.EVIL.0.0",
        "seq.ev_il.0.0",
        "seq.ev il.0.0",
        "seq.ev4il.0.0",
        "seq.e.0.0",
        "seq. .0.0",
        "seq.6.0.0",
        "seq._.0.0",
        "seq..0.0",
        "seq...0",
        "seq.evil.0.0"
      ]
    },
    {
      "regex": "; *(A651|A701B?|A702|A703|A705|A706|A707|A711|A712|A713|A717|A722|A785|A801|A802|A803|A901|A902|A1002|A1003|A1006|A1007|A9701|A9703|Q710|Q80) Build",
      "exceptionStackTrace": null,
      "matches": [
        "; A701BB Build",
        "; A701 Build",
        ";  A651 Build",
        ";Q80 Build",
        ";Q710 Build",
        ";A9703 Build",
        ";A9701 Build",
        ";A1007 Build",
        ";A1006 Build",
        ";A1003 Build",
        ";A1002 Build",
        ";A902 Build",
        ";A901 Build",
        ";A803 Build",
        ";A802 Build",
        ";A801 Build",
        ";A785 Build",
        ";A722 Build",
        ";A717 Build",
        ";A713 Build",
        ";A712 Build",
        ";A711 Build",
        ";A707 Build",
        ";A706 Build",
        ";A705 Build",
        ";A703 Build",
        ";A702 Build",
        ";A701 Build",
        ";A651 Build",
        "; Q80 Build",
        "; Q710 Build",
        "; A9703 Build",
        "; A9701 Build",
        "; A1007 Build",
        "; A1006 Build",
        "; A1003 Build",
        "; A1002 Build",
        "; A902 Build",
        "; A901 Build",
        "; A803 Build",
        "; A802 Build",
        "; A801 Build",
        "; A785 Build",
        "; A722 Build",
        "; A717 Build",
        "; A713 Build",
        "; A712 Build",
        "; A711 Build",
        "; A707 Build",
        "; A706 Build",
        "; A705 Build",
        "; A703 Build",
        "; A702 Build",
        "; A701B Build",
        "; A651 Build"
      ]
    },
    {
      "regex": "URL:\\s*([^\\n]*)\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "(?i)\\b(?<_1>url(?<_2>decode|encode)|parse_url|get_headers|rawurl(?<_3>decode|encode))(?=\\s*\\()",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<_"
      },
      "matches": []
    },
    { "regex": "\\\\surd ", "exceptionStackTrace": null, "matches": ["\\surd "] },
    { "regex": "Page99", "exceptionStackTrace": null, "matches": ["Page99"] },
    { "regex": ":\\.\\*$", "exceptionStackTrace": null, "matches": [":.*"] },
    {
      "regex": "Scratches",
      "exceptionStackTrace": null,
      "matches": ["Scratches"]
    },
    {
      "regex": "Plugin (.)+ was not found in repository",
      "exceptionStackTrace": null,
      "matches": [
        "Plugin aa was not found in repository",
        "Plugin  was not found in repository",
        "Plugin _ was not found in repository",
        "Plugin A was not found in repository",
        "Plugin 0 was not found in repository",
        "Plugin   was not found in repository",
        "Plugin a was not found in repository"
      ]
    },
    {
      "regex": "\\n1 SEX [MFU]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "snmp-server community (.+) ",
      "exceptionStackTrace": null,
      "matches": [
        "snmp-server community - ",
        "snmp-server community eVil ",
        "snmp-server community EVIL ",
        "snmp-server community ev_il ",
        "snmp-server community ev il ",
        "snmp-server community ev4il ",
        "snmp-server community e ",
        "snmp-server community   ",
        "snmp-server community 6 ",
        "snmp-server community _ ",
        "snmp-server community  ",
        "snmp-server community evil "
      ]
    },
    {
      "regex": "^(rid|rownum)$",
      "exceptionStackTrace": null,
      "matches": ["rownum", "rid"]
    },
    {
      "regex": "does not exist\\s*\\Z",
      "exceptionStackTrace": null,
      "matches": ["does not exist  ", "does not exist", "does not exist "]
    },
    {
      "regex": "^[a-z][0-9a-zA-Z_]*",
      "exceptionStackTrace": null,
      "matches": [
        "aeVil",
        "aEVIL",
        "aev_il",
        "aev il",
        "aev4il",
        "ae",
        "a ",
        "a6",
        "a_",
        "a",
        "aevil"
      ]
    },
    {
      "regex": "(\\n|\\r|\\r\\n)\\s*",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^an environment file with the following after hook:$",
      "exceptionStackTrace": null,
      "matches": ["an environment file with the following after hook:"]
    },
    {
      "regex": "ZODB.POSException.ConflictError",
      "exceptionStackTrace": null,
      "matches": [
        "ZODBaPOSException_ConflictError",
        "ZODBaPOSExceptionAConflictError",
        "ZODBaPOSException0ConflictError",
        "ZODBaPOSException ConflictError",
        "ZODB_POSExceptionaConflictError",
        "ZODBAPOSExceptionaConflictError",
        "ZODB0POSExceptionaConflictError",
        "ZODB POSExceptionaConflictError",
        "ZODBaPOSExceptionaConflictError"
      ]
    },
    {
      "regex": "((\\(\\(.*?\\)\\))(?!\\))|([",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unterminated character set"
      },
      "matches": []
    },
    {
      "regex": "([\\w\\.]+)\\s* = \\s*rb_struct_define_without_accessor\\s*\n              \\(\n                 \\s*\"(\\w+)\",  # Class name\n                 \\s*(\\w+),    # Parent class\n                 \\s*\\w+,      # Allocation function\n                 (\\s*\"\\w+\",)* # Attributes\n                 \\s*NULL\n              \\)",
      "exceptionStackTrace": null,
      "matches": [
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                   NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                 NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"eVil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"EVIL\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"ev_il\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"ev il\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"ev4il\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"e\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \" \", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"6\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"_\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                   \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                 \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  eVil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  EVIL,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  ev_il,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  ev il,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  ev4il,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  e,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                   ,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  6,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  _,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  ,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                   evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                 evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  eVil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  EVIL,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  ev_il,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  ev il,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  ev4il,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  e,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                   ,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  6,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  _,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  ,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                   evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                 evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"eVil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"EVIL\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"ev_il\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"ev il\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"ev4il\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"e\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \" \",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"6\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"_\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                   \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                 \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor  \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =  rb_struct_define_without_accessor\n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  =   rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil  = rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil   =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "=  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        ".  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        ",  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        ")  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "(  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "#  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "\"  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "eVil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "EVIL  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "ev_il  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "ev il  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "ev4il  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "e  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "   =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "6  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "_  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )",
        "evil = rb_struct_define_without_accessor\n              (\n                 \"evil\",  # Class name\n                 evil,    # Parent class\n                 evil,      # Allocation function\n                  # Attributes\n                 NULL\n              )",
        "evil  =  rb_struct_define_without_accessor \n              (\n                  \"evil\",  # Class name\n                  evil,    # Parent class\n                  evil,      # Allocation function\n                  \"evil\", # Attributes\n                  NULL\n              )"
      ]
    },
    {
      "regex": "\\+(\\d\\d?)",
      "exceptionStackTrace": null,
      "matches": ["+000", "+0", "+00"]
    },
    {
      "regex": "\\",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape (end of pattern)"
      },
      "matches": []
    },
    { "regex": "&gt;[~]", "exceptionStackTrace": null, "matches": ["&gt;~"] },
    {
      "regex": "^I should have (\\d+) spans$",
      "exceptionStackTrace": null,
      "matches": [
        "I should have 00 spans",
        "I should have  spans",
        "I should have 0 spans"
      ]
    },
    {
      "regex": "(?i)[-._ ]Anime[-._ ]|^\\[[a-zA-Z\\.\\-]+\\].*[-_].*\\d{1,3}[-_. ]((\\[|\\()((\\d{1,4}x\\d{1,4})|(h264-)?\\d{3,4}(p|i))(\\]|\\))\\s?(\\[AAC\\])?|\\[[a-fA-F0-9]{8}\\]|(8|10)BIT|hi10p)(\\[[a-fA-F0-9]{8}\\])?",
      "exceptionStackTrace": null,
      "matches": [
        "[evil]evil_evil0 [000000000][00000000]",
        "[evil]evil_evil0 [0000000][00000000]",
        "[evil]evil_evil0 [g0000000][00000000]",
        "[evil]evil_evil0 [a0000000][00000000]",
        "[evil]evil_evil0 [G0000000][00000000]",
        "[evil]evil_evil0 [A0000000][00000000]",
        "[evil]evil_evil0 [h264-00000p] [AAC][00000000]",
        "[evil]evil_evil0 [h264-0000p] [AAC][00000000]",
        "[evil]evil_evil0 [h264-00p] [AAC][00000000]",
        "[evil]evil_evil0 [h264-h264-000p] [AAC][00000000]",
        "[evil]evil_evil0 [000p] [AAC][00000000]",
        "[evil]evil_evil0 [0x0] [AAC][00000000][00000000]",
        "[evil]evil_evil0 [0x0] [AAC]",
        "[evil]evil_evil0 [0x0] [AAC][000000000]",
        "[evil]evil_evil0 [0x0] [AAC][0000000]",
        "[evil]evil_evil0 [0x0] [AAC][g0000000]",
        "[evil]evil_evil0 [0x0] [AAC][a0000000]",
        "[evil]evil_evil0 [0x0] [AAC][G0000000]",
        "[evil]evil_evil0 [0x0] [AAC][A0000000]",
        "[evil]evil_evil0 [0x0] [AAC][AAC][00000000]",
        "[evil]evil_evil0 [0x0] [00000000]",
        "[evil]evil_evil0 [0x0]  [AAC][00000000]",
        "[evil]evil_evil0 [0x0][AAC][00000000]",
        "[evil]evil_evil0 [0x00000] [AAC][00000000]",
        "[evil]evil_evil0 [0x0000] [AAC][00000000]",
        "[evil]evil_evil0 [0x] [AAC][00000000]",
        "[evil]evil_evil0 [00000x0] [AAC][00000000]",
        "[evil]evil_evil0 [0000x0] [AAC][00000000]",
        "[evil]evil_evil0 [x0] [AAC][00000000]",
        "[evil]evil_evil0_[0x0] [AAC][00000000]",
        "[evil]evil_evil0.[0x0] [AAC][00000000]",
        "[evil]evil_evil0-[0x0] [AAC][00000000]",
        "[evil]evil_evil0000 [0x0] [AAC][00000000]",
        "[evil]evil_evil000 [0x0] [AAC][00000000]",
        "[evil]evil_evil [0x0] [AAC][00000000]",
        "[evil]evil_]0 [0x0] [AAC][00000000]",
        "[evil]evil_[0 [0x0] [AAC][00000000]",
        "[evil]evil_.0 [0x0] [AAC][00000000]",
        "[evil]evil_-0 [0x0] [AAC][00000000]",
        "[evil]evil_)0 [0x0] [AAC][00000000]",
        "[evil]evil_(0 [0x0] [AAC][00000000]",
        "[evil]evil_eVil0 [0x0] [AAC][00000000]",
        "[evil]evil_EVIL0 [0x0] [AAC][00000000]",
        "[evil]evil_ev_il0 [0x0] [AAC][00000000]",
        "[evil]evil_ev il0 [0x0] [AAC][00000000]",
        "[evil]evil_ev4il0 [0x0] [AAC][00000000]",
        "[evil]evil_e0 [0x0] [AAC][00000000]",
        "[evil]evil_ 0 [0x0] [AAC][00000000]",
        "[evil]evil_60 [0x0] [AAC][00000000]",
        "[evil]evil__0 [0x0] [AAC][00000000]",
        "[evil]evil_0 [0x0] [AAC][00000000]",
        "[evil]evil-evil0 [0x0] [AAC][00000000]",
        "[evil]]_evil0 [0x0] [AAC][00000000]",
        "[evil][_evil0 [0x0] [AAC][00000000]",
        "[evil]._evil0 [0x0] [AAC][00000000]",
        "[evil]-_evil0 [0x0] [AAC][00000000]",
        "[evil])_evil0 [0x0] [AAC][00000000]",
        "[evil](_evil0 [0x0] [AAC][00000000]",
        "[evil]eVil_evil0 [0x0] [AAC][00000000]",
        "[evil]EVIL_evil0 [0x0] [AAC][00000000]",
        "[evil]ev_il_evil0 [0x0] [AAC][00000000]",
        "[evil]ev il_evil0 [0x0] [AAC][00000000]",
        "[evil]ev4il_evil0 [0x0] [AAC][00000000]",
        "[evil]e_evil0 [0x0] [AAC][00000000]",
        "[evil] _evil0 [0x0] [AAC][00000000]",
        "[evil]6_evil0 [0x0] [AAC][00000000]",
        "[evil]__evil0 [0x0] [AAC][00000000]",
        "[evil]_evil0 [0x0] [AAC][00000000]",
        "[]]evil_evil0 [0x0] [AAC][00000000]",
        "[[]evil_evil0 [0x0] [AAC][00000000]",
        "[.]evil_evil0 [0x0] [AAC][00000000]",
        "[-]evil_evil0 [0x0] [AAC][00000000]",
        "[)]evil_evil0 [0x0] [AAC][00000000]",
        "[(]evil_evil0 [0x0] [AAC][00000000]",
        "[eVil]evil_evil0 [0x0] [AAC][00000000]",
        "[EVIL]evil_evil0 [0x0] [AAC][00000000]",
        "[ev_il]evil_evil0 [0x0] [AAC][00000000]",
        "[ev il]evil_evil0 [0x0] [AAC][00000000]",
        "[ev4il]evil_evil0 [0x0] [AAC][00000000]",
        "[e]evil_evil0 [0x0] [AAC][00000000]",
        "[ ]evil_evil0 [0x0] [AAC][00000000]",
        "[6]evil_evil0 [0x0] [AAC][00000000]",
        "[_]evil_evil0 [0x0] [AAC][00000000]",
        "[]evil_evil0 [0x0] [AAC][00000000]",
        " Anime_",
        " Anime.",
        " Anime-",
        "_Anime ",
        ".Anime ",
        "-Anime ",
        "[evil]_0 hi10p",
        "[evil]_0 10BIT",
        "[evil]_0 8BIT",
        "[evil]_0 [00000000]",
        "[evil]_0 (0x0]",
        "[evil]_0 [000i]",
        "[evil]_0 [000p]",
        "[evil]_0 [0x0)",
        "[evil]_0 [0x0]",
        "[evil]evil_evil0 hi10p[00000000]",
        "[evil]evil_evil0 10BIT[00000000]",
        "[evil]evil_evil0 8BIT[00000000]",
        "[evil]evil_evil0 [00000000][00000000]",
        "[evil]evil_evil0 (0x0] [AAC][00000000]",
        "[evil]evil_evil0 [h264-000i] [AAC][00000000]",
        "[evil]evil_evil0 [h264-000p] [AAC][00000000]",
        "[evil]evil_evil0 [0x0) [AAC][00000000]",
        "[evil]evil_evil0 [0x0] [AAC][00000000]",
        " Anime "
      ]
    },
    { "regex": "\\*\\=", "exceptionStackTrace": null, "matches": ["*="] },
    {
      "regex": "imports: [\\s\\S]+,\\n\\s+HelloWorld,\\n\\s+\\]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^\\s*extern\\s*",
      "exceptionStackTrace": null,
      "matches": [
        " extern  ",
        " extern",
        "  extern ",
        "extern ",
        "extern",
        " extern "
      ]
    },
    {
      "regex": "(?m)(?s)\\s*(SELECT|PRAGMA|EXPLAIN QUERY PLAN).*",
      "exceptionStackTrace": null,
      "matches": [
        " SELECTeVil",
        " SELECTEVIL",
        " SELECTev_il",
        " SELECTev il",
        " SELECTev4il",
        " SELECTe",
        " SELECT ",
        " SELECT6",
        " SELECT_",
        " SELECT",
        "  SELECTevil",
        "SELECTevil",
        "EXPLAIN QUERY PLAN",
        "PRAGMA",
        "SELECT",
        " EXPLAIN QUERY PLANevil",
        " PRAGMAevil",
        " SELECTevil"
      ]
    },
    {
      "regex": "specs\\/.*\\.js$",
      "exceptionStackTrace": null,
      "matches": [
        "specs//.js",
        "specs/..js",
        "specs/eVil.js",
        "specs/EVIL.js",
        "specs/ev_il.js",
        "specs/ev il.js",
        "specs/ev4il.js",
        "specs/e.js",
        "specs/ .js",
        "specs/6.js",
        "specs/_.js",
        "specs/.js",
        "specs/evil.js"
      ]
    },
    {
      "regex": "^<li>(.*?</p><p class=\"list\">.*?)</li>$",
      "exceptionStackTrace": null,
      "matches": [
        "<li>evil</p><p class=\"list\">></li>",
        "<li>evil</p><p class=\"list\">=</li>",
        "<li>evil</p><p class=\"list\"><</li>",
        "<li>evil</p><p class=\"list\">/</li>",
        "<li>evil</p><p class=\"list\">\"</li>",
        "<li>evil</p><p class=\"list\">eVil</li>",
        "<li>evil</p><p class=\"list\">EVIL</li>",
        "<li>evil</p><p class=\"list\">ev_il</li>",
        "<li>evil</p><p class=\"list\">ev il</li>",
        "<li>evil</p><p class=\"list\">ev4il</li>",
        "<li>evil</p><p class=\"list\">e</li>",
        "<li>evil</p><p class=\"list\"> </li>",
        "<li>evil</p><p class=\"list\">6</li>",
        "<li>evil</p><p class=\"list\">_</li>",
        "<li>evil</p><p class=\"list\"></li>",
        "<li>></p><p class=\"list\">evil</li>",
        "<li>=</p><p class=\"list\">evil</li>",
        "<li><</p><p class=\"list\">evil</li>",
        "<li>/</p><p class=\"list\">evil</li>",
        "<li>\"</p><p class=\"list\">evil</li>",
        "<li>eVil</p><p class=\"list\">evil</li>",
        "<li>EVIL</p><p class=\"list\">evil</li>",
        "<li>ev_il</p><p class=\"list\">evil</li>",
        "<li>ev il</p><p class=\"list\">evil</li>",
        "<li>ev4il</p><p class=\"list\">evil</li>",
        "<li>e</p><p class=\"list\">evil</li>",
        "<li> </p><p class=\"list\">evil</li>",
        "<li>6</p><p class=\"list\">evil</li>",
        "<li>_</p><p class=\"list\">evil</li>",
        "<li></p><p class=\"list\">evil</li>",
        "<li></p><p class=\"list\"></li>",
        "<li>evil</p><p class=\"list\">evil</li>"
      ]
    },
    {
      "regex": "([\\{\\}\\[\\]|]|''|ISBN|RFC|PMID|__)",
      "exceptionStackTrace": null,
      "matches": ["}", "{", "]", "[", "__", "PMID", "RFC", "ISBN", "''", "|"]
    },
    {
      "regex": "Adds the current directory",
      "exceptionStackTrace": null,
      "matches": ["Adds the current directory"]
    },
    {
      "regex": "^<section.*?<\\/section>$",
      "exceptionStackTrace": null,
      "matches": [
        "<section></section>",
        "<section<</section>",
        "<section/</section>",
        "<sectioneVil</section>",
        "<sectionEVIL</section>",
        "<sectionev_il</section>",
        "<sectionev il</section>",
        "<sectionev4il</section>",
        "<sectione</section>",
        "<section </section>",
        "<section6</section>",
        "<section_</section>",
        "<section</section>",
        "<sectionevil</section>"
      ]
    },
    {
      "regex": "SampleProject::App.mailer :demo",
      "exceptionStackTrace": null,
      "matches": [
        "SampleProject::AppAmailer :demo",
        "SampleProject::App:mailer :demo",
        "SampleProject::App0mailer :demo",
        "SampleProject::App mailer :demo",
        "SampleProject::Appamailer :demo"
      ]
    },
    {
      "regex": "^([()]|.)*$",
      "exceptionStackTrace": null,
      "matches": ["A", "0", " ", "))", "(", "", "a", ")"]
    },
    {
      "regex": "[?#].*",
      "exceptionStackTrace": null,
      "matches": [
        "#?",
        "##",
        "#eVil",
        "#EVIL",
        "#ev_il",
        "#ev il",
        "#ev4il",
        "#e",
        "# ",
        "#6",
        "#_",
        "?evil",
        "#",
        "#evil"
      ]
    },
    {
      "regex": "^0:0:0:0:0:0:0:0$",
      "exceptionStackTrace": null,
      "matches": ["0:0:0:0:0:0:0:0"]
    },
    {
      "regex": "^\\\\s*[\\\\w\\\\s,.*()]*\\\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        "\\s)\\ss",
        "\\s)\\",
        "\\s))\\s",
        "\\s\\s",
        "\\sw\\s",
        "\\ss\\s",
        "\\sa\\s",
        "\\s\\\\s",
        "\\s.\\s",
        "\\s,\\s",
        "\\s*\\s",
        "\\s(\\s",
        "\\ss)\\s",
        "\\)\\s",
        "\\\\",
        "\\s)\\s"
      ]
    },
    {
      "regex": "^(?:${CmtRE})$",
      "exceptionStackTrace": null,
      "matches": ["{CmtRE}"]
    },
    {
      "regex": "\\&amp;#39;",
      "exceptionStackTrace": null,
      "matches": ["&amp;#39;"]
    },
    {
      "regex": "(?<!\\\\)(?:\\\\\\\\)*~~(.+)~~",
      "exceptionStackTrace": null,
      "matches": [
        "\\\\~~~~~",
        "\\\\~~\\~~",
        "\\\\~~eVil~~",
        "\\\\~~EVIL~~",
        "\\\\~~ev_il~~",
        "\\\\~~ev il~~",
        "\\\\~~ev4il~~",
        "\\\\~~e~~",
        "\\\\~~ ~~",
        "\\\\~~6~~",
        "\\\\~~_~~",
        "\\\\~~~~",
        "\\\\\\\\~~evil~~",
        "~~evil~~",
        "\\\\~~evil~~"
      ]
    },
    {
      "regex": "already exist",
      "exceptionStackTrace": null,
      "matches": ["already exist"]
    },
    {
      "regex": "/v/([^/]+)$",
      "exceptionStackTrace": null,
      "matches": [
        "/v//",
        "/v/eVil",
        "/v/EVIL",
        "/v/ev_il",
        "/v/ev il",
        "/v/ev4il",
        "/v/e",
        "/v/ ",
        "/v/6",
        "/v/_",
        "/v/",
        "/v/evil"
      ]
    },
    {
      "regex": "(?:\\r\\n|\\n)+",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": "[\\'\\\"\\.\\/]",
      "exceptionStackTrace": null,
      "matches": [".", "'", "\"", "/"]
    },
    {
      "regex": "VERSION = .*",
      "exceptionStackTrace": null,
      "matches": [
        "VERSION = =",
        "VERSION = eVil",
        "VERSION = EVIL",
        "VERSION = ev_il",
        "VERSION = ev il",
        "VERSION = ev4il",
        "VERSION = e",
        "VERSION =  ",
        "VERSION = 6",
        "VERSION = _",
        "VERSION = ",
        "VERSION = evil"
      ]
    },
    { "regex": "GE", "exceptionStackTrace": null, "matches": ["GE"] },
    {
      "regex": "\"angular-animate\": \"angular-test-version\"",
      "exceptionStackTrace": null,
      "matches": ["\"angular-animate\": \"angular-test-version\""]
    },
    {
      "regex": "lib\\/togo\\/admin",
      "exceptionStackTrace": null,
      "matches": ["lib/togo/admin"]
    },
    {
      "regex": "^Unescaped\\ parameter\\ value\\ rendered\\ inlin",
      "exceptionStackTrace": null,
      "matches": ["Unescaped parameter value rendered inlin"]
    },
    {
      "regex": "(\\d\\d:\\d\\d:\\d\\d)",
      "exceptionStackTrace": null,
      "matches": ["00:00:00"]
    },
    {
      "regex": "^\\s*gem\\s+[\\\":']skylinecms[\\\"']?\\s*,\\s*([\\\"'](.+)[\\\"'])?",
      "exceptionStackTrace": null,
      "matches": [
        " gem 'skylinecms' , 'evil''evil'",
        " gem 'skylinecms' , ",
        " gem 'skylinecms' , 'evil\"",
        " gem 'skylinecms' , ':'",
        " gem 'skylinecms' , ','",
        " gem 'skylinecms' , '''",
        " gem 'skylinecms' , '\"'",
        " gem 'skylinecms' , 'eVil'",
        " gem 'skylinecms' , 'EVIL'",
        " gem 'skylinecms' , 'ev_il'",
        " gem 'skylinecms' , 'ev il'",
        " gem 'skylinecms' , 'ev4il'",
        " gem 'skylinecms' , 'e'",
        " gem 'skylinecms' , ' '",
        " gem 'skylinecms' , '6'",
        " gem 'skylinecms' , '_'",
        " gem 'skylinecms' , ''",
        " gem 'skylinecms' , \"evil'",
        " gem 'skylinecms' ,  'evil'",
        " gem 'skylinecms' ,'evil'",
        " gem 'skylinecms'  , 'evil'",
        " gem 'skylinecms', 'evil'",
        " gem 'skylinecms'' , 'evil'",
        " gem 'skylinecms , 'evil'",
        " gem 'skylinecms\" , 'evil'",
        " gem :skylinecms' , 'evil'",
        " gem \"skylinecms' , 'evil'",
        " gem  'skylinecms' , 'evil'",
        " gem'skylinecms' , 'evil'",
        "  gem 'skylinecms' , 'evil'",
        "gem 'skylinecms' , 'evil'",
        "gem 'skylinecms,",
        " gem 'skylinecms' , 'evil'"
      ]
    },
    {
      "regex": "\\A(AUTHORS|NOTICE|LEGAL)(?:\\..*)?\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "^history\\s+save\\s+(\\S.*)\\s+(\\d+)$",
      "exceptionStackTrace": null,
      "matches": [
        "history save aevil 00",
        "history save aevil ",
        "history save aevil  0",
        "history save aevil0",
        "history save aeVil 0",
        "history save aEVIL 0",
        "history save aev_il 0",
        "history save aev il 0",
        "history save aev4il 0",
        "history save ae 0",
        "history save a  0",
        "history save a6 0",
        "history save a_ 0",
        "history save _evil 0",
        "history save Aevil 0",
        "history save 0evil 0",
        "history save  evil 0",
        "history save  aevil 0",
        "history saveaevil 0",
        "history  save aevil 0",
        "historysave aevil 0",
        "history save a 0",
        "history save aevil 0"
      ]
    },
    {
      "regex": "\\Ahttp://www\\.dailymotion\\.com/.*?/video/([\\w/-]+)",
      "exceptionStackTrace": null,
      "matches": [
        "http://www.dailymotion.com/evil/video/:",
        "http://www.dailymotion.com/evil/video//",
        "http://www.dailymotion.com/evil/video/.",
        "http://www.dailymotion.com/evil/video/-",
        "http://www.dailymotion.com/evil/video/eVil",
        "http://www.dailymotion.com/evil/video/EVIL",
        "http://www.dailymotion.com/evil/video/ev_il",
        "http://www.dailymotion.com/evil/video/ev il",
        "http://www.dailymotion.com/evil/video/ev4il",
        "http://www.dailymotion.com/evil/video/e",
        "http://www.dailymotion.com/evil/video/ ",
        "http://www.dailymotion.com/evil/video/6",
        "http://www.dailymotion.com/evil/video/_",
        "http://www.dailymotion.com/evil/video/",
        "http://www.dailymotion.com/:/video/evil",
        "http://www.dailymotion.com///video/evil",
        "http://www.dailymotion.com/./video/evil",
        "http://www.dailymotion.com/-/video/evil",
        "http://www.dailymotion.com/eVil/video/evil",
        "http://www.dailymotion.com/EVIL/video/evil",
        "http://www.dailymotion.com/ev_il/video/evil",
        "http://www.dailymotion.com/ev il/video/evil",
        "http://www.dailymotion.com/ev4il/video/evil",
        "http://www.dailymotion.com/e/video/evil",
        "http://www.dailymotion.com/ /video/evil",
        "http://www.dailymotion.com/6/video/evil",
        "http://www.dailymotion.com/_/video/evil",
        "http://www.dailymotion.com//video/evil",
        "http://www.dailymotion.com/evil/video/evil"
      ]
    },
    {
      "regex": "\\[([0-9a-f]+)\\-([0-9a-f]+)\\]",
      "exceptionStackTrace": null,
      "matches": [
        "[a-aa]",
        "[a-]",
        "[a-g]",
        "[a-0]",
        "[aa-a]",
        "[-a]",
        "[g-a]",
        "[0-a]",
        "[a-a]"
      ]
    },
    {
      "regex": "\\][^\\]]*$",
      "exceptionStackTrace": null,
      "matches": [
        "]]",
        "]eVil",
        "]EVIL",
        "]ev_il",
        "]ev il",
        "]ev4il",
        "]e",
        "] ",
        "]6",
        "]_",
        "]",
        "]evil"
      ]
    },
    {
      "regex": "^[a-zA-Z\\-0-9]*$",
      "exceptionStackTrace": null,
      "matches": [
        "-",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "fragment.templateElements\\[0\\]",
      "exceptionStackTrace": null,
      "matches": [
        "fragment]templateElements[0]",
        "fragment[templateElements[0]",
        "fragmentAtemplateElements[0]",
        "fragment0templateElements[0]",
        "fragment templateElements[0]",
        "fragmentatemplateElements[0]"
      ]
    },
    {
      "regex": "<div class=\\\"_1vx9\\\"><span>([\\d,.]*?) .*?<\\/span><\\/div>",
      "exceptionStackTrace": null,
      "matches": [
        "<div class=\"_1vx9\"><span>. ></span></div>",
        "<div class=\"_1vx9\"><span>. =</span></div>",
        "<div class=\"_1vx9\"><span>. <</span></div>",
        "<div class=\"_1vx9\"><span>. /</span></div>",
        "<div class=\"_1vx9\"><span>. .</span></div>",
        "<div class=\"_1vx9\"><span>. ,</span></div>",
        "<div class=\"_1vx9\"><span>. \"</span></div>",
        "<div class=\"_1vx9\"><span>. eVil</span></div>",
        "<div class=\"_1vx9\"><span>. EVIL</span></div>",
        "<div class=\"_1vx9\"><span>. ev_il</span></div>",
        "<div class=\"_1vx9\"><span>. ev il</span></div>",
        "<div class=\"_1vx9\"><span>. ev4il</span></div>",
        "<div class=\"_1vx9\"><span>. e</span></div>",
        "<div class=\"_1vx9\"><span>.  </span></div>",
        "<div class=\"_1vx9\"><span>. 6</span></div>",
        "<div class=\"_1vx9\"><span>. _</span></div>",
        "<div class=\"_1vx9\"><span>. </span></div>",
        "<div class=\"_1vx9\"><span>.. evil</span></div>",
        "<div class=\"_1vx9\"><span> evil</span></div>",
        "<div class=\"_1vx9\"><span>0 evil</span></div>",
        "<div class=\"_1vx9\"><span>, evil</span></div>",
        "<div class=\"_1vx9\"><span> </span></div>",
        "<div class=\"_1vx9\"><span>. evil</span></div>"
      ]
    },
    {
      "regex": "\\u00aa",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 170"
      },
      "matches": []
    },
    {
      "regex": "stackrambler",
      "exceptionStackTrace": null,
      "matches": ["stackrambler"]
    },
    {
      "regex": "[_*]{2}",
      "exceptionStackTrace": null,
      "matches": ["***", "*", "_*", "**"]
    },
    {
      "regex": "Compiling packages: bar\\/",
      "exceptionStackTrace": null,
      "matches": ["Compiling packages: bar/"]
    },
    {
      "regex": "a <[^>]+?>",
      "exceptionStackTrace": null,
      "matches": [
        "a <>>",
        "a <<>",
        "a <eVil>",
        "a <EVIL>",
        "a <ev_il>",
        "a <ev il>",
        "a <ev4il>",
        "a <e>",
        "a < >",
        "a <6>",
        "a <_>",
        "a <>",
        "a <evil>"
      ]
    },
    {
      "regex": "^//     .+",
      "exceptionStackTrace": null,
      "matches": [
        "//     /",
        "//     eVil",
        "//     EVIL",
        "//     ev_il",
        "//     ev il",
        "//     ev4il",
        "//     e",
        "//      ",
        "//     6",
        "//     _",
        "//     ",
        "//     evil"
      ]
    },
    {
      "regex": "^(\\\\S+)\\\\s+disband$",
      "exceptionStackTrace": null,
      "matches": [
        "\\S\\ssdisband",
        "\\S\\disband",
        "\\SS\\sdisband",
        "\\\\sdisband",
        "\\S\\sdisband"
      ]
    },
    {
      "regex": "^(unix|ntfs|mixed)$",
      "exceptionStackTrace": null,
      "matches": ["mixed", "ntfs", "unix"]
    },
    {
      "regex": "$extention",
      "exceptionStackTrace": null,
      "matches": ["extention"]
    },
    {
      "regex": "[\\/\\.]:(\\w+)",
      "exceptionStackTrace": null,
      "matches": [
        ".:eVil",
        ".:EVIL",
        ".:ev_il",
        ".:ev il",
        ".:ev4il",
        ".:e",
        ".: ",
        ".:6",
        ".:_",
        ".:",
        "/:evil",
        ".:evil"
      ]
    },
    {
      "regex": "\\.(md|mkd|markdown)$",
      "exceptionStackTrace": null,
      "matches": [".markdown", ".mkd", ".md"]
    },
    {
      "regex": "--file.*$",
      "exceptionStackTrace": null,
      "matches": [
        "--file-",
        "--fileeVil",
        "--fileEVIL",
        "--fileev_il",
        "--fileev il",
        "--fileev4il",
        "--filee",
        "--file ",
        "--file6",
        "--file_",
        "--file",
        "--fileevil"
      ]
    },
    {
      "regex": "00000001\\d7([0-9a-fA-F]{6})",
      "exceptionStackTrace": null,
      "matches": [
        "0000000107AAAAAAA",
        "0000000107AAAAA",
        "0000000107gAAAAA",
        "0000000107aAAAAA",
        "0000000107GAAAAA",
        "00000001070AAAAA",
        "0000000107AAAAAA"
      ]
    },
    {
      "regex": "^Number\\s+of\\s+mismatches\\s+allowed\\s+\n\t\t in\\s+Palindrome\\s*:\\s+(\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "Number of mismatches allowed \n\t\t in Palindrome : 00",
        "Number of mismatches allowed \n\t\t in Palindrome : ",
        "Number of mismatches allowed \n\t\t in Palindrome :  0",
        "Number of mismatches allowed \n\t\t in Palindrome :0",
        "Number of mismatches allowed \n\t\t in Palindrome  : 0",
        "Number of mismatches allowed \n\t\t in  Palindrome : 0",
        "Number of mismatches allowed \n\t\t inPalindrome : 0",
        "Number of mismatches allowed  \n\t\t in Palindrome : 0",
        "Number of mismatches allowed\n\t\t in Palindrome : 0",
        "Number of mismatches  allowed \n\t\t in Palindrome : 0",
        "Number of mismatchesallowed \n\t\t in Palindrome : 0",
        "Number of  mismatches allowed \n\t\t in Palindrome : 0",
        "Number ofmismatches allowed \n\t\t in Palindrome : 0",
        "Number  of mismatches allowed \n\t\t in Palindrome : 0",
        "Numberof mismatches allowed \n\t\t in Palindrome : 0",
        "Number of mismatches allowed \n\t\t in Palindrome: 0",
        "Number of mismatches allowed \n\t\t in Palindrome : 0"
      ]
    },
    {
      "regex": "^=item\\s+(LDAP_\\S+)\\s+\\((\\d+)\\)",
      "exceptionStackTrace": null,
      "matches": [
        "=item LDAP_evil (00)",
        "=item LDAP_evil ()",
        "=item LDAP_evil  (0)",
        "=item LDAP_evil(0)",
        "=item LDAP_= (0)",
        "=item LDAP_) (0)",
        "=item LDAP_( (0)",
        "=item LDAP_eVil (0)",
        "=item LDAP_EVIL (0)",
        "=item LDAP_ev_il (0)",
        "=item LDAP_ev il (0)",
        "=item LDAP_ev4il (0)",
        "=item LDAP_e (0)",
        "=item LDAP_  (0)",
        "=item LDAP_6 (0)",
        "=item LDAP__ (0)",
        "=item LDAP_ (0)",
        "=item  LDAP_evil (0)",
        "=itemLDAP_evil (0)",
        "=item LDAP_evil (0)"
      ]
    },
    {
      "regex": "UrlRemap|appharness",
      "exceptionStackTrace": null,
      "matches": ["appharness", "UrlRemap"]
    },
    {
      "regex": "^(.*)(\\d{4})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{2}).zip$",
      "exceptionStackTrace": null,
      "matches": [
        "evil0000-00-00-00-00-00Azip",
        "evil0000-00-00-00-00-000zip",
        "evil0000-00-00-00-00-00-zip",
        "evil0000-00-00-00-00-00 zip",
        "evil0000-00-00-00-00-000azip",
        "evil0000-00-00-00-00-0azip",
        "evil0000-00-00-00-000-00azip",
        "evil0000-00-00-00-0-00azip",
        "evil0000-00-00-000-00-00azip",
        "evil0000-00-00-0-00-00azip",
        "evil0000-00-000-00-00-00azip",
        "evil0000-00-0-00-00-00azip",
        "evil0000-000-00-00-00-00azip",
        "evil0000-0-00-00-00-00azip",
        "evil00000-00-00-00-00-00azip",
        "evil000-00-00-00-00-00azip",
        "-0000-00-00-00-00-00azip",
        "eVil0000-00-00-00-00-00azip",
        "EVIL0000-00-00-00-00-00azip",
        "ev_il0000-00-00-00-00-00azip",
        "ev il0000-00-00-00-00-00azip",
        "ev4il0000-00-00-00-00-00azip",
        "e0000-00-00-00-00-00azip",
        " 0000-00-00-00-00-00azip",
        "60000-00-00-00-00-00azip",
        "_0000-00-00-00-00-00azip",
        "0000-00-00-00-00-00azip",
        "evil0000-00-00-00-00-00azip"
      ]
    },
    {
      "regex": "casper\\.getHTML",
      "exceptionStackTrace": null,
      "matches": ["casper.getHTML"]
    },
    {
      "regex": "^\\s*\\*.+",
      "exceptionStackTrace": null,
      "matches": [
        " **",
        " *eVil",
        " *EVIL",
        " *ev_il",
        " *ev il",
        " *ev4il",
        " *e",
        " * ",
        " *6",
        " *_",
        " *",
        "  *evil",
        "*evil",
        " *evil"
      ]
    },
    {
      "regex": "(<link rel=\"preload\" href=\"\\/subdomain\\/index_bundle.js\" as=\"script\"((\\/>)|(><\\/link>)))",
      "exceptionStackTrace": null,
      "matches": [
        "<link rel=\"preload\" href=\"/subdomain/index_bundle_js\" as=\"script\"/>",
        "<link rel=\"preload\" href=\"/subdomain/index_bundleAjs\" as=\"script\"/>",
        "<link rel=\"preload\" href=\"/subdomain/index_bundle>js\" as=\"script\"/>",
        "<link rel=\"preload\" href=\"/subdomain/index_bundle=js\" as=\"script\"/>",
        "<link rel=\"preload\" href=\"/subdomain/index_bundle<js\" as=\"script\"/>",
        "<link rel=\"preload\" href=\"/subdomain/index_bundle0js\" as=\"script\"/>",
        "<link rel=\"preload\" href=\"/subdomain/index_bundle/js\" as=\"script\"/>",
        "<link rel=\"preload\" href=\"/subdomain/index_bundle\"js\" as=\"script\"/>",
        "<link rel=\"preload\" href=\"/subdomain/index_bundle js\" as=\"script\"/>",
        "<link rel=\"preload\" href=\"/subdomain/index_bundleajs\" as=\"script\"></link>",
        "<link rel=\"preload\" href=\"/subdomain/index_bundleajs\" as=\"script\"/>"
      ]
    },
    {
      "regex": "(top|bottom|left|right|deg)",
      "exceptionStackTrace": null,
      "matches": ["deg", "right", "left", "bottom", "top"]
    },
    {
      "regex": "[.Ee]",
      "exceptionStackTrace": null,
      "matches": ["a", "E", "A", ".", "e"]
    },
    {
      "regex": "(\\w)-?(\\w)",
      "exceptionStackTrace": null,
      "matches": ["a-_", "a-A", "a-0", "a--a", "_-a", "A-a", "0-a", "aa", "a-a"]
    },
    {
      "regex": "Enable-(ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)",
      "exceptionStackTrace": null,
      "matches": [
        "Enable-PSSessionConfiguration",
        "Enable-PSRemoting",
        "Enable-PSBreakpoint",
        "Enable-ComputerRestore"
      ]
    },
    {
      "regex": "\\A(?:[[a-zA-Z])",
      "exceptionStackTrace": null,
      "matches": ["a", "A", "["]
    },
    {
      "regex": "^([^\\0])\\0\\0\\0",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\0"
      },
      "matches": []
    },
    {
      "regex": "^\\d+: \\s* (.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "0:   :",
        "0:   eVil",
        "0:   EVIL",
        "0:   ev_il",
        "0:   ev il",
        "0:   ev4il",
        "0:   e",
        "0:    ",
        "0:   6",
        "0:   _",
        "0:   ",
        "0:    evil",
        "0:  evil",
        "00:   evil",
        ":   evil",
        "0:  ",
        "0:   evil"
      ]
    },
    {
      "regex": "[^.A-Za-z0-9_-]",
      "exceptionStackTrace": null,
      "matches": ["a", "_", "A", "0", ".", "-", " "]
    },
    {
      "regex": "((/|..)?[-a-zA-Z0-9:_]+)+",
      "exceptionStackTrace": null,
      "matches": [
        "a_evil",
        "aAevil",
        "a:evil",
        "a0evil",
        "a/evil",
        "a-evil",
        "a evil",
        "_aevil",
        "Aaevil",
        ":aevil",
        "0aevil",
        "/aevil",
        "-aevil",
        " aevil",
        "/evil/evil",
        "",
        "/:",
        "//",
        "/-",
        "/eVil",
        "/EVIL",
        "/ev_il",
        "/ev il",
        "/ev4il",
        "/e",
        "/ ",
        "/6",
        "/_",
        "/",
        "//evil",
        "evil",
        "aaevil",
        "/evil"
      ]
    },
    {
      "regex": "^\\([ \\t]*(?:bool|boolean)[ \\t]*\\)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "\\\\.pN\\\\d+_",
      "exceptionStackTrace": null,
      "matches": [
        "\\apN\\dd_",
        "\\apN\\_",
        "\\_pN\\d_",
        "\\\\pN\\d_",
        "\\ApN\\d_",
        "\\0pN\\d_",
        "\\ pN\\d_",
        "\\apN\\d_"
      ]
    },
    {
      "regex": "^LEMMA (.+) SENSES (.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "LEMMA evil SENSES eVil",
        "LEMMA evil SENSES EVIL",
        "LEMMA evil SENSES ev_il",
        "LEMMA evil SENSES ev il",
        "LEMMA evil SENSES ev4il",
        "LEMMA evil SENSES e",
        "LEMMA evil SENSES  ",
        "LEMMA evil SENSES 6",
        "LEMMA evil SENSES _",
        "LEMMA evil SENSES ",
        "LEMMA eVil SENSES evil",
        "LEMMA EVIL SENSES evil",
        "LEMMA ev_il SENSES evil",
        "LEMMA ev il SENSES evil",
        "LEMMA ev4il SENSES evil",
        "LEMMA e SENSES evil",
        "LEMMA   SENSES evil",
        "LEMMA 6 SENSES evil",
        "LEMMA _ SENSES evil",
        "LEMMA  SENSES evil",
        "LEMMA evil SENSES evil"
      ]
    },
    {
      "regex": "\\s{4}",
      "exceptionStackTrace": null,
      "matches": ["     ", "   ", "    "]
    },
    {
      "regex": "(\\:(?:\\s)?)\\\"(.*)\\\"",
      "exceptionStackTrace": null,
      "matches": [
        ": \":\"",
        ": \"\"\"",
        ": \"eVil\"",
        ": \"EVIL\"",
        ": \"ev_il\"",
        ": \"ev il\"",
        ": \"ev4il\"",
        ": \"e\"",
        ": \" \"",
        ": \"6\"",
        ": \"_\"",
        ": \"\"",
        ":  \"evil\"",
        ":\"evil\"",
        ":\"\"",
        ": \"evil\""
      ]
    },
    {
      "regex": "^(NKKK[A-HJ-NP-VX-Z\\d][A-HJ-NP-Z\\d]{5})$",
      "exceptionStackTrace": null,
      "matches": [
        "NKKK0000000",
        "NKKK00000",
        "NKKK0P0000",
        "NKKK0J0000",
        "NKKK0I0000",
        "NKKK0A0000",
        "NKKKX00000",
        "NKKKP00000",
        "NKKKJ00000",
        "NKKKI00000",
        "NKKKA00000",
        "NKKK000000"
      ]
    },
    {
      "regex": "<template[^>]*>(.+)</template>",
      "exceptionStackTrace": null,
      "matches": [
        "<templateevil>></template>",
        "<templateevil><</template>",
        "<templateevil>/</template>",
        "<templateevil>eVil</template>",
        "<templateevil>EVIL</template>",
        "<templateevil>ev_il</template>",
        "<templateevil>ev il</template>",
        "<templateevil>ev4il</template>",
        "<templateevil>e</template>",
        "<templateevil> </template>",
        "<templateevil>6</template>",
        "<templateevil>_</template>",
        "<templateevil></template>",
        "<template>>evil</template>",
        "<template<>evil</template>",
        "<template/>evil</template>",
        "<templateeVil>evil</template>",
        "<templateEVIL>evil</template>",
        "<templateev_il>evil</template>",
        "<templateev il>evil</template>",
        "<templateev4il>evil</template>",
        "<templatee>evil</template>",
        "<template >evil</template>",
        "<template6>evil</template>",
        "<template_>evil</template>",
        "<template>evil</template>",
        "<templateevil>evil</template>"
      ]
    },
    {
      "regex": "//.*-->$",
      "exceptionStackTrace": null,
      "matches": [
        "//>-->",
        "///-->",
        "//--->",
        "//eVil-->",
        "//EVIL-->",
        "//ev_il-->",
        "//ev il-->",
        "//ev4il-->",
        "//e-->",
        "// -->",
        "//6-->",
        "//_-->",
        "//-->",
        "//evil-->"
      ]
    },
    {
      "regex": "({(?P<closing>\\/)?(?:(?P<symbol>[\\~\\#\\?\\@\\:\\<\\>\\+\\^\\%])\\s*)?(?P<refpath>[a-zA-Z0-9_\\$\\.]+|\"[^\"]+\")(?:\\:(?P<contpath>[a-zA-Z0-9\\$\\.]+))?(?P<filters>[\\|a-z]+)*?(?P<params>(?:\\s+\\w+\\=((\"[^\"]*?\")|([\\w\\.]+)))*)?\\s*(?P<selfclosing>\\/)?\\})",
      "exceptionStackTrace": null,
      "matches": [
        "{/% \"~\":evilevil evil=\"evil\" /}",
        "{/% \"}\":evilevil evil=\"evil\" /}",
        "{/% \"|\":evilevil evil=\"evil\" /}",
        "{/% \"{\":evilevil evil=\"evil\" /}",
        "{/% \"^\":evilevil evil=\"evil\" /}",
        "{/% \"@\":evilevil evil=\"evil\" /}",
        "{/% \"?\":evilevil evil=\"evil\" /}",
        "{/% \">\":evilevil evil=\"evil\" /}",
        "{/% \"=\":evilevil evil=\"evil\" /}",
        "{/% \"<\":evilevil evil=\"evil\" /}",
        "{/% \":\":evilevil evil=\"evil\" /}",
        "{/% \"/\":evilevil evil=\"evil\" /}",
        "{/% \".\":evilevil evil=\"evil\" /}",
        "{/% \"+\":evilevil evil=\"evil\" /}",
        "{/% \"%\":evilevil evil=\"evil\" /}",
        "{/% \"$\":evilevil evil=\"evil\" /}",
        "{/% \"#\":evilevil evil=\"evil\" /}",
        "{/% \"\"\":evilevil evil=\"evil\" /}",
        "{/% \"eVil\":evilevil evil=\"evil\" /}",
        "{/% \"EVIL\":evilevil evil=\"evil\" /}",
        "{/% \"ev_il\":evilevil evil=\"evil\" /}",
        "{/% \"ev il\":evilevil evil=\"evil\" /}",
        "{/% \"ev4il\":evilevil evil=\"evil\" /}",
        "{/% \"e\":evilevil evil=\"evil\" /}",
        "{/% \" \":evilevil evil=\"evil\" /}",
        "{/% \"6\":evilevil evil=\"evil\" /}",
        "{/% \"_\":evilevil evil=\"evil\" /}",
        "{/% \"\":evilevil evil=\"evil\" /}",
        "{/% evil:evilevil evil=~ /}",
        "{/% evil:evilevil evil=} /}",
        "{/% evil:evilevil evil=| /}",
        "{/% evil:evilevil evil={ /}",
        "{/% evil:evilevil evil=^ /}",
        "{/% evil:evilevil evil=@ /}",
        "{/% evil:evilevil evil=? /}",
        "{/% evil:evilevil evil=> /}",
        "{/% evil:evilevil evil== /}",
        "{/% evil:evilevil evil=< /}",
        "{/% evil:evilevil evil=: /}",
        "{/% evil:evilevil evil=/ /}",
        "{/% evil:evilevil evil=. /}",
        "{/% evil:evilevil evil=+ /}",
        "{/% evil:evilevil evil=% /}",
        "{/% evil:evilevil evil=$ /}",
        "{/% evil:evilevil evil=# /}",
        "{/% evil:evilevil evil=\" /}",
        "{/% evil:evilevil evil=eVil /}",
        "{/% evil:evilevil evil=EVIL /}",
        "{/% evil:evilevil evil=ev_il /}",
        "{/% evil:evilevil evil=ev il /}",
        "{/% evil:evilevil evil=ev4il /}",
        "{/% evil:evilevil evil=e /}",
        "{/% evil:evilevil evil=  /}",
        "{/% evil:evilevil evil=6 /}",
        "{/% evil:evilevil evil=_ /}",
        "{/% evil:evilevil evil= /}",
        "{/% evil:evilevil evil=\"evil\" //}",
        "{/% evil:evilevil evil=\"evil\" }",
        "{/% evil:evilevil evil=\"evil\"  /}",
        "{/% evil:evilevil evil=\"evil\"/}",
        "{/% evil:evilevil evil=\"evil\" evil=\"evil\" /}",
        "{/% evil:evilevil /}",
        "{/% evil:evilevil evil=\"~\" /}",
        "{/% evil:evilevil evil=\"}\" /}",
        "{/% evil:evilevil evil=\"|\" /}",
        "{/% evil:evilevil evil=\"{\" /}",
        "{/% evil:evilevil evil=\"^\" /}",
        "{/% evil:evilevil evil=\"@\" /}",
        "{/% evil:evilevil evil=\"?\" /}",
        "{/% evil:evilevil evil=\">\" /}",
        "{/% evil:evilevil evil=\"=\" /}",
        "{/% evil:evilevil evil=\"<\" /}",
        "{/% evil:evilevil evil=\":\" /}",
        "{/% evil:evilevil evil=\"/\" /}",
        "{/% evil:evilevil evil=\".\" /}",
        "{/% evil:evilevil evil=\"+\" /}",
        "{/% evil:evilevil evil=\"%\" /}",
        "{/% evil:evilevil evil=\"$\" /}",
        "{/% evil:evilevil evil=\"#\" /}",
        "{/% evil:evilevil evil=\"\"\" /}",
        "{/% evil:evilevil evil=\"eVil\" /}",
        "{/% evil:evilevil evil=\"EVIL\" /}",
        "{/% evil:evilevil evil=\"ev_il\" /}",
        "{/% evil:evilevil evil=\"ev il\" /}",
        "{/% evil:evilevil evil=\"ev4il\" /}",
        "{/% evil:evilevil evil=\"e\" /}",
        "{/% evil:evilevil evil=\" \" /}",
        "{/% evil:evilevil evil=\"6\" /}",
        "{/% evil:evilevil evil=\"_\" /}",
        "{/% evil:evilevil evil=\"\" /}",
        "{/% evil:evilevil eVil=\"evil\" /}",
        "{/% evil:evilevil EVIL=\"evil\" /}",
        "{/% evil:evilevil ev_il=\"evil\" /}",
        "{/% evil:evilevil ev il=\"evil\" /}",
        "{/% evil:evilevil ev4il=\"evil\" /}",
        "{/% evil:evilevil e=\"evil\" /}",
        "{/% evil:evilevil  =\"evil\" /}",
        "{/% evil:evilevil 6=\"evil\" /}",
        "{/% evil:evilevil _=\"evil\" /}",
        "{/% evil:evilevil =\"evil\" /}",
        "{/% evil:evilevil  evil=\"evil\" /}",
        "{/% evil:evilevilevil=\"evil\" /}",
        "{/% evil:evilevilevil evil=\"evil\" /}",
        "{/% evil:evil~ evil=\"evil\" /}",
        "{/% evil:evil} evil=\"evil\" /}",
        "{/% evil:evil| evil=\"evil\" /}",
        "{/% evil:evil{ evil=\"evil\" /}",
        "{/% evil:evil^ evil=\"evil\" /}",
        "{/% evil:evil@ evil=\"evil\" /}",
        "{/% evil:evil? evil=\"evil\" /}",
        "{/% evil:evil> evil=\"evil\" /}",
        "{/% evil:evil= evil=\"evil\" /}",
        "{/% evil:evil< evil=\"evil\" /}",
        "{/% evil:evil: evil=\"evil\" /}",
        "{/% evil:evil/ evil=\"evil\" /}",
        "{/% evil:evil. evil=\"evil\" /}",
        "{/% evil:evil+ evil=\"evil\" /}",
        "{/% evil:evil% evil=\"evil\" /}",
        "{/% evil:evil$ evil=\"evil\" /}",
        "{/% evil:evil# evil=\"evil\" /}",
        "{/% evil:evil\" evil=\"evil\" /}",
        "{/% evil:evileVil evil=\"evil\" /}",
        "{/% evil:evilEVIL evil=\"evil\" /}",
        "{/% evil:evilev_il evil=\"evil\" /}",
        "{/% evil:evilev il evil=\"evil\" /}",
        "{/% evil:evilev4il evil=\"evil\" /}",
        "{/% evil:evile evil=\"evil\" /}",
        "{/% evil:evil  evil=\"evil\" /}",
        "{/% evil:evil6 evil=\"evil\" /}",
        "{/% evil:evil_ evil=\"evil\" /}",
        "{/% evil:evil:evilevil evil=\"evil\" /}",
        "{/% evilevil evil=\"evil\" /}",
        "{/% evil:~evil evil=\"evil\" /}",
        "{/% evil:}evil evil=\"evil\" /}",
        "{/% evil:|evil evil=\"evil\" /}",
        "{/% evil:{evil evil=\"evil\" /}",
        "{/% evil:^evil evil=\"evil\" /}",
        "{/% evil:@evil evil=\"evil\" /}",
        "{/% evil:?evil evil=\"evil\" /}",
        "{/% evil:>evil evil=\"evil\" /}",
        "{/% evil:=evil evil=\"evil\" /}",
        "{/% evil:<evil evil=\"evil\" /}",
        "{/% evil::evil evil=\"evil\" /}",
        "{/% evil:/evil evil=\"evil\" /}",
        "{/% evil:.evil evil=\"evil\" /}",
        "{/% evil:+evil evil=\"evil\" /}",
        "{/% evil:%evil evil=\"evil\" /}",
        "{/% evil:$evil evil=\"evil\" /}",
        "{/% evil:#evil evil=\"evil\" /}",
        "{/% evil:\"evil evil=\"evil\" /}",
        "{/% evil:eVilevil evil=\"evil\" /}",
        "{/% evil:EVILevil evil=\"evil\" /}",
        "{/% evil:ev_ilevil evil=\"evil\" /}",
        "{/% evil:ev ilevil evil=\"evil\" /}",
        "{/% evil:ev4ilevil evil=\"evil\" /}",
        "{/% evil:eevil evil=\"evil\" /}",
        "{/% evil: evil evil=\"evil\" /}",
        "{/% evil:6evil evil=\"evil\" /}",
        "{/% evil:_evil evil=\"evil\" /}",
        "{/% evil:evil evil=\"evil\" /}",
        "{/% ~:evilevil evil=\"evil\" /}",
        "{/% }:evilevil evil=\"evil\" /}",
        "{/% |:evilevil evil=\"evil\" /}",
        "{/% {:evilevil evil=\"evil\" /}",
        "{/% ^:evilevil evil=\"evil\" /}",
        "{/% @:evilevil evil=\"evil\" /}",
        "{/% ?:evilevil evil=\"evil\" /}",
        "{/% >:evilevil evil=\"evil\" /}",
        "{/% =:evilevil evil=\"evil\" /}",
        "{/% <:evilevil evil=\"evil\" /}",
        "{/% ::evilevil evil=\"evil\" /}",
        "{/% /:evilevil evil=\"evil\" /}",
        "{/% .:evilevil evil=\"evil\" /}",
        "{/% +:evilevil evil=\"evil\" /}",
        "{/% %:evilevil evil=\"evil\" /}",
        "{/% $:evilevil evil=\"evil\" /}",
        "{/% #:evilevil evil=\"evil\" /}",
        "{/% \":evilevil evil=\"evil\" /}",
        "{/% eVil:evilevil evil=\"evil\" /}",
        "{/% EVIL:evilevil evil=\"evil\" /}",
        "{/% ev_il:evilevil evil=\"evil\" /}",
        "{/% ev il:evilevil evil=\"evil\" /}",
        "{/% ev4il:evilevil evil=\"evil\" /}",
        "{/% e:evilevil evil=\"evil\" /}",
        "{/%  :evilevil evil=\"evil\" /}",
        "{/% 6:evilevil evil=\"evil\" /}",
        "{/% _:evilevil evil=\"evil\" /}",
        "{/% :evilevil evil=\"evil\" /}",
        "{/% % evil:evilevil evil=\"evil\" /}",
        "{/evil:evilevil evil=\"evil\" /}",
        "{/%  evil:evilevil evil=\"evil\" /}",
        "{/%evil:evilevil evil=\"evil\" /}",
        "{/~ evil:evilevil evil=\"evil\" /}",
        "{/^ evil:evilevil evil=\"evil\" /}",
        "{/@ evil:evilevil evil=\"evil\" /}",
        "{/? evil:evilevil evil=\"evil\" /}",
        "{/> evil:evilevil evil=\"evil\" /}",
        "{/< evil:evilevil evil=\"evil\" /}",
        "{/: evil:evilevil evil=\"evil\" /}",
        "{/+ evil:evilevil evil=\"evil\" /}",
        "{/# evil:evilevil evil=\"evil\" /}",
        "{//% evil:evilevil evil=\"evil\" /}",
        "{% evil:evilevil evil=\"evil\" /}",
        "{\"evil\"}",
        "{evil}",
        "{/% \"evil\":evilevil evil=\"evil\" /}",
        "{/% evil:evilevil evil=evil /}",
        "{/% evil:evilevil evil=\"evil\" /}"
      ]
    },
    {
      "regex": "^(o|\\*|-|1\\.|a\\.)\\s+",
      "exceptionStackTrace": null,
      "matches": ["o  ", "o", "a. ", "1. ", "- ", "* ", "o "]
    },
    {
      "regex": "Server homepage.* is UP",
      "exceptionStackTrace": null,
      "matches": [
        "Server homepageeVil is UP",
        "Server homepageEVIL is UP",
        "Server homepageev_il is UP",
        "Server homepageev il is UP",
        "Server homepageev4il is UP",
        "Server homepagee is UP",
        "Server homepage  is UP",
        "Server homepage6 is UP",
        "Server homepage_ is UP",
        "Server homepage is UP",
        "Server homepageevil is UP"
      ]
    },
    {
      "regex": "(<S>i ngach<\\/S> <E[^>]*><A pl=\"n\" gnt=\"n\">[Uu]ile<\\/A><\\/E>)",
      "exceptionStackTrace": null,
      "matches": [
        "<S>i ngach</S> <Eevil><A pl=\"n\" gnt=\"n\">aile</A></E>",
        "<S>i ngach</S> <Eevil><A pl=\"n\" gnt=\"n\">Uile</A></E>",
        "<S>i ngach</S> <Eevil><A pl=\"n\" gnt=\"n\">Aile</A></E>",
        "<S>i ngach</S> <E>><A pl=\"n\" gnt=\"n\">uile</A></E>",
        "<S>i ngach</S> <E=><A pl=\"n\" gnt=\"n\">uile</A></E>",
        "<S>i ngach</S> <E<><A pl=\"n\" gnt=\"n\">uile</A></E>",
        "<S>i ngach</S> <E/><A pl=\"n\" gnt=\"n\">uile</A></E>",
        "<S>i ngach</S> <E\"><A pl=\"n\" gnt=\"n\">uile</A></E>",
        "<S>i ngach</S> <EeVil><A pl=\"n\" gnt=\"n\">uile</A></E>",
        "<S>i ngach</S> <EEVIL><A pl=\"n\" gnt=\"n\">uile</A></E>",
        "<S>i ngach</S> <Eev_il><A pl=\"n\" gnt=\"n\">uile</A></E>",
        "<S>i ngach</S> <Eev il><A pl=\"n\" gnt=\"n\">uile</A></E>",
        "<S>i ngach</S> <Eev4il><A pl=\"n\" gnt=\"n\">uile</A></E>",
        "<S>i ngach</S> <Ee><A pl=\"n\" gnt=\"n\">uile</A></E>",
        "<S>i ngach</S> <E ><A pl=\"n\" gnt=\"n\">uile</A></E>",
        "<S>i ngach</S> <E6><A pl=\"n\" gnt=\"n\">uile</A></E>",
        "<S>i ngach</S> <E_><A pl=\"n\" gnt=\"n\">uile</A></E>",
        "<S>i ngach</S> <E><A pl=\"n\" gnt=\"n\">uile</A></E>",
        "<S>i ngach</S> <Eevil><A pl=\"n\" gnt=\"n\">uile</A></E>"
      ]
    },
    {
      "regex": "^((?:table[:txattr:]\\.(?:\\s(.+?))\\s*\\n)?(?:(?:[:txattr:]\\.[^\\n\\S]*)?\\|.*?\\|[^\\n\\S]*(?:\\n|$))+)([^\\n\\S]*\\n)?",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "reqId must be a string",
      "exceptionStackTrace": null,
      "matches": ["reqId must be a string"]
    },
    { "regex": "' ", "exceptionStackTrace": null, "matches": ["' "] },
    {
      "regex": "^([%#\\.])(\\w+)",
      "exceptionStackTrace": null,
      "matches": [
        ".eVil",
        ".EVIL",
        ".ev_il",
        ".ev il",
        ".ev4il",
        ".e",
        ". ",
        ".6",
        "._",
        ".",
        "%evil",
        "#evil",
        ".evil"
      ]
    },
    {
      "regex": "\\u0085",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 133"
      },
      "matches": []
    },
    {
      "regex": "\\\\(['\\?])",
      "exceptionStackTrace": null,
      "matches": ["\\'", "\\?"]
    },
    {
      "regex": "^\\*\\s+(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "* *",
        "* eVil",
        "* EVIL",
        "* ev_il",
        "* ev il",
        "* ev4il",
        "* e",
        "*  ",
        "* 6",
        "* _",
        "*  evil",
        "*evil",
        "* ",
        "* evil"
      ]
    },
    {
      "regex": "\\b(\\d{1,2})\\.(\\d{1,2})\\.(\\d{4})\\b",
      "exceptionStackTrace": null,
      "matches": [
        "0.0.00000",
        "0.0.000",
        "0.000.0000",
        "0.00.0000",
        "0..0000",
        "000.0.0000",
        "00.0.0000",
        ".0.0000",
        "0.0.0000"
      ]
    },
    {
      "regex": "\\s{2,100}",
      "exceptionStackTrace": null,
      "matches": [
        "                                                                                                     ",
        "                                                                                                    ",
        " ",
        "  "
      ]
    },
    {
      "regex": "$char_to_match",
      "exceptionStackTrace": null,
      "matches": ["char_to_match"]
    },
    { "regex": "--email", "exceptionStackTrace": null, "matches": ["--email"] },
    {
      "regex": "([\\x09])",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 9"
      },
      "matches": []
    },
    {
      "regex": "((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+",
      "exceptionStackTrace": null,
      "matches": [
        "catch  (evil",
        "catch(evil",
        "class \\",
        "class .",
        "class (",
        "class eVil",
        "class EVIL",
        "class ev_il",
        "class ev il",
        "class ev4il",
        "class e",
        "class  ",
        "class 6",
        "class _",
        "class ",
        "class  evil",
        "classevil",
        "catch (evil",
        "new evil",
        "instanceof evil",
        "trait evil",
        "implements evil",
        "extends evil",
        "interface evil",
        "class evil"
      ]
    },
    {
      "regex": "^T(?P<tsign>0|1)\n                               (?P<temp>\\d\\d\\d)\n                               ((?P<dsign>0|1)\n                               (?P<dewpt>\\d\\d\\d))?\\s+",
      "exceptionStackTrace": null,
      "matches": [
        "T0\n                               000\n                               0\n                               000  ",
        "T0\n                               000\n                               0\n                               000",
        "T0\n                               000\n                               0\n                               0000\n                               000 ",
        "T1\n                               000\n                                ",
        "T0\n                               000\n                                ",
        "T1\n                               000\n                               0\n                               000 ",
        "T0\n                               000\n                               1\n                               000 ",
        "T0\n                               000\n                               0\n                               000 "
      ]
    },
    {
      "regex": "s\\s*\\[\\s*(\\d+)\\s*\\]",
      "exceptionStackTrace": null,
      "matches": [
        "s [ 0  ]",
        "s [ 0]",
        "s [ 00 ]",
        "s [  ]",
        "s [  0 ]",
        "s [0 ]",
        "s  [ 0 ]",
        "s[ 0 ]",
        "s[0]",
        "s [ 0 ]"
      ]
    },
    {
      "regex": "[^\\n\\r]*",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "[^\\d]*(\\d+).*",
      "exceptionStackTrace": null,
      "matches": [
        "evil0eVil",
        "evil0EVIL",
        "evil0ev_il",
        "evil0ev il",
        "evil0ev4il",
        "evil0e",
        "evil0 ",
        "evil06",
        "evil0_",
        "evil0",
        "evil00evil",
        "evilevil",
        "eVil0evil",
        "EVIL0evil",
        "ev_il0evil",
        "ev il0evil",
        "ev4il0evil",
        "e0evil",
        " 0evil",
        "60evil",
        "_0evil",
        "0evil",
        "0",
        "evil0evil"
      ]
    },
    {
      "regex": "\\bmezzanotte\\b",
      "exceptionStackTrace": null,
      "matches": ["mezzanotte"]
    },
    {
      "regex": "\\sscoped(\\s|=|$)",
      "exceptionStackTrace": null,
      "matches": [" scoped", " scoped=", " scoped "]
    },
    {
      "regex": "^(?:STRATEGY\\b)",
      "exceptionStackTrace": null,
      "matches": ["STRATEGY"]
    },
    {
      "regex": "^\\s*(use|with|extends)\\s+['\"]?([\\w:]+)['\"]?",
      "exceptionStackTrace": null,
      "matches": [
        " use \"evil\"\"",
        " use \"evil",
        " use \"evil'",
        " use \":\"",
        " use \"'\"",
        " use \"\"\"",
        " use \"eVil\"",
        " use \"EVIL\"",
        " use \"ev_il\"",
        " use \"ev il\"",
        " use \"ev4il\"",
        " use \"e\"",
        " use \" \"",
        " use \"6\"",
        " use \"_\"",
        " use \"\"",
        " use \"\"evil\"",
        " use evil\"",
        " use 'evil\"",
        " use  \"evil\"",
        " use\"evil\"",
        "  use \"evil\"",
        "use \"evil\"",
        "extends evil",
        "with evil",
        "use evil",
        " extends \"evil\"",
        " with \"evil\"",
        " use \"evil\""
      ]
    },
    {
      "regex": "^((?u:[0-9])+((?u:[E-Ee-e])(?u:[0-9])+))",
      "exceptionStackTrace": null,
      "matches": [""]
    },
    {
      "regex": "^[+-]?[0-9]++$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "multiple repeat"
      },
      "matches": []
    },
    {
      "regex": "^ *[a-z_]+ \\[([0-9a-f]*)\\]$",
      "exceptionStackTrace": null,
      "matches": [
        " evil [aa]",
        " evil []",
        " evil [g]",
        " evil [0]",
        " ] [a]",
        " [ [a]",
        " eVil [a]",
        " EVIL [a]",
        " ev_il [a]",
        " ev il [a]",
        " ev4il [a]",
        " e [a]",
        "   [a]",
        " 6 [a]",
        " _ [a]",
        "  [a]",
        "  evil [a]",
        "evil [a]",
        "evil []",
        " evil [a]"
      ]
    },
    {
      "regex": "[A-N,R-Z][0-9][A-Z][A-Z,0-9][A-Z,0-9][0-9]$",
      "exceptionStackTrace": null,
      "matches": [
        ",0A,A0",
        ",0A,00",
        ",0AA,0",
        ",0A0,0",
        "R0A,,0",
        "O0A,,0",
        "A0A,,0",
        ",0A,,0"
      ]
    },
    {
      "regex": "Unsupported proxy scheme for",
      "exceptionStackTrace": null,
      "matches": ["Unsupported proxy scheme for"]
    },
    {
      "regex": "\\btoQueryString\\b",
      "exceptionStackTrace": null,
      "matches": ["toQueryString"]
    },
    {
      "regex": ".*\\.vmdk$",
      "exceptionStackTrace": null,
      "matches": [
        "..vmdk",
        "eVil.vmdk",
        "EVIL.vmdk",
        "ev_il.vmdk",
        "ev il.vmdk",
        "ev4il.vmdk",
        "e.vmdk",
        " .vmdk",
        "6.vmdk",
        "_.vmdk",
        ".vmdk",
        "evil.vmdk"
      ]
    },
    {
      "regex": "^(\\d+)\\n$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "unexpected subcommand",
      "exceptionStackTrace": null,
      "matches": ["unexpected subcommand"]
    },
    {
      "regex": " *\\, *",
      "exceptionStackTrace": null,
      "matches": [" ,  ", " ,", "  , ", ", ", ",", " , "]
    },
    {
      "regex": "^(.+) NOT$",
      "exceptionStackTrace": null,
      "matches": [
        "eVil NOT",
        "EVIL NOT",
        "ev_il NOT",
        "ev il NOT",
        "ev4il NOT",
        "e NOT",
        "  NOT",
        "6 NOT",
        "_ NOT",
        " NOT",
        "evil NOT"
      ]
    },
    {
      "regex": "(?:(?:medias|iframe)\\/|wvideo=)([\\w-]+)",
      "exceptionStackTrace": null,
      "matches": [
        "medias/=",
        "medias//",
        "medias/-",
        "medias/eVil",
        "medias/EVIL",
        "medias/ev_il",
        "medias/ev il",
        "medias/ev4il",
        "medias/e",
        "medias/ ",
        "medias/6",
        "medias/_",
        "medias/",
        "wvideo=evil",
        "iframe/evil",
        "medias/evil"
      ]
    },
    {
      "regex": "^k[1234]",
      "exceptionStackTrace": null,
      "matches": ["k3", "k2", "k1", "k0", "k4"]
    },
    {
      "regex": "^@testcli retweeted 1 tweet.$",
      "exceptionStackTrace": null,
      "matches": [
        "@testcli retweeted 1 tweetA",
        "@testcli retweeted 1 tweet@",
        "@testcli retweeted 1 tweet0",
        "@testcli retweeted 1 tweet ",
        "@testcli retweeted 1 tweeta"
      ]
    },
    {
      "regex": "^/(\\\\w+)(/?)",
      "exceptionStackTrace": null,
      "matches": ["/\\w//", "/\\ww/", "/\\/", "/\\w", "/\\w/"]
    },
    { "regex": "\\{file\\}", "exceptionStackTrace": null, "matches": ["{file}"] },
    {
      "regex": "mpv (\\S+)",
      "exceptionStackTrace": null,
      "matches": [
        "mpv eVil",
        "mpv EVIL",
        "mpv ev_il",
        "mpv ev il",
        "mpv ev4il",
        "mpv e",
        "mpv  ",
        "mpv 6",
        "mpv _",
        "mpv ",
        "mpv evil"
      ]
    },
    {
      "regex": "max-age\\W*=\\W*(\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "max-age;=;00",
        "max-age;=;",
        "max-age;=;;0",
        "max-age;=0",
        "max-age;=a0",
        "max-age;=_0",
        "max-age;=A0",
        "max-age;==0",
        "max-age;=00",
        "max-age;=-0",
        "max-age;= 0",
        "max-age;;=;0",
        "max-age=;0",
        "max-agea=;0",
        "max-age_=;0",
        "max-ageA=;0",
        "max-age==;0",
        "max-age0=;0",
        "max-age-=;0",
        "max-age =;0",
        "max-age=0",
        "max-age;=;0"
      ]
    },
    {
      "regex": "custom_signature_definitions/",
      "exceptionStackTrace": null,
      "matches": ["custom_signature_definitions/"]
    },
    {
      "regex": "Cannot test sorting on an array with 1 item",
      "exceptionStackTrace": null,
      "matches": ["Cannot test sorting on an array with 1 item"]
    },
    {
      "regex": "\\(\\?-mix:.+\\)",
      "exceptionStackTrace": null,
      "matches": [
        "(?-mix:?)",
        "(?-mix::)",
        "(?-mix:-)",
        "(?-mix:))",
        "(?-mix:()",
        "(?-mix:eVil)",
        "(?-mix:EVIL)",
        "(?-mix:ev_il)",
        "(?-mix:ev il)",
        "(?-mix:ev4il)",
        "(?-mix:e)",
        "(?-mix: )",
        "(?-mix:6)",
        "(?-mix:_)",
        "(?-mix:)",
        "(?-mix:evil)"
      ]
    },
    {
      "regex": "(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)",
      "exceptionStackTrace": null,
      "matches": [
        "~",
        "}",
        "|",
        "{",
        "`",
        "^",
        "]",
        "\\",
        "[",
        "?",
        ">",
        "=",
        "<",
        ";",
        ":",
        "/",
        ".",
        "-",
        ",",
        "+",
        "*",
        ")",
        "(",
        "'",
        "&",
        "%",
        "#",
        "\"",
        "!",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "-0.0eVil",
        "-0.0EVIL",
        "-0.0ev_il",
        "-0.0ev il",
        "-0.0ev4il",
        "-0.0e",
        "-0.0 ",
        "-0.06",
        "-0.0_",
        "-0.0",
        "-00.0evil",
        "-.0evil",
        "--0.0evil",
        "0.0evil",
        ".0",
        "evil",
        "-0.0evil"
      ]
    },
    {
      "regex": "key not found",
      "exceptionStackTrace": null,
      "matches": ["key not found"]
    },
    {
      "regex": "[\\s)](if|begin|end)\\s",
      "exceptionStackTrace": null,
      "matches": [" if ", ")end ", ")begin ", ")if "]
    },
    {
      "regex": "Passing 'oembed' as the first argument is not required anymore",
      "exceptionStackTrace": null,
      "matches": [
        "Passing 'oembed' as the first argument is not required anymore"
      ]
    },
    {
      "regex": "(?<![<>])(<T>[Aa]n<\\/T> <N pl=\"n\" gnt=\"n\" gnd=\"f\">Iam\\x{e1}ice<\\/N>)(?![<>])",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "incomplete escape \\x"
      },
      "matches": []
    },
    {
      "regex": "^(http|https):\\/\\/[^\\/]+",
      "exceptionStackTrace": null,
      "matches": [
        "http://:",
        "http:///",
        "http://eVil",
        "http://EVIL",
        "http://ev_il",
        "http://ev il",
        "http://ev4il",
        "http://e",
        "http:// ",
        "http://6",
        "http://_",
        "http://",
        "https://evil",
        "http://evil"
      ]
    },
    {
      "regex": "address or name of the contract",
      "exceptionStackTrace": null,
      "matches": ["address or name of the contract"]
    },
    {
      "regex": "\\G($identifier_re(\\s*(=>|:(?!:)))?)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\G"
      },
      "matches": []
    },
    { "regex": "^(fil)", "exceptionStackTrace": null, "matches": ["fil"] },
    {
      "regex": "eitherToLast: Either or Either returning function required",
      "exceptionStackTrace": null,
      "matches": ["eitherToLast: Either or Either returning function required"]
    },
    {
      "regex": "${base}::",
      "exceptionStackTrace": null,
      "matches": ["{base}::"]
    },
    {
      "regex": "(.*)\\s+license",
      "exceptionStackTrace": null,
      "matches": [
        "evil  license",
        "evillicense",
        "eVil license",
        "EVIL license",
        "ev_il license",
        "ev il license",
        "ev4il license",
        "e license",
        "  license",
        "6 license",
        "_ license",
        " license",
        "evil license"
      ]
    },
    {
      "regex": "(\\?\\>)(\\n|\\s)*(\\]\\]\\>)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "-Y (\\d+) \\+X (\\d+)",
      "exceptionStackTrace": null,
      "matches": ["-Y 0 +X 00", "-Y 0 +X ", "-Y 00 +X 0", "-Y  +X 0", "-Y 0 +X 0"]
    },
    {
      "regex": "a{2}a+",
      "exceptionStackTrace": null,
      "matches": ["aaaa", "aa", "aaa"]
    },
    {
      "regex": "\\G\\s*(?:->)?\\s*[{]\\w+[}]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\G"
      },
      "matches": []
    },
    {
      "regex": "\"noTimestamp\" must be a boolean",
      "exceptionStackTrace": null,
      "matches": ["\"noTimestamp\" must be a boolean"]
    },
    {
      "regex": "jquery-writeCapture-script-placeholder-(\\d+)-wc",
      "exceptionStackTrace": null,
      "matches": [
        "jquery-writeCapture-script-placeholder-00-wc",
        "jquery-writeCapture-script-placeholder--wc",
        "jquery-writeCapture-script-placeholder-0-wc"
      ]
    },
    {
      "regex": "^[a-zA-Z][a-zA-Z0-9\\-]+$",
      "exceptionStackTrace": null,
      "matches": [
        "A-",
        "AeVil",
        "AEVIL",
        "Aev_il",
        "Aev il",
        "Aev4il",
        "Ae",
        "A ",
        "A6",
        "A_",
        "A",
        "aevil",
        "Aevil"
      ]
    },
    {
      "regex": "\\Aenv:(.+)\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    { "regex": "^($RE_CE)", "exceptionStackTrace": null, "matches": ["RE_CE"] },
    {
      "regex": "^(\\d{1,2})[^\\d]+([a-zA-Z]{3,15})[^\\d]+(\\d{4})[^\\d]+(\\d{1,2})[^\\d]+(\\d{1,2})[^\\d]+(\\d{1,2})[^\\d]+(\\d{1,3})$",
      "exceptionStackTrace": null,
      "matches": [
        "0evilAAAevil0000evil0evil0evil0evil0000",
        "0evilAAAevil0000evil0evil0evil0evil000",
        "0evilAAAevil0000evil0evil0evil0evil",
        "0evilAAAevil0000evil0evil0evil0eVil0",
        "0evilAAAevil0000evil0evil0evil0EVIL0",
        "0evilAAAevil0000evil0evil0evil0ev_il0",
        "0evilAAAevil0000evil0evil0evil0ev il0",
        "0evilAAAevil0000evil0evil0evil0ev4il0",
        "0evilAAAevil0000evil0evil0evil0e0",
        "0evilAAAevil0000evil0evil0evil0 0",
        "0evilAAAevil0000evil0evil0evil060",
        "0evilAAAevil0000evil0evil0evil0_0",
        "0evilAAAevil0000evil0evil0evil00",
        "0evilAAAevil0000evil0evil0evil000evil0",
        "0evilAAAevil0000evil0evil0evil00evil0",
        "0evilAAAevil0000evil0evil0evilevil0",
        "0evilAAAevil0000evil0evil0eVil0evil0",
        "0evilAAAevil0000evil0evil0EVIL0evil0",
        "0evilAAAevil0000evil0evil0ev_il0evil0",
        "0evilAAAevil0000evil0evil0ev il0evil0",
        "0evilAAAevil0000evil0evil0ev4il0evil0",
        "0evilAAAevil0000evil0evil0e0evil0",
        "0evilAAAevil0000evil0evil0 0evil0",
        "0evilAAAevil0000evil0evil060evil0",
        "0evilAAAevil0000evil0evil0_0evil0",
        "0evilAAAevil0000evil0evil00evil0",
        "0evilAAAevil0000evil0evil000evil0evil0",
        "0evilAAAevil0000evil0evil00evil0evil0",
        "0evilAAAevil0000evil0evilevil0evil0",
        "0evilAAAevil0000evil0eVil0evil0evil0",
        "0evilAAAevil0000evil0EVIL0evil0evil0",
        "0evilAAAevil0000evil0ev_il0evil0evil0",
        "0evilAAAevil0000evil0ev il0evil0evil0",
        "0evilAAAevil0000evil0ev4il0evil0evil0",
        "0evilAAAevil0000evil0e0evil0evil0",
        "0evilAAAevil0000evil0 0evil0evil0",
        "0evilAAAevil0000evil060evil0evil0",
        "0evilAAAevil0000evil0_0evil0evil0",
        "0evilAAAevil0000evil00evil0evil0",
        "0evilAAAevil0000evil000evil0evil0evil0",
        "0evilAAAevil0000evil00evil0evil0evil0",
        "0evilAAAevil0000evilevil0evil0evil0",
        "0evilAAAevil0000eVil0evil0evil0evil0",
        "0evilAAAevil0000EVIL0evil0evil0evil0",
        "0evilAAAevil0000ev_il0evil0evil0evil0",
        "0evilAAAevil0000ev il0evil0evil0evil0",
        "0evilAAAevil0000ev4il0evil0evil0evil0",
        "0evilAAAevil0000e0evil0evil0evil0",
        "0evilAAAevil0000 0evil0evil0evil0",
        "0evilAAAevil000060evil0evil0evil0",
        "0evilAAAevil0000_0evil0evil0evil0",
        "0evilAAAevil00000evil0evil0evil0",
        "0evilAAAevil00000evil0evil0evil0evil0",
        "0evilAAAevil000evil0evil0evil0evil0",
        "0evilAAAeVil0000evil0evil0evil0evil0",
        "0evilAAAEVIL0000evil0evil0evil0evil0",
        "0evilAAAev_il0000evil0evil0evil0evil0",
        "0evilAAAev il0000evil0evil0evil0evil0",
        "0evilAAAev4il0000evil0evil0evil0evil0",
        "0evilAAAe0000evil0evil0evil0evil0",
        "0evilAAA 0000evil0evil0evil0evil0",
        "0evilAAA60000evil0evil0evil0evil0",
        "0evilAAA_0000evil0evil0evil0evil0",
        "0evilAAA0000evil0evil0evil0evil0",
        "0evilAAAAAAAAAAAAAAAAevil0000evil0evil0evil0evil0",
        "0evilAAAAAAAAAAAAAAAevil0000evil0evil0evil0evil0",
        "0evilAAevil0000evil0evil0evil0evil0",
        "0evilaAAevil0000evil0evil0evil0evil0",
        "0eVilAAAevil0000evil0evil0evil0evil0",
        "0EVILAAAevil0000evil0evil0evil0evil0",
        "0ev_ilAAAevil0000evil0evil0evil0evil0",
        "0ev ilAAAevil0000evil0evil0evil0evil0",
        "0ev4ilAAAevil0000evil0evil0evil0evil0",
        "0eAAAevil0000evil0evil0evil0evil0",
        "0 AAAevil0000evil0evil0evil0evil0",
        "06AAAevil0000evil0evil0evil0evil0",
        "0_AAAevil0000evil0evil0evil0evil0",
        "0AAAevil0000evil0evil0evil0evil0",
        "000evilAAAevil0000evil0evil0evil0evil0",
        "00evilAAAevil0000evil0evil0evil0evil0",
        "evilAAAevil0000evil0evil0evil0evil0",
        "0evilAAAevil0000evil0evil0evil0evil0"
      ]
    },
    {
      "regex": "^\\s*\\.\\w+",
      "exceptionStackTrace": null,
      "matches": [
        " .eVil",
        " .EVIL",
        " .ev_il",
        " .ev il",
        " .ev4il",
        " .e",
        " . ",
        " .6",
        " ._",
        " .",
        "  .evil",
        ".evil",
        " .evil"
      ]
    },
    {
      "regex": "(^|[\\s\"']+)([\\/a-zA-Z0-9\\._\\-]+)($|[\\s\"']+)",
      "exceptionStackTrace": null,
      "matches": [
        "''evil",
        "\"evil",
        " evil",
        "evil''",
        "evil\"",
        "evil ",
        "/",
        ".",
        "-",
        "'",
        "\"",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "'evil",
        "evil'",
        "evil"
      ]
    },
    {
      "regex": "^[a-z0-9_]+",
      "exceptionStackTrace": null,
      "matches": [
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "\\.(webp|jpeg|jpg|jpe|gif|png|bmp)$",
      "exceptionStackTrace": null,
      "matches": [".bmp", ".png", ".gif", ".jpe", ".jpg", ".jpeg", ".webp"]
    },
    {
      "regex": "[^{]*\\}.*|>>",
      "exceptionStackTrace": null,
      "matches": [
        "evil}}",
        "evil}{",
        "evil}>",
        "evil}eVil",
        "evil}EVIL",
        "evil}ev_il",
        "evil}ev il",
        "evil}ev4il",
        "evil}e",
        "evil} ",
        "evil}6",
        "evil}_",
        "evil}",
        "}}evil",
        "{}evil",
        ">}evil",
        "eVil}evil",
        "EVIL}evil",
        "ev_il}evil",
        "ev il}evil",
        "ev4il}evil",
        "e}evil",
        " }evil",
        "6}evil",
        "_}evil",
        "}evil",
        "}",
        ">>",
        "evil}evil"
      ]
    },
    {
      "regex": "insufficient double storage",
      "exceptionStackTrace": null,
      "matches": ["insufficient double storage"]
    },
    {
      "regex": "{([a-zA-Z_][a-zA-Z0-9_]*)(:[a-zA-Z_][a-zA-Z0-9_]*)?}",
      "exceptionStackTrace": null,
      "matches": [
        "{_evil:_evil:_evil}",
        "{_evil}",
        "{_evil:_}}",
        "{_evil:_{}",
        "{_evil:_:}",
        "{_evil:_eVil}",
        "{_evil:_EVIL}",
        "{_evil:_ev_il}",
        "{_evil:_ev il}",
        "{_evil:_ev4il}",
        "{_evil:_e}",
        "{_evil:_ }",
        "{_evil:_6}",
        "{_evil:__}",
        "{_evil:_}",
        "{_evil:aevil}",
        "{_evil:Aevil}",
        "{_}:_evil}",
        "{_{:_evil}",
        "{_::_evil}",
        "{_eVil:_evil}",
        "{_EVIL:_evil}",
        "{_ev_il:_evil}",
        "{_ev il:_evil}",
        "{_ev4il:_evil}",
        "{_e:_evil}",
        "{_ :_evil}",
        "{_6:_evil}",
        "{__:_evil}",
        "{_:_evil}",
        "{aevil:_evil}",
        "{Aevil:_evil}",
        "{_}",
        "{_evil:_evil}"
      ]
    },
    {
      "regex": "^Operating system:",
      "exceptionStackTrace": null,
      "matches": ["Operating system:"]
    },
    {
      "regex": "\\\\it\\s*",
      "exceptionStackTrace": null,
      "matches": ["\\it  ", "\\it", "\\it "]
    },
    {
      "regex": "^((\\x{20}{6,})((\\*\\x{20}?){5})\\s*)$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "incomplete escape \\x"
      },
      "matches": []
    },
    { "regex": "Draco", "exceptionStackTrace": null, "matches": ["Draco"] },
    {
      "regex": "\\A<speak>",
      "exceptionStackTrace": null,
      "matches": ["<speak>"]
    },
    {
      "regex": "UPSTREAM: (revert: )?(([\\w\\.-]+\\/[\\w-\\.-]+)?: )?(\\d+:|<carry>:|<drop>:)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad character range \\w-\\."
      },
      "matches": []
    },
    {
      "regex": "^/_pipe/(.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "/_pipe//",
        "/_pipe/eVil",
        "/_pipe/EVIL",
        "/_pipe/ev_il",
        "/_pipe/ev il",
        "/_pipe/ev4il",
        "/_pipe/e",
        "/_pipe/ ",
        "/_pipe/6",
        "/_pipe/_",
        "/_pipe/",
        "/_pipe/evil"
      ]
    },
    {
      "regex": "(?<![<>])((?:<A[^>]*>measartha<\\/A>) (?:<A[^>]*>[^<]+<\\/A>))(?![<>])",
      "exceptionStackTrace": null,
      "matches": [
        "<Aevil>measartha</A> <Aevil>></A>",
        "<Aevil>measartha</A> <Aevil><</A>",
        "<Aevil>measartha</A> <Aevil>/</A>",
        "<Aevil>measartha</A> <Aevil>eVil</A>",
        "<Aevil>measartha</A> <Aevil>EVIL</A>",
        "<Aevil>measartha</A> <Aevil>ev_il</A>",
        "<Aevil>measartha</A> <Aevil>ev il</A>",
        "<Aevil>measartha</A> <Aevil>ev4il</A>",
        "<Aevil>measartha</A> <Aevil>e</A>",
        "<Aevil>measartha</A> <Aevil> </A>",
        "<Aevil>measartha</A> <Aevil>6</A>",
        "<Aevil>measartha</A> <Aevil>_</A>",
        "<Aevil>measartha</A> <Aevil></A>",
        "<Aevil>measartha</A> <A>>evil</A>",
        "<Aevil>measartha</A> <A<>evil</A>",
        "<Aevil>measartha</A> <A/>evil</A>",
        "<Aevil>measartha</A> <AeVil>evil</A>",
        "<Aevil>measartha</A> <AEVIL>evil</A>",
        "<Aevil>measartha</A> <Aev_il>evil</A>",
        "<Aevil>measartha</A> <Aev il>evil</A>",
        "<Aevil>measartha</A> <Aev4il>evil</A>",
        "<Aevil>measartha</A> <Ae>evil</A>",
        "<Aevil>measartha</A> <A >evil</A>",
        "<Aevil>measartha</A> <A6>evil</A>",
        "<Aevil>measartha</A> <A_>evil</A>",
        "<Aevil>measartha</A> <A>evil</A>",
        "<A>>measartha</A> <Aevil>evil</A>",
        "<A<>measartha</A> <Aevil>evil</A>",
        "<A/>measartha</A> <Aevil>evil</A>",
        "<AeVil>measartha</A> <Aevil>evil</A>",
        "<AEVIL>measartha</A> <Aevil>evil</A>",
        "<Aev_il>measartha</A> <Aevil>evil</A>",
        "<Aev il>measartha</A> <Aevil>evil</A>",
        "<Aev4il>measartha</A> <Aevil>evil</A>",
        "<Ae>measartha</A> <Aevil>evil</A>",
        "<A >measartha</A> <Aevil>evil</A>",
        "<A6>measartha</A> <Aevil>evil</A>",
        "<A_>measartha</A> <Aevil>evil</A>",
        "<A>measartha</A> <Aevil>evil</A>",
        "<A>measartha</A> <A>evil</A>",
        "<Aevil>measartha</A> <Aevil>evil</A>"
      ]
    },
    {
      "regex": "(?i)^ *the ",
      "exceptionStackTrace": null,
      "matches": ["  the ", "the ", " the "]
    },
    {
      "regex": "<h1>Simple H1</h1>",
      "exceptionStackTrace": null,
      "matches": ["<h1>Simple H1</h1>"]
    },
    {
      "regex": "canvas.node",
      "exceptionStackTrace": null,
      "matches": [
        "canvas_node",
        "canvasAnode",
        "canvas0node",
        "canvas node",
        "canvasanode"
      ]
    },
    {
      "regex": "^value-title$",
      "exceptionStackTrace": null,
      "matches": ["value-title"]
    },
    {
      "regex": "^<\\?.*?>",
      "exceptionStackTrace": null,
      "matches": [
        "<??>",
        "<?>>",
        "<?<>",
        "<?eVil>",
        "<?EVIL>",
        "<?ev_il>",
        "<?ev il>",
        "<?ev4il>",
        "<?e>",
        "<? >",
        "<?6>",
        "<?_>",
        "<?>",
        "<?evil>"
      ]
    },
    { "regex": ",\\)", "exceptionStackTrace": null, "matches": [",)"] },
    {
      "regex": "^[\\w/\\-\\+]+$",
      "exceptionStackTrace": null,
      "matches": [
        "/",
        "-",
        "+",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "<link rel=\\\"stylesheet\\\" href=\\\"\\.\\/css\\/",
      "exceptionStackTrace": null,
      "matches": ["<link rel=\"stylesheet\" href=\"./css/"]
    },
    {
      "regex": "assets\\/relative-css-image\\.[a-z0-9]{16}\\.jpg",
      "exceptionStackTrace": null,
      "matches": [
        "assets/relative-css-image.00000000000000000.jpg",
        "assets/relative-css-image.000000000000000.jpg",
        "assets/relative-css-image.a000000000000000.jpg",
        "assets/relative-css-image.0000000000000000.jpg"
      ]
    },
    {
      "regex": "^(?:block +)?prepend +([^\\n]+)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^EX[TCD]$",
      "exceptionStackTrace": null,
      "matches": ["EXT", "EXC", "EXA", "EXD"]
    },
    {
      "regex": "\\bchristmas(\\sday)?\\b",
      "exceptionStackTrace": null,
      "matches": ["christmas day day", "christmas", "christmas day"]
    },
    {
      "regex": "\\(e(.*)\\)",
      "exceptionStackTrace": null,
      "matches": [
        "(e))",
        "(e()",
        "(eeVil)",
        "(eEVIL)",
        "(eev_il)",
        "(eev il)",
        "(eev4il)",
        "(ee)",
        "(e )",
        "(e6)",
        "(e_)",
        "(e)",
        "(eevil)"
      ]
    },
    {
      "regex": "\\.xs\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "(?x) .*\\bsig\\b(?!.*\\bend\\b)\n              | .*\\bstruct\\b(?!.*\\bend\\b) \n              | .*\\blet\\b(?!.*\\bin\\b.*\\bend\\b)\n              | \\blocal\\b(?!.*\\bin\\b.*\\bend\\b)\n              | \\bin\\b(?!.*\\bend\\b)\n              | .*\\(case\\b(?!\\))\n              | .*\\bcase\\b(?!(.*of.*=>.*))",
      "exceptionStackTrace": null,
      "matches": [
        " >case",
        " =case",
        " )case",
        " (case",
        " eVilcase",
        " EVILcase",
        " ev_ilcase",
        " ev ilcase",
        " ev4ilcase",
        " ecase",
        "  case",
        " 6case",
        " _case",
        " >(case\n              ",
        " =(case\n              ",
        " )(case\n              ",
        " ((case\n              ",
        " eVil(case\n              ",
        " EVIL(case\n              ",
        " ev_il(case\n              ",
        " ev il(case\n              ",
        " ev4il(case\n              ",
        " e(case\n              ",
        "  (case\n              ",
        " 6(case\n              ",
        " _(case\n              ",
        " >let\n              ",
        " =let\n              ",
        " )let\n              ",
        " (let\n              ",
        " eVillet\n              ",
        " EVILlet\n              ",
        " ev_illet\n              ",
        " ev illet\n              ",
        " ev4illet\n              ",
        " elet\n              ",
        "  let\n              ",
        " 6let\n              ",
        " _let\n              ",
        " >struct \n              ",
        " =struct \n              ",
        " )struct \n              ",
        " (struct \n              ",
        " eVilstruct \n              ",
        " EVILstruct \n              ",
        " ev_ilstruct \n              ",
        " ev ilstruct \n              ",
        " ev4ilstruct \n              ",
        " estruct \n              ",
        "  struct \n              ",
        " 6struct \n              ",
        " _struct \n              ",
        " >sig\n              ",
        " =sig\n              ",
        " )sig\n              ",
        " (sig\n              ",
        " eVilsig\n              ",
        " EVILsig\n              ",
        " ev_ilsig\n              ",
        " ev ilsig\n              ",
        " ev4ilsig\n              ",
        " esig\n              ",
        "  sig\n              ",
        " 6sig\n              ",
        " _sig\n              ",
        " case",
        " (case\n              ",
        " let\n              ",
        " struct \n              ",
        " sig\n              ",
        " evilcase",
        " evil(case\n              ",
        " in\n              ",
        " local\n              ",
        " evillet\n              ",
        " evilstruct \n              ",
        " evilsig\n              "
      ]
    },
    {
      "regex": "-[0-9]*[1-9][0-9]*",
      "exceptionStackTrace": null,
      "matches": ["-0100", "-01", "-000", "-0010", "-10", "-1", "-010"]
    },
    { "regex": "#|^\\$ ", "exceptionStackTrace": null, "matches": ["$ ", "#"] },
    {
      "regex": "^\\s*(\\d+(?:\\.\\d*)?)\\s*(?:([bkmgtpezy])b?)?\\s*",
      "exceptionStackTrace": null,
      "matches": [
        " 0.0 yb  ",
        " 0.0 yb",
        " 0.0 ybyb ",
        " 0.0  ",
        " 0.0 ybb ",
        " 0.0 y ",
        " 0.0 zb ",
        " 0.0 tb ",
        " 0.0 pb ",
        " 0.0 mb ",
        " 0.0 kb ",
        " 0.0 gb ",
        " 0.0 eb ",
        " 0.0 bb ",
        " 0.0 ab ",
        " 0.0  yb ",
        " 0.0yb ",
        " 0.0.0 yb ",
        " 0 yb ",
        " 0.00 yb ",
        " 0. yb ",
        " 00.0 yb ",
        " .0 yb ",
        "  0.0 yb ",
        "0.0 yb ",
        "0",
        " 0.0 yb "
      ]
    },
    {
      "regex": "\\t|&|<|>|( +)|([\\x00-\\x1f\\x80-\\xa0\\xad\\u1680\\u180E\\u2000-\\u200f\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF\\uFFF9-\\uFFFC])|[\\u1100-\\u115F\\u11A3-\\u11A7\\u11FA-\\u11FF\\u2329-\\u232A\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFB\\u3000-\\u303E\\u3041-\\u3096\\u3099-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u3190-\\u31BA\\u31C0-\\u31E3\\u31F0-\\u321E\\u3220-\\u3247\\u3250-\\u32FE\\u3300-\\u4DBF\\u4E00-\\uA48C\\uA490-\\uA4C6\\uA960-\\uA97C\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFAFF\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE66\\uFE68-\\uFE6B\\uFF01-\\uFF60\\uFFE0-\\uFFE6]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "^/(\\S+)",
      "exceptionStackTrace": null,
      "matches": [
        "//",
        "/eVil",
        "/EVIL",
        "/ev_il",
        "/ev il",
        "/ev4il",
        "/e",
        "/ ",
        "/6",
        "/_",
        "/",
        "/evil"
      ]
    },
    {
      "regex": "hyph_([\\w\\_]+)\\.dic",
      "exceptionStackTrace": null,
      "matches": [
        "hyph_..dic",
        "hyph_eVil.dic",
        "hyph_EVIL.dic",
        "hyph_ev_il.dic",
        "hyph_ev il.dic",
        "hyph_ev4il.dic",
        "hyph_e.dic",
        "hyph_ .dic",
        "hyph_6.dic",
        "hyph__.dic",
        "hyph_.dic",
        "hyph_evil.dic"
      ]
    },
    {
      "regex": "^(Windows-(1250|1252|1253|1254|1255|1257|1258)|macThai|Windows-874)",
      "exceptionStackTrace": null,
      "matches": [
        "Windows-874",
        "macThai",
        "Windows-1258",
        "Windows-1257",
        "Windows-1255",
        "Windows-1254",
        "Windows-1253",
        "Windows-1252",
        "Windows-1250"
      ]
    },
    {
      "regex": "^https:\\/\\/manager\\.webbynode\\.com\\/api\\/xml\\/dns\\/\\d+\\/records\\/new\\?.+",
      "exceptionStackTrace": null,
      "matches": [
        "https://manager.webbynode.com/api/xml/dns/0/records/new??",
        "https://manager.webbynode.com/api/xml/dns/0/records/new?:",
        "https://manager.webbynode.com/api/xml/dns/0/records/new?/",
        "https://manager.webbynode.com/api/xml/dns/0/records/new?.",
        "https://manager.webbynode.com/api/xml/dns/0/records/new?eVil",
        "https://manager.webbynode.com/api/xml/dns/0/records/new?EVIL",
        "https://manager.webbynode.com/api/xml/dns/0/records/new?ev_il",
        "https://manager.webbynode.com/api/xml/dns/0/records/new?ev il",
        "https://manager.webbynode.com/api/xml/dns/0/records/new?ev4il",
        "https://manager.webbynode.com/api/xml/dns/0/records/new?e",
        "https://manager.webbynode.com/api/xml/dns/0/records/new? ",
        "https://manager.webbynode.com/api/xml/dns/0/records/new?6",
        "https://manager.webbynode.com/api/xml/dns/0/records/new?_",
        "https://manager.webbynode.com/api/xml/dns/0/records/new?",
        "https://manager.webbynode.com/api/xml/dns/00/records/new?evil",
        "https://manager.webbynode.com/api/xml/dns//records/new?evil",
        "https://manager.webbynode.com/api/xml/dns/0/records/new?evil"
      ]
    },
    {
      "regex": "^[a-z0-9_]{1,25}\\Z",
      "exceptionStackTrace": null,
      "matches": [
        "__________________________",
        "_________________________",
        "",
        "a",
        "0",
        "_"
      ]
    },
    {
      "regex": "MSIE [4-8]",
      "exceptionStackTrace": null,
      "matches": ["MSIE 0", "MSIE 4"]
    },
    {
      "regex": "<div[^>]*>",
      "exceptionStackTrace": null,
      "matches": [
        "<div>>",
        "<div<>",
        "<diveVil>",
        "<divEVIL>",
        "<divev_il>",
        "<divev il>",
        "<divev4il>",
        "<dive>",
        "<div >",
        "<div6>",
        "<div_>",
        "<div>",
        "<divevil>"
      ]
    },
    {
      "regex": "\\s*\"([^\"]+)\"\\s*",
      "exceptionStackTrace": null,
      "matches": [
        " \"evil\"  ",
        " \"evil\"",
        " \"\"\" ",
        " \"eVil\" ",
        " \"EVIL\" ",
        " \"ev_il\" ",
        " \"ev il\" ",
        " \"ev4il\" ",
        " \"e\" ",
        " \" \" ",
        " \"6\" ",
        " \"_\" ",
        " \"\" ",
        "  \"evil\" ",
        "\"evil\" ",
        "\"evil\"",
        " \"evil\" "
      ]
    },
    {
      "regex": "^A directory without a git repo$",
      "exceptionStackTrace": null,
      "matches": ["A directory without a git repo"]
    },
    {
      "regex": "\\bquerySelector\\b",
      "exceptionStackTrace": null,
      "matches": ["querySelector"]
    },
    {
      "regex": "\\0(\\d+)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\0"
      },
      "matches": []
    },
    {
      "regex": "[\\,\\-\\/\\s\\[\\]]+",
      "exceptionStackTrace": null,
      "matches": ["]]", "", "[", "/", "-", ",", " ", "]"]
    },
    {
      "regex": "^([^\\s]+)\\s+?(.*)\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        "evil evil  ",
        "evil evil",
        "evil eVil ",
        "evil EVIL ",
        "evil ev_il ",
        "evil ev il ",
        "evil ev4il ",
        "evil e ",
        "evil   ",
        "evil 6 ",
        "evil _ ",
        "evil  ",
        "evil  evil ",
        "evilevil ",
        "eVil evil ",
        "EVIL evil ",
        "ev_il evil ",
        "ev il evil ",
        "ev4il evil ",
        "e evil ",
        "  evil ",
        "6 evil ",
        "_ evil ",
        " evil ",
        "evil ",
        "evil evil "
      ]
    },
    { "regex": "torrent$", "exceptionStackTrace": null, "matches": ["torrent"] },
    {
      "regex": "^[a-zA-Z\\._\\-0-9]+$",
      "exceptionStackTrace": null,
      "matches": [
        ".",
        "-",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "^StateError: MyCustomErrorMessage\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "#SERVER_NAME#",
      "exceptionStackTrace": null,
      "matches": ["#SERVER_NAME#"]
    },
    {
      "regex": "^/api/route_tables/([^/]+)/routes$",
      "exceptionStackTrace": null,
      "matches": [
        "/api/route_tables///routes",
        "/api/route_tables/eVil/routes",
        "/api/route_tables/EVIL/routes",
        "/api/route_tables/ev_il/routes",
        "/api/route_tables/ev il/routes",
        "/api/route_tables/ev4il/routes",
        "/api/route_tables/e/routes",
        "/api/route_tables/ /routes",
        "/api/route_tables/6/routes",
        "/api/route_tables/_/routes",
        "/api/route_tables//routes",
        "/api/route_tables/evil/routes"
      ]
    },
    {
      "regex": " libhb: scan thread found ([0-9]+) valid title",
      "exceptionStackTrace": null,
      "matches": [
        " libhb: scan thread found 00 valid title",
        " libhb: scan thread found  valid title",
        " libhb: scan thread found 0 valid title"
      ]
    },
    {
      "regex": "@@(\\w[\\w ]*?)@@",
      "exceptionStackTrace": null,
      "matches": [
        "@@aeVil@@",
        "@@aEVIL@@",
        "@@aev_il@@",
        "@@aev il@@",
        "@@aev4il@@",
        "@@ae@@",
        "@@a @@",
        "@@a6@@",
        "@@a_@@",
        "@@_evil@@",
        "@@Aevil@@",
        "@@0evil@@",
        "@@a@@",
        "@@aevil@@"
      ]
    },
    {
      "regex": "^[A-Z_\\d-]{3,50}$",
      "exceptionStackTrace": null,
      "matches": [
        "---------------------------------------------------",
        "--------------------------------------------------",
        "--",
        "_--",
        "A--",
        "0--",
        "---"
      ]
    },
    {
      "regex": "^\\/\\/([^\\.]+)?\\.",
      "exceptionStackTrace": null,
      "matches": [
        "//evilevil.",
        "///.",
        "//..",
        "//eVil.",
        "//EVIL.",
        "//ev_il.",
        "//ev il.",
        "//ev4il.",
        "//e.",
        "// .",
        "//6.",
        "//_.",
        "//.",
        "//evil."
      ]
    },
    {
      "regex": "\\bNS(?<_1>NotFound|Ordered(?<_2>Ascending|Descending|Same))\\b",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<_"
      },
      "matches": []
    },
    {
      "regex": "'(\\\\'|[^'])*'",
      "exceptionStackTrace": null,
      "matches": [
        "'\\'",
        "'A'",
        "'0'",
        "'''",
        "' '",
        "'\\'\\''",
        "''",
        "'a'",
        "'\\''"
      ]
    },
    {
      "regex": "#!.*python",
      "exceptionStackTrace": null,
      "matches": [
        "#!#python",
        "#!!python",
        "#!eVilpython",
        "#!EVILpython",
        "#!ev_ilpython",
        "#!ev ilpython",
        "#!ev4ilpython",
        "#!epython",
        "#! python",
        "#!6python",
        "#!_python",
        "#!python",
        "#!evilpython"
      ]
    },
    {
      "regex": "^(\\p{Ll})",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\p"
      },
      "matches": []
    },
    {
      "regex": "data\\:audio\\/([^?]+);",
      "exceptionStackTrace": null,
      "matches": [
        "data:audio/?;",
        "data:audio/;;",
        "data:audio/:;",
        "data:audio//;",
        "data:audio/eVil;",
        "data:audio/EVIL;",
        "data:audio/ev_il;",
        "data:audio/ev il;",
        "data:audio/ev4il;",
        "data:audio/e;",
        "data:audio/ ;",
        "data:audio/6;",
        "data:audio/_;",
        "data:audio/;",
        "data:audio/evil;"
      ]
    },
    {
      "regex": "[^\\\\]\\$$varname",
      "exceptionStackTrace": null,
      "matches": [
        "\\$varname",
        "A$varname",
        "0$varname",
        "$$varname",
        " $varname",
        "a$varname"
      ]
    },
    {
      "regex": "$WS+$",
      "exceptionStackTrace": null,
      "matches": ["WSS", "W", "WS"]
    },
    {
      "regex": "([[:alpha:]\\/]{3,30})(?!.*([[:alpha:]\\/]{3,30}))",
      "exceptionStackTrace": null,
      "matches": [
        ":/]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]",
        ":/]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]",
        ":/]]",
        "p/]]]",
        "l/]]]",
        "h/]]]",
        "b/]]]",
        "a/]]]",
        "[/]]]",
        ":/]]]"
      ]
    },
    {
      "regex": "[^\\|&](?:&&|\\|\\|)[^\\|&]",
      "exceptionStackTrace": null,
      "matches": [
        "a&&|",
        "a&&A",
        "a&&0",
        "a&&&",
        "a&& ",
        "|&&a",
        "A&&a",
        "0&&a",
        "&&&a",
        " &&a",
        "a||a",
        "a&&a"
      ]
    },
    {
      "regex": "function(.*?)\\((.*?)\\)",
      "exceptionStackTrace": null,
      "matches": [
        "functionevil())",
        "functionevil(()",
        "functionevil(eVil)",
        "functionevil(EVIL)",
        "functionevil(ev_il)",
        "functionevil(ev il)",
        "functionevil(ev4il)",
        "functionevil(e)",
        "functionevil( )",
        "functionevil(6)",
        "functionevil(_)",
        "functionevil()",
        "function)(evil)",
        "function((evil)",
        "functioneVil(evil)",
        "functionEVIL(evil)",
        "functionev_il(evil)",
        "functionev il(evil)",
        "functionev4il(evil)",
        "functione(evil)",
        "function (evil)",
        "function6(evil)",
        "function_(evil)",
        "function(evil)",
        "function()",
        "functionevil(evil)"
      ]
    },
    {
      "regex": "^application/(x-)?turtle",
      "exceptionStackTrace": null,
      "matches": [
        "application/x-x-turtle",
        "application/turtle",
        "application/x-turtle"
      ]
    },
    {
      "regex": "^#([A-F0-9]{3}){1,2}$",
      "exceptionStackTrace": null,
      "matches": [
        "#000000000",
        "#000000",
        "#",
        "#0000",
        "#00",
        "#G00",
        "#A00",
        "#000"
      ]
    },
    {
      "regex": "([^\\|]+)",
      "exceptionStackTrace": null,
      "matches": [
        "|",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": ".+(?=:)|[^:-]+",
      "exceptionStackTrace": null,
      "matches": [
        ":",
        "-",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "run remote command with \\[\"no-exist\"]",
      "exceptionStackTrace": null,
      "matches": ["run remote command with [\"no-exist\"]"]
    },
    {
      "regex": "^\\-(\\w+)",
      "exceptionStackTrace": null,
      "matches": [
        "-eVil",
        "-EVIL",
        "-ev_il",
        "-ev il",
        "-ev4il",
        "-e",
        "- ",
        "-6",
        "-_",
        "-",
        "-evil"
      ]
    },
    { "regex": "The Rock", "exceptionStackTrace": null, "matches": ["The Rock"] },
    {
      "regex": "\n[ \t]*\\|",
      "exceptionStackTrace": null,
      "matches": ["\n\t\t|", "\n |", "\n|", "\n\t|"]
    },
    {
      "regex": "^I create a Cognito identity pool with prefix \"([^\"]*)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "I create a Cognito identity pool with prefix \"\"\"",
        "I create a Cognito identity pool with prefix \"eVil\"",
        "I create a Cognito identity pool with prefix \"EVIL\"",
        "I create a Cognito identity pool with prefix \"ev_il\"",
        "I create a Cognito identity pool with prefix \"ev il\"",
        "I create a Cognito identity pool with prefix \"ev4il\"",
        "I create a Cognito identity pool with prefix \"e\"",
        "I create a Cognito identity pool with prefix \" \"",
        "I create a Cognito identity pool with prefix \"6\"",
        "I create a Cognito identity pool with prefix \"_\"",
        "I create a Cognito identity pool with prefix \"\"",
        "I create a Cognito identity pool with prefix \"evil\""
      ]
    },
    {
      "regex": "(?P<IP>\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}):(?P<PublicPort>\\d+(-\\d+)?)->(?P<PrivatePort>\\d+(-\\d+)?)\\/(?P<Type>\\w+)",
      "exceptionStackTrace": null,
      "matches": [
        "0.0.0.0:0-0->0-0/eVil",
        "0.0.0.0:0-0->0-0/EVIL",
        "0.0.0.0:0-0->0-0/ev_il",
        "0.0.0.0:0-0->0-0/ev il",
        "0.0.0.0:0-0->0-0/ev4il",
        "0.0.0.0:0-0->0-0/e",
        "0.0.0.0:0-0->0-0/ ",
        "0.0.0.0:0-0->0-0/6",
        "0.0.0.0:0-0->0-0/_",
        "0.0.0.0:0-0->0-0/",
        "0.0.0.0:0-0->0-0-0/evil",
        "0.0.0.0:0-0->0/evil",
        "0.0.0.0:0-0->0-00/evil",
        "0.0.0.0:0-0->0-/evil",
        "0.0.0.0:0-0->00-0/evil",
        "0.0.0.0:0-0->-0/evil",
        "0.0.0.0:0-0-0->0-0/evil",
        "0.0.0.0:0->0-0/evil",
        "0.0.0.0:0-00->0-0/evil",
        "0.0.0.0:0-->0-0/evil",
        "0.0.0.0:00-0->0-0/evil",
        "0.0.0.0:-0->0-0/evil",
        "0.0.0.0000:0-0->0-0/evil",
        "0.0.0.000:0-0->0-0/evil",
        "0.0.0.:0-0->0-0/evil",
        "0.0.0000.0:0-0->0-0/evil",
        "0.0.000.0:0-0->0-0/evil",
        "0.0..0:0-0->0-0/evil",
        "0.0000.0.0:0-0->0-0/evil",
        "0.000.0.0:0-0->0-0/evil",
        "0..0.0:0-0->0-0/evil",
        "0000.0.0.0:0-0->0-0/evil",
        "000.0.0.0:0-0->0-0/evil",
        ".0.0.0:0-0->0-0/evil",
        "0.0.0.0:0->0/evil",
        "0.0.0.0:0-0->0-0/evil"
      ]
    },
    {
      "regex": "^PREFIXED\\(\\s*(.*?)\\s*\\)$",
      "exceptionStackTrace": null,
      "matches": [
        "PREFIXED( evil  )",
        "PREFIXED( evil)",
        "PREFIXED( ) )",
        "PREFIXED( ( )",
        "PREFIXED( eVil )",
        "PREFIXED( EVIL )",
        "PREFIXED( ev_il )",
        "PREFIXED( ev il )",
        "PREFIXED( ev4il )",
        "PREFIXED( e )",
        "PREFIXED(   )",
        "PREFIXED( 6 )",
        "PREFIXED( _ )",
        "PREFIXED(  )",
        "PREFIXED(  evil )",
        "PREFIXED(evil )",
        "PREFIXED()",
        "PREFIXED( evil )"
      ]
    },
    {
      "regex": "<a href=\"(.*)\">",
      "exceptionStackTrace": null,
      "matches": [
        "<a href=\">\">",
        "<a href=\"=\">",
        "<a href=\"<\">",
        "<a href=\"\"\">",
        "<a href=\"eVil\">",
        "<a href=\"EVIL\">",
        "<a href=\"ev_il\">",
        "<a href=\"ev il\">",
        "<a href=\"ev4il\">",
        "<a href=\"e\">",
        "<a href=\" \">",
        "<a href=\"6\">",
        "<a href=\"_\">",
        "<a href=\"\">",
        "<a href=\"evil\">"
      ]
    },
    {
      "regex": "[a-z\\$\\^\\@\\%\\&]",
      "exceptionStackTrace": null,
      "matches": ["a", "^", "@", "%", "$", "&"]
    },
    { "regex": "[,$]", "exceptionStackTrace": null, "matches": [",", "$"] },
    {
      "regex": "#\\S+",
      "exceptionStackTrace": null,
      "matches": [
        "##",
        "#eVil",
        "#EVIL",
        "#ev_il",
        "#ev il",
        "#ev4il",
        "#e",
        "# ",
        "#6",
        "#_",
        "#",
        "#evil"
      ]
    },
    {
      "regex": "(\\^|(?:\\\\\\|)):",
      "exceptionStackTrace": null,
      "matches": ["\\|:", "^:"]
    },
    {
      "regex": "gemfile\\s+from-sample-addon-2",
      "exceptionStackTrace": null,
      "matches": [
        "gemfile  from-sample-addon-2",
        "gemfilefrom-sample-addon-2",
        "gemfile from-sample-addon-2"
      ]
    },
    {
      "regex": "(^|[ ])(([a-z0-9_-]+)|(`(.+)`))_([^a-z0-9]{1}|$)",
      "exceptionStackTrace": null,
      "matches": [
        "```_A",
        "`-`_A",
        "`eVil`_A",
        "`EVIL`_A",
        "`ev_il`_A",
        "`ev il`_A",
        "`ev4il`_A",
        "`e`_A",
        "` `_A",
        "`6`_A",
        "`_`_A",
        "``_A",
        "evil_AA",
        "evil_a",
        "evil_`",
        "evil__",
        "evil_0",
        "evil_-",
        "evil_ ",
        "`_A",
        "-_A",
        "eVil_A",
        "EVIL_A",
        "ev_il_A",
        "ev il_A",
        "ev4il_A",
        "e_A",
        " _A",
        "6_A",
        "__A",
        "_A",
        " evil_A",
        "`evil`_A",
        "evil_",
        "evil_A"
      ]
    },
    {
      "regex": "<(${foaf}holdsAccount)(.*?)</\\1>",
      "exceptionStackTrace": null,
      "matches": [
        "<{foaf}holdsAccount}</{foaf}holdsAccount>",
        "<{foaf}holdsAccount{</{foaf}holdsAccount>",
        "<{foaf}holdsAccount></{foaf}holdsAccount>",
        "<{foaf}holdsAccount<</{foaf}holdsAccount>",
        "<{foaf}holdsAccount/</{foaf}holdsAccount>",
        "<{foaf}holdsAccounteVil</{foaf}holdsAccount>",
        "<{foaf}holdsAccountEVIL</{foaf}holdsAccount>",
        "<{foaf}holdsAccountev_il</{foaf}holdsAccount>",
        "<{foaf}holdsAccountev il</{foaf}holdsAccount>",
        "<{foaf}holdsAccountev4il</{foaf}holdsAccount>",
        "<{foaf}holdsAccounte</{foaf}holdsAccount>",
        "<{foaf}holdsAccount </{foaf}holdsAccount>",
        "<{foaf}holdsAccount6</{foaf}holdsAccount>",
        "<{foaf}holdsAccount_</{foaf}holdsAccount>",
        "<{foaf}holdsAccount</{foaf}holdsAccount>",
        "<{foaf}holdsAccountevil</{foaf}holdsAccount>"
      ]
    },
    {
      "regex": "^MAIL FROM\\:<(.+)>.*$",
      "exceptionStackTrace": null,
      "matches": [
        "MAIL FROM:<evil>>",
        "MAIL FROM:<evil><",
        "MAIL FROM:<evil>:",
        "MAIL FROM:<evil>eVil",
        "MAIL FROM:<evil>EVIL",
        "MAIL FROM:<evil>ev_il",
        "MAIL FROM:<evil>ev il",
        "MAIL FROM:<evil>ev4il",
        "MAIL FROM:<evil>e",
        "MAIL FROM:<evil> ",
        "MAIL FROM:<evil>6",
        "MAIL FROM:<evil>_",
        "MAIL FROM:<>>evil",
        "MAIL FROM:<<>evil",
        "MAIL FROM:<:>evil",
        "MAIL FROM:<eVil>evil",
        "MAIL FROM:<EVIL>evil",
        "MAIL FROM:<ev_il>evil",
        "MAIL FROM:<ev il>evil",
        "MAIL FROM:<ev4il>evil",
        "MAIL FROM:<e>evil",
        "MAIL FROM:< >evil",
        "MAIL FROM:<6>evil",
        "MAIL FROM:<_>evil",
        "MAIL FROM:<>evil",
        "MAIL FROM:<evil>",
        "MAIL FROM:<evil>evil"
      ]
    },
    { "regex": "\\sabc\\s", "exceptionStackTrace": null, "matches": [" abc "] },
    {
      "regex": "^I expect the named output to match \"(.*?)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "I expect the named output to match \"\"\"",
        "I expect the named output to match \"eVil\"",
        "I expect the named output to match \"EVIL\"",
        "I expect the named output to match \"ev_il\"",
        "I expect the named output to match \"ev il\"",
        "I expect the named output to match \"ev4il\"",
        "I expect the named output to match \"e\"",
        "I expect the named output to match \" \"",
        "I expect the named output to match \"6\"",
        "I expect the named output to match \"_\"",
        "I expect the named output to match \"\"",
        "I expect the named output to match \"evil\""
      ]
    },
    {
      "regex": "#define SE_VERSION\\s+\"(.*)\"",
      "exceptionStackTrace": null,
      "matches": [
        "#define SE_VERSION \"#\"",
        "#define SE_VERSION \"\"\"",
        "#define SE_VERSION \"eVil\"",
        "#define SE_VERSION \"EVIL\"",
        "#define SE_VERSION \"ev_il\"",
        "#define SE_VERSION \"ev il\"",
        "#define SE_VERSION \"ev4il\"",
        "#define SE_VERSION \"e\"",
        "#define SE_VERSION \" \"",
        "#define SE_VERSION \"6\"",
        "#define SE_VERSION \"_\"",
        "#define SE_VERSION  \"evil\"",
        "#define SE_VERSION\"evil\"",
        "#define SE_VERSION \"\"",
        "#define SE_VERSION \"evil\""
      ]
    },
    {
      "regex": "(<TransactionKey>).+?(</TransactionKey>)",
      "exceptionStackTrace": null,
      "matches": [
        "<TransactionKey>></TransactionKey>",
        "<TransactionKey><</TransactionKey>",
        "<TransactionKey>/</TransactionKey>",
        "<TransactionKey>eVil</TransactionKey>",
        "<TransactionKey>EVIL</TransactionKey>",
        "<TransactionKey>ev_il</TransactionKey>",
        "<TransactionKey>ev il</TransactionKey>",
        "<TransactionKey>ev4il</TransactionKey>",
        "<TransactionKey>e</TransactionKey>",
        "<TransactionKey> </TransactionKey>",
        "<TransactionKey>6</TransactionKey>",
        "<TransactionKey>_</TransactionKey>",
        "<TransactionKey></TransactionKey>",
        "<TransactionKey>evil</TransactionKey>"
      ]
    },
    {
      "regex": "path (.+) \\(offset \\d+\\)",
      "exceptionStackTrace": null,
      "matches": [
        "path evil (offset 00)",
        "path evil (offset )",
        "path ) (offset 0)",
        "path ( (offset 0)",
        "path eVil (offset 0)",
        "path EVIL (offset 0)",
        "path ev_il (offset 0)",
        "path ev il (offset 0)",
        "path ev4il (offset 0)",
        "path e (offset 0)",
        "path   (offset 0)",
        "path 6 (offset 0)",
        "path _ (offset 0)",
        "path  (offset 0)",
        "path evil (offset 0)"
      ]
    },
    {
      "regex": "\\$END STRUCTURE",
      "exceptionStackTrace": null,
      "matches": ["$END STRUCTURE"]
    },
    {
      "regex": "=($INT_ATOM)|($STRING_ATOM)|\\^($FLOAT_ATOM)|>($UUID_ATOM)|($FRAME_ATOM)|($QUERY_ATOM)",
      "exceptionStackTrace": null,
      "matches": [
        "QUERY_ATOM",
        "FRAME_ATOM",
        ">UUID_ATOM",
        "^FLOAT_ATOM",
        "STRING_ATOM",
        "=INT_ATOM"
      ]
    },
    {
      "regex": "(\\\\[qgp]|\\;)$",
      "exceptionStackTrace": null,
      "matches": ["\\q", "\\g", "\\a", ";", "\\p"]
    },
    {
      "regex": "^I get the user mapping$",
      "exceptionStackTrace": null,
      "matches": ["I get the user mapping"]
    },
    {
      "regex": "catch ?\\(e\\) ?{ ?}",
      "exceptionStackTrace": null,
      "matches": [
        "catch (e) {  }",
        "catch (e) {}",
        "catch (e)  { }",
        "catch (e){ }",
        "catch  (e) { }",
        "catch(e) { }",
        "catch(e){}",
        "catch (e) { }"
      ]
    },
    {
      "regex": "/\\Q$name",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\Q"
      },
      "matches": []
    },
    { "regex": "(s_id)", "exceptionStackTrace": null, "matches": ["s_id"] },
    { "regex": "^Remove", "exceptionStackTrace": null, "matches": ["Remove"] },
    {
      "regex": "ArgumentError: &lt;p&gt;wow&lt;&#x2F;p&gt;",
      "exceptionStackTrace": null,
      "matches": ["ArgumentError: &lt;p&gt;wow&lt;&#x2F;p&gt;"]
    },
    { "regex": "(mesec)(i)", "exceptionStackTrace": null, "matches": ["meseci"] },
    {
      "regex": "(?:(http|https)://)?(localhost|[a-z0-9\\-\\.]+)(?::([0-9]+))?(/.*)?",
      "exceptionStackTrace": null,
      "matches": [
        "http://::0/evil",
        "http:///:0/evil",
        "http://.:0/evil",
        "http://-:0/evil",
        "http://eVil:0/evil",
        "http://EVIL:0/evil",
        "http://ev_il:0/evil",
        "http://ev il:0/evil",
        "http://ev4il:0/evil",
        "http://e:0/evil",
        "http:// :0/evil",
        "http://6:0/evil",
        "http://_:0/evil",
        "http://:0/evil",
        "http://localhost:0/evil/evil",
        "http://localhost:0",
        "http://localhost:0/:",
        "http://localhost:0//",
        "http://localhost:0/.",
        "http://localhost:0/-",
        "http://localhost:0/eVil",
        "http://localhost:0/EVIL",
        "http://localhost:0/ev_il",
        "http://localhost:0/ev il",
        "http://localhost:0/ev4il",
        "http://localhost:0/e",
        "http://localhost:0/ ",
        "http://localhost:0/6",
        "http://localhost:0/_",
        "http://localhost:0/",
        "http://localhost:0:0/evil",
        "http://localhost/evil",
        "http://localhost:00/evil",
        "http://localhost:/evil",
        "http://http://localhost:0/evil",
        "localhost:0/evil",
        "evil",
        "localhost",
        "https://localhost:0/evil",
        "http://evil:0/evil",
        "http://localhost:0/evil"
      ]
    },
    {
      "regex": "<a.*?href=\\\"(.*?)\\\".*?><img.*?alt=\\\"linkembed\\\".*?><\\/a>",
      "exceptionStackTrace": null,
      "matches": [
        "<aevilhref=\"evil\"evil><imgevilalt=\"linkembed\">></a>",
        "<aevilhref=\"evil\"evil><imgevilalt=\"linkembed\"=></a>",
        "<aevilhref=\"evil\"evil><imgevilalt=\"linkembed\"<></a>",
        "<aevilhref=\"evil\"evil><imgevilalt=\"linkembed\"/></a>",
        "<aevilhref=\"evil\"evil><imgevilalt=\"linkembed\"\"></a>",
        "<aevilhref=\"evil\"evil><imgevilalt=\"linkembed\"eVil></a>",
        "<aevilhref=\"evil\"evil><imgevilalt=\"linkembed\"EVIL></a>",
        "<aevilhref=\"evil\"evil><imgevilalt=\"linkembed\"ev_il></a>",
        "<aevilhref=\"evil\"evil><imgevilalt=\"linkembed\"ev il></a>",
        "<aevilhref=\"evil\"evil><imgevilalt=\"linkembed\"ev4il></a>",
        "<aevilhref=\"evil\"evil><imgevilalt=\"linkembed\"e></a>",
        "<aevilhref=\"evil\"evil><imgevilalt=\"linkembed\" ></a>",
        "<aevilhref=\"evil\"evil><imgevilalt=\"linkembed\"6></a>",
        "<aevilhref=\"evil\"evil><imgevilalt=\"linkembed\"_></a>",
        "<aevilhref=\"evil\"evil><imgevilalt=\"linkembed\"></a>",
        "<aevilhref=\"evil\"evil><img>alt=\"linkembed\"evil></a>",
        "<aevilhref=\"evil\"evil><img=alt=\"linkembed\"evil></a>",
        "<aevilhref=\"evil\"evil><img<alt=\"linkembed\"evil></a>",
        "<aevilhref=\"evil\"evil><img/alt=\"linkembed\"evil></a>",
        "<aevilhref=\"evil\"evil><img\"alt=\"linkembed\"evil></a>",
        "<aevilhref=\"evil\"evil><imgeVilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"evil\"evil><imgEVILalt=\"linkembed\"evil></a>",
        "<aevilhref=\"evil\"evil><imgev_ilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"evil\"evil><imgev ilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"evil\"evil><imgev4ilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"evil\"evil><imgealt=\"linkembed\"evil></a>",
        "<aevilhref=\"evil\"evil><img alt=\"linkembed\"evil></a>",
        "<aevilhref=\"evil\"evil><img6alt=\"linkembed\"evil></a>",
        "<aevilhref=\"evil\"evil><img_alt=\"linkembed\"evil></a>",
        "<aevilhref=\"evil\"evil><imgalt=\"linkembed\"evil></a>",
        "<aevilhref=\"evil\">><imgevilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"evil\"=><imgevilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"evil\"<><imgevilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"evil\"/><imgevilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"evil\"\"><imgevilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"evil\"eVil><imgevilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"evil\"EVIL><imgevilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"evil\"ev_il><imgevilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"evil\"ev il><imgevilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"evil\"ev4il><imgevilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"evil\"e><imgevilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"evil\" ><imgevilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"evil\"6><imgevilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"evil\"_><imgevilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"evil\"><imgevilalt=\"linkembed\"evil></a>",
        "<aevilhref=\">\"evil><imgevilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"=\"evil><imgevilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"<\"evil><imgevilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"/\"evil><imgevilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"\"\"evil><imgevilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"eVil\"evil><imgevilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"EVIL\"evil><imgevilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"ev_il\"evil><imgevilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"ev il\"evil><imgevilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"ev4il\"evil><imgevilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"e\"evil><imgevilalt=\"linkembed\"evil></a>",
        "<aevilhref=\" \"evil><imgevilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"6\"evil><imgevilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"_\"evil><imgevilalt=\"linkembed\"evil></a>",
        "<aevilhref=\"\"evil><imgevilalt=\"linkembed\"evil></a>",
        "<a>href=\"evil\"evil><imgevilalt=\"linkembed\"evil></a>",
        "<a=href=\"evil\"evil><imgevilalt=\"linkembed\"evil></a>",
        "<a<href=\"evil\"evil><imgevilalt=\"linkembed\"evil></a>",
        "<a/href=\"evil\"evil><imgevilalt=\"linkembed\"evil></a>",
        "<a\"href=\"evil\"evil><imgevilalt=\"linkembed\"evil></a>",
        "<aeVilhref=\"evil\"evil><imgevilalt=\"linkembed\"evil></a>",
        "<aEVILhref=\"evil\"evil><imgevilalt=\"linkembed\"evil></a>",
        "<aev_ilhref=\"evil\"evil><imgevilalt=\"linkembed\"evil></a>",
        "<aev ilhref=\"evil\"evil><imgevilalt=\"linkembed\"evil></a>",
        "<aev4ilhref=\"evil\"evil><imgevilalt=\"linkembed\"evil></a>",
        "<aehref=\"evil\"evil><imgevilalt=\"linkembed\"evil></a>",
        "<a href=\"evil\"evil><imgevilalt=\"linkembed\"evil></a>",
        "<a6href=\"evil\"evil><imgevilalt=\"linkembed\"evil></a>",
        "<a_href=\"evil\"evil><imgevilalt=\"linkembed\"evil></a>",
        "<ahref=\"evil\"evil><imgevilalt=\"linkembed\"evil></a>",
        "<ahref=\"\"><imgalt=\"linkembed\"></a>",
        "<aevilhref=\"evil\"evil><imgevilalt=\"linkembed\"evil></a>"
      ]
    },
    {
      "regex": "extensible|Cannot|can't|support|unable",
      "exceptionStackTrace": null,
      "matches": ["unable", "support", "can't", "Cannot", "extensible"]
    },
    {
      "regex": "node_modules\\/(?!paradigm.*)|(paradigm-gulp-watch)",
      "exceptionStackTrace": null,
      "matches": ["paradigm-gulp-watch", "node_modules/"]
    },
    {
      "regex": "0?0:",
      "exceptionStackTrace": null,
      "matches": ["000:", "0:", "00:"]
    },
    {
      "regex": "^( *)(bull) [\\s\\S]+?(?:hr|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    { "regex": "^gid", "exceptionStackTrace": null, "matches": ["gid"] },
    {
      "regex": "\\.directive\\('Testing2Directive',\\ function\\(\\)\\ {",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (parse error): Input string ended prematurely"
      },
      "matches": []
    },
    {
      "regex": "\\AUnloading.*spec/app2\\.rb\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "${noPreBS}#(\\d)",
      "exceptionStackTrace": null,
      "matches": ["{noPreBS}#0"]
    },
    {
      "regex": "^(callsArg|yields|thenYields$)",
      "exceptionStackTrace": null,
      "matches": ["thenYields", "yields", "callsArg"]
    },
    {
      "regex": "run, restart, r\\s+",
      "exceptionStackTrace": null,
      "matches": ["run, restart, r  ", "run, restart, r", "run, restart, r "]
    },
    {
      "regex": "meta-.+-\\d+\\..+",
      "exceptionStackTrace": null,
      "matches": [
        "meta-evil-0..",
        "meta-evil-0.-",
        "meta-evil-0.eVil",
        "meta-evil-0.EVIL",
        "meta-evil-0.ev_il",
        "meta-evil-0.ev il",
        "meta-evil-0.ev4il",
        "meta-evil-0.e",
        "meta-evil-0. ",
        "meta-evil-0.6",
        "meta-evil-0._",
        "meta-evil-0.",
        "meta-evil-00.evil",
        "meta-evil-.evil",
        "meta-.-0.evil",
        "meta---0.evil",
        "meta-eVil-0.evil",
        "meta-EVIL-0.evil",
        "meta-ev_il-0.evil",
        "meta-ev il-0.evil",
        "meta-ev4il-0.evil",
        "meta-e-0.evil",
        "meta- -0.evil",
        "meta-6-0.evil",
        "meta-_-0.evil",
        "meta--0.evil",
        "meta-evil-0.evil"
      ]
    },
    { "regex": "^files_", "exceptionStackTrace": null, "matches": ["files_"] },
    {
      "regex": "I revoke (\\w+) access to (\\w+) \"(.+?)\" in quality of (\\w+)",
      "exceptionStackTrace": null,
      "matches": [
        "I revoke evil access to evil \"evil\" in quality of eVil",
        "I revoke evil access to evil \"evil\" in quality of EVIL",
        "I revoke evil access to evil \"evil\" in quality of ev_il",
        "I revoke evil access to evil \"evil\" in quality of ev il",
        "I revoke evil access to evil \"evil\" in quality of ev4il",
        "I revoke evil access to evil \"evil\" in quality of e",
        "I revoke evil access to evil \"evil\" in quality of  ",
        "I revoke evil access to evil \"evil\" in quality of 6",
        "I revoke evil access to evil \"evil\" in quality of _",
        "I revoke evil access to evil \"evil\" in quality of ",
        "I revoke evil access to evil \"\"\" in quality of evil",
        "I revoke evil access to evil \"eVil\" in quality of evil",
        "I revoke evil access to evil \"EVIL\" in quality of evil",
        "I revoke evil access to evil \"ev_il\" in quality of evil",
        "I revoke evil access to evil \"ev il\" in quality of evil",
        "I revoke evil access to evil \"ev4il\" in quality of evil",
        "I revoke evil access to evil \"e\" in quality of evil",
        "I revoke evil access to evil \" \" in quality of evil",
        "I revoke evil access to evil \"6\" in quality of evil",
        "I revoke evil access to evil \"_\" in quality of evil",
        "I revoke evil access to evil \"\" in quality of evil",
        "I revoke evil access to eVil \"evil\" in quality of evil",
        "I revoke evil access to EVIL \"evil\" in quality of evil",
        "I revoke evil access to ev_il \"evil\" in quality of evil",
        "I revoke evil access to ev il \"evil\" in quality of evil",
        "I revoke evil access to ev4il \"evil\" in quality of evil",
        "I revoke evil access to e \"evil\" in quality of evil",
        "I revoke evil access to   \"evil\" in quality of evil",
        "I revoke evil access to 6 \"evil\" in quality of evil",
        "I revoke evil access to _ \"evil\" in quality of evil",
        "I revoke evil access to  \"evil\" in quality of evil",
        "I revoke eVil access to evil \"evil\" in quality of evil",
        "I revoke EVIL access to evil \"evil\" in quality of evil",
        "I revoke ev_il access to evil \"evil\" in quality of evil",
        "I revoke ev il access to evil \"evil\" in quality of evil",
        "I revoke ev4il access to evil \"evil\" in quality of evil",
        "I revoke e access to evil \"evil\" in quality of evil",
        "I revoke   access to evil \"evil\" in quality of evil",
        "I revoke 6 access to evil \"evil\" in quality of evil",
        "I revoke _ access to evil \"evil\" in quality of evil",
        "I revoke  access to evil \"evil\" in quality of evil",
        "I revoke evil access to evil \"evil\" in quality of evil"
      ]
    },
    {
      "regex": "^I have an encryption client$",
      "exceptionStackTrace": null,
      "matches": ["I have an encryption client"]
    },
    {
      "regex": "test.(js|foo)$",
      "exceptionStackTrace": null,
      "matches": [
        "test_js",
        "testAjs",
        "test0js",
        "test js",
        "testafoo",
        "testajs"
      ]
    },
    {
      "regex": "debtor\\s+\\d+",
      "exceptionStackTrace": null,
      "matches": ["debtor 00", "debtor ", "debtor  0", "debtor0", "debtor 0"]
    },
    { "regex": "\\(\\?>", "exceptionStackTrace": null, "matches": ["(?>"] },
    {
      "regex": "CommuniGate Pro LIST",
      "exceptionStackTrace": null,
      "matches": ["CommuniGate Pro LIST"]
    },
    {
      "regex": "[\\s][\\u044E]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 1102"
      },
      "matches": []
    },
    {
      "regex": "\"Content-Type:",
      "exceptionStackTrace": null,
      "matches": ["\"Content-Type:"]
    },
    {
      "regex": "^I am logged in as a \"([^\"]*)$",
      "exceptionStackTrace": null,
      "matches": [
        "I am logged in as a \"\"",
        "I am logged in as a \"eVil",
        "I am logged in as a \"EVIL",
        "I am logged in as a \"ev_il",
        "I am logged in as a \"ev il",
        "I am logged in as a \"ev4il",
        "I am logged in as a \"e",
        "I am logged in as a \" ",
        "I am logged in as a \"6",
        "I am logged in as a \"_",
        "I am logged in as a \"",
        "I am logged in as a \"evil"
      ]
    },
    {
      "regex": "\\.[^.]*$",
      "exceptionStackTrace": null,
      "matches": [
        "..",
        ".eVil",
        ".EVIL",
        ".ev_il",
        ".ev il",
        ".ev4il",
        ".e",
        ". ",
        ".6",
        "._",
        ".",
        ".evil"
      ]
    },
    {
      "regex": "<script[\\\\S\\\\s]+?</script>",
      "exceptionStackTrace": null,
      "matches": [
        "<scriptss</script>",
        "<script</script>",
        "<scripta</script>",
        "<script\\</script>",
        "<scriptS</script>",
        "<scriptA</script>",
        "<scripts</script>"
      ]
    },
    { "regex": "sirgey", "exceptionStackTrace": null, "matches": ["sirgey"] },
    {
      "regex": "^(\\d+)(-?a)?",
      "exceptionStackTrace": null,
      "matches": ["0-a-a", "0--a", "0a", "00-a", "-a", "0", "0-a"]
    },
    { "regex": "Mc[a-z]", "exceptionStackTrace": null, "matches": ["Mca"] },
    {
      "regex": "^<FORM .*><\\/FORM>$",
      "exceptionStackTrace": null,
      "matches": [
        "<FORM >></FORM>",
        "<FORM <></FORM>",
        "<FORM /></FORM>",
        "<FORM eVil></FORM>",
        "<FORM EVIL></FORM>",
        "<FORM ev_il></FORM>",
        "<FORM ev il></FORM>",
        "<FORM ev4il></FORM>",
        "<FORM e></FORM>",
        "<FORM  ></FORM>",
        "<FORM 6></FORM>",
        "<FORM _></FORM>",
        "<FORM ></FORM>",
        "<FORM evil></FORM>"
      ]
    },
    {
      "regex": "^join\\s+(#[^\\s]+)",
      "exceptionStackTrace": null,
      "matches": [
        "join ##",
        "join #eVil",
        "join #EVIL",
        "join #ev_il",
        "join #ev il",
        "join #ev4il",
        "join #e",
        "join # ",
        "join #6",
        "join #_",
        "join #",
        "join  #evil",
        "join#evil",
        "join #evil"
      ]
    },
    {
      "regex": "^[^\"\\n]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "Model:.*VAR\\(2\\)",
      "exceptionStackTrace": null,
      "matches": [
        "Model::VAR(2)",
        "Model:)VAR(2)",
        "Model:(VAR(2)",
        "Model:eVilVAR(2)",
        "Model:EVILVAR(2)",
        "Model:ev_ilVAR(2)",
        "Model:ev ilVAR(2)",
        "Model:ev4ilVAR(2)",
        "Model:eVAR(2)",
        "Model: VAR(2)",
        "Model:6VAR(2)",
        "Model:_VAR(2)",
        "Model:VAR(2)",
        "Model:evilVAR(2)"
      ]
    },
    {
      "regex": "^:idmap/(.+)",
      "exceptionStackTrace": null,
      "matches": [
        ":idmap/:",
        ":idmap//",
        ":idmap/eVil",
        ":idmap/EVIL",
        ":idmap/ev_il",
        ":idmap/ev il",
        ":idmap/ev4il",
        ":idmap/e",
        ":idmap/ ",
        ":idmap/6",
        ":idmap/_",
        ":idmap/",
        ":idmap/evil"
      ]
    },
    {
      "regex": "callback\\((.*)\\);$",
      "exceptionStackTrace": null,
      "matches": [
        "callback(;);",
        "callback());",
        "callback(();",
        "callback(eVil);",
        "callback(EVIL);",
        "callback(ev_il);",
        "callback(ev il);",
        "callback(ev4il);",
        "callback(e);",
        "callback( );",
        "callback(6);",
        "callback(_);",
        "callback();",
        "callback(evil);"
      ]
    },
    { "regex": "LIKE", "exceptionStackTrace": null, "matches": ["LIKE"] },
    {
      "regex": "([0-9]+.[0-9]+)",
      "exceptionStackTrace": null,
      "matches": ["0a00", "0a", "0_0", "0A0", "000", "0 0", "00a0", "a0", "0a0"]
    },
    {
      "regex": "^I proceed with the workitem$",
      "exceptionStackTrace": null,
      "matches": ["I proceed with the workitem"]
    },
    {
      "regex": "aa*",
      "exceptionStackTrace": null,
      "matches": ["aaa", "a", "aa"]
    },
    {
      "regex": "CONSTRAINT [`\"]([^`\"]+)[`\"] FOREIGN KEY \\([`\"].*[`\"]\\) REFERENCES [`\"]([^`\"]+)[`\"] \\([`\"].*[`\"]\\)",
      "exceptionStackTrace": null,
      "matches": [
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\"evil`)",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\"`\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\")\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\"(\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\"\"\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\"eVil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\"EVIL\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\"ev_il\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\"ev il\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\"ev4il\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\"e\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\" \")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\"6\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\"_\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\"\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (`evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \"evil` (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \"`\" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \")\" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \"(\" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \"\"\" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \"eVil\" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \"EVIL\" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \"ev_il\" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \"ev il\" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \"ev4il\" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \"e\" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \" \" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \"6\" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \"_\" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \"\" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES `evil\" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil`) REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"`\") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\")\") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"(\") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"\"\") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"eVil\") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"EVIL\") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"ev_il\") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"ev il\") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"ev4il\") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"e\") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\" \") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"6\") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"_\") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"\") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (`evil\") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \"evil` FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \"`\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \")\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \"(\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \"\"\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \"eVil\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \"EVIL\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \"ev_il\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \"ev il\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \"ev4il\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \"e\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \" \" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \"6\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \"_\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \"\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT `evil\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\"evil\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"\") REFERENCES \"evil\" (\"\")",
        "CONSTRAINT \"evil\" FOREIGN KEY (\"evil\") REFERENCES \"evil\" (\"evil\")"
      ]
    },
    {
      "regex": "^(?:\"(\\\\\"|[^\\\"])*\")",
      "exceptionStackTrace": null,
      "matches": [
        "\"\\\"",
        "\"A\"",
        "\"0\"",
        "\"\"\"",
        "\" \"",
        "\"\\\"\\\"\"",
        "\"\"",
        "\"a\"",
        "\"\\\"\""
      ]
    },
    {
      "regex": "(?:-|\\.\\.)\\s?(\\d+)[>}]",
      "exceptionStackTrace": null,
      "matches": ["- 0>", "- 00}", "- }", "-  0}", "..0}", "-0}", ".. 0}", "- 0}"]
    },
    {
      "regex": "Last modified \\(DMYhms\\): [^\\$\\.]*\\.",
      "exceptionStackTrace": null,
      "matches": [
        "Last modified (DMYhms): :.",
        "Last modified (DMYhms): ..",
        "Last modified (DMYhms): ).",
        "Last modified (DMYhms): (.",
        "Last modified (DMYhms): $.",
        "Last modified (DMYhms): eVil.",
        "Last modified (DMYhms): EVIL.",
        "Last modified (DMYhms): ev_il.",
        "Last modified (DMYhms): ev il.",
        "Last modified (DMYhms): ev4il.",
        "Last modified (DMYhms): e.",
        "Last modified (DMYhms):  .",
        "Last modified (DMYhms): 6.",
        "Last modified (DMYhms): _.",
        "Last modified (DMYhms): .",
        "Last modified (DMYhms): evil."
      ]
    },
    {
      "regex": "defprompt",
      "exceptionStackTrace": null,
      "matches": ["defprompt"]
    },
    {
      "regex": "(?i)[-._ ](chinese|dk|fin|french|ger?|heb|ita|jap|kor|nor|nordic|nl|pl|swe)[-._ ]?(sub|dub)(ed|bed|s)?|<German>",
      "exceptionStackTrace": null,
      "matches": [
        " gerr subed",
        " ge subed",
        " chinese subeded",
        " chinese sub",
        " chinese  subed",
        " chinesesubed",
        " chinese_subed",
        " chinese.subed",
        " chinese-subed",
        "_chinese subed",
        ".chinese subed",
        "-chinese subed",
        " swesub",
        " plsub",
        " nlsub",
        " nordicsub",
        " norsub",
        " korsub",
        " japsub",
        " itasub",
        " hebsub",
        " gesub",
        " frenchsub",
        " finsub",
        " dksub",
        " chinesedub",
        " chinesesub",
        "<German>",
        " swe subed",
        " pl subed",
        " nl subed",
        " nordic subed",
        " nor subed",
        " kor subed",
        " jap subed",
        " ita subed",
        " heb subed",
        " ger subed",
        " french subed",
        " fin subed",
        " dk subed",
        " chinese dubed",
        " chinese subs",
        " chinese subbed",
        " chinese subed"
      ]
    },
    { "regex": "\\\\\\.\\\\", "exceptionStackTrace": null, "matches": ["\\.\\"] },
    {
      "regex": "^uncaught throw :?(.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "uncaught throw ::",
        "uncaught throw :eVil",
        "uncaught throw :EVIL",
        "uncaught throw :ev_il",
        "uncaught throw :ev il",
        "uncaught throw :ev4il",
        "uncaught throw :e",
        "uncaught throw : ",
        "uncaught throw :6",
        "uncaught throw :_",
        "uncaught throw :",
        "uncaught throw ::evil",
        "uncaught throw evil",
        "uncaught throw :evil"
      ]
    },
    {
      "regex": "(\\(.*?\\))",
      "exceptionStackTrace": null,
      "matches": [
        "())",
        "(()",
        "(eVil)",
        "(EVIL)",
        "(ev_il)",
        "(ev il)",
        "(ev4il)",
        "(e)",
        "( )",
        "(6)",
        "(_)",
        "()",
        "(evil)"
      ]
    },
    {
      "regex": "(?:[abstract]*class |interface )([a-zA-Z\\_]+)(?:[ \\n]*{| extends| implements)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "(?:('|\").*?\\1)",
      "exceptionStackTrace": null,
      "matches": [
        "'''",
        "'\"'",
        "'eVil'",
        "'EVIL'",
        "'ev_il'",
        "'ev il'",
        "'ev4il'",
        "'e'",
        "' '",
        "'6'",
        "'_'",
        "\"'",
        "''",
        "\"evil'",
        "'evil'"
      ]
    },
    {
      "regex": "([0-9.%]+)",
      "exceptionStackTrace": null,
      "matches": ["%%", "", "0", ".", "%"]
    },
    {
      "regex": "^(&|and)$",
      "exceptionStackTrace": null,
      "matches": ["and", "&"]
    },
    {
      "regex": "^\\[section *([0-9.]+)",
      "exceptionStackTrace": null,
      "matches": [
        "[section ..",
        "[section ",
        "[section 0",
        "[section  .",
        "[section.",
        "[section ."
      ]
    },
    {
      "regex": "(?:Universe|Fandom):</(?:b|strong|u)>([^<]+)",
      "exceptionStackTrace": null,
      "matches": [
        "Universe:</b>>",
        "Universe:</b><",
        "Universe:</b>:",
        "Universe:</b>/",
        "Universe:</b>eVil",
        "Universe:</b>EVIL",
        "Universe:</b>ev_il",
        "Universe:</b>ev il",
        "Universe:</b>ev4il",
        "Universe:</b>e",
        "Universe:</b> ",
        "Universe:</b>6",
        "Universe:</b>_",
        "Universe:</b>",
        "Fandom:</b>evil",
        "Universe:</u>evil",
        "Universe:</strong>evil",
        "Universe:</b>evil"
      ]
    },
    {
      "regex": "[\\n\\r/]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "must be >=100 seen as integer",
      "exceptionStackTrace": null,
      "matches": ["must be >=100 seen as integer"]
    },
    {
      "regex": "^Maintainer: [\\w ]+ \\<(.+)\\>",
      "exceptionStackTrace": null,
      "matches": [
        "Maintainer: evil <>>",
        "Maintainer: evil <<>",
        "Maintainer: evil <:>",
        "Maintainer: evil <eVil>",
        "Maintainer: evil <EVIL>",
        "Maintainer: evil <ev_il>",
        "Maintainer: evil <ev il>",
        "Maintainer: evil <ev4il>",
        "Maintainer: evil <e>",
        "Maintainer: evil < >",
        "Maintainer: evil <6>",
        "Maintainer: evil <_>",
        "Maintainer: evil <>",
        "Maintainer: eVil <evil>",
        "Maintainer: EVIL <evil>",
        "Maintainer: ev_il <evil>",
        "Maintainer: ev il <evil>",
        "Maintainer: ev4il <evil>",
        "Maintainer: e <evil>",
        "Maintainer:   <evil>",
        "Maintainer: 6 <evil>",
        "Maintainer: _ <evil>",
        "Maintainer:  <evil>",
        "Maintainer: evil <evil>"
      ]
    },
    {
      "regex": "##.*TESTCOUNT\\s*([\\+\\*\\-\\/])\\s*(\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "##evilTESTCOUNT / 00",
        "##evilTESTCOUNT / ",
        "##evilTESTCOUNT /  0",
        "##evilTESTCOUNT /0",
        "##evilTESTCOUNT - 0",
        "##evilTESTCOUNT + 0",
        "##evilTESTCOUNT * 0",
        "##evilTESTCOUNT  / 0",
        "##evilTESTCOUNT/ 0",
        "##/TESTCOUNT / 0",
        "##-TESTCOUNT / 0",
        "##+TESTCOUNT / 0",
        "##*TESTCOUNT / 0",
        "###TESTCOUNT / 0",
        "##eVilTESTCOUNT / 0",
        "##EVILTESTCOUNT / 0",
        "##ev_ilTESTCOUNT / 0",
        "##ev ilTESTCOUNT / 0",
        "##ev4ilTESTCOUNT / 0",
        "##eTESTCOUNT / 0",
        "## TESTCOUNT / 0",
        "##6TESTCOUNT / 0",
        "##_TESTCOUNT / 0",
        "##TESTCOUNT / 0",
        "##TESTCOUNT/0",
        "##evilTESTCOUNT / 0"
      ]
    },
    {
      "regex": "{indices}",
      "exceptionStackTrace": null,
      "matches": ["{indices}"]
    },
    {
      "regex": "((https?:\\/\\/)?([\\da-z\\.\\*-]+)\\.([a-z\\.]{2,6})([\\/\\w\\.\\*-]*)*\\/?)\\s?(\\d{3})*",
      "exceptionStackTrace": null,
      "matches": [
        "https://evil...evil/ 000000",
        "https://evil...evil/ ",
        "https://evil...evil/ 0000",
        "https://evil...evil/ 00",
        "https://evil...evil/  000",
        "https://evil...evil/000",
        "https://evil...evil// 000",
        "https://evil...evil 000",
        "https://evil...evilevil/ 000",
        "https://evil...:/ 000",
        "https://evil...// 000",
        "https://evil..../ 000",
        "https://evil...-/ 000",
        "https://evil...*/ 000",
        "https://evil...eVil/ 000",
        "https://evil...EVIL/ 000",
        "https://evil...ev_il/ 000",
        "https://evil...ev il/ 000",
        "https://evil...ev4il/ 000",
        "https://evil...e/ 000",
        "https://evil... / 000",
        "https://evil...6/ 000",
        "https://evil..._/ 000",
        "https://evil.../ 000",
        "https://evil........evil/ 000",
        "https://evil.......evil/ 000",
        "https://evil..evil/ 000",
        "https://evil.a.evil/ 000",
        "https://:...evil/ 000",
        "https:///...evil/ 000",
        "https://....evil/ 000",
        "https://-...evil/ 000",
        "https://*...evil/ 000",
        "https://eVil...evil/ 000",
        "https://EVIL...evil/ 000",
        "https://ev_il...evil/ 000",
        "https://ev il...evil/ 000",
        "https://ev4il...evil/ 000",
        "https://e...evil/ 000",
        "https:// ...evil/ 000",
        "https://6...evil/ 000",
        "https://_...evil/ 000",
        "https://...evil/ 000",
        "https://https://evil...evil/ 000",
        "evil...evil/ 000",
        "httpss://evil...evil/ 000",
        "http://evil...evil/ 000",
        "evil...",
        "https://evil...evil/ 000"
      ]
    },
    {
      "regex": "href=.javascript:alert",
      "exceptionStackTrace": null,
      "matches": [
        "href=Ajavascript:alert",
        "href==javascript:alert",
        "href=:javascript:alert",
        "href=0javascript:alert",
        "href= javascript:alert",
        "href=ajavascript:alert"
      ]
    },
    {
      "regex": "^# ------------------------ >8 ------------------------[\\s\\S]*$|^#.*\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^u?int\\d*$",
      "exceptionStackTrace": null,
      "matches": ["uint00", "uint", "uuint0", "int0", "int", "uint0"]
    },
    {
      "regex": "^(?P<major>[1-9][0-9]{0,2})\\.(?P<minor>(([0-9])|([1-9][0-9]{0,1})))\\((?P<mr>(([0-9])|([1-9][0-9]{0,2})))\\.(?P<patch>(([0-9])|([1-9][0-9]{0,4})))\\)$",
      "exceptionStackTrace": null,
      "matches": [
        "10.100(0.0)",
        "10.1(0.0)",
        "10.00(0.0)",
        "10.0(1000.0)",
        "10.0(100.0)",
        "10.0(1.0)",
        "10.0(00.0)",
        "10.0(0.100000)",
        "10.0(0.10000)",
        "10.0(0.1)",
        "10.0(0.00)",
        "1000.0(0.0)",
        "100.0(0.0)",
        "00.0(0.0)",
        "1.1(0.0)",
        "1.0(1.0)",
        "1.0(0.1)",
        "1.0(0.0)",
        "10.10(0.0)",
        "10.0(10.0)",
        "10.0(0.10)",
        "10.0(0.0)"
      ]
    },
    {
      "regex": "^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:)$",
      "exceptionStackTrace": null,
      "matches": [
        "A:A:A:A:A::",
        "A:A:A:A::",
        "::ffff:0:1100a100a100a250",
        "::ffff:0:00a100a100a250",
        "::ffff:0:20200a200a200a250",
        "::ffff:0:0a200a200a250",
        "::ffff:0:250a200a200a250",
        "::ffff:0:250a250a250a1100",
        "::ffff:0:250a250a250a00",
        "::ffff:0:250a250a250a20200",
        "::ffff:0:250a250a250a0",
        "::ffff:0:250a250a250a256",
        "::ffff:0:250a250a250a250a250",
        "::ffff:0:250a250a250",
        "::ffff:0:250A250a250a250",
        "::ffff:0:250:250a250a250",
        "::ffff:0:2500250a250a250",
        "::ffff:0:250%250a250a250",
        "::ffff:0:250 250a250a250",
        "::ffff:0:256a250a250a250",
        "::ffff:0:ffff:0:250a250a250a250",
        "::250a250a250a250",
        "::ffff:0:0:250a250a250a250",
        "::ffff:250a250a250a250",
        "::ffff:00000:250a250a250a250",
        "::ffff:0000:250a250a250a250",
        "::ffff::250a250a250a250",
        "fe80::A%eVil",
        "fe80::A%EVIL",
        "fe80::A%ev_il",
        "fe80::A%ev il",
        "fe80::A%ev4il",
        "fe80::A%e",
        "fe80::A% ",
        "fe80::A%6",
        "fe80::A%_",
        "fe80::A%",
        "fe80::A:A:A:A:A%evil",
        "fe80::A:A:A:A%evil",
        "fe80::AAAAA%evil",
        "fe80::AAAA%evil",
        "fe80::%evil",
        "fe80::g%evil",
        "fe80::a%evil",
        "fe80::G%evil",
        "fe80::0%evil",
        "::A:A:A:A:A:A:A:A",
        "::A:A:A:A:A:A:A",
        "::AAAAA",
        "::AAAA",
        "::g",
        "::a",
        "::G",
        "::0",
        "A::A:A:A:A:A:A:A",
        "A::A:A:A:A:A:A",
        "A:A::A",
        "A::A:A:A:A:A",
        "A:A:A::A",
        "A::A:A:A:A",
        "A:A:A:A::A",
        "A::A:A:A",
        "A::A:A",
        "A:",
        "A:A:A:A:A::A",
        "A::AAAAA",
        "A::AAAA",
        "A::g",
        "A::a",
        "A::G",
        "A::0",
        "A:A:A:A:A:A:A::A",
        "A:A:A:A:A:A::A",
        ":A",
        "AAAAA::A",
        "AAAA::A",
        "g::A",
        "a::A",
        "G::A",
        "0::A",
        "A:A:A:A:A:A:A:A::",
        "A:A:A:A:A:A:A::",
        ":",
        "AAAAA::",
        "AAAA::",
        "g::",
        "a::",
        "G::",
        "0::",
        "A:A:A:A:A:A:A:AAAAA",
        "A:A:A:A:A:A:A:AAAA",
        "A:A:A:A:A:A:A:",
        "A:A:A:A:A:A:A:g",
        "A:A:A:A:A:A:A:a",
        "A:A:A:A:A:A:A:G",
        "A:A:A:A:A:A:A:0",
        "A:A:A:A:A:A:A:A:A",
        "A:A:A:A:A:A:A",
        "AAAAA:A:A:A:A:A:A:A",
        "AAAA:A:A:A:A:A:A:A",
        ":A:A:A:A:A:A:A",
        "g:A:A:A:A:A:A:A",
        "a:A:A:A:A:A:A:A",
        "G:A:A:A:A:A:A:A",
        "0:A:A:A:A:A:A:A",
        "::0a100a100a250",
        "::250a100a100a0",
        "::250a100a100a250",
        "fe80:%evil",
        "::ffff:0:100a100a100a250",
        "::ffff:0:200a200a200a250",
        "::ffff:0:250a250a250a100",
        "::ffff:0:250a250a250a200",
        "::ffff:0:250a250a250a250",
        "fe80::A%evil",
        "::",
        "::A",
        "A::A",
        "A::",
        "A:A:A:A:A:A:A:A"
      ]
    },
    {
      "regex": "(.*?)(?:[^a-zA-Z0-9])*$",
      "exceptionStackTrace": null,
      "matches": [
        "evil  ",
        "evil",
        "evila",
        "evil_",
        "evilA",
        "evil0",
        "eVil ",
        "EVIL ",
        "ev_il ",
        "ev il ",
        "ev4il ",
        "e ",
        "  ",
        "6 ",
        "_ ",
        " ",
        "",
        "evil "
      ]
    },
    { "regex": "(^'|'$)", "exceptionStackTrace": null, "matches": ["'"] },
    {
      "regex": "^add [er]sp, (\\S+)$",
      "exceptionStackTrace": null,
      "matches": [
        "add rsp, ,",
        "add rsp, eVil",
        "add rsp, EVIL",
        "add rsp, ev_il",
        "add rsp, ev il",
        "add rsp, ev4il",
        "add rsp, e",
        "add rsp,  ",
        "add rsp, 6",
        "add rsp, _",
        "add rsp, ",
        "add esp, evil",
        "add asp, evil",
        "add rsp, evil"
      ]
    },
    {
      "regex": "^\\s*<(?P<type>[a-zA-Z]+)(?:\\s+(?P<params>[^>]+))?>(?P<content>.*?)\\s*</\\1>\\s*",
      "exceptionStackTrace": null,
      "matches": [
        " <evil evil>evil </evil>  ",
        " <evil evil>evil </evil>",
        " <evil evil>evil  </evil> ",
        " <evil evil>evil</evil> ",
        " <evil evil>> </evil> ",
        " <evil evil>< </evil> ",
        " <evil evil>/ </evil> ",
        " <evil evil>eVil </evil> ",
        " <evil evil>EVIL </evil> ",
        " <evil evil>ev_il </evil> ",
        " <evil evil>ev il </evil> ",
        " <evil evil>ev4il </evil> ",
        " <evil evil>e </evil> ",
        " <evil evil>  </evil> ",
        " <evil evil>6 </evil> ",
        " <evil evil>_ </evil> ",
        " <evil evil> </evil> ",
        " <evil evil evil>evil </evil> ",
        " <evil>evil </evil> ",
        " <evil >>evil </evil> ",
        " <evil <>evil </evil> ",
        " <evil />evil </evil> ",
        " <evil eVil>evil </evil> ",
        " <evil EVIL>evil </evil> ",
        " <evil ev_il>evil </evil> ",
        " <evil ev il>evil </evil> ",
        " <evil ev4il>evil </evil> ",
        " <evil e>evil </evil> ",
        " <evil  >evil </evil> ",
        " <evil 6>evil </evil> ",
        " <evil _>evil </evil> ",
        " <evil >evil </evil> ",
        " <evil  evil>evil </evil> ",
        " <evilevil>evil </evil> ",
        " <eVil evil>evil </evil> ",
        " <EVIL evil>evil </evil> ",
        " <ev_il evil>evil </evil> ",
        " <ev il evil>evil </evil> ",
        " <ev4il evil>evil </evil> ",
        " <e evil>evil </evil> ",
        " <  evil>evil </evil> ",
        " <6 evil>evil </evil> ",
        " <_ evil>evil </evil> ",
        " < evil>evil </evil> ",
        "  <evil evil>evil </evil> ",
        "<evil evil>evil </evil> ",
        "<evil></evil>",
        " <evil evil>evil </evil> "
      ]
    },
    {
      "regex": "(.*)\\..*\\..*",
      "exceptionStackTrace": null,
      "matches": [
        "evil.evil..",
        "evil.evil.eVil",
        "evil.evil.EVIL",
        "evil.evil.ev_il",
        "evil.evil.ev il",
        "evil.evil.ev4il",
        "evil.evil.e",
        "evil.evil. ",
        "evil.evil.6",
        "evil.evil._",
        "evil.evil.",
        "evil...evil",
        "evil.eVil.evil",
        "evil.EVIL.evil",
        "evil.ev_il.evil",
        "evil.ev il.evil",
        "evil.ev4il.evil",
        "evil.e.evil",
        "evil. .evil",
        "evil.6.evil",
        "evil._.evil",
        "evil..evil",
        "..evil.evil",
        "eVil.evil.evil",
        "EVIL.evil.evil",
        "ev_il.evil.evil",
        "ev il.evil.evil",
        "ev4il.evil.evil",
        "e.evil.evil",
        " .evil.evil",
        "6.evil.evil",
        "_.evil.evil",
        ".evil.evil",
        "..",
        "evil.evil.evil"
      ]
    },
    {
      "regex": "darwin(11)",
      "exceptionStackTrace": null,
      "matches": ["darwin11"]
    },
    {
      "regex": "$_\\s?",
      "exceptionStackTrace": null,
      "matches": ["_  ", "_", "_ "]
    },
    {
      "regex": "\n__version__ = '(.*)'",
      "exceptionStackTrace": null,
      "matches": [
        "\n__version__ = '='",
        "\n__version__ = '''",
        "\n__version__ = 'eVil'",
        "\n__version__ = 'EVIL'",
        "\n__version__ = 'ev_il'",
        "\n__version__ = 'ev il'",
        "\n__version__ = 'ev4il'",
        "\n__version__ = 'e'",
        "\n__version__ = ' '",
        "\n__version__ = '6'",
        "\n__version__ = '_'",
        "\n__version__ = ''",
        "\n__version__ = 'evil'"
      ]
    },
    {
      "regex": "^(?:OLDAP-2.2)",
      "exceptionStackTrace": null,
      "matches": ["OLDAP-2A2", "OLDAP-202", "OLDAP-2-2", "OLDAP-2 2", "OLDAP-2a2"]
    },
    {
      "regex": "\\A(.*?)_?[0-9]+\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "^COD_BANCO.*",
      "exceptionStackTrace": null,
      "matches": [
        "COD_BANCOeVil",
        "COD_BANCOEVIL",
        "COD_BANCOev_il",
        "COD_BANCOev il",
        "COD_BANCOev4il",
        "COD_BANCOe",
        "COD_BANCO ",
        "COD_BANCO6",
        "COD_BANCO_",
        "COD_BANCO",
        "COD_BANCOevil"
      ]
    },
    {
      "regex": "(developerToken>|httpAuthorizationHeader>)[^<]+(<\\/)",
      "exceptionStackTrace": null,
      "matches": [
        "developerToken>></",
        "developerToken><</",
        "developerToken>/</",
        "developerToken>eVil</",
        "developerToken>EVIL</",
        "developerToken>ev_il</",
        "developerToken>ev il</",
        "developerToken>ev4il</",
        "developerToken>e</",
        "developerToken> </",
        "developerToken>6</",
        "developerToken>_</",
        "developerToken></",
        "httpAuthorizationHeader>evil</",
        "developerToken>evil</"
      ]
    },
    {
      "regex": "^#([-\\w\\u00C0-\\uFFFF=$]+)$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 192"
      },
      "matches": []
    },
    {
      "regex": "\\<em\\>([^<]+)\\<\\/em\\>",
      "exceptionStackTrace": null,
      "matches": [
        "<em>></em>",
        "<em><</em>",
        "<em>/</em>",
        "<em>eVil</em>",
        "<em>EVIL</em>",
        "<em>ev_il</em>",
        "<em>ev il</em>",
        "<em>ev4il</em>",
        "<em>e</em>",
        "<em> </em>",
        "<em>6</em>",
        "<em>_</em>",
        "<em></em>",
        "<em>evil</em>"
      ]
    },
    {
      "regex": "<h1>Grandma</h1>",
      "exceptionStackTrace": null,
      "matches": ["<h1>Grandma</h1>"]
    },
    { "regex": "Min", "exceptionStackTrace": null, "matches": ["Min"] },
    {
      "regex": "^et(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "eteVil",
        "etEVIL",
        "etev_il",
        "etev il",
        "etev4il",
        "ete",
        "et ",
        "et6",
        "et_",
        "et",
        "etevil"
      ]
    },
    {
      "regex": ".*\\.qcow2",
      "exceptionStackTrace": null,
      "matches": [
        "..qcow2",
        "eVil.qcow2",
        "EVIL.qcow2",
        "ev_il.qcow2",
        "ev il.qcow2",
        "ev4il.qcow2",
        "e.qcow2",
        " .qcow2",
        "6.qcow2",
        "_.qcow2",
        ".qcow2",
        "evil.qcow2"
      ]
    },
    {
      "regex": "\\Afunction score\\, score mode \\[sum\\]\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "^-\\w",
      "exceptionStackTrace": null,
      "matches": ["-_", "-A", "-0", "-a"]
    },
    {
      "regex": "environment\\.rb",
      "exceptionStackTrace": null,
      "matches": ["environment.rb"]
    },
    {
      "regex": "^\\s*#\\s*if",
      "exceptionStackTrace": null,
      "matches": [" #  if", " #if", "  # if", "# if", "#if", " # if"]
    },
    {
      "regex": "gecko\\/(\\d+)",
      "exceptionStackTrace": null,
      "matches": ["gecko/00", "gecko/", "gecko/0"]
    },
    {
      "regex": "<!-- your app's js -->",
      "exceptionStackTrace": null,
      "matches": ["<!-- your app's js -->"]
    },
    {
      "regex": "^\\s*INSERT",
      "exceptionStackTrace": null,
      "matches": ["  INSERT", "INSERT", " INSERT"]
    },
    {
      "regex": "window \"(.*)\"",
      "exceptionStackTrace": null,
      "matches": [
        "window \"\"\"",
        "window \"eVil\"",
        "window \"EVIL\"",
        "window \"ev_il\"",
        "window \"ev il\"",
        "window \"ev4il\"",
        "window \"e\"",
        "window \" \"",
        "window \"6\"",
        "window \"_\"",
        "window \"\"",
        "window \"evil\""
      ]
    },
    {
      "regex": "\\[\\[[^\\]]*\\]\\]",
      "exceptionStackTrace": null,
      "matches": [
        "[[]]]",
        "[[[]]",
        "[[eVil]]",
        "[[EVIL]]",
        "[[ev_il]]",
        "[[ev il]]",
        "[[ev4il]]",
        "[[e]]",
        "[[ ]]",
        "[[6]]",
        "[[_]]",
        "[[]]",
        "[[evil]]"
      ]
    },
    {
      "regex": "^internal error in Neon module: zomg$",
      "exceptionStackTrace": null,
      "matches": ["internal error in Neon module: zomg"]
    },
    {
      "regex": "[ \\t\\f]* \\# .* coding[=:][ \\t]*([-\\w.]+)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "^(report|print|exit)$",
      "exceptionStackTrace": null,
      "matches": ["exit", "print", "report"]
    },
    {
      "regex": "footer.*",
      "exceptionStackTrace": null,
      "matches": [
        "footereVil",
        "footerEVIL",
        "footerev_il",
        "footerev il",
        "footerev4il",
        "footere",
        "footer ",
        "footer6",
        "footer_",
        "footer",
        "footerevil"
      ]
    },
    {
      "regex": ".*://(www\\d*\\.)?",
      "exceptionStackTrace": null,
      "matches": [
        "evil://www0.www0.",
        "evil://",
        "evil://www00.",
        "evil://www.",
        ":://www0.",
        "/://www0.",
        ".://www0.",
        "eVil://www0.",
        "EVIL://www0.",
        "ev_il://www0.",
        "ev il://www0.",
        "ev4il://www0.",
        "e://www0.",
        " ://www0.",
        "6://www0.",
        "_://www0.",
        "://www0.",
        "://",
        "evil://www0."
      ]
    },
    {
      "regex": "[/\\\\]([^/\\\\]*)$",
      "exceptionStackTrace": null,
      "matches": [
        "\\\\",
        "\\/",
        "\\eVil",
        "\\EVIL",
        "\\ev_il",
        "\\ev il",
        "\\ev4il",
        "\\e",
        "\\ ",
        "\\6",
        "\\_",
        "/evil",
        "\\",
        "\\evil"
      ]
    },
    {
      "regex": "^!(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "!!",
        "!eVil",
        "!EVIL",
        "!ev_il",
        "!ev il",
        "!ev4il",
        "!e",
        "! ",
        "!6",
        "!_",
        "!",
        "!evil"
      ]
    },
    {
      "regex": "Ao file Ac",
      "exceptionStackTrace": null,
      "matches": ["Ao file Ac"]
    },
    {
      "regex": "autovivify",
      "exceptionStackTrace": null,
      "matches": ["autovivify"]
    },
    {
      "regex": "model name\\s+:\\s+(.+)",
      "exceptionStackTrace": null,
      "matches": [
        "model name : :",
        "model name : eVil",
        "model name : EVIL",
        "model name : ev_il",
        "model name : ev il",
        "model name : ev4il",
        "model name : e",
        "model name :  ",
        "model name : 6",
        "model name : _",
        "model name : ",
        "model name :  evil",
        "model name :evil",
        "model name  : evil",
        "model name: evil",
        "model name : evil"
      ]
    },
    {
      "regex": "^[a-zA-Z][A-Za-z0-9_-]*(\\.[A-Za-z0-9_-]+)*",
      "exceptionStackTrace": null,
      "matches": [
        "Aevil.evil.evil",
        "Aevil",
        "Aevil..",
        "Aevil.-",
        "Aevil.eVil",
        "Aevil.EVIL",
        "Aevil.ev_il",
        "Aevil.ev il",
        "Aevil.ev4il",
        "Aevil.e",
        "Aevil. ",
        "Aevil.6",
        "Aevil._",
        "Aevil.",
        "A..evil",
        "A-.evil",
        "AeVil.evil",
        "AEVIL.evil",
        "Aev_il.evil",
        "Aev il.evil",
        "Aev4il.evil",
        "Ae.evil",
        "A .evil",
        "A6.evil",
        "A_.evil",
        "A.evil",
        "aevil.evil",
        "A",
        "Aevil.evil"
      ]
    },
    {
      "regex": "(\\x{1094}|\\x{1095})",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "incomplete escape \\x"
      },
      "matches": []
    },
    {
      "regex": "^/base/tests/Render/[^/]+/[^/]+\\.qml$",
      "exceptionStackTrace": null,
      "matches": [
        "/base/tests/Render/evil//.qml",
        "/base/tests/Render/evil/..qml",
        "/base/tests/Render/evil/eVil.qml",
        "/base/tests/Render/evil/EVIL.qml",
        "/base/tests/Render/evil/ev_il.qml",
        "/base/tests/Render/evil/ev il.qml",
        "/base/tests/Render/evil/ev4il.qml",
        "/base/tests/Render/evil/e.qml",
        "/base/tests/Render/evil/ .qml",
        "/base/tests/Render/evil/6.qml",
        "/base/tests/Render/evil/_.qml",
        "/base/tests/Render/evil/.qml",
        "/base/tests/Render///evil.qml",
        "/base/tests/Render/./evil.qml",
        "/base/tests/Render/eVil/evil.qml",
        "/base/tests/Render/EVIL/evil.qml",
        "/base/tests/Render/ev_il/evil.qml",
        "/base/tests/Render/ev il/evil.qml",
        "/base/tests/Render/ev4il/evil.qml",
        "/base/tests/Render/e/evil.qml",
        "/base/tests/Render/ /evil.qml",
        "/base/tests/Render/6/evil.qml",
        "/base/tests/Render/_/evil.qml",
        "/base/tests/Render//evil.qml",
        "/base/tests/Render/evil/evil.qml"
      ]
    },
    {
      "regex": "^(/dev/xvd[a-z])$",
      "exceptionStackTrace": null,
      "matches": ["/dev/xvda"]
    },
    {
      "regex": "(system\\.)?token(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "system.token.",
        "system.tokeneVil",
        "system.tokenEVIL",
        "system.tokenev_il",
        "system.tokenev il",
        "system.tokenev4il",
        "system.tokene",
        "system.token ",
        "system.token6",
        "system.token_",
        "system.token",
        "system.system.tokenevil",
        "tokenevil",
        "token",
        "system.tokenevil"
      ]
    },
    {
      "regex": ".*\\(.*MC.\\s*([a-zA-z0-9\\-\\.]+)\\s*\\)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (bad range): Invalid range: A-z"
      },
      "matches": []
    },
    {
      "regex": "milestone",
      "exceptionStackTrace": null,
      "matches": ["milestone"]
    },
    { "regex": "(_bn_)", "exceptionStackTrace": null, "matches": ["_bn_"] },
    {
      "regex": "Cannot join #test.*locked",
      "exceptionStackTrace": null,
      "matches": [
        "Cannot join #test#locked",
        "Cannot join #testeVillocked",
        "Cannot join #testEVILlocked",
        "Cannot join #testev_illocked",
        "Cannot join #testev illocked",
        "Cannot join #testev4illocked",
        "Cannot join #testelocked",
        "Cannot join #test locked",
        "Cannot join #test6locked",
        "Cannot join #test_locked",
        "Cannot join #testlocked",
        "Cannot join #testevillocked"
      ]
    },
    {
      "regex": "^(crypto isakmp key) (\\S+) (.*)",
      "exceptionStackTrace": null,
      "matches": [
        "crypto isakmp key evil eVil",
        "crypto isakmp key evil EVIL",
        "crypto isakmp key evil ev_il",
        "crypto isakmp key evil ev il",
        "crypto isakmp key evil ev4il",
        "crypto isakmp key evil e",
        "crypto isakmp key evil  ",
        "crypto isakmp key evil 6",
        "crypto isakmp key evil _",
        "crypto isakmp key eVil evil",
        "crypto isakmp key EVIL evil",
        "crypto isakmp key ev_il evil",
        "crypto isakmp key ev il evil",
        "crypto isakmp key ev4il evil",
        "crypto isakmp key e evil",
        "crypto isakmp key   evil",
        "crypto isakmp key 6 evil",
        "crypto isakmp key _ evil",
        "crypto isakmp key  evil",
        "crypto isakmp key evil ",
        "crypto isakmp key evil evil"
      ]
    },
    {
      "regex": "([a-z\\\\s]*)\\\\(([0-9]*),?([0-9]*)\\\\)",
      "exceptionStackTrace": null,
      "matches": [
        "evil\\0,00\\",
        "evil\\0,\\",
        "evil\\0,,0\\",
        "evil\\00\\",
        "evil\\00,0\\",
        "evil\\,0\\",
        "\\\\0,0\\",
        ",\\0,0\\",
        "eVil\\0,0\\",
        "EVIL\\0,0\\",
        "ev_il\\0,0\\",
        "ev il\\0,0\\",
        "ev4il\\0,0\\",
        "e\\0,0\\",
        " \\0,0\\",
        "6\\0,0\\",
        "_\\0,0\\",
        "\\0,0\\",
        "\\\\",
        "evil\\0,0\\"
      ]
    },
    {
      "regex": "^[-]{2}\\s+(.+)",
      "exceptionStackTrace": null,
      "matches": [
        "-- -",
        "-- eVil",
        "-- EVIL",
        "-- ev_il",
        "-- ev il",
        "-- ev4il",
        "-- e",
        "--  ",
        "-- 6",
        "-- _",
        "-- ",
        "--  evil",
        "--evil",
        "--- evil",
        "- evil",
        "-- evil"
      ]
    },
    {
      "regex": "^(?:NUMBER\\b)",
      "exceptionStackTrace": null,
      "matches": ["NUMBER"]
    },
    { "regex": "PC", "exceptionStackTrace": null, "matches": ["PC"] },
    {
      "regex": ":\\/\\/([^:#\\/\\?]+)",
      "exceptionStackTrace": null,
      "matches": [
        "://?",
        "://:",
        ":///",
        "://#",
        "://eVil",
        "://EVIL",
        "://ev_il",
        "://ev il",
        "://ev4il",
        "://e",
        ":// ",
        "://6",
        "://_",
        "://",
        "://evil"
      ]
    },
    {
      "regex": "Windows CE [^;]+; Trident\\/[^;]+; IEMobile[\\/ ][^;]+[\\);] ([A-Z\\s]+); ?([^\\/\\),]+)",
      "exceptionStackTrace": null,
      "matches": [
        "Windows CE evil; Trident/evil; IEMobile evil; evil; ;",
        "Windows CE evil; Trident/evil; IEMobile evil; evil; /",
        "Windows CE evil; Trident/evil; IEMobile evil; evil; ,",
        "Windows CE evil; Trident/evil; IEMobile evil; evil; )",
        "Windows CE evil; Trident/evil; IEMobile evil; evil; eVil",
        "Windows CE evil; Trident/evil; IEMobile evil; evil; EVIL",
        "Windows CE evil; Trident/evil; IEMobile evil; evil; ev_il",
        "Windows CE evil; Trident/evil; IEMobile evil; evil; ev il",
        "Windows CE evil; Trident/evil; IEMobile evil; evil; ev4il",
        "Windows CE evil; Trident/evil; IEMobile evil; evil; e",
        "Windows CE evil; Trident/evil; IEMobile evil; evil;  ",
        "Windows CE evil; Trident/evil; IEMobile evil; evil; 6",
        "Windows CE evil; Trident/evil; IEMobile evil; evil; _",
        "Windows CE evil; Trident/evil; IEMobile evil; evil; ",
        "Windows CE evil; Trident/evil; IEMobile evil; evil;  evil",
        "Windows CE evil; Trident/evil; IEMobile evil; eVil; evil",
        "Windows CE evil; Trident/evil; IEMobile evil; EVIL; evil",
        "Windows CE evil; Trident/evil; IEMobile evil; ev_il; evil",
        "Windows CE evil; Trident/evil; IEMobile evil; ev il; evil",
        "Windows CE evil; Trident/evil; IEMobile evil; ev4il; evil",
        "Windows CE evil; Trident/evil; IEMobile evil; e; evil",
        "Windows CE evil; Trident/evil; IEMobile evil;  ; evil",
        "Windows CE evil; Trident/evil; IEMobile evil; 6; evil",
        "Windows CE evil; Trident/evil; IEMobile evil; _; evil",
        "Windows CE evil; Trident/evil; IEMobile evil; ; evil",
        "Windows CE evil; Trident/evil; IEMobile evil) evil; evil",
        "Windows CE evil; Trident/evil; IEMobile ;; evil; evil",
        "Windows CE evil; Trident/evil; IEMobile /; evil; evil",
        "Windows CE evil; Trident/evil; IEMobile ,; evil; evil",
        "Windows CE evil; Trident/evil; IEMobile ); evil; evil",
        "Windows CE evil; Trident/evil; IEMobile eVil; evil; evil",
        "Windows CE evil; Trident/evil; IEMobile EVIL; evil; evil",
        "Windows CE evil; Trident/evil; IEMobile ev_il; evil; evil",
        "Windows CE evil; Trident/evil; IEMobile ev il; evil; evil",
        "Windows CE evil; Trident/evil; IEMobile ev4il; evil; evil",
        "Windows CE evil; Trident/evil; IEMobile e; evil; evil",
        "Windows CE evil; Trident/evil; IEMobile  ; evil; evil",
        "Windows CE evil; Trident/evil; IEMobile 6; evil; evil",
        "Windows CE evil; Trident/evil; IEMobile _; evil; evil",
        "Windows CE evil; Trident/evil; IEMobile ; evil; evil",
        "Windows CE evil; Trident/evil; IEMobile/evil; evil; evil",
        "Windows CE evil; Trident/;; IEMobile evil; evil; evil",
        "Windows CE evil; Trident//; IEMobile evil; evil; evil",
        "Windows CE evil; Trident/,; IEMobile evil; evil; evil",
        "Windows CE evil; Trident/); IEMobile evil; evil; evil",
        "Windows CE evil; Trident/eVil; IEMobile evil; evil; evil",
        "Windows CE evil; Trident/EVIL; IEMobile evil; evil; evil",
        "Windows CE evil; Trident/ev_il; IEMobile evil; evil; evil",
        "Windows CE evil; Trident/ev il; IEMobile evil; evil; evil",
        "Windows CE evil; Trident/ev4il; IEMobile evil; evil; evil",
        "Windows CE evil; Trident/e; IEMobile evil; evil; evil",
        "Windows CE evil; Trident/ ; IEMobile evil; evil; evil",
        "Windows CE evil; Trident/6; IEMobile evil; evil; evil",
        "Windows CE evil; Trident/_; IEMobile evil; evil; evil",
        "Windows CE evil; Trident/; IEMobile evil; evil; evil",
        "Windows CE ;; Trident/evil; IEMobile evil; evil; evil",
        "Windows CE /; Trident/evil; IEMobile evil; evil; evil",
        "Windows CE ,; Trident/evil; IEMobile evil; evil; evil",
        "Windows CE ); Trident/evil; IEMobile evil; evil; evil",
        "Windows CE eVil; Trident/evil; IEMobile evil; evil; evil",
        "Windows CE EVIL; Trident/evil; IEMobile evil; evil; evil",
        "Windows CE ev_il; Trident/evil; IEMobile evil; evil; evil",
        "Windows CE ev il; Trident/evil; IEMobile evil; evil; evil",
        "Windows CE ev4il; Trident/evil; IEMobile evil; evil; evil",
        "Windows CE e; Trident/evil; IEMobile evil; evil; evil",
        "Windows CE  ; Trident/evil; IEMobile evil; evil; evil",
        "Windows CE 6; Trident/evil; IEMobile evil; evil; evil",
        "Windows CE _; Trident/evil; IEMobile evil; evil; evil",
        "Windows CE ; Trident/evil; IEMobile evil; evil; evil",
        "Windows CE evil; Trident/evil; IEMobile evil; evil;evil",
        "Windows CE evil; Trident/evil; IEMobile evil; evil; evil"
      ]
    },
    {
      "regex": "\\n|(?=\\?>)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "Subject:\\s[0-9]+",
      "exceptionStackTrace": null,
      "matches": ["Subject: 00", "Subject: ", "Subject: 0"]
    },
    {
      "regex": "<div class='calendar monthly'",
      "exceptionStackTrace": null,
      "matches": ["<div class='calendar monthly'"]
    },
    {
      "regex": "^subconf (\\S+)$",
      "exceptionStackTrace": null,
      "matches": [
        "subconf eVil",
        "subconf EVIL",
        "subconf ev_il",
        "subconf ev il",
        "subconf ev4il",
        "subconf e",
        "subconf  ",
        "subconf 6",
        "subconf _",
        "subconf ",
        "subconf evil"
      ]
    },
    {
      "regex": "!addlastfmuser (.+)",
      "exceptionStackTrace": null,
      "matches": [
        "!addlastfmuser !",
        "!addlastfmuser eVil",
        "!addlastfmuser EVIL",
        "!addlastfmuser ev_il",
        "!addlastfmuser ev il",
        "!addlastfmuser ev4il",
        "!addlastfmuser e",
        "!addlastfmuser  ",
        "!addlastfmuser 6",
        "!addlastfmuser _",
        "!addlastfmuser ",
        "!addlastfmuser evil"
      ]
    },
    {
      "regex": "  (\\S+)\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        "  evil  ",
        "  eVil ",
        "  EVIL ",
        "  ev_il ",
        "  ev il ",
        "  ev4il ",
        "  e ",
        "    ",
        "  6 ",
        "  _ ",
        "   ",
        "  evil",
        "  evil "
      ]
    },
    {
      "regex": "(spec|src)",
      "exceptionStackTrace": null,
      "matches": ["src", "spec"]
    },
    { "regex": "SYNO\\.", "exceptionStackTrace": null, "matches": ["SYNO."] },
    {
      "regex": "(^[\\t ]*)mixin .+",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "Duplicate term: \\[gender\\]",
      "exceptionStackTrace": null,
      "matches": ["Duplicate term: [gender]"]
    },
    { "regex": "long int", "exceptionStackTrace": null, "matches": ["long int"] },
    { "regex": "\\(ext\\)", "exceptionStackTrace": null, "matches": ["(ext)"] },
    {
      "regex": "^the UIComponent loads successfully$",
      "exceptionStackTrace": null,
      "matches": ["the UIComponent loads successfully"]
    },
    {
      "regex": "^(param|param-nested|param-text)$",
      "exceptionStackTrace": null,
      "matches": ["param-text", "param-nested", "param"]
    },
    {
      "regex": "\\b\\d{4}-\\d{2}-\\d{2}\\b",
      "exceptionStackTrace": null,
      "matches": [
        "0000-00-000",
        "0000-00-0",
        "0000-000-00",
        "0000-0-00",
        "00000-00-00",
        "000-00-00",
        "0000-00-00"
      ]
    },
    {
      "regex": "(?<![<>])(<[A-DF-Z][^>]*>g?[Cc]h?\\x{fa}ig<\\/[A-DF-Z]> (?:<N[^>]*pl=\"y\"[^>]*>[^<]+<\\/N>))(?![<>])",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "incomplete escape \\x"
      },
      "matches": []
    },
    {
      "regex": "^\\([^,)]+,",
      "exceptionStackTrace": null,
      "matches": [
        "(,,",
        "(),",
        "((,",
        "(eVil,",
        "(EVIL,",
        "(ev_il,",
        "(ev il,",
        "(ev4il,",
        "(e,",
        "( ,",
        "(6,",
        "(_,",
        "(,",
        "(evil,"
      ]
    },
    {
      "regex": "[hH]i?",
      "exceptionStackTrace": null,
      "matches": ["Hii", "hi", "ai", "Ai", "H", "Hi"]
    },
    {
      "regex": "^##\\s*DOMAIN\\s+([a-z_]*)\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        "## DOMAIN evil  ",
        "## DOMAIN evil",
        "## DOMAIN # ",
        "## DOMAIN eVil ",
        "## DOMAIN EVIL ",
        "## DOMAIN ev_il ",
        "## DOMAIN ev il ",
        "## DOMAIN ev4il ",
        "## DOMAIN e ",
        "## DOMAIN   ",
        "## DOMAIN 6 ",
        "## DOMAIN _ ",
        "## DOMAIN  ",
        "## DOMAIN  evil ",
        "## DOMAINevil ",
        "##  DOMAIN evil ",
        "##DOMAIN evil ",
        "##DOMAIN ",
        "## DOMAIN evil "
      ]
    },
    {
      "regex": "^<p>foo_bar_baz_bat<\\/p>$",
      "exceptionStackTrace": null,
      "matches": ["<p>foo_bar_baz_bat</p>"]
    },
    {
      "regex": "(\\$)[a-zA-Z_]\\w*",
      "exceptionStackTrace": null,
      "matches": [
        "$_eVil",
        "$_EVIL",
        "$_ev_il",
        "$_ev il",
        "$_ev4il",
        "$_e",
        "$_ ",
        "$_6",
        "$__",
        "$aevil",
        "$Aevil",
        "$_",
        "$_evil"
      ]
    },
    {
      "regex": "\\G([^\\s,;\"<]*)\\s*",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\G"
      },
      "matches": []
    },
    {
      "regex": "def line_item_params",
      "exceptionStackTrace": null,
      "matches": ["def line_item_params"]
    },
    {
      "regex": "\\bbb10\\b.+?\\bversion\\/([\\d.]+)",
      "exceptionStackTrace": null,
      "matches": [
        "bb10evilversion/..",
        "bb10evilversion/",
        "bb10evilversion/0",
        "bb10/version/.",
        "bb10.version/.",
        "bb10eVilversion/.",
        "bb10EVILversion/.",
        "bb10ev_ilversion/.",
        "bb10ev ilversion/.",
        "bb10ev4ilversion/.",
        "bb10eversion/.",
        "bb10 version/.",
        "bb106version/.",
        "bb10_version/.",
        "bb10version/.",
        "bb10evilversion/."
      ]
    },
    {
      "regex": "^grid-template",
      "exceptionStackTrace": null,
      "matches": ["grid-template"]
    },
    { "regex": "directed", "exceptionStackTrace": null, "matches": ["directed"] },
    {
      "regex": "^\\s*return\\s+[^\\}]+(\\}\\);[^\\w\\}]*)$",
      "exceptionStackTrace": null,
      "matches": [
        " return evil});}",
        " return evil});;",
        " return evil});)",
        " return evil});eVil",
        " return evil});EVIL",
        " return evil});ev_il",
        " return evil});ev il",
        " return evil});ev4il",
        " return evil});e",
        " return evil}); ",
        " return evil});6",
        " return evil});_",
        " return evil});",
        " return }});evil",
        " return ;});evil",
        " return )});evil",
        " return eVil});evil",
        " return EVIL});evil",
        " return ev_il});evil",
        " return ev il});evil",
        " return ev4il});evil",
        " return e});evil",
        " return  });evil",
        " return 6});evil",
        " return _});evil",
        " return });evil",
        " return  evil});evil",
        " returnevil});evil",
        "  return evil});evil",
        "return evil});evil",
        "return evil});",
        " return evil});evil"
      ]
    },
    {
      "regex": "^\\s*sitemap\\s*:.+$",
      "exceptionStackTrace": null,
      "matches": [
        " sitemap ::",
        " sitemap :eVil",
        " sitemap :EVIL",
        " sitemap :ev_il",
        " sitemap :ev il",
        " sitemap :ev4il",
        " sitemap :e",
        " sitemap : ",
        " sitemap :6",
        " sitemap :_",
        " sitemap :",
        " sitemap  :evil",
        " sitemap:evil",
        "  sitemap :evil",
        "sitemap :evil",
        "sitemap:evil",
        " sitemap :evil"
      ]
    },
    {
      "regex": "^SQLM_REORG_(?:STARTED|PAUSED|STOPPED|COMPLETED|TRUNCATE)$",
      "exceptionStackTrace": null,
      "matches": [
        "SQLM_REORG_TRUNCATE",
        "SQLM_REORG_COMPLETED",
        "SQLM_REORG_STOPPED",
        "SQLM_REORG_PAUSED",
        "SQLM_REORG_STARTED"
      ]
    },
    {
      "regex": "#\\ VERSION TEMPLATE",
      "exceptionStackTrace": null,
      "matches": ["# VERSION TEMPLATE"]
    },
    {
      "regex": "^([A-Za-z]+):\\/\\/",
      "exceptionStackTrace": null,
      "matches": [
        "eVil://",
        "EVIL://",
        "ev_il://",
        "ev il://",
        "ev4il://",
        "e://",
        " ://",
        "6://",
        "_://",
        "://",
        "evil://"
      ]
    },
    {
      "regex": "^1$|^true$",
      "exceptionStackTrace": null,
      "matches": ["true", "1"]
    },
    {
      "regex": "must be a",
      "exceptionStackTrace": null,
      "matches": ["must be a"]
    },
    {
      "regex": "[\\u0780-\\u07BF]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 1920"
      },
      "matches": []
    },
    {
      "regex": "^(http(s?)://)?(www\\.)?(facebook\\.com/(.*)\\?v=)(?P<id_video>\\d+).*$",
      "exceptionStackTrace": null,
      "matches": [
        "https://www.facebook.com/evil?v=0?",
        "https://www.facebook.com/evil?v=0=",
        "https://www.facebook.com/evil?v=0:",
        "https://www.facebook.com/evil?v=0/",
        "https://www.facebook.com/evil?v=0.",
        "https://www.facebook.com/evil?v=0eVil",
        "https://www.facebook.com/evil?v=0EVIL",
        "https://www.facebook.com/evil?v=0ev_il",
        "https://www.facebook.com/evil?v=0ev il",
        "https://www.facebook.com/evil?v=0ev4il",
        "https://www.facebook.com/evil?v=0e",
        "https://www.facebook.com/evil?v=0 ",
        "https://www.facebook.com/evil?v=06",
        "https://www.facebook.com/evil?v=0_",
        "https://www.facebook.com/evil?v=0",
        "https://www.facebook.com/evil?v=00evil",
        "https://www.facebook.com/evil?v=evil",
        "https://www.facebook.com/??v=0evil",
        "https://www.facebook.com/=?v=0evil",
        "https://www.facebook.com/:?v=0evil",
        "https://www.facebook.com//?v=0evil",
        "https://www.facebook.com/.?v=0evil",
        "https://www.facebook.com/eVil?v=0evil",
        "https://www.facebook.com/EVIL?v=0evil",
        "https://www.facebook.com/ev_il?v=0evil",
        "https://www.facebook.com/ev il?v=0evil",
        "https://www.facebook.com/ev4il?v=0evil",
        "https://www.facebook.com/e?v=0evil",
        "https://www.facebook.com/ ?v=0evil",
        "https://www.facebook.com/6?v=0evil",
        "https://www.facebook.com/_?v=0evil",
        "https://www.facebook.com/?v=0evil",
        "https://www.www.facebook.com/evil?v=0evil",
        "https://facebook.com/evil?v=0evil",
        "https://https://www.facebook.com/evil?v=0evil",
        "www.facebook.com/evil?v=0evil",
        "httpss://www.facebook.com/evil?v=0evil",
        "http://www.facebook.com/evil?v=0evil",
        "facebook.com/?v=0",
        "https://www.facebook.com/evil?v=0evil"
      ]
    },
    { "regex": "(\\/| )", "exceptionStackTrace": null, "matches": [" ", "/"] },
    {
      "regex": "(\\d{1,4})?-?(\\d{2})?-?(\\d{2})?(T)?(\\d{2})?:?(\\d{2})?:?(\\d{2})?",
      "exceptionStackTrace": null,
      "matches": [
        "0-00-00T00:00:0000",
        "0-00-00T00:00:",
        "0-00-00T00:00:000",
        "0-00-00T00:00:0",
        "0-00-00T00:00::00",
        "0-00-00T00:0000",
        "0-00-00T00:0000:00",
        "0-00-00T00::00",
        "0-00-00T00:000:00",
        "0-00-00T00:0:00",
        "0-00-00T00::00:00",
        "0-00-00T0000:00",
        "0-00-00T0000:00:00",
        "0-00-00T:00:00",
        "0-00-00T000:00:00",
        "0-00-00T0:00:00",
        "0-00-00TT00:00:00",
        "0-00-0000:00:00",
        "0-00-0000T00:00:00",
        "0-00-T00:00:00",
        "0-00-000T00:00:00",
        "0-00-0T00:00:00",
        "0-00--00T00:00:00",
        "0-0000T00:00:00",
        "0-0000-00T00:00:00",
        "0--00T00:00:00",
        "0-000-00T00:00:00",
        "0-0-00T00:00:00",
        "0--00-00T00:00:00",
        "000-00T00:00:00",
        "00-00-00T00:00:00",
        "00000-00-00T00:00:00",
        "0000-00-00T00:00:00",
        "-00-00T00:00:00",
        "",
        "0-00-00T00:00:00"
      ]
    },
    {
      "regex": "\u00d1\u0081\u00d0\u00be\u00d0\u00bd$",
      "exceptionStackTrace": null,
      "matches": ["\u00d1\u0081\u00d0\u00be\u00d0\u00bd"]
    },
    {
      "regex": "^ *([+-]?)(?=\\d|\\.\\d)\\d*(\\.\\d*)?([Ee]([+-]?\\d+))? *$",
      "exceptionStackTrace": null,
      "matches": [
        " -0.0e-0  ",
        " -0.0e-0",
        " -0.0e-0e-0 ",
        " -0.0 ",
        " -0.0e-00 ",
        " -0.0e- ",
        " -0.0e--0 ",
        " -0.0e0 ",
        " -0.0e+0 ",
        " -0.0a-0 ",
        " -0.0E-0 ",
        " -0.0A-0 ",
        " -0.0.0e-0 ",
        " -0e-0 ",
        " -0.00e-0 ",
        " -0.e-0 ",
        " -00.0e-0 ",
        " -.0e-0 ",
        " --0.0e-0 ",
        " 0.0e-0 ",
        " +0.0e-0 ",
        "  -0.0e-0 ",
        "-0.0e-0 ",
        "",
        " -0.0e-0 "
      ]
    },
    {
      "regex": "darwin|freebsd|openbsd",
      "exceptionStackTrace": null,
      "matches": ["openbsd", "freebsd", "darwin"]
    },
    {
      "regex": "\\\\chapter\\{(.*?)\\}",
      "exceptionStackTrace": null,
      "matches": [
        "\\chapter{}}",
        "\\chapter{{}",
        "\\chapter{\\}",
        "\\chapter{eVil}",
        "\\chapter{EVIL}",
        "\\chapter{ev_il}",
        "\\chapter{ev il}",
        "\\chapter{ev4il}",
        "\\chapter{e}",
        "\\chapter{ }",
        "\\chapter{6}",
        "\\chapter{_}",
        "\\chapter{}",
        "\\chapter{evil}"
      ]
    },
    {
      "regex": "^([+-]?)\\d+(\\.\\d*)?([Ee]([+-]?\\d+))?$",
      "exceptionStackTrace": null,
      "matches": [
        "-0.0e-0e-0",
        "-0.0",
        "-0.0e-00",
        "-0.0e-",
        "-0.0e--0",
        "-0.0e0",
        "-0.0e+0",
        "-0.0a-0",
        "-0.0E-0",
        "-0.0A-0",
        "-0.0.0e-0",
        "-0e-0",
        "-0.00e-0",
        "-0.e-0",
        "-00.0e-0",
        "-.0e-0",
        "--0.0e-0",
        "0.0e-0",
        "+0.0e-0",
        "0",
        "-0.0e-0"
      ]
    },
    {
      "regex": "([a-zA-Z0-9]+)_([AB])",
      "exceptionStackTrace": null,
      "matches": [
        "evil_C",
        "evil_A",
        "eVil_B",
        "EVIL_B",
        "ev_il_B",
        "ev il_B",
        "ev4il_B",
        "e_B",
        " _B",
        "6_B",
        "__B",
        "_B",
        "evil_B"
      ]
    },
    {
      "regex": "you already have Cloud Code",
      "exceptionStackTrace": null,
      "matches": ["you already have Cloud Code"]
    },
    {
      "regex": "!(\\d{4})!",
      "exceptionStackTrace": null,
      "matches": ["!00000!", "!000!", "!0000!"]
    },
    {
      "regex": "\\bfunction ([^(]+)",
      "exceptionStackTrace": null,
      "matches": [
        "function (",
        "function eVil",
        "function EVIL",
        "function ev_il",
        "function ev il",
        "function ev4il",
        "function e",
        "function  ",
        "function 6",
        "function _",
        "function ",
        "function evil"
      ]
    },
    {
      "regex": "POST.*example",
      "exceptionStackTrace": null,
      "matches": [
        "POSTeVilexample",
        "POSTEVILexample",
        "POSTev_ilexample",
        "POSTev ilexample",
        "POSTev4ilexample",
        "POSTeexample",
        "POST example",
        "POST6example",
        "POST_example",
        "POSTexample",
        "POSTevilexample"
      ]
    },
    {
      "regex": "\n      \\Q$fulltag\\E\n    ",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\Q"
      },
      "matches": []
    },
    {
      "regex": "<a href='(.*)' on",
      "exceptionStackTrace": null,
      "matches": [
        "<a href='=' on",
        "<a href='<' on",
        "<a href=''' on",
        "<a href='eVil' on",
        "<a href='EVIL' on",
        "<a href='ev_il' on",
        "<a href='ev il' on",
        "<a href='ev4il' on",
        "<a href='e' on",
        "<a href=' ' on",
        "<a href='6' on",
        "<a href='_' on",
        "<a href='' on",
        "<a href='evil' on"
      ]
    },
    {
      "regex": "(['\"])(\\.?//?)\\*",
      "exceptionStackTrace": null,
      "matches": [
        "\".///*",
        "\"./*",
        "\"..//*",
        "\"//*",
        "'.//*",
        "\"/*",
        "\".//*"
      ]
    },
    {
      "regex": "^JarMain\\.class$",
      "exceptionStackTrace": null,
      "matches": ["JarMain.class"]
    },
    { "regex": "spec", "exceptionStackTrace": null, "matches": ["spec"] },
    {
      "regex": "\\bbabel-loader\\b",
      "exceptionStackTrace": null,
      "matches": ["babel-loader"]
    },
    {
      "regex": "^METHOD .*#inner_test\\(count\\) in file .*test-app-frame.rb at line \\d+",
      "exceptionStackTrace": null,
      "matches": [
        "METHOD evil#inner_test(count) in file eviltest-app-framearb at line 00",
        "METHOD evil#inner_test(count) in file eviltest-app-framearb at line ",
        "METHOD evil#inner_test(count) in file eviltest-app-frame_rb at line 0",
        "METHOD evil#inner_test(count) in file eviltest-app-frameArb at line 0",
        "METHOD evil#inner_test(count) in file eviltest-app-frame0rb at line 0",
        "METHOD evil#inner_test(count) in file eviltest-app-frame-rb at line 0",
        "METHOD evil#inner_test(count) in file eviltest-app-frame)rb at line 0",
        "METHOD evil#inner_test(count) in file eviltest-app-frame(rb at line 0",
        "METHOD evil#inner_test(count) in file eviltest-app-frame#rb at line 0",
        "METHOD evil#inner_test(count) in file eviltest-app-frame rb at line 0",
        "METHOD evil#inner_test(count) in file -test-app-framearb at line 0",
        "METHOD evil#inner_test(count) in file )test-app-framearb at line 0",
        "METHOD evil#inner_test(count) in file (test-app-framearb at line 0",
        "METHOD evil#inner_test(count) in file #test-app-framearb at line 0",
        "METHOD evil#inner_test(count) in file eViltest-app-framearb at line 0",
        "METHOD evil#inner_test(count) in file EVILtest-app-framearb at line 0",
        "METHOD evil#inner_test(count) in file ev_iltest-app-framearb at line 0",
        "METHOD evil#inner_test(count) in file ev iltest-app-framearb at line 0",
        "METHOD evil#inner_test(count) in file ev4iltest-app-framearb at line 0",
        "METHOD evil#inner_test(count) in file etest-app-framearb at line 0",
        "METHOD evil#inner_test(count) in file  test-app-framearb at line 0",
        "METHOD evil#inner_test(count) in file 6test-app-framearb at line 0",
        "METHOD evil#inner_test(count) in file _test-app-framearb at line 0",
        "METHOD evil#inner_test(count) in file test-app-framearb at line 0",
        "METHOD -#inner_test(count) in file eviltest-app-framearb at line 0",
        "METHOD )#inner_test(count) in file eviltest-app-framearb at line 0",
        "METHOD (#inner_test(count) in file eviltest-app-framearb at line 0",
        "METHOD ##inner_test(count) in file eviltest-app-framearb at line 0",
        "METHOD eVil#inner_test(count) in file eviltest-app-framearb at line 0",
        "METHOD EVIL#inner_test(count) in file eviltest-app-framearb at line 0",
        "METHOD ev_il#inner_test(count) in file eviltest-app-framearb at line 0",
        "METHOD ev il#inner_test(count) in file eviltest-app-framearb at line 0",
        "METHOD ev4il#inner_test(count) in file eviltest-app-framearb at line 0",
        "METHOD e#inner_test(count) in file eviltest-app-framearb at line 0",
        "METHOD  #inner_test(count) in file eviltest-app-framearb at line 0",
        "METHOD 6#inner_test(count) in file eviltest-app-framearb at line 0",
        "METHOD _#inner_test(count) in file eviltest-app-framearb at line 0",
        "METHOD #inner_test(count) in file eviltest-app-framearb at line 0",
        "METHOD #inner_test(count) in file test-app-framearb at line 0",
        "METHOD evil#inner_test(count) in file eviltest-app-framearb at line 0"
      ]
    },
    {
      "regex": "^Syntax::Highlight::Perl6::Actions::",
      "exceptionStackTrace": null,
      "matches": ["Syntax::Highlight::Perl6::Actions::"]
    },
    {
      "regex": "^(#time: ).*",
      "exceptionStackTrace": null,
      "matches": [
        "#time: :",
        "#time: #",
        "#time: eVil",
        "#time: EVIL",
        "#time: ev_il",
        "#time: ev il",
        "#time: ev4il",
        "#time: e",
        "#time:  ",
        "#time: 6",
        "#time: _",
        "#time: ",
        "#time: evil"
      ]
    },
    {
      "regex": "^(?:SIGNAL\\b)",
      "exceptionStackTrace": null,
      "matches": ["SIGNAL"]
    },
    {
      "regex": "@[\\w-]+?(?:\\([^{}]+\\)|[^(){};])*?(?=\\s*\\{)",
      "exceptionStackTrace": null,
      "matches": [
        "@evil}",
        "@evil{",
        "@evilA",
        "@evil@",
        "@evil;",
        "@evil0",
        "@evil-",
        "@evil)",
        "@evil(",
        "@evil ",
        "@evil(evil)(evil)",
        "@evil(})",
        "@evil({)",
        "@evil(@)",
        "@evil(;)",
        "@evil(-)",
        "@evil())",
        "@evil(()",
        "@evil(eVil)",
        "@evil(EVIL)",
        "@evil(ev_il)",
        "@evil(ev il)",
        "@evil(ev4il)",
        "@evil(e)",
        "@evil( )",
        "@evil(6)",
        "@evil(_)",
        "@evil()",
        "@}(evil)",
        "@{(evil)",
        "@@(evil)",
        "@;(evil)",
        "@-(evil)",
        "@)(evil)",
        "@((evil)",
        "@eVil(evil)",
        "@EVIL(evil)",
        "@ev_il(evil)",
        "@ev il(evil)",
        "@ev4il(evil)",
        "@e(evil)",
        "@ (evil)",
        "@6(evil)",
        "@_(evil)",
        "@(evil)",
        "@evil",
        "@evila",
        "@evil(evil)"
      ]
    },
    {
      "regex": "^\\/client\\/widget\\/(.+\\.tpl)$",
      "exceptionStackTrace": null,
      "matches": [
        "/client/widget//.tpl",
        "/client/widget/..tpl",
        "/client/widget/eVil.tpl",
        "/client/widget/EVIL.tpl",
        "/client/widget/ev_il.tpl",
        "/client/widget/ev il.tpl",
        "/client/widget/ev4il.tpl",
        "/client/widget/e.tpl",
        "/client/widget/ .tpl",
        "/client/widget/6.tpl",
        "/client/widget/_.tpl",
        "/client/widget/.tpl",
        "/client/widget/evil.tpl"
      ]
    },
    {
      "regex": "^(\\S+) *(.*?)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil eVil",
        "evil EVIL",
        "evil ev_il",
        "evil ev il",
        "evil ev4il",
        "evil e",
        "evil  ",
        "evil 6",
        "evil _",
        "evil ",
        "evil  evil",
        "evilevil",
        "eVil evil",
        "EVIL evil",
        "ev_il evil",
        "ev il evil",
        "ev4il evil",
        "e evil",
        "  evil",
        "6 evil",
        "_ evil",
        " evil",
        "evil",
        "evil evil"
      ]
    },
    {
      "regex": "^a gem dependency on '(.*)'$",
      "exceptionStackTrace": null,
      "matches": [
        "a gem dependency on '''",
        "a gem dependency on 'eVil'",
        "a gem dependency on 'EVIL'",
        "a gem dependency on 'ev_il'",
        "a gem dependency on 'ev il'",
        "a gem dependency on 'ev4il'",
        "a gem dependency on 'e'",
        "a gem dependency on ' '",
        "a gem dependency on '6'",
        "a gem dependency on '_'",
        "a gem dependency on ''",
        "a gem dependency on 'evil'"
      ]
    },
    {
      "regex": "^[a-z_][-a-z0-9_]{0,31}$",
      "exceptionStackTrace": null,
      "matches": [
        "_________________________________",
        "________________________________",
        "_a",
        "_0",
        "_-",
        "a_",
        "_",
        "__"
      ]
    },
    {
      "regex": "^(result|proc_\\w+|proc|arg_\\w+)_size$",
      "exceptionStackTrace": null,
      "matches": [
        "arg_eVil_size",
        "arg_EVIL_size",
        "arg_ev_il_size",
        "arg_ev il_size",
        "arg_ev4il_size",
        "arg_e_size",
        "arg_ _size",
        "arg_6_size",
        "arg___size",
        "arg__size",
        "proc_eVil_size",
        "proc_EVIL_size",
        "proc_ev_il_size",
        "proc_ev il_size",
        "proc_ev4il_size",
        "proc_e_size",
        "proc_ _size",
        "proc_6_size",
        "proc___size",
        "proc__size",
        "arg_evil_size",
        "proc_size",
        "proc_evil_size",
        "result_size"
      ]
    },
    {
      "regex": "(<link.*\\s+href=(?:\"[^\"]*\"|'[^']*')[^<]*>)",
      "exceptionStackTrace": null,
      "matches": [
        "<linkevil href='>'evil>",
        "<linkevil href='='evil>",
        "<linkevil href='<'evil>",
        "<linkevil href='''evil>",
        "<linkevil href='\"'evil>",
        "<linkevil href='eVil'evil>",
        "<linkevil href='EVIL'evil>",
        "<linkevil href='ev_il'evil>",
        "<linkevil href='ev il'evil>",
        "<linkevil href='ev4il'evil>",
        "<linkevil href='e'evil>",
        "<linkevil href=' 'evil>",
        "<linkevil href='6'evil>",
        "<linkevil href='_'evil>",
        "<linkevil href=''evil>",
        "<linkevil href=\"evil\">>",
        "<linkevil href=\"evil\"=>",
        "<linkevil href=\"evil\"<>",
        "<linkevil href=\"evil\"'>",
        "<linkevil href=\"evil\"\">",
        "<linkevil href=\"evil\"eVil>",
        "<linkevil href=\"evil\"EVIL>",
        "<linkevil href=\"evil\"ev_il>",
        "<linkevil href=\"evil\"ev il>",
        "<linkevil href=\"evil\"ev4il>",
        "<linkevil href=\"evil\"e>",
        "<linkevil href=\"evil\" >",
        "<linkevil href=\"evil\"6>",
        "<linkevil href=\"evil\"_>",
        "<linkevil href=\"evil\">",
        "<linkevil href=\">\"evil>",
        "<linkevil href=\"=\"evil>",
        "<linkevil href=\"<\"evil>",
        "<linkevil href=\"'\"evil>",
        "<linkevil href=\"\"\"evil>",
        "<linkevil href=\"eVil\"evil>",
        "<linkevil href=\"EVIL\"evil>",
        "<linkevil href=\"ev_il\"evil>",
        "<linkevil href=\"ev il\"evil>",
        "<linkevil href=\"ev4il\"evil>",
        "<linkevil href=\"e\"evil>",
        "<linkevil href=\" \"evil>",
        "<linkevil href=\"6\"evil>",
        "<linkevil href=\"_\"evil>",
        "<linkevil href=\"\"evil>",
        "<linkevil  href=\"evil\"evil>",
        "<linkevilhref=\"evil\"evil>",
        "<link> href=\"evil\"evil>",
        "<link= href=\"evil\"evil>",
        "<link< href=\"evil\"evil>",
        "<link' href=\"evil\"evil>",
        "<link\" href=\"evil\"evil>",
        "<linkeVil href=\"evil\"evil>",
        "<linkEVIL href=\"evil\"evil>",
        "<linkev_il href=\"evil\"evil>",
        "<linkev il href=\"evil\"evil>",
        "<linkev4il href=\"evil\"evil>",
        "<linke href=\"evil\"evil>",
        "<link  href=\"evil\"evil>",
        "<link6 href=\"evil\"evil>",
        "<link_ href=\"evil\"evil>",
        "<link href=\"evil\"evil>",
        "<link href=''>",
        "<link href=\"\">",
        "<linkevil href='evil'evil>",
        "<linkevil href=\"evil\"evil>"
      ]
    },
    {
      "regex": "^\\Q$substring",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\Q"
      },
      "matches": []
    },
    {
      "regex": "^(\\+?234|0)?[789]\\d{9}$",
      "exceptionStackTrace": null,
      "matches": [
        "+23490000000000",
        "+234900000000",
        "+2348000000000",
        "+2347000000000",
        "+2340000000000",
        "+234+2349000000000",
        "++2349000000000",
        "2349000000000",
        "9000000000",
        "09000000000",
        "+2349000000000"
      ]
    },
    { "regex": "\\\\I", "exceptionStackTrace": null, "matches": ["\\I"] },
    {
      "regex": "^([\\s\\t]*)([\\*\\-\\+]|\\d+\\.)\\s+",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    { "regex": "[\\*\\+]$", "exceptionStackTrace": null, "matches": ["*", "+"] },
    {
      "regex": "^\\$\\{Opt\\s+(\\w+)\\s*([^\\s]+)?\\s*\\}",
      "exceptionStackTrace": null,
      "matches": [
        "${Opt evil evil  }",
        "${Opt evil evil}",
        "${Opt evil evilevil }",
        "${Opt evil } }",
        "${Opt evil { }",
        "${Opt evil $ }",
        "${Opt evil eVil }",
        "${Opt evil EVIL }",
        "${Opt evil ev_il }",
        "${Opt evil ev il }",
        "${Opt evil ev4il }",
        "${Opt evil e }",
        "${Opt evil   }",
        "${Opt evil 6 }",
        "${Opt evil _ }",
        "${Opt evil  }",
        "${Opt evil  evil }",
        "${Opt evilevil }",
        "${Opt eVil evil }",
        "${Opt EVIL evil }",
        "${Opt ev_il evil }",
        "${Opt ev il evil }",
        "${Opt ev4il evil }",
        "${Opt e evil }",
        "${Opt   evil }",
        "${Opt 6 evil }",
        "${Opt _ evil }",
        "${Opt  evil }",
        "${Opt  evil evil }",
        "${Optevil evil }",
        "${Opt evil}",
        "${Opt evil evil }"
      ]
    },
    {
      "regex": "^=\\s*([^\\s\"'>]*(?:[^\\s\"'/>]|\\/(?=\\s)))",
      "exceptionStackTrace": null,
      "matches": [
        "= evilA",
        "= evil>",
        "= evil=",
        "= evil0",
        "= evil'",
        "= evil\"",
        "= evil ",
        "= >a",
        "= =a",
        "= /a",
        "= 'a",
        "= \"a",
        "= eVila",
        "= EVILa",
        "= ev_ila",
        "= ev ila",
        "= ev4ila",
        "= ea",
        "=  a",
        "= 6a",
        "= _a",
        "= a",
        "=  evila",
        "=evila",
        "=/",
        "=a",
        "= evil/",
        "= evila"
      ]
    },
    {
      "regex": "\n    ^PING\\ [^(]+\\((?<resolved>[^)]+)\\).*\n    ^(?<tx>\\d+)\\ packets\\ transmitted,\\s+\n     (?<rx>\\d+)\\ received,\\s+\n     (?<loss>\\d+)%\\ packet\\ loss,\n  ",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<r"
      },
      "matches": []
    },
    {
      "regex": "(?P<k>[^(&|?)]+)(&|$)",
      "exceptionStackTrace": null,
      "matches": [
        "|&",
        "?&",
        ")&",
        "(&",
        "&&",
        "eVil&",
        "EVIL&",
        "ev_il&",
        "ev il&",
        "ev4il&",
        "e&",
        " &",
        "6&",
        "_&",
        "&",
        "evil",
        "evil&"
      ]
    },
    {
      "regex": "\n    http(s)?://(www\\.)?zhanqi.tv\n    /(?P<channel>[^/]+)\n",
      "exceptionStackTrace": null,
      "matches": [
        "\n    https://www.zhanqiatv\n    /:\n",
        "\n    https://www.zhanqiatv\n    //\n",
        "\n    https://www.zhanqiatv\n    /.\n",
        "\n    https://www.zhanqiatv\n    /eVil\n",
        "\n    https://www.zhanqiatv\n    /EVIL\n",
        "\n    https://www.zhanqiatv\n    /ev_il\n",
        "\n    https://www.zhanqiatv\n    /ev il\n",
        "\n    https://www.zhanqiatv\n    /ev4il\n",
        "\n    https://www.zhanqiatv\n    /e\n",
        "\n    https://www.zhanqiatv\n    / \n",
        "\n    https://www.zhanqiatv\n    /6\n",
        "\n    https://www.zhanqiatv\n    /_\n",
        "\n    https://www.zhanqiatv\n    /\n",
        "\n    https://www.zhanqiAtv\n    /evil\n",
        "\n    https://www.zhanqi:tv\n    /evil\n",
        "\n    https://www.zhanqi0tv\n    /evil\n",
        "\n    https://www.zhanqi/tv\n    /evil\n",
        "\n    https://www.zhanqi.tv\n    /evil\n",
        "\n    https://www.zhanqi tv\n    /evil\n",
        "\n    https://www.www.zhanqiatv\n    /evil\n",
        "\n    https://zhanqiatv\n    /evil\n",
        "\n    httpss://www.zhanqiatv\n    /evil\n",
        "\n    http://www.zhanqiatv\n    /evil\n",
        "\n    http://zhanqiatv\n    /evil\n",
        "\n    https://www.zhanqiatv\n    /evil\n"
      ]
    },
    {
      "regex": "^--([a-z\\[][a-z0-9\\]\\-]+)$",
      "exceptionStackTrace": null,
      "matches": [
        "--[]",
        "--[[",
        "--[-",
        "--[eVil",
        "--[EVIL",
        "--[ev_il",
        "--[ev il",
        "--[ev4il",
        "--[e",
        "--[ ",
        "--[6",
        "--[_",
        "--[",
        "--aevil",
        "--[evil"
      ]
    },
    { "regex": "40", "exceptionStackTrace": null, "matches": ["40"] },
    {
      "regex": "^(.*)\\.rb$",
      "exceptionStackTrace": null,
      "matches": [
        "..rb",
        "eVil.rb",
        "EVIL.rb",
        "ev_il.rb",
        "ev il.rb",
        "ev4il.rb",
        "e.rb",
        " .rb",
        "6.rb",
        "_.rb",
        ".rb",
        "evil.rb"
      ]
    },
    {
      "regex": "href=[\"'](https?:\\/\\/sshg-(?:mod|gifts|giftmod)\\.livejournal\\.com\\/\\d+.html)",
      "exceptionStackTrace": null,
      "matches": [
        "href='https://sshg-mod.livejournal.com/0Ahtml",
        "href='https://sshg-mod.livejournal.com/0=html",
        "href='https://sshg-mod.livejournal.com/0:html",
        "href='https://sshg-mod.livejournal.com/00html",
        "href='https://sshg-mod.livejournal.com/0/html",
        "href='https://sshg-mod.livejournal.com/0.html",
        "href='https://sshg-mod.livejournal.com/0-html",
        "href='https://sshg-mod.livejournal.com/0'html",
        "href='https://sshg-mod.livejournal.com/0\"html",
        "href='https://sshg-mod.livejournal.com/0 html",
        "href='https://sshg-mod.livejournal.com/00ahtml",
        "href='https://sshg-mod.livejournal.com/ahtml",
        "href='httpss://sshg-mod.livejournal.com/0ahtml",
        "href=\"https://sshg-mod.livejournal.com/0ahtml",
        "href='http://sshg-giftmod.livejournal.com/0ahtml",
        "href='http://sshg-gifts.livejournal.com/0ahtml",
        "href='http://sshg-mod.livejournal.com/0ahtml",
        "href='https://sshg-giftmod.livejournal.com/0ahtml",
        "href='https://sshg-gifts.livejournal.com/0ahtml",
        "href='https://sshg-mod.livejournal.com/0ahtml"
      ]
    },
    {
      "regex": "[\"']ngInject[\"'];*",
      "exceptionStackTrace": null,
      "matches": [
        "'ngInject';;",
        "'ngInject\";",
        "\"ngInject';",
        "'ngInject'",
        "'ngInject';"
      ]
    },
    {
      "regex": "^empty:((\\d+)?([\\.|,]\\d+)?)(em|px)?$",
      "exceptionStackTrace": null,
      "matches": [
        "empty:0,0emem",
        "empty:0,0",
        "empty:0,0,0em",
        "empty:0em",
        "empty:0,00em",
        "empty:0,em",
        "empty:0|0em",
        "empty:0.0em",
        "empty:00,0em",
        "empty:,0em",
        "empty:",
        "empty:0,0px",
        "empty:0,0em"
      ]
    },
    {
      "regex": "\\n*# Wait for enter on keyboard.*\\ninput().*\\n*",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "[Bb]asic (?P<encoded>\\S+)",
      "exceptionStackTrace": null,
      "matches": [
        "basic eVil",
        "basic EVIL",
        "basic ev_il",
        "basic ev il",
        "basic ev4il",
        "basic e",
        "basic  ",
        "basic 6",
        "basic _",
        "basic ",
        "aasic evil",
        "Basic evil",
        "Aasic evil",
        "basic evil"
      ]
    },
    { "regex": "[->&]", "exceptionStackTrace": null, "matches": [">", "-", "&"] },
    {
      "regex": "\\(table2\\)",
      "exceptionStackTrace": null,
      "matches": ["(table2)"]
    },
    {
      "regex": "([^{]+\\{[^}]+\\})+?",
      "exceptionStackTrace": null,
      "matches": [
        "evil{evil}evil{evil}",
        "",
        "evil{}}",
        "evil{{}",
        "evil{eVil}",
        "evil{EVIL}",
        "evil{ev_il}",
        "evil{ev il}",
        "evil{ev4il}",
        "evil{e}",
        "evil{ }",
        "evil{6}",
        "evil{_}",
        "evil{}",
        "}{evil}",
        "{{evil}",
        "eVil{evil}",
        "EVIL{evil}",
        "ev_il{evil}",
        "ev il{evil}",
        "ev4il{evil}",
        "e{evil}",
        " {evil}",
        "6{evil}",
        "_{evil}",
        "{evil}",
        "evil{evil}"
      ]
    },
    {
      "regex": "@example\\s+([ \\t])?(?<example>.+)?$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<e"
      },
      "matches": []
    },
    {
      "regex": "^>=?",
      "exceptionStackTrace": null,
      "matches": [">==", ">", ">="]
    },
    {
      "regex": "^[>](\\d+)$",
      "exceptionStackTrace": null,
      "matches": [">00", ">", ">0"]
    },
    {
      "regex": "^\\[\\d+\\.\\d+\\] \\d+\\.\\d+> ",
      "exceptionStackTrace": null,
      "matches": [
        "[0.0] 0.00> ",
        "[0.0] 0.> ",
        "[0.0] 00.0> ",
        "[0.0] .0> ",
        "[0.00] 0.0> ",
        "[0.] 0.0> ",
        "[00.0] 0.0> ",
        "[.0] 0.0> ",
        "[0.0] 0.0> "
      ]
    },
    { "regex": "xml only", "exceptionStackTrace": null, "matches": ["xml only"] },
    {
      "regex": "^(.+)\\.(t|j)s$",
      "exceptionStackTrace": null,
      "matches": [
        "..ts",
        "eVil.ts",
        "EVIL.ts",
        "ev_il.ts",
        "ev il.ts",
        "ev4il.ts",
        "e.ts",
        " .ts",
        "6.ts",
        "_.ts",
        ".ts",
        "evil.js",
        "evil.ts"
      ]
    },
    {
      "regex": "^(?:-?GENADR|=MINUS|2BCADR|VN|BOF|MM|-?2CADR|-?[1-6]DNADR|ADRES|BBCON|[ES]?BANK=?|BLOCK|BNKSUM|E?CADR|COUNT\\*?|2?DEC\\*?|-?DNCHAN|-?DNPTR|EQUALS|ERASE|MEMORY|2?OCT|REMADR|SETLOC|SUBRO|ORG|BSS|BES|SYN|EQU|DEFINE|END)\\s",
      "exceptionStackTrace": null,
      "matches": [
        "22OCT ",
        "--DNPTR ",
        "--DNCHAN ",
        "2DEC** ",
        "2DEC ",
        "22DEC* ",
        "DEC* ",
        "COUNT** ",
        "EECADR ",
        "SBANK== ",
        "SBANK ",
        "SSBANK= ",
        "BANK= ",
        "EBANK= ",
        "ABANK= ",
        "-0DNADR ",
        "--1DNADR ",
        "--2CADR ",
        "--GENADR ",
        "OCT ",
        "DNPTR ",
        "DNCHAN ",
        "DEC ",
        "COUNT ",
        "CADR ",
        "BANK ",
        "1DNADR ",
        "2CADR ",
        "GENADR ",
        "END ",
        "DEFINE ",
        "EQU ",
        "SYN ",
        "BES ",
        "BSS ",
        "ORG ",
        "SUBRO ",
        "SETLOC ",
        "REMADR ",
        "2OCT ",
        "MEMORY ",
        "ERASE ",
        "EQUALS ",
        "-DNPTR ",
        "-DNCHAN ",
        "2DEC* ",
        "COUNT* ",
        "ECADR ",
        "BNKSUM ",
        "BLOCK ",
        "SBANK= ",
        "BBCON ",
        "ADRES ",
        "-1DNADR ",
        "-2CADR ",
        "MM ",
        "BOF ",
        "VN ",
        "2BCADR ",
        "=MINUS ",
        "-GENADR "
      ]
    },
    {
      "regex": "Iteration",
      "exceptionStackTrace": null,
      "matches": ["Iteration"]
    },
    {
      "regex": "\\$(\\w+)|\\${(\\w+)}",
      "exceptionStackTrace": null,
      "matches": [
        "${eVil}",
        "${EVIL}",
        "${ev_il}",
        "${ev il}",
        "${ev4il}",
        "${e}",
        "${ }",
        "${6}",
        "${_}",
        "${}",
        "$eVil",
        "$EVIL",
        "$ev_il",
        "$ev il",
        "$ev4il",
        "$e",
        "$ ",
        "$6",
        "$_",
        "$",
        "${evil}",
        "$evil"
      ]
    },
    {
      "regex": "mod\\d+",
      "exceptionStackTrace": null,
      "matches": ["mod00", "mod", "mod0"]
    },
    {
      "regex": "\\A\\s*This is a comment\\.$",
      "exceptionStackTrace": null,
      "matches": [
        "  This is a comment.",
        "This is a comment.",
        " This is a comment."
      ]
    },
    {
      "regex": "^\\s*0*([0-9]+)\\s*$",
      "exceptionStackTrace": null,
      "matches": [" 00  ", " 00", " 000 ", " 0 ", "  00 ", "00 ", "0", " 00 "]
    },
    {
      "regex": "/spreadsheets/d/([a-zA-Z0-9-_]+)",
      "exceptionStackTrace": null,
      "matches": [
        "/spreadsheets/d//",
        "/spreadsheets/d/-",
        "/spreadsheets/d/eVil",
        "/spreadsheets/d/EVIL",
        "/spreadsheets/d/ev_il",
        "/spreadsheets/d/ev il",
        "/spreadsheets/d/ev4il",
        "/spreadsheets/d/e",
        "/spreadsheets/d/ ",
        "/spreadsheets/d/6",
        "/spreadsheets/d/_",
        "/spreadsheets/d/",
        "/spreadsheets/d/evil"
      ]
    },
    {
      "regex": "(.*password[^:]*): (.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "evilpasswordevil: :",
        "evilpasswordevil: eVil",
        "evilpasswordevil: EVIL",
        "evilpasswordevil: ev_il",
        "evilpasswordevil: ev il",
        "evilpasswordevil: ev4il",
        "evilpasswordevil: e",
        "evilpasswordevil:  ",
        "evilpasswordevil: 6",
        "evilpasswordevil: _",
        "evilpasswordevil: ",
        "evilpassword:: evil",
        "evilpasswordeVil: evil",
        "evilpasswordEVIL: evil",
        "evilpasswordev_il: evil",
        "evilpasswordev il: evil",
        "evilpasswordev4il: evil",
        "evilpassworde: evil",
        "evilpassword : evil",
        "evilpassword6: evil",
        "evilpassword_: evil",
        "evilpassword: evil",
        ":passwordevil: evil",
        "eVilpasswordevil: evil",
        "EVILpasswordevil: evil",
        "ev_ilpasswordevil: evil",
        "ev ilpasswordevil: evil",
        "ev4ilpasswordevil: evil",
        "epasswordevil: evil",
        " passwordevil: evil",
        "6passwordevil: evil",
        "_passwordevil: evil",
        "passwordevil: evil",
        "password: ",
        "evilpasswordevil: evil"
      ]
    },
    {
      "regex": "[^ {]+|{.*?}",
      "exceptionStackTrace": null,
      "matches": [
        "{}}",
        "{{}",
        "{eVil}",
        "{EVIL}",
        "{ev_il}",
        "{ev il}",
        "{ev4il}",
        "{e}",
        "{ }",
        "{6}",
        "{_}",
        "}",
        "{",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "{}",
        "{evil}",
        "evil"
      ]
    },
    {
      "regex": "\\/ep(\\d+)",
      "exceptionStackTrace": null,
      "matches": ["/ep00", "/ep", "/ep0"]
    },
    { "regex": "\\<ver", "exceptionStackTrace": null, "matches": ["<ver"] },
    {
      "regex": "\\G\\s*(.*?)((#.*?\\n)|([\\{\\}:;])|([\\$\\%\\@\\(\\['\"\\`])|(<<)|(\\b([ysm]|q[rqxw]?|tr)\\b)|([A-Z]+)|($pod_or_DATA))",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\G"
      },
      "matches": []
    },
    {
      "regex": "^\\s*#\\s*ifndef\\s+_\\w+_H_\\b.*",
      "exceptionStackTrace": null,
      "matches": [
        " # ifndef _evil_H_#",
        " # ifndef _evil_H_eVil",
        " # ifndef _evil_H_EVIL",
        " # ifndef _evil_H_ev_il",
        " # ifndef _evil_H_ev il",
        " # ifndef _evil_H_ev4il",
        " # ifndef _evil_H_e",
        " # ifndef _evil_H_ ",
        " # ifndef _evil_H_6",
        " # ifndef _evil_H__",
        " # ifndef _evil_H_",
        " # ifndef _eVil_H_evil",
        " # ifndef _EVIL_H_evil",
        " # ifndef _ev_il_H_evil",
        " # ifndef _ev il_H_evil",
        " # ifndef _ev4il_H_evil",
        " # ifndef _e_H_evil",
        " # ifndef _ _H_evil",
        " # ifndef _6_H_evil",
        " # ifndef ___H_evil",
        " # ifndef __H_evil",
        " # ifndef  _evil_H_evil",
        " # ifndef_evil_H_evil",
        " #  ifndef _evil_H_evil",
        " #ifndef _evil_H_evil",
        "  # ifndef _evil_H_evil",
        "# ifndef _evil_H_evil",
        "#ifndef _evil_H_",
        " # ifndef _evil_H_evil"
      ]
    },
    {
      "regex": "VERSION\\s*[=:]\\s*([\\'\"])(.*?)\\1",
      "exceptionStackTrace": null,
      "matches": [
        "VERSION : \"=\"",
        "VERSION : \":\"",
        "VERSION : \"'\"",
        "VERSION : \"\"\"",
        "VERSION : \"eVil\"",
        "VERSION : \"EVIL\"",
        "VERSION : \"ev_il\"",
        "VERSION : \"ev il\"",
        "VERSION : \"ev4il\"",
        "VERSION : \"e\"",
        "VERSION : \" \"",
        "VERSION : \"6\"",
        "VERSION : \"_\"",
        "VERSION : \"\"",
        "VERSION : 'evil\"",
        "VERSION :  \"evil\"",
        "VERSION :\"evil\"",
        "VERSION = \"evil\"",
        "VERSION  : \"evil\"",
        "VERSION: \"evil\"",
        "VERSION:\"\"",
        "VERSION : \"evil\""
      ]
    },
    {
      "regex": "[\\+|\\.]",
      "exceptionStackTrace": null,
      "matches": ["|", "+", "."]
    },
    {
      "regex": "^comp(:.*)?$",
      "exceptionStackTrace": null,
      "matches": [
        "comp:evil:evil",
        "comp::",
        "comp:eVil",
        "comp:EVIL",
        "comp:ev_il",
        "comp:ev il",
        "comp:ev4il",
        "comp:e",
        "comp: ",
        "comp:6",
        "comp:_",
        "comp:",
        "comp",
        "comp:evil"
      ]
    },
    {
      "regex": "VBoxManage: error:",
      "exceptionStackTrace": null,
      "matches": ["VBoxManage: error:"]
    },
    {
      "regex": "^[\\ ]{0,3}?[\\t](.*)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    { "regex": "uted$", "exceptionStackTrace": null, "matches": ["uted"] },
    { "regex": "\\#x", "exceptionStackTrace": null, "matches": ["#x"] },
    {
      "regex": "^[0-9a-f]{40} refs/remotes/(?P<git_remote_name>[^/]+)/(?P<git_tag>.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/remotes/evil//",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/remotes/evil/eVil",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/remotes/evil/EVIL",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/remotes/evil/ev_il",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/remotes/evil/ev il",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/remotes/evil/ev4il",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/remotes/evil/e",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/remotes/evil/ ",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/remotes/evil/6",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/remotes/evil/_",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/remotes/evil/",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/remotes///evil",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/remotes/eVil/evil",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/remotes/EVIL/evil",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/remotes/ev_il/evil",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/remotes/ev il/evil",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/remotes/ev4il/evil",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/remotes/e/evil",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/remotes/ /evil",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/remotes/6/evil",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/remotes/_/evil",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/remotes//evil",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/remotes/evil/evil",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/remotes/evil/evil",
        "gaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/remotes/evil/evil",
        "0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/remotes/evil/evil",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/remotes/evil/evil"
      ]
    },
    {
      "regex": "^\\s*\\#\\#\\s*([^\\#]+)",
      "exceptionStackTrace": null,
      "matches": [
        " ## #",
        " ## eVil",
        " ## EVIL",
        " ## ev_il",
        " ## ev il",
        " ## ev4il",
        " ## e",
        " ##  ",
        " ## 6",
        " ## _",
        " ## ",
        " ##  evil",
        " ##evil",
        "  ## evil",
        "## evil",
        "##evil",
        " ## evil"
      ]
    },
    {
      "regex": "^[^\\s.]+\\.[^\\s.]+\\.[^\\s.]+(?:\\s+[^\\s.]+\\.[^\\s.]+\\.[^\\s.]+)*$",
      "exceptionStackTrace": null,
      "matches": [
        "evil.evil.evil evil.evil.evil evil.evil.evil",
        "evil.evil.evil evil.evil..",
        "evil.evil.evil evil.evil.eVil",
        "evil.evil.evil evil.evil.EVIL",
        "evil.evil.evil evil.evil.ev_il",
        "evil.evil.evil evil.evil.ev il",
        "evil.evil.evil evil.evil.ev4il",
        "evil.evil.evil evil.evil.e",
        "evil.evil.evil evil.evil. ",
        "evil.evil.evil evil.evil.6",
        "evil.evil.evil evil.evil._",
        "evil.evil.evil evil.evil.",
        "evil.evil.evil evil...evil",
        "evil.evil.evil evil.eVil.evil",
        "evil.evil.evil evil.EVIL.evil",
        "evil.evil.evil evil.ev_il.evil",
        "evil.evil.evil evil.ev il.evil",
        "evil.evil.evil evil.ev4il.evil",
        "evil.evil.evil evil.e.evil",
        "evil.evil.evil evil. .evil",
        "evil.evil.evil evil.6.evil",
        "evil.evil.evil evil._.evil",
        "evil.evil.evil evil..evil",
        "evil.evil.evil ..evil.evil",
        "evil.evil.evil eVil.evil.evil",
        "evil.evil.evil EVIL.evil.evil",
        "evil.evil.evil ev_il.evil.evil",
        "evil.evil.evil ev il.evil.evil",
        "evil.evil.evil ev4il.evil.evil",
        "evil.evil.evil e.evil.evil",
        "evil.evil.evil  .evil.evil",
        "evil.evil.evil 6.evil.evil",
        "evil.evil.evil _.evil.evil",
        "evil.evil.evil .evil.evil",
        "evil.evil.evil  evil.evil.evil",
        "evil.evil.evilevil.evil.evil",
        "evil.evil.. evil.evil.evil",
        "evil.evil.eVil evil.evil.evil",
        "evil.evil.EVIL evil.evil.evil",
        "evil.evil.ev_il evil.evil.evil",
        "evil.evil.ev il evil.evil.evil",
        "evil.evil.ev4il evil.evil.evil",
        "evil.evil.e evil.evil.evil",
        "evil.evil.  evil.evil.evil",
        "evil.evil.6 evil.evil.evil",
        "evil.evil._ evil.evil.evil",
        "evil.evil. evil.evil.evil",
        "evil...evil evil.evil.evil",
        "evil.eVil.evil evil.evil.evil",
        "evil.EVIL.evil evil.evil.evil",
        "evil.ev_il.evil evil.evil.evil",
        "evil.ev il.evil evil.evil.evil",
        "evil.ev4il.evil evil.evil.evil",
        "evil.e.evil evil.evil.evil",
        "evil. .evil evil.evil.evil",
        "evil.6.evil evil.evil.evil",
        "evil._.evil evil.evil.evil",
        "evil..evil evil.evil.evil",
        "..evil.evil evil.evil.evil",
        "eVil.evil.evil evil.evil.evil",
        "EVIL.evil.evil evil.evil.evil",
        "ev_il.evil.evil evil.evil.evil",
        "ev il.evil.evil evil.evil.evil",
        "ev4il.evil.evil evil.evil.evil",
        "e.evil.evil evil.evil.evil",
        " .evil.evil evil.evil.evil",
        "6.evil.evil evil.evil.evil",
        "_.evil.evil evil.evil.evil",
        ".evil.evil evil.evil.evil",
        "evil.evil.evil",
        "evil.evil.evil evil.evil.evil"
      ]
    },
    {
      "regex": "require\\('(remark-lint-[^']+)'\\)(?:, ([^\\]]+)])?",
      "exceptionStackTrace": null,
      "matches": [
        "require('remark-lint-evil'), evil], evil]",
        "require('remark-lint-evil'), ]]",
        "require('remark-lint-evil'), -]",
        "require('remark-lint-evil'), ,]",
        "require('remark-lint-evil'), )]",
        "require('remark-lint-evil'), (]",
        "require('remark-lint-evil'), ']",
        "require('remark-lint-evil'), eVil]",
        "require('remark-lint-evil'), EVIL]",
        "require('remark-lint-evil'), ev_il]",
        "require('remark-lint-evil'), ev il]",
        "require('remark-lint-evil'), ev4il]",
        "require('remark-lint-evil'), e]",
        "require('remark-lint-evil'),  ]",
        "require('remark-lint-evil'), 6]",
        "require('remark-lint-evil'), _]",
        "require('remark-lint-evil'), ]",
        "require('remark-lint-]'), evil]",
        "require('remark-lint--'), evil]",
        "require('remark-lint-,'), evil]",
        "require('remark-lint-)'), evil]",
        "require('remark-lint-('), evil]",
        "require('remark-lint-''), evil]",
        "require('remark-lint-eVil'), evil]",
        "require('remark-lint-EVIL'), evil]",
        "require('remark-lint-ev_il'), evil]",
        "require('remark-lint-ev il'), evil]",
        "require('remark-lint-ev4il'), evil]",
        "require('remark-lint-e'), evil]",
        "require('remark-lint- '), evil]",
        "require('remark-lint-6'), evil]",
        "require('remark-lint-_'), evil]",
        "require('remark-lint-'), evil]",
        "require('remark-lint-evil')",
        "require('remark-lint-evil'), evil]"
      ]
    },
    {
      "regex": "[\\$&@%:]",
      "exceptionStackTrace": null,
      "matches": ["@", "&", "%", "$", ":"]
    },
    {
      "regex": "^'(.+)' is the first (.+?) of '(.+)'$",
      "exceptionStackTrace": null,
      "matches": [
        "'evil' is the first evil of '''",
        "'evil' is the first evil of 'eVil'",
        "'evil' is the first evil of 'EVIL'",
        "'evil' is the first evil of 'ev_il'",
        "'evil' is the first evil of 'ev il'",
        "'evil' is the first evil of 'ev4il'",
        "'evil' is the first evil of 'e'",
        "'evil' is the first evil of ' '",
        "'evil' is the first evil of '6'",
        "'evil' is the first evil of '_'",
        "'evil' is the first evil of ''",
        "'evil' is the first ' of 'evil'",
        "'evil' is the first eVil of 'evil'",
        "'evil' is the first EVIL of 'evil'",
        "'evil' is the first ev_il of 'evil'",
        "'evil' is the first ev il of 'evil'",
        "'evil' is the first ev4il of 'evil'",
        "'evil' is the first e of 'evil'",
        "'evil' is the first   of 'evil'",
        "'evil' is the first 6 of 'evil'",
        "'evil' is the first _ of 'evil'",
        "'evil' is the first  of 'evil'",
        "''' is the first evil of 'evil'",
        "'eVil' is the first evil of 'evil'",
        "'EVIL' is the first evil of 'evil'",
        "'ev_il' is the first evil of 'evil'",
        "'ev il' is the first evil of 'evil'",
        "'ev4il' is the first evil of 'evil'",
        "'e' is the first evil of 'evil'",
        "' ' is the first evil of 'evil'",
        "'6' is the first evil of 'evil'",
        "'_' is the first evil of 'evil'",
        "'' is the first evil of 'evil'",
        "'evil' is the first evil of 'evil'"
      ]
    },
    {
      "regex": "github.com/([^/]+)/([^/]+)/pull/([0-9]+)(|.diff|.patch)",
      "exceptionStackTrace": null,
      "matches": [
        "githubacom/evil/evil/pull/0Apatch",
        "githubacom/evil/evil/pull/00patch",
        "githubacom/evil/evil/pull/0/patch",
        "githubacom/evil/evil/pull/0 patch",
        "githubacom/evil/evil/pull/0adiffadiff",
        "githubacom/evil/evil/pull/0Adiff",
        "githubacom/evil/evil/pull/00diff",
        "githubacom/evil/evil/pull/0/diff",
        "githubacom/evil/evil/pull/0 diff",
        "githubacom/evil/evil/pull/00adiff",
        "githubacom/evil/evil/pull/adiff",
        "githubacom/evil///pull/0adiff",
        "githubacom/evil/eVil/pull/0adiff",
        "githubacom/evil/EVIL/pull/0adiff",
        "githubacom/evil/ev_il/pull/0adiff",
        "githubacom/evil/ev il/pull/0adiff",
        "githubacom/evil/ev4il/pull/0adiff",
        "githubacom/evil/e/pull/0adiff",
        "githubacom/evil/ /pull/0adiff",
        "githubacom/evil/6/pull/0adiff",
        "githubacom/evil/_/pull/0adiff",
        "githubacom/evil//pull/0adiff",
        "githubacom///evil/pull/0adiff",
        "githubacom/eVil/evil/pull/0adiff",
        "githubacom/EVIL/evil/pull/0adiff",
        "githubacom/ev_il/evil/pull/0adiff",
        "githubacom/ev il/evil/pull/0adiff",
        "githubacom/ev4il/evil/pull/0adiff",
        "githubacom/e/evil/pull/0adiff",
        "githubacom/ /evil/pull/0adiff",
        "githubacom/6/evil/pull/0adiff",
        "githubacom/_/evil/pull/0adiff",
        "githubacom//evil/pull/0adiff",
        "githubAcom/evil/evil/pull/0adiff",
        "github0com/evil/evil/pull/0adiff",
        "github/com/evil/evil/pull/0adiff",
        "github com/evil/evil/pull/0adiff",
        "githubacom/evil/evil/pull/0",
        "githubacom/evil/evil/pull/0apatch",
        "githubacom/evil/evil/pull/0adiff"
      ]
    },
    {
      "regex": "^${this_package}::",
      "exceptionStackTrace": null,
      "matches": ["{this_package}::"]
    },
    {
      "regex": "[+-]\\d+:+\\d+$",
      "exceptionStackTrace": null,
      "matches": ["-0:00", "-0:", "-0::0", "-00", "-00:0", "-:0", "+0:0", "-0:0"]
    },
    { "regex": "^isa", "exceptionStackTrace": null, "matches": ["isa"] },
    {
      "regex": "(^[\\n\\r\\t]*)|([\\n\\r\\t]*$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "\\s*?<!\\[(.+?)\\[(.*?)\\]\\]>\\s*",
      "exceptionStackTrace": null,
      "matches": [
        " <![evil[evil]]>  ",
        " <![evil[evil]]>",
        " <![evil[]]]> ",
        " <![evil[[]]> ",
        " <![evil[>]]> ",
        " <![evil[<]]> ",
        " <![evil[!]]> ",
        " <![evil[eVil]]> ",
        " <![evil[EVIL]]> ",
        " <![evil[ev_il]]> ",
        " <![evil[ev il]]> ",
        " <![evil[ev4il]]> ",
        " <![evil[e]]> ",
        " <![evil[ ]]> ",
        " <![evil[6]]> ",
        " <![evil[_]]> ",
        " <![evil[]]> ",
        " <![][evil]]> ",
        " <![[[evil]]> ",
        " <![>[evil]]> ",
        " <![<[evil]]> ",
        " <![![evil]]> ",
        " <![eVil[evil]]> ",
        " <![EVIL[evil]]> ",
        " <![ev_il[evil]]> ",
        " <![ev il[evil]]> ",
        " <![ev4il[evil]]> ",
        " <![e[evil]]> ",
        " <![ [evil]]> ",
        " <![6[evil]]> ",
        " <![_[evil]]> ",
        " <![[evil]]> ",
        "  <![evil[evil]]> ",
        "<![evil[evil]]> ",
        "<![evil[]]>",
        " <![evil[evil]]> "
      ]
    },
    {
      "regex": "^\\s*(set|delete|rename|insert|activate|deactivate|annotate|copy|protect|unprotect)\\s",
      "exceptionStackTrace": null,
      "matches": [
        "  set ",
        "unprotect ",
        "protect ",
        "copy ",
        "annotate ",
        "deactivate ",
        "activate ",
        "insert ",
        "rename ",
        "delete ",
        "set ",
        " unprotect ",
        " protect ",
        " copy ",
        " annotate ",
        " deactivate ",
        " activate ",
        " insert ",
        " rename ",
        " delete ",
        " set "
      ]
    },
    { "regex": "count", "exceptionStackTrace": null, "matches": ["count"] },
    {
      "regex": "^\\s*(?<_1>BEGIN|END|DESTROY)\\b",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<_"
      },
      "matches": []
    },
    {
      "regex": "<script(?!\\s+data\\-inline\\s*)(.*)>(.*)</script>",
      "exceptionStackTrace": null,
      "matches": [
        "<scriptevil>></script>",
        "<scriptevil><</script>",
        "<scriptevil>/</script>",
        "<scriptevil>-</script>",
        "<scriptevil>eVil</script>",
        "<scriptevil>EVIL</script>",
        "<scriptevil>ev_il</script>",
        "<scriptevil>ev il</script>",
        "<scriptevil>ev4il</script>",
        "<scriptevil>e</script>",
        "<scriptevil> </script>",
        "<scriptevil>6</script>",
        "<scriptevil>_</script>",
        "<scriptevil></script>",
        "<script>>evil</script>",
        "<script<>evil</script>",
        "<script/>evil</script>",
        "<script->evil</script>",
        "<scripteVil>evil</script>",
        "<scriptEVIL>evil</script>",
        "<scriptev_il>evil</script>",
        "<scriptev il>evil</script>",
        "<scriptev4il>evil</script>",
        "<scripte>evil</script>",
        "<script >evil</script>",
        "<script6>evil</script>",
        "<script_>evil</script>",
        "<script>evil</script>",
        "<script></script>",
        "<scriptevil>evil</script>"
      ]
    },
    { "regex": "^31$", "exceptionStackTrace": null, "matches": ["31"] },
    {
      "regex": "^\\^(\\w+)$",
      "exceptionStackTrace": null,
      "matches": [
        "^eVil",
        "^EVIL",
        "^ev_il",
        "^ev il",
        "^ev4il",
        "^e",
        "^ ",
        "^6",
        "^_",
        "^",
        "^evil"
      ]
    },
    {
      "regex": "^(.+)/$",
      "exceptionStackTrace": null,
      "matches": [
        "//",
        "eVil/",
        "EVIL/",
        "ev_il/",
        "ev il/",
        "ev4il/",
        "e/",
        " /",
        "6/",
        "_/",
        "/",
        "evil/"
      ]
    },
    {
      "regex": "^(.+):(\\d+):",
      "exceptionStackTrace": null,
      "matches": [
        "evil:00:",
        "evil::",
        "::0:",
        "eVil:0:",
        "EVIL:0:",
        "ev_il:0:",
        "ev il:0:",
        "ev4il:0:",
        "e:0:",
        " :0:",
        "6:0:",
        "_:0:",
        ":0:",
        "evil:0:"
      ]
    },
    {
      "regex": "(src|href)\\=\"([^\"]+)\"",
      "exceptionStackTrace": null,
      "matches": [
        "src=\"=\"",
        "src=\"\"\"",
        "src=\"eVil\"",
        "src=\"EVIL\"",
        "src=\"ev_il\"",
        "src=\"ev il\"",
        "src=\"ev4il\"",
        "src=\"e\"",
        "src=\" \"",
        "src=\"6\"",
        "src=\"_\"",
        "src=\"\"",
        "href=\"evil\"",
        "src=\"evil\""
      ]
    },
    {
      "regex": "^I choose radio button \"([^\"]*)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "I choose radio button \"\"\"",
        "I choose radio button \"eVil\"",
        "I choose radio button \"EVIL\"",
        "I choose radio button \"ev_il\"",
        "I choose radio button \"ev il\"",
        "I choose radio button \"ev4il\"",
        "I choose radio button \"e\"",
        "I choose radio button \" \"",
        "I choose radio button \"6\"",
        "I choose radio button \"_\"",
        "I choose radio button \"\"",
        "I choose radio button \"evil\""
      ]
    },
    {
      "regex": "^the following disabled user exists:$",
      "exceptionStackTrace": null,
      "matches": ["the following disabled user exists:"]
    },
    {
      "regex": "pin_\\w+\\([\\'\\\"]numpy[\\'\\\"].*((?<=x_pin=[\\'\\\"])[x\\.]*(?=[\\'\\\"]))",
      "exceptionStackTrace": null,
      "matches": [
        "pin_evil(\"numpy\"evil..",
        "pin_evil(\"numpy\"evil",
        "pin_evil(\"numpy\"evilx",
        "pin_evil(\"numpy\"evila",
        "pin_evil(\"numpy\"=.",
        "pin_evil(\"numpy\"..",
        "pin_evil(\"numpy\"(.",
        "pin_evil(\"numpy\"'.",
        "pin_evil(\"numpy\"\".",
        "pin_evil(\"numpy\"eVil.",
        "pin_evil(\"numpy\"EVIL.",
        "pin_evil(\"numpy\"ev_il.",
        "pin_evil(\"numpy\"ev il.",
        "pin_evil(\"numpy\"ev4il.",
        "pin_evil(\"numpy\"e.",
        "pin_evil(\"numpy\" .",
        "pin_evil(\"numpy\"6.",
        "pin_evil(\"numpy\"_.",
        "pin_evil(\"numpy\".",
        "pin_evil(\"numpy'evil.",
        "pin_evil('numpy\"evil.",
        "pin_eVil(\"numpy\"evil.",
        "pin_EVIL(\"numpy\"evil.",
        "pin_ev_il(\"numpy\"evil.",
        "pin_ev il(\"numpy\"evil.",
        "pin_ev4il(\"numpy\"evil.",
        "pin_e(\"numpy\"evil.",
        "pin_ (\"numpy\"evil.",
        "pin_6(\"numpy\"evil.",
        "pin__(\"numpy\"evil.",
        "pin_(\"numpy\"evil.",
        "pin_evil(\"numpy\"",
        "pin_evil(\"numpy\"evil."
      ]
    },
    {
      "regex": "[^0-9a-z_-]",
      "exceptionStackTrace": null,
      "matches": ["a", "_", "0", "-", " ", "A"]
    },
    {
      "regex": "(^\\s*)(?:proc|return|class|error|eval|exit|for|foreach|if|switch|while|break|continue)\\b",
      "exceptionStackTrace": null,
      "matches": [
        "  proc",
        "continue",
        "break",
        "while",
        "switch",
        "if",
        "foreach",
        "for",
        "exit",
        "eval",
        "error",
        "class",
        "return",
        "proc",
        " continue",
        " break",
        " while",
        " switch",
        " if",
        " foreach",
        " for",
        " exit",
        " eval",
        " error",
        " class",
        " return",
        " proc"
      ]
    },
    {
      "regex": "(\\w+):\\s(.*$)",
      "exceptionStackTrace": null,
      "matches": [
        "evil: :",
        "evil: eVil",
        "evil: EVIL",
        "evil: ev_il",
        "evil: ev il",
        "evil: ev4il",
        "evil: e",
        "evil:  ",
        "evil: 6",
        "evil: _",
        "eVil: evil",
        "EVIL: evil",
        "ev_il: evil",
        "ev il: evil",
        "ev4il: evil",
        "e: evil",
        " : evil",
        "6: evil",
        "_: evil",
        ": evil",
        "evil: ",
        "evil: evil"
      ]
    },
    {
      "regex": "VALID TIME ([0-9]{6})Z - ([0-9]{6})Z",
      "exceptionStackTrace": null,
      "matches": [
        "VALID TIME 000000Z - 0000000Z",
        "VALID TIME 000000Z - 00000Z",
        "VALID TIME 0000000Z - 000000Z",
        "VALID TIME 00000Z - 000000Z",
        "VALID TIME 000000Z - 000000Z"
      ]
    },
    {
      "regex": "(?<=\\d) $alias $",
      "exceptionStackTrace": null,
      "matches": [" alias "]
    },
    {
      "regex": "\\Ay(?:es)?|no?|no comment\\Z",
      "exceptionStackTrace": null,
      "matches": ["noo", "yeses", "n", "y", "no comment", "no", "yes"]
    },
    {
      "regex": "\\.methods$",
      "exceptionStackTrace": null,
      "matches": [".methods"]
    },
    {
      "regex": "syslog already open",
      "exceptionStackTrace": null,
      "matches": ["syslog already open"]
    },
    {
      "regex": "stylesheet_link_tag\\s+['\"]bukkits\\/application['\"]",
      "exceptionStackTrace": null,
      "matches": [
        "stylesheet_link_tag \"bukkits/application'",
        "stylesheet_link_tag 'bukkits/application\"",
        "stylesheet_link_tag  \"bukkits/application\"",
        "stylesheet_link_tag\"bukkits/application\"",
        "stylesheet_link_tag \"bukkits/application\""
      ]
    },
    {
      "regex": "^SyslogScan::SendmailLine",
      "exceptionStackTrace": null,
      "matches": ["SyslogScan::SendmailLine"]
    },
    {
      "regex": "^.*Bytes$",
      "exceptionStackTrace": null,
      "matches": [
        "eVilBytes",
        "EVILBytes",
        "ev_ilBytes",
        "ev ilBytes",
        "ev4ilBytes",
        "eBytes",
        " Bytes",
        "6Bytes",
        "_Bytes",
        "Bytes",
        "evilBytes"
      ]
    },
    {
      "regex": "^.*spec/spec_helper.*\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "TeamName: (.*)",
      "exceptionStackTrace": null,
      "matches": [
        "TeamName: :",
        "TeamName: eVil",
        "TeamName: EVIL",
        "TeamName: ev_il",
        "TeamName: ev il",
        "TeamName: ev4il",
        "TeamName: e",
        "TeamName:  ",
        "TeamName: 6",
        "TeamName: _",
        "TeamName: ",
        "TeamName: evil"
      ]
    },
    {
      "regex": "^\\s*(https?|ftp|mailto|tel|webcal|local|file|data|blob):",
      "exceptionStackTrace": null,
      "matches": [
        " httpss:",
        " http:",
        "  https:",
        "https:",
        "blob:",
        "data:",
        "file:",
        "local:",
        "webcal:",
        "tel:",
        "mailto:",
        "ftp:",
        "http:",
        " blob:",
        " data:",
        " file:",
        " local:",
        " webcal:",
        " tel:",
        " mailto:",
        " ftp:",
        " https:"
      ]
    },
    {
      "regex": "\"rules\" must be an array",
      "exceptionStackTrace": null,
      "matches": ["\"rules\" must be an array"]
    },
    {
      "regex": "^image\\/(gif|png|jpeg|svg\\+xml)$",
      "exceptionStackTrace": null,
      "matches": ["image/svg+xml", "image/jpeg", "image/png", "image/gif"]
    },
    {
      "regex": "\\.template",
      "exceptionStackTrace": null,
      "matches": [".template"]
    },
    {
      "regex": "^<(\\S+)>\\s+<(\\S+)>$",
      "exceptionStackTrace": null,
      "matches": [
        "<evil> <>>",
        "<evil> <<>",
        "<evil> <eVil>",
        "<evil> <EVIL>",
        "<evil> <ev_il>",
        "<evil> <ev il>",
        "<evil> <ev4il>",
        "<evil> <e>",
        "<evil> < >",
        "<evil> <6>",
        "<evil> <_>",
        "<evil> <>",
        "<evil>  <evil>",
        "<evil><evil>",
        "<>> <evil>",
        "<<> <evil>",
        "<eVil> <evil>",
        "<EVIL> <evil>",
        "<ev_il> <evil>",
        "<ev il> <evil>",
        "<ev4il> <evil>",
        "<e> <evil>",
        "< > <evil>",
        "<6> <evil>",
        "<_> <evil>",
        "<> <evil>",
        "<evil> <evil>"
      ]
    },
    {
      "regex": "Opera[\\/ ]([.0-9]+)",
      "exceptionStackTrace": null,
      "matches": ["Opera ..", "Opera ", "Opera 0", "Opera/.", "Opera ."]
    },
    {
      "regex": "(\\w+)\\.sevenload\\.\\S{2,}\\/(shows|sendungen|yayinlar|emissions|trasmissione|audycje)?\\/(\\S+)\\/(episodes|folgen|bolumler|puntate)?\\/(\\w+)[\\/]?([\\S]+)",
      "exceptionStackTrace": null,
      "matches": [
        "evil.sevenload.aa/shows/evil/episodes/evil//",
        "evil.sevenload.aa/shows/evil/episodes/evil/.",
        "evil.sevenload.aa/shows/evil/episodes/evil/eVil",
        "evil.sevenload.aa/shows/evil/episodes/evil/EVIL",
        "evil.sevenload.aa/shows/evil/episodes/evil/ev_il",
        "evil.sevenload.aa/shows/evil/episodes/evil/ev il",
        "evil.sevenload.aa/shows/evil/episodes/evil/ev4il",
        "evil.sevenload.aa/shows/evil/episodes/evil/e",
        "evil.sevenload.aa/shows/evil/episodes/evil/ ",
        "evil.sevenload.aa/shows/evil/episodes/evil/6",
        "evil.sevenload.aa/shows/evil/episodes/evil/_",
        "evil.sevenload.aa/shows/evil/episodes/evil/",
        "evil.sevenload.aa/shows/evil/episodes/evil//evil",
        "evil.sevenload.aa/shows/evil/episodes/evilevil",
        "evil.sevenload.aa/shows/evil/episodes/eVil/evil",
        "evil.sevenload.aa/shows/evil/episodes/EVIL/evil",
        "evil.sevenload.aa/shows/evil/episodes/ev_il/evil",
        "evil.sevenload.aa/shows/evil/episodes/ev il/evil",
        "evil.sevenload.aa/shows/evil/episodes/ev4il/evil",
        "evil.sevenload.aa/shows/evil/episodes/e/evil",
        "evil.sevenload.aa/shows/evil/episodes/ /evil",
        "evil.sevenload.aa/shows/evil/episodes/6/evil",
        "evil.sevenload.aa/shows/evil/episodes/_/evil",
        "evil.sevenload.aa/shows/evil/episodes//evil",
        "evil.sevenload.aa/shows/evil/episodesepisodes/evil/evil",
        "evil.sevenload.aa/shows/evil//evil/evil",
        "evil.sevenload.aa/shows///episodes/evil/evil",
        "evil.sevenload.aa/shows/./episodes/evil/evil",
        "evil.sevenload.aa/shows/eVil/episodes/evil/evil",
        "evil.sevenload.aa/shows/EVIL/episodes/evil/evil",
        "evil.sevenload.aa/shows/ev_il/episodes/evil/evil",
        "evil.sevenload.aa/shows/ev il/episodes/evil/evil",
        "evil.sevenload.aa/shows/ev4il/episodes/evil/evil",
        "evil.sevenload.aa/shows/e/episodes/evil/evil",
        "evil.sevenload.aa/shows/ /episodes/evil/evil",
        "evil.sevenload.aa/shows/6/episodes/evil/evil",
        "evil.sevenload.aa/shows/_/episodes/evil/evil",
        "evil.sevenload.aa/shows//episodes/evil/evil",
        "evil.sevenload.aa/showsshows/evil/episodes/evil/evil",
        "evil.sevenload.aa//evil/episodes/evil/evil",
        "evil.sevenload.a/shows/evil/episodes/evil/evil",
        "evil.sevenload._a/shows/evil/episodes/evil/evil",
        "evil.sevenload.Aa/shows/evil/episodes/evil/evil",
        "evil.sevenload.0a/shows/evil/episodes/evil/evil",
        "evil.sevenload./a/shows/evil/episodes/evil/evil",
        "evil.sevenload..a/shows/evil/episodes/evil/evil",
        "evil.sevenload. a/shows/evil/episodes/evil/evil",
        "eVil.sevenload.aa/shows/evil/episodes/evil/evil",
        "EVIL.sevenload.aa/shows/evil/episodes/evil/evil",
        "ev_il.sevenload.aa/shows/evil/episodes/evil/evil",
        "ev il.sevenload.aa/shows/evil/episodes/evil/evil",
        "ev4il.sevenload.aa/shows/evil/episodes/evil/evil",
        "e.sevenload.aa/shows/evil/episodes/evil/evil",
        " .sevenload.aa/shows/evil/episodes/evil/evil",
        "6.sevenload.aa/shows/evil/episodes/evil/evil",
        "_.sevenload.aa/shows/evil/episodes/evil/evil",
        ".sevenload.aa/shows/evil/episodes/evil/evil",
        "evil.sevenload.aa//evil//evilevil",
        "evil.sevenload.aa/audycje/evil/episodes/evil/evil",
        "evil.sevenload.aa/trasmissione/evil/episodes/evil/evil",
        "evil.sevenload.aa/emissions/evil/episodes/evil/evil",
        "evil.sevenload.aa/yayinlar/evil/episodes/evil/evil",
        "evil.sevenload.aa/sendungen/evil/episodes/evil/evil",
        "evil.sevenload.aa/shows/evil/puntate/evil/evil",
        "evil.sevenload.aa/shows/evil/bolumler/evil/evil",
        "evil.sevenload.aa/shows/evil/folgen/evil/evil",
        "evil.sevenload.aa/shows/evil/episodes/evil/evil"
      ]
    },
    {
      "regex": "^(\\s*\\-)(.*?)$",
      "exceptionStackTrace": null,
      "matches": [
        " --",
        " -eVil",
        " -EVIL",
        " -ev_il",
        " -ev il",
        " -ev4il",
        " -e",
        " - ",
        " -6",
        " -_",
        " -",
        "  -evil",
        "-evil",
        "-",
        " -evil"
      ]
    },
    {
      "regex": "([^\\s]*\\|[^\\s]*)",
      "exceptionStackTrace": null,
      "matches": [
        "evil||",
        "evil|eVil",
        "evil|EVIL",
        "evil|ev_il",
        "evil|ev il",
        "evil|ev4il",
        "evil|e",
        "evil| ",
        "evil|6",
        "evil|_",
        "evil|",
        "||evil",
        "eVil|evil",
        "EVIL|evil",
        "ev_il|evil",
        "ev il|evil",
        "ev4il|evil",
        "e|evil",
        " |evil",
        "6|evil",
        "_|evil",
        "|evil",
        "|",
        "evil|evil"
      ]
    },
    {
      "regex": "Version\\/(\\d+)\\.\\d+",
      "exceptionStackTrace": null,
      "matches": [
        "Version/0.00",
        "Version/0.",
        "Version/00.0",
        "Version/.0",
        "Version/0.0"
      ]
    },
    {
      "regex": "ccflags='?-m32",
      "exceptionStackTrace": null,
      "matches": ["ccflags=''-m32", "ccflags=-m32", "ccflags='-m32"]
    },
    {
      "regex": "<tr><td valign=top>\\s*(\\d+)\\.</td><td valign=top> ([^<]*)</td><td><b>([^>]+)</b>",
      "exceptionStackTrace": null,
      "matches": [
        "<tr><td valign=top> 0.</td><td valign=top> evil</td><td><b>></b>",
        "<tr><td valign=top> 0.</td><td valign=top> evil</td><td><b>=</b>",
        "<tr><td valign=top> 0.</td><td valign=top> evil</td><td><b><</b>",
        "<tr><td valign=top> 0.</td><td valign=top> evil</td><td><b>/</b>",
        "<tr><td valign=top> 0.</td><td valign=top> evil</td><td><b>.</b>",
        "<tr><td valign=top> 0.</td><td valign=top> evil</td><td><b>eVil</b>",
        "<tr><td valign=top> 0.</td><td valign=top> evil</td><td><b>EVIL</b>",
        "<tr><td valign=top> 0.</td><td valign=top> evil</td><td><b>ev_il</b>",
        "<tr><td valign=top> 0.</td><td valign=top> evil</td><td><b>ev il</b>",
        "<tr><td valign=top> 0.</td><td valign=top> evil</td><td><b>ev4il</b>",
        "<tr><td valign=top> 0.</td><td valign=top> evil</td><td><b>e</b>",
        "<tr><td valign=top> 0.</td><td valign=top> evil</td><td><b> </b>",
        "<tr><td valign=top> 0.</td><td valign=top> evil</td><td><b>6</b>",
        "<tr><td valign=top> 0.</td><td valign=top> evil</td><td><b>_</b>",
        "<tr><td valign=top> 0.</td><td valign=top> evil</td><td><b></b>",
        "<tr><td valign=top> 0.</td><td valign=top> ></td><td><b>evil</b>",
        "<tr><td valign=top> 0.</td><td valign=top> =</td><td><b>evil</b>",
        "<tr><td valign=top> 0.</td><td valign=top> <</td><td><b>evil</b>",
        "<tr><td valign=top> 0.</td><td valign=top> /</td><td><b>evil</b>",
        "<tr><td valign=top> 0.</td><td valign=top> .</td><td><b>evil</b>",
        "<tr><td valign=top> 0.</td><td valign=top> eVil</td><td><b>evil</b>",
        "<tr><td valign=top> 0.</td><td valign=top> EVIL</td><td><b>evil</b>",
        "<tr><td valign=top> 0.</td><td valign=top> ev_il</td><td><b>evil</b>",
        "<tr><td valign=top> 0.</td><td valign=top> ev il</td><td><b>evil</b>",
        "<tr><td valign=top> 0.</td><td valign=top> ev4il</td><td><b>evil</b>",
        "<tr><td valign=top> 0.</td><td valign=top> e</td><td><b>evil</b>",
        "<tr><td valign=top> 0.</td><td valign=top>  </td><td><b>evil</b>",
        "<tr><td valign=top> 0.</td><td valign=top> 6</td><td><b>evil</b>",
        "<tr><td valign=top> 0.</td><td valign=top> _</td><td><b>evil</b>",
        "<tr><td valign=top> 0.</td><td valign=top> </td><td><b>evil</b>",
        "<tr><td valign=top> 00.</td><td valign=top> evil</td><td><b>evil</b>",
        "<tr><td valign=top> .</td><td valign=top> evil</td><td><b>evil</b>",
        "<tr><td valign=top>  0.</td><td valign=top> evil</td><td><b>evil</b>",
        "<tr><td valign=top>0.</td><td valign=top> evil</td><td><b>evil</b>",
        "<tr><td valign=top>0.</td><td valign=top> </td><td><b>evil</b>",
        "<tr><td valign=top> 0.</td><td valign=top> evil</td><td><b>evil</b>"
      ]
    },
    {
      "regex": "^(.+)(?:\\.|::)(.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil.:",
        "evil..",
        "evil.eVil",
        "evil.EVIL",
        "evil.ev_il",
        "evil.ev il",
        "evil.ev4il",
        "evil.e",
        "evil. ",
        "evil.6",
        "evil._",
        "evil.",
        ":.evil",
        "..evil",
        "eVil.evil",
        "EVIL.evil",
        "ev_il.evil",
        "ev il.evil",
        "ev4il.evil",
        "e.evil",
        " .evil",
        "6.evil",
        "_.evil",
        ".evil",
        "evil::evil",
        "evil.evil"
      ]
    },
    {
      "regex": " style=\"[^\"]*\"([^>]*) replaced(style=\"[^\"]*\")",
      "exceptionStackTrace": null,
      "matches": [
        " style=\"evil\"evil replacedstyle=\">\"",
        " style=\"evil\"evil replacedstyle=\"=\"",
        " style=\"evil\"evil replacedstyle=\"\"\"",
        " style=\"evil\"evil replacedstyle=\"eVil\"",
        " style=\"evil\"evil replacedstyle=\"EVIL\"",
        " style=\"evil\"evil replacedstyle=\"ev_il\"",
        " style=\"evil\"evil replacedstyle=\"ev il\"",
        " style=\"evil\"evil replacedstyle=\"ev4il\"",
        " style=\"evil\"evil replacedstyle=\"e\"",
        " style=\"evil\"evil replacedstyle=\" \"",
        " style=\"evil\"evil replacedstyle=\"6\"",
        " style=\"evil\"evil replacedstyle=\"_\"",
        " style=\"evil\"evil replacedstyle=\"\"",
        " style=\"evil\"> replacedstyle=\"evil\"",
        " style=\"evil\"= replacedstyle=\"evil\"",
        " style=\"evil\"\" replacedstyle=\"evil\"",
        " style=\"evil\"eVil replacedstyle=\"evil\"",
        " style=\"evil\"EVIL replacedstyle=\"evil\"",
        " style=\"evil\"ev_il replacedstyle=\"evil\"",
        " style=\"evil\"ev il replacedstyle=\"evil\"",
        " style=\"evil\"ev4il replacedstyle=\"evil\"",
        " style=\"evil\"e replacedstyle=\"evil\"",
        " style=\"evil\"  replacedstyle=\"evil\"",
        " style=\"evil\"6 replacedstyle=\"evil\"",
        " style=\"evil\"_ replacedstyle=\"evil\"",
        " style=\"evil\" replacedstyle=\"evil\"",
        " style=\">\"evil replacedstyle=\"evil\"",
        " style=\"=\"evil replacedstyle=\"evil\"",
        " style=\"\"\"evil replacedstyle=\"evil\"",
        " style=\"eVil\"evil replacedstyle=\"evil\"",
        " style=\"EVIL\"evil replacedstyle=\"evil\"",
        " style=\"ev_il\"evil replacedstyle=\"evil\"",
        " style=\"ev il\"evil replacedstyle=\"evil\"",
        " style=\"ev4il\"evil replacedstyle=\"evil\"",
        " style=\"e\"evil replacedstyle=\"evil\"",
        " style=\" \"evil replacedstyle=\"evil\"",
        " style=\"6\"evil replacedstyle=\"evil\"",
        " style=\"_\"evil replacedstyle=\"evil\"",
        " style=\"\"evil replacedstyle=\"evil\"",
        " style=\"\" replacedstyle=\"\"",
        " style=\"evil\"evil replacedstyle=\"evil\""
      ]
    },
    { "regex": "0\\b", "exceptionStackTrace": null, "matches": ["0"] },
    {
      "regex": "^ \\s* \\( \\s* ",
      "exceptionStackTrace": null,
      "matches": ["   (    ", "   (  ", "    (   ", "  (   ", "  (  ", "   (   "]
    },
    {
      "regex": "[,;:()]",
      "exceptionStackTrace": null,
      "matches": [";", ":", ",", "(", ")"]
    },
    {
      "regex": "^/([-a-z0-9]+)/?(?:\\?log_lines=([0-9]+))?$",
      "exceptionStackTrace": null,
      "matches": [
        "/evil/?log_lines=0?log_lines=0",
        "/evil/",
        "/evil/?log_lines=00",
        "/evil/?log_lines=",
        "/evil//?log_lines=0",
        "/evil?log_lines=0",
        "/?/?log_lines=0",
        "/=/?log_lines=0",
        "///?log_lines=0",
        "/-/?log_lines=0",
        "/eVil/?log_lines=0",
        "/EVIL/?log_lines=0",
        "/ev_il/?log_lines=0",
        "/ev il/?log_lines=0",
        "/ev4il/?log_lines=0",
        "/e/?log_lines=0",
        "/ /?log_lines=0",
        "/6/?log_lines=0",
        "/_/?log_lines=0",
        "//?log_lines=0",
        "/evil",
        "/evil/?log_lines=0"
      ]
    },
    {
      "regex": "override_proof=([^&]*)&",
      "exceptionStackTrace": null,
      "matches": [
        "override_proof==&",
        "override_proof=&&",
        "override_proof=eVil&",
        "override_proof=EVIL&",
        "override_proof=ev_il&",
        "override_proof=ev il&",
        "override_proof=ev4il&",
        "override_proof=e&",
        "override_proof= &",
        "override_proof=6&",
        "override_proof=_&",
        "override_proof=&",
        "override_proof=evil&"
      ]
    },
    { "regex": "\\{\\$\\}", "exceptionStackTrace": null, "matches": ["{$}"] },
    {
      "regex": "^1|yes|true$",
      "exceptionStackTrace": null,
      "matches": ["true", "yes", "1"]
    },
    {
      "regex": "(?P<start>.?)@(?P<user>[A-Za-z0-9_]+)(?P<end>.?)",
      "exceptionStackTrace": null,
      "matches": [
        "a@evilaa",
        "a@evil",
        "a@evil_",
        "a@evilA",
        "a@evil@",
        "a@evil0",
        "a@evil ",
        "a@@a",
        "a@eVila",
        "a@EVILa",
        "a@ev_ila",
        "a@ev ila",
        "a@ev4ila",
        "a@ea",
        "a@ a",
        "a@6a",
        "a@_a",
        "a@a",
        "aa@evila",
        "@evila",
        "_@evila",
        "A@evila",
        "@@evila",
        "0@evila",
        " @evila",
        "@evil",
        "a@evila"
      ]
    },
    {
      "regex": "\\A(.*)smell$",
      "exceptionStackTrace": null,
      "matches": [
        "eVilsmell",
        "EVILsmell",
        "ev_ilsmell",
        "ev ilsmell",
        "ev4ilsmell",
        "esmell",
        " smell",
        "6smell",
        "_smell",
        "smell",
        "evilsmell"
      ]
    },
    {
      "regex": "^\u064a\u0646",
      "exceptionStackTrace": null,
      "matches": ["\u064a\u0646"]
    },
    {
      "regex": "Path must begin with \\\"\\/\\\": foo",
      "exceptionStackTrace": null,
      "matches": ["Path must begin with \"/\": foo"]
    },
    {
      "regex": "(&|%5C?)\\d+",
      "exceptionStackTrace": null,
      "matches": ["%5CC0", "&00", "&", "%50", "%5C0", "&0"]
    },
    {
      "regex": "^I have configured databases for 'default', 'production', 'development', and 'test' environments$",
      "exceptionStackTrace": null,
      "matches": [
        "I have configured databases for 'default', 'production', 'development', and 'test' environments"
      ]
    },
    {
      "regex": "expected given block to yield control at most 3 times",
      "exceptionStackTrace": null,
      "matches": ["expected given block to yield control at most 3 times"]
    },
    {
      "regex": "^# (?:tapper[_-])?mandatory[_-]fields:\\s*(.+)",
      "exceptionStackTrace": null,
      "matches": [
        "# tapper-mandatory-fields: :",
        "# tapper-mandatory-fields: -",
        "# tapper-mandatory-fields: #",
        "# tapper-mandatory-fields: eVil",
        "# tapper-mandatory-fields: EVIL",
        "# tapper-mandatory-fields: ev_il",
        "# tapper-mandatory-fields: ev il",
        "# tapper-mandatory-fields: ev4il",
        "# tapper-mandatory-fields: e",
        "# tapper-mandatory-fields:  ",
        "# tapper-mandatory-fields: 6",
        "# tapper-mandatory-fields: _",
        "# tapper-mandatory-fields: ",
        "# tapper-mandatory-fields:  evil",
        "# tapper-mandatory-fields:evil",
        "# tapper-mandatory_fields: evil",
        "# tapper-tapper-mandatory-fields: evil",
        "# mandatory-fields: evil",
        "# tapper_mandatory-fields: evil",
        "# mandatory-fields:evil",
        "# tapper-mandatory-fields: evil"
      ]
    },
    {
      "regex": "\\{ej_invalid,exact,<<\\\"([^\\\"]*)\\\">>,<<\\\"([^\\\"]*)\\\">>,string,string,<<\\\"([^\\\"]*)\\\">>\\}",
      "exceptionStackTrace": null,
      "matches": [
        "{ej_invalid,exact,<<\"evil\">>,<<\"evil\">>,string,string,<<\"}\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\"evil\">>,string,string,<<\"{\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\"evil\">>,string,string,<<\">\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\"evil\">>,string,string,<<\"<\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\"evil\">>,string,string,<<\",\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\"evil\">>,string,string,<<\"\"\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\"evil\">>,string,string,<<\"eVil\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\"evil\">>,string,string,<<\"EVIL\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\"evil\">>,string,string,<<\"ev_il\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\"evil\">>,string,string,<<\"ev il\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\"evil\">>,string,string,<<\"ev4il\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\"evil\">>,string,string,<<\"e\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\"evil\">>,string,string,<<\" \">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\"evil\">>,string,string,<<\"6\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\"evil\">>,string,string,<<\"_\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\"evil\">>,string,string,<<\"\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\"}\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\"{\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\">\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\"<\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\",\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\"\"\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\"eVil\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\"EVIL\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\"ev_il\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\"ev il\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\"ev4il\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\"e\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\" \">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\"6\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\"_\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\"\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\"}\">>,<<\"evil\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\"{\">>,<<\"evil\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\">\">>,<<\"evil\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\"<\">>,<<\"evil\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\",\">>,<<\"evil\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\"\"\">>,<<\"evil\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\"eVil\">>,<<\"evil\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\"EVIL\">>,<<\"evil\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\"ev_il\">>,<<\"evil\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\"ev il\">>,<<\"evil\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\"ev4il\">>,<<\"evil\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\"e\">>,<<\"evil\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\" \">>,<<\"evil\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\"6\">>,<<\"evil\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\"_\">>,<<\"evil\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\"\">>,<<\"evil\">>,string,string,<<\"evil\">>}",
        "{ej_invalid,exact,<<\"\">>,<<\"\">>,string,string,<<\"\">>}",
        "{ej_invalid,exact,<<\"evil\">>,<<\"evil\">>,string,string,<<\"evil\">>}"
      ]
    },
    {
      "regex": ".*({.*)",
      "exceptionStackTrace": null,
      "matches": [
        "evil{{",
        "evil{eVil",
        "evil{EVIL",
        "evil{ev_il",
        "evil{ev il",
        "evil{ev4il",
        "evil{e",
        "evil{ ",
        "evil{6",
        "evil{_",
        "evil{",
        "{{evil",
        "eVil{evil",
        "EVIL{evil",
        "ev_il{evil",
        "ev il{evil",
        "ev4il{evil",
        "e{evil",
        " {evil",
        "6{evil",
        "_{evil",
        "{evil",
        "{",
        "evil{evil"
      ]
    },
    { "regex": "^\\*\\/$", "exceptionStackTrace": null, "matches": ["*/"] },
    {
      "regex": "^region-(.*?)\\.(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "region-evil..",
        "region-evil.-",
        "region-evil.eVil",
        "region-evil.EVIL",
        "region-evil.ev_il",
        "region-evil.ev il",
        "region-evil.ev4il",
        "region-evil.e",
        "region-evil. ",
        "region-evil.6",
        "region-evil._",
        "region-evil.",
        "region-..evil",
        "region--.evil",
        "region-eVil.evil",
        "region-EVIL.evil",
        "region-ev_il.evil",
        "region-ev il.evil",
        "region-ev4il.evil",
        "region-e.evil",
        "region- .evil",
        "region-6.evil",
        "region-_.evil",
        "region-.evil",
        "region-.",
        "region-evil.evil"
      ]
    },
    {
      "regex": "[+*&%\\/=<>!?.|^@-]",
      "exceptionStackTrace": null,
      "matches": [
        "|",
        "^",
        "@",
        "?",
        ">",
        "=",
        "<",
        "/",
        ".",
        "+",
        "*",
        "&",
        "%",
        "!",
        "-"
      ]
    },
    {
      "regex": "\\ABE0[0-9]{9}\\Z",
      "exceptionStackTrace": null,
      "matches": ["BE00000000000", "BE000000000", "BE0000000000"]
    },
    {
      "regex": "^# InnoDB_trx_id: (?P<trxId>[A-F0-9]+) *$",
      "exceptionStackTrace": null,
      "matches": [
        "# InnoDB_trx_id: 0  ",
        "# InnoDB_trx_id: 00 ",
        "# InnoDB_trx_id:  ",
        "# InnoDB_trx_id: G ",
        "# InnoDB_trx_id: A ",
        "# InnoDB_trx_id: 0",
        "# InnoDB_trx_id: 0 "
      ]
    },
    {
      "regex": "'(?:[^\\'\\\\\\n\\r]|",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "missing ), unterminated subpattern"
      },
      "matches": []
    },
    {
      "regex": "\\{\\$[a-zA-Z]+ .+\\}",
      "exceptionStackTrace": null,
      "matches": [
        "{$evil }}",
        "{$evil {}",
        "{$evil $}",
        "{$evil eVil}",
        "{$evil EVIL}",
        "{$evil ev_il}",
        "{$evil ev il}",
        "{$evil ev4il}",
        "{$evil e}",
        "{$evil  }",
        "{$evil 6}",
        "{$evil _}",
        "{$evil }",
        "{$eVil evil}",
        "{$EVIL evil}",
        "{$ev_il evil}",
        "{$ev il evil}",
        "{$ev4il evil}",
        "{$e evil}",
        "{$  evil}",
        "{$6 evil}",
        "{$_ evil}",
        "{$ evil}",
        "{$evil evil}"
      ]
    },
    {
      "regex": "\\?.*?(#|$)",
      "exceptionStackTrace": null,
      "matches": [
        "??#",
        "?##",
        "?eVil#",
        "?EVIL#",
        "?ev_il#",
        "?ev il#",
        "?ev4il#",
        "?e#",
        "? #",
        "?6#",
        "?_#",
        "?",
        "?#",
        "?evil",
        "?evil#"
      ]
    },
    { "regex": "HOGE", "exceptionStackTrace": null, "matches": ["HOGE"] },
    {
      "regex": "^([a-zA-Z0-9\\-\\.\\_\\~]|\\%[0-9a-fA-F]{2}|[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\@])+$",
      "exceptionStackTrace": null,
      "matches": [
        "=",
        ";",
        ",",
        "+",
        "*",
        ")",
        "(",
        "'",
        "&",
        "$",
        "!",
        "%AAA",
        "%A",
        "%gA",
        "%aA",
        "%GA",
        "%0A",
        "~~",
        "",
        "a",
        "_",
        "A",
        "0",
        ".",
        "-",
        "@",
        "%AA",
        "~"
      ]
    },
    {
      "regex": "^/instances/([-0-9]+)/start$",
      "exceptionStackTrace": null,
      "matches": [
        "/instances/--/start",
        "/instances//start",
        "/instances/0/start",
        "/instances/-/start"
      ]
    },
    {
      "regex": "data: second line",
      "exceptionStackTrace": null,
      "matches": ["data: second line"]
    },
    {
      "regex": "HEIGHT\\s*=\\s*\"([^\"]+)\"",
      "exceptionStackTrace": null,
      "matches": [
        "HEIGHT = \"=\"",
        "HEIGHT = \"\"\"",
        "HEIGHT = \"eVil\"",
        "HEIGHT = \"EVIL\"",
        "HEIGHT = \"ev_il\"",
        "HEIGHT = \"ev il\"",
        "HEIGHT = \"ev4il\"",
        "HEIGHT = \"e\"",
        "HEIGHT = \" \"",
        "HEIGHT = \"6\"",
        "HEIGHT = \"_\"",
        "HEIGHT = \"\"",
        "HEIGHT =  \"evil\"",
        "HEIGHT =\"evil\"",
        "HEIGHT  = \"evil\"",
        "HEIGHT= \"evil\"",
        "HEIGHT=\"evil\"",
        "HEIGHT = \"evil\""
      ]
    },
    {
      "regex": "^([^\\/]+)\\/",
      "exceptionStackTrace": null,
      "matches": [
        "//",
        "eVil/",
        "EVIL/",
        "ev_il/",
        "ev il/",
        "ev4il/",
        "e/",
        " /",
        "6/",
        "_/",
        "/",
        "evil/"
      ]
    },
    {
      "regex": "^[a-zA-Z]([a-zA-Z0-9_]*)$",
      "exceptionStackTrace": null,
      "matches": [
        "AeVil",
        "AEVIL",
        "Aev_il",
        "Aev il",
        "Aev4il",
        "Ae",
        "A ",
        "A6",
        "A_",
        "aevil",
        "A",
        "Aevil"
      ]
    },
    {
      "regex": "wp-content/plugins/recent\\-backups/download\\-file\\.php",
      "exceptionStackTrace": null,
      "matches": ["wp-content/plugins/recent-backups/download-file.php"]
    },
    {
      "regex": "[\\f]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\f"
      },
      "matches": []
    },
    {
      "regex": "^\\s*#drawbuffers\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        " #drawbuffers  ",
        " #drawbuffers",
        "  #drawbuffers ",
        "#drawbuffers ",
        "#drawbuffers",
        " #drawbuffers "
      ]
    },
    {
      "regex": "([\\Q+-&|!(){}[]^\"~*?:\\\\\\E])",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\Q"
      },
      "matches": []
    },
    { "regex": "tablet", "exceptionStackTrace": null, "matches": ["tablet"] },
    { "regex": "^=> ", "exceptionStackTrace": null, "matches": ["=> "] },
    {
      "regex": "^((area)|(base)|(button)|(title)|(div)|(style)|(head)|(meta)|(body)|(span)|(link)|(dl))$",
      "exceptionStackTrace": null,
      "matches": [
        "dl",
        "link",
        "span",
        "body",
        "meta",
        "head",
        "style",
        "div",
        "title",
        "button",
        "base",
        "area"
      ]
    },
    {
      "regex": "puppetdev.localdomain",
      "exceptionStackTrace": null,
      "matches": [
        "puppetdev_localdomain",
        "puppetdevAlocaldomain",
        "puppetdev0localdomain",
        "puppetdev localdomain",
        "puppetdevalocaldomain"
      ]
    },
    {
      "regex": "Unable to cast to int",
      "exceptionStackTrace": null,
      "matches": ["Unable to cast to int"]
    },
    {
      "regex": "^Ignoring relationship",
      "exceptionStackTrace": null,
      "matches": ["Ignoring relationship"]
    },
    {
      "regex": "^(MIDP-2.0)",
      "exceptionStackTrace": null,
      "matches": ["MIDP-2A0", "MIDP-200", "MIDP-2-0", "MIDP-2 0", "MIDP-2a0"]
    },
    {
      "regex": "after\\s+[\"'](\\w+)\\b",
      "exceptionStackTrace": null,
      "matches": [
        "after 'eVil",
        "after 'EVIL",
        "after 'ev_il",
        "after 'ev il",
        "after 'ev4il",
        "after 'e",
        "after ' ",
        "after '6",
        "after '_",
        "after '",
        "after \"evil",
        "after  'evil",
        "after'evil",
        "after 'evil"
      ]
    },
    {
      "regex": "(Clownfish::CFC::Perl::Build'\\s*=>\\s*)(.*?),",
      "exceptionStackTrace": null,
      "matches": [
        "Clownfish::CFC::Perl::Build' => >,",
        "Clownfish::CFC::Perl::Build' => =,",
        "Clownfish::CFC::Perl::Build' => :,",
        "Clownfish::CFC::Perl::Build' => ,,",
        "Clownfish::CFC::Perl::Build' => ',",
        "Clownfish::CFC::Perl::Build' => eVil,",
        "Clownfish::CFC::Perl::Build' => EVIL,",
        "Clownfish::CFC::Perl::Build' => ev_il,",
        "Clownfish::CFC::Perl::Build' => ev il,",
        "Clownfish::CFC::Perl::Build' => ev4il,",
        "Clownfish::CFC::Perl::Build' => e,",
        "Clownfish::CFC::Perl::Build' =>  ,",
        "Clownfish::CFC::Perl::Build' => 6,",
        "Clownfish::CFC::Perl::Build' => _,",
        "Clownfish::CFC::Perl::Build' => ,",
        "Clownfish::CFC::Perl::Build' =>  evil,",
        "Clownfish::CFC::Perl::Build' =>evil,",
        "Clownfish::CFC::Perl::Build'  => evil,",
        "Clownfish::CFC::Perl::Build'=> evil,",
        "Clownfish::CFC::Perl::Build'=>,",
        "Clownfish::CFC::Perl::Build' => evil,"
      ]
    },
    {
      "regex": "\\\\ElsevierGlyph\\{E259\\}",
      "exceptionStackTrace": null,
      "matches": ["\\ElsevierGlyph{E259}"]
    },
    {
      "regex": "(^\\+886|\\D)",
      "exceptionStackTrace": null,
      "matches": ["_", "A", "0", "+", " ", "a", "+886"]
    },
    { "regex": "^do", "exceptionStackTrace": null, "matches": ["do"] },
    {
      "regex": "(First textfield Edit|Type in text\\.)$",
      "exceptionStackTrace": null,
      "matches": ["Type in text.", "First textfield Edit"]
    },
    {
      "regex": "([+-]?\\d+\\.?\\d*)",
      "exceptionStackTrace": null,
      "matches": [
        "-0.00",
        "-0.",
        "-0..0",
        "-00",
        "-00.0",
        "-.0",
        "--0.0",
        "0.0",
        "+0.0",
        "0",
        "-0.0"
      ]
    },
    {
      "regex": "^(OBJECTID|FID|OID|ID)$",
      "exceptionStackTrace": null,
      "matches": ["ID", "OID", "FID", "OBJECTID"]
    },
    {
      "regex": "msats.prod.nemnet.net.au\\/msats\\/ws\\/C4\\/ER",
      "exceptionStackTrace": null,
      "matches": [
        "msatsaprodanemnetanetAau/msats/ws/C4/ER",
        "msatsaprodanemnetanet0au/msats/ws/C4/ER",
        "msatsaprodanemnetanet/au/msats/ws/C4/ER",
        "msatsaprodanemnetanet au/msats/ws/C4/ER",
        "msatsaprodanemnetAnetaau/msats/ws/C4/ER",
        "msatsaprodanemnet0netaau/msats/ws/C4/ER",
        "msatsaprodanemnet/netaau/msats/ws/C4/ER",
        "msatsaprodanemnet netaau/msats/ws/C4/ER",
        "msatsaprodAnemnetanetaau/msats/ws/C4/ER",
        "msatsaprod0nemnetanetaau/msats/ws/C4/ER",
        "msatsaprod/nemnetanetaau/msats/ws/C4/ER",
        "msatsaprod nemnetanetaau/msats/ws/C4/ER",
        "msatsAprodanemnetanetaau/msats/ws/C4/ER",
        "msats0prodanemnetanetaau/msats/ws/C4/ER",
        "msats/prodanemnetanetaau/msats/ws/C4/ER",
        "msats prodanemnetanetaau/msats/ws/C4/ER",
        "msatsaprodanemnetanetaau/msats/ws/C4/ER"
      ]
    },
    {
      "regex": "import '.+\\.css';",
      "exceptionStackTrace": null,
      "matches": [
        "import ';.css';",
        "import '..css';",
        "import ''.css';",
        "import 'eVil.css';",
        "import 'EVIL.css';",
        "import 'ev_il.css';",
        "import 'ev il.css';",
        "import 'ev4il.css';",
        "import 'e.css';",
        "import ' .css';",
        "import '6.css';",
        "import '_.css';",
        "import '.css';",
        "import 'evil.css';"
      ]
    },
    { "regex": "my_id", "exceptionStackTrace": null, "matches": ["my_id"] },
    {
      "regex": "\\A(\\d{4})-(\\d{2})\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "[\\x80-\\x83]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 128"
      },
      "matches": []
    },
    {
      "regex": "^\\-?\\d+(\\.\\d+)?",
      "exceptionStackTrace": null,
      "matches": [
        "-0.0.0",
        "-0",
        "-0.00",
        "-0.",
        "-00.0",
        "-.0",
        "--0.0",
        "0.0",
        "0",
        "-0.0"
      ]
    },
    {
      "regex": "(self|oldSelf|newSelf)\\.update",
      "exceptionStackTrace": null,
      "matches": ["newSelf.update", "oldSelf.update", "self.update"]
    },
    {
      "regex": "\\bPages\\s+(free|active|inactive|speculative|wired\\s+down):\\s*(\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "Pages wired  down: 0",
        "Pages wireddown: 0",
        "Pages free: 00",
        "Pages free: ",
        "Pages free:  0",
        "Pages  free: 0",
        "Pagesfree: 0",
        "Pages wired down:0",
        "Pages speculative:0",
        "Pages inactive:0",
        "Pages active:0",
        "Pages free:0",
        "Pages wired down: 0",
        "Pages speculative: 0",
        "Pages inactive: 0",
        "Pages active: 0",
        "Pages free: 0"
      ]
    },
    {
      "regex": "^J2SDK=(.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "J2SDK==",
        "J2SDK=eVil",
        "J2SDK=EVIL",
        "J2SDK=ev_il",
        "J2SDK=ev il",
        "J2SDK=ev4il",
        "J2SDK=e",
        "J2SDK= ",
        "J2SDK=6",
        "J2SDK=_",
        "J2SDK=",
        "J2SDK=evil"
      ]
    },
    {
      "regex": "emit\\(\\[doc\\['time'\\], doc\\['state'\\]\\]",
      "exceptionStackTrace": null,
      "matches": ["emit([doc['time'], doc['state']]"]
    },
    {
      "regex": "\\b(-?)([^-_a-zA-Z0-9\\s]+)",
      "exceptionStackTrace": null,
      "matches": [
        "--",
        "-eVil",
        "-EVIL",
        "-ev_il",
        "-ev il",
        "-ev4il",
        "-e",
        "- ",
        "-6",
        "-_",
        "-",
        "--evil",
        "evil",
        "-evil"
      ]
    },
    { "regex": "\\+13\\+", "exceptionStackTrace": null, "matches": ["+13+"] },
    {
      "regex": "^${index}sub",
      "exceptionStackTrace": null,
      "matches": ["{index}sub"]
    },
    { "regex": "n\\.d\\.$", "exceptionStackTrace": null, "matches": ["n.d."] },
    {
      "regex": "[esfdl]",
      "exceptionStackTrace": null,
      "matches": ["s", "f", "e", "d", "a", "l"]
    },
    { "regex": "^sprite", "exceptionStackTrace": null, "matches": ["sprite"] },
    {
      "regex": "^[^\\(]+\\((.+)\\)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil())",
        "evil(()",
        "evil(eVil)",
        "evil(EVIL)",
        "evil(ev_il)",
        "evil(ev il)",
        "evil(ev4il)",
        "evil(e)",
        "evil( )",
        "evil(6)",
        "evil(_)",
        "evil()",
        ")(evil)",
        "((evil)",
        "eVil(evil)",
        "EVIL(evil)",
        "ev_il(evil)",
        "ev il(evil)",
        "ev4il(evil)",
        "e(evil)",
        " (evil)",
        "6(evil)",
        "_(evil)",
        "(evil)",
        "evil(evil)"
      ]
    },
    {
      "regex": "^\\(.+\\)",
      "exceptionStackTrace": null,
      "matches": [
        "())",
        "(()",
        "(eVil)",
        "(EVIL)",
        "(ev_il)",
        "(ev il)",
        "(ev4il)",
        "(e)",
        "( )",
        "(6)",
        "(_)",
        "()",
        "(evil)"
      ]
    },
    {
      "regex": "(u8|u|U|L)?\"",
      "exceptionStackTrace": null,
      "matches": ["u8u8\"", "\"", "L\"", "U\"", "u\"", "u8\""]
    },
    {
      "regex": "sybase|tds",
      "exceptionStackTrace": null,
      "matches": ["tds", "sybase"]
    },
    {
      "regex": "^I run inside my Rails project \"([^\"]*)\" with enviroment \"([^\"]*)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "I run inside my Rails project \"evil\" with enviroment \"\"\"",
        "I run inside my Rails project \"evil\" with enviroment \"eVil\"",
        "I run inside my Rails project \"evil\" with enviroment \"EVIL\"",
        "I run inside my Rails project \"evil\" with enviroment \"ev_il\"",
        "I run inside my Rails project \"evil\" with enviroment \"ev il\"",
        "I run inside my Rails project \"evil\" with enviroment \"ev4il\"",
        "I run inside my Rails project \"evil\" with enviroment \"e\"",
        "I run inside my Rails project \"evil\" with enviroment \" \"",
        "I run inside my Rails project \"evil\" with enviroment \"6\"",
        "I run inside my Rails project \"evil\" with enviroment \"_\"",
        "I run inside my Rails project \"evil\" with enviroment \"\"",
        "I run inside my Rails project \"\"\" with enviroment \"evil\"",
        "I run inside my Rails project \"eVil\" with enviroment \"evil\"",
        "I run inside my Rails project \"EVIL\" with enviroment \"evil\"",
        "I run inside my Rails project \"ev_il\" with enviroment \"evil\"",
        "I run inside my Rails project \"ev il\" with enviroment \"evil\"",
        "I run inside my Rails project \"ev4il\" with enviroment \"evil\"",
        "I run inside my Rails project \"e\" with enviroment \"evil\"",
        "I run inside my Rails project \" \" with enviroment \"evil\"",
        "I run inside my Rails project \"6\" with enviroment \"evil\"",
        "I run inside my Rails project \"_\" with enviroment \"evil\"",
        "I run inside my Rails project \"\" with enviroment \"evil\"",
        "I run inside my Rails project \"\" with enviroment \"\"",
        "I run inside my Rails project \"evil\" with enviroment \"evil\""
      ]
    },
    {
      "regex": "RESIDUE AA STRUCTURE",
      "exceptionStackTrace": null,
      "matches": ["RESIDUE AA STRUCTURE"]
    },
    { "regex": "\\\\AB", "exceptionStackTrace": null, "matches": ["\\AB"] },
    {
      "regex": "^(MT)([1-9]\\d{7})$",
      "exceptionStackTrace": null,
      "matches": ["MT100000000", "MT1000000", "MT00000000", "MT10000000"]
    },
    { "regex": "meeting", "exceptionStackTrace": null, "matches": ["meeting"] },
    {
      "regex": "\\d+\\.?\\d+,\\d+\\.?\\d+",
      "exceptionStackTrace": null,
      "matches": [
        "0.0,0.00",
        "0.0,0.",
        "0.0,0..0",
        "0.0,00",
        "0.0,00.0",
        "0.0,.0",
        "0.00,0.0",
        "0.,0.0",
        "0..0,0.0",
        "00,0.0",
        "00.0,0.0",
        ".0,0.0",
        "00,00",
        "0.0,0.0"
      ]
    },
    {
      "regex": "^(?:204|3\\d\\d)$",
      "exceptionStackTrace": null,
      "matches": ["300", "204"]
    },
    {
      "regex": "(\\/|\\\\)js$",
      "exceptionStackTrace": null,
      "matches": ["\\js", "/js"]
    },
    {
      "regex": "^\\!(\\w+):?",
      "exceptionStackTrace": null,
      "matches": [
        "!evil::",
        "!eVil:",
        "!EVIL:",
        "!ev_il:",
        "!ev il:",
        "!ev4il:",
        "!e:",
        "! :",
        "!6:",
        "!_:",
        "!:",
        "!evil",
        "!evil:"
      ]
    },
    { "regex": "^(1|mm)$", "exceptionStackTrace": null, "matches": ["mm", "1"] },
    {
      "regex": "entity_id\":\"(\\d+)\"",
      "exceptionStackTrace": null,
      "matches": ["entity_id\":\"00\"", "entity_id\":\"\"", "entity_id\":\"0\""]
    },
    {
      "regex": "^https?:\\/\\/(?:www\\.)?",
      "exceptionStackTrace": null,
      "matches": [
        "https://www.www.",
        "https://",
        "httpss://www.",
        "http://www.",
        "http://",
        "https://www."
      ]
    },
    {
      "regex": "^\\s*<(.+)>;\\s*rel=\"(\\w+)\"$",
      "exceptionStackTrace": null,
      "matches": [
        " <evil>; rel=\"eVil\"",
        " <evil>; rel=\"EVIL\"",
        " <evil>; rel=\"ev_il\"",
        " <evil>; rel=\"ev il\"",
        " <evil>; rel=\"ev4il\"",
        " <evil>; rel=\"e\"",
        " <evil>; rel=\" \"",
        " <evil>; rel=\"6\"",
        " <evil>; rel=\"_\"",
        " <evil>; rel=\"\"",
        " <evil>;  rel=\"evil\"",
        " <evil>;rel=\"evil\"",
        " <>>; rel=\"evil\"",
        " <=>; rel=\"evil\"",
        " <<>; rel=\"evil\"",
        " <;>; rel=\"evil\"",
        " <\">; rel=\"evil\"",
        " <eVil>; rel=\"evil\"",
        " <EVIL>; rel=\"evil\"",
        " <ev_il>; rel=\"evil\"",
        " <ev il>; rel=\"evil\"",
        " <ev4il>; rel=\"evil\"",
        " <e>; rel=\"evil\"",
        " < >; rel=\"evil\"",
        " <6>; rel=\"evil\"",
        " <_>; rel=\"evil\"",
        " <>; rel=\"evil\"",
        "  <evil>; rel=\"evil\"",
        "<evil>; rel=\"evil\"",
        "<evil>;rel=\"evil\"",
        " <evil>; rel=\"evil\""
      ]
    },
    {
      "regex": "^I describe load balancers with the load balancer name$",
      "exceptionStackTrace": null,
      "matches": ["I describe load balancers with the load balancer name"]
    },
    {
      "regex": "^(\u2266|<=|=<)",
      "exceptionStackTrace": null,
      "matches": ["=<", "<=", "\u2266"]
    },
    {
      "regex": "(?:^|\\.)(ok *\\d*)\\b",
      "exceptionStackTrace": null,
      "matches": ["ok 00", "ok ", "ok  0", "ok0", ".ok", "ok", ".ok 0", "ok 0"]
    },
    {
      "regex": "(?<width:\\s*>)(\\d+)(?=px)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<w"
      },
      "matches": []
    },
    {
      "regex": "^(?<prefix>[+-]?)(?<numeric_part>\\d{3,}\\.\\d{1})(?<suffix>%)$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<p"
      },
      "matches": []
    },
    {
      "regex": "^<[a-z]+:",
      "exceptionStackTrace": null,
      "matches": [
        "<eVil:",
        "<EVIL:",
        "<ev_il:",
        "<ev il:",
        "<ev4il:",
        "<e:",
        "< :",
        "<6:",
        "<_:",
        "<:",
        "<evil:"
      ]
    },
    {
      "regex": "(.*)bilion\u00e9simos",
      "exceptionStackTrace": null,
      "matches": [
        "eVilbilion\u00e9simos",
        "EVILbilion\u00e9simos",
        "ev_ilbilion\u00e9simos",
        "ev ilbilion\u00e9simos",
        "ev4ilbilion\u00e9simos",
        "ebilion\u00e9simos",
        " bilion\u00e9simos",
        "6bilion\u00e9simos",
        "_bilion\u00e9simos",
        "bilion\u00e9simos",
        "evilbilion\u00e9simos"
      ]
    },
    {
      "regex": "^(?:Kb|Ms|Gp)",
      "exceptionStackTrace": null,
      "matches": ["Gp", "Ms", "Kb"]
    },
    {
      "regex": "^(?:(\\d+) days? ?)?(?:(\\d+):(\\d+):(\\d+(?:\\.\\d+)?))?$",
      "exceptionStackTrace": null,
      "matches": [
        "0 days 0:0:0.00:0:0.0",
        "0 days ",
        "0 days 0:0:0.0.0",
        "0 days 0:0:0",
        "0 days 0:0:0.00",
        "0 days 0:0:0.",
        "0 days 0:0:00.0",
        "0 days 0:0:.0",
        "0 days 0:00:0.0",
        "0 days 0::0.0",
        "0 days 00:0:0.0",
        "0 days :0:0.0",
        "0 days 0 days 0:0:0.0",
        "0:0:0.0",
        "0 days  0:0:0.0",
        "0 days0:0:0.0",
        "0 dayss 0:0:0.0",
        "0 day 0:0:0.0",
        "00 days 0:0:0.0",
        " days 0:0:0.0",
        "",
        "0 days 0:0:0.0"
      ]
    },
    {
      "regex": "\\Q$target\\E",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\Q"
      },
      "matches": []
    },
    {
      "regex": "\u0431\u0430\u043d\u043a",
      "exceptionStackTrace": null,
      "matches": ["\u0431\u0430\u043d\u043a"]
    },
    {
      "regex": "Missing identifier",
      "exceptionStackTrace": null,
      "matches": ["Missing identifier"]
    },
    {
      "regex": "^(\\p{InCJKUnifiedIdeographs}+)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\p"
      },
      "matches": []
    },
    {
      "regex": "<area shape=\"rect\".*<img src=\"data:image/png",
      "exceptionStackTrace": null,
      "matches": [
        "<area shape=\"rect\"=<img src=\"data:image/png",
        "<area shape=\"rect\"<<img src=\"data:image/png",
        "<area shape=\"rect\":<img src=\"data:image/png",
        "<area shape=\"rect\"/<img src=\"data:image/png",
        "<area shape=\"rect\"\"<img src=\"data:image/png",
        "<area shape=\"rect\"eVil<img src=\"data:image/png",
        "<area shape=\"rect\"EVIL<img src=\"data:image/png",
        "<area shape=\"rect\"ev_il<img src=\"data:image/png",
        "<area shape=\"rect\"ev il<img src=\"data:image/png",
        "<area shape=\"rect\"ev4il<img src=\"data:image/png",
        "<area shape=\"rect\"e<img src=\"data:image/png",
        "<area shape=\"rect\" <img src=\"data:image/png",
        "<area shape=\"rect\"6<img src=\"data:image/png",
        "<area shape=\"rect\"_<img src=\"data:image/png",
        "<area shape=\"rect\"<img src=\"data:image/png",
        "<area shape=\"rect\"evil<img src=\"data:image/png"
      ]
    },
    {
      "regex": "->object_module\\(([\"\\'])(.+?)\\1",
      "exceptionStackTrace": null,
      "matches": [
        "->object_module('>'",
        "->object_module('-'",
        "->object_module('('",
        "->object_module('''",
        "->object_module('\"'",
        "->object_module('eVil'",
        "->object_module('EVIL'",
        "->object_module('ev_il'",
        "->object_module('ev il'",
        "->object_module('ev4il'",
        "->object_module('e'",
        "->object_module(' '",
        "->object_module('6'",
        "->object_module('_'",
        "->object_module(''",
        "->object_module(\"evil'",
        "->object_module('evil'"
      ]
    },
    { "regex": "^a_", "exceptionStackTrace": null, "matches": ["a_"] },
    {
      "regex": "(,|^)CoreLoginEmailSignup(,|$)",
      "exceptionStackTrace": null,
      "matches": [
        "CoreLoginEmailSignup,",
        ",CoreLoginEmailSignup",
        ",CoreLoginEmailSignup,"
      ]
    },
    { "regex": "\\)\\)\\)$", "exceptionStackTrace": null, "matches": [")))"] },
    {
      "regex": "^[^\\/]*$",
      "exceptionStackTrace": null,
      "matches": [
        "/",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "(iPad|iPhone|iPod).*OS 7_\\d",
      "exceptionStackTrace": null,
      "matches": [
        "iPadeVilOS 7_0",
        "iPadEVILOS 7_0",
        "iPadev_ilOS 7_0",
        "iPadev ilOS 7_0",
        "iPadev4ilOS 7_0",
        "iPadeOS 7_0",
        "iPad OS 7_0",
        "iPad6OS 7_0",
        "iPad_OS 7_0",
        "iPodOS 7_0",
        "iPhoneOS 7_0",
        "iPadOS 7_0",
        "iPodevilOS 7_0",
        "iPhoneevilOS 7_0",
        "iPadevilOS 7_0"
      ]
    },
    {
      "regex": "\\bwho\\s+are\\b",
      "exceptionStackTrace": null,
      "matches": ["who  are", "whoare", "who are"]
    },
    {
      "regex": "(?:&quot;)|(?:&apos;)",
      "exceptionStackTrace": null,
      "matches": ["&apos;", "&quot;"]
    },
    {
      "regex": "\\\\k\\{U\\}",
      "exceptionStackTrace": null,
      "matches": ["\\k{U}"]
    },
    {
      "regex": "\\nCreated: 2000-12-20T14:15:16Z\\nUpdated: ",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "layout :xyzlayout",
      "exceptionStackTrace": null,
      "matches": ["layout :xyzlayout"]
    },
    {
      "regex": "^(\\w+) .*$",
      "exceptionStackTrace": null,
      "matches": [
        "evil eVil",
        "evil EVIL",
        "evil ev_il",
        "evil ev il",
        "evil ev4il",
        "evil e",
        "evil  ",
        "evil 6",
        "evil _",
        "eVil evil",
        "EVIL evil",
        "ev_il evil",
        "ev il evil",
        "ev4il evil",
        "e evil",
        "  evil",
        "6 evil",
        "_ evil",
        " evil",
        "evil ",
        "evil evil"
      ]
    },
    { "regex": "(?=['\\\\])", "exceptionStackTrace": null, "matches": [""] },
    {
      "regex": "callback must be a function",
      "exceptionStackTrace": null,
      "matches": ["callback must be a function"]
    },
    {
      "regex": "Failed to publish",
      "exceptionStackTrace": null,
      "matches": ["Failed to publish"]
    },
    {
      "regex": "^([-+#])?\\s*",
      "exceptionStackTrace": null,
      "matches": ["#  ", "#", "## ", " ", "- ", "+ ", "", "# "]
    },
    {
      "regex": "computerized assignment from \"(?P<trigger>[^\"]+)\"",
      "exceptionStackTrace": null,
      "matches": [
        "computerized assignment from \"\"\"",
        "computerized assignment from \"eVil\"",
        "computerized assignment from \"EVIL\"",
        "computerized assignment from \"ev_il\"",
        "computerized assignment from \"ev il\"",
        "computerized assignment from \"ev4il\"",
        "computerized assignment from \"e\"",
        "computerized assignment from \" \"",
        "computerized assignment from \"6\"",
        "computerized assignment from \"_\"",
        "computerized assignment from \"\"",
        "computerized assignment from \"evil\""
      ]
    },
    {
      "regex": "#\\/path\\/second\\?q=hi$",
      "exceptionStackTrace": null,
      "matches": ["#/path/second?q=hi"]
    },
    {
      "regex": "<B><Z>(?:<[^>]*>)*<N pl=\"y\" gnt=\"n\" gnd=\"m\".>(?:<[^>]*>)*<\\/Z>([^<]+)<\\/B>",
      "exceptionStackTrace": null,
      "matches": [
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z>></B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z>=</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z><</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z>/</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z>\"</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z>eVil</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z>EVIL</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z>ev_il</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z>ev il</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z>ev4il</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z>e</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z> </B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z>6</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z>_</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z></B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil><evil></Z>evil</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a></Z>evil</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><>></Z>evil</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><=></Z>evil</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><<></Z>evil</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a></></Z>evil</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><\"></Z>evil</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><eVil></Z>evil</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><EVIL></Z>evil</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><ev_il></Z>evil</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><ev il></Z>evil</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><ev4il></Z>evil</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><e></Z>evil</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a>< ></Z>evil</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><6></Z>evil</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><_></Z>evil</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><></Z>evil</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"A><evil></Z>evil</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\">><evil></Z>evil</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"=><evil></Z>evil</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"<><evil></Z>evil</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"0><evil></Z>evil</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"/><evil></Z>evil</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"\"><evil></Z>evil</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\" ><evil></Z>evil</B>",
        "<B><Z><evil><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z>evil</B>",
        "<B><Z><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z>evil</B>",
        "<B><Z><>><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z>evil</B>",
        "<B><Z><=><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z>evil</B>",
        "<B><Z><<><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z>evil</B>",
        "<B><Z></><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z>evil</B>",
        "<B><Z><\"><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z>evil</B>",
        "<B><Z><eVil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z>evil</B>",
        "<B><Z><EVIL><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z>evil</B>",
        "<B><Z><ev_il><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z>evil</B>",
        "<B><Z><ev il><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z>evil</B>",
        "<B><Z><ev4il><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z>evil</B>",
        "<B><Z><e><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z>evil</B>",
        "<B><Z>< ><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z>evil</B>",
        "<B><Z><6><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z>evil</B>",
        "<B><Z><_><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z>evil</B>",
        "<B><Z><><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z>evil</B>",
        "<B><Z><N pl=\"y\" gnt=\"n\" gnd=\"m\"a></Z>evil</B>",
        "<B><Z><evil><N pl=\"y\" gnt=\"n\" gnd=\"m\"a><evil></Z>evil</B>"
      ]
    },
    {
      "regex": "^\\D+\\d*\\[(\\d+)\\]$",
      "exceptionStackTrace": null,
      "matches": [
        "evil0[00]",
        "evil0[]",
        "evil00[0]",
        "]0[0]",
        "[0[0]",
        "eVil0[0]",
        "EVIL0[0]",
        "ev_il0[0]",
        "ev il0[0]",
        "ev4il0[0]",
        "e0[0]",
        " 0[0]",
        "60[0]",
        "_0[0]",
        "0[0]",
        "evil[0]",
        "evil0[0]"
      ]
    },
    {
      "regex": "&(?!(?<_1>[a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+);)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<_"
      },
      "matches": []
    },
    {
      "regex": "xmlns=\"http://www.w3.org/1999/xhtml\" xmlns=\"http://www.w3.org/1999/xhtml\"",
      "exceptionStackTrace": null,
      "matches": [
        "xmlns=\"http://wwwaw3aorg/1999/xhtml\" xmlns=\"http://wwwaw3Aorg/1999/xhtml\"",
        "xmlns=\"http://wwwaw3aorg/1999/xhtml\" xmlns=\"http://wwwaw3=org/1999/xhtml\"",
        "xmlns=\"http://wwwaw3aorg/1999/xhtml\" xmlns=\"http://wwwaw3:org/1999/xhtml\"",
        "xmlns=\"http://wwwaw3aorg/1999/xhtml\" xmlns=\"http://wwwaw30org/1999/xhtml\"",
        "xmlns=\"http://wwwaw3aorg/1999/xhtml\" xmlns=\"http://wwwaw3/org/1999/xhtml\"",
        "xmlns=\"http://wwwaw3aorg/1999/xhtml\" xmlns=\"http://wwwaw3\"org/1999/xhtml\"",
        "xmlns=\"http://wwwaw3aorg/1999/xhtml\" xmlns=\"http://wwwaw3 org/1999/xhtml\"",
        "xmlns=\"http://wwwaw3aorg/1999/xhtml\" xmlns=\"http://wwwAw3aorg/1999/xhtml\"",
        "xmlns=\"http://wwwaw3aorg/1999/xhtml\" xmlns=\"http://www=w3aorg/1999/xhtml\"",
        "xmlns=\"http://wwwaw3aorg/1999/xhtml\" xmlns=\"http://www:w3aorg/1999/xhtml\"",
        "xmlns=\"http://wwwaw3aorg/1999/xhtml\" xmlns=\"http://www0w3aorg/1999/xhtml\"",
        "xmlns=\"http://wwwaw3aorg/1999/xhtml\" xmlns=\"http://www/w3aorg/1999/xhtml\"",
        "xmlns=\"http://wwwaw3aorg/1999/xhtml\" xmlns=\"http://www\"w3aorg/1999/xhtml\"",
        "xmlns=\"http://wwwaw3aorg/1999/xhtml\" xmlns=\"http://www w3aorg/1999/xhtml\"",
        "xmlns=\"http://wwwaw3Aorg/1999/xhtml\" xmlns=\"http://wwwaw3aorg/1999/xhtml\"",
        "xmlns=\"http://wwwaw3=org/1999/xhtml\" xmlns=\"http://wwwaw3aorg/1999/xhtml\"",
        "xmlns=\"http://wwwaw3:org/1999/xhtml\" xmlns=\"http://wwwaw3aorg/1999/xhtml\"",
        "xmlns=\"http://wwwaw30org/1999/xhtml\" xmlns=\"http://wwwaw3aorg/1999/xhtml\"",
        "xmlns=\"http://wwwaw3/org/1999/xhtml\" xmlns=\"http://wwwaw3aorg/1999/xhtml\"",
        "xmlns=\"http://wwwaw3\"org/1999/xhtml\" xmlns=\"http://wwwaw3aorg/1999/xhtml\"",
        "xmlns=\"http://wwwaw3 org/1999/xhtml\" xmlns=\"http://wwwaw3aorg/1999/xhtml\"",
        "xmlns=\"http://wwwAw3aorg/1999/xhtml\" xmlns=\"http://wwwaw3aorg/1999/xhtml\"",
        "xmlns=\"http://www=w3aorg/1999/xhtml\" xmlns=\"http://wwwaw3aorg/1999/xhtml\"",
        "xmlns=\"http://www:w3aorg/1999/xhtml\" xmlns=\"http://wwwaw3aorg/1999/xhtml\"",
        "xmlns=\"http://www0w3aorg/1999/xhtml\" xmlns=\"http://wwwaw3aorg/1999/xhtml\"",
        "xmlns=\"http://www/w3aorg/1999/xhtml\" xmlns=\"http://wwwaw3aorg/1999/xhtml\"",
        "xmlns=\"http://www\"w3aorg/1999/xhtml\" xmlns=\"http://wwwaw3aorg/1999/xhtml\"",
        "xmlns=\"http://www w3aorg/1999/xhtml\" xmlns=\"http://wwwaw3aorg/1999/xhtml\"",
        "xmlns=\"http://wwwaw3aorg/1999/xhtml\" xmlns=\"http://wwwaw3aorg/1999/xhtml\""
      ]
    },
    {
      "regex": "(\\d+) (ROUGE-\\S+) M_count: (\\d+) P_count: (\\d+) H_count: (\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "0 ROUGE-evil M_count: 0 P_count: 0 H_count: 00",
        "0 ROUGE-evil M_count: 0 P_count: 0 H_count: ",
        "0 ROUGE-evil M_count: 0 P_count: 00 H_count: 0",
        "0 ROUGE-evil M_count: 0 P_count:  H_count: 0",
        "0 ROUGE-evil M_count: 00 P_count: 0 H_count: 0",
        "0 ROUGE-evil M_count:  P_count: 0 H_count: 0",
        "0 ROUGE-: M_count: 0 P_count: 0 H_count: 0",
        "0 ROUGE-- M_count: 0 P_count: 0 H_count: 0",
        "0 ROUGE-eVil M_count: 0 P_count: 0 H_count: 0",
        "0 ROUGE-EVIL M_count: 0 P_count: 0 H_count: 0",
        "0 ROUGE-ev_il M_count: 0 P_count: 0 H_count: 0",
        "0 ROUGE-ev il M_count: 0 P_count: 0 H_count: 0",
        "0 ROUGE-ev4il M_count: 0 P_count: 0 H_count: 0",
        "0 ROUGE-e M_count: 0 P_count: 0 H_count: 0",
        "0 ROUGE-  M_count: 0 P_count: 0 H_count: 0",
        "0 ROUGE-6 M_count: 0 P_count: 0 H_count: 0",
        "0 ROUGE-_ M_count: 0 P_count: 0 H_count: 0",
        "0 ROUGE- M_count: 0 P_count: 0 H_count: 0",
        "00 ROUGE-evil M_count: 0 P_count: 0 H_count: 0",
        " ROUGE-evil M_count: 0 P_count: 0 H_count: 0",
        "0 ROUGE-evil M_count: 0 P_count: 0 H_count: 0"
      ]
    },
    {
      "regex": "(\\d+) packets output.* (\\d+) bytes",
      "exceptionStackTrace": null,
      "matches": [
        "0 packets outputevil 00 bytes",
        "0 packets outputevil  bytes",
        "0 packets outputeVil 0 bytes",
        "0 packets outputEVIL 0 bytes",
        "0 packets outputev_il 0 bytes",
        "0 packets outputev il 0 bytes",
        "0 packets outputev4il 0 bytes",
        "0 packets outpute 0 bytes",
        "0 packets output  0 bytes",
        "0 packets output6 0 bytes",
        "0 packets output_ 0 bytes",
        "00 packets outputevil 0 bytes",
        " packets outputevil 0 bytes",
        "0 packets output 0 bytes",
        "0 packets outputevil 0 bytes"
      ]
    },
    {
      "regex": "c.json",
      "exceptionStackTrace": null,
      "matches": ["c_json", "cAjson", "c0json", "c json", "cajson"]
    },
    {
      "regex": "pre: .*; current: .*",
      "exceptionStackTrace": null,
      "matches": [
        "pre: evil; current: ;",
        "pre: evil; current: :",
        "pre: evil; current: eVil",
        "pre: evil; current: EVIL",
        "pre: evil; current: ev_il",
        "pre: evil; current: ev il",
        "pre: evil; current: ev4il",
        "pre: evil; current: e",
        "pre: evil; current:  ",
        "pre: evil; current: 6",
        "pre: evil; current: _",
        "pre: evil; current: ",
        "pre: ;; current: evil",
        "pre: :; current: evil",
        "pre: eVil; current: evil",
        "pre: EVIL; current: evil",
        "pre: ev_il; current: evil",
        "pre: ev il; current: evil",
        "pre: ev4il; current: evil",
        "pre: e; current: evil",
        "pre:  ; current: evil",
        "pre: 6; current: evil",
        "pre: _; current: evil",
        "pre: ; current: evil",
        "pre: ; current: ",
        "pre: evil; current: evil"
      ]
    },
    {
      "regex": "^### (.*?)( #+)?$",
      "exceptionStackTrace": null,
      "matches": [
        "### evil # #",
        "### evil",
        "### evil ##",
        "### evil ",
        "### # #",
        "### eVil #",
        "### EVIL #",
        "### ev_il #",
        "### ev il #",
        "### ev4il #",
        "### e #",
        "###   #",
        "### 6 #",
        "### _ #",
        "###  #",
        "### ",
        "### evil #"
      ]
    },
    {
      "regex": "\\blistHistory\\b",
      "exceptionStackTrace": null,
      "matches": ["listHistory"]
    },
    {
      "regex": "^\\/collections",
      "exceptionStackTrace": null,
      "matches": ["/collections"]
    },
    {
      "regex": ".+\\.[\\p{Alnum}]+",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\p"
      },
      "matches": []
    },
    {
      "regex": "([-+]*)(.+)",
      "exceptionStackTrace": null,
      "matches": [
        "+-",
        "++",
        "+eVil",
        "+EVIL",
        "+ev_il",
        "+ev il",
        "+ev4il",
        "+e",
        "+ ",
        "+6",
        "+_",
        "+",
        "++evil",
        "-evil",
        "evil",
        "+evil"
      ]
    },
    {
      "regex": "^(number|name|value|id|input|x|y)$",
      "exceptionStackTrace": null,
      "matches": ["y", "x", "input", "id", "value", "name", "number"]
    },
    {
      "regex": "\\G \\< \\( ( .*? ) \\) \\> ",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\G"
      },
      "matches": []
    },
    {
      "regex": "^\\s*\\#\\s*description\\s*:\\s*([^\\s].*)$",
      "exceptionStackTrace": null,
      "matches": [
        " # description : a:",
        " # description : a#",
        " # description : aeVil",
        " # description : aEVIL",
        " # description : aev_il",
        " # description : aev il",
        " # description : aev4il",
        " # description : ae",
        " # description : a ",
        " # description : a6",
        " # description : a_",
        " # description : a",
        " # description : Aevil",
        " # description : :evil",
        " # description : 0evil",
        " # description : #evil",
        " # description :  evil",
        " # description :  aevil",
        " # description :aevil",
        " # description  : aevil",
        " # description: aevil",
        " #  description : aevil",
        " #description : aevil",
        "  # description : aevil",
        "# description : aevil",
        "#description:a",
        " # description : aevil"
      ]
    },
    {
      "regex": "\\A[\\p{katakana}\\s]+\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\p"
      },
      "matches": []
    },
    {
      "regex": "left|right|top|bottom",
      "exceptionStackTrace": null,
      "matches": ["bottom", "top", "right", "left"]
    },
    {
      "regex": "^(.+)\\..+\\[(.+)] (.+)",
      "exceptionStackTrace": null,
      "matches": [
        "evil.evil[evil] ]",
        "evil.evil[evil] [",
        "evil.evil[evil] .",
        "evil.evil[evil] eVil",
        "evil.evil[evil] EVIL",
        "evil.evil[evil] ev_il",
        "evil.evil[evil] ev il",
        "evil.evil[evil] ev4il",
        "evil.evil[evil] e",
        "evil.evil[evil]  ",
        "evil.evil[evil] 6",
        "evil.evil[evil] _",
        "evil.evil[evil] ",
        "evil.evil[]] evil",
        "evil.evil[[] evil",
        "evil.evil[.] evil",
        "evil.evil[eVil] evil",
        "evil.evil[EVIL] evil",
        "evil.evil[ev_il] evil",
        "evil.evil[ev il] evil",
        "evil.evil[ev4il] evil",
        "evil.evil[e] evil",
        "evil.evil[ ] evil",
        "evil.evil[6] evil",
        "evil.evil[_] evil",
        "evil.evil[] evil",
        "evil.][evil] evil",
        "evil.[[evil] evil",
        "evil..[evil] evil",
        "evil.eVil[evil] evil",
        "evil.EVIL[evil] evil",
        "evil.ev_il[evil] evil",
        "evil.ev il[evil] evil",
        "evil.ev4il[evil] evil",
        "evil.e[evil] evil",
        "evil. [evil] evil",
        "evil.6[evil] evil",
        "evil._[evil] evil",
        "evil.[evil] evil",
        "].evil[evil] evil",
        "[.evil[evil] evil",
        "..evil[evil] evil",
        "eVil.evil[evil] evil",
        "EVIL.evil[evil] evil",
        "ev_il.evil[evil] evil",
        "ev il.evil[evil] evil",
        "ev4il.evil[evil] evil",
        "e.evil[evil] evil",
        " .evil[evil] evil",
        "6.evil[evil] evil",
        "_.evil[evil] evil",
        ".evil[evil] evil",
        "evil.evil[evil] evil"
      ]
    },
    {
      "regex": "(Intel.*)|(AMD.*)",
      "exceptionStackTrace": null,
      "matches": [
        "AMDeVil",
        "AMDEVIL",
        "AMDev_il",
        "AMDev il",
        "AMDev4il",
        "AMDe",
        "AMD ",
        "AMD6",
        "AMD_",
        "InteleVil",
        "IntelEVIL",
        "Intelev_il",
        "Intelev il",
        "Intelev4il",
        "Intele",
        "Intel ",
        "Intel6",
        "Intel_",
        "AMD",
        "Intel",
        "AMDevil",
        "Intelevil"
      ]
    },
    {
      "regex": "(.*?)\\s+\\((\\d+)\\s*(aa|nt)\\)",
      "exceptionStackTrace": null,
      "matches": [
        "evil (0  aa)",
        "evil (0aa)",
        "evil (00 aa)",
        "evil ( aa)",
        "evil  (0 aa)",
        "evil(0 aa)",
        ") (0 aa)",
        "( (0 aa)",
        "eVil (0 aa)",
        "EVIL (0 aa)",
        "ev_il (0 aa)",
        "ev il (0 aa)",
        "ev4il (0 aa)",
        "e (0 aa)",
        "  (0 aa)",
        "6 (0 aa)",
        "_ (0 aa)",
        " (0 aa)",
        " (0nt)",
        " (0aa)",
        "evil (0 nt)",
        "evil (0 aa)"
      ]
    },
    { "regex": "[Z]", "exceptionStackTrace": null, "matches": ["Z"] },
    { "regex": "ne$", "exceptionStackTrace": null, "matches": ["ne"] },
    {
      "regex": "/|#|\\\\$|!|\\\\^|\\\\*|'| |\\\"|%|&|\\\\(|\\\\)|\\\\+|\\\\,|/|:|;|<|>|=|\\\\?|@|\\\\||\\\\\\\\",
      "exceptionStackTrace": null,
      "matches": [
        "\\\\\\\\",
        "\\\\\\",
        "",
        "@",
        "=",
        ">",
        "<",
        ";",
        ":",
        "\\,",
        "\\\\",
        "&",
        "%",
        "\"",
        " ",
        "'",
        "!",
        "\\",
        "#",
        "/"
      ]
    },
    {
      "regex": "ERRnotconnected",
      "exceptionStackTrace": null,
      "matches": ["ERRnotconnected"]
    },
    { "regex": "&gt\\;", "exceptionStackTrace": null, "matches": ["&gt;"] },
    {
      "regex": "\\%u?[a-fA-F0-9]{2}",
      "exceptionStackTrace": null,
      "matches": [
        "%u000",
        "%u0",
        "%ug0",
        "%ua0",
        "%uG0",
        "%uA0",
        "%uu00",
        "%00",
        "%u00"
      ]
    },
    {
      "regex": "^(key|index|keypath|rootpath|this|global|shared|context|event|node|local|style|helpers|last)",
      "exceptionStackTrace": null,
      "matches": [
        "last",
        "helpers",
        "style",
        "local",
        "node",
        "event",
        "context",
        "shared",
        "global",
        "this",
        "rootpath",
        "keypath",
        "index",
        "key"
      ]
    },
    { "regex": "^size_t", "exceptionStackTrace": null, "matches": ["size_t"] },
    {
      "regex": "(&|\\?)ajaxified=true",
      "exceptionStackTrace": null,
      "matches": ["?ajaxified=true", "&ajaxified=true"]
    },
    {
      "regex": "\\.?storage[a-zA-Z0-9\\-]*?\\.grandcloud\\.cn\\Z",
      "exceptionStackTrace": null,
      "matches": [
        ".storage..grandcloud.cn",
        ".storage-.grandcloud.cn",
        ".storageeVil.grandcloud.cn",
        ".storageEVIL.grandcloud.cn",
        ".storageev_il.grandcloud.cn",
        ".storageev il.grandcloud.cn",
        ".storageev4il.grandcloud.cn",
        ".storagee.grandcloud.cn",
        ".storage .grandcloud.cn",
        ".storage6.grandcloud.cn",
        ".storage_.grandcloud.cn",
        ".storage.grandcloud.cn",
        "..storageevil.grandcloud.cn",
        "storageevil.grandcloud.cn",
        "storage.grandcloud.cn",
        ".storageevil.grandcloud.cn"
      ]
    },
    {
      "regex": "^I have declared an image dependency in an html file with revision tokens$",
      "exceptionStackTrace": null,
      "matches": [
        "I have declared an image dependency in an html file with revision tokens"
      ]
    },
    {
      "regex": "^(?:([a-zA-Z_][a-zA-Z0-9_-]*))",
      "exceptionStackTrace": null,
      "matches": [
        "_-",
        "_eVil",
        "_EVIL",
        "_ev_il",
        "_ev il",
        "_ev4il",
        "_e",
        "_ ",
        "_6",
        "__",
        "aevil",
        "Aevil",
        "_",
        "_evil"
      ]
    },
    {
      "regex": "option value=\"([0-9.]+)\"",
      "exceptionStackTrace": null,
      "matches": [
        "option value=\"..\"",
        "option value=\"\"",
        "option value=\"0\"",
        "option value=\".\""
      ]
    },
    {
      "regex": "^#<Proc:([^ ]*?)(@([^ ]*)\\/to_s\\.rb:16)?>$",
      "exceptionStackTrace": null,
      "matches": [
        "#<Proc:evil@evil/to_s.rb:16@evil/to_s.rb:16>",
        "#<Proc:evil>",
        "#<Proc:evil@@/to_s.rb:16>",
        "#<Proc:evil@>/to_s.rb:16>",
        "#<Proc:evil@</to_s.rb:16>",
        "#<Proc:evil@:/to_s.rb:16>",
        "#<Proc:evil@//to_s.rb:16>",
        "#<Proc:evil@./to_s.rb:16>",
        "#<Proc:evil@#/to_s.rb:16>",
        "#<Proc:evil@eVil/to_s.rb:16>",
        "#<Proc:evil@EVIL/to_s.rb:16>",
        "#<Proc:evil@ev_il/to_s.rb:16>",
        "#<Proc:evil@ev il/to_s.rb:16>",
        "#<Proc:evil@ev4il/to_s.rb:16>",
        "#<Proc:evil@e/to_s.rb:16>",
        "#<Proc:evil@ /to_s.rb:16>",
        "#<Proc:evil@6/to_s.rb:16>",
        "#<Proc:evil@_/to_s.rb:16>",
        "#<Proc:evil@/to_s.rb:16>",
        "#<Proc:@@evil/to_s.rb:16>",
        "#<Proc:>@evil/to_s.rb:16>",
        "#<Proc:<@evil/to_s.rb:16>",
        "#<Proc::@evil/to_s.rb:16>",
        "#<Proc:/@evil/to_s.rb:16>",
        "#<Proc:.@evil/to_s.rb:16>",
        "#<Proc:#@evil/to_s.rb:16>",
        "#<Proc:eVil@evil/to_s.rb:16>",
        "#<Proc:EVIL@evil/to_s.rb:16>",
        "#<Proc:ev_il@evil/to_s.rb:16>",
        "#<Proc:ev il@evil/to_s.rb:16>",
        "#<Proc:ev4il@evil/to_s.rb:16>",
        "#<Proc:e@evil/to_s.rb:16>",
        "#<Proc: @evil/to_s.rb:16>",
        "#<Proc:6@evil/to_s.rb:16>",
        "#<Proc:_@evil/to_s.rb:16>",
        "#<Proc:@evil/to_s.rb:16>",
        "#<Proc:>",
        "#<Proc:evil@evil/to_s.rb:16>"
      ]
    },
    {
      "regex": "\\w\\d",
      "exceptionStackTrace": null,
      "matches": ["_0", "A0", "00", "a0"]
    },
    {
      "regex": "[A-Za-z]:\\\\\\\\",
      "exceptionStackTrace": null,
      "matches": ["A:\\\\", "a:\\\\"]
    },
    {
      "regex": "^\\s*(.*?)\\((.*)\\)\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        " evil(evil)  ",
        " evil(evil)",
        " evil()) ",
        " evil(() ",
        " evil(eVil) ",
        " evil(EVIL) ",
        " evil(ev_il) ",
        " evil(ev il) ",
        " evil(ev4il) ",
        " evil(e) ",
        " evil( ) ",
        " evil(6) ",
        " evil(_) ",
        " evil() ",
        " )(evil) ",
        " ((evil) ",
        " eVil(evil) ",
        " EVIL(evil) ",
        " ev_il(evil) ",
        " ev il(evil) ",
        " ev4il(evil) ",
        " e(evil) ",
        "  (evil) ",
        " 6(evil) ",
        " _(evil) ",
        " (evil) ",
        "  evil(evil) ",
        "evil(evil) ",
        "()",
        " evil(evil) "
      ]
    },
    {
      "regex": "\\A(?:LONG_VARCHAR)",
      "exceptionStackTrace": null,
      "matches": ["LONG_VARCHAR"]
    },
    {
      "regex": "<br\\s*\\/?>",
      "exceptionStackTrace": null,
      "matches": ["<br //>", "<br >", "<br  />", "<br/>", "<br>", "<br />"]
    },
    {
      "regex": "^[nvsxo!ilc]+",
      "exceptionStackTrace": null,
      "matches": ["cc", "", "x", "v", "s", "o", "n", "l", "i", "a", "!", "c"]
    },
    {
      "regex": "spec\\/rutabaga\\/util\\.rutabaga\\Z",
      "exceptionStackTrace": null,
      "matches": ["spec/rutabaga/util.rutabaga"]
    },
    {
      "regex": "^__regex_cpp_cond_.*__",
      "exceptionStackTrace": null,
      "matches": [
        "__regex_cpp_cond_eVil__",
        "__regex_cpp_cond_EVIL__",
        "__regex_cpp_cond_ev_il__",
        "__regex_cpp_cond_ev il__",
        "__regex_cpp_cond_ev4il__",
        "__regex_cpp_cond_e__",
        "__regex_cpp_cond_ __",
        "__regex_cpp_cond_6__",
        "__regex_cpp_cond____",
        "__regex_cpp_cond___",
        "__regex_cpp_cond_evil__"
      ]
    },
    {
      "regex": "--urr, -u",
      "exceptionStackTrace": null,
      "matches": ["--urr, -u"]
    },
    {
      "regex": "^$perls_root",
      "exceptionStackTrace": null,
      "matches": ["perls_root"]
    },
    {
      "regex": "^(?:([\\*\\-_] ?)+)\\1\\1$",
      "exceptionStackTrace": null,
      "matches": [
        "_ _ _ _ ",
        "_ _ ",
        "_  _ _ ",
        "- _ _ ",
        "* _ _ ",
        "__ _ ",
        "_ _ _ "
      ]
    },
    {
      "regex": "[ /&=+:]",
      "exceptionStackTrace": null,
      "matches": ["=", "/", "+", "&", " ", ":"]
    },
    {
      "regex": "^[\\'\\\"]+(.+)[\\'\\\"]+$",
      "exceptionStackTrace": null,
      "matches": [
        "\"evil\"\"",
        "\"evil",
        "\"evil'",
        "\"'\"",
        "\"\"\"",
        "\"eVil\"",
        "\"EVIL\"",
        "\"ev_il\"",
        "\"ev il\"",
        "\"ev4il\"",
        "\"e\"",
        "\" \"",
        "\"6\"",
        "\"_\"",
        "\"\"",
        "\"\"evil\"",
        "evil\"",
        "'evil\"",
        "\"evil\""
      ]
    },
    {
      "regex": "<style[\\S\\s]+?</style>",
      "exceptionStackTrace": null,
      "matches": [
        "<style></style>",
        "<style<</style>",
        "<style/</style>",
        "<styleeVil</style>",
        "<styleEVIL</style>",
        "<styleev_il</style>",
        "<styleev il</style>",
        "<styleev4il</style>",
        "<stylee</style>",
        "<style </style>",
        "<style6</style>",
        "<style_</style>",
        "<style</style>",
        "<styleevil</style>"
      ]
    },
    {
      "regex": "^(?P<hostnames>[^ \t]+)\\s+(?P<num>[0-9]+)\\s+(?P<partition>[^ \t]+)\\s+(?P<state>[^ \t]+)\\s+(?P<cpus>[0-9]+)\\s+(?P<S>[0-9]+):(?P<C>[0-9]+):(?P<T>[0-9]+)\\s+(?P<memory>[0-9]+)\\s+(?P<tmp_disk>[0-9]+)\\s+(?P<weight>[0-9]+)\\s+(?P<features>[^ ]+)\\s+(?P<reason>[^ \t]+)",
      "exceptionStackTrace": null,
      "matches": [
        "evil 0 evil evil 0 0:0:0 0 0 0 evil :",
        "evil 0 evil evil 0 0:0:0 0 0 0 evil eVil",
        "evil 0 evil evil 0 0:0:0 0 0 0 evil EVIL",
        "evil 0 evil evil 0 0:0:0 0 0 0 evil ev_il",
        "evil 0 evil evil 0 0:0:0 0 0 0 evil ev il",
        "evil 0 evil evil 0 0:0:0 0 0 0 evil ev4il",
        "evil 0 evil evil 0 0:0:0 0 0 0 evil e",
        "evil 0 evil evil 0 0:0:0 0 0 0 evil  ",
        "evil 0 evil evil 0 0:0:0 0 0 0 evil 6",
        "evil 0 evil evil 0 0:0:0 0 0 0 evil _",
        "evil 0 evil evil 0 0:0:0 0 0 0 evil ",
        "evil 0 evil evil 0 0:0:0 0 0 0 evil  evil",
        "evil 0 evil evil 0 0:0:0 0 0 0 evilevil",
        "evil 0 evil evil 0 0:0:0 0 0 0 : evil",
        "evil 0 evil evil 0 0:0:0 0 0 0 eVil evil",
        "evil 0 evil evil 0 0:0:0 0 0 0 EVIL evil",
        "evil 0 evil evil 0 0:0:0 0 0 0 ev_il evil",
        "evil 0 evil evil 0 0:0:0 0 0 0 ev il evil",
        "evil 0 evil evil 0 0:0:0 0 0 0 ev4il evil",
        "evil 0 evil evil 0 0:0:0 0 0 0 e evil",
        "evil 0 evil evil 0 0:0:0 0 0 0   evil",
        "evil 0 evil evil 0 0:0:0 0 0 0 6 evil",
        "evil 0 evil evil 0 0:0:0 0 0 0 _ evil",
        "evil 0 evil evil 0 0:0:0 0 0 0  evil",
        "evil 0 evil evil 0 0:0:0 0 0 0  evil evil",
        "evil 0 evil evil 0 0:0:0 0 0 0evil evil",
        "evil 0 evil evil 0 0:0:0 0 0 00 evil evil",
        "evil 0 evil evil 0 0:0:0 0 0  evil evil",
        "evil 0 evil evil 0 0:0:0 0 0  0 evil evil",
        "evil 0 evil evil 0 0:0:0 0 00 evil evil",
        "evil 0 evil evil 0 0:0:0 0 00 0 evil evil",
        "evil 0 evil evil 0 0:0:0 0  0 evil evil",
        "evil 0 evil evil 0 0:0:0 0  0 0 evil evil",
        "evil 0 evil evil 0 0:0:0 00 0 evil evil",
        "evil 0 evil evil 0 0:0:0 00 0 0 evil evil",
        "evil 0 evil evil 0 0:0:0  0 0 evil evil",
        "evil 0 evil evil 0 0:0:0  0 0 0 evil evil",
        "evil 0 evil evil 0 0:0:00 0 0 evil evil",
        "evil 0 evil evil 0 0:0:00 0 0 0 evil evil",
        "evil 0 evil evil 0 0:0: 0 0 0 evil evil",
        "evil 0 evil evil 0 0:00:0 0 0 0 evil evil",
        "evil 0 evil evil 0 0::0 0 0 0 evil evil",
        "evil 0 evil evil 0 00:0:0 0 0 0 evil evil",
        "evil 0 evil evil 0 :0:0 0 0 0 evil evil",
        "evil 0 evil evil 0  0:0:0 0 0 0 evil evil",
        "evil 0 evil evil 00:0:0 0 0 0 evil evil",
        "evil 0 evil evil 00 0:0:0 0 0 0 evil evil",
        "evil 0 evil evil  0:0:0 0 0 0 evil evil",
        "evil 0 evil evil  0 0:0:0 0 0 0 evil evil",
        "evil 0 evil evil0 0:0:0 0 0 0 evil evil",
        "evil 0 evil : 0 0:0:0 0 0 0 evil evil",
        "evil 0 evil eVil 0 0:0:0 0 0 0 evil evil",
        "evil 0 evil EVIL 0 0:0:0 0 0 0 evil evil",
        "evil 0 evil ev_il 0 0:0:0 0 0 0 evil evil",
        "evil 0 evil ev il 0 0:0:0 0 0 0 evil evil",
        "evil 0 evil ev4il 0 0:0:0 0 0 0 evil evil",
        "evil 0 evil e 0 0:0:0 0 0 0 evil evil",
        "evil 0 evil   0 0:0:0 0 0 0 evil evil",
        "evil 0 evil 6 0 0:0:0 0 0 0 evil evil",
        "evil 0 evil _ 0 0:0:0 0 0 0 evil evil",
        "evil 0 evil  0 0:0:0 0 0 0 evil evil",
        "evil 0 evil  evil 0 0:0:0 0 0 0 evil evil",
        "evil 0 evilevil 0 0:0:0 0 0 0 evil evil",
        "evil 0 : evil 0 0:0:0 0 0 0 evil evil",
        "evil 0 eVil evil 0 0:0:0 0 0 0 evil evil",
        "evil 0 EVIL evil 0 0:0:0 0 0 0 evil evil",
        "evil 0 ev_il evil 0 0:0:0 0 0 0 evil evil",
        "evil 0 ev il evil 0 0:0:0 0 0 0 evil evil",
        "evil 0 ev4il evil 0 0:0:0 0 0 0 evil evil",
        "evil 0 e evil 0 0:0:0 0 0 0 evil evil",
        "evil 0   evil 0 0:0:0 0 0 0 evil evil",
        "evil 0 6 evil 0 0:0:0 0 0 0 evil evil",
        "evil 0 _ evil 0 0:0:0 0 0 0 evil evil",
        "evil 0  evil 0 0:0:0 0 0 0 evil evil",
        "evil 0  evil evil 0 0:0:0 0 0 0 evil evil",
        "evil 0evil evil 0 0:0:0 0 0 0 evil evil",
        "evil 00 evil evil 0 0:0:0 0 0 0 evil evil",
        "evil  evil evil 0 0:0:0 0 0 0 evil evil",
        "evil  0 evil evil 0 0:0:0 0 0 0 evil evil",
        "evil0 evil evil 0 0:0:0 0 0 0 evil evil",
        ": 0 evil evil 0 0:0:0 0 0 0 evil evil",
        "eVil 0 evil evil 0 0:0:0 0 0 0 evil evil",
        "EVIL 0 evil evil 0 0:0:0 0 0 0 evil evil",
        "ev_il 0 evil evil 0 0:0:0 0 0 0 evil evil",
        "ev il 0 evil evil 0 0:0:0 0 0 0 evil evil",
        "ev4il 0 evil evil 0 0:0:0 0 0 0 evil evil",
        "e 0 evil evil 0 0:0:0 0 0 0 evil evil",
        "  0 evil evil 0 0:0:0 0 0 0 evil evil",
        "6 0 evil evil 0 0:0:0 0 0 0 evil evil",
        "_ 0 evil evil 0 0:0:0 0 0 0 evil evil",
        " 0 evil evil 0 0:0:0 0 0 0 evil evil",
        "evil 0 evil evil 0 0:0:0 0 0 0 evil evil"
      ]
    },
    {
      "regex": "^application/sparql-update",
      "exceptionStackTrace": null,
      "matches": ["application/sparql-update"]
    },
    {
      "regex": "\\{\\{\\{athx\\}\\}\\}",
      "exceptionStackTrace": null,
      "matches": ["{{{athx}}}"]
    },
    {
      "regex": "^(.*)::Do",
      "exceptionStackTrace": null,
      "matches": [
        ":::Do",
        "eVil::Do",
        "EVIL::Do",
        "ev_il::Do",
        "ev il::Do",
        "ev4il::Do",
        "e::Do",
        " ::Do",
        "6::Do",
        "_::Do",
        "::Do",
        "evil::Do"
      ]
    },
    {
      "regex": "([\\w-\\.]+)?",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad character range \\w-\\."
      },
      "matches": []
    },
    {
      "regex": "(\\d*)\\s*error\\(s\\),\\s*(\\d*)\\s*warning\\(s\\)",
      "exceptionStackTrace": null,
      "matches": [
        "0 error(s), 0  warning(s)",
        "0 error(s), 0warning(s)",
        "0 error(s), 00 warning(s)",
        "0 error(s),  warning(s)",
        "0 error(s),  0 warning(s)",
        "0 error(s),0 warning(s)",
        "0  error(s), 0 warning(s)",
        "0error(s), 0 warning(s)",
        "00 error(s), 0 warning(s)",
        " error(s), 0 warning(s)",
        "error(s),warning(s)",
        "0 error(s), 0 warning(s)"
      ]
    },
    { "regex": "^attr$", "exceptionStackTrace": null, "matches": ["attr"] },
    {
      "regex": "\\d*\\s*'s?h\\s*[0-9a-fxz?][0-9a-fxz?_]*",
      "exceptionStackTrace": null,
      "matches": [
        "0 'sh ?__",
        "0 'sh ?",
        "0 'sh ?z",
        "0 'sh ?x",
        "0 'sh ?g",
        "0 'sh ?a",
        "0 'sh ??",
        "0 'sh ?0",
        "0 'sh z_",
        "0 'sh x_",
        "0 'sh g_",
        "0 'sh a_",
        "0 'sh 0_",
        "0 'sh  ?_",
        "0 'sh?_",
        "0 'ssh ?_",
        "0 'h ?_",
        "0  'sh ?_",
        "0'sh ?_",
        "00 'sh ?_",
        " 'sh ?_",
        "'h?",
        "0 'sh ?_"
      ]
    },
    {
      "regex": "(Sg|Pl)([123])",
      "exceptionStackTrace": null,
      "matches": ["Sg2", "Sg1", "Sg0", "Pl3", "Sg3"]
    },
    {
      "regex": "^([0-9a-f]{5,40}) Merge pull request #(\\w+)",
      "exceptionStackTrace": null,
      "matches": [
        "aaaaa Merge pull request #eVil",
        "aaaaa Merge pull request #EVIL",
        "aaaaa Merge pull request #ev_il",
        "aaaaa Merge pull request #ev il",
        "aaaaa Merge pull request #ev4il",
        "aaaaa Merge pull request #e",
        "aaaaa Merge pull request # ",
        "aaaaa Merge pull request #6",
        "aaaaa Merge pull request #_",
        "aaaaa Merge pull request #",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa Merge pull request #evil",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa Merge pull request #evil",
        "aaaa Merge pull request #evil",
        "gaaaa Merge pull request #evil",
        "0aaaa Merge pull request #evil",
        "aaaaa Merge pull request #evil"
      ]
    },
    { "regex": "^(?:'|\")", "exceptionStackTrace": null, "matches": ["\"", "'"] },
    {
      "regex": "(//*)",
      "exceptionStackTrace": null,
      "matches": ["///", "/", "//"]
    },
    {
      "regex": "[0-9.]{3,}",
      "exceptionStackTrace": null,
      "matches": ["..", "0..", "..."]
    },
    {
      "regex": "[^\\d\\/\\-]",
      "exceptionStackTrace": null,
      "matches": ["A", "0", "/", "-", " ", "a"]
    },
    {
      "regex": "[^0-9a-zA-Z$_.]",
      "exceptionStackTrace": null,
      "matches": ["a", "_", "A", "0", ".", "$", " "]
    },
    {
      "regex": "^```((?:[^`\\\\]|\\\\[\\s\\S]|`(?!``))*)```",
      "exceptionStackTrace": null,
      "matches": [
        "```\\````",
        "```\\_```",
        "```\\\\```",
        "```\\A```",
        "```\\0```",
        "```\\ ```",
        "```aa```",
        "```\\```",
        "```A```",
        "```0```",
        "``` ```",
        "``````",
        "```````",
        "```\\a```",
        "```a```"
      ]
    },
    {
      "regex": "^\\[(?:MSG:)?(.+)\\]$",
      "exceptionStackTrace": null,
      "matches": [
        "[MSG:]]",
        "[MSG:[]",
        "[MSG::]",
        "[MSG:eVil]",
        "[MSG:EVIL]",
        "[MSG:ev_il]",
        "[MSG:ev il]",
        "[MSG:ev4il]",
        "[MSG:e]",
        "[MSG: ]",
        "[MSG:6]",
        "[MSG:_]",
        "[MSG:]",
        "[MSG:MSG:evil]",
        "[evil]",
        "[MSG:evil]"
      ]
    },
    {
      "regex": "http(s?):\\/\\/(www\\.)?vimeo.com\\/(\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "https://www.vimeoacom/00",
        "https://www.vimeoacom/",
        "https://www.vimeoAcom/0",
        "https://www.vimeo:com/0",
        "https://www.vimeo0com/0",
        "https://www.vimeo/com/0",
        "https://www.vimeo.com/0",
        "https://www.vimeo com/0",
        "https://www.www.vimeoacom/0",
        "https://vimeoacom/0",
        "httpss://www.vimeoacom/0",
        "http://www.vimeoacom/0",
        "http://vimeoacom/0",
        "https://www.vimeoacom/0"
      ]
    },
    {
      "regex": "^(.*)\\s+-\\s+(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil - -",
        "evil - eVil",
        "evil - EVIL",
        "evil - ev_il",
        "evil - ev il",
        "evil - ev4il",
        "evil - e",
        "evil -  ",
        "evil - 6",
        "evil - _",
        "evil - ",
        "evil -  evil",
        "evil -evil",
        "evil  - evil",
        "evil- evil",
        "- - evil",
        "eVil - evil",
        "EVIL - evil",
        "ev_il - evil",
        "ev il - evil",
        "ev4il - evil",
        "e - evil",
        "  - evil",
        "6 - evil",
        "_ - evil",
        " - evil",
        " - ",
        "evil - evil"
      ]
    },
    {
      "regex": "<a[^>]+?href\\s*=\\s*([\"'])(.*?)\\1",
      "exceptionStackTrace": null,
      "matches": [
        "<aevilhref = '>'",
        "<aevilhref = '='",
        "<aevilhref = '<'",
        "<aevilhref = '''",
        "<aevilhref = '\"'",
        "<aevilhref = 'eVil'",
        "<aevilhref = 'EVIL'",
        "<aevilhref = 'ev_il'",
        "<aevilhref = 'ev il'",
        "<aevilhref = 'ev4il'",
        "<aevilhref = 'e'",
        "<aevilhref = ' '",
        "<aevilhref = '6'",
        "<aevilhref = '_'",
        "<aevilhref = ''",
        "<aevilhref = \"evil'",
        "<aevilhref =  'evil'",
        "<aevilhref ='evil'",
        "<aevilhref  = 'evil'",
        "<aevilhref= 'evil'",
        "<a>href = 'evil'",
        "<a=href = 'evil'",
        "<a<href = 'evil'",
        "<a'href = 'evil'",
        "<a\"href = 'evil'",
        "<aeVilhref = 'evil'",
        "<aEVILhref = 'evil'",
        "<aev_ilhref = 'evil'",
        "<aev ilhref = 'evil'",
        "<aev4ilhref = 'evil'",
        "<aehref = 'evil'",
        "<a href = 'evil'",
        "<a6href = 'evil'",
        "<a_href = 'evil'",
        "<ahref = 'evil'",
        "<aevilhref=''",
        "<aevilhref = 'evil'"
      ]
    },
    {
      "regex": "--moo\\s*just moos",
      "exceptionStackTrace": null,
      "matches": ["--moo  just moos", "--moojust moos", "--moo just moos"]
    },
    {
      "regex": "\\b(break|case|continue|do|done|elif|else|esac|eval|export|fi|for|function|if|in|local|return|set|then|unset|until|while)(?=\\(|\\b)",
      "exceptionStackTrace": null,
      "matches": [
        "while",
        "until",
        "unset",
        "then",
        "set",
        "return",
        "local",
        "in",
        "if",
        "function",
        "for",
        "fi",
        "export",
        "eval",
        "esac",
        "else",
        "elif",
        "done",
        "do",
        "continue",
        "case",
        "break"
      ]
    },
    {
      "regex": "State.get: No arguments or function required",
      "exceptionStackTrace": null,
      "matches": [
        "StateAget: No arguments or function required",
        "State:get: No arguments or function required",
        "State0get: No arguments or function required",
        "State get: No arguments or function required",
        "Stateaget: No arguments or function required"
      ]
    },
    {
      "regex": "^outgroup:\\s+(\\d+)\\s+(\\S+)",
      "exceptionStackTrace": null,
      "matches": [
        "outgroup: 0 :",
        "outgroup: 0 eVil",
        "outgroup: 0 EVIL",
        "outgroup: 0 ev_il",
        "outgroup: 0 ev il",
        "outgroup: 0 ev4il",
        "outgroup: 0 e",
        "outgroup: 0  ",
        "outgroup: 0 6",
        "outgroup: 0 _",
        "outgroup: 0 ",
        "outgroup: 0  evil",
        "outgroup: 0evil",
        "outgroup: 00 evil",
        "outgroup:  evil",
        "outgroup:  0 evil",
        "outgroup:0 evil",
        "outgroup: 0 evil"
      ]
    },
    {
      "regex": "([A-Za-z0-9_\\.{}]+)\\$([^\\(\\)]+)\\(([^\\(\\)]*)\\)",
      "exceptionStackTrace": null,
      "matches": [
        "evil$evil(})",
        "evil$evil({)",
        "evil$evil(.)",
        "evil$evil())",
        "evil$evil(()",
        "evil$evil($)",
        "evil$evil(eVil)",
        "evil$evil(EVIL)",
        "evil$evil(ev_il)",
        "evil$evil(ev il)",
        "evil$evil(ev4il)",
        "evil$evil(e)",
        "evil$evil( )",
        "evil$evil(6)",
        "evil$evil(_)",
        "evil$}(evil)",
        "evil${(evil)",
        "evil$.(evil)",
        "evil$)(evil)",
        "evil$((evil)",
        "evil$$(evil)",
        "evil$eVil(evil)",
        "evil$EVIL(evil)",
        "evil$ev_il(evil)",
        "evil$ev il(evil)",
        "evil$ev4il(evil)",
        "evil$e(evil)",
        "evil$ (evil)",
        "evil$6(evil)",
        "evil$_(evil)",
        "evil$(evil)",
        "}$evil(evil)",
        "{$evil(evil)",
        ".$evil(evil)",
        ")$evil(evil)",
        "($evil(evil)",
        "$$evil(evil)",
        "eVil$evil(evil)",
        "EVIL$evil(evil)",
        "ev_il$evil(evil)",
        "ev il$evil(evil)",
        "ev4il$evil(evil)",
        "e$evil(evil)",
        " $evil(evil)",
        "6$evil(evil)",
        "_$evil(evil)",
        "$evil(evil)",
        "evil$evil()",
        "evil$evil(evil)"
      ]
    },
    {
      "regex": "\\A5[.]1[.]2\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "\\.log(\\.gz)?\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    { "regex": "^form-", "exceptionStackTrace": null, "matches": ["form-"] },
    {
      "regex": "[\\xc0-\\xdf][\\x80-\\xbf]|[\\xe0-\\xef][\\x80-\\xbf][\\x80-\\xbf]|[\\xf0-\\xf7][\\x80-\\xbf]{3}",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 192"
      },
      "matches": []
    },
    {
      "regex": "^([A-Za-z]\\d{7}|\\s{8}) ([A-Za-z]\\d{7}|\\s{8}) ([0-9a-fA-F]{8}|\\s{8}) ([0-9a-fA-F]{8})",
      "exceptionStackTrace": null,
      "matches": [
        "          a0000000 AAAAAAAA AAAAAAAA",
        "        a0000000 AAAAAAAA AAAAAAAA",
        "a0000000           AAAAAAAA AAAAAAAA",
        "a0000000         AAAAAAAA AAAAAAAA",
        "a0000000 a0000000           AAAAAAAA",
        "a0000000 a0000000         AAAAAAAA",
        "a0000000 a0000000 AAAAAAAA AAAAAAAAA",
        "a0000000 a0000000 AAAAAAAA AAAAAAA",
        "a0000000 a0000000 AAAAAAAA gAAAAAAA",
        "a0000000 a0000000 AAAAAAAA aAAAAAAA",
        "a0000000 a0000000 AAAAAAAA GAAAAAAA",
        "a0000000 a0000000 AAAAAAAA 0AAAAAAA",
        "a0000000 a0000000 AAAAAAAAA AAAAAAAA",
        "a0000000 a0000000 AAAAAAA AAAAAAAA",
        "a0000000 a0000000 gAAAAAAA AAAAAAAA",
        "a0000000 a0000000 aAAAAAAA AAAAAAAA",
        "a0000000 a0000000 GAAAAAAA AAAAAAAA",
        "a0000000 a0000000 0AAAAAAA AAAAAAAA",
        "a0000000 a00000000 AAAAAAAA AAAAAAAA",
        "a0000000 a000000 AAAAAAAA AAAAAAAA",
        "a0000000 A0000000 AAAAAAAA AAAAAAAA",
        "a00000000 a0000000 AAAAAAAA AAAAAAAA",
        "a000000 a0000000 AAAAAAAA AAAAAAAA",
        "A0000000 a0000000 AAAAAAAA AAAAAAAA",
        "         a0000000 AAAAAAAA AAAAAAAA",
        "a0000000          AAAAAAAA AAAAAAAA",
        "a0000000 a0000000          AAAAAAAA",
        "a0000000 a0000000 AAAAAAAA AAAAAAAA"
      ]
    },
    {
      "regex": "^(\\S+)\\s+(\\S+)\\s+(?:\\@\\s+)(\\S+)\\s+(.+)\\s+{(\\@.+?)}\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        "evil evil @ evil evil {@evil}  ",
        "evil evil @ evil evil {@}} ",
        "evil evil @ evil evil {@{} ",
        "evil evil @ evil evil {@@} ",
        "evil evil @ evil evil {@eVil} ",
        "evil evil @ evil evil {@EVIL} ",
        "evil evil @ evil evil {@ev_il} ",
        "evil evil @ evil evil {@ev il} ",
        "evil evil @ evil evil {@ev4il} ",
        "evil evil @ evil evil {@e} ",
        "evil evil @ evil evil {@ } ",
        "evil evil @ evil evil {@6} ",
        "evil evil @ evil evil {@_} ",
        "evil evil @ evil evil {@} ",
        "evil evil @ evil evil  {@evil} ",
        "evil evil @ evil evil{@evil} ",
        "evil evil @ evil } {@evil} ",
        "evil evil @ evil { {@evil} ",
        "evil evil @ evil @ {@evil} ",
        "evil evil @ evil eVil {@evil} ",
        "evil evil @ evil EVIL {@evil} ",
        "evil evil @ evil ev_il {@evil} ",
        "evil evil @ evil ev il {@evil} ",
        "evil evil @ evil ev4il {@evil} ",
        "evil evil @ evil e {@evil} ",
        "evil evil @ evil   {@evil} ",
        "evil evil @ evil 6 {@evil} ",
        "evil evil @ evil _ {@evil} ",
        "evil evil @ evil  {@evil} ",
        "evil evil @ evil  evil {@evil} ",
        "evil evil @ evilevil {@evil} ",
        "evil evil @ } evil {@evil} ",
        "evil evil @ { evil {@evil} ",
        "evil evil @ @ evil {@evil} ",
        "evil evil @ eVil evil {@evil} ",
        "evil evil @ EVIL evil {@evil} ",
        "evil evil @ ev_il evil {@evil} ",
        "evil evil @ ev il evil {@evil} ",
        "evil evil @ ev4il evil {@evil} ",
        "evil evil @ e evil {@evil} ",
        "evil evil @   evil {@evil} ",
        "evil evil @ 6 evil {@evil} ",
        "evil evil @ _ evil {@evil} ",
        "evil evil @  evil {@evil} ",
        "evil evil @  evil evil {@evil} ",
        "evil evil @evil evil {@evil} ",
        "evil evil  @ evil evil {@evil} ",
        "evil evil@ evil evil {@evil} ",
        "evil } @ evil evil {@evil} ",
        "evil { @ evil evil {@evil} ",
        "evil @ @ evil evil {@evil} ",
        "evil eVil @ evil evil {@evil} ",
        "evil EVIL @ evil evil {@evil} ",
        "evil ev_il @ evil evil {@evil} ",
        "evil ev il @ evil evil {@evil} ",
        "evil ev4il @ evil evil {@evil} ",
        "evil e @ evil evil {@evil} ",
        "evil   @ evil evil {@evil} ",
        "evil 6 @ evil evil {@evil} ",
        "evil _ @ evil evil {@evil} ",
        "evil  @ evil evil {@evil} ",
        "evil  evil @ evil evil {@evil} ",
        "evilevil @ evil evil {@evil} ",
        "} evil @ evil evil {@evil} ",
        "{ evil @ evil evil {@evil} ",
        "@ evil @ evil evil {@evil} ",
        "eVil evil @ evil evil {@evil} ",
        "EVIL evil @ evil evil {@evil} ",
        "ev_il evil @ evil evil {@evil} ",
        "ev il evil @ evil evil {@evil} ",
        "ev4il evil @ evil evil {@evil} ",
        "e evil @ evil evil {@evil} ",
        "  evil @ evil evil {@evil} ",
        "6 evil @ evil evil {@evil} ",
        "_ evil @ evil evil {@evil} ",
        " evil @ evil evil {@evil} ",
        "evil evil @ evil evil {@evil}",
        "evil evil @ evil evil {@evil} "
      ]
    },
    {
      "regex": "^'(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "''",
        "'eVil",
        "'EVIL",
        "'ev_il",
        "'ev il",
        "'ev4il",
        "'e",
        "' ",
        "'6",
        "'_",
        "'",
        "'evil"
      ]
    },
    {
      "regex": "^\\s*broadcast (.*)",
      "exceptionStackTrace": null,
      "matches": [
        " broadcast eVil",
        " broadcast EVIL",
        " broadcast ev_il",
        " broadcast ev il",
        " broadcast ev4il",
        " broadcast e",
        " broadcast  ",
        " broadcast 6",
        " broadcast _",
        " broadcast ",
        "  broadcast evil",
        "broadcast evil",
        "broadcast ",
        " broadcast evil"
      ]
    },
    {
      "regex": "excite.com",
      "exceptionStackTrace": null,
      "matches": [
        "excite_com",
        "exciteAcom",
        "excite0com",
        "excite com",
        "exciteacom"
      ]
    },
    { "regex": "\\b(is)\\b", "exceptionStackTrace": null, "matches": ["is"] },
    {
      "regex": "INNER DEP",
      "exceptionStackTrace": null,
      "matches": ["INNER DEP"]
    },
    {
      "regex": "$stateAbbr",
      "exceptionStackTrace": null,
      "matches": ["stateAbbr"]
    },
    { "regex": "^TADS", "exceptionStackTrace": null, "matches": ["TADS"] },
    {
      "regex": "(chr\\d+)\\_(\\d+)-(\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "chr0_0-00",
        "chr0_0-",
        "chr0_00-0",
        "chr0_-0",
        "chr00_0-0",
        "chr_0-0",
        "chr0_0-0"
      ]
    },
    {
      "regex": "failed to remove",
      "exceptionStackTrace": null,
      "matches": ["failed to remove"]
    },
    {
      "regex": "locale=(.[^&]*)",
      "exceptionStackTrace": null,
      "matches": [
        "locale=a=",
        "locale=a&",
        "locale=aeVil",
        "locale=aEVIL",
        "locale=aev_il",
        "locale=aev il",
        "locale=aev4il",
        "locale=ae",
        "locale=a ",
        "locale=a6",
        "locale=a_",
        "locale=Aevil",
        "locale==evil",
        "locale=0evil",
        "locale=&evil",
        "locale= evil",
        "locale=a",
        "locale=aevil"
      ]
    },
    {
      "regex": "\\A[^@]+@[^@]+\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "Ignoring invalid plugin dependency constraint",
      "exceptionStackTrace": null,
      "matches": ["Ignoring invalid plugin dependency constraint"]
    },
    { "regex": "CHANGE\\b", "exceptionStackTrace": null, "matches": ["CHANGE"] },
    { "regex": "$area", "exceptionStackTrace": null, "matches": ["area"] },
    {
      "regex": "currencies",
      "exceptionStackTrace": null,
      "matches": ["currencies"]
    },
    {
      "regex": "((--+==+)|(==+--+))",
      "exceptionStackTrace": null,
      "matches": [
        "==---",
        "==-",
        "===--",
        "=--",
        "--===",
        "--=",
        "---==",
        "-==",
        "==--",
        "--=="
      ]
    },
    {
      "regex": "^\"Name with spaces\"$",
      "exceptionStackTrace": null,
      "matches": ["\"Name with spaces\""]
    },
    {
      "regex": "@return\\s+\\\\Illuminate\\\\Database\\\\Eloquent\\\\Relations",
      "exceptionStackTrace": null,
      "matches": [
        "@return  \\Illuminate\\Database\\Eloquent\\Relations",
        "@return\\Illuminate\\Database\\Eloquent\\Relations",
        "@return \\Illuminate\\Database\\Eloquent\\Relations"
      ]
    },
    {
      "regex": "^MUL\\s*R(\\d+)\\s*,\\s*R(\\d+)$",
      "exceptionStackTrace": null,
      "matches": [
        "MUL R0 , R00",
        "MUL R0 , R",
        "MUL R0 ,  R0",
        "MUL R0 ,R0",
        "MUL R0  , R0",
        "MUL R0, R0",
        "MUL R00 , R0",
        "MUL R , R0",
        "MUL  R0 , R0",
        "MULR0 , R0",
        "MULR0,R0",
        "MUL R0 , R0"
      ]
    },
    {
      "regex": "drive state is:  active",
      "exceptionStackTrace": null,
      "matches": ["drive state is:  active"]
    },
    {
      "regex": "jpegoptim:\\s*(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "jpegoptim: :",
        "jpegoptim: eVil",
        "jpegoptim: EVIL",
        "jpegoptim: ev_il",
        "jpegoptim: ev il",
        "jpegoptim: ev4il",
        "jpegoptim: e",
        "jpegoptim:  ",
        "jpegoptim: 6",
        "jpegoptim: _",
        "jpegoptim: ",
        "jpegoptim:  evil",
        "jpegoptim:evil",
        "jpegoptim:",
        "jpegoptim: evil"
      ]
    },
    {
      "regex": "^TKTAuth(\\w)",
      "exceptionStackTrace": null,
      "matches": ["TKTAuth_", "TKTAuthA", "TKTAuth0", "TKTAutha"]
    },
    {
      "regex": "b[1-9.]+",
      "exceptionStackTrace": null,
      "matches": ["b..", "b", "b1", "b0", "b."]
    },
    {
      "regex": "([0-9]+)(\\s*\\.\\.\\s*|\\s+(to|till)\\s+)([0-9]+)",
      "exceptionStackTrace": null,
      "matches": [
        "0 to  0",
        "0 to0",
        "0  to 0",
        "0to 0",
        "0 .. 00",
        "0 .. ",
        "0 ..  0",
        "0 ..0",
        "0  .. 0",
        "0.. 0",
        "00 .. 0",
        " .. 0",
        "0..0",
        "0 till 0",
        "0 to 0",
        "0 .. 0"
      ]
    },
    {
      "regex": "^the progress bar indicated by \"(.*?)\" can determine the following properties:$",
      "exceptionStackTrace": null,
      "matches": [
        "the progress bar indicated by \":\" can determine the following properties:",
        "the progress bar indicated by \"\"\" can determine the following properties:",
        "the progress bar indicated by \"eVil\" can determine the following properties:",
        "the progress bar indicated by \"EVIL\" can determine the following properties:",
        "the progress bar indicated by \"ev_il\" can determine the following properties:",
        "the progress bar indicated by \"ev il\" can determine the following properties:",
        "the progress bar indicated by \"ev4il\" can determine the following properties:",
        "the progress bar indicated by \"e\" can determine the following properties:",
        "the progress bar indicated by \" \" can determine the following properties:",
        "the progress bar indicated by \"6\" can determine the following properties:",
        "the progress bar indicated by \"_\" can determine the following properties:",
        "the progress bar indicated by \"\" can determine the following properties:",
        "the progress bar indicated by \"evil\" can determine the following properties:"
      ]
    },
    {
      "regex": "^(https?\\:\\/\\/)?(www\\.)?(youtube\\.com|youtu\\.?be)((\\/playlist\\?)|\\/watch\\?).*(list=)(.*)(&|$)",
      "exceptionStackTrace": null,
      "matches": [
        "https://www.youtu..be/playlist?evillist=evil&",
        "https://www.youtube/playlist?evillist=evil&",
        "https://www.youtube.com/playlist?evillist=?&",
        "https://www.youtube.com/playlist?evillist==&",
        "https://www.youtube.com/playlist?evillist=:&",
        "https://www.youtube.com/playlist?evillist=/&",
        "https://www.youtube.com/playlist?evillist=.&",
        "https://www.youtube.com/playlist?evillist=&&",
        "https://www.youtube.com/playlist?evillist=eVil&",
        "https://www.youtube.com/playlist?evillist=EVIL&",
        "https://www.youtube.com/playlist?evillist=ev_il&",
        "https://www.youtube.com/playlist?evillist=ev il&",
        "https://www.youtube.com/playlist?evillist=ev4il&",
        "https://www.youtube.com/playlist?evillist=e&",
        "https://www.youtube.com/playlist?evillist= &",
        "https://www.youtube.com/playlist?evillist=6&",
        "https://www.youtube.com/playlist?evillist=_&",
        "https://www.youtube.com/playlist?evillist=&",
        "https://www.youtube.com/playlist??list=evil&",
        "https://www.youtube.com/playlist?=list=evil&",
        "https://www.youtube.com/playlist?:list=evil&",
        "https://www.youtube.com/playlist?/list=evil&",
        "https://www.youtube.com/playlist?.list=evil&",
        "https://www.youtube.com/playlist?&list=evil&",
        "https://www.youtube.com/playlist?eVillist=evil&",
        "https://www.youtube.com/playlist?EVILlist=evil&",
        "https://www.youtube.com/playlist?ev_illist=evil&",
        "https://www.youtube.com/playlist?ev illist=evil&",
        "https://www.youtube.com/playlist?ev4illist=evil&",
        "https://www.youtube.com/playlist?elist=evil&",
        "https://www.youtube.com/playlist? list=evil&",
        "https://www.youtube.com/playlist?6list=evil&",
        "https://www.youtube.com/playlist?_list=evil&",
        "https://www.youtube.com/playlist?list=evil&",
        "https://www.www.youtube.com/playlist?evillist=evil&",
        "https://youtube.com/playlist?evillist=evil&",
        "https://https://www.youtube.com/playlist?evillist=evil&",
        "www.youtube.com/playlist?evillist=evil&",
        "httpss://www.youtube.com/playlist?evillist=evil&",
        "http://www.youtube.com/playlist?evillist=evil&",
        "youtube/playlist?list=&",
        "youtube.com/watch?list=&",
        "youtube.com/playlist?list=",
        "youtube.com/playlist?list=&",
        "https://www.youtu.be/playlist?evillist=evil&",
        "https://www.youtube.com/watch?evillist=evil&",
        "https://www.youtube.com/playlist?evillist=evil",
        "https://www.youtube.com/playlist?evillist=evil&"
      ]
    },
    {
      "regex": "\\/(\\w+)\\/\\w+.php",
      "exceptionStackTrace": null,
      "matches": [
        "/evil/evilAphp",
        "/evil/evil0php",
        "/evil/evil/php",
        "/evil/evil php",
        "/evil/eVilaphp",
        "/evil/EVILaphp",
        "/evil/ev_ilaphp",
        "/evil/ev ilaphp",
        "/evil/ev4ilaphp",
        "/evil/eaphp",
        "/evil/ aphp",
        "/evil/6aphp",
        "/evil/_aphp",
        "/evil/aphp",
        "/eVil/evilaphp",
        "/EVIL/evilaphp",
        "/ev_il/evilaphp",
        "/ev il/evilaphp",
        "/ev4il/evilaphp",
        "/e/evilaphp",
        "/ /evilaphp",
        "/6/evilaphp",
        "/_/evilaphp",
        "//evilaphp",
        "/evil/evilaphp"
      ]
    },
    {
      "regex": "Coordinates must be provided",
      "exceptionStackTrace": null,
      "matches": ["Coordinates must be provided"]
    },
    {
      "regex": "\\G\\s*,\\s*",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\G"
      },
      "matches": []
    },
    {
      "regex": "sap.ui.layout.BlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sap.m.Link.",
      "exceptionStackTrace": null,
      "matches": [
        "sapauialayoutaBlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sapamaLinkA",
        "sapauialayoutaBlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sapamaLink:",
        "sapauialayoutaBlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sapamaLink0",
        "sapauialayoutaBlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sapamaLink'",
        "sapauialayoutaBlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sapamaLink ",
        "sapauialayoutaBlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sapamALinka",
        "sapauialayoutaBlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sapam:Linka",
        "sapauialayoutaBlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sapam0Linka",
        "sapauialayoutaBlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sapam'Linka",
        "sapauialayoutaBlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sapam Linka",
        "sapauialayoutaBlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sapAmaLinka",
        "sapauialayoutaBlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sap:maLinka",
        "sapauialayoutaBlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sap0maLinka",
        "sapauialayoutaBlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sap'maLinka",
        "sapauialayoutaBlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sap maLinka",
        "sapauialayoutABlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sapamaLinka",
        "sapauialayout:BlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sapamaLinka",
        "sapauialayout0BlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sapamaLinka",
        "sapauialayout'BlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sapamaLinka",
        "sapauialayout BlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sapamaLinka",
        "sapauiAlayoutaBlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sapamaLinka",
        "sapaui:layoutaBlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sapamaLinka",
        "sapaui0layoutaBlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sapamaLinka",
        "sapaui'layoutaBlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sapamaLinka",
        "sapaui layoutaBlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sapamaLinka",
        "sapAuialayoutaBlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sapamaLinka",
        "sap:uialayoutaBlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sapamaLinka",
        "sap0uialayoutaBlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sapamaLinka",
        "sap'uialayoutaBlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sapamaLinka",
        "sap uialayoutaBlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sapamaLinka",
        "sapauialayoutaBlockLayoutCell secondCell: Can't add value for titleLink aggregation different than sapamaLinka"
      ]
    },
    {
      "regex": "^\\s*#\\s*define\\s+GDK_([a-zA-Z0-9_]+)\\s+(\\w+)$",
      "exceptionStackTrace": null,
      "matches": [
        " # define GDK_evil eVil",
        " # define GDK_evil EVIL",
        " # define GDK_evil ev_il",
        " # define GDK_evil ev il",
        " # define GDK_evil ev4il",
        " # define GDK_evil e",
        " # define GDK_evil  ",
        " # define GDK_evil 6",
        " # define GDK_evil _",
        " # define GDK_evil ",
        " # define GDK_evil  evil",
        " # define GDK_evilevil",
        " # define GDK_# evil",
        " # define GDK_eVil evil",
        " # define GDK_EVIL evil",
        " # define GDK_ev_il evil",
        " # define GDK_ev il evil",
        " # define GDK_ev4il evil",
        " # define GDK_e evil",
        " # define GDK_  evil",
        " # define GDK_6 evil",
        " # define GDK__ evil",
        " # define GDK_ evil",
        " # define  GDK_evil evil",
        " # defineGDK_evil evil",
        " #  define GDK_evil evil",
        " #define GDK_evil evil",
        "  # define GDK_evil evil",
        "# define GDK_evil evil",
        "#define GDK_evil evil",
        " # define GDK_evil evil"
      ]
    },
    {
      "regex": "Too many calls to the `assert.async` callback",
      "exceptionStackTrace": null,
      "matches": [
        "Too many calls to the `assert`async` callback",
        "Too many calls to the `assertAasync` callback",
        "Too many calls to the `assert0async` callback",
        "Too many calls to the `assert async` callback",
        "Too many calls to the `assertaasync` callback"
      ]
    },
    {
      "regex": "^(?P<index>\\d+):\\s+(?P<name>\\S+)\\s+inet6?\\s+(?P<ip>[\\da-f.:]+)/(?P<mask>\\d+)\\s+.*",
      "exceptionStackTrace": null,
      "matches": [
        "0: evil inet6 :/0 :",
        "0: evil inet6 :/0 /",
        "0: evil inet6 :/0 .",
        "0: evil inet6 :/0 eVil",
        "0: evil inet6 :/0 EVIL",
        "0: evil inet6 :/0 ev_il",
        "0: evil inet6 :/0 ev il",
        "0: evil inet6 :/0 ev4il",
        "0: evil inet6 :/0 e",
        "0: evil inet6 :/0  ",
        "0: evil inet6 :/0 6",
        "0: evil inet6 :/0 _",
        "0: evil inet6 :/0 ",
        "0: evil inet6 :/0  evil",
        "0: evil inet6 :/0evil",
        "0: evil inet6 :/00 evil",
        "0: evil inet6 :/ evil",
        "0: evil inet6 ::/0 evil",
        "0: evil inet6 /0 evil",
        "0: evil inet6 g/0 evil",
        "0: evil inet6 a/0 evil",
        "0: evil inet6 0/0 evil",
        "0: evil inet6 ./0 evil",
        "0: evil inet6  :/0 evil",
        "0: evil inet6:/0 evil",
        "0: evil inet66 :/0 evil",
        "0: evil inet :/0 evil",
        "0: evil  inet6 :/0 evil",
        "0: evilinet6 :/0 evil",
        "0: : inet6 :/0 evil",
        "0: / inet6 :/0 evil",
        "0: . inet6 :/0 evil",
        "0: eVil inet6 :/0 evil",
        "0: EVIL inet6 :/0 evil",
        "0: ev_il inet6 :/0 evil",
        "0: ev il inet6 :/0 evil",
        "0: ev4il inet6 :/0 evil",
        "0: e inet6 :/0 evil",
        "0:   inet6 :/0 evil",
        "0: 6 inet6 :/0 evil",
        "0: _ inet6 :/0 evil",
        "0:  inet6 :/0 evil",
        "0:  evil inet6 :/0 evil",
        "0:evil inet6 :/0 evil",
        "00: evil inet6 :/0 evil",
        ": evil inet6 :/0 evil",
        "0: evil inet :/0 ",
        "0: evil inet6 :/0 evil"
      ]
    },
    {
      "regex": "\"params\":{.*\"argv\":\".*spec/integration/rails/.+_spec.rb\".*}",
      "exceptionStackTrace": null,
      "matches": [
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/evil_specarb\"}}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/evil_specarb\"{}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/evil_specarb\":}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/evil_specarb\"/}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/evil_specarb\"\"}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/evil_specarb\"eVil}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/evil_specarb\"EVIL}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/evil_specarb\"ev_il}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/evil_specarb\"ev il}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/evil_specarb\"ev4il}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/evil_specarb\"e}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/evil_specarb\" }",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/evil_specarb\"6}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/evil_specarb\"_}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/evil_specarb\"}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/evil_spec}rb\"evil}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/evil_spec{rb\"evil}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/evil_spec_rb\"evil}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/evil_specArb\"evil}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/evil_spec:rb\"evil}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/evil_spec0rb\"evil}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/evil_spec/rb\"evil}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/evil_spec\"rb\"evil}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/evil_spec rb\"evil}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/}_specarb\"evil}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/{_specarb\"evil}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/:_specarb\"evil}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails//_specarb\"evil}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/\"_specarb\"evil}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/eVil_specarb\"evil}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/EVIL_specarb\"evil}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/ev_il_specarb\"evil}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/ev il_specarb\"evil}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/ev4il_specarb\"evil}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/e_specarb\"evil}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/ _specarb\"evil}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/6_specarb\"evil}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/__specarb\"evil}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/_specarb\"evil}",
        "\"params\":{evil\"argv\":\"}spec/integration/rails/evil_specarb\"evil}",
        "\"params\":{evil\"argv\":\"{spec/integration/rails/evil_specarb\"evil}",
        "\"params\":{evil\"argv\":\":spec/integration/rails/evil_specarb\"evil}",
        "\"params\":{evil\"argv\":\"/spec/integration/rails/evil_specarb\"evil}",
        "\"params\":{evil\"argv\":\"\"spec/integration/rails/evil_specarb\"evil}",
        "\"params\":{evil\"argv\":\"eVilspec/integration/rails/evil_specarb\"evil}",
        "\"params\":{evil\"argv\":\"EVILspec/integration/rails/evil_specarb\"evil}",
        "\"params\":{evil\"argv\":\"ev_ilspec/integration/rails/evil_specarb\"evil}",
        "\"params\":{evil\"argv\":\"ev ilspec/integration/rails/evil_specarb\"evil}",
        "\"params\":{evil\"argv\":\"ev4ilspec/integration/rails/evil_specarb\"evil}",
        "\"params\":{evil\"argv\":\"espec/integration/rails/evil_specarb\"evil}",
        "\"params\":{evil\"argv\":\" spec/integration/rails/evil_specarb\"evil}",
        "\"params\":{evil\"argv\":\"6spec/integration/rails/evil_specarb\"evil}",
        "\"params\":{evil\"argv\":\"_spec/integration/rails/evil_specarb\"evil}",
        "\"params\":{evil\"argv\":\"spec/integration/rails/evil_specarb\"evil}",
        "\"params\":{}\"argv\":\"evilspec/integration/rails/evil_specarb\"evil}",
        "\"params\":{{\"argv\":\"evilspec/integration/rails/evil_specarb\"evil}",
        "\"params\":{:\"argv\":\"evilspec/integration/rails/evil_specarb\"evil}",
        "\"params\":{/\"argv\":\"evilspec/integration/rails/evil_specarb\"evil}",
        "\"params\":{\"\"argv\":\"evilspec/integration/rails/evil_specarb\"evil}",
        "\"params\":{eVil\"argv\":\"evilspec/integration/rails/evil_specarb\"evil}",
        "\"params\":{EVIL\"argv\":\"evilspec/integration/rails/evil_specarb\"evil}",
        "\"params\":{ev_il\"argv\":\"evilspec/integration/rails/evil_specarb\"evil}",
        "\"params\":{ev il\"argv\":\"evilspec/integration/rails/evil_specarb\"evil}",
        "\"params\":{ev4il\"argv\":\"evilspec/integration/rails/evil_specarb\"evil}",
        "\"params\":{e\"argv\":\"evilspec/integration/rails/evil_specarb\"evil}",
        "\"params\":{ \"argv\":\"evilspec/integration/rails/evil_specarb\"evil}",
        "\"params\":{6\"argv\":\"evilspec/integration/rails/evil_specarb\"evil}",
        "\"params\":{_\"argv\":\"evilspec/integration/rails/evil_specarb\"evil}",
        "\"params\":{\"argv\":\"evilspec/integration/rails/evil_specarb\"evil}",
        "\"params\":{\"argv\":\"spec/integration/rails/evil_specarb\"}",
        "\"params\":{evil\"argv\":\"evilspec/integration/rails/evil_specarb\"evil}"
      ]
    },
    {
      "regex": "this=(0x[0-9a-f]+):<Global proxy>",
      "exceptionStackTrace": null,
      "matches": [
        "this=0xaa:<Global proxy>",
        "this=0x:<Global proxy>",
        "this=0xg:<Global proxy>",
        "this=0x0:<Global proxy>",
        "this=0xa:<Global proxy>"
      ]
    },
    { "regex": "_list", "exceptionStackTrace": null, "matches": ["_list"] },
    {
      "regex": "\\s*<meta name=\"generator\"[^\"]+content=\"([^\"]+)\"\\s*\\/?>",
      "exceptionStackTrace": null,
      "matches": [
        " <meta name=\"generator\"evilcontent=\"evil\" //>",
        " <meta name=\"generator\"evilcontent=\"evil\" >",
        " <meta name=\"generator\"evilcontent=\"evil\"  />",
        " <meta name=\"generator\"evilcontent=\"evil\"/>",
        " <meta name=\"generator\"evilcontent=\">\" />",
        " <meta name=\"generator\"evilcontent=\"=\" />",
        " <meta name=\"generator\"evilcontent=\"<\" />",
        " <meta name=\"generator\"evilcontent=\"/\" />",
        " <meta name=\"generator\"evilcontent=\"\"\" />",
        " <meta name=\"generator\"evilcontent=\"eVil\" />",
        " <meta name=\"generator\"evilcontent=\"EVIL\" />",
        " <meta name=\"generator\"evilcontent=\"ev_il\" />",
        " <meta name=\"generator\"evilcontent=\"ev il\" />",
        " <meta name=\"generator\"evilcontent=\"ev4il\" />",
        " <meta name=\"generator\"evilcontent=\"e\" />",
        " <meta name=\"generator\"evilcontent=\" \" />",
        " <meta name=\"generator\"evilcontent=\"6\" />",
        " <meta name=\"generator\"evilcontent=\"_\" />",
        " <meta name=\"generator\"evilcontent=\"\" />",
        " <meta name=\"generator\">content=\"evil\" />",
        " <meta name=\"generator\"=content=\"evil\" />",
        " <meta name=\"generator\"<content=\"evil\" />",
        " <meta name=\"generator\"/content=\"evil\" />",
        " <meta name=\"generator\"\"content=\"evil\" />",
        " <meta name=\"generator\"eVilcontent=\"evil\" />",
        " <meta name=\"generator\"EVILcontent=\"evil\" />",
        " <meta name=\"generator\"ev_ilcontent=\"evil\" />",
        " <meta name=\"generator\"ev ilcontent=\"evil\" />",
        " <meta name=\"generator\"ev4ilcontent=\"evil\" />",
        " <meta name=\"generator\"econtent=\"evil\" />",
        " <meta name=\"generator\" content=\"evil\" />",
        " <meta name=\"generator\"6content=\"evil\" />",
        " <meta name=\"generator\"_content=\"evil\" />",
        " <meta name=\"generator\"content=\"evil\" />",
        "  <meta name=\"generator\"evilcontent=\"evil\" />",
        "<meta name=\"generator\"evilcontent=\"evil\" />",
        "<meta name=\"generator\"evilcontent=\"evil\">",
        " <meta name=\"generator\"evilcontent=\"evil\" />"
      ]
    },
    {
      "regex": "^subdiscount",
      "exceptionStackTrace": null,
      "matches": ["subdiscount"]
    },
    {
      "regex": "@((?:\\w|\\.)+)$",
      "exceptionStackTrace": null,
      "matches": ["@aa", "@", "@_", "@A", "@0", "@.", "@a"]
    },
    {
      "regex": "(?<=\\s",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "missing ), unterminated subpattern"
      },
      "matches": []
    },
    {
      "regex": "^\\s*QUERY.*",
      "exceptionStackTrace": null,
      "matches": [
        " QUERYeVil",
        " QUERYEVIL",
        " QUERYev_il",
        " QUERYev il",
        " QUERYev4il",
        " QUERYe",
        " QUERY ",
        " QUERY6",
        " QUERY_",
        " QUERY",
        "  QUERYevil",
        "QUERYevil",
        "QUERY",
        " QUERYevil"
      ]
    },
    {
      "regex": "class\\s+(\\w+)\\b",
      "exceptionStackTrace": null,
      "matches": [
        "class eVil",
        "class EVIL",
        "class ev_il",
        "class ev il",
        "class ev4il",
        "class e",
        "class  ",
        "class 6",
        "class _",
        "class ",
        "class  evil",
        "classevil",
        "class evil"
      ]
    },
    {
      "regex": "<meta[\\s]+?http-equiv=(['\"])content-type\\1[\\s]+?content=(['\"])(.+?)\\2",
      "exceptionStackTrace": null,
      "matches": [
        "<meta http-equiv=\"content-type\" content=\"=\"",
        "<meta http-equiv=\"content-type\" content=\"<\"",
        "<meta http-equiv=\"content-type\" content=\"-\"",
        "<meta http-equiv=\"content-type\" content=\"'\"",
        "<meta http-equiv=\"content-type\" content=\"\"\"",
        "<meta http-equiv=\"content-type\" content=\"eVil\"",
        "<meta http-equiv=\"content-type\" content=\"EVIL\"",
        "<meta http-equiv=\"content-type\" content=\"ev_il\"",
        "<meta http-equiv=\"content-type\" content=\"ev il\"",
        "<meta http-equiv=\"content-type\" content=\"ev4il\"",
        "<meta http-equiv=\"content-type\" content=\"e\"",
        "<meta http-equiv=\"content-type\" content=\" \"",
        "<meta http-equiv=\"content-type\" content=\"6\"",
        "<meta http-equiv=\"content-type\" content=\"_\"",
        "<meta http-equiv=\"content-type\" content=\"\"",
        "<meta http-equiv=\"content-type\" content='evil\"",
        "<meta http-equiv=\"content-type\"  content=\"evil\"",
        "<meta http-equiv=\"content-type\"content=\"evil\"",
        "<meta http-equiv='content-type\" content=\"evil\"",
        "<meta  http-equiv=\"content-type\" content=\"evil\"",
        "<metahttp-equiv=\"content-type\" content=\"evil\"",
        "<meta http-equiv=\"content-type\" content=\"evil\""
      ]
    },
    {
      "regex": "^.*Node (\\d+) not found.*$",
      "exceptionStackTrace": null,
      "matches": [
        "evilNode 0 not foundeVil",
        "evilNode 0 not foundEVIL",
        "evilNode 0 not foundev_il",
        "evilNode 0 not foundev il",
        "evilNode 0 not foundev4il",
        "evilNode 0 not founde",
        "evilNode 0 not found ",
        "evilNode 0 not found6",
        "evilNode 0 not found_",
        "evilNode 0 not found",
        "evilNode 00 not foundevil",
        "evilNode  not foundevil",
        "eVilNode 0 not foundevil",
        "EVILNode 0 not foundevil",
        "ev_ilNode 0 not foundevil",
        "ev ilNode 0 not foundevil",
        "ev4ilNode 0 not foundevil",
        "eNode 0 not foundevil",
        " Node 0 not foundevil",
        "6Node 0 not foundevil",
        "_Node 0 not foundevil",
        "Node 0 not foundevil",
        "Node 0 not found",
        "evilNode 0 not foundevil"
      ]
    },
    { "regex": "\\/vdc\\/", "exceptionStackTrace": null, "matches": ["/vdc/"] },
    {
      "regex": "^(?:#.*)",
      "exceptionStackTrace": null,
      "matches": [
        "##",
        "#eVil",
        "#EVIL",
        "#ev_il",
        "#ev il",
        "#ev4il",
        "#e",
        "# ",
        "#6",
        "#_",
        "#",
        "#evil"
      ]
    },
    {
      "regex": "^\\s*D/WebViewClassic.loadDataWithBaseURL\\(\\s*\\d+\\s*\\)\\s*:\\s*(?P<content>\\<.*)\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        " D/WebViewClassicaloadDataWithBaseURL( 0 ) : <evil  ",
        " D/WebViewClassicaloadDataWithBaseURL( 0 ) : <evil",
        " D/WebViewClassicaloadDataWithBaseURL( 0 ) : << ",
        " D/WebViewClassicaloadDataWithBaseURL( 0 ) : <: ",
        " D/WebViewClassicaloadDataWithBaseURL( 0 ) : </ ",
        " D/WebViewClassicaloadDataWithBaseURL( 0 ) : <) ",
        " D/WebViewClassicaloadDataWithBaseURL( 0 ) : <( ",
        " D/WebViewClassicaloadDataWithBaseURL( 0 ) : <eVil ",
        " D/WebViewClassicaloadDataWithBaseURL( 0 ) : <EVIL ",
        " D/WebViewClassicaloadDataWithBaseURL( 0 ) : <ev_il ",
        " D/WebViewClassicaloadDataWithBaseURL( 0 ) : <ev il ",
        " D/WebViewClassicaloadDataWithBaseURL( 0 ) : <ev4il ",
        " D/WebViewClassicaloadDataWithBaseURL( 0 ) : <e ",
        " D/WebViewClassicaloadDataWithBaseURL( 0 ) : <  ",
        " D/WebViewClassicaloadDataWithBaseURL( 0 ) : <6 ",
        " D/WebViewClassicaloadDataWithBaseURL( 0 ) : <_ ",
        " D/WebViewClassicaloadDataWithBaseURL( 0 ) : < ",
        " D/WebViewClassicaloadDataWithBaseURL( 0 ) :  <evil ",
        " D/WebViewClassicaloadDataWithBaseURL( 0 ) :<evil ",
        " D/WebViewClassicaloadDataWithBaseURL( 0 )  : <evil ",
        " D/WebViewClassicaloadDataWithBaseURL( 0 ): <evil ",
        " D/WebViewClassicaloadDataWithBaseURL( 0  ) : <evil ",
        " D/WebViewClassicaloadDataWithBaseURL( 0) : <evil ",
        " D/WebViewClassicaloadDataWithBaseURL( 00 ) : <evil ",
        " D/WebViewClassicaloadDataWithBaseURL(  ) : <evil ",
        " D/WebViewClassicaloadDataWithBaseURL(  0 ) : <evil ",
        " D/WebViewClassicaloadDataWithBaseURL(0 ) : <evil ",
        " D/WebViewClassicAloadDataWithBaseURL( 0 ) : <evil ",
        " D/WebViewClassic<loadDataWithBaseURL( 0 ) : <evil ",
        " D/WebViewClassic:loadDataWithBaseURL( 0 ) : <evil ",
        " D/WebViewClassic0loadDataWithBaseURL( 0 ) : <evil ",
        " D/WebViewClassic/loadDataWithBaseURL( 0 ) : <evil ",
        " D/WebViewClassic)loadDataWithBaseURL( 0 ) : <evil ",
        " D/WebViewClassic(loadDataWithBaseURL( 0 ) : <evil ",
        " D/WebViewClassic loadDataWithBaseURL( 0 ) : <evil ",
        "  D/WebViewClassicaloadDataWithBaseURL( 0 ) : <evil ",
        "D/WebViewClassicaloadDataWithBaseURL( 0 ) : <evil ",
        "D/WebViewClassicaloadDataWithBaseURL(0):<",
        " D/WebViewClassicaloadDataWithBaseURL( 0 ) : <evil "
      ]
    },
    {
      "regex": "([^\\w]):(\\w+)",
      "exceptionStackTrace": null,
      "matches": [
        " :eVil",
        " :EVIL",
        " :ev_il",
        " :ev il",
        " :ev4il",
        " :e",
        " : ",
        " :6",
        " :_",
        " :",
        "a:evil",
        "_:evil",
        "A:evil",
        "::evil",
        "0:evil",
        " :evil"
      ]
    },
    { "regex": "^percent", "exceptionStackTrace": null, "matches": ["percent"] },
    {
      "regex": "developer.apple.com/services-account/QH65B2/account/auth/key",
      "exceptionStackTrace": null,
      "matches": [
        "developeraappleAcom/services-account/QH65B2/account/auth/key",
        "developeraapple0com/services-account/QH65B2/account/auth/key",
        "developeraapple/com/services-account/QH65B2/account/auth/key",
        "developeraapple-com/services-account/QH65B2/account/auth/key",
        "developeraapple com/services-account/QH65B2/account/auth/key",
        "developerAappleacom/services-account/QH65B2/account/auth/key",
        "developer0appleacom/services-account/QH65B2/account/auth/key",
        "developer/appleacom/services-account/QH65B2/account/auth/key",
        "developer-appleacom/services-account/QH65B2/account/auth/key",
        "developer appleacom/services-account/QH65B2/account/auth/key",
        "developeraappleacom/services-account/QH65B2/account/auth/key"
      ]
    },
    {
      "regex": "^([1-9][0-9]*)?(\\.5)?[dD]([1-9][0-9]*)([+-][1-9][0-9]*)?$",
      "exceptionStackTrace": null,
      "matches": [
        "10.5D10-10-10",
        "10.5D10",
        "10.5D10-100",
        "10.5D10-1",
        "10.5D10-00",
        "10.5D10+10",
        "10.5D100-10",
        "10.5D1-10",
        "10.5D00-10",
        "10.5d10-10",
        "10.5a10-10",
        "10.5A10-10",
        "10.5.5D10-10",
        "10D10-10",
        "1010.5D10-10",
        ".5D10-10",
        "100.5D10-10",
        "1.5D10-10",
        "00.5D10-10",
        "D1",
        "10.5D10-10"
      ]
    },
    { "regex": "^[\\'\"]", "exceptionStackTrace": null, "matches": ["'", "\""] },
    {
      "regex": "^([^:]+)(:([0-9]+))?$",
      "exceptionStackTrace": null,
      "matches": [
        "evil:0:0",
        "evil:00",
        "evil:",
        "::0",
        "eVil:0",
        "EVIL:0",
        "ev_il:0",
        "ev il:0",
        "ev4il:0",
        "e:0",
        " :0",
        "6:0",
        "_:0",
        ":0",
        "evil",
        "evil:0"
      ]
    },
    {
      "regex": "(?m)[ \\n\\r]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "inspect-brk",
      "exceptionStackTrace": null,
      "matches": ["inspect-brk"]
    },
    {
      "regex": "^(.+?): ",
      "exceptionStackTrace": null,
      "matches": [
        ":: ",
        "eVil: ",
        "EVIL: ",
        "ev_il: ",
        "ev il: ",
        "ev4il: ",
        "e: ",
        " : ",
        "6: ",
        "_: ",
        ": ",
        "evil: "
      ]
    },
    {
      "regex": "perf\\((.*)\\):\\s*(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "perf(evil): :",
        "perf(evil): )",
        "perf(evil): (",
        "perf(evil): eVil",
        "perf(evil): EVIL",
        "perf(evil): ev_il",
        "perf(evil): ev il",
        "perf(evil): ev4il",
        "perf(evil): e",
        "perf(evil):  ",
        "perf(evil): 6",
        "perf(evil): _",
        "perf(evil): ",
        "perf(evil):  evil",
        "perf(evil):evil",
        "perf(:): evil",
        "perf()): evil",
        "perf((): evil",
        "perf(eVil): evil",
        "perf(EVIL): evil",
        "perf(ev_il): evil",
        "perf(ev il): evil",
        "perf(ev4il): evil",
        "perf(e): evil",
        "perf( ): evil",
        "perf(6): evil",
        "perf(_): evil",
        "perf(): evil",
        "perf():",
        "perf(evil): evil"
      ]
    },
    {
      "regex": "^ *(?:[Bb][Aa][Ss][Ii][Cc]) +([A-Za-z0-9._~+/-]+=*) *$",
      "exceptionStackTrace": null,
      "matches": [
        " basic evil=  ",
        " basic evil=",
        " basic evil== ",
        " basic evil ",
        " basic ~= ",
        " basic == ",
        " basic /= ",
        " basic .= ",
        " basic -= ",
        " basic += ",
        " basic eVil= ",
        " basic EVIL= ",
        " basic ev_il= ",
        " basic ev il= ",
        " basic ev4il= ",
        " basic e= ",
        " basic  = ",
        " basic 6= ",
        " basic _= ",
        " basic = ",
        " basic  evil= ",
        " basicevil= ",
        " basia evil= ",
        " basiC evil= ",
        " basiA evil= ",
        " basac evil= ",
        " basIc evil= ",
        " basAc evil= ",
        " baaic evil= ",
        " baSic evil= ",
        " baAic evil= ",
        " bbsic evil= ",
        " bBsic evil= ",
        " bAsic evil= ",
        " aasic evil= ",
        " Basic evil= ",
        " Aasic evil= ",
        "  basic evil= ",
        "basic evil= ",
        "basic evil",
        " basic evil= "
      ]
    },
    {
      "regex": "Transformer must be an object",
      "exceptionStackTrace": null,
      "matches": ["Transformer must be an object"]
    },
    {
      "regex": "^(^)(?:(;|\\#)(\\s*)(.*))$$",
      "exceptionStackTrace": null,
      "matches": [
        "; ;",
        "; #",
        "; eVil",
        "; EVIL",
        "; ev_il",
        "; ev il",
        "; ev4il",
        "; e",
        ";  ",
        "; 6",
        "; _",
        "; ",
        ";  evil",
        ";evil",
        "#",
        ";",
        "# evil",
        "; evil"
      ]
    },
    {
      "regex": "(?i)Successfully built\\s+(\\S+)",
      "exceptionStackTrace": null,
      "matches": [
        "Successfully built eVil",
        "Successfully built EVIL",
        "Successfully built ev_il",
        "Successfully built ev il",
        "Successfully built ev4il",
        "Successfully built e",
        "Successfully built  ",
        "Successfully built 6",
        "Successfully built _",
        "Successfully built ",
        "Successfully built  evil",
        "Successfully builtevil",
        "Successfully built evil"
      ]
    },
    { "regex": "^(?:NLPL)", "exceptionStackTrace": null, "matches": ["NLPL"] },
    { "regex": "EAP$", "exceptionStackTrace": null, "matches": ["EAP"] },
    {
      "regex": "not allow embedding of frames from ampproject\\.\\*",
      "exceptionStackTrace": null,
      "matches": ["not allow embedding of frames from ampproject.*"]
    },
    {
      "regex": "Expected configuration value apiKey to be defined.*stripe-connect",
      "exceptionStackTrace": null,
      "matches": [
        "Expected configuration value apiKey to be defined-stripe-connect",
        "Expected configuration value apiKey to be definedeVilstripe-connect",
        "Expected configuration value apiKey to be definedEVILstripe-connect",
        "Expected configuration value apiKey to be definedev_ilstripe-connect",
        "Expected configuration value apiKey to be definedev ilstripe-connect",
        "Expected configuration value apiKey to be definedev4ilstripe-connect",
        "Expected configuration value apiKey to be definedestripe-connect",
        "Expected configuration value apiKey to be defined stripe-connect",
        "Expected configuration value apiKey to be defined6stripe-connect",
        "Expected configuration value apiKey to be defined_stripe-connect",
        "Expected configuration value apiKey to be definedstripe-connect",
        "Expected configuration value apiKey to be definedevilstripe-connect"
      ]
    },
    {
      "regex": "$filter_include",
      "exceptionStackTrace": null,
      "matches": ["filter_include"]
    },
    {
      "regex": "^\\[\\!\\[(?P<text>[^\\]]+)\\]\\[(?P<badge>[^\\]]+)\\]\\]\\[(?P<target>[^\\]]+)\\]$",
      "exceptionStackTrace": null,
      "matches": [
        "[![evil][evil]][]]",
        "[![evil][evil]][[]",
        "[![evil][evil]][!]",
        "[![evil][evil]][eVil]",
        "[![evil][evil]][EVIL]",
        "[![evil][evil]][ev_il]",
        "[![evil][evil]][ev il]",
        "[![evil][evil]][ev4il]",
        "[![evil][evil]][e]",
        "[![evil][evil]][ ]",
        "[![evil][evil]][6]",
        "[![evil][evil]][_]",
        "[![evil][evil]][]",
        "[![evil][]]][evil]",
        "[![evil][[]][evil]",
        "[![evil][!]][evil]",
        "[![evil][eVil]][evil]",
        "[![evil][EVIL]][evil]",
        "[![evil][ev_il]][evil]",
        "[![evil][ev il]][evil]",
        "[![evil][ev4il]][evil]",
        "[![evil][e]][evil]",
        "[![evil][ ]][evil]",
        "[![evil][6]][evil]",
        "[![evil][_]][evil]",
        "[![evil][]][evil]",
        "[![]][evil]][evil]",
        "[![[][evil]][evil]",
        "[![!][evil]][evil]",
        "[![eVil][evil]][evil]",
        "[![EVIL][evil]][evil]",
        "[![ev_il][evil]][evil]",
        "[![ev il][evil]][evil]",
        "[![ev4il][evil]][evil]",
        "[![e][evil]][evil]",
        "[![ ][evil]][evil]",
        "[![6][evil]][evil]",
        "[![_][evil]][evil]",
        "[![][evil]][evil]",
        "[![evil][evil]][evil]"
      ]
    },
    {
      "regex": "\\s+|\\t+|-",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "(\\d+.\\d.\\d \\(.*?\\)\n.*?)\n\n\n---\n\n\n",
      "exceptionStackTrace": null,
      "matches": [
        "0a0a0 (evil)\n-\n\n\n---\n\n\n",
        "0a0a0 (evil)\n)\n\n\n---\n\n\n",
        "0a0a0 (evil)\n(\n\n\n---\n\n\n",
        "0a0a0 (evil)\neVil\n\n\n---\n\n\n",
        "0a0a0 (evil)\nEVIL\n\n\n---\n\n\n",
        "0a0a0 (evil)\nev_il\n\n\n---\n\n\n",
        "0a0a0 (evil)\nev il\n\n\n---\n\n\n",
        "0a0a0 (evil)\nev4il\n\n\n---\n\n\n",
        "0a0a0 (evil)\ne\n\n\n---\n\n\n",
        "0a0a0 (evil)\n \n\n\n---\n\n\n",
        "0a0a0 (evil)\n6\n\n\n---\n\n\n",
        "0a0a0 (evil)\n_\n\n\n---\n\n\n",
        "0a0a0 (evil)\n\n\n\n---\n\n\n",
        "0a0a0 (-)\nevil\n\n\n---\n\n\n",
        "0a0a0 ())\nevil\n\n\n---\n\n\n",
        "0a0a0 (()\nevil\n\n\n---\n\n\n",
        "0a0a0 (eVil)\nevil\n\n\n---\n\n\n",
        "0a0a0 (EVIL)\nevil\n\n\n---\n\n\n",
        "0a0a0 (ev_il)\nevil\n\n\n---\n\n\n",
        "0a0a0 (ev il)\nevil\n\n\n---\n\n\n",
        "0a0a0 (ev4il)\nevil\n\n\n---\n\n\n",
        "0a0a0 (e)\nevil\n\n\n---\n\n\n",
        "0a0a0 ( )\nevil\n\n\n---\n\n\n",
        "0a0a0 (6)\nevil\n\n\n---\n\n\n",
        "0a0a0 (_)\nevil\n\n\n---\n\n\n",
        "0a0a0 ()\nevil\n\n\n---\n\n\n",
        "0a0A0 (evil)\nevil\n\n\n---\n\n\n",
        "0a000 (evil)\nevil\n\n\n---\n\n\n",
        "0a0-0 (evil)\nevil\n\n\n---\n\n\n",
        "0a0)0 (evil)\nevil\n\n\n---\n\n\n",
        "0a0(0 (evil)\nevil\n\n\n---\n\n\n",
        "0a0 0 (evil)\nevil\n\n\n---\n\n\n",
        "0A0a0 (evil)\nevil\n\n\n---\n\n\n",
        "000a0 (evil)\nevil\n\n\n---\n\n\n",
        "0-0a0 (evil)\nevil\n\n\n---\n\n\n",
        "0)0a0 (evil)\nevil\n\n\n---\n\n\n",
        "0(0a0 (evil)\nevil\n\n\n---\n\n\n",
        "0 0a0 (evil)\nevil\n\n\n---\n\n\n",
        "00a0a0 (evil)\nevil\n\n\n---\n\n\n",
        "a0a0 (evil)\nevil\n\n\n---\n\n\n",
        "0a0a0 ()\n\n\n\n---\n\n\n",
        "0a0a0 (evil)\nevil\n\n\n---\n\n\n"
      ]
    },
    {
      "regex": "\n        <preApprovalRequest>\n          .*<preApproval>\n            .*<finalDate>2020-12-31T.*\n        ",
      "exceptionStackTrace": null,
      "matches": [
        "\n        <preApprovalRequest>\n          evil<preApproval>\n            evil<finalDate>2020-12-31T>\n        ",
        "\n        <preApprovalRequest>\n          evil<preApproval>\n            evil<finalDate>2020-12-31T<\n        ",
        "\n        <preApprovalRequest>\n          evil<preApproval>\n            evil<finalDate>2020-12-31T-\n        ",
        "\n        <preApprovalRequest>\n          evil<preApproval>\n            evil<finalDate>2020-12-31TeVil\n        ",
        "\n        <preApprovalRequest>\n          evil<preApproval>\n            evil<finalDate>2020-12-31TEVIL\n        ",
        "\n        <preApprovalRequest>\n          evil<preApproval>\n            evil<finalDate>2020-12-31Tev_il\n        ",
        "\n        <preApprovalRequest>\n          evil<preApproval>\n            evil<finalDate>2020-12-31Tev il\n        ",
        "\n        <preApprovalRequest>\n          evil<preApproval>\n            evil<finalDate>2020-12-31Tev4il\n        ",
        "\n        <preApprovalRequest>\n          evil<preApproval>\n            evil<finalDate>2020-12-31Te\n        ",
        "\n        <preApprovalRequest>\n          evil<preApproval>\n            evil<finalDate>2020-12-31T \n        ",
        "\n        <preApprovalRequest>\n          evil<preApproval>\n            evil<finalDate>2020-12-31T6\n        ",
        "\n        <preApprovalRequest>\n          evil<preApproval>\n            evil<finalDate>2020-12-31T_\n        ",
        "\n        <preApprovalRequest>\n          evil<preApproval>\n            evil<finalDate>2020-12-31T\n        ",
        "\n        <preApprovalRequest>\n          evil<preApproval>\n            ><finalDate>2020-12-31Tevil\n        ",
        "\n        <preApprovalRequest>\n          evil<preApproval>\n            <<finalDate>2020-12-31Tevil\n        ",
        "\n        <preApprovalRequest>\n          evil<preApproval>\n            -<finalDate>2020-12-31Tevil\n        ",
        "\n        <preApprovalRequest>\n          evil<preApproval>\n            eVil<finalDate>2020-12-31Tevil\n        ",
        "\n        <preApprovalRequest>\n          evil<preApproval>\n            EVIL<finalDate>2020-12-31Tevil\n        ",
        "\n        <preApprovalRequest>\n          evil<preApproval>\n            ev_il<finalDate>2020-12-31Tevil\n        ",
        "\n        <preApprovalRequest>\n          evil<preApproval>\n            ev il<finalDate>2020-12-31Tevil\n        ",
        "\n        <preApprovalRequest>\n          evil<preApproval>\n            ev4il<finalDate>2020-12-31Tevil\n        ",
        "\n        <preApprovalRequest>\n          evil<preApproval>\n            e<finalDate>2020-12-31Tevil\n        ",
        "\n        <preApprovalRequest>\n          evil<preApproval>\n             <finalDate>2020-12-31Tevil\n        ",
        "\n        <preApprovalRequest>\n          evil<preApproval>\n            6<finalDate>2020-12-31Tevil\n        ",
        "\n        <preApprovalRequest>\n          evil<preApproval>\n            _<finalDate>2020-12-31Tevil\n        ",
        "\n        <preApprovalRequest>\n          evil<preApproval>\n            <finalDate>2020-12-31Tevil\n        ",
        "\n        <preApprovalRequest>\n          ><preApproval>\n            evil<finalDate>2020-12-31Tevil\n        ",
        "\n        <preApprovalRequest>\n          <<preApproval>\n            evil<finalDate>2020-12-31Tevil\n        ",
        "\n        <preApprovalRequest>\n          -<preApproval>\n            evil<finalDate>2020-12-31Tevil\n        ",
        "\n        <preApprovalRequest>\n          eVil<preApproval>\n            evil<finalDate>2020-12-31Tevil\n        ",
        "\n        <preApprovalRequest>\n          EVIL<preApproval>\n            evil<finalDate>2020-12-31Tevil\n        ",
        "\n        <preApprovalRequest>\n          ev_il<preApproval>\n            evil<finalDate>2020-12-31Tevil\n        ",
        "\n        <preApprovalRequest>\n          ev il<preApproval>\n            evil<finalDate>2020-12-31Tevil\n        ",
        "\n        <preApprovalRequest>\n          ev4il<preApproval>\n            evil<finalDate>2020-12-31Tevil\n        ",
        "\n        <preApprovalRequest>\n          e<preApproval>\n            evil<finalDate>2020-12-31Tevil\n        ",
        "\n        <preApprovalRequest>\n           <preApproval>\n            evil<finalDate>2020-12-31Tevil\n        ",
        "\n        <preApprovalRequest>\n          6<preApproval>\n            evil<finalDate>2020-12-31Tevil\n        ",
        "\n        <preApprovalRequest>\n          _<preApproval>\n            evil<finalDate>2020-12-31Tevil\n        ",
        "\n        <preApprovalRequest>\n          <preApproval>\n            evil<finalDate>2020-12-31Tevil\n        ",
        "\n        <preApprovalRequest>\n          <preApproval>\n            <finalDate>2020-12-31T\n        ",
        "\n        <preApprovalRequest>\n          evil<preApproval>\n            evil<finalDate>2020-12-31Tevil\n        "
      ]
    },
    {
      "regex": "^\\s*info",
      "exceptionStackTrace": null,
      "matches": ["  info", "info", " info"]
    },
    {
      "regex": "^(\\w{40})",
      "exceptionStackTrace": null,
      "matches": [
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
      ]
    },
    {
      "regex": "TimeoutFailer",
      "exceptionStackTrace": null,
      "matches": ["TimeoutFailer"]
    },
    {
      "regex": "^I (cite|reference) the following items as \"(.*?)\":$",
      "exceptionStackTrace": null,
      "matches": [
        "I cite the following items as \":\":",
        "I cite the following items as \"\"\":",
        "I cite the following items as \"eVil\":",
        "I cite the following items as \"EVIL\":",
        "I cite the following items as \"ev_il\":",
        "I cite the following items as \"ev il\":",
        "I cite the following items as \"ev4il\":",
        "I cite the following items as \"e\":",
        "I cite the following items as \" \":",
        "I cite the following items as \"6\":",
        "I cite the following items as \"_\":",
        "I reference the following items as \"\":",
        "I cite the following items as \"\":",
        "I reference the following items as \"evil\":",
        "I cite the following items as \"evil\":"
      ]
    },
    { "regex": "&#10;", "exceptionStackTrace": null, "matches": ["&#10;"] },
    {
      "regex": "^[123]",
      "exceptionStackTrace": null,
      "matches": ["2", "1", "0", "3"]
    },
    {
      "regex": ".*Ultra-4",
      "exceptionStackTrace": null,
      "matches": [
        "-Ultra-4",
        "eVilUltra-4",
        "EVILUltra-4",
        "ev_ilUltra-4",
        "ev ilUltra-4",
        "ev4ilUltra-4",
        "eUltra-4",
        " Ultra-4",
        "6Ultra-4",
        "_Ultra-4",
        "Ultra-4",
        "evilUltra-4"
      ]
    },
    {
      "regex": "(</?(?:html|head|body|div|p|form|table|thead|tbody|tfoot|tr|td|th|ul|ol|li|div|p|blockquote|cite|hr)[^>]*>)\\s*<br />",
      "exceptionStackTrace": null,
      "matches": [
        "</htmlevil>  <br />",
        "</htmlevil><br />",
        "</html>> <br />",
        "</html<> <br />",
        "</html/> <br />",
        "</htmleVil> <br />",
        "</htmlEVIL> <br />",
        "</htmlev_il> <br />",
        "</htmlev il> <br />",
        "</htmlev4il> <br />",
        "</htmle> <br />",
        "</html > <br />",
        "</html6> <br />",
        "</html_> <br />",
        "</html> <br />",
        "<//htmlevil> <br />",
        "<htmlevil> <br />",
        "<hr><br />",
        "<cite><br />",
        "<blockquote><br />",
        "<li><br />",
        "<ol><br />",
        "<ul><br />",
        "<th><br />",
        "<td><br />",
        "<tr><br />",
        "<tfoot><br />",
        "<tbody><br />",
        "<thead><br />",
        "<table><br />",
        "<form><br />",
        "<p><br />",
        "<div><br />",
        "<body><br />",
        "<head><br />",
        "<html><br />",
        "</hrevil> <br />",
        "</citeevil> <br />",
        "</blockquoteevil> <br />",
        "</lievil> <br />",
        "</olevil> <br />",
        "</ulevil> <br />",
        "</thevil> <br />",
        "</tdevil> <br />",
        "</trevil> <br />",
        "</tfootevil> <br />",
        "</tbodyevil> <br />",
        "</theadevil> <br />",
        "</tableevil> <br />",
        "</formevil> <br />",
        "</pevil> <br />",
        "</divevil> <br />",
        "</bodyevil> <br />",
        "</headevil> <br />",
        "</htmlevil> <br />"
      ]
    },
    {
      "regex": "^msgstr \"(.*)\"",
      "exceptionStackTrace": null,
      "matches": [
        "msgstr \"\"\"",
        "msgstr \"eVil\"",
        "msgstr \"EVIL\"",
        "msgstr \"ev_il\"",
        "msgstr \"ev il\"",
        "msgstr \"ev4il\"",
        "msgstr \"e\"",
        "msgstr \" \"",
        "msgstr \"6\"",
        "msgstr \"_\"",
        "msgstr \"\"",
        "msgstr \"evil\""
      ]
    },
    {
      "regex": "cmi.interactions.(\\d+).",
      "exceptionStackTrace": null,
      "matches": [
        "cmiainteractionsa0_",
        "cmiainteractionsa0A",
        "cmiainteractionsa00",
        "cmiainteractionsa0 ",
        "cmiainteractionsa00a",
        "cmiainteractionsaa",
        "cmiainteractions_0a",
        "cmiainteractionsA0a",
        "cmiainteractions00a",
        "cmiainteractions 0a",
        "cmi_interactionsa0a",
        "cmiAinteractionsa0a",
        "cmi0interactionsa0a",
        "cmi interactionsa0a",
        "cmiainteractionsa0a"
      ]
    },
    {
      "regex": "^-.*[^\\.js]$",
      "exceptionStackTrace": null,
      "matches": [
        "-evils",
        "-evilj",
        "-evilA",
        "-evil0",
        "-evil.",
        "-evil-",
        "-evil ",
        "-.a",
        "--a",
        "-eVila",
        "-EVILa",
        "-ev_ila",
        "-ev ila",
        "-ev4ila",
        "-ea",
        "- a",
        "-6a",
        "-_a",
        "-a",
        "-evila"
      ]
    },
    {
      "regex": "([^\\\\]+|\\A)[~/]\\Z",
      "exceptionStackTrace": null,
      "matches": [
        "evil~",
        "~/",
        "\\/",
        "//",
        "eVil/",
        "EVIL/",
        "ev_il/",
        "ev il/",
        "ev4il/",
        "e/",
        " /",
        "6/",
        "_/",
        "/",
        "evil/"
      ]
    },
    {
      "regex": ".+::(\\S+)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil:::",
        "evil::eVil",
        "evil::EVIL",
        "evil::ev_il",
        "evil::ev il",
        "evil::ev4il",
        "evil::e",
        "evil:: ",
        "evil::6",
        "evil::_",
        "evil::",
        ":::evil",
        "eVil::evil",
        "EVIL::evil",
        "ev_il::evil",
        "ev il::evil",
        "ev4il::evil",
        "e::evil",
        " ::evil",
        "6::evil",
        "_::evil",
        "::evil",
        "evil::evil"
      ]
    },
    {
      "regex": "^I should fail when ask if the option \"(.*?)\" is setted$",
      "exceptionStackTrace": null,
      "matches": [
        "I should fail when ask if the option \"\"\" is setted",
        "I should fail when ask if the option \"eVil\" is setted",
        "I should fail when ask if the option \"EVIL\" is setted",
        "I should fail when ask if the option \"ev_il\" is setted",
        "I should fail when ask if the option \"ev il\" is setted",
        "I should fail when ask if the option \"ev4il\" is setted",
        "I should fail when ask if the option \"e\" is setted",
        "I should fail when ask if the option \" \" is setted",
        "I should fail when ask if the option \"6\" is setted",
        "I should fail when ask if the option \"_\" is setted",
        "I should fail when ask if the option \"\" is setted",
        "I should fail when ask if the option \"evil\" is setted"
      ]
    },
    {
      "regex": "\\/\\/.*\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "-nc|--no_catalog",
      "exceptionStackTrace": null,
      "matches": ["--no_catalog", "-nc"]
    },
    { "regex": "^0xf", "exceptionStackTrace": null, "matches": ["0xf"] },
    {
      "regex": "^(updater-?|update)",
      "exceptionStackTrace": null,
      "matches": ["updater--", "updater", "update", "updater-"]
    },
    {
      "regex": "\\. +",
      "exceptionStackTrace": null,
      "matches": [".  ", ".", ". "]
    },
    {
      "regex": "(^|[^0-9A-Za-z\u0b01\u0b05-\u0b0c\u0b0f-\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32-\u0b33\u0b35-\u0b39\u0b3c-\u0b3d\u0b3f\u0b41-\u0b44\u0b4d\u0b56\u0b5c-\u0b5d\u0b5f-\u0b63\u0b71])((?:2(?:[\\s\\xa0]*\u0b25\u0b47\u0b38\u0b32\u0b28\u0b40\u0b15\u0b40\u0b5f\u0b19|Thess|\\.[\\s\\xa0]*\u0b25\u0b47\u0b38\u0b32\u0b28\u0b40\u0b15\u0b40\u0b5f\u0b19)|\u0b26\u0b4d\u0b71\u0b3f\u0b24\u0b40\u0b5f[\\s\\xa0]*\u0b25\u0b47\u0b38\u0b32\u0b28\u0b40\u0b15\u0b40\u0b5f\u0b19|\u0b25\u0b47\u0b38\u0b32\u0b28\u0b40\u0b15\u0b40\u0b5f\u0b19\u0b4d\u0b15[\\s\\xa0]*\u0b2a\u0b4d\u0b30\u0b24\u0b3f[\\s\\xa0]*\u0b26\u0b4d\u0b71\u0b3f\u0b24\u0b40\u0b5f[\\s\\xa0]*\u0b2a\u0b24\u0b4d\u0b30))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 160"
      },
      "matches": []
    },
    {
      "regex": " ?\\(.*?\\)$",
      "exceptionStackTrace": null,
      "matches": [
        " ())",
        " (()",
        " (eVil)",
        " (EVIL)",
        " (ev_il)",
        " (ev il)",
        " (ev4il)",
        " (e)",
        " ( )",
        " (6)",
        " (_)",
        " ()",
        "  (evil)",
        "(evil)",
        "()",
        " (evil)"
      ]
    },
    {
      "regex": "\\Adown: [a-z\\/]+: \\d+",
      "exceptionStackTrace": null,
      "matches": [
        "down: evil: 00",
        "down: evil: ",
        "down: :: 0",
        "down: /: 0",
        "down: eVil: 0",
        "down: EVIL: 0",
        "down: ev_il: 0",
        "down: ev il: 0",
        "down: ev4il: 0",
        "down: e: 0",
        "down:  : 0",
        "down: 6: 0",
        "down: _: 0",
        "down: : 0",
        "down: evil: 0"
      ]
    },
    {
      "regex": "^ (.*) jar listing$",
      "exceptionStackTrace": null,
      "matches": [
        " eVil jar listing",
        " EVIL jar listing",
        " ev_il jar listing",
        " ev il jar listing",
        " ev4il jar listing",
        " e jar listing",
        "   jar listing",
        " 6 jar listing",
        " _ jar listing",
        "  jar listing",
        " evil jar listing"
      ]
    },
    { "regex": "GCA_", "exceptionStackTrace": null, "matches": ["GCA_"] },
    {
      "regex": "Test \"(?P<test>[a-zA-Z0-9(){}\\[\\]:;&_<>\\-, =]+)\" is skipped",
      "exceptionStackTrace": null,
      "matches": [
        "Test \"}\" is skipped",
        "Test \"{\" is skipped",
        "Test \"]\" is skipped",
        "Test \"[\" is skipped",
        "Test \">\" is skipped",
        "Test \"=\" is skipped",
        "Test \"<\" is skipped",
        "Test \";\" is skipped",
        "Test \":\" is skipped",
        "Test \"-\" is skipped",
        "Test \",\" is skipped",
        "Test \")\" is skipped",
        "Test \"(\" is skipped",
        "Test \"&\" is skipped",
        "Test \"\"\" is skipped",
        "Test \"eVil\" is skipped",
        "Test \"EVIL\" is skipped",
        "Test \"ev_il\" is skipped",
        "Test \"ev il\" is skipped",
        "Test \"ev4il\" is skipped",
        "Test \"e\" is skipped",
        "Test \" \" is skipped",
        "Test \"6\" is skipped",
        "Test \"_\" is skipped",
        "Test \"\" is skipped",
        "Test \"evil\" is skipped"
      ]
    },
    {
      "regex": "^\\s*#\\s*encoding\\s*:\\s*([^\\s]+)",
      "exceptionStackTrace": null,
      "matches": [
        " # encoding : :",
        " # encoding : #",
        " # encoding : eVil",
        " # encoding : EVIL",
        " # encoding : ev_il",
        " # encoding : ev il",
        " # encoding : ev4il",
        " # encoding : e",
        " # encoding :  ",
        " # encoding : 6",
        " # encoding : _",
        " # encoding : ",
        " # encoding :  evil",
        " # encoding :evil",
        " # encoding  : evil",
        " # encoding: evil",
        " #  encoding : evil",
        " #encoding : evil",
        "  # encoding : evil",
        "# encoding : evil",
        "#encoding:evil",
        " # encoding : evil"
      ]
    },
    {
      "regex": "                        /<\\s*meta\\s.*?(keywords|other).*?content\\s*=\\s*        #\u67e5\u627e\u6807\u8bc6\n                        ([\"\\'])?                                            #\u662f\u5426\u6709\u524d\u5f15\u53f7\n                        (?(2) (.*?)\\2 | ([^\\s\\>]+))                        #\u6839\u636e\u662f\u5426\u6709\u524d\u5f15\u53f7\u5339\u914d\u5185\u5bb9",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (internal): Unexpected extension ?("
      },
      "matches": []
    },
    {
      "regex": "\n            Content-Transfer-Encoding:\\ 7bit\n            .*\n            This\\ is\\ plain\\ text\\ US-ASCII\n            .*\n            Content-Transfer-Encoding:\\ quoted-printable\n            .*\n            Pok=E9mon\n          ",
      "exceptionStackTrace": null,
      "matches": [
        "\n            Content-Transfer-Encoding: 7bit\n            evil\n            This is plain text US-ASCII\n            evil\n            Content-Transfer-Encoding: quoted-printable\n            =\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            evil\n            This is plain text US-ASCII\n            evil\n            Content-Transfer-Encoding: quoted-printable\n            :\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            evil\n            This is plain text US-ASCII\n            evil\n            Content-Transfer-Encoding: quoted-printable\n            -\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            evil\n            This is plain text US-ASCII\n            evil\n            Content-Transfer-Encoding: quoted-printable\n            eVil\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            evil\n            This is plain text US-ASCII\n            evil\n            Content-Transfer-Encoding: quoted-printable\n            EVIL\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            evil\n            This is plain text US-ASCII\n            evil\n            Content-Transfer-Encoding: quoted-printable\n            ev_il\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            evil\n            This is plain text US-ASCII\n            evil\n            Content-Transfer-Encoding: quoted-printable\n            ev il\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            evil\n            This is plain text US-ASCII\n            evil\n            Content-Transfer-Encoding: quoted-printable\n            ev4il\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            evil\n            This is plain text US-ASCII\n            evil\n            Content-Transfer-Encoding: quoted-printable\n            e\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            evil\n            This is plain text US-ASCII\n            evil\n            Content-Transfer-Encoding: quoted-printable\n             \n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            evil\n            This is plain text US-ASCII\n            evil\n            Content-Transfer-Encoding: quoted-printable\n            6\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            evil\n            This is plain text US-ASCII\n            evil\n            Content-Transfer-Encoding: quoted-printable\n            _\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            evil\n            This is plain text US-ASCII\n            evil\n            Content-Transfer-Encoding: quoted-printable\n            \n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            evil\n            This is plain text US-ASCII\n            =\n            Content-Transfer-Encoding: quoted-printable\n            evil\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            evil\n            This is plain text US-ASCII\n            :\n            Content-Transfer-Encoding: quoted-printable\n            evil\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            evil\n            This is plain text US-ASCII\n            -\n            Content-Transfer-Encoding: quoted-printable\n            evil\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            evil\n            This is plain text US-ASCII\n            eVil\n            Content-Transfer-Encoding: quoted-printable\n            evil\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            evil\n            This is plain text US-ASCII\n            EVIL\n            Content-Transfer-Encoding: quoted-printable\n            evil\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            evil\n            This is plain text US-ASCII\n            ev_il\n            Content-Transfer-Encoding: quoted-printable\n            evil\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            evil\n            This is plain text US-ASCII\n            ev il\n            Content-Transfer-Encoding: quoted-printable\n            evil\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            evil\n            This is plain text US-ASCII\n            ev4il\n            Content-Transfer-Encoding: quoted-printable\n            evil\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            evil\n            This is plain text US-ASCII\n            e\n            Content-Transfer-Encoding: quoted-printable\n            evil\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            evil\n            This is plain text US-ASCII\n             \n            Content-Transfer-Encoding: quoted-printable\n            evil\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            evil\n            This is plain text US-ASCII\n            6\n            Content-Transfer-Encoding: quoted-printable\n            evil\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            evil\n            This is plain text US-ASCII\n            _\n            Content-Transfer-Encoding: quoted-printable\n            evil\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            evil\n            This is plain text US-ASCII\n            \n            Content-Transfer-Encoding: quoted-printable\n            evil\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            =\n            This is plain text US-ASCII\n            evil\n            Content-Transfer-Encoding: quoted-printable\n            evil\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            :\n            This is plain text US-ASCII\n            evil\n            Content-Transfer-Encoding: quoted-printable\n            evil\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            -\n            This is plain text US-ASCII\n            evil\n            Content-Transfer-Encoding: quoted-printable\n            evil\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            eVil\n            This is plain text US-ASCII\n            evil\n            Content-Transfer-Encoding: quoted-printable\n            evil\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            EVIL\n            This is plain text US-ASCII\n            evil\n            Content-Transfer-Encoding: quoted-printable\n            evil\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            ev_il\n            This is plain text US-ASCII\n            evil\n            Content-Transfer-Encoding: quoted-printable\n            evil\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            ev il\n            This is plain text US-ASCII\n            evil\n            Content-Transfer-Encoding: quoted-printable\n            evil\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            ev4il\n            This is plain text US-ASCII\n            evil\n            Content-Transfer-Encoding: quoted-printable\n            evil\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            e\n            This is plain text US-ASCII\n            evil\n            Content-Transfer-Encoding: quoted-printable\n            evil\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n             \n            This is plain text US-ASCII\n            evil\n            Content-Transfer-Encoding: quoted-printable\n            evil\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            6\n            This is plain text US-ASCII\n            evil\n            Content-Transfer-Encoding: quoted-printable\n            evil\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            _\n            This is plain text US-ASCII\n            evil\n            Content-Transfer-Encoding: quoted-printable\n            evil\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            \n            This is plain text US-ASCII\n            evil\n            Content-Transfer-Encoding: quoted-printable\n            evil\n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            \n            This is plain text US-ASCII\n            \n            Content-Transfer-Encoding: quoted-printable\n            \n            Pok=E9mon\n          ",
        "\n            Content-Transfer-Encoding: 7bit\n            evil\n            This is plain text US-ASCII\n            evil\n            Content-Transfer-Encoding: quoted-printable\n            evil\n            Pok=E9mon\n          "
      ]
    },
    {
      "regex": "\\Aassets:(?:precompile|clean)\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "(\\n)|(\\r)|(\\\\n)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^ipv6addr$",
      "exceptionStackTrace": null,
      "matches": ["ipv6addr"]
    },
    {
      "regex": "(\\d+)\\s+(.*?)$",
      "exceptionStackTrace": null,
      "matches": [
        "0 eVil",
        "0 EVIL",
        "0 ev_il",
        "0 ev il",
        "0 ev4il",
        "0 e",
        "0  ",
        "0 6",
        "0 _",
        "0  evil",
        "0evil",
        "00 evil",
        " evil",
        "0 ",
        "0 evil"
      ]
    },
    {
      "regex": "SAMPLE \\w+ 10",
      "exceptionStackTrace": null,
      "matches": [
        "SAMPLE eVil 10",
        "SAMPLE EVIL 10",
        "SAMPLE ev_il 10",
        "SAMPLE ev il 10",
        "SAMPLE ev4il 10",
        "SAMPLE e 10",
        "SAMPLE   10",
        "SAMPLE 6 10",
        "SAMPLE _ 10",
        "SAMPLE  10",
        "SAMPLE evil 10"
      ]
    },
    {
      "regex": "<a:skin.*?\\s+xmlns:a=\"http:\\/\\/ajax.org\\/2005\\/aml\"",
      "exceptionStackTrace": null,
      "matches": [
        "<a:skinevil xmlns:a=\"http://ajaxAorg/2005/aml\"",
        "<a:skinevil xmlns:a=\"http://ajax=org/2005/aml\"",
        "<a:skinevil xmlns:a=\"http://ajax<org/2005/aml\"",
        "<a:skinevil xmlns:a=\"http://ajax:org/2005/aml\"",
        "<a:skinevil xmlns:a=\"http://ajax0org/2005/aml\"",
        "<a:skinevil xmlns:a=\"http://ajax/org/2005/aml\"",
        "<a:skinevil xmlns:a=\"http://ajax\"org/2005/aml\"",
        "<a:skinevil xmlns:a=\"http://ajax org/2005/aml\"",
        "<a:skinevil  xmlns:a=\"http://ajaxaorg/2005/aml\"",
        "<a:skinevilxmlns:a=\"http://ajaxaorg/2005/aml\"",
        "<a:skin= xmlns:a=\"http://ajaxaorg/2005/aml\"",
        "<a:skin< xmlns:a=\"http://ajaxaorg/2005/aml\"",
        "<a:skin: xmlns:a=\"http://ajaxaorg/2005/aml\"",
        "<a:skin/ xmlns:a=\"http://ajaxaorg/2005/aml\"",
        "<a:skin\" xmlns:a=\"http://ajaxaorg/2005/aml\"",
        "<a:skineVil xmlns:a=\"http://ajaxaorg/2005/aml\"",
        "<a:skinEVIL xmlns:a=\"http://ajaxaorg/2005/aml\"",
        "<a:skinev_il xmlns:a=\"http://ajaxaorg/2005/aml\"",
        "<a:skinev il xmlns:a=\"http://ajaxaorg/2005/aml\"",
        "<a:skinev4il xmlns:a=\"http://ajaxaorg/2005/aml\"",
        "<a:skine xmlns:a=\"http://ajaxaorg/2005/aml\"",
        "<a:skin  xmlns:a=\"http://ajaxaorg/2005/aml\"",
        "<a:skin6 xmlns:a=\"http://ajaxaorg/2005/aml\"",
        "<a:skin_ xmlns:a=\"http://ajaxaorg/2005/aml\"",
        "<a:skin xmlns:a=\"http://ajaxaorg/2005/aml\"",
        "<a:skinevil xmlns:a=\"http://ajaxaorg/2005/aml\""
      ]
    },
    {
      "regex": "^set[A-Z_].*",
      "exceptionStackTrace": null,
      "matches": [
        "set_eVil",
        "set_EVIL",
        "set_ev_il",
        "set_ev il",
        "set_ev4il",
        "set_e",
        "set_ ",
        "set_6",
        "set__",
        "setAevil",
        "set_",
        "set_evil"
      ]
    },
    {
      "regex": "^{\\*\\*\\/[\\*\\.]?[\\w\\.-]+(\\/(\\*\\*)?)?(,\\*\\*\\/[\\*\\.]?[\\w\\.-]+(\\/(\\*\\*)?)?)*}$",
      "exceptionStackTrace": null,
      "matches": [
        "{**/.evil/**,**/.evil/**,**/.evil/**}",
        "{**/.evil/**}",
        "{**/.evil/**,**/.evil/**/**}",
        "{**/.evil/**,**/.evil}",
        "{**/.evil/**,**/.evil/****}",
        "{**/.evil/**,**/.evil/}",
        "{**/.evil/**,**/.}/**}",
        "{**/.evil/**,**/.{/**}",
        "{**/.evil/**,**/.//**}",
        "{**/.evil/**,**/../**}",
        "{**/.evil/**,**/.-/**}",
        "{**/.evil/**,**/.,/**}",
        "{**/.evil/**,**/.*/**}",
        "{**/.evil/**,**/.eVil/**}",
        "{**/.evil/**,**/.EVIL/**}",
        "{**/.evil/**,**/.ev_il/**}",
        "{**/.evil/**,**/.ev il/**}",
        "{**/.evil/**,**/.ev4il/**}",
        "{**/.evil/**,**/.e/**}",
        "{**/.evil/**,**/. /**}",
        "{**/.evil/**,**/.6/**}",
        "{**/.evil/**,**/._/**}",
        "{**/.evil/**,**/./**}",
        "{**/.evil/**,**/..evil/**}",
        "{**/.evil/**,**/evil/**}",
        "{**/.evil/**,**/*evil/**}",
        "{**/.evil/**/**,**/.evil/**}",
        "{**/.evil,**/.evil/**}",
        "{**/.evil/****,**/.evil/**}",
        "{**/.evil/,**/.evil/**}",
        "{**/.}/**,**/.evil/**}",
        "{**/.{/**,**/.evil/**}",
        "{**/.//**,**/.evil/**}",
        "{**/../**,**/.evil/**}",
        "{**/.-/**,**/.evil/**}",
        "{**/.,/**,**/.evil/**}",
        "{**/.*/**,**/.evil/**}",
        "{**/.eVil/**,**/.evil/**}",
        "{**/.EVIL/**,**/.evil/**}",
        "{**/.ev_il/**,**/.evil/**}",
        "{**/.ev il/**,**/.evil/**}",
        "{**/.ev4il/**,**/.evil/**}",
        "{**/.e/**,**/.evil/**}",
        "{**/. /**,**/.evil/**}",
        "{**/.6/**,**/.evil/**}",
        "{**/._/**,**/.evil/**}",
        "{**/./**,**/.evil/**}",
        "{**/..evil/**,**/.evil/**}",
        "{**/evil/**,**/.evil/**}",
        "{**/*evil/**,**/.evil/**}",
        "{**/evil}",
        "{**/.evil/**,**/.evil/**}"
      ]
    },
    {
      "regex": "<(rt-.*?-\\d+-\\d+)\\.(\\d+)-\\d+-\\d+\\@\\QRT->Config->Get('Organization')\\E>$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\Q"
      },
      "matches": []
    },
    {
      "regex": "\\/\\*TESTS\\*\\/",
      "exceptionStackTrace": null,
      "matches": ["/*TESTS*/"]
    },
    {
      "regex": "<h2[^>]*>([^<]+)<\\/h2>",
      "exceptionStackTrace": null,
      "matches": [
        "<h2evil>></h2>",
        "<h2evil><</h2>",
        "<h2evil>/</h2>",
        "<h2evil>eVil</h2>",
        "<h2evil>EVIL</h2>",
        "<h2evil>ev_il</h2>",
        "<h2evil>ev il</h2>",
        "<h2evil>ev4il</h2>",
        "<h2evil>e</h2>",
        "<h2evil> </h2>",
        "<h2evil>6</h2>",
        "<h2evil>_</h2>",
        "<h2evil></h2>",
        "<h2>>evil</h2>",
        "<h2<>evil</h2>",
        "<h2/>evil</h2>",
        "<h2eVil>evil</h2>",
        "<h2EVIL>evil</h2>",
        "<h2ev_il>evil</h2>",
        "<h2ev il>evil</h2>",
        "<h2ev4il>evil</h2>",
        "<h2e>evil</h2>",
        "<h2 >evil</h2>",
        "<h26>evil</h2>",
        "<h2_>evil</h2>",
        "<h2>evil</h2>",
        "<h2evil>evil</h2>"
      ]
    },
    {
      "regex": "(?!^\\s*)\\[(.*?)\\]",
      "exceptionStackTrace": null,
      "matches": [
        "[]]",
        "[[]",
        "[eVil]",
        "[EVIL]",
        "[ev_il]",
        "[ev il]",
        "[ev4il]",
        "[e]",
        "[ ]",
        "[6]",
        "[_]",
        "[]",
        "[evil]"
      ]
    },
    {
      "regex": "class [a-z_:]+ < Rails::Application",
      "exceptionStackTrace": null,
      "matches": [
        "class < < Rails::Application",
        "class : < Rails::Application",
        "class eVil < Rails::Application",
        "class EVIL < Rails::Application",
        "class ev_il < Rails::Application",
        "class ev il < Rails::Application",
        "class ev4il < Rails::Application",
        "class e < Rails::Application",
        "class   < Rails::Application",
        "class 6 < Rails::Application",
        "class _ < Rails::Application",
        "class  < Rails::Application",
        "class evil < Rails::Application"
      ]
    },
    {
      "regex": "([0-9]+) AA",
      "exceptionStackTrace": null,
      "matches": ["00 AA", " AA", "0 AA"]
    },
    {
      "regex": "^(?:type|billing)$",
      "exceptionStackTrace": null,
      "matches": ["billing", "type"]
    },
    {
      "regex": "\\e\\[0;36m  DEBUG\\e\\[0m",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\e"
      },
      "matches": []
    },
    {
      "regex": "ERRqtoobig",
      "exceptionStackTrace": null,
      "matches": ["ERRqtoobig"]
    },
    {
      "regex": "[\\s|.]",
      "exceptionStackTrace": null,
      "matches": ["|", " ", "."]
    },
    {
      "regex": "down|up|right([^-]|$)|left([^-]|$)",
      "exceptionStackTrace": null,
      "matches": [
        "leftA",
        "left0",
        "left-",
        "left ",
        "rightA",
        "right0",
        "right-",
        "right ",
        "left",
        "lefta",
        "right",
        "righta",
        "up",
        "down"
      ]
    },
    {
      "regex": "\\w+=(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil==",
        "evil=eVil",
        "evil=EVIL",
        "evil=ev_il",
        "evil=ev il",
        "evil=ev4il",
        "evil=e",
        "evil= ",
        "evil=6",
        "evil=_",
        "eVil=evil",
        "EVIL=evil",
        "ev_il=evil",
        "ev il=evil",
        "ev4il=evil",
        "e=evil",
        " =evil",
        "6=evil",
        "_=evil",
        "=evil",
        "evil=",
        "evil=evil"
      ]
    },
    {
      "regex": "\\A/page/(",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "missing ), unterminated subpattern"
      },
      "matches": []
    },
    {
      "regex": "iPhone|iPod|iPad|Android|BlackBerry|Opera Mini|IEMobile",
      "exceptionStackTrace": null,
      "matches": [
        "IEMobile",
        "Opera Mini",
        "BlackBerry",
        "Android",
        "iPad",
        "iPod",
        "iPhone"
      ]
    },
    {
      "regex": "(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino",
      "exceptionStackTrace": null,
      "matches": [
        "palm os os",
        "bb00evilmobile",
        "bbevilmobile",
        "android/mobile",
        "android.mobile",
        "androideVilmobile",
        "androidEVILmobile",
        "androidev_ilmobile",
        "androidev ilmobile",
        "androidev4ilmobile",
        "androidemobile",
        "android mobile",
        "android6mobile",
        "android_mobile",
        "androidmobile",
        "palm",
        "xiino",
        "xda",
        "windows phone",
        "windows ce",
        "wap",
        "vodafone",
        "up.link",
        "up.browser",
        "treo",
        "symbian",
        "series60",
        "series40",
        "psp",
        "pocket",
        "plucker",
        "pre/",
        "pixi/",
        "phone",
        "palm os",
        "opera mini",
        "opera mobi",
        "netfront",
        "mmp",
        "midp",
        "maemo",
        "lge ",
        "kindle",
        "iris",
        "ipod",
        "iphone",
        "iemobile",
        "hiptop",
        "fennec",
        "elaine",
        "compal",
        "blazer",
        "blackberry",
        "bada/",
        "avantgo",
        "meegoevilmobile",
        "bb0evilmobile",
        "androidevilmobile"
      ]
    },
    {
      "regex": "^user \"(.*?)\" is selected in \"(.*?)\" scope$",
      "exceptionStackTrace": null,
      "matches": [
        "user \"evil\" is selected in \"\"\" scope",
        "user \"evil\" is selected in \"eVil\" scope",
        "user \"evil\" is selected in \"EVIL\" scope",
        "user \"evil\" is selected in \"ev_il\" scope",
        "user \"evil\" is selected in \"ev il\" scope",
        "user \"evil\" is selected in \"ev4il\" scope",
        "user \"evil\" is selected in \"e\" scope",
        "user \"evil\" is selected in \" \" scope",
        "user \"evil\" is selected in \"6\" scope",
        "user \"evil\" is selected in \"_\" scope",
        "user \"evil\" is selected in \"\" scope",
        "user \"\"\" is selected in \"evil\" scope",
        "user \"eVil\" is selected in \"evil\" scope",
        "user \"EVIL\" is selected in \"evil\" scope",
        "user \"ev_il\" is selected in \"evil\" scope",
        "user \"ev il\" is selected in \"evil\" scope",
        "user \"ev4il\" is selected in \"evil\" scope",
        "user \"e\" is selected in \"evil\" scope",
        "user \" \" is selected in \"evil\" scope",
        "user \"6\" is selected in \"evil\" scope",
        "user \"_\" is selected in \"evil\" scope",
        "user \"\" is selected in \"evil\" scope",
        "user \"\" is selected in \"\" scope",
        "user \"evil\" is selected in \"evil\" scope"
      ]
    },
    {
      "regex": "^ \\s* (\\d+) \\s+ (\\d+) \\s+ \\d+ \\s+ (\\S+) \\s* $",
      "exceptionStackTrace": null,
      "matches": [
        "   0   0   0   evil    ",
        "   0   0   0   evil  ",
        "   0   0   0   eVil   ",
        "   0   0   0   EVIL   ",
        "   0   0   0   ev_il   ",
        "   0   0   0   ev il   ",
        "   0   0   0   ev4il   ",
        "   0   0   0   e   ",
        "   0   0   0       ",
        "   0   0   0   6   ",
        "   0   0   0   _   ",
        "   0   0   0      ",
        "   0   0   0    evil   ",
        "   0   0   0  evil   ",
        "   0   0   00   evil   ",
        "   0   0      evil   ",
        "   0   0    0   evil   ",
        "   0   0  0   evil   ",
        "   0   00   0   evil   ",
        "   0      0   evil   ",
        "   0    0   0   evil   ",
        "   0  0   0   evil   ",
        "   00   0   0   evil   ",
        "      0   0   evil   ",
        "    0   0   0   evil   ",
        "  0   0   0   evil   ",
        "  0   0   0   evil  ",
        "   0   0   0   evil   "
      ]
    },
    {
      "regex": "[^0-9\\.,]*",
      "exceptionStackTrace": null,
      "matches": [
        ".",
        ",",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "^[0-9]+([-;,:a-zA-Z]*)$",
      "exceptionStackTrace": null,
      "matches": [
        "0;",
        "0:",
        "0-",
        "0,",
        "0eVil",
        "0EVIL",
        "0ev_il",
        "0ev il",
        "0ev4il",
        "0e",
        "0 ",
        "06",
        "0_",
        "00evil",
        "evil",
        "0",
        "0evil"
      ]
    },
    {
      "regex": "^\\s*line",
      "exceptionStackTrace": null,
      "matches": ["  line", "line", " line"]
    },
    {
      "regex": "^.*(max_volume)(:)(\\s+)([+-]?\\d*\\.\\d+)(?![-+0-9\\.])( )(dB)",
      "exceptionStackTrace": null,
      "matches": [
        "evilmax_volume: -0.00 dB",
        "evilmax_volume: -0. dB",
        "evilmax_volume: -00.0 dB",
        "evilmax_volume: -.0 dB",
        "evilmax_volume: --0.0 dB",
        "evilmax_volume: 0.0 dB",
        "evilmax_volume: +0.0 dB",
        "evilmax_volume:  -0.0 dB",
        "evilmax_volume:-0.0 dB",
        ":max_volume: -0.0 dB",
        ".max_volume: -0.0 dB",
        "-max_volume: -0.0 dB",
        "+max_volume: -0.0 dB",
        "eVilmax_volume: -0.0 dB",
        "EVILmax_volume: -0.0 dB",
        "ev_ilmax_volume: -0.0 dB",
        "ev ilmax_volume: -0.0 dB",
        "ev4ilmax_volume: -0.0 dB",
        "emax_volume: -0.0 dB",
        " max_volume: -0.0 dB",
        "6max_volume: -0.0 dB",
        "_max_volume: -0.0 dB",
        "max_volume: -0.0 dB",
        "max_volume: .0 dB",
        "evilmax_volume: -0.0 dB"
      ]
    },
    {
      "regex": "\\W(OFL-1.0|SIL\\WOpen\\WFont\\WLicense\\W1.0)\\W",
      "exceptionStackTrace": null,
      "matches": [
        ";SIL;Open;Font;License;1A0;",
        ";SIL;Open;Font;License;100;",
        ";SIL;Open;Font;License;1-0;",
        ";SIL;Open;Font;License;1 0;",
        ";SIL;Open;Font;Licensea1a0;",
        ";SIL;Open;Font;License_1a0;",
        ";SIL;Open;Font;LicenseA1a0;",
        ";SIL;Open;Font;License01a0;",
        ";SIL;Open;Font;License-1a0;",
        ";SIL;Open;Font;License 1a0;",
        ";SIL;Open;FontaLicense;1a0;",
        ";SIL;Open;Font_License;1a0;",
        ";SIL;Open;FontALicense;1a0;",
        ";SIL;Open;Font0License;1a0;",
        ";SIL;Open;Font-License;1a0;",
        ";SIL;Open;Font License;1a0;",
        ";SIL;OpenaFont;License;1a0;",
        ";SIL;Open_Font;License;1a0;",
        ";SIL;OpenAFont;License;1a0;",
        ";SIL;Open0Font;License;1a0;",
        ";SIL;Open-Font;License;1a0;",
        ";SIL;Open Font;License;1a0;",
        ";SILaOpen;Font;License;1a0;",
        ";SIL_Open;Font;License;1a0;",
        ";SILAOpen;Font;License;1a0;",
        ";SIL0Open;Font;License;1a0;",
        ";SIL-Open;Font;License;1a0;",
        ";SIL Open;Font;License;1a0;",
        ";OFL-1a0a",
        ";OFL-1a0_",
        ";OFL-1a0A",
        ";OFL-1a00",
        ";OFL-1a0-",
        ";OFL-1a0 ",
        ";OFL-1A0;",
        ";OFL-100;",
        ";OFL-1-0;",
        ";OFL-1 0;",
        "aOFL-1a0;",
        "_OFL-1a0;",
        "AOFL-1a0;",
        "0OFL-1a0;",
        "-OFL-1a0;",
        " OFL-1a0;",
        ";SIL;Open;Font;License;1a0;",
        ";OFL-1a0;"
      ]
    },
    {
      "regex": "\\.(?:pl|yaml)$",
      "exceptionStackTrace": null,
      "matches": [".yaml", ".pl"]
    },
    { "regex": "MSG:", "exceptionStackTrace": null, "matches": ["MSG:"] },
    {
      "regex": "\\A_([./0-9A-Za-z]{4})([./0-9A-Za-z]{4})\n\t\t\t\t([./0-9A-Za-z]{11})\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "ERROR -- Kitchen: ------Backtrace-------$",
      "exceptionStackTrace": null,
      "matches": ["ERROR -- Kitchen: ------Backtrace-------"]
    },
    {
      "regex": "\\(value, setting\\) VALUES \\('(.*)', '(.*)'\\);$",
      "exceptionStackTrace": null,
      "matches": [
        "(value, setting) VALUES ('evil', ';');",
        "(value, setting) VALUES ('evil', ',');",
        "(value, setting) VALUES ('evil', ')');",
        "(value, setting) VALUES ('evil', '(');",
        "(value, setting) VALUES ('evil', ''');",
        "(value, setting) VALUES ('evil', 'eVil');",
        "(value, setting) VALUES ('evil', 'EVIL');",
        "(value, setting) VALUES ('evil', 'ev_il');",
        "(value, setting) VALUES ('evil', 'ev il');",
        "(value, setting) VALUES ('evil', 'ev4il');",
        "(value, setting) VALUES ('evil', 'e');",
        "(value, setting) VALUES ('evil', ' ');",
        "(value, setting) VALUES ('evil', '6');",
        "(value, setting) VALUES ('evil', '_');",
        "(value, setting) VALUES ('evil', '');",
        "(value, setting) VALUES (';', 'evil');",
        "(value, setting) VALUES (',', 'evil');",
        "(value, setting) VALUES (')', 'evil');",
        "(value, setting) VALUES ('(', 'evil');",
        "(value, setting) VALUES (''', 'evil');",
        "(value, setting) VALUES ('eVil', 'evil');",
        "(value, setting) VALUES ('EVIL', 'evil');",
        "(value, setting) VALUES ('ev_il', 'evil');",
        "(value, setting) VALUES ('ev il', 'evil');",
        "(value, setting) VALUES ('ev4il', 'evil');",
        "(value, setting) VALUES ('e', 'evil');",
        "(value, setting) VALUES (' ', 'evil');",
        "(value, setting) VALUES ('6', 'evil');",
        "(value, setting) VALUES ('_', 'evil');",
        "(value, setting) VALUES ('', 'evil');",
        "(value, setting) VALUES ('', '');",
        "(value, setting) VALUES ('evil', 'evil');"
      ]
    },
    { "regex": "^me ", "exceptionStackTrace": null, "matches": ["me "] },
    {
      "regex": "GNU Library Public License .*?version 1",
      "exceptionStackTrace": null,
      "matches": [
        "GNU Library Public License eVilversion 1",
        "GNU Library Public License EVILversion 1",
        "GNU Library Public License ev_ilversion 1",
        "GNU Library Public License ev ilversion 1",
        "GNU Library Public License ev4ilversion 1",
        "GNU Library Public License eversion 1",
        "GNU Library Public License  version 1",
        "GNU Library Public License 6version 1",
        "GNU Library Public License _version 1",
        "GNU Library Public License version 1",
        "GNU Library Public License evilversion 1"
      ]
    },
    {
      "regex": "[\\u015c]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 348"
      },
      "matches": []
    },
    {
      "regex": "^(978|979)-(\\d+)-(\\d+)-(\\d+)-([\\dX])$",
      "exceptionStackTrace": null,
      "matches": [
        "978-0-0-0-A",
        "978-0-0-0-0",
        "978-0-0-00-X",
        "978-0-0--X",
        "978-0-00-0-X",
        "978-0--0-X",
        "978-00-0-0-X",
        "978--0-0-X",
        "979-0-0-0-X",
        "978-0-0-0-X"
      ]
    },
    {
      "regex": "pidt:\"(.+?)\"",
      "exceptionStackTrace": null,
      "matches": [
        "pidt:\":\"",
        "pidt:\"\"\"",
        "pidt:\"eVil\"",
        "pidt:\"EVIL\"",
        "pidt:\"ev_il\"",
        "pidt:\"ev il\"",
        "pidt:\"ev4il\"",
        "pidt:\"e\"",
        "pidt:\" \"",
        "pidt:\"6\"",
        "pidt:\"_\"",
        "pidt:\"\"",
        "pidt:\"evil\""
      ]
    },
    {
      "regex": "module TestApp",
      "exceptionStackTrace": null,
      "matches": ["module TestApp"]
    },
    { "regex": "teashark", "exceptionStackTrace": null, "matches": ["teashark"] },
    { "regex": "^(sutto)", "exceptionStackTrace": null, "matches": ["sutto"] },
    {
      "regex": "^'([^']*)'\\s*",
      "exceptionStackTrace": null,
      "matches": [
        "'evil'  ",
        "'evil'",
        "''' ",
        "'eVil' ",
        "'EVIL' ",
        "'ev_il' ",
        "'ev il' ",
        "'ev4il' ",
        "'e' ",
        "' ' ",
        "'6' ",
        "'_' ",
        "'' ",
        "''",
        "'evil' "
      ]
    },
    {
      "regex": "[IW](\\d{2}\\d{2} \\d{2}:\\d{2}:\\d{2}.\\d{6}) .* server.go.*Event.*UID:\\\"([^\\\"]*)\\\", .* type: 'Normal' reason: 'Started' Started container.*",
      "exceptionStackTrace": null,
      "matches": [
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started container:",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started container,",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started container'",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started container\"",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containereVil",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerEVIL",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerev_il",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerev il",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerev4il",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containere",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started container ",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started container6",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started container_",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started container",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", : type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", , type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", ' type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", \" type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", eVil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", EVIL type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", ev_il type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", ev il type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", ev4il type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", e type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\",   type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", 6 type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", _ type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\",  type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\":\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\",\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"'\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"\"\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"eVil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"EVIL\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"ev_il\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"ev il\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"ev4il\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"e\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\" \", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"6\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"_\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEvent:UID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEvent,UID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEvent'UID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEvent\"UID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventeVilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventEVILUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventev_ilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventev ilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventev4ilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventeUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEvent UID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEvent6UID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEvent_UID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoevilEventUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serverago:EventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serverago,EventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serverago'EventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serverago\"EventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoeVilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoEVILEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoev_ilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoev ilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoev4ilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoeEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serverago EventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serverago6EventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serverago_EventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serveragoEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil serverAgoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil server:goevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil server0goevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil server,goevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil server'goevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil server\"goevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 evil server goevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 : serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 , serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 ' serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 \" serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 eVil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 EVIL serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 ev_il serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 ev il serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 ev4il serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 e serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000   serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 6 serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000 _ serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000  serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a0000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a00000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00A000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00:000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:000000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00,000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00'000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00\"000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00 000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:000a000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:0a000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:000:00a000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:0:00a000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 000:00:00a000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 0:00:00a000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W00000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "I0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "A0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil",
        "W0000 00:00:00a000000  serveragoEventUID:\"\",  type: 'Normal' reason: 'Started' Started container",
        "W0000 00:00:00a000000 evil serveragoevilEventevilUID:\"evil\", evil type: 'Normal' reason: 'Started' Started containerevil"
      ]
    },
    {
      "regex": "<w:WordDocument>",
      "exceptionStackTrace": null,
      "matches": ["<w:WordDocument>"]
    },
    {
      "regex": "([\\-\\,\\.\\'\\(\\)\\#\\w ]+)\\: *(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "evil: :",
        "evil: .",
        "evil: -",
        "evil: ,",
        "evil: )",
        "evil: (",
        "evil: '",
        "evil: #",
        "evil: eVil",
        "evil: EVIL",
        "evil: ev_il",
        "evil: ev il",
        "evil: ev4il",
        "evil: e",
        "evil:  ",
        "evil: 6",
        "evil: _",
        "evil: ",
        "evil:  evil",
        "evil:evil",
        ":: evil",
        ".: evil",
        "-: evil",
        ",: evil",
        "): evil",
        "(: evil",
        "': evil",
        "#: evil",
        "eVil: evil",
        "EVIL: evil",
        "ev_il: evil",
        "ev il: evil",
        "ev4il: evil",
        "e: evil",
        " : evil",
        "6: evil",
        "_: evil",
        ": evil",
        "evil:",
        "evil: evil"
      ]
    },
    {
      "regex": "(UP|BROADCAST|DEBUG|LOOPBACK|POINTTOPOINT|NOTRAILERS|RUNNING|NOARP|PROMISC|ALLMULTI|SLAVE|MASTER|MULTICAST|DYNAMIC)\\s",
      "exceptionStackTrace": null,
      "matches": [
        "DYNAMIC ",
        "MULTICAST ",
        "MASTER ",
        "SLAVE ",
        "ALLMULTI ",
        "PROMISC ",
        "NOARP ",
        "RUNNING ",
        "NOTRAILERS ",
        "POINTTOPOINT ",
        "LOOPBACK ",
        "DEBUG ",
        "BROADCAST ",
        "UP "
      ]
    },
    {
      "regex": "lang\\s*=\\s*[\"']?([a-zA-Z-]+)",
      "exceptionStackTrace": null,
      "matches": [
        "lang = '=",
        "lang = '-",
        "lang = ''",
        "lang = '\"",
        "lang = 'eVil",
        "lang = 'EVIL",
        "lang = 'ev_il",
        "lang = 'ev il",
        "lang = 'ev4il",
        "lang = 'e",
        "lang = ' ",
        "lang = '6",
        "lang = '_",
        "lang = '",
        "lang = ''evil",
        "lang = evil",
        "lang = \"evil",
        "lang =  'evil",
        "lang ='evil",
        "lang  = 'evil",
        "lang= 'evil",
        "lang=evil",
        "lang = 'evil"
      ]
    },
    {
      "regex": "^(?:APSL-2\\.0)",
      "exceptionStackTrace": null,
      "matches": ["APSL-2.0"]
    },
    {
      "regex": "^\\/([^/\\s]+?)?-([^/\\s]+?)$",
      "exceptionStackTrace": null,
      "matches": [
        "/evil-/",
        "/evil--",
        "/evil-eVil",
        "/evil-EVIL",
        "/evil-ev_il",
        "/evil-ev il",
        "/evil-ev4il",
        "/evil-e",
        "/evil- ",
        "/evil-6",
        "/evil-_",
        "/evil-",
        "/evilevil-evil",
        "//-evil",
        "/--evil",
        "/eVil-evil",
        "/EVIL-evil",
        "/ev_il-evil",
        "/ev il-evil",
        "/ev4il-evil",
        "/e-evil",
        "/ -evil",
        "/6-evil",
        "/_-evil",
        "/-evil",
        "/evil-evil"
      ]
    },
    {
      "regex": ".*\\/([gimy]*)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil/yy",
        "evil/",
        "evil/m",
        "evil/i",
        "evil/g",
        "evil/a",
        "//y",
        "eVil/y",
        "EVIL/y",
        "ev_il/y",
        "ev il/y",
        "ev4il/y",
        "e/y",
        " /y",
        "6/y",
        "_/y",
        "/y",
        "/",
        "evil/y"
      ]
    },
    {
      "regex": "&#([0-9]+);",
      "exceptionStackTrace": null,
      "matches": ["&#00;", "&#;", "&#0;"]
    },
    {
      "regex": "^<<([^>]*)>> should be true$",
      "exceptionStackTrace": null,
      "matches": [
        "<<>>> should be true",
        "<<<>> should be true",
        "<<eVil>> should be true",
        "<<EVIL>> should be true",
        "<<ev_il>> should be true",
        "<<ev il>> should be true",
        "<<ev4il>> should be true",
        "<<e>> should be true",
        "<< >> should be true",
        "<<6>> should be true",
        "<<_>> should be true",
        "<<>> should be true",
        "<<evil>> should be true"
      ]
    },
    {
      "regex": "^(prefix|next[ _-]?hop|routesource)",
      "exceptionStackTrace": null,
      "matches": [
        "next--hop",
        "next_hop",
        "next hop",
        "nexthop",
        "routesource",
        "next-hop",
        "prefix"
      ]
    },
    {
      "regex": "the[^a-z]*spanish[^a-z]*inquisition",
      "exceptionStackTrace": null,
      "matches": [
        "theevilspanisheVilinquisition",
        "theevilspanishEVILinquisition",
        "theevilspanishev_ilinquisition",
        "theevilspanishev ilinquisition",
        "theevilspanishev4ilinquisition",
        "theevilspanisheinquisition",
        "theevilspanish inquisition",
        "theevilspanish6inquisition",
        "theevilspanish_inquisition",
        "theevilspanishinquisition",
        "theeVilspanishevilinquisition",
        "theEVILspanishevilinquisition",
        "theev_ilspanishevilinquisition",
        "theev ilspanishevilinquisition",
        "theev4ilspanishevilinquisition",
        "theespanishevilinquisition",
        "the spanishevilinquisition",
        "the6spanishevilinquisition",
        "the_spanishevilinquisition",
        "thespanishevilinquisition",
        "thespanishinquisition",
        "theevilspanishevilinquisition"
      ]
    },
    { "regex": "\\.g4$", "exceptionStackTrace": null, "matches": [".g4"] },
    {
      "regex": "^\\s+$log->{SPIN}\\s+Orbitals:\\s*",
      "exceptionStackTrace": null,
      "matches": [
        " log->{SPIN} Orbitals:  ",
        " log->{SPIN}  Orbitals: ",
        " log->{SPIN}Orbitals: ",
        "  log->{SPIN} Orbitals: ",
        "log->{SPIN} Orbitals: ",
        " log->{SPIN} Orbitals:",
        " log->{SPIN} Orbitals: "
      ]
    },
    {
      "regex": "RSA/ECB/(?:PKCS1Padding|OAEPWithSHA-(?:1|256|384|512)AndMGF1Padding)",
      "exceptionStackTrace": null,
      "matches": [
        "RSA/ECB/OAEPWithSHA-512AndMGF1Padding",
        "RSA/ECB/OAEPWithSHA-384AndMGF1Padding",
        "RSA/ECB/OAEPWithSHA-256AndMGF1Padding",
        "RSA/ECB/OAEPWithSHA-1AndMGF1Padding",
        "RSA/ECB/PKCS1Padding"
      ]
    },
    {
      "regex": "^[[:ascii:]]+$",
      "exceptionStackTrace": null,
      "matches": [":]]", ":", "s]", "i]", "c]", "b]", "a]", "[]", ":]"]
    },
    {
      "regex": "[$GAP_SYMBOLS]",
      "exceptionStackTrace": null,
      "matches": ["_", "Y", "P", "O", "M", "L", "G", "C", "B", "A", "$", "S"]
    },
    {
      "regex": "^(0x)?[a-f0-9]*$",
      "exceptionStackTrace": null,
      "matches": ["0x00", "0x", "0xg", "0xa", "0x0x0", "0", "", "0x0"]
    },
    {
      "regex": "Command failed: exit -1",
      "exceptionStackTrace": null,
      "matches": ["Command failed: exit -1"]
    },
    { "regex": "(B|V)", "exceptionStackTrace": null, "matches": ["V", "B"] },
    {
      "regex": "^#include \"([a-zA-Z0-9._]+)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "#include \".\"",
        "#include \"#\"",
        "#include \"\"\"",
        "#include \"eVil\"",
        "#include \"EVIL\"",
        "#include \"ev_il\"",
        "#include \"ev il\"",
        "#include \"ev4il\"",
        "#include \"e\"",
        "#include \" \"",
        "#include \"6\"",
        "#include \"_\"",
        "#include \"\"",
        "#include \"evil\""
      ]
    },
    { "regex": "oyez", "exceptionStackTrace": null, "matches": ["oyez"] },
    {
      "regex": "($startpoint.*)",
      "exceptionStackTrace": null,
      "matches": [
        "startpointeVil",
        "startpointEVIL",
        "startpointev_il",
        "startpointev il",
        "startpointev4il",
        "startpointe",
        "startpoint ",
        "startpoint6",
        "startpoint_",
        "startpoint",
        "startpointevil"
      ]
    },
    {
      "regex": "^[a-z][a-z0-9\\.\\-]*$",
      "exceptionStackTrace": null,
      "matches": [
        "a.",
        "a-",
        "aeVil",
        "aEVIL",
        "aev_il",
        "aev il",
        "aev4il",
        "ae",
        "a ",
        "a6",
        "a_",
        "a",
        "aevil"
      ]
    },
    {
      "regex": "^((?:bg_)?)color\\[([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\]$",
      "exceptionStackTrace": null,
      "matches": [
        "bg_color[256]",
        "bg_color[00]",
        "bg_bg_color[0]",
        "color[250]",
        "color[200]",
        "color[100]",
        "color[10]",
        "color[0]",
        "bg_color[250]",
        "bg_color[200]",
        "bg_color[100]",
        "bg_color[10]",
        "bg_color[0]"
      ]
    },
    {
      "regex": "^.{@{[length($segment)]}},",
      "exceptionStackTrace": null,
      "matches": [
        "a{@{t}},",
        "a{@{s}},",
        "a{@{n}},",
        "a{@{m}},",
        "a{@{l}},",
        "a{@{h}},",
        "a{@{g}},",
        "a{@{e}},",
        "a{@{a}},",
        "a{@{(}},",
        "a{@{$}},",
        "}{@{)}},",
        "{{@{)}},",
        "A{@{)}},",
        "@{@{)}},",
        "0{@{)}},",
        ",{@{)}},",
        "){@{)}},",
        "({@{)}},",
        "${@{)}},",
        " {@{)}},",
        "a{@{)}},"
      ]
    },
    {
      "regex": "\\\\[([^\\\\]\\\\[]*)\\\\]\\\\(([^\\\\)]*)\\\\)",
      "exceptionStackTrace": null,
      "matches": [
        "\\\\\\\\\\^\\",
        "\\\\\\\\\\]\\",
        "\\\\\\\\\\\\\\",
        "\\\\\\\\\\[\\",
        "\\\\\\\\\\*\\",
        "\\\\\\\\\\)\\",
        "\\\\\\\\\\(\\",
        "\\\\\\\\\\eVil\\",
        "\\\\\\\\\\EVIL\\",
        "\\\\\\\\\\ev_il\\",
        "\\\\\\\\\\ev il\\",
        "\\\\\\\\\\ev4il\\",
        "\\\\\\\\\\e\\",
        "\\\\\\\\\\ \\",
        "\\\\\\\\\\6\\",
        "\\\\\\\\\\_\\",
        "\\\\\\]\\evil\\",
        "\\\\\\*\\evil\\",
        "\\\\\\)\\evil\\",
        "\\^\\\\\\evil\\",
        "\\[\\\\\\evil\\",
        "\\(\\\\\\evil\\",
        "\\\\\\\\\\\\",
        "\\\\\\\\\\evil\\"
      ]
    },
    {
      "regex": "^([\\d]{4})(NE|NW|SE|SW|N|E|S|W|)?$",
      "exceptionStackTrace": null,
      "matches": [
        "0000WW",
        "0000NENE",
        "00000NE",
        "000NE",
        "0000",
        "0000W",
        "0000S",
        "0000E",
        "0000N",
        "0000SW",
        "0000SE",
        "0000NW",
        "0000NE"
      ]
    },
    {
      "regex": "^(fixup|squash)! ",
      "exceptionStackTrace": null,
      "matches": ["squash! ", "fixup! "]
    },
    {
      "regex": "<none>:<none>",
      "exceptionStackTrace": null,
      "matches": ["<none>:<none>"]
    },
    {
      "regex": "Exception: foo",
      "exceptionStackTrace": null,
      "matches": ["Exception: foo"]
    },
    {
      "regex": "^[a-zA-Z_\\$][\\w\\$]*(?:\\.[a-zA-Z_\\$][\\w\\$]*)*$",
      "exceptionStackTrace": null,
      "matches": [
        "$evil.$evil.$evil",
        "$evil",
        "$evil.$.",
        "$evil.$$",
        "$evil.$eVil",
        "$evil.$EVIL",
        "$evil.$ev_il",
        "$evil.$ev il",
        "$evil.$ev4il",
        "$evil.$e",
        "$evil.$ ",
        "$evil.$6",
        "$evil.$_",
        "$evil.$",
        "$evil.aevil",
        "$evil._evil",
        "$evil.Aevil",
        "$..$evil",
        "$$.$evil",
        "$eVil.$evil",
        "$EVIL.$evil",
        "$ev_il.$evil",
        "$ev il.$evil",
        "$ev4il.$evil",
        "$e.$evil",
        "$ .$evil",
        "$6.$evil",
        "$_.$evil",
        "$.$evil",
        "aevil.$evil",
        "_evil.$evil",
        "Aevil.$evil",
        "$",
        "$evil.$evil"
      ]
    },
    {
      "regex": ".{1,2}\\s+",
      "exceptionStackTrace": null,
      "matches": ["a  ", "a", "aaa ", "aa ", " ", "_ ", "A ", "0 ", "  ", "a "]
    },
    { "regex": "_Profile", "exceptionStackTrace": null, "matches": ["_Profile"] },
    {
      "regex": "viewstory.php\\?sid=\\d+&i=1",
      "exceptionStackTrace": null,
      "matches": [
        "viewstoryaphp?sid=00&i=1",
        "viewstoryaphp?sid=&i=1",
        "viewstoryAphp?sid=0&i=1",
        "viewstory?php?sid=0&i=1",
        "viewstory=php?sid=0&i=1",
        "viewstory0php?sid=0&i=1",
        "viewstory&php?sid=0&i=1",
        "viewstory php?sid=0&i=1",
        "viewstoryaphp?sid=0&i=1"
      ]
    },
    { "regex": "\\.gmt", "exceptionStackTrace": null, "matches": [".gmt"] },
    {
      "regex": "^(CN|T2|T3|T4|T5|T6|T7)",
      "exceptionStackTrace": null,
      "matches": ["T7", "T6", "T5", "T4", "T3", "T2", "CN"]
    },
    {
      "regex": "[^a-zA-Z-]",
      "exceptionStackTrace": null,
      "matches": ["a", "A", "-", " ", "0"]
    },
    {
      "regex": "^([^\\#]+)(?:\\#([^\\#]+)(?:\\#(\\d+))?)?$",
      "exceptionStackTrace": null,
      "matches": [
        "evil#evil#0#evil#0",
        "evil#evil#0#0",
        "evil#evil",
        "evil#evil#00",
        "evil#evil#",
        "evil###0",
        "evil#eVil#0",
        "evil#EVIL#0",
        "evil#ev_il#0",
        "evil#ev il#0",
        "evil#ev4il#0",
        "evil#e#0",
        "evil# #0",
        "evil#6#0",
        "evil#_#0",
        "evil##0",
        "##evil#0",
        "eVil#evil#0",
        "EVIL#evil#0",
        "ev_il#evil#0",
        "ev il#evil#0",
        "ev4il#evil#0",
        "e#evil#0",
        " #evil#0",
        "6#evil#0",
        "_#evil#0",
        "#evil#0",
        "evil",
        "evil#evil#0"
      ]
    },
    {
      "regex": "text|file|list",
      "exceptionStackTrace": null,
      "matches": ["list", "file", "text"]
    },
    {
      "regex": "compiler: ?(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "compiler: :",
        "compiler: eVil",
        "compiler: EVIL",
        "compiler: ev_il",
        "compiler: ev il",
        "compiler: ev4il",
        "compiler: e",
        "compiler:  ",
        "compiler: 6",
        "compiler: _",
        "compiler: ",
        "compiler:  evil",
        "compiler:evil",
        "compiler:",
        "compiler: evil"
      ]
    },
    { "regex": "OSB ", "exceptionStackTrace": null, "matches": ["OSB "] },
    {
      "regex": "^[a-zA-Z0-9- ]*$",
      "exceptionStackTrace": null,
      "matches": [
        "-",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "(?:em|ex|%)$",
      "exceptionStackTrace": null,
      "matches": ["%", "ex", "em"]
    },
    {
      "regex": "\\(decoders:([^\\)]+)\\)",
      "exceptionStackTrace": null,
      "matches": [
        "(decoders::)",
        "(decoders:))",
        "(decoders:()",
        "(decoders:eVil)",
        "(decoders:EVIL)",
        "(decoders:ev_il)",
        "(decoders:ev il)",
        "(decoders:ev4il)",
        "(decoders:e)",
        "(decoders: )",
        "(decoders:6)",
        "(decoders:_)",
        "(decoders:)",
        "(decoders:evil)"
      ]
    },
    {
      "regex": "^\\\\s*<",
      "exceptionStackTrace": null,
      "matches": ["\\ss<", "\\<", "\\s<"]
    },
    {
      "regex": "^I (found no|couldn't open)",
      "exceptionStackTrace": null,
      "matches": ["I couldn't open", "I found no"]
    },
    {
      "regex": "^%[-.014]*[aA]$",
      "exceptionStackTrace": null,
      "matches": [
        "%4b",
        "%4a",
        "%4B",
        "%44A",
        "%2A",
        "%1A",
        "%0A",
        "%.A",
        "%-A",
        "%A",
        "%4A"
      ]
    },
    {
      "regex": "(?:a|b)?",
      "exceptionStackTrace": null,
      "matches": ["aa", "", "b", "a"]
    },
    {
      "regex": "(?<![<>])(<Y>'[Uu]n<\\/Y>)(?![<>])",
      "exceptionStackTrace": null,
      "matches": ["<Y>'an</Y>", "<Y>'Un</Y>", "<Y>'An</Y>", "<Y>'un</Y>"]
    },
    {
      "regex": "(?<=:\\s)([\\w\\s\\.\\'\\\\]*)",
      "exceptionStackTrace": null,
      "matches": [
        "\\",
        ":",
        ".",
        "'",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "RawDatabase<Block>\\{db: \\w+\\}",
      "exceptionStackTrace": null,
      "matches": [
        "RawDatabase<Block>{db: eVil}",
        "RawDatabase<Block>{db: EVIL}",
        "RawDatabase<Block>{db: ev_il}",
        "RawDatabase<Block>{db: ev il}",
        "RawDatabase<Block>{db: ev4il}",
        "RawDatabase<Block>{db: e}",
        "RawDatabase<Block>{db:  }",
        "RawDatabase<Block>{db: 6}",
        "RawDatabase<Block>{db: _}",
        "RawDatabase<Block>{db: }",
        "RawDatabase<Block>{db: evil}"
      ]
    },
    {
      "regex": "(([a-z0-9]+)|(`(.+)`))__",
      "exceptionStackTrace": null,
      "matches": [
        "```__",
        "`eVil`__",
        "`EVIL`__",
        "`ev_il`__",
        "`ev il`__",
        "`ev4il`__",
        "`e`__",
        "` `__",
        "`6`__",
        "`_`__",
        "``__",
        "eVil__",
        "EVIL__",
        "ev_il__",
        "ev il__",
        "ev4il__",
        "e__",
        " __",
        "6__",
        "___",
        "__",
        "`evil`__",
        "evil__"
      ]
    },
    {
      "regex": "^[01]{1,128}$",
      "exceptionStackTrace": null,
      "matches": [
        "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "",
        "2",
        "0",
        "1"
      ]
    },
    {
      "regex": "^(ell|gre)$",
      "exceptionStackTrace": null,
      "matches": ["gre", "ell"]
    },
    {
      "regex": "Missing partial parent/_foo with .* Searched in:\\n  \\* \"/Path/to/views\"\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "<samlp:StatusCode",
      "exceptionStackTrace": null,
      "matches": ["<samlp:StatusCode"]
    },
    {
      "regex": "<img class=\"avatar.*avatar.*usercontent\\.com/osteele\\b",
      "exceptionStackTrace": null,
      "matches": [
        "<img class=\"avatarevilavatar=usercontent.com/osteele",
        "<img class=\"avatarevilavatar<usercontent.com/osteele",
        "<img class=\"avatarevilavatar/usercontent.com/osteele",
        "<img class=\"avatarevilavatar.usercontent.com/osteele",
        "<img class=\"avatarevilavatar\"usercontent.com/osteele",
        "<img class=\"avatarevilavatareVilusercontent.com/osteele",
        "<img class=\"avatarevilavatarEVILusercontent.com/osteele",
        "<img class=\"avatarevilavatarev_ilusercontent.com/osteele",
        "<img class=\"avatarevilavatarev ilusercontent.com/osteele",
        "<img class=\"avatarevilavatarev4ilusercontent.com/osteele",
        "<img class=\"avatarevilavatareusercontent.com/osteele",
        "<img class=\"avatarevilavatar usercontent.com/osteele",
        "<img class=\"avatarevilavatar6usercontent.com/osteele",
        "<img class=\"avatarevilavatar_usercontent.com/osteele",
        "<img class=\"avatarevilavatarusercontent.com/osteele",
        "<img class=\"avatar=avatarevilusercontent.com/osteele",
        "<img class=\"avatar<avatarevilusercontent.com/osteele",
        "<img class=\"avatar/avatarevilusercontent.com/osteele",
        "<img class=\"avatar.avatarevilusercontent.com/osteele",
        "<img class=\"avatar\"avatarevilusercontent.com/osteele",
        "<img class=\"avatareVilavatarevilusercontent.com/osteele",
        "<img class=\"avatarEVILavatarevilusercontent.com/osteele",
        "<img class=\"avatarev_ilavatarevilusercontent.com/osteele",
        "<img class=\"avatarev ilavatarevilusercontent.com/osteele",
        "<img class=\"avatarev4ilavatarevilusercontent.com/osteele",
        "<img class=\"avatareavatarevilusercontent.com/osteele",
        "<img class=\"avatar avatarevilusercontent.com/osteele",
        "<img class=\"avatar6avatarevilusercontent.com/osteele",
        "<img class=\"avatar_avatarevilusercontent.com/osteele",
        "<img class=\"avataravatarevilusercontent.com/osteele",
        "<img class=\"avataravatarusercontent.com/osteele",
        "<img class=\"avatarevilavatarevilusercontent.com/osteele"
      ]
    },
    {
      "regex": "at\\s+(?=.+?\\(.+?\\)$)",
      "exceptionStackTrace": null,
      "matches": ["at  ", "at", "at "]
    },
    {
      "regex": "^[a-zA-Z0-9_-]+$",
      "exceptionStackTrace": null,
      "matches": [
        "-",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "^(?:cumulative|history)-",
      "exceptionStackTrace": null,
      "matches": ["history-", "cumulative-"]
    },
    {
      "regex": "\\A(^ *> ?.+$(.+\\n)*\\n*)+",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "(?<![<>])((?:<N[^>]*gnt=\"d\"[^>]*>[^<]+<\\/N>))(?![<>])",
      "exceptionStackTrace": null,
      "matches": [
        "<Nevilgnt=\"d\"evil>></N>",
        "<Nevilgnt=\"d\"evil>=</N>",
        "<Nevilgnt=\"d\"evil><</N>",
        "<Nevilgnt=\"d\"evil>/</N>",
        "<Nevilgnt=\"d\"evil>\"</N>",
        "<Nevilgnt=\"d\"evil>eVil</N>",
        "<Nevilgnt=\"d\"evil>EVIL</N>",
        "<Nevilgnt=\"d\"evil>ev_il</N>",
        "<Nevilgnt=\"d\"evil>ev il</N>",
        "<Nevilgnt=\"d\"evil>ev4il</N>",
        "<Nevilgnt=\"d\"evil>e</N>",
        "<Nevilgnt=\"d\"evil> </N>",
        "<Nevilgnt=\"d\"evil>6</N>",
        "<Nevilgnt=\"d\"evil>_</N>",
        "<Nevilgnt=\"d\"evil></N>",
        "<Nevilgnt=\"d\">>evil</N>",
        "<Nevilgnt=\"d\"=>evil</N>",
        "<Nevilgnt=\"d\"<>evil</N>",
        "<Nevilgnt=\"d\"/>evil</N>",
        "<Nevilgnt=\"d\"\">evil</N>",
        "<Nevilgnt=\"d\"eVil>evil</N>",
        "<Nevilgnt=\"d\"EVIL>evil</N>",
        "<Nevilgnt=\"d\"ev_il>evil</N>",
        "<Nevilgnt=\"d\"ev il>evil</N>",
        "<Nevilgnt=\"d\"ev4il>evil</N>",
        "<Nevilgnt=\"d\"e>evil</N>",
        "<Nevilgnt=\"d\" >evil</N>",
        "<Nevilgnt=\"d\"6>evil</N>",
        "<Nevilgnt=\"d\"_>evil</N>",
        "<Nevilgnt=\"d\">evil</N>",
        "<N>gnt=\"d\"evil>evil</N>",
        "<N=gnt=\"d\"evil>evil</N>",
        "<N<gnt=\"d\"evil>evil</N>",
        "<N/gnt=\"d\"evil>evil</N>",
        "<N\"gnt=\"d\"evil>evil</N>",
        "<NeVilgnt=\"d\"evil>evil</N>",
        "<NEVILgnt=\"d\"evil>evil</N>",
        "<Nev_ilgnt=\"d\"evil>evil</N>",
        "<Nev ilgnt=\"d\"evil>evil</N>",
        "<Nev4ilgnt=\"d\"evil>evil</N>",
        "<Negnt=\"d\"evil>evil</N>",
        "<N gnt=\"d\"evil>evil</N>",
        "<N6gnt=\"d\"evil>evil</N>",
        "<N_gnt=\"d\"evil>evil</N>",
        "<Ngnt=\"d\"evil>evil</N>",
        "<Ngnt=\"d\">evil</N>",
        "<Nevilgnt=\"d\"evil>evil</N>"
      ]
    },
    {
      "regex": "sardcheck",
      "exceptionStackTrace": null,
      "matches": ["sardcheck"]
    },
    { "regex": "$alArray", "exceptionStackTrace": null, "matches": ["alArray"] },
    {
      "regex": "(?: *\\| *)?\\n$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^$number_re",
      "exceptionStackTrace": null,
      "matches": ["number_re"]
    },
    {
      "regex": "Transaction is a reserved type name.",
      "exceptionStackTrace": null,
      "matches": [
        "Transaction is a reserved type name_",
        "Transaction is a reserved type nameA",
        "Transaction is a reserved type name0",
        "Transaction is a reserved type name ",
        "Transaction is a reserved type namea"
      ]
    },
    {
      "regex": "^(\\w+).po$",
      "exceptionStackTrace": null,
      "matches": [
        "evil_po",
        "evilApo",
        "evil0po",
        "evil po",
        "eVilapo",
        "EVILapo",
        "ev_ilapo",
        "ev ilapo",
        "ev4ilapo",
        "eapo",
        " apo",
        "6apo",
        "_apo",
        "apo",
        "evilapo"
      ]
    },
    {
      "regex": "<$td>$s\\Q\u00be\u00dc\u00ba\u00d9\\E$s<\\/$td>$s<$td><$table>$s<$tr>$s<$td>($str)<\\/$td>$s<\\/$tr>$s<\\/$table>$s<\\/$td>",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\Q"
      },
      "matches": []
    },
    {
      "regex": "<(\\d+)>1 (\\S+) (\\S+) (\\S+) (\\S+) (\\S+) (.*)",
      "exceptionStackTrace": null,
      "matches": [
        "<0>1 evil evil evil evil evil >",
        "<0>1 evil evil evil evil evil <",
        "<0>1 evil evil evil evil evil eVil",
        "<0>1 evil evil evil evil evil EVIL",
        "<0>1 evil evil evil evil evil ev_il",
        "<0>1 evil evil evil evil evil ev il",
        "<0>1 evil evil evil evil evil ev4il",
        "<0>1 evil evil evil evil evil e",
        "<0>1 evil evil evil evil evil  ",
        "<0>1 evil evil evil evil evil 6",
        "<0>1 evil evil evil evil evil _",
        "<0>1 evil evil evil evil > evil",
        "<0>1 evil evil evil evil < evil",
        "<0>1 evil evil evil evil eVil evil",
        "<0>1 evil evil evil evil EVIL evil",
        "<0>1 evil evil evil evil ev_il evil",
        "<0>1 evil evil evil evil ev il evil",
        "<0>1 evil evil evil evil ev4il evil",
        "<0>1 evil evil evil evil e evil",
        "<0>1 evil evil evil evil   evil",
        "<0>1 evil evil evil evil 6 evil",
        "<0>1 evil evil evil evil _ evil",
        "<0>1 evil evil evil evil  evil",
        "<0>1 evil evil evil > evil evil",
        "<0>1 evil evil evil < evil evil",
        "<0>1 evil evil evil eVil evil evil",
        "<0>1 evil evil evil EVIL evil evil",
        "<0>1 evil evil evil ev_il evil evil",
        "<0>1 evil evil evil ev il evil evil",
        "<0>1 evil evil evil ev4il evil evil",
        "<0>1 evil evil evil e evil evil",
        "<0>1 evil evil evil   evil evil",
        "<0>1 evil evil evil 6 evil evil",
        "<0>1 evil evil evil _ evil evil",
        "<0>1 evil evil evil  evil evil",
        "<0>1 evil evil > evil evil evil",
        "<0>1 evil evil < evil evil evil",
        "<0>1 evil evil eVil evil evil evil",
        "<0>1 evil evil EVIL evil evil evil",
        "<0>1 evil evil ev_il evil evil evil",
        "<0>1 evil evil ev il evil evil evil",
        "<0>1 evil evil ev4il evil evil evil",
        "<0>1 evil evil e evil evil evil",
        "<0>1 evil evil   evil evil evil",
        "<0>1 evil evil 6 evil evil evil",
        "<0>1 evil evil _ evil evil evil",
        "<0>1 evil evil  evil evil evil",
        "<0>1 evil > evil evil evil evil",
        "<0>1 evil < evil evil evil evil",
        "<0>1 evil eVil evil evil evil evil",
        "<0>1 evil EVIL evil evil evil evil",
        "<0>1 evil ev_il evil evil evil evil",
        "<0>1 evil ev il evil evil evil evil",
        "<0>1 evil ev4il evil evil evil evil",
        "<0>1 evil e evil evil evil evil",
        "<0>1 evil   evil evil evil evil",
        "<0>1 evil 6 evil evil evil evil",
        "<0>1 evil _ evil evil evil evil",
        "<0>1 evil  evil evil evil evil",
        "<0>1 > evil evil evil evil evil",
        "<0>1 < evil evil evil evil evil",
        "<0>1 eVil evil evil evil evil evil",
        "<0>1 EVIL evil evil evil evil evil",
        "<0>1 ev_il evil evil evil evil evil",
        "<0>1 ev il evil evil evil evil evil",
        "<0>1 ev4il evil evil evil evil evil",
        "<0>1 e evil evil evil evil evil",
        "<0>1   evil evil evil evil evil",
        "<0>1 6 evil evil evil evil evil",
        "<0>1 _ evil evil evil evil evil",
        "<0>1  evil evil evil evil evil",
        "<00>1 evil evil evil evil evil evil",
        "<>1 evil evil evil evil evil evil",
        "<0>1 evil evil evil evil evil ",
        "<0>1 evil evil evil evil evil evil"
      ]
    },
    {
      "regex": "6\\.\\d\\.\\d",
      "exceptionStackTrace": null,
      "matches": ["6.0.0"]
    },
    { "regex": "^--", "exceptionStackTrace": null, "matches": ["--"] },
    {
      "regex": "<%\\s*@\\s*(?:Assembly|Control|Implements|Import|Master(?:Type)?|OutputCache|Page|PreviousPageType|Reference|Register)?|%>",
      "exceptionStackTrace": null,
      "matches": [
        "<% @ MasterTypeType",
        "<% @ Master",
        "<% @ AssemblyAssembly",
        "<% @ ",
        "<% @  Assembly",
        "<% @Assembly",
        "<%  @ Assembly",
        "<%@ Assembly",
        "<%@",
        "%>",
        "<% @ Register",
        "<% @ Reference",
        "<% @ PreviousPageType",
        "<% @ Page",
        "<% @ OutputCache",
        "<% @ MasterType",
        "<% @ Import",
        "<% @ Implements",
        "<% @ Control",
        "<% @ Assembly"
      ]
    },
    {
      "regex": "((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/)|(\\s))",
      "exceptionStackTrace": null,
      "matches": [
        "/*/*/",
        "/***/",
        "/*eVil*/",
        "/*EVIL*/",
        "/*ev_il*/",
        "/*ev il*/",
        "/*ev4il*/",
        "/*e*/",
        "/* */",
        "/*6*/",
        "/*_*/",
        "///",
        "//*",
        "//eVil",
        "//EVIL",
        "//ev_il",
        "//ev il",
        "//ev4il",
        "//e",
        "// ",
        "//6",
        "//_",
        "/**/",
        "//",
        " ",
        "/*evil*/",
        "//evil"
      ]
    },
    {
      "regex": "^\\s*\\!DOCTYPE",
      "exceptionStackTrace": null,
      "matches": ["  !DOCTYPE", "!DOCTYPE", " !DOCTYPE"]
    },
    {
      "regex": "^Failed to configure phantom$",
      "exceptionStackTrace": null,
      "matches": ["Failed to configure phantom"]
    },
    {
      "regex": "[V]([.]|\\w)([.]|\\w)([.]|\\w)([.]|\\w)([.]|\\w)\\s(?P<format>\\w{3,20})\\s",
      "exceptionStackTrace": null,
      "matches": [
        "V_.... aaa ",
        "VA.... aaa ",
        "V0.... aaa ",
        "V._... aaa ",
        "V.A... aaa ",
        "V.0... aaa ",
        "V.._.. aaa ",
        "V..A.. aaa ",
        "V..0.. aaa ",
        "V..._. aaa ",
        "V...A. aaa ",
        "V...0. aaa ",
        "V...._ aaa ",
        "V....A aaa ",
        "V....0 aaa ",
        "V..... aaaaaaaaaaaaaaaaaaaaa ",
        "V..... aaaaaaaaaaaaaaaaaaaa ",
        "V..... aa ",
        "V..... _aa ",
        "V..... Aaa ",
        "V..... 0aa ",
        "Va.... aaa ",
        "V.a... aaa ",
        "V..a.. aaa ",
        "V...a. aaa ",
        "V....a aaa ",
        "V..... aaa "
      ]
    },
    {
      "regex": "@company\\.com$",
      "exceptionStackTrace": null,
      "matches": ["@company.com"]
    },
    {
      "regex": "the (\\S+) ($:|admin )page",
      "exceptionStackTrace": null,
      "matches": [
        "the : :page",
        "the eVil :page",
        "the EVIL :page",
        "the ev_il :page",
        "the ev il :page",
        "the ev4il :page",
        "the e :page",
        "the   :page",
        "the 6 :page",
        "the _ :page",
        "the  :page",
        "the evil admin page",
        "the evil :page"
      ]
    },
    {
      "regex": "(node)-(\\d+)",
      "exceptionStackTrace": null,
      "matches": ["node-00", "node-", "node-0"]
    },
    {
      "regex": "not.*String",
      "exceptionStackTrace": null,
      "matches": [
        "noteVilString",
        "notEVILString",
        "notev_ilString",
        "notev ilString",
        "notev4ilString",
        "noteString",
        "not String",
        "not6String",
        "not_String",
        "notString",
        "notevilString"
      ]
    },
    { "regex": "^(\\d);", "exceptionStackTrace": null, "matches": ["0;"] },
    {
      "regex": "\\w+\\:_?",
      "exceptionStackTrace": null,
      "matches": [
        "evil:__",
        "eVil:_",
        "EVIL:_",
        "ev_il:_",
        "ev il:_",
        "ev4il:_",
        "e:_",
        " :_",
        "6:_",
        "_:_",
        ":_",
        "evil:",
        "evil:_"
      ]
    },
    {
      "regex": "[/]\\/\\u0aBc",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 2748"
      },
      "matches": []
    },
    {
      "regex": "(?i)\\b(?<_1>_request|_query|_form|Year of|writep|writeln|writebr|write to console|write raw|write png|WRITE PICTURE FILE|write jpg|write jpeg|write gif|write blob|write|Win to Mac|week of year|variable name|VALIDATE TRANSACTION|utf to mac|utc to local time|utc to local datetime|USE SET|USE NAMED SELECTION|url to native path|url encode query|url encode path|url encode|url decode query|url decode path|url decode|Uppercase|unlock globals|UNLOAD RECORD|UNION|Undefined|type descriptor|Type|Trunc|True|trim|timestamp year|timestamp time|timestamp string|timestamp second|timestamp month|timestamp minute|timestamp millisecond|timestamp hour|timestamp difference|timestamp day|timestamp date|timestamp|time to longint|Time string|Time|Tickcount|throw|TEXT TO BLOB|Test semaphore|Test path name|Table name|Table|Substring|Structure file|STRING LIST TO ARRAY|String|START TRANSACTION|split string|SORT ARRAY|slice string|Size of array|set session timeout|set session array|set session|set script timeout|set response status|set response header|set response cookie path|set response cookie expires|set response cookie domain|set response cookie|set response buffer|SET QUERY LIMIT|SET QUERY DESTINATION|set platform charset|set output encoding|set output charset|set log level|set local|set global array|set global|set expires date|set expires|set error page|SET DOCUMENT POSITION|SET DEFAULT CENTURY|set current script timeout|set content type|set content charset|set collection array|set collection|set cache control|SET BLOB SIZE|SET AUTOMATIC RELATIONS|set array|session to blob|session query|session local|session internal id|session id|session has|session|Sequence number|SEND PACKET|Semaphore|SELECTION TO ARRAY|SELECTION RANGE TO ARRAY|Selected record number|SCAN INDEX|save upload to field|SAVE RECORD|save output|save collection|Round|right trim|response headers|response cookies|response buffer size|RESOLVE POINTER|resize array|require|requested url|request query|request info|request cookies|Replace string|REMOVE FROM SET|RELATE ONE SELECTION|RELATE ONE|RELATE MANY SELECTION|RELATE MANY|regex split|regex replace|regex quote pattern|regex match all|regex match|regex find in array|regex find all in array|regex callback replace|REDUCE SELECTION|redirect|Records in table|Records in set|Records in selection|Record number|RECEIVE PACKET|READ WRITE|READ PICTURE FILE|Read only state|READ ONLY|random between|Random|QUERY WITH ARRAY|QUERY SELECTION BY FORMULA|QUERY SELECTION|query params has|query params|QUERY BY FORMULA|QUERY|PREVIOUS RECORD|Position|Picture size|PICTURE PROPERTIES|parameter mode|param text|ORDER BY FORMULA|ORDER BY|Open document|ONE RECORD SELECT|Num|Not|nil pointer|Nil|NEXT RECORD|next item|new local collection|new global collection|new collection|native to url path|multisort named arrays|multisort arrays|MOVE DOCUMENT|more items|Month of|min of|Milliseconds|method exists|merge collections|md5 sum|max of|Mac to Win|mac to utf8|Mac to ISO|mac to html|Lowercase|longint to time|longint to blob|log message|Locked|lock globals|local variables|local time to utc|local datetime to utc|LOAD RECORD|load collection|LIST TO ARRAY|library list|Length|left trim|LAST RECORD|last of|last not of|join paths|join array|ISO to Mac|is table number valid|Is in set|is field number valid|is array|is an iterator|is a collection|INTERSECTION|interpolate string|Int|insert string|insert into array|INSERT ELEMENT|include into|include|in error|import|identical strings|html encode|hide session field|GOTO SELECTED RECORD|GOTO RECORD|globals has|globals|global|get version|get utc delta|get upload size|get upload remote filename|get upload extension|get upload encoding|get upload content type|get timestamp datetime|get time remaining|get session timeout|get session stats|get session names|get session item|get session array size|get session array|get session|get script timeout|get root|get response headers|get response header|get response cookies|get response cookie path|get response cookie expires|get response cookie domain|get response cookie|get response buffer|get request value|get request infos|get request info|get request cookies|get request cookie|get query params|get query param count|get query param choices|get query param|Get pointer|get platform charset|GET PICTURE FROM LIBRARY|get output encoding|get output charset|get log level|get local|get license info|get library list|get last table number|get last field number|get item value|get item type|get item key|get item array|Get indexed string|get global keys|get global item|get global array size|get global array|get global|get form variables|get form variable count|get form variable choices|get form variable|GET FIELD PROPERTIES|get field pointer|get field numbers|get expires date|get expires|get error page|Get document position|get current script timeout|get content type|get content charset|get collection keys|get collection item count|get collection item|get collection array size|get collection array|get collection|get call chain|get cache control|get auto relations|full requested url|form variables has|form variables|FOLDER LIST|FIRST RECORD|first of|first not of|Find index key|Find in array|fill array|filename of|file exists|Field name|Field|False|extension of|execute in 4d|EXECUTE|End selection|end save output|enclose|DOCUMENT TO BLOB|DOCUMENT LIST|DISTINCT VALUES|directory separator|directory of|directory exists|DIFFERENCE|Delete string|delete session item|DELETE SELECTION|delete response header|delete response cookie|DELETE RECORD|delete global|DELETE FOLDER|DELETE ELEMENT|DELETE DOCUMENT|delete collection item|DELAY PROCESS|defined|define|default directory|deep copy collection|deep clear collection|Dec|day of year|Day of|Day number|Date|C_TIME|C_TEXT|C_STRING|C_REAL|C_POINTER|C_PICTURE|C_LONGINT|C_DATE|C_BOOLEAN|C_BLOB|CUT NAMED SELECTION|Current time|current realm|Current process|current platform|current path|Current method name|current line number|current library name|current file|Current date|CREATE SET FROM ARRAY|CREATE SET|CREATE SELECTION FROM ARRAY|CREATE RECORD|CREATE FOLDER|CREATE EMPTY SET|Create document|count uploads|Count tables|count session items|count response headers|count response cookies|count request infos|count request cookies|count query params|Count in array|count globals|count form variables|Count fields|count collection items|copy upload|COPY SET|COPY NAMED SELECTION|COPY DOCUMENT|copy collection|COPY ARRAY|concat|compare strings|collection to blob|collection has|collection|CLOSE DOCUMENT|CLEAR VARIABLE|CLEAR SET|CLEAR SEMAPHORE|clear response buffer|CLEAR NAMED SELECTION|clear collection|clear buffer (?<_2>deprecated)|clear array|choose|Character code|Char|cell|capitalize|CANCEL TRANSACTION|call method|call 4d method|build query string|blowfish encrypt|blowfish decrypt|BLOB to text|blob to session|blob to longint|BLOB TO DOCUMENT|blob to collection|BLOB size|Before selection|base64 encode|base64 decode|AUTOMATIC RELATIONS|auto relate|authenticate|auth user|auth type|auth password|Ascii|ARRAY TEXT|ARRAY STRING|ARRAY REAL|ARRAY POINTER|ARRAY PICTURE|ARRAY LONGINT|ARRAY INTEGER|ARRAY DATE|ARRAY BOOLEAN|append to array|Append document|ALL RECORDS|add to timestamp|ADD TO SET|Add to date|add element|Abs|abandon session|abandon response cookie)\\b",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<_"
      },
      "matches": []
    },
    {
      "regex": "^Undefined ruleset",
      "exceptionStackTrace": null,
      "matches": ["Undefined ruleset"]
    },
    {
      "regex": "Description :\\\\n\\\\n(.*?)\\\\n\\\\n",
      "exceptionStackTrace": null,
      "matches": [
        "Description :\\n\\n\\\\n\\n",
        "Description :\\n\\n:\\n\\n",
        "Description :\\n\\neVil\\n\\n",
        "Description :\\n\\nEVIL\\n\\n",
        "Description :\\n\\nev_il\\n\\n",
        "Description :\\n\\nev il\\n\\n",
        "Description :\\n\\nev4il\\n\\n",
        "Description :\\n\\ne\\n\\n",
        "Description :\\n\\n \\n\\n",
        "Description :\\n\\n6\\n\\n",
        "Description :\\n\\n_\\n\\n",
        "Description :\\n\\n\\n\\n",
        "Description :\\n\\nevil\\n\\n"
      ]
    },
    {
      "regex": "radius-server retransmit (\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "radius-server retransmit 00",
        "radius-server retransmit ",
        "radius-server retransmit 0"
      ]
    },
    {
      "regex": "^.*\\._Ctype_char$",
      "exceptionStackTrace": null,
      "matches": [
        ".._Ctype_char",
        "eVil._Ctype_char",
        "EVIL._Ctype_char",
        "ev_il._Ctype_char",
        "ev il._Ctype_char",
        "ev4il._Ctype_char",
        "e._Ctype_char",
        " ._Ctype_char",
        "6._Ctype_char",
        "_._Ctype_char",
        "._Ctype_char",
        "evil._Ctype_char"
      ]
    },
    {
      "regex": "\\/([-_\\.0-9a-zA-Z]+)\\/([-_\\.a-zA-z0-9\\/]+)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (bad range): Invalid range: A-z"
      },
      "matches": []
    },
    {
      "regex": "\\G ($WHITESPACE)         ",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\G"
      },
      "matches": []
    },
    {
      "regex": "(root|page)\\.(xml|css|js|ts|scss)$",
      "exceptionStackTrace": null,
      "matches": [
        "page.xml",
        "root.scss",
        "root.ts",
        "root.js",
        "root.css",
        "root.xml"
      ]
    },
    {
      "regex": "^(\\+?230|0)?\\d{8}$",
      "exceptionStackTrace": null,
      "matches": [
        "+230000000000",
        "+2300000000",
        "+230+23000000000",
        "++23000000000",
        "23000000000",
        "00000000",
        "000000000",
        "+23000000000"
      ]
    },
    {
      "regex": "^MojoMojo::Extensions::",
      "exceptionStackTrace": null,
      "matches": ["MojoMojo::Extensions::"]
    },
    { "regex": "\\bdepr\\b", "exceptionStackTrace": null, "matches": ["depr"] },
    { "regex": "\\s;,", "exceptionStackTrace": null, "matches": [" ;,"] },
    {
      "regex": "cP(B|P|Sl|d|Sk|RGB|HSB|CMYK|HEX|Mem|Cont|CB(3|4)|SL[2-3]|SR(1|3))",
      "exceptionStackTrace": null,
      "matches": [
        "cPSL0",
        "cPSR3",
        "cPSR1",
        "cPSL2",
        "cPCB4",
        "cPCB3",
        "cPCont",
        "cPMem",
        "cPHEX",
        "cPCMYK",
        "cPHSB",
        "cPRGB",
        "cPSk",
        "cPd",
        "cPSl",
        "cPP",
        "cPB"
      ]
    },
    {
      "regex": "\r\n|\r",
      "exceptionStackTrace": null,
      "matches": ["\r", "\r\n"]
    },
    {
      "regex": "CNAME records may only have a single value",
      "exceptionStackTrace": null,
      "matches": ["CNAME records may only have a single value"]
    },
    {
      "regex": ".*:owner_class\\/:owner_id\\b",
      "exceptionStackTrace": null,
      "matches": [
        "::owner_class/:owner_id",
        "/:owner_class/:owner_id",
        "eVil:owner_class/:owner_id",
        "EVIL:owner_class/:owner_id",
        "ev_il:owner_class/:owner_id",
        "ev il:owner_class/:owner_id",
        "ev4il:owner_class/:owner_id",
        "e:owner_class/:owner_id",
        " :owner_class/:owner_id",
        "6:owner_class/:owner_id",
        "_:owner_class/:owner_id",
        ":owner_class/:owner_id",
        "evil:owner_class/:owner_id"
      ]
    },
    {
      "regex": "^a page that inherits from (Page|AbstractPage) with a method that tries to set a variable$",
      "exceptionStackTrace": null,
      "matches": [
        "a page that inherits from AbstractPage with a method that tries to set a variable",
        "a page that inherits from Page with a method that tries to set a variable"
      ]
    },
    {
      "regex": "(\\s[1-9]\\d*)",
      "exceptionStackTrace": null,
      "matches": [" 100", " 00", " 1", " 10"]
    },
    {
      "regex": "/nifi-api/process-groups/(?:(?:root)|(?:[a-f0-9\\-]{36}))/input-ports",
      "exceptionStackTrace": null,
      "matches": [
        "/nifi-api/process-groups/-------------------------------------/input-ports",
        "/nifi-api/process-groups/-----------------------------------/input-ports",
        "/nifi-api/process-groups/g-----------------------------------/input-ports",
        "/nifi-api/process-groups/a-----------------------------------/input-ports",
        "/nifi-api/process-groups/0-----------------------------------/input-ports",
        "/nifi-api/process-groups/------------------------------------/input-ports",
        "/nifi-api/process-groups/root/input-ports"
      ]
    },
    {
      "regex": "\\(0x[0-9a-xA-X]+\\)",
      "exceptionStackTrace": null,
      "matches": ["(0xAA)", "(0x)", "(0xy)", "(0xa)", "(0xY)", "(0x0)", "(0xA)"]
    },
    {
      "regex": "FakeKeyModel/123/\\d+",
      "exceptionStackTrace": null,
      "matches": [
        "FakeKeyModel/123/00",
        "FakeKeyModel/123/",
        "FakeKeyModel/123/0"
      ]
    },
    {
      "regex": "CREATE USER",
      "exceptionStackTrace": null,
      "matches": ["CREATE USER"]
    },
    {
      "regex": "[^a-z0-9_.]",
      "exceptionStackTrace": null,
      "matches": ["a", "_", "0", ".", " ", "A"]
    },
    {
      "regex": "Mobile Phone Users:",
      "exceptionStackTrace": null,
      "matches": ["Mobile Phone Users:"]
    },
    {
      "regex": "a.+1\\.0\\.1.+1\\.0\\.0",
      "exceptionStackTrace": null,
      "matches": [
        "aevil1.0.1.1.0.0",
        "aevil1.0.1eVil1.0.0",
        "aevil1.0.1EVIL1.0.0",
        "aevil1.0.1ev_il1.0.0",
        "aevil1.0.1ev il1.0.0",
        "aevil1.0.1ev4il1.0.0",
        "aevil1.0.1e1.0.0",
        "aevil1.0.1 1.0.0",
        "aevil1.0.161.0.0",
        "aevil1.0.1_1.0.0",
        "aevil1.0.11.0.0",
        "a.1.0.1evil1.0.0",
        "aeVil1.0.1evil1.0.0",
        "aEVIL1.0.1evil1.0.0",
        "aev_il1.0.1evil1.0.0",
        "aev il1.0.1evil1.0.0",
        "aev4il1.0.1evil1.0.0",
        "ae1.0.1evil1.0.0",
        "a 1.0.1evil1.0.0",
        "a61.0.1evil1.0.0",
        "a_1.0.1evil1.0.0",
        "a1.0.1evil1.0.0",
        "aevil1.0.1evil1.0.0"
      ]
    },
    {
      "regex": "SERVER_CONFIG_FILE=\"(.*?)\"",
      "exceptionStackTrace": null,
      "matches": [
        "SERVER_CONFIG_FILE=\"=\"",
        "SERVER_CONFIG_FILE=\"\"\"",
        "SERVER_CONFIG_FILE=\"eVil\"",
        "SERVER_CONFIG_FILE=\"EVIL\"",
        "SERVER_CONFIG_FILE=\"ev_il\"",
        "SERVER_CONFIG_FILE=\"ev il\"",
        "SERVER_CONFIG_FILE=\"ev4il\"",
        "SERVER_CONFIG_FILE=\"e\"",
        "SERVER_CONFIG_FILE=\" \"",
        "SERVER_CONFIG_FILE=\"6\"",
        "SERVER_CONFIG_FILE=\"_\"",
        "SERVER_CONFIG_FILE=\"\"",
        "SERVER_CONFIG_FILE=\"evil\""
      ]
    },
    {
      "regex": "^(gif|jpe?g|png)$",
      "exceptionStackTrace": null,
      "matches": ["jpeeg", "jpg", "png", "jpeg", "gif"]
    },
    {
      "regex": "Copyright\\s[0-9]{4}",
      "exceptionStackTrace": null,
      "matches": ["Copyright 00000", "Copyright 000", "Copyright 0000"]
    },
    {
      "regex": "/CPAN/(?:source/)?(.*\\Q$archive\\E)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\Q"
      },
      "matches": []
    },
    {
      "regex": "[aeiou]{3}",
      "exceptionStackTrace": null,
      "matches": ["uuuu", "uu", "ouu", "iuu", "euu", "buu", "auu", "uuu"]
    },
    {
      "regex": "(^|[^0-9A-Za-z\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u024f\u1e00-\u1eff\u2c60-\u2c7f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua7ff])((?:1(?:[\\s\\xa0]*Kraljevima|[\\s\\xa0]*Kr|Kgs)|I[\\s\\xa0]*Kraljevima|[1I]\\.[\\s\\xa0]*Kraljevima|Prva[\\s\\xa0]*(?:knjiga[\\s\\xa0]*o[\\s\\xa0]*)?Kraljevima))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 160"
      },
      "matches": []
    },
    {
      "regex": "\\\\hyperref\\[(\\\\detokenize{)?contents:huygens(})?\\]",
      "exceptionStackTrace": null,
      "matches": [
        "\\hyperref[\\detokenize{contents:huygens}}]",
        "\\hyperref[\\detokenize{contents:huygens]",
        "\\hyperref[\\detokenize{\\detokenize{contents:huygens}]",
        "\\hyperref[contents:huygens}]",
        "\\hyperref[contents:huygens]",
        "\\hyperref[\\detokenize{contents:huygens}]"
      ]
    },
    {
      "regex": "^function\\s*[a-z0-9_\\$]*\\s*\\([^)]*\\)\\s*\\{\\s*\\[native code\\]\\s*\\}",
      "exceptionStackTrace": null,
      "matches": [
        "function evil (evil) { [native code]  }",
        "function evil (evil) { [native code]}",
        "function evil (evil) {  [native code] }",
        "function evil (evil) {[native code] }",
        "function evil (evil)  { [native code] }",
        "function evil (evil){ [native code] }",
        "function evil (}) { [native code] }",
        "function evil ({) { [native code] }",
        "function evil (]) { [native code] }",
        "function evil ([) { [native code] }",
        "function evil ()) { [native code] }",
        "function evil (() { [native code] }",
        "function evil ($) { [native code] }",
        "function evil (eVil) { [native code] }",
        "function evil (EVIL) { [native code] }",
        "function evil (ev_il) { [native code] }",
        "function evil (ev il) { [native code] }",
        "function evil (ev4il) { [native code] }",
        "function evil (e) { [native code] }",
        "function evil ( ) { [native code] }",
        "function evil (6) { [native code] }",
        "function evil (_) { [native code] }",
        "function evil () { [native code] }",
        "function evil  (evil) { [native code] }",
        "function evil(evil) { [native code] }",
        "function } (evil) { [native code] }",
        "function { (evil) { [native code] }",
        "function ] (evil) { [native code] }",
        "function [ (evil) { [native code] }",
        "function ) (evil) { [native code] }",
        "function ( (evil) { [native code] }",
        "function $ (evil) { [native code] }",
        "function eVil (evil) { [native code] }",
        "function EVIL (evil) { [native code] }",
        "function ev_il (evil) { [native code] }",
        "function ev il (evil) { [native code] }",
        "function ev4il (evil) { [native code] }",
        "function e (evil) { [native code] }",
        "function   (evil) { [native code] }",
        "function 6 (evil) { [native code] }",
        "function _ (evil) { [native code] }",
        "function  (evil) { [native code] }",
        "function  evil (evil) { [native code] }",
        "functionevil (evil) { [native code] }",
        "function(){[native code]}",
        "function evil (evil) { [native code] }"
      ]
    },
    {
      "regex": "^(3[01]|[12][0-9]|0?[1-9])([\\/-])(1[0-2]|0?[1-9])([\\/-])(?:[0-9]{2})?[0-9]{2}$",
      "exceptionStackTrace": null,
      "matches": [
        "001-10-0000",
        "1-10-0000",
        "10-10-0000",
        "00-10-0000",
        "31-00-0000",
        "31-001-0000",
        "31-1-0000",
        "31-10-000000",
        "31-10-00000",
        "31-10-000",
        "31-10/0000",
        "31-13-0000",
        "31/10-0000",
        "32-10-0000",
        "30-10-0000",
        "1-10-00",
        "20-10-00",
        "31-1-00",
        "31-10-00",
        "01-10-0000",
        "20-10-0000",
        "31-01-0000",
        "31-10-0000"
      ]
    },
    {
      "regex": "('.+--)|(\\|)|(%7C)",
      "exceptionStackTrace": null,
      "matches": [
        "'|--",
        "'---",
        "''--",
        "'%--",
        "'eVil--",
        "'EVIL--",
        "'ev_il--",
        "'ev il--",
        "'ev4il--",
        "'e--",
        "' --",
        "'6--",
        "'_--",
        "'--",
        "%7C",
        "|",
        "'evil--"
      ]
    },
    {
      "regex": "\\d\\d-\\d\\d-\\d\\d",
      "exceptionStackTrace": null,
      "matches": ["00-00-00"]
    },
    {
      "regex": "[\"\\'][^ .,:;?!()*+-].*?[\"\\']",
      "exceptionStackTrace": null,
      "matches": [
        "'aevil\"",
        "'a?'",
        "'a;'",
        "'a:'",
        "'a.'",
        "'a-'",
        "'a,'",
        "'a+'",
        "'a*'",
        "'a)'",
        "'a('",
        "'a''",
        "'a\"'",
        "'a!'",
        "'aeVil'",
        "'aEVIL'",
        "'aev_il'",
        "'aev il'",
        "'aev4il'",
        "'ae'",
        "'a '",
        "'a6'",
        "'a_'",
        "'Aevil'",
        "'?evil'",
        "';evil'",
        "':evil'",
        "'0evil'",
        "'.evil'",
        "'-evil'",
        "',evil'",
        "'+evil'",
        "'*evil'",
        "')evil'",
        "'(evil'",
        "''evil'",
        "'\"evil'",
        "'!evil'",
        "' evil'",
        "\"aevil'",
        "'a'",
        "'aevil'"
      ]
    },
    {
      "regex": "(\\cM\\cJ|\\cM|\\cJ)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\c"
      },
      "matches": []
    },
    {
      "regex": "$REGEX_CACHE_CATEGORIES{$anchor}",
      "exceptionStackTrace": null,
      "matches": ["REGEX_CACHE_CATEGORIES{anchor}"]
    },
    {
      "regex": "\\* \\/usr\\/share\\/man\\/man1\\/sed\\.1\\.gz \\(deleted\\)$",
      "exceptionStackTrace": null,
      "matches": ["* /usr/share/man/man1/sed.1.gz (deleted)"]
    },
    {
      "regex": "\\A(\\s*\\,\\s*)",
      "exceptionStackTrace": null,
      "matches": [" ,  ", " ,", "  , ", ", ", ",", " , "]
    },
    {
      "regex": "\\A(.*)inputs$",
      "exceptionStackTrace": null,
      "matches": [
        "eVilinputs",
        "EVILinputs",
        "ev_ilinputs",
        "ev ilinputs",
        "ev4ilinputs",
        "einputs",
        " inputs",
        "6inputs",
        "_inputs",
        "inputs",
        "evilinputs"
      ]
    },
    {
      "regex": "^<$LOCAL_PART\\@$DOMAIN>$",
      "exceptionStackTrace": null,
      "matches": ["<LOCAL_PART@DOMAIN>"]
    },
    {
      "regex": "\\s*\\\\\\s*$",
      "exceptionStackTrace": null,
      "matches": [" \\  ", " \\", "  \\ ", "\\ ", "\\", " \\ "]
    },
    {
      "regex": "^([^~+-]+).*$",
      "exceptionStackTrace": null,
      "matches": [
        "evil~",
        "evil-",
        "evil+",
        "evileVil",
        "evilEVIL",
        "evilev_il",
        "evilev il",
        "evilev4il",
        "evile",
        "evil ",
        "evil6",
        "evil_",
        "~evil",
        "-evil",
        "+evil",
        "eVilevil",
        "EVILevil",
        "ev_ilevil",
        "ev ilevil",
        "ev4ilevil",
        "eevil",
        " evil",
        "6evil",
        "_evil",
        "evil",
        "evilevil"
      ]
    },
    { "regex": "^lo", "exceptionStackTrace": null, "matches": ["lo"] },
    {
      "regex": "(?U)(^|\\\\\\\\|[^\\\\\\*])\\*(.*[^\\\\])\\*",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?U"
      },
      "matches": []
    },
    {
      "regex": "^response code should be (.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "response code should be eVil",
        "response code should be EVIL",
        "response code should be ev_il",
        "response code should be ev il",
        "response code should be ev4il",
        "response code should be e",
        "response code should be  ",
        "response code should be 6",
        "response code should be _",
        "response code should be ",
        "response code should be evil"
      ]
    },
    {
      "regex": "^(?:BSD-3-Clause-LBNL)",
      "exceptionStackTrace": null,
      "matches": ["BSD-3-Clause-LBNL"]
    },
    {
      "regex": "/app/post/(.+?)/comment/(.+?)",
      "exceptionStackTrace": null,
      "matches": [
        "/app/post/evil/comment//",
        "/app/post/evil/comment/eVil",
        "/app/post/evil/comment/EVIL",
        "/app/post/evil/comment/ev_il",
        "/app/post/evil/comment/ev il",
        "/app/post/evil/comment/ev4il",
        "/app/post/evil/comment/e",
        "/app/post/evil/comment/ ",
        "/app/post/evil/comment/6",
        "/app/post/evil/comment/_",
        "/app/post/evil/comment/",
        "/app/post///comment/evil",
        "/app/post/eVil/comment/evil",
        "/app/post/EVIL/comment/evil",
        "/app/post/ev_il/comment/evil",
        "/app/post/ev il/comment/evil",
        "/app/post/ev4il/comment/evil",
        "/app/post/e/comment/evil",
        "/app/post/ /comment/evil",
        "/app/post/6/comment/evil",
        "/app/post/_/comment/evil",
        "/app/post//comment/evil",
        "/app/post/evil/comment/evil"
      ]
    },
    {
      "regex": "$case_re\\Q$text_forbid\\E",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\Q"
      },
      "matches": []
    },
    {
      "regex": "@greeting",
      "exceptionStackTrace": null,
      "matches": ["@greeting"]
    },
    { "regex": "Style", "exceptionStackTrace": null, "matches": ["Style"] },
    {
      "regex": "[ \\*]*",
      "exceptionStackTrace": null,
      "matches": ["**", " ", "", "*"]
    },
    {
      "regex": "^restorecon reset (.+) context (.+)->(.+)",
      "exceptionStackTrace": null,
      "matches": [
        "restorecon reset evil context evil->>",
        "restorecon reset evil context evil->-",
        "restorecon reset evil context evil->eVil",
        "restorecon reset evil context evil->EVIL",
        "restorecon reset evil context evil->ev_il",
        "restorecon reset evil context evil->ev il",
        "restorecon reset evil context evil->ev4il",
        "restorecon reset evil context evil->e",
        "restorecon reset evil context evil-> ",
        "restorecon reset evil context evil->6",
        "restorecon reset evil context evil->_",
        "restorecon reset evil context evil->",
        "restorecon reset evil context >->evil",
        "restorecon reset evil context -->evil",
        "restorecon reset evil context eVil->evil",
        "restorecon reset evil context EVIL->evil",
        "restorecon reset evil context ev_il->evil",
        "restorecon reset evil context ev il->evil",
        "restorecon reset evil context ev4il->evil",
        "restorecon reset evil context e->evil",
        "restorecon reset evil context  ->evil",
        "restorecon reset evil context 6->evil",
        "restorecon reset evil context _->evil",
        "restorecon reset evil context ->evil",
        "restorecon reset > context evil->evil",
        "restorecon reset - context evil->evil",
        "restorecon reset eVil context evil->evil",
        "restorecon reset EVIL context evil->evil",
        "restorecon reset ev_il context evil->evil",
        "restorecon reset ev il context evil->evil",
        "restorecon reset ev4il context evil->evil",
        "restorecon reset e context evil->evil",
        "restorecon reset   context evil->evil",
        "restorecon reset 6 context evil->evil",
        "restorecon reset _ context evil->evil",
        "restorecon reset  context evil->evil",
        "restorecon reset evil context evil->evil"
      ]
    },
    {
      "regex": "^github:(.*)\\/(.*)\\/(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "github:evil/evil/:",
        "github:evil/evil//",
        "github:evil/evil/eVil",
        "github:evil/evil/EVIL",
        "github:evil/evil/ev_il",
        "github:evil/evil/ev il",
        "github:evil/evil/ev4il",
        "github:evil/evil/e",
        "github:evil/evil/ ",
        "github:evil/evil/6",
        "github:evil/evil/_",
        "github:evil/evil/",
        "github:evil/:/evil",
        "github:evil///evil",
        "github:evil/eVil/evil",
        "github:evil/EVIL/evil",
        "github:evil/ev_il/evil",
        "github:evil/ev il/evil",
        "github:evil/ev4il/evil",
        "github:evil/e/evil",
        "github:evil/ /evil",
        "github:evil/6/evil",
        "github:evil/_/evil",
        "github:evil//evil",
        "github::/evil/evil",
        "github://evil/evil",
        "github:eVil/evil/evil",
        "github:EVIL/evil/evil",
        "github:ev_il/evil/evil",
        "github:ev il/evil/evil",
        "github:ev4il/evil/evil",
        "github:e/evil/evil",
        "github: /evil/evil",
        "github:6/evil/evil",
        "github:_/evil/evil",
        "github:/evil/evil",
        "github://",
        "github:evil/evil/evil"
      ]
    },
    {
      "regex": "ICSP user not set",
      "exceptionStackTrace": null,
      "matches": ["ICSP user not set"]
    },
    {
      "regex": "\\A(\\d{1,2}) (\\w{3,9}) (\\d{2}|\\d{4})\\Z",
      "exceptionStackTrace": null,
      "matches": [
        "0 aaa 00000",
        "0 aaa 000",
        "0 aaa 0",
        "0 aaaaaaaaaa 00",
        "0 aaaaaaaaa 00",
        "0 aa 00",
        "0 _aa 00",
        "0 Aaa 00",
        "0 0aa 00",
        "000 aaa 00",
        "00 aaa 00",
        " aaa 00",
        "0 aaa 0000",
        "0 aaa 00"
      ]
    },
    {
      "regex": "^-D([^=]+)(?:=(.*))?$",
      "exceptionStackTrace": null,
      "matches": [
        "-Devil=evil=evil",
        "-Devil==",
        "-Devil=-",
        "-Devil=eVil",
        "-Devil=EVIL",
        "-Devil=ev_il",
        "-Devil=ev il",
        "-Devil=ev4il",
        "-Devil=e",
        "-Devil= ",
        "-Devil=6",
        "-Devil=_",
        "-Devil=",
        "-D==evil",
        "-D-=evil",
        "-DeVil=evil",
        "-DEVIL=evil",
        "-Dev_il=evil",
        "-Dev il=evil",
        "-Dev4il=evil",
        "-De=evil",
        "-D =evil",
        "-D6=evil",
        "-D_=evil",
        "-D=evil",
        "-Devil",
        "-Devil=evil"
      ]
    },
    {
      "regex": "Watch plugins OffendingFooThirdPartyWatchPlugin and OffendingBarThirdPartyWatchPlugin both attempted to register key <!>\\.\\s+Please change the key configuration for one of the conflicting plugins to avoid overlap\\.",
      "exceptionStackTrace": null,
      "matches": [
        "Watch plugins OffendingFooThirdPartyWatchPlugin and OffendingBarThirdPartyWatchPlugin both attempted to register key <!>.  Please change the key configuration for one of the conflicting plugins to avoid overlap.",
        "Watch plugins OffendingFooThirdPartyWatchPlugin and OffendingBarThirdPartyWatchPlugin both attempted to register key <!>.Please change the key configuration for one of the conflicting plugins to avoid overlap.",
        "Watch plugins OffendingFooThirdPartyWatchPlugin and OffendingBarThirdPartyWatchPlugin both attempted to register key <!>. Please change the key configuration for one of the conflicting plugins to avoid overlap."
      ]
    },
    {
      "regex": "Mac OS X 10[._ ][789]",
      "exceptionStackTrace": null,
      "matches": [
        "Mac OS X 10 8",
        "Mac OS X 10 7",
        "Mac OS X 10 0",
        "Mac OS X 10_9",
        "Mac OS X 10.9",
        "Mac OS X 10 9"
      ]
    },
    {
      "regex": "(\\s*)\"jquery\"(\\,\\s*)",
      "exceptionStackTrace": null,
      "matches": [
        " \"jquery\",  ",
        " \"jquery\",",
        "  \"jquery\", ",
        "\"jquery\", ",
        "\"jquery\",",
        " \"jquery\", "
      ]
    },
    {
      "regex": "^-.*test_file_to_rename$",
      "exceptionStackTrace": null,
      "matches": [
        "--test_file_to_rename",
        "-eViltest_file_to_rename",
        "-EVILtest_file_to_rename",
        "-ev_iltest_file_to_rename",
        "-ev iltest_file_to_rename",
        "-ev4iltest_file_to_rename",
        "-etest_file_to_rename",
        "- test_file_to_rename",
        "-6test_file_to_rename",
        "-_test_file_to_rename",
        "-test_file_to_rename",
        "-eviltest_file_to_rename"
      ]
    },
    {
      "regex": "argv 1:.*path\\/to\\/deep.js",
      "exceptionStackTrace": null,
      "matches": [
        "argv 1:evilpath/to/deepAjs",
        "argv 1:evilpath/to/deep:js",
        "argv 1:evilpath/to/deep0js",
        "argv 1:evilpath/to/deep/js",
        "argv 1:evilpath/to/deep js",
        "argv 1::path/to/deepajs",
        "argv 1:/path/to/deepajs",
        "argv 1:eVilpath/to/deepajs",
        "argv 1:EVILpath/to/deepajs",
        "argv 1:ev_ilpath/to/deepajs",
        "argv 1:ev ilpath/to/deepajs",
        "argv 1:ev4ilpath/to/deepajs",
        "argv 1:epath/to/deepajs",
        "argv 1: path/to/deepajs",
        "argv 1:6path/to/deepajs",
        "argv 1:_path/to/deepajs",
        "argv 1:path/to/deepajs",
        "argv 1:evilpath/to/deepajs"
      ]
    },
    {
      "regex": "^(:\\S\\s+)?TOPIC( |$)",
      "exceptionStackTrace": null,
      "matches": [
        ":a :a TOPIC ",
        ":a  TOPIC ",
        ":aTOPIC ",
        ":_ TOPIC ",
        ":A TOPIC ",
        ":: TOPIC ",
        ":0 TOPIC ",
        ":  TOPIC ",
        "TOPIC",
        "TOPIC ",
        ":a TOPIC",
        ":a TOPIC "
      ]
    },
    { "regex": "(7f)", "exceptionStackTrace": null, "matches": ["7f"] },
    {
      "regex": "<div class=\"ng-tns-c\\d+-0 ng-trigger ng-trigger-myAnimation\">foo<\\/div>",
      "exceptionStackTrace": null,
      "matches": [
        "<div class=\"ng-tns-c00-0 ng-trigger ng-trigger-myAnimation\">foo</div>",
        "<div class=\"ng-tns-c-0 ng-trigger ng-trigger-myAnimation\">foo</div>",
        "<div class=\"ng-tns-c0-0 ng-trigger ng-trigger-myAnimation\">foo</div>"
      ]
    },
    {
      "regex": "<input.*?>(.*?)<\\/input>",
      "exceptionStackTrace": null,
      "matches": [
        "<inputevil>></input>",
        "<inputevil><</input>",
        "<inputevil>/</input>",
        "<inputevil>eVil</input>",
        "<inputevil>EVIL</input>",
        "<inputevil>ev_il</input>",
        "<inputevil>ev il</input>",
        "<inputevil>ev4il</input>",
        "<inputevil>e</input>",
        "<inputevil> </input>",
        "<inputevil>6</input>",
        "<inputevil>_</input>",
        "<inputevil></input>",
        "<input>>evil</input>",
        "<input<>evil</input>",
        "<input/>evil</input>",
        "<inputeVil>evil</input>",
        "<inputEVIL>evil</input>",
        "<inputev_il>evil</input>",
        "<inputev il>evil</input>",
        "<inputev4il>evil</input>",
        "<inpute>evil</input>",
        "<input >evil</input>",
        "<input6>evil</input>",
        "<input_>evil</input>",
        "<input>evil</input>",
        "<input></input>",
        "<inputevil>evil</input>"
      ]
    },
    {
      "regex": "\\.FAILED$",
      "exceptionStackTrace": null,
      "matches": [".FAILED"]
    },
    {
      "regex": "((?:^)|(?:\\.|\\-))b(\\d)",
      "exceptionStackTrace": null,
      "matches": ["-b0", ".b0", "b0"]
    },
    { "regex": "\\-nohome", "exceptionStackTrace": null, "matches": ["-nohome"] },
    {
      "regex": "RULENAME=\\\"(.*?)\\\",EXTRACTION=\\\"(.*?)\\\",NORM_VALUE=\\\"(.*?)\\\"(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "RULENAME=\"evil\",EXTRACTION=\"evil\",NORM_VALUE=\"evil\"=",
        "RULENAME=\"evil\",EXTRACTION=\"evil\",NORM_VALUE=\"evil\",",
        "RULENAME=\"evil\",EXTRACTION=\"evil\",NORM_VALUE=\"evil\"\"",
        "RULENAME=\"evil\",EXTRACTION=\"evil\",NORM_VALUE=\"evil\"eVil",
        "RULENAME=\"evil\",EXTRACTION=\"evil\",NORM_VALUE=\"evil\"EVIL",
        "RULENAME=\"evil\",EXTRACTION=\"evil\",NORM_VALUE=\"evil\"ev_il",
        "RULENAME=\"evil\",EXTRACTION=\"evil\",NORM_VALUE=\"evil\"ev il",
        "RULENAME=\"evil\",EXTRACTION=\"evil\",NORM_VALUE=\"evil\"ev4il",
        "RULENAME=\"evil\",EXTRACTION=\"evil\",NORM_VALUE=\"evil\"e",
        "RULENAME=\"evil\",EXTRACTION=\"evil\",NORM_VALUE=\"evil\" ",
        "RULENAME=\"evil\",EXTRACTION=\"evil\",NORM_VALUE=\"evil\"6",
        "RULENAME=\"evil\",EXTRACTION=\"evil\",NORM_VALUE=\"evil\"_",
        "RULENAME=\"evil\",EXTRACTION=\"evil\",NORM_VALUE=\"evil\"",
        "RULENAME=\"evil\",EXTRACTION=\"evil\",NORM_VALUE=\"=\"evil",
        "RULENAME=\"evil\",EXTRACTION=\"evil\",NORM_VALUE=\",\"evil",
        "RULENAME=\"evil\",EXTRACTION=\"evil\",NORM_VALUE=\"\"\"evil",
        "RULENAME=\"evil\",EXTRACTION=\"evil\",NORM_VALUE=\"eVil\"evil",
        "RULENAME=\"evil\",EXTRACTION=\"evil\",NORM_VALUE=\"EVIL\"evil",
        "RULENAME=\"evil\",EXTRACTION=\"evil\",NORM_VALUE=\"ev_il\"evil",
        "RULENAME=\"evil\",EXTRACTION=\"evil\",NORM_VALUE=\"ev il\"evil",
        "RULENAME=\"evil\",EXTRACTION=\"evil\",NORM_VALUE=\"ev4il\"evil",
        "RULENAME=\"evil\",EXTRACTION=\"evil\",NORM_VALUE=\"e\"evil",
        "RULENAME=\"evil\",EXTRACTION=\"evil\",NORM_VALUE=\" \"evil",
        "RULENAME=\"evil\",EXTRACTION=\"evil\",NORM_VALUE=\"6\"evil",
        "RULENAME=\"evil\",EXTRACTION=\"evil\",NORM_VALUE=\"_\"evil",
        "RULENAME=\"evil\",EXTRACTION=\"evil\",NORM_VALUE=\"\"evil",
        "RULENAME=\"evil\",EXTRACTION=\"=\",NORM_VALUE=\"evil\"evil",
        "RULENAME=\"evil\",EXTRACTION=\",\",NORM_VALUE=\"evil\"evil",
        "RULENAME=\"evil\",EXTRACTION=\"\"\",NORM_VALUE=\"evil\"evil",
        "RULENAME=\"evil\",EXTRACTION=\"eVil\",NORM_VALUE=\"evil\"evil",
        "RULENAME=\"evil\",EXTRACTION=\"EVIL\",NORM_VALUE=\"evil\"evil",
        "RULENAME=\"evil\",EXTRACTION=\"ev_il\",NORM_VALUE=\"evil\"evil",
        "RULENAME=\"evil\",EXTRACTION=\"ev il\",NORM_VALUE=\"evil\"evil",
        "RULENAME=\"evil\",EXTRACTION=\"ev4il\",NORM_VALUE=\"evil\"evil",
        "RULENAME=\"evil\",EXTRACTION=\"e\",NORM_VALUE=\"evil\"evil",
        "RULENAME=\"evil\",EXTRACTION=\" \",NORM_VALUE=\"evil\"evil",
        "RULENAME=\"evil\",EXTRACTION=\"6\",NORM_VALUE=\"evil\"evil",
        "RULENAME=\"evil\",EXTRACTION=\"_\",NORM_VALUE=\"evil\"evil",
        "RULENAME=\"evil\",EXTRACTION=\"\",NORM_VALUE=\"evil\"evil",
        "RULENAME=\"=\",EXTRACTION=\"evil\",NORM_VALUE=\"evil\"evil",
        "RULENAME=\",\",EXTRACTION=\"evil\",NORM_VALUE=\"evil\"evil",
        "RULENAME=\"\"\",EXTRACTION=\"evil\",NORM_VALUE=\"evil\"evil",
        "RULENAME=\"eVil\",EXTRACTION=\"evil\",NORM_VALUE=\"evil\"evil",
        "RULENAME=\"EVIL\",EXTRACTION=\"evil\",NORM_VALUE=\"evil\"evil",
        "RULENAME=\"ev_il\",EXTRACTION=\"evil\",NORM_VALUE=\"evil\"evil",
        "RULENAME=\"ev il\",EXTRACTION=\"evil\",NORM_VALUE=\"evil\"evil",
        "RULENAME=\"ev4il\",EXTRACTION=\"evil\",NORM_VALUE=\"evil\"evil",
        "RULENAME=\"e\",EXTRACTION=\"evil\",NORM_VALUE=\"evil\"evil",
        "RULENAME=\" \",EXTRACTION=\"evil\",NORM_VALUE=\"evil\"evil",
        "RULENAME=\"6\",EXTRACTION=\"evil\",NORM_VALUE=\"evil\"evil",
        "RULENAME=\"_\",EXTRACTION=\"evil\",NORM_VALUE=\"evil\"evil",
        "RULENAME=\"\",EXTRACTION=\"evil\",NORM_VALUE=\"evil\"evil",
        "RULENAME=\"\",EXTRACTION=\"\",NORM_VALUE=\"\"",
        "RULENAME=\"evil\",EXTRACTION=\"evil\",NORM_VALUE=\"evil\"evil"
      ]
    },
    {
      "regex": "steam\\sgame",
      "exceptionStackTrace": null,
      "matches": ["steam game"]
    },
    {
      "regex": "rgba?",
      "exceptionStackTrace": null,
      "matches": ["rgbaa", "rgb", "rgba"]
    },
    {
      "regex": "^GEO-\\d{3}LITE",
      "exceptionStackTrace": null,
      "matches": ["GEO-0000LITE", "GEO-00LITE", "GEO-000LITE"]
    },
    {
      "regex": "id=\"_wpnonce\" name=\"_wpnonce\" value=\"([a-z0-9]+)\"",
      "exceptionStackTrace": null,
      "matches": [
        "id=\"_wpnonce\" name=\"_wpnonce\" value=\"eVil\"",
        "id=\"_wpnonce\" name=\"_wpnonce\" value=\"EVIL\"",
        "id=\"_wpnonce\" name=\"_wpnonce\" value=\"ev_il\"",
        "id=\"_wpnonce\" name=\"_wpnonce\" value=\"ev il\"",
        "id=\"_wpnonce\" name=\"_wpnonce\" value=\"ev4il\"",
        "id=\"_wpnonce\" name=\"_wpnonce\" value=\"e\"",
        "id=\"_wpnonce\" name=\"_wpnonce\" value=\" \"",
        "id=\"_wpnonce\" name=\"_wpnonce\" value=\"6\"",
        "id=\"_wpnonce\" name=\"_wpnonce\" value=\"_\"",
        "id=\"_wpnonce\" name=\"_wpnonce\" value=\"\"",
        "id=\"_wpnonce\" name=\"_wpnonce\" value=\"evil\""
      ]
    },
    {
      "regex": "-DCCTYPE=",
      "exceptionStackTrace": null,
      "matches": ["-DCCTYPE="]
    },
    {
      "regex": "\\|[ \\t]*$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": " ('s?) ",
      "exceptionStackTrace": null,
      "matches": [" 'ss ", " ' ", " 's "]
    },
    {
      "regex": "https://api.wordpress.org/core/version-check/1.5/.*",
      "exceptionStackTrace": null,
      "matches": [
        "https://apiawordpressaorg/core/version-check/1a5/:",
        "https://apiawordpressaorg/core/version-check/1a5//",
        "https://apiawordpressaorg/core/version-check/1a5/-",
        "https://apiawordpressaorg/core/version-check/1a5/eVil",
        "https://apiawordpressaorg/core/version-check/1a5/EVIL",
        "https://apiawordpressaorg/core/version-check/1a5/ev_il",
        "https://apiawordpressaorg/core/version-check/1a5/ev il",
        "https://apiawordpressaorg/core/version-check/1a5/ev4il",
        "https://apiawordpressaorg/core/version-check/1a5/e",
        "https://apiawordpressaorg/core/version-check/1a5/ ",
        "https://apiawordpressaorg/core/version-check/1a5/6",
        "https://apiawordpressaorg/core/version-check/1a5/_",
        "https://apiawordpressaorg/core/version-check/1A5/evil",
        "https://apiawordpressaorg/core/version-check/1:5/evil",
        "https://apiawordpressaorg/core/version-check/105/evil",
        "https://apiawordpressaorg/core/version-check/1/5/evil",
        "https://apiawordpressaorg/core/version-check/1-5/evil",
        "https://apiawordpressaorg/core/version-check/1 5/evil",
        "https://apiawordpressAorg/core/version-check/1a5/evil",
        "https://apiawordpress:org/core/version-check/1a5/evil",
        "https://apiawordpress0org/core/version-check/1a5/evil",
        "https://apiawordpress/org/core/version-check/1a5/evil",
        "https://apiawordpress-org/core/version-check/1a5/evil",
        "https://apiawordpress org/core/version-check/1a5/evil",
        "https://apiAwordpressaorg/core/version-check/1a5/evil",
        "https://api:wordpressaorg/core/version-check/1a5/evil",
        "https://api0wordpressaorg/core/version-check/1a5/evil",
        "https://api/wordpressaorg/core/version-check/1a5/evil",
        "https://api-wordpressaorg/core/version-check/1a5/evil",
        "https://api wordpressaorg/core/version-check/1a5/evil",
        "https://apiawordpressaorg/core/version-check/1a5/",
        "https://apiawordpressaorg/core/version-check/1a5/evil"
      ]
    },
    { "regex": "/|-", "exceptionStackTrace": null, "matches": ["-", "/"] },
    {
      "regex": "^(square|diamond|circle|star)\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "\\/ng\\-file\\-upload[\\-a-zA-z0-9\\.]*\\.js",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (bad range): Invalid range: A-z"
      },
      "matches": []
    },
    {
      "regex": "FOREIGN KEY\\s*\\($col\\)\\s*REFERENCES $r_table_name\\s*\\($r_col\\)",
      "exceptionStackTrace": null,
      "matches": [
        "FOREIGN KEY (col) REFERENCES r_table_name  (r_col)",
        "FOREIGN KEY (col) REFERENCES r_table_name(r_col)",
        "FOREIGN KEY (col)  REFERENCES r_table_name (r_col)",
        "FOREIGN KEY (col)REFERENCES r_table_name (r_col)",
        "FOREIGN KEY  (col) REFERENCES r_table_name (r_col)",
        "FOREIGN KEY(col) REFERENCES r_table_name (r_col)",
        "FOREIGN KEY(col)REFERENCES r_table_name(r_col)",
        "FOREIGN KEY (col) REFERENCES r_table_name (r_col)"
      ]
    },
    {
      "regex": "Tried to assign obfuscation",
      "exceptionStackTrace": null,
      "matches": ["Tried to assign obfuscation"]
    },
    {
      "regex": "^I sort the following items:$",
      "exceptionStackTrace": null,
      "matches": ["I sort the following items:"]
    },
    {
      "regex": "^(?<_1>\\s*)\\b(?<_2>\\-??include|ifeq|ifneq|ifdef|ifndef|else|endif|vpath|export|unexport|define|endef|override)\\b",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<_"
      },
      "matches": []
    },
    {
      "regex": "^(?:CASCADE|RESTRICT|NO ACTION|SET NULL)$",
      "exceptionStackTrace": null,
      "matches": ["SET NULL", "NO ACTION", "RESTRICT", "CASCADE"]
    },
    {
      "regex": "^I make a (POST|PUT) request with form data to (.+?)$",
      "exceptionStackTrace": null,
      "matches": [
        "I make a POST request with form data to eVil",
        "I make a POST request with form data to EVIL",
        "I make a POST request with form data to ev_il",
        "I make a POST request with form data to ev il",
        "I make a POST request with form data to ev4il",
        "I make a POST request with form data to e",
        "I make a POST request with form data to  ",
        "I make a POST request with form data to 6",
        "I make a POST request with form data to _",
        "I make a POST request with form data to ",
        "I make a PUT request with form data to evil",
        "I make a POST request with form data to evil"
      ]
    },
    {
      "regex": "ctime is read-only",
      "exceptionStackTrace": null,
      "matches": ["ctime is read-only"]
    },
    {
      "regex": "\u00e3\u0083\u00bc",
      "exceptionStackTrace": null,
      "matches": ["\u00e3\u0083\u00bc"]
    },
    {
      "regex": "\\b[a-z][.:]",
      "exceptionStackTrace": null,
      "matches": ["a.", "a:"]
    },
    {
      "regex": "[-+*/\\\\=%[\\]()^]",
      "exceptionStackTrace": null,
      "matches": ["]", "\\", "[", "=", "/", "-", "+", "*", ")", "(", "%", "^"]
    },
    {
      "regex": "(?!\\n$)\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "\\Adengan([_-].+)",
      "exceptionStackTrace": null,
      "matches": [
        "dengan--",
        "dengan-eVil",
        "dengan-EVIL",
        "dengan-ev_il",
        "dengan-ev il",
        "dengan-ev4il",
        "dengan-e",
        "dengan- ",
        "dengan-6",
        "dengan-_",
        "dengan-",
        "dengan_evil",
        "dengan-evil"
      ]
    },
    {
      "regex": "^(?:[-+]?0b[0-1_]+          (?# base 2)\n                  |[-+]?0[0-7_]+           (?# base 8)\n                  |[-+]?(?:0|[1-9][0-9_]*) (?# base 10)\n                  |[-+]?0x[0-9a-fA-F_]+    (?# base 16))$",
      "exceptionStackTrace": null,
      "matches": [
        "+0x__    ",
        "+0x    ",
        "+0xg    ",
        "+0xa    ",
        "+0xG    ",
        "+0xA    ",
        "+0x0    ",
        "++0x_    ",
        "-0x_    ",
        "+1__ \n                  ",
        "+1 \n                  ",
        "+10 \n                  ",
        "+0_ \n                  ",
        "++0 \n                  ",
        "-0 \n                  ",
        "+0__           \n                  ",
        "+0           \n                  ",
        "+08           \n                  ",
        "+00           \n                  ",
        "++0_           \n                  ",
        "-0_           \n                  ",
        "+0b__          \n                  ",
        "+0b          \n                  ",
        "+0b2          \n                  ",
        "+0b0          \n                  ",
        "++0b_          \n                  ",
        "-0b_          \n                  ",
        "0x_    ",
        "1 \n                  ",
        "0 \n                  ",
        "0_           \n                  ",
        "0b_          \n                  ",
        "+0x_    ",
        "+1_ \n                  ",
        "+0 \n                  ",
        "+0_           \n                  ",
        "+0b_          \n                  "
      ]
    },
    {
      "regex": "t\\.integer\\s+\\\"kitteh_movie_id\\\"",
      "exceptionStackTrace": null,
      "matches": [
        "t.integer  \"kitteh_movie_id\"",
        "t.integer\"kitteh_movie_id\"",
        "t.integer \"kitteh_movie_id\""
      ]
    },
    { "regex": "react$", "exceptionStackTrace": null, "matches": ["react"] },
    { "regex": "%world%", "exceptionStackTrace": null, "matches": ["%world%"] },
    {
      "regex": "\\[my_prefix\\]",
      "exceptionStackTrace": null,
      "matches": ["[my_prefix]"]
    },
    {
      "regex": "((\\w+):(\\w+\\pL.))+\\s?",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\p"
      },
      "matches": []
    },
    {
      "regex": "^\\d{3} \\d{2}$",
      "exceptionStackTrace": null,
      "matches": ["000 000", "000 0", "0000 00", "00 00", "000 00"]
    },
    {
      "regex": "(rule\\(:control_route_filter_type\\) do\\s*)s\\(\\s*arg,",
      "exceptionStackTrace": null,
      "matches": [
        "rule(:control_route_filter_type) do s(  arg,",
        "rule(:control_route_filter_type) do s(arg,",
        "rule(:control_route_filter_type) do  s( arg,",
        "rule(:control_route_filter_type) dos( arg,",
        "rule(:control_route_filter_type) dos(arg,",
        "rule(:control_route_filter_type) do s( arg,"
      ]
    },
    {
      "regex": "(\\w+)::~?(\\w+)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil::~eVil",
        "evil::~EVIL",
        "evil::~ev_il",
        "evil::~ev il",
        "evil::~ev4il",
        "evil::~e",
        "evil::~ ",
        "evil::~6",
        "evil::~_",
        "evil::~",
        "evil::~~evil",
        "eVil::~evil",
        "EVIL::~evil",
        "ev_il::~evil",
        "ev il::~evil",
        "ev4il::~evil",
        "e::~evil",
        " ::~evil",
        "6::~evil",
        "_::~evil",
        "::~evil",
        "evil::evil",
        "evil::~evil"
      ]
    },
    { "regex": "\\bXXX\\b", "exceptionStackTrace": null, "matches": ["XXX"] },
    {
      "regex": "window\\.mapboxgl",
      "exceptionStackTrace": null,
      "matches": ["window.mapboxgl"]
    },
    {
      "regex": "^put (.*?)=>(.*?)$",
      "exceptionStackTrace": null,
      "matches": [
        "put evil=>>",
        "put evil=>=",
        "put evil=>eVil",
        "put evil=>EVIL",
        "put evil=>ev_il",
        "put evil=>ev il",
        "put evil=>ev4il",
        "put evil=>e",
        "put evil=> ",
        "put evil=>6",
        "put evil=>_",
        "put evil=>",
        "put >=>evil",
        "put ==>evil",
        "put eVil=>evil",
        "put EVIL=>evil",
        "put ev_il=>evil",
        "put ev il=>evil",
        "put ev4il=>evil",
        "put e=>evil",
        "put  =>evil",
        "put 6=>evil",
        "put _=>evil",
        "put =>evil",
        "put =>",
        "put evil=>evil"
      ]
    },
    {
      "regex": "[T\\s](\\d+):(\\d+):?(\\d+)?\\.?(\\d)?",
      "exceptionStackTrace": null,
      "matches": [
        "T0:0:0.00",
        "T0:0:0.",
        "T0:0:0..0",
        "T0:0:00",
        "T0:0:00.0",
        "T0:0:.0",
        "T0:0::0.0",
        "T0:00.0",
        "T0:00:0.0",
        "T0::0.0",
        "T00:0:0.0",
        "T:0:0.0",
        "A0:0:0.0",
        " 0:0:0.0",
        "T0:0",
        "T0:0:0.0"
      ]
    },
    {
      "regex": "$minionString",
      "exceptionStackTrace": null,
      "matches": ["minionString"]
    },
    {
      "regex": "<sqrt\\s*\\/>",
      "exceptionStackTrace": null,
      "matches": ["<sqrt  />", "<sqrt/>", "<sqrt />"]
    },
    {
      "regex": "^\\/github\\/stars\\/([^/]+)\\/([^/]+)\\.(svg|png|gif|jpg|json)$",
      "exceptionStackTrace": null,
      "matches": [
        "/github/stars/evil//.svg",
        "/github/stars/evil/..svg",
        "/github/stars/evil/eVil.svg",
        "/github/stars/evil/EVIL.svg",
        "/github/stars/evil/ev_il.svg",
        "/github/stars/evil/ev il.svg",
        "/github/stars/evil/ev4il.svg",
        "/github/stars/evil/e.svg",
        "/github/stars/evil/ .svg",
        "/github/stars/evil/6.svg",
        "/github/stars/evil/_.svg",
        "/github/stars/evil/.svg",
        "/github/stars///evil.svg",
        "/github/stars/./evil.svg",
        "/github/stars/eVil/evil.svg",
        "/github/stars/EVIL/evil.svg",
        "/github/stars/ev_il/evil.svg",
        "/github/stars/ev il/evil.svg",
        "/github/stars/ev4il/evil.svg",
        "/github/stars/e/evil.svg",
        "/github/stars/ /evil.svg",
        "/github/stars/6/evil.svg",
        "/github/stars/_/evil.svg",
        "/github/stars//evil.svg",
        "/github/stars/evil/evil.json",
        "/github/stars/evil/evil.jpg",
        "/github/stars/evil/evil.gif",
        "/github/stars/evil/evil.png",
        "/github/stars/evil/evil.svg"
      ]
    },
    {
      "regex": "^([0-9]*(\\.[0-9]*)?([Ee][+-]?[0-9]+)?|inf|nan)$",
      "exceptionStackTrace": null,
      "matches": [
        "0.0e-0e-0",
        "0.0",
        "0.0e-00",
        "0.0e-",
        "0.0e--0",
        "0.0e0",
        "0.0e+0",
        "0.0a-0",
        "0.0E-0",
        "0.0A-0",
        "0.0.0e-0",
        "0e-0",
        "0.00e-0",
        "0.e-0",
        "00.0e-0",
        ".0e-0",
        "",
        "nan",
        "inf",
        "0.0e-0"
      ]
    },
    {
      "regex": "(funcname|modulename|sitename)",
      "exceptionStackTrace": null,
      "matches": ["sitename", "modulename", "funcname"]
    },
    {
      "regex": "GET\\s+/rec\\(\\.:format\\)\\s+dummy#index\\s+1",
      "exceptionStackTrace": null,
      "matches": [
        "GET /rec(.:format) dummy#index  1",
        "GET /rec(.:format) dummy#index1",
        "GET /rec(.:format)  dummy#index 1",
        "GET /rec(.:format)dummy#index 1",
        "GET  /rec(.:format) dummy#index 1",
        "GET/rec(.:format) dummy#index 1",
        "GET /rec(.:format) dummy#index 1"
      ]
    },
    {
      "regex": "\\b([0-9.]+)px\\b",
      "exceptionStackTrace": null,
      "matches": ["..px", "px", "0px", ".px"]
    },
    {
      "regex": "<checkSumAdjustment value=\"[^\"]+\"/>",
      "exceptionStackTrace": null,
      "matches": [
        "<checkSumAdjustment value=\">\"/>",
        "<checkSumAdjustment value=\"=\"/>",
        "<checkSumAdjustment value=\"<\"/>",
        "<checkSumAdjustment value=\"/\"/>",
        "<checkSumAdjustment value=\"\"\"/>",
        "<checkSumAdjustment value=\"eVil\"/>",
        "<checkSumAdjustment value=\"EVIL\"/>",
        "<checkSumAdjustment value=\"ev_il\"/>",
        "<checkSumAdjustment value=\"ev il\"/>",
        "<checkSumAdjustment value=\"ev4il\"/>",
        "<checkSumAdjustment value=\"e\"/>",
        "<checkSumAdjustment value=\" \"/>",
        "<checkSumAdjustment value=\"6\"/>",
        "<checkSumAdjustment value=\"_\"/>",
        "<checkSumAdjustment value=\"\"/>",
        "<checkSumAdjustment value=\"evil\"/>"
      ]
    },
    {
      "regex": "([^\\.]+)\\.es\\.amazonaws.com$",
      "exceptionStackTrace": null,
      "matches": [
        "evil.es.amazonawsAcom",
        "evil.es.amazonaws0com",
        "evil.es.amazonaws.com",
        "evil.es.amazonaws com",
        "..es.amazonawsacom",
        "eVil.es.amazonawsacom",
        "EVIL.es.amazonawsacom",
        "ev_il.es.amazonawsacom",
        "ev il.es.amazonawsacom",
        "ev4il.es.amazonawsacom",
        "e.es.amazonawsacom",
        " .es.amazonawsacom",
        "6.es.amazonawsacom",
        "_.es.amazonawsacom",
        ".es.amazonawsacom",
        "evil.es.amazonawsacom"
      ]
    },
    {
      "regex": "version=\"(.*)\"",
      "exceptionStackTrace": null,
      "matches": [
        "version=\"=\"",
        "version=\"\"\"",
        "version=\"eVil\"",
        "version=\"EVIL\"",
        "version=\"ev_il\"",
        "version=\"ev il\"",
        "version=\"ev4il\"",
        "version=\"e\"",
        "version=\" \"",
        "version=\"6\"",
        "version=\"_\"",
        "version=\"\"",
        "version=\"evil\""
      ]
    },
    {
      "regex": "(code=).*",
      "exceptionStackTrace": null,
      "matches": [
        "code==",
        "code=eVil",
        "code=EVIL",
        "code=ev_il",
        "code=ev il",
        "code=ev4il",
        "code=e",
        "code= ",
        "code=6",
        "code=_",
        "code=",
        "code=evil"
      ]
    },
    {
      "regex": "[\\s-\\._]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad character range \\s-\\."
      },
      "matches": []
    },
    {
      "regex": "\n               [^\\w\\/.-](?:volume|vol\\.?|v\\.?)?\\s*[a-z]*?\\d+[a-z]*? # volume\n               [^\\w\\/.-]+(?:n |n.|no |no.|number |issue |\\#|p |p.|pp.|page )\\s*[a-z]*?\\d+[a-z]*?\n               (?:\\W|$)",
      "exceptionStackTrace": null,
      "matches": [
        "\n                v.. evil0evil # volume\n               eviln  evil0evil\n               ;",
        "\n                v evil0evil # volume\n               eviln  evil0evil\n               ;",
        "\n                vol.. evil0evil # volume\n               eviln  evil0evil\n               ;",
        "\n                vol evil0evil # volume\n               eviln  evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               evilppA evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               evilpp0 evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               evilpp/ evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               evilpp. evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               evilpp- evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               evilpp# evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               evilpp  evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               evilpA evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               evilp0 evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               evilp/ evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               evilp. evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               evilp- evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               evilp# evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               evilnoA evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               evilno0 evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               evilno/ evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               evilno. evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               evilno- evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               evilno# evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               evilnA evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               eviln0 evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               eviln/ evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               eviln. evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               eviln- evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               eviln# evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               eviln  evil0evil\n               a",
        "\n                volume evil0evil # volume\n               eviln  evil0evil\n               _",
        "\n                volume evil0evil # volume\n               eviln  evil0evil\n               A",
        "\n                volume evil0evil # volume\n               eviln  evil0evil\n               0",
        "\n                volume evil0evil # volume\n               eviln  evil0evil\n               /",
        "\n                volume evil0evil # volume\n               eviln  evil0evil\n               .",
        "\n                volume evil0evil # volume\n               eviln  evil0evil\n               -",
        "\n                volume evil0evil # volume\n               eviln  evil0evil\n               #",
        "\n                volume evil0evil # volume\n               eviln  evil0evil\n                ",
        "\n                volume evil0evil # volume\n               eviln  evil0eVil\n               ;",
        "\n                volume evil0evil # volume\n               eviln  evil0EVIL\n               ;",
        "\n                volume evil0evil # volume\n               eviln  evil0ev_il\n               ;",
        "\n                volume evil0evil # volume\n               eviln  evil0ev il\n               ;",
        "\n                volume evil0evil # volume\n               eviln  evil0ev4il\n               ;",
        "\n                volume evil0evil # volume\n               eviln  evil0e\n               ;",
        "\n                volume evil0evil # volume\n               eviln  evil0 \n               ;",
        "\n                volume evil0evil # volume\n               eviln  evil06\n               ;",
        "\n                volume evil0evil # volume\n               eviln  evil0_\n               ;",
        "\n                volume evil0evil # volume\n               eviln  evil0\n               ;",
        "\n                volume evil0evil # volume\n               eviln  evil00evil\n               ;",
        "\n                volume evil0evil # volume\n               eviln  evilevil\n               ;",
        "\n                volume evil0evil # volume\n               eviln  eVil0evil\n               ;",
        "\n                volume evil0evil # volume\n               eviln  EVIL0evil\n               ;",
        "\n                volume evil0evil # volume\n               eviln  ev_il0evil\n               ;",
        "\n                volume evil0evil # volume\n               eviln  ev il0evil\n               ;",
        "\n                volume evil0evil # volume\n               eviln  ev4il0evil\n               ;",
        "\n                volume evil0evil # volume\n               eviln  e0evil\n               ;",
        "\n                volume evil0evil # volume\n               eviln   0evil\n               ;",
        "\n                volume evil0evil # volume\n               eviln  60evil\n               ;",
        "\n                volume evil0evil # volume\n               eviln  _0evil\n               ;",
        "\n                volume evil0evil # volume\n               eviln  0evil\n               ;",
        "\n                volume evil0evil # volume\n               eviln   evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               eviln evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               /n  evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               .n  evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               -n  evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               #n  evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               eViln  evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               EVILn  evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               ev_iln  evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               ev iln  evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               ev4iln  evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               en  evil0evil\n               ;",
        "\n                volume evil0evil # volume\n                n  evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               6n  evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               _n  evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               n  evil0evil\n               ;",
        "\n                volume evil0eVil # volume\n               eviln  evil0evil\n               ;",
        "\n                volume evil0EVIL # volume\n               eviln  evil0evil\n               ;",
        "\n                volume evil0ev_il # volume\n               eviln  evil0evil\n               ;",
        "\n                volume evil0ev il # volume\n               eviln  evil0evil\n               ;",
        "\n                volume evil0ev4il # volume\n               eviln  evil0evil\n               ;",
        "\n                volume evil0e # volume\n               eviln  evil0evil\n               ;",
        "\n                volume evil0  # volume\n               eviln  evil0evil\n               ;",
        "\n                volume evil06 # volume\n               eviln  evil0evil\n               ;",
        "\n                volume evil0_ # volume\n               eviln  evil0evil\n               ;",
        "\n                volume evil0 # volume\n               eviln  evil0evil\n               ;",
        "\n                volume evil00evil # volume\n               eviln  evil0evil\n               ;",
        "\n                volume evilevil # volume\n               eviln  evil0evil\n               ;",
        "\n                volume eVil0evil # volume\n               eviln  evil0evil\n               ;",
        "\n                volume EVIL0evil # volume\n               eviln  evil0evil\n               ;",
        "\n                volume ev_il0evil # volume\n               eviln  evil0evil\n               ;",
        "\n                volume ev il0evil # volume\n               eviln  evil0evil\n               ;",
        "\n                volume ev4il0evil # volume\n               eviln  evil0evil\n               ;",
        "\n                volume e0evil # volume\n               eviln  evil0evil\n               ;",
        "\n                volume  0evil # volume\n               eviln  evil0evil\n               ;",
        "\n                volume 60evil # volume\n               eviln  evil0evil\n               ;",
        "\n                volume _0evil # volume\n               eviln  evil0evil\n               ;",
        "\n                volume 0evil # volume\n               eviln  evil0evil\n               ;",
        "\n                volume  evil0evil # volume\n               eviln  evil0evil\n               ;",
        "\n                volumeevil0evil # volume\n               eviln  evil0evil\n               ;",
        "\n                volumevolume evil0evil # volume\n               eviln  evil0evil\n               ;",
        "\n                 evil0evil # volume\n               eviln  evil0evil\n               ;",
        "\n               avolume evil0evil # volume\n               eviln  evil0evil\n               ;",
        "\n               _volume evil0evil # volume\n               eviln  evil0evil\n               ;",
        "\n               Avolume evil0evil # volume\n               eviln  evil0evil\n               ;",
        "\n               0volume evil0evil # volume\n               eviln  evil0evil\n               ;",
        "\n               /volume evil0evil # volume\n               eviln  evil0evil\n               ;",
        "\n               .volume evil0evil # volume\n               eviln  evil0evil\n               ;",
        "\n               -volume evil0evil # volume\n               eviln  evil0evil\n               ;",
        "\n               #volume evil0evil # volume\n               eviln  evil0evil\n               ;",
        "\n                0 # volume\n               evilpage 0\n               ;",
        "\n                0 # volume\n               evilppa0\n               ;",
        "\n                0 # volume\n               evilpa0\n               ;",
        "\n                0 # volume\n               evilp 0\n               ;",
        "\n                0 # volume\n               evil#0\n               ;",
        "\n                0 # volume\n               evilissue 0\n               ;",
        "\n                0 # volume\n               evilnumber 0\n               ;",
        "\n                0 # volume\n               evilnoa0\n               ;",
        "\n                0 # volume\n               evilno 0\n               ;",
        "\n                0 # volume\n               evilna0\n               ;",
        "\n                0 # volume\n               eviln 0\n               ",
        "\n                0 # volume\n               eviln 0\n               ;",
        "\n                v. evil0evil # volume\n               eviln  evil0evil\n               ;",
        "\n                vol. evil0evil # volume\n               eviln  evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               evilpage  evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               evilppa evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               evilpa evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               evilp  evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               evil# evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               evilissue  evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               evilnumber  evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               evilnoa evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               evilno  evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               evilna evil0evil\n               ;",
        "\n                volume evil0evil # volume\n               eviln  evil0evil\n               ",
        "\n                volume evil0evil # volume\n               eviln  evil0evil\n               ;"
      ]
    },
    {
      "regex": "^ *(`{3,}|~{3,})[ ]*$",
      "exceptionStackTrace": null,
      "matches": [
        " ~~ ",
        " ```  ",
        " ```",
        " `` ",
        "  ``` ",
        "``` ",
        "~~~",
        "```",
        " ~~~ ",
        " ``` "
      ]
    },
    {
      "regex": "^\\s*\\{([^\\}]+)\\}\\s+(\\S+)(?:\\s+((?:.|[\\r\\n])+))?",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    { "regex": "\\A [%] ", "exceptionStackTrace": null, "matches": [" % "] },
    {
      "regex": "\"context\":{.*\"route\":\"",
      "exceptionStackTrace": null,
      "matches": [
        "\"context\":{{\"route\":\"",
        "\"context\":{:\"route\":\"",
        "\"context\":{\"\"route\":\"",
        "\"context\":{eVil\"route\":\"",
        "\"context\":{EVIL\"route\":\"",
        "\"context\":{ev_il\"route\":\"",
        "\"context\":{ev il\"route\":\"",
        "\"context\":{ev4il\"route\":\"",
        "\"context\":{e\"route\":\"",
        "\"context\":{ \"route\":\"",
        "\"context\":{6\"route\":\"",
        "\"context\":{_\"route\":\"",
        "\"context\":{\"route\":\"",
        "\"context\":{evil\"route\":\""
      ]
    },
    {
      "regex": "torch\\..*(Variable|Parameter)",
      "exceptionStackTrace": null,
      "matches": [
        "torch..Variable",
        "torch.eVilVariable",
        "torch.EVILVariable",
        "torch.ev_ilVariable",
        "torch.ev ilVariable",
        "torch.ev4ilVariable",
        "torch.eVariable",
        "torch. Variable",
        "torch.6Variable",
        "torch._Variable",
        "torch.Parameter",
        "torch.Variable",
        "torch.evilParameter",
        "torch.evilVariable"
      ]
    },
    {
      "regex": "Reading (.+) \\(([^)]+)\\) Hentai(?: by (.+))? - (\\d+): (.+) . Page 1 ",
      "exceptionStackTrace": null,
      "matches": [
        "Reading evil (evil) Hentai by evil - 0: evil A Page 1 ",
        "Reading evil (evil) Hentai by evil - 0: evil : Page 1 ",
        "Reading evil (evil) Hentai by evil - 0: evil 0 Page 1 ",
        "Reading evil (evil) Hentai by evil - 0: evil - Page 1 ",
        "Reading evil (evil) Hentai by evil - 0: evil ) Page 1 ",
        "Reading evil (evil) Hentai by evil - 0: evil ( Page 1 ",
        "Reading evil (evil) Hentai by evil - 0: evil   Page 1 ",
        "Reading evil (evil) Hentai by evil - 0: : a Page 1 ",
        "Reading evil (evil) Hentai by evil - 0: - a Page 1 ",
        "Reading evil (evil) Hentai by evil - 0: ) a Page 1 ",
        "Reading evil (evil) Hentai by evil - 0: ( a Page 1 ",
        "Reading evil (evil) Hentai by evil - 0: eVil a Page 1 ",
        "Reading evil (evil) Hentai by evil - 0: EVIL a Page 1 ",
        "Reading evil (evil) Hentai by evil - 0: ev_il a Page 1 ",
        "Reading evil (evil) Hentai by evil - 0: ev il a Page 1 ",
        "Reading evil (evil) Hentai by evil - 0: ev4il a Page 1 ",
        "Reading evil (evil) Hentai by evil - 0: e a Page 1 ",
        "Reading evil (evil) Hentai by evil - 0:   a Page 1 ",
        "Reading evil (evil) Hentai by evil - 0: 6 a Page 1 ",
        "Reading evil (evil) Hentai by evil - 0: _ a Page 1 ",
        "Reading evil (evil) Hentai by evil - 0:  a Page 1 ",
        "Reading evil (evil) Hentai by evil - 00: evil a Page 1 ",
        "Reading evil (evil) Hentai by evil - : evil a Page 1 ",
        "Reading evil (evil) Hentai by evil by evil - 0: evil a Page 1 ",
        "Reading evil (evil) Hentai by : - 0: evil a Page 1 ",
        "Reading evil (evil) Hentai by - - 0: evil a Page 1 ",
        "Reading evil (evil) Hentai by ) - 0: evil a Page 1 ",
        "Reading evil (evil) Hentai by ( - 0: evil a Page 1 ",
        "Reading evil (evil) Hentai by eVil - 0: evil a Page 1 ",
        "Reading evil (evil) Hentai by EVIL - 0: evil a Page 1 ",
        "Reading evil (evil) Hentai by ev_il - 0: evil a Page 1 ",
        "Reading evil (evil) Hentai by ev il - 0: evil a Page 1 ",
        "Reading evil (evil) Hentai by ev4il - 0: evil a Page 1 ",
        "Reading evil (evil) Hentai by e - 0: evil a Page 1 ",
        "Reading evil (evil) Hentai by   - 0: evil a Page 1 ",
        "Reading evil (evil) Hentai by 6 - 0: evil a Page 1 ",
        "Reading evil (evil) Hentai by _ - 0: evil a Page 1 ",
        "Reading evil (evil) Hentai by  - 0: evil a Page 1 ",
        "Reading evil (:) Hentai by evil - 0: evil a Page 1 ",
        "Reading evil (-) Hentai by evil - 0: evil a Page 1 ",
        "Reading evil ()) Hentai by evil - 0: evil a Page 1 ",
        "Reading evil (() Hentai by evil - 0: evil a Page 1 ",
        "Reading evil (eVil) Hentai by evil - 0: evil a Page 1 ",
        "Reading evil (EVIL) Hentai by evil - 0: evil a Page 1 ",
        "Reading evil (ev_il) Hentai by evil - 0: evil a Page 1 ",
        "Reading evil (ev il) Hentai by evil - 0: evil a Page 1 ",
        "Reading evil (ev4il) Hentai by evil - 0: evil a Page 1 ",
        "Reading evil (e) Hentai by evil - 0: evil a Page 1 ",
        "Reading evil ( ) Hentai by evil - 0: evil a Page 1 ",
        "Reading evil (6) Hentai by evil - 0: evil a Page 1 ",
        "Reading evil (_) Hentai by evil - 0: evil a Page 1 ",
        "Reading evil () Hentai by evil - 0: evil a Page 1 ",
        "Reading : (evil) Hentai by evil - 0: evil a Page 1 ",
        "Reading - (evil) Hentai by evil - 0: evil a Page 1 ",
        "Reading ) (evil) Hentai by evil - 0: evil a Page 1 ",
        "Reading ( (evil) Hentai by evil - 0: evil a Page 1 ",
        "Reading eVil (evil) Hentai by evil - 0: evil a Page 1 ",
        "Reading EVIL (evil) Hentai by evil - 0: evil a Page 1 ",
        "Reading ev_il (evil) Hentai by evil - 0: evil a Page 1 ",
        "Reading ev il (evil) Hentai by evil - 0: evil a Page 1 ",
        "Reading ev4il (evil) Hentai by evil - 0: evil a Page 1 ",
        "Reading e (evil) Hentai by evil - 0: evil a Page 1 ",
        "Reading   (evil) Hentai by evil - 0: evil a Page 1 ",
        "Reading 6 (evil) Hentai by evil - 0: evil a Page 1 ",
        "Reading _ (evil) Hentai by evil - 0: evil a Page 1 ",
        "Reading  (evil) Hentai by evil - 0: evil a Page 1 ",
        "Reading evil (evil) Hentai - 0: evil a Page 1 ",
        "Reading evil (evil) Hentai by evil - 0: evil a Page 1 "
      ]
    },
    {
      "regex": "(http://dld\\.bz/([\\w/]+))",
      "exceptionStackTrace": null,
      "matches": [
        "http://dld.bz/:",
        "http://dld.bz//",
        "http://dld.bz/.",
        "http://dld.bz/eVil",
        "http://dld.bz/EVIL",
        "http://dld.bz/ev_il",
        "http://dld.bz/ev il",
        "http://dld.bz/ev4il",
        "http://dld.bz/e",
        "http://dld.bz/ ",
        "http://dld.bz/6",
        "http://dld.bz/_",
        "http://dld.bz/",
        "http://dld.bz/evil"
      ]
    },
    {
      "regex": "^[^(){},\\s]+\\s+(\\+\\D)",
      "exceptionStackTrace": null,
      "matches": [
        "evil +}",
        "evil +{",
        "evil +_",
        "evil +A",
        "evil +0",
        "evil +,",
        "evil ++",
        "evil +)",
        "evil +(",
        "evil + ",
        "evil  +a",
        "evil+a",
        "} +a",
        "{ +a",
        ", +a",
        "+ +a",
        ") +a",
        "( +a",
        "eVil +a",
        "EVIL +a",
        "ev_il +a",
        "ev il +a",
        "ev4il +a",
        "e +a",
        "  +a",
        "6 +a",
        "_ +a",
        " +a",
        "evil +a"
      ]
    },
    {
      "regex": "^it should( not)? (pass|fail) (?:with regexp?|matching):$",
      "exceptionStackTrace": null,
      "matches": [
        "it should not pass with regexpp:",
        "it should not pass with regex:",
        "it should not not pass with regexp:",
        "it should pass with regexp:",
        "it should fail with regex:",
        "it should pass matching:",
        "it should pass with regex:",
        "it should not fail with regexp:",
        "it should not pass matching:",
        "it should not pass with regexp:"
      ]
    },
    {
      "regex": "require \"deep\\/hyphenated\\/name\\/engine\"",
      "exceptionStackTrace": null,
      "matches": ["require \"deep/hyphenated/name/engine\""]
    },
    {
      "regex": "\\\\(\\d{1,3}|x[a-fA-F0-9]+|u[a-fA-F0-9]{1,4}|.|\\n)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "iPad|iPhone",
      "exceptionStackTrace": null,
      "matches": ["iPhone", "iPad"]
    },
    {
      "regex": "(?:[012]?\\d|3[01])[-_\\\\\\/\\. ](?:0?\\d|1[012])[-_\\\\\\/\\. ](?:19|20)\\d\\d(?!\\d)",
      "exceptionStackTrace": null,
      "matches": [
        "32 00 1900",
        "20 13 1900",
        "20 11 1900",
        "20 10 1900",
        "20 00_1900",
        "20 00\\1900",
        "20 00/1900",
        "20 00.1900",
        "20 00-1900",
        "20 000 1900",
        "20 0 1900",
        "20_00 1900",
        "20\\00 1900",
        "20/00 1900",
        "20.00 1900",
        "20-00 1900",
        "220 00 1900",
        "0 00 1900",
        "30 00 1900",
        "10 00 1900",
        "00 00 1900",
        "31 0 1900",
        "0 12 1900",
        "0 0 2000",
        "0 0 1900",
        "31 00 1900",
        "20 12 1900",
        "20 00 2000",
        "20 00 1900"
      ]
    },
    {
      "regex": "^([^",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unterminated character set"
      },
      "matches": []
    },
    {
      "regex": "<.*?br\\/>",
      "exceptionStackTrace": null,
      "matches": [
        "<>br/>",
        "<<br/>",
        "</br/>",
        "<eVilbr/>",
        "<EVILbr/>",
        "<ev_ilbr/>",
        "<ev ilbr/>",
        "<ev4ilbr/>",
        "<ebr/>",
        "< br/>",
        "<6br/>",
        "<_br/>",
        "<br/>",
        "<evilbr/>"
      ]
    },
    {
      "regex": "\\G(?=\\S)(?<_1>\\^)?",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\G"
      },
      "matches": []
    },
    {
      "regex": "^<a data-cke-autoembed=\"\\d+\" href=\"https:\\/\\/foo.bar\\/bom\" id=\"kitty\" name=\"colonelMeow\">https:\\/\\/foo.bar\\/bom<\\/a>$",
      "exceptionStackTrace": null,
      "matches": [
        "<a data-cke-autoembed=\"0\" href=\"https://fooabar/bom\" id=\"kitty\" name=\"colonelMeow\">https://fooAbar/bom</a>",
        "<a data-cke-autoembed=\"0\" href=\"https://fooabar/bom\" id=\"kitty\" name=\"colonelMeow\">https://foo>bar/bom</a>",
        "<a data-cke-autoembed=\"0\" href=\"https://fooabar/bom\" id=\"kitty\" name=\"colonelMeow\">https://foo=bar/bom</a>",
        "<a data-cke-autoembed=\"0\" href=\"https://fooabar/bom\" id=\"kitty\" name=\"colonelMeow\">https://foo<bar/bom</a>",
        "<a data-cke-autoembed=\"0\" href=\"https://fooabar/bom\" id=\"kitty\" name=\"colonelMeow\">https://foo:bar/bom</a>",
        "<a data-cke-autoembed=\"0\" href=\"https://fooabar/bom\" id=\"kitty\" name=\"colonelMeow\">https://foo0bar/bom</a>",
        "<a data-cke-autoembed=\"0\" href=\"https://fooabar/bom\" id=\"kitty\" name=\"colonelMeow\">https://foo/bar/bom</a>",
        "<a data-cke-autoembed=\"0\" href=\"https://fooabar/bom\" id=\"kitty\" name=\"colonelMeow\">https://foo-bar/bom</a>",
        "<a data-cke-autoembed=\"0\" href=\"https://fooabar/bom\" id=\"kitty\" name=\"colonelMeow\">https://foo\"bar/bom</a>",
        "<a data-cke-autoembed=\"0\" href=\"https://fooabar/bom\" id=\"kitty\" name=\"colonelMeow\">https://foo bar/bom</a>",
        "<a data-cke-autoembed=\"0\" href=\"https://fooAbar/bom\" id=\"kitty\" name=\"colonelMeow\">https://fooabar/bom</a>",
        "<a data-cke-autoembed=\"0\" href=\"https://foo>bar/bom\" id=\"kitty\" name=\"colonelMeow\">https://fooabar/bom</a>",
        "<a data-cke-autoembed=\"0\" href=\"https://foo=bar/bom\" id=\"kitty\" name=\"colonelMeow\">https://fooabar/bom</a>",
        "<a data-cke-autoembed=\"0\" href=\"https://foo<bar/bom\" id=\"kitty\" name=\"colonelMeow\">https://fooabar/bom</a>",
        "<a data-cke-autoembed=\"0\" href=\"https://foo:bar/bom\" id=\"kitty\" name=\"colonelMeow\">https://fooabar/bom</a>",
        "<a data-cke-autoembed=\"0\" href=\"https://foo0bar/bom\" id=\"kitty\" name=\"colonelMeow\">https://fooabar/bom</a>",
        "<a data-cke-autoembed=\"0\" href=\"https://foo/bar/bom\" id=\"kitty\" name=\"colonelMeow\">https://fooabar/bom</a>",
        "<a data-cke-autoembed=\"0\" href=\"https://foo-bar/bom\" id=\"kitty\" name=\"colonelMeow\">https://fooabar/bom</a>",
        "<a data-cke-autoembed=\"0\" href=\"https://foo\"bar/bom\" id=\"kitty\" name=\"colonelMeow\">https://fooabar/bom</a>",
        "<a data-cke-autoembed=\"0\" href=\"https://foo bar/bom\" id=\"kitty\" name=\"colonelMeow\">https://fooabar/bom</a>",
        "<a data-cke-autoembed=\"00\" href=\"https://fooabar/bom\" id=\"kitty\" name=\"colonelMeow\">https://fooabar/bom</a>",
        "<a data-cke-autoembed=\"\" href=\"https://fooabar/bom\" id=\"kitty\" name=\"colonelMeow\">https://fooabar/bom</a>",
        "<a data-cke-autoembed=\"0\" href=\"https://fooabar/bom\" id=\"kitty\" name=\"colonelMeow\">https://fooabar/bom</a>"
      ]
    },
    {
      "regex": "\\.(eps|svg)$",
      "exceptionStackTrace": null,
      "matches": [".svg", ".eps"]
    },
    {
      "regex": "\\/dev\\/(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "/dev//",
        "/dev/eVil",
        "/dev/EVIL",
        "/dev/ev_il",
        "/dev/ev il",
        "/dev/ev4il",
        "/dev/e",
        "/dev/ ",
        "/dev/6",
        "/dev/_",
        "/dev/",
        "/dev/evil"
      ]
    },
    { "regex": "\\A\\/T", "exceptionStackTrace": null, "matches": ["/T"] },
    {
      "regex": "^Response:\\s\\d+,\\sError:\\s(\\d+)\\s-\\s([a-z\\s]+).+",
      "exceptionStackTrace": null,
      "matches": [
        "Response: 0, Error: 0 - evil:",
        "Response: 0, Error: 0 - evil-",
        "Response: 0, Error: 0 - evil,",
        "Response: 0, Error: 0 - evileVil",
        "Response: 0, Error: 0 - evilEVIL",
        "Response: 0, Error: 0 - evilev_il",
        "Response: 0, Error: 0 - evilev il",
        "Response: 0, Error: 0 - evilev4il",
        "Response: 0, Error: 0 - evile",
        "Response: 0, Error: 0 - evil ",
        "Response: 0, Error: 0 - evil6",
        "Response: 0, Error: 0 - evil_",
        "Response: 0, Error: 0 - eVilevil",
        "Response: 0, Error: 0 - EVILevil",
        "Response: 0, Error: 0 - ev_ilevil",
        "Response: 0, Error: 0 - ev ilevil",
        "Response: 0, Error: 0 - ev4ilevil",
        "Response: 0, Error: 0 - eevil",
        "Response: 0, Error: 0 -  evil",
        "Response: 0, Error: 0 - 6evil",
        "Response: 0, Error: 0 - _evil",
        "Response: 0, Error: 0 - evil",
        "Response: 0, Error: 00 - evilevil",
        "Response: 0, Error:  - evilevil",
        "Response: 00, Error: 0 - evilevil",
        "Response: , Error: 0 - evilevil",
        "Response: 0, Error: 0 - evilevil"
      ]
    },
    {
      "regex": "^\\/Date\\((-?[0-9]+)\\)\\/$",
      "exceptionStackTrace": null,
      "matches": [
        "/Date(-00)/",
        "/Date(-)/",
        "/Date(--0)/",
        "/Date(0)/",
        "/Date(-0)/"
      ]
    },
    {
      "regex": "<% ICON_IDENTIFIER %>",
      "exceptionStackTrace": null,
      "matches": ["<% ICON_IDENTIFIER %>"]
    },
    {
      "regex": "\\A--(.+?)(?:=(.*))?\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "^id:([^ ]+) sub:(\\d{1,3}) dlvrd:(\\d{3}) submit date:(\\d{10,12}) done date:(\\d{10,12}) stat:([A-Z ]{7}) err:(\\d{2,3}) text:(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "id:evil sub:0 dlvrd:000 submit date:0000000000 done date:0000000000 stat:        err:00 text::",
        "id:evil sub:0 dlvrd:000 submit date:0000000000 done date:0000000000 stat:        err:00 text:eVil",
        "id:evil sub:0 dlvrd:000 submit date:0000000000 done date:0000000000 stat:        err:00 text:EVIL",
        "id:evil sub:0 dlvrd:000 submit date:0000000000 done date:0000000000 stat:        err:00 text:ev_il",
        "id:evil sub:0 dlvrd:000 submit date:0000000000 done date:0000000000 stat:        err:00 text:ev il",
        "id:evil sub:0 dlvrd:000 submit date:0000000000 done date:0000000000 stat:        err:00 text:ev4il",
        "id:evil sub:0 dlvrd:000 submit date:0000000000 done date:0000000000 stat:        err:00 text:e",
        "id:evil sub:0 dlvrd:000 submit date:0000000000 done date:0000000000 stat:        err:00 text: ",
        "id:evil sub:0 dlvrd:000 submit date:0000000000 done date:0000000000 stat:        err:00 text:6",
        "id:evil sub:0 dlvrd:000 submit date:0000000000 done date:0000000000 stat:        err:00 text:_",
        "id:evil sub:0 dlvrd:000 submit date:0000000000 done date:0000000000 stat:        err:0000 text:evil",
        "id:evil sub:0 dlvrd:000 submit date:0000000000 done date:0000000000 stat:        err:000 text:evil",
        "id:evil sub:0 dlvrd:000 submit date:0000000000 done date:0000000000 stat:        err:0 text:evil",
        "id:evil sub:0 dlvrd:000 submit date:0000000000 done date:0000000000 stat:         err:00 text:evil",
        "id:evil sub:0 dlvrd:000 submit date:0000000000 done date:0000000000 stat:       err:00 text:evil",
        "id:evil sub:0 dlvrd:000 submit date:0000000000 done date:0000000000 stat:A       err:00 text:evil",
        "id:evil sub:0 dlvrd:000 submit date:0000000000 done date:0000000000000 stat:        err:00 text:evil",
        "id:evil sub:0 dlvrd:000 submit date:0000000000 done date:000000000000 stat:        err:00 text:evil",
        "id:evil sub:0 dlvrd:000 submit date:0000000000 done date:000000000 stat:        err:00 text:evil",
        "id:evil sub:0 dlvrd:000 submit date:0000000000000 done date:0000000000 stat:        err:00 text:evil",
        "id:evil sub:0 dlvrd:000 submit date:000000000000 done date:0000000000 stat:        err:00 text:evil",
        "id:evil sub:0 dlvrd:000 submit date:000000000 done date:0000000000 stat:        err:00 text:evil",
        "id:evil sub:0 dlvrd:0000 submit date:0000000000 done date:0000000000 stat:        err:00 text:evil",
        "id:evil sub:0 dlvrd:00 submit date:0000000000 done date:0000000000 stat:        err:00 text:evil",
        "id:evil sub:0000 dlvrd:000 submit date:0000000000 done date:0000000000 stat:        err:00 text:evil",
        "id:evil sub:000 dlvrd:000 submit date:0000000000 done date:0000000000 stat:        err:00 text:evil",
        "id:evil sub: dlvrd:000 submit date:0000000000 done date:0000000000 stat:        err:00 text:evil",
        "id:: sub:0 dlvrd:000 submit date:0000000000 done date:0000000000 stat:        err:00 text:evil",
        "id:eVil sub:0 dlvrd:000 submit date:0000000000 done date:0000000000 stat:        err:00 text:evil",
        "id:EVIL sub:0 dlvrd:000 submit date:0000000000 done date:0000000000 stat:        err:00 text:evil",
        "id:ev_il sub:0 dlvrd:000 submit date:0000000000 done date:0000000000 stat:        err:00 text:evil",
        "id:ev il sub:0 dlvrd:000 submit date:0000000000 done date:0000000000 stat:        err:00 text:evil",
        "id:ev4il sub:0 dlvrd:000 submit date:0000000000 done date:0000000000 stat:        err:00 text:evil",
        "id:e sub:0 dlvrd:000 submit date:0000000000 done date:0000000000 stat:        err:00 text:evil",
        "id:  sub:0 dlvrd:000 submit date:0000000000 done date:0000000000 stat:        err:00 text:evil",
        "id:6 sub:0 dlvrd:000 submit date:0000000000 done date:0000000000 stat:        err:00 text:evil",
        "id:_ sub:0 dlvrd:000 submit date:0000000000 done date:0000000000 stat:        err:00 text:evil",
        "id: sub:0 dlvrd:000 submit date:0000000000 done date:0000000000 stat:        err:00 text:evil",
        "id:evil sub:0 dlvrd:000 submit date:0000000000 done date:0000000000 stat:        err:00 text:",
        "id:evil sub:0 dlvrd:000 submit date:0000000000 done date:0000000000 stat:        err:00 text:evil"
      ]
    },
    {
      "regex": "^\\s*\\-\\s*[0-9][\\s0-9]*$",
      "exceptionStackTrace": null,
      "matches": [
        " - 000",
        " - 0",
        " - 0 ",
        " -  00",
        " -00",
        "  - 00",
        "- 00",
        "-0",
        " - 00"
      ]
    },
    {
      "regex": "(\\\\ |[^ ])+",
      "exceptionStackTrace": null,
      "matches": ["\\", "A", "0", " ", "\\ \\ ", "", "a", "\\ "]
    },
    { "regex": "A\u266d", "exceptionStackTrace": null, "matches": ["A\u266d"] },
    {
      "regex": "^Cloning.+$",
      "exceptionStackTrace": null,
      "matches": [
        "CloningeVil",
        "CloningEVIL",
        "Cloningev_il",
        "Cloningev il",
        "Cloningev4il",
        "Cloninge",
        "Cloning ",
        "Cloning6",
        "Cloning_",
        "Cloning",
        "Cloningevil"
      ]
    },
    {
      "regex": "^Jackie Chan",
      "exceptionStackTrace": null,
      "matches": ["Jackie Chan"]
    },
    {
      "regex": "(?:^%pretrans(\\s+|$))|(?:^%pre(\\s+|$))|(?:^%post(\\s+|$))|(?:^%verifyscript(\\s+|$))|(?:^%preun(\\s+|$))|(?:^%postun(\\s+|$))|(?:^%posttrans(\\s+|$))",
      "exceptionStackTrace": null,
      "matches": [
        "%posttrans  ",
        "%postun  ",
        "%preun  ",
        "%verifyscript  ",
        "%post  ",
        "%pre  ",
        "%pretrans  ",
        "%posttrans",
        "%posttrans ",
        "%postun",
        "%postun ",
        "%preun",
        "%preun ",
        "%verifyscript",
        "%verifyscript ",
        "%post",
        "%post ",
        "%pre",
        "%pre ",
        "%pretrans",
        "%pretrans "
      ]
    },
    { "regex": "^From ", "exceptionStackTrace": null, "matches": ["From "] },
    {
      "regex": "^(image)\\/.*$",
      "exceptionStackTrace": null,
      "matches": [
        "image//",
        "image/eVil",
        "image/EVIL",
        "image/ev_il",
        "image/ev il",
        "image/ev4il",
        "image/e",
        "image/ ",
        "image/6",
        "image/_",
        "image/",
        "image/evil"
      ]
    },
    {
      "regex": "select(.*)elements_from_page_selector(.*)option",
      "exceptionStackTrace": null,
      "matches": [
        "selectevilelements_from_page_selectoreViloption",
        "selectevilelements_from_page_selectorEVILoption",
        "selectevilelements_from_page_selectorev_iloption",
        "selectevilelements_from_page_selectorev iloption",
        "selectevilelements_from_page_selectorev4iloption",
        "selectevilelements_from_page_selectoreoption",
        "selectevilelements_from_page_selector option",
        "selectevilelements_from_page_selector6option",
        "selectevilelements_from_page_selector_option",
        "selectevilelements_from_page_selectoroption",
        "selecteVilelements_from_page_selectoreviloption",
        "selectEVILelements_from_page_selectoreviloption",
        "selectev_ilelements_from_page_selectoreviloption",
        "selectev ilelements_from_page_selectoreviloption",
        "selectev4ilelements_from_page_selectoreviloption",
        "selecteelements_from_page_selectoreviloption",
        "select elements_from_page_selectoreviloption",
        "select6elements_from_page_selectoreviloption",
        "select_elements_from_page_selectoreviloption",
        "selectelements_from_page_selectoreviloption",
        "selectelements_from_page_selectoroption",
        "selectevilelements_from_page_selectoreviloption"
      ]
    },
    {
      "regex": "^\\#\\s+(seq file)\\s+\\=\\s+(.+)\\s+$",
      "exceptionStackTrace": null,
      "matches": [
        "# seq file = evil  ",
        "# seq file = evil",
        "# seq file = = ",
        "# seq file = # ",
        "# seq file = eVil ",
        "# seq file = EVIL ",
        "# seq file = ev_il ",
        "# seq file = ev il ",
        "# seq file = ev4il ",
        "# seq file = e ",
        "# seq file =   ",
        "# seq file = 6 ",
        "# seq file = _ ",
        "# seq file =  ",
        "# seq file =  evil ",
        "# seq file =evil ",
        "# seq file  = evil ",
        "# seq file= evil ",
        "#  seq file = evil ",
        "#seq file = evil ",
        "# seq file = evil "
      ]
    },
    {
      "regex": "^-(?<level>v+)$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<l"
      },
      "matches": []
    },
    {
      "regex": "(Apikey: )(\\w|-)+",
      "exceptionStackTrace": null,
      "matches": [
        "Apikey: aa",
        "Apikey: ",
        "Apikey: _",
        "Apikey: A",
        "Apikey: 0",
        "Apikey: -",
        "Apikey: a"
      ]
    },
    { "regex": "^SFNode$", "exceptionStackTrace": null, "matches": ["SFNode"] },
    {
      "regex": "^(expires|domain|path|secure|httpOnly|maxAge|signed)$",
      "exceptionStackTrace": null,
      "matches": [
        "signed",
        "maxAge",
        "httpOnly",
        "secure",
        "path",
        "domain",
        "expires"
      ]
    },
    {
      "regex": "\\s*(\\d+),(\\d+),?",
      "exceptionStackTrace": null,
      "matches": [
        " 0,0,,",
        " 0,0",
        " 0,00,",
        " 0,,",
        " 00,0,",
        " ,0,",
        "  0,0,",
        "0,0,",
        "0,0",
        " 0,0,"
      ]
    },
    {
      "regex": ".+\\.([\\d]+)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil.00",
        "evil.",
        "..0",
        "eVil.0",
        "EVIL.0",
        "ev_il.0",
        "ev il.0",
        "ev4il.0",
        "e.0",
        " .0",
        "6.0",
        "_.0",
        ".0",
        "evil.0"
      ]
    },
    {
      "regex": "^(?:|I )attach the file at \"([^\\\"]*)\" to \"([^\\\"]*)\"(?: within \"([^\\\"]*)\")?$",
      "exceptionStackTrace": null,
      "matches": [
        "I attach the file at \"evil\" to \"evil\" within \"evil\" within \"evil\"",
        "I attach the file at \"evil\" to \"evil\"",
        "I attach the file at \"evil\" to \"evil\" within \"\"\"",
        "I attach the file at \"evil\" to \"evil\" within \"eVil\"",
        "I attach the file at \"evil\" to \"evil\" within \"EVIL\"",
        "I attach the file at \"evil\" to \"evil\" within \"ev_il\"",
        "I attach the file at \"evil\" to \"evil\" within \"ev il\"",
        "I attach the file at \"evil\" to \"evil\" within \"ev4il\"",
        "I attach the file at \"evil\" to \"evil\" within \"e\"",
        "I attach the file at \"evil\" to \"evil\" within \" \"",
        "I attach the file at \"evil\" to \"evil\" within \"6\"",
        "I attach the file at \"evil\" to \"evil\" within \"_\"",
        "I attach the file at \"evil\" to \"evil\" within \"\"",
        "I attach the file at \"evil\" to \"\"\" within \"evil\"",
        "I attach the file at \"evil\" to \"eVil\" within \"evil\"",
        "I attach the file at \"evil\" to \"EVIL\" within \"evil\"",
        "I attach the file at \"evil\" to \"ev_il\" within \"evil\"",
        "I attach the file at \"evil\" to \"ev il\" within \"evil\"",
        "I attach the file at \"evil\" to \"ev4il\" within \"evil\"",
        "I attach the file at \"evil\" to \"e\" within \"evil\"",
        "I attach the file at \"evil\" to \" \" within \"evil\"",
        "I attach the file at \"evil\" to \"6\" within \"evil\"",
        "I attach the file at \"evil\" to \"_\" within \"evil\"",
        "I attach the file at \"evil\" to \"\" within \"evil\"",
        "I attach the file at \"\"\" to \"evil\" within \"evil\"",
        "I attach the file at \"eVil\" to \"evil\" within \"evil\"",
        "I attach the file at \"EVIL\" to \"evil\" within \"evil\"",
        "I attach the file at \"ev_il\" to \"evil\" within \"evil\"",
        "I attach the file at \"ev il\" to \"evil\" within \"evil\"",
        "I attach the file at \"ev4il\" to \"evil\" within \"evil\"",
        "I attach the file at \"e\" to \"evil\" within \"evil\"",
        "I attach the file at \" \" to \"evil\" within \"evil\"",
        "I attach the file at \"6\" to \"evil\" within \"evil\"",
        "I attach the file at \"_\" to \"evil\" within \"evil\"",
        "I attach the file at \"\" to \"evil\" within \"evil\"",
        "I I attach the file at \"evil\" to \"evil\" within \"evil\"",
        "attach the file at \"evil\" to \"evil\" within \"evil\"",
        "attach the file at \"\" to \"\"",
        "I attach the file at \"evil\" to \"evil\" within \"evil\""
      ]
    },
    {
      "regex": "$self->{'output_separator'}",
      "exceptionStackTrace": null,
      "matches": ["self->{'output_separator'}"]
    },
    {
      "regex": "Terminating after successful validation",
      "exceptionStackTrace": null,
      "matches": ["Terminating after successful validation"]
    },
    {
      "regex": "^hw\\.sensors\\.[0-9]+=[^\\s,]+,\\s+([^,]+),\\s+temp,\\s+([0-9\\.]+)\\s+degC.*$",
      "exceptionStackTrace": null,
      "matches": [
        "hw.sensors.0=evil, evil, temp, . degC=",
        "hw.sensors.0=evil, evil, temp, . degC.",
        "hw.sensors.0=evil, evil, temp, . degC,",
        "hw.sensors.0=evil, evil, temp, . degCeVil",
        "hw.sensors.0=evil, evil, temp, . degCEVIL",
        "hw.sensors.0=evil, evil, temp, . degCev_il",
        "hw.sensors.0=evil, evil, temp, . degCev il",
        "hw.sensors.0=evil, evil, temp, . degCev4il",
        "hw.sensors.0=evil, evil, temp, . degCe",
        "hw.sensors.0=evil, evil, temp, . degC ",
        "hw.sensors.0=evil, evil, temp, . degC6",
        "hw.sensors.0=evil, evil, temp, . degC_",
        "hw.sensors.0=evil, evil, temp, .  degCevil",
        "hw.sensors.0=evil, evil, temp, .degCevil",
        "hw.sensors.0=evil, evil, temp, .. degCevil",
        "hw.sensors.0=evil, evil, temp,  degCevil",
        "hw.sensors.0=evil, evil, temp, 0 degCevil",
        "hw.sensors.0=evil, evil, temp,  . degCevil",
        "hw.sensors.0=evil, evil, temp,. degCevil",
        "hw.sensors.0=evil, evil,  temp, . degCevil",
        "hw.sensors.0=evil, evil,temp, . degCevil",
        "hw.sensors.0=evil, =, temp, . degCevil",
        "hw.sensors.0=evil, ., temp, . degCevil",
        "hw.sensors.0=evil, ,, temp, . degCevil",
        "hw.sensors.0=evil, eVil, temp, . degCevil",
        "hw.sensors.0=evil, EVIL, temp, . degCevil",
        "hw.sensors.0=evil, ev_il, temp, . degCevil",
        "hw.sensors.0=evil, ev il, temp, . degCevil",
        "hw.sensors.0=evil, ev4il, temp, . degCevil",
        "hw.sensors.0=evil, e, temp, . degCevil",
        "hw.sensors.0=evil,  , temp, . degCevil",
        "hw.sensors.0=evil, 6, temp, . degCevil",
        "hw.sensors.0=evil, _, temp, . degCevil",
        "hw.sensors.0=evil, , temp, . degCevil",
        "hw.sensors.0=evil,  evil, temp, . degCevil",
        "hw.sensors.0=evil,evil, temp, . degCevil",
        "hw.sensors.0==, evil, temp, . degCevil",
        "hw.sensors.0=., evil, temp, . degCevil",
        "hw.sensors.0=,, evil, temp, . degCevil",
        "hw.sensors.0=eVil, evil, temp, . degCevil",
        "hw.sensors.0=EVIL, evil, temp, . degCevil",
        "hw.sensors.0=ev_il, evil, temp, . degCevil",
        "hw.sensors.0=ev il, evil, temp, . degCevil",
        "hw.sensors.0=ev4il, evil, temp, . degCevil",
        "hw.sensors.0=e, evil, temp, . degCevil",
        "hw.sensors.0= , evil, temp, . degCevil",
        "hw.sensors.0=6, evil, temp, . degCevil",
        "hw.sensors.0=_, evil, temp, . degCevil",
        "hw.sensors.0=, evil, temp, . degCevil",
        "hw.sensors.00=evil, evil, temp, . degCevil",
        "hw.sensors.=evil, evil, temp, . degCevil",
        "hw.sensors.0=evil, evil, temp, . degC",
        "hw.sensors.0=evil, evil, temp, . degCevil"
      ]
    },
    {
      "regex": "^\\S{2}\u0627\\S\u0629$",
      "exceptionStackTrace": null,
      "matches": [
        "aa\u0627_\u0629",
        "aa\u0627A\u0629",
        "aa\u06270\u0629",
        "aa\u0627 \u0629",
        "aaa\u0627a\u0629",
        "a\u0627a\u0629",
        "_a\u0627a\u0629",
        "Aa\u0627a\u0629",
        "0a\u0627a\u0629",
        " a\u0627a\u0629",
        "aa\u0627a\u0629"
      ]
    },
    {
      "regex": "[^a-z0-9.]+",
      "exceptionStackTrace": null,
      "matches": [
        ".",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "(?:url\\s*\\(\\s*)?['\"]?(?:#|(?:https?:)?\\/\\/)",
      "exceptionStackTrace": null,
      "matches": [
        "url ( \"https:https://",
        "url ( \"//",
        "url ( \"httpss://",
        "url ( \"http://",
        "url ( \"\"#",
        "url ( #",
        "url ( '#",
        "url ( url ( \"#",
        "\"#",
        "url (  \"#",
        "url (\"#",
        "url  ( \"#",
        "url( \"#",
        "//",
        "#",
        "url ( \"https://",
        "url ( \"#"
      ]
    },
    { "regex": "[???][?????]", "exceptionStackTrace": null, "matches": ["??"] },
    {
      "regex": "^(?:\\.|\\/|\\\\|[A-Z]:)",
      "exceptionStackTrace": null,
      "matches": ["A:", "\\", "/", "."]
    },
    {
      "regex": "^\\$*$",
      "exceptionStackTrace": null,
      "matches": ["$$", "", "$"]
    },
    {
      "regex": "(?i:\\b(?<_1>grant(?<_2>\\swith\\sgrant\\soption)?|revoke)\\b)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<_"
      },
      "matches": []
    },
    {
      "regex": "-DHAS_FUTIMENS",
      "exceptionStackTrace": null,
      "matches": ["-DHAS_FUTIMENS"]
    },
    {
      "regex": "\\b(chomp|chop|collect|compact|delete|downcase|exit|flatten|gsub|lstrip|map|next|reject|reverse|rstrip|slice|sort|squeeze|strip|sub|succs|swapcase|tr|tr_s|uniq|upcase)\\b(?!\\!)",
      "exceptionStackTrace": null,
      "matches": [
        "upcase",
        "uniq",
        "tr_s",
        "tr",
        "swapcase",
        "succs",
        "sub",
        "strip",
        "squeeze",
        "sort",
        "slice",
        "rstrip",
        "reverse",
        "reject",
        "next",
        "map",
        "lstrip",
        "gsub",
        "flatten",
        "exit",
        "downcase",
        "delete",
        "compact",
        "collect",
        "chop",
        "chomp"
      ]
    },
    {
      "regex": "[(){}\\[\\];.]",
      "exceptionStackTrace": null,
      "matches": ["}", "{", "]", "[", ";", ")", "(", "."]
    },
    {
      "regex": "There is an existing file of type model with the id 2",
      "exceptionStackTrace": null,
      "matches": ["There is an existing file of type model with the id 2"]
    },
    {
      "regex": "((::){0,1}[A-Z][\\w]*)+",
      "exceptionStackTrace": null,
      "matches": [
        "::Aevil::Aevil",
        "",
        "::AeVil",
        "::AEVIL",
        "::Aev_il",
        "::Aev il",
        "::Aev4il",
        "::Ae",
        "::A ",
        "::A6",
        "::A_",
        "::A",
        "::::Aevil",
        "Aevil",
        "A",
        "::Aevil"
      ]
    },
    {
      "regex": "\\{\\[([^}},]+)\\]\\}",
      "exceptionStackTrace": null,
      "matches": [
        "{[}]}",
        "{[{]}",
        "{[]]}",
        "{[[]}",
        "{[,]}",
        "{[eVil]}",
        "{[EVIL]}",
        "{[ev_il]}",
        "{[ev il]}",
        "{[ev4il]}",
        "{[e]}",
        "{[ ]}",
        "{[6]}",
        "{[_]}",
        "{[]}",
        "{[evil]}"
      ]
    },
    {
      "regex": "\\:(\\w+)\\<([^>]+)\\>",
      "exceptionStackTrace": null,
      "matches": [
        ":evil<>>",
        ":evil<<>",
        ":evil<:>",
        ":evil<eVil>",
        ":evil<EVIL>",
        ":evil<ev_il>",
        ":evil<ev il>",
        ":evil<ev4il>",
        ":evil<e>",
        ":evil< >",
        ":evil<6>",
        ":evil<_>",
        ":evil<>",
        ":eVil<evil>",
        ":EVIL<evil>",
        ":ev_il<evil>",
        ":ev il<evil>",
        ":ev4il<evil>",
        ":e<evil>",
        ": <evil>",
        ":6<evil>",
        ":_<evil>",
        ":<evil>",
        ":evil<evil>"
      ]
    },
    {
      "regex": "(<meta itemprop=\"author\" content=\")(.+)(\" id=\"author\")>",
      "exceptionStackTrace": null,
      "matches": [
        "<meta itemprop=\"author\" content=\">\" id=\"author\">",
        "<meta itemprop=\"author\" content=\"=\" id=\"author\">",
        "<meta itemprop=\"author\" content=\"<\" id=\"author\">",
        "<meta itemprop=\"author\" content=\"\"\" id=\"author\">",
        "<meta itemprop=\"author\" content=\"eVil\" id=\"author\">",
        "<meta itemprop=\"author\" content=\"EVIL\" id=\"author\">",
        "<meta itemprop=\"author\" content=\"ev_il\" id=\"author\">",
        "<meta itemprop=\"author\" content=\"ev il\" id=\"author\">",
        "<meta itemprop=\"author\" content=\"ev4il\" id=\"author\">",
        "<meta itemprop=\"author\" content=\"e\" id=\"author\">",
        "<meta itemprop=\"author\" content=\" \" id=\"author\">",
        "<meta itemprop=\"author\" content=\"6\" id=\"author\">",
        "<meta itemprop=\"author\" content=\"_\" id=\"author\">",
        "<meta itemprop=\"author\" content=\"\" id=\"author\">",
        "<meta itemprop=\"author\" content=\"evil\" id=\"author\">"
      ]
    },
    {
      "regex": "\\(([\\w\\s]+)\\)$",
      "exceptionStackTrace": null,
      "matches": [
        "(eVil)",
        "(EVIL)",
        "(ev_il)",
        "(ev il)",
        "(ev4il)",
        "(e)",
        "( )",
        "(6)",
        "(_)",
        "()",
        "(evil)"
      ]
    },
    {
      "regex": "(?xs)\n                          \"(?:\\\\.|[^\"])*\" |  # strings should be skipped altogether\n                          //[^\\r\\n]* |       # single-line comment\n                          /\\*.*?\\*/ |        # possibly-multi-line comment\n                          .                  # others are simply passed through\n                          ",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": "^webpack\\.config\\.js$",
      "exceptionStackTrace": null,
      "matches": ["webpack.config.js"]
    },
    {
      "regex": "[;\\.]+",
      "exceptionStackTrace": null,
      "matches": ["..", "", ";", "."]
    },
    {
      "regex": "Type: (\\w+)",
      "exceptionStackTrace": null,
      "matches": [
        "Type: eVil",
        "Type: EVIL",
        "Type: ev_il",
        "Type: ev il",
        "Type: ev4il",
        "Type: e",
        "Type:  ",
        "Type: 6",
        "Type: _",
        "Type: ",
        "Type: evil"
      ]
    },
    {
      "regex": "^GET|HEAD|OPTIONS$",
      "exceptionStackTrace": null,
      "matches": ["OPTIONS", "HEAD", "GET"]
    },
    {
      "regex": "url\\(['\"]https?:\\/\\/\\S+['\"]\\)",
      "exceptionStackTrace": null,
      "matches": [
        "url(\"https://evil')",
        "url(\"https://:\")",
        "url(\"https:///\")",
        "url(\"https://)\")",
        "url(\"https://(\")",
        "url(\"https://'\")",
        "url(\"https://\"\")",
        "url(\"https://eVil\")",
        "url(\"https://EVIL\")",
        "url(\"https://ev_il\")",
        "url(\"https://ev il\")",
        "url(\"https://ev4il\")",
        "url(\"https://e\")",
        "url(\"https:// \")",
        "url(\"https://6\")",
        "url(\"https://_\")",
        "url(\"https://\")",
        "url(\"httpss://evil\")",
        "url('https://evil\")",
        "url(\"http://evil\")",
        "url(\"https://evil\")"
      ]
    },
    {
      "regex": "^Illegal value(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "Illegal valueeVil",
        "Illegal valueEVIL",
        "Illegal valueev_il",
        "Illegal valueev il",
        "Illegal valueev4il",
        "Illegal valuee",
        "Illegal value ",
        "Illegal value6",
        "Illegal value_",
        "Illegal value",
        "Illegal valueevil"
      ]
    },
    {
      "regex": "^http:\\/\\/localhost:\\d+\\/",
      "exceptionStackTrace": null,
      "matches": [
        "http://localhost:00/",
        "http://localhost:/",
        "http://localhost:0/"
      ]
    },
    { "regex": "^NODATA$", "exceptionStackTrace": null, "matches": ["NODATA"] },
    {
      "regex": "[^\\r\\n\\u2028\\u2029]*(?:\\r\\n|[\\r\\n\\u2028\\u2029]|$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": "\"version\":\\s*\"[^\"]+\"",
      "exceptionStackTrace": null,
      "matches": [
        "\"version\": \":\"",
        "\"version\": \"\"\"",
        "\"version\": \"eVil\"",
        "\"version\": \"EVIL\"",
        "\"version\": \"ev_il\"",
        "\"version\": \"ev il\"",
        "\"version\": \"ev4il\"",
        "\"version\": \"e\"",
        "\"version\": \" \"",
        "\"version\": \"6\"",
        "\"version\": \"_\"",
        "\"version\": \"\"",
        "\"version\":  \"evil\"",
        "\"version\":\"evil\"",
        "\"version\": \"evil\""
      ]
    },
    {
      "regex": "^ ?(Identities|Positives|Strand)",
      "exceptionStackTrace": null,
      "matches": [
        "  Identities",
        "Strand",
        "Positives",
        "Identities",
        " Strand",
        " Positives",
        " Identities"
      ]
    },
    {
      "regex": "Hola mundo",
      "exceptionStackTrace": null,
      "matches": ["Hola mundo"]
    },
    {
      "regex": " ^ =head1 .* \\z ",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "^(C|POSIX)",
      "exceptionStackTrace": null,
      "matches": ["POSIX", "C"]
    },
    {
      "regex": "\\x0d\\x0a",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 13"
      },
      "matches": []
    },
    {
      "regex": "^(EXCLUSIVE|SHARE)$",
      "exceptionStackTrace": null,
      "matches": ["SHARE", "EXCLUSIVE"]
    },
    {
      "regex": "[\\u1EDA]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 7898"
      },
      "matches": []
    },
    {
      "regex": "\\(\\d+\\)",
      "exceptionStackTrace": null,
      "matches": ["(00)", "()", "(0)"]
    },
    {
      "regex": "^-\\d\\d-\\d\\d(-\\d\\d:\\d\\d)?$",
      "exceptionStackTrace": null,
      "matches": ["-00-00-00:00-00:00", "-00-00", "-00-00-00:00"]
    },
    {
      "regex": "\\;\\s*type\\=([\"']?)([\\w-]*)\\1",
      "exceptionStackTrace": null,
      "matches": [
        "; type='='",
        "; type=';'",
        "; type='-'",
        "; type='''",
        "; type='\"'",
        "; type='eVil'",
        "; type='EVIL'",
        "; type='ev_il'",
        "; type='ev il'",
        "; type='ev4il'",
        "; type='e'",
        "; type=' '",
        "; type='6'",
        "; type='_'",
        "; type=''",
        "; type=''evil'",
        "; type=evil'",
        "; type=\"evil'",
        ";  type='evil'",
        ";type='evil'",
        ";type='",
        "; type='evil'"
      ]
    },
    {
      "regex": "version (.+),",
      "exceptionStackTrace": null,
      "matches": [
        "version ,,",
        "version eVil,",
        "version EVIL,",
        "version ev_il,",
        "version ev il,",
        "version ev4il,",
        "version e,",
        "version  ,",
        "version 6,",
        "version _,",
        "version ,",
        "version evil,"
      ]
    },
    { "regex": "FEATURE=", "exceptionStackTrace": null, "matches": ["FEATURE="] },
    {
      "regex": "1.9",
      "exceptionStackTrace": null,
      "matches": ["1_9", "1A9", "109", "1 9", "1a9"]
    },
    {
      "regex": "rb_define_alias\n             \\s*\\(\\s*([\\w\\.]+),\n             \\s*\"([^\"]+)\",\n             \\s*\"([^\"]+)\"\\s*\\)",
      "exceptionStackTrace": null,
      "matches": [
        "rb_define_alias\n              ( evil,\n              \"evil\",\n              \"evil\"  )",
        "rb_define_alias\n              ( evil,\n              \"evil\",\n              \"evil\")",
        "rb_define_alias\n              ( evil,\n              \"evil\",\n              \".\" )",
        "rb_define_alias\n              ( evil,\n              \"evil\",\n              \",\" )",
        "rb_define_alias\n              ( evil,\n              \"evil\",\n              \")\" )",
        "rb_define_alias\n              ( evil,\n              \"evil\",\n              \"(\" )",
        "rb_define_alias\n              ( evil,\n              \"evil\",\n              \"\"\" )",
        "rb_define_alias\n              ( evil,\n              \"evil\",\n              \"eVil\" )",
        "rb_define_alias\n              ( evil,\n              \"evil\",\n              \"EVIL\" )",
        "rb_define_alias\n              ( evil,\n              \"evil\",\n              \"ev_il\" )",
        "rb_define_alias\n              ( evil,\n              \"evil\",\n              \"ev il\" )",
        "rb_define_alias\n              ( evil,\n              \"evil\",\n              \"ev4il\" )",
        "rb_define_alias\n              ( evil,\n              \"evil\",\n              \"e\" )",
        "rb_define_alias\n              ( evil,\n              \"evil\",\n              \" \" )",
        "rb_define_alias\n              ( evil,\n              \"evil\",\n              \"6\" )",
        "rb_define_alias\n              ( evil,\n              \"evil\",\n              \"_\" )",
        "rb_define_alias\n              ( evil,\n              \"evil\",\n              \"\" )",
        "rb_define_alias\n              ( evil,\n              \"evil\",\n               \"evil\" )",
        "rb_define_alias\n              ( evil,\n              \"evil\",\n             \"evil\" )",
        "rb_define_alias\n              ( evil,\n              \".\",\n              \"evil\" )",
        "rb_define_alias\n              ( evil,\n              \",\",\n              \"evil\" )",
        "rb_define_alias\n              ( evil,\n              \")\",\n              \"evil\" )",
        "rb_define_alias\n              ( evil,\n              \"(\",\n              \"evil\" )",
        "rb_define_alias\n              ( evil,\n              \"\"\",\n              \"evil\" )",
        "rb_define_alias\n              ( evil,\n              \"eVil\",\n              \"evil\" )",
        "rb_define_alias\n              ( evil,\n              \"EVIL\",\n              \"evil\" )",
        "rb_define_alias\n              ( evil,\n              \"ev_il\",\n              \"evil\" )",
        "rb_define_alias\n              ( evil,\n              \"ev il\",\n              \"evil\" )",
        "rb_define_alias\n              ( evil,\n              \"ev4il\",\n              \"evil\" )",
        "rb_define_alias\n              ( evil,\n              \"e\",\n              \"evil\" )",
        "rb_define_alias\n              ( evil,\n              \" \",\n              \"evil\" )",
        "rb_define_alias\n              ( evil,\n              \"6\",\n              \"evil\" )",
        "rb_define_alias\n              ( evil,\n              \"_\",\n              \"evil\" )",
        "rb_define_alias\n              ( evil,\n              \"\",\n              \"evil\" )",
        "rb_define_alias\n              ( evil,\n               \"evil\",\n              \"evil\" )",
        "rb_define_alias\n              ( evil,\n             \"evil\",\n              \"evil\" )",
        "rb_define_alias\n              ( .,\n              \"evil\",\n              \"evil\" )",
        "rb_define_alias\n              ( ,,\n              \"evil\",\n              \"evil\" )",
        "rb_define_alias\n              ( ),\n              \"evil\",\n              \"evil\" )",
        "rb_define_alias\n              ( (,\n              \"evil\",\n              \"evil\" )",
        "rb_define_alias\n              ( \",\n              \"evil\",\n              \"evil\" )",
        "rb_define_alias\n              ( eVil,\n              \"evil\",\n              \"evil\" )",
        "rb_define_alias\n              ( EVIL,\n              \"evil\",\n              \"evil\" )",
        "rb_define_alias\n              ( ev_il,\n              \"evil\",\n              \"evil\" )",
        "rb_define_alias\n              ( ev il,\n              \"evil\",\n              \"evil\" )",
        "rb_define_alias\n              ( ev4il,\n              \"evil\",\n              \"evil\" )",
        "rb_define_alias\n              ( e,\n              \"evil\",\n              \"evil\" )",
        "rb_define_alias\n              (  ,\n              \"evil\",\n              \"evil\" )",
        "rb_define_alias\n              ( 6,\n              \"evil\",\n              \"evil\" )",
        "rb_define_alias\n              ( _,\n              \"evil\",\n              \"evil\" )",
        "rb_define_alias\n              ( ,\n              \"evil\",\n              \"evil\" )",
        "rb_define_alias\n              (  evil,\n              \"evil\",\n              \"evil\" )",
        "rb_define_alias\n              (evil,\n              \"evil\",\n              \"evil\" )",
        "rb_define_alias\n               ( evil,\n              \"evil\",\n              \"evil\" )",
        "rb_define_alias\n             ( evil,\n              \"evil\",\n              \"evil\" )",
        "rb_define_alias\n             (evil,\n             \"evil\",\n             \"evil\")",
        "rb_define_alias\n              ( evil,\n              \"evil\",\n              \"evil\" )"
      ]
    },
    {
      "regex": "^DNS::Config::Statement::Zone$",
      "exceptionStackTrace": null,
      "matches": ["DNS::Config::Statement::Zone"]
    },
    {
      "regex": "[\\/\\\\](index|main)$",
      "exceptionStackTrace": null,
      "matches": ["/index", "\\main", "\\index"]
    },
    {
      "regex": "<h1 align=\"center\">roqet</h1>",
      "exceptionStackTrace": null,
      "matches": ["<h1 align=\"center\">roqet</h1>"]
    },
    {
      "regex": "wrong number of arguments \\(.*\\b3\\b.* 2\\)",
      "exceptionStackTrace": null,
      "matches": [
        "wrong number of arguments (evil3) 2)",
        "wrong number of arguments (evil3( 2)",
        "wrong number of arguments (evil3eVil 2)",
        "wrong number of arguments (evil3EVIL 2)",
        "wrong number of arguments (evil3ev_il 2)",
        "wrong number of arguments (evil3ev il 2)",
        "wrong number of arguments (evil3ev4il 2)",
        "wrong number of arguments (evil3e 2)",
        "wrong number of arguments (evil3  2)",
        "wrong number of arguments (evil36 2)",
        "wrong number of arguments (evil3_ 2)",
        "wrong number of arguments (evil3 2)",
        "wrong number of arguments ()3evil 2)",
        "wrong number of arguments ((3evil 2)",
        "wrong number of arguments (eVil3evil 2)",
        "wrong number of arguments (EVIL3evil 2)",
        "wrong number of arguments (ev_il3evil 2)",
        "wrong number of arguments (ev il3evil 2)",
        "wrong number of arguments (ev4il3evil 2)",
        "wrong number of arguments (e3evil 2)",
        "wrong number of arguments ( 3evil 2)",
        "wrong number of arguments (63evil 2)",
        "wrong number of arguments (_3evil 2)",
        "wrong number of arguments (3evil 2)",
        "wrong number of arguments (3 2)",
        "wrong number of arguments (evil3evil 2)"
      ]
    },
    {
      "regex": "(?:\\+|-)?(?:\\d+|\\d*\\.\\d+)(?:e\\d+)?(?:dpi|dpcm|dppx)$",
      "exceptionStackTrace": null,
      "matches": [
        "+0.00e0dpi",
        "+0.e0dpi",
        "+00.0e0dpi",
        "+.0e0dpi",
        "+0e0e0dpi",
        "+0dpi",
        "+0e00dpi",
        "+0edpi",
        "+00e0dpi",
        "+e0dpi",
        "++0e0dpi",
        "0e0dpi",
        ".0dpi",
        "0dppx",
        "0dpcm",
        "0dpi",
        "-0e0dpi",
        "+0.0e0dpi",
        "+0e0dppx",
        "+0e0dpcm",
        "+0e0dpi"
      ]
    },
    { "regex": "create", "exceptionStackTrace": null, "matches": ["create"] },
    {
      "regex": "^@import\\s+([\"'])([^\\1]+?)\\1;",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (parse error): expected character type but received BACKREFERENCE"
      },
      "matches": []
    },
    {
      "regex": "((^|,)\\s*):scope",
      "exceptionStackTrace": null,
      "matches": ["  :scope", ",:scope", ":scope", ", :scope", " :scope"]
    },
    {
      "regex": "Node is not defined on the socket (.*)",
      "exceptionStackTrace": null,
      "matches": [
        "Node is not defined on the socket eVil",
        "Node is not defined on the socket EVIL",
        "Node is not defined on the socket ev_il",
        "Node is not defined on the socket ev il",
        "Node is not defined on the socket ev4il",
        "Node is not defined on the socket e",
        "Node is not defined on the socket  ",
        "Node is not defined on the socket 6",
        "Node is not defined on the socket _",
        "Node is not defined on the socket ",
        "Node is not defined on the socket evil"
      ]
    },
    {
      "regex": "http://schema.org/AutoRepair",
      "exceptionStackTrace": null,
      "matches": [
        "http://schemaAorg/AutoRepair",
        "http://schema:org/AutoRepair",
        "http://schema0org/AutoRepair",
        "http://schema/org/AutoRepair",
        "http://schema org/AutoRepair",
        "http://schemaaorg/AutoRepair"
      ]
    },
    {
      "regex": "<($ELEM)[^>]*?>(.+?)</\\s*\\1\\s*>",
      "exceptionStackTrace": null,
      "matches": [
        "<ELEMevil>evil</ ELEM  >",
        "<ELEMevil>evil</ ELEM>",
        "<ELEMevil>evil</  ELEM >",
        "<ELEMevil>evil</ELEM >",
        "<ELEMevil>></ ELEM >",
        "<ELEMevil><</ ELEM >",
        "<ELEMevil>/</ ELEM >",
        "<ELEMevil>eVil</ ELEM >",
        "<ELEMevil>EVIL</ ELEM >",
        "<ELEMevil>ev_il</ ELEM >",
        "<ELEMevil>ev il</ ELEM >",
        "<ELEMevil>ev4il</ ELEM >",
        "<ELEMevil>e</ ELEM >",
        "<ELEMevil> </ ELEM >",
        "<ELEMevil>6</ ELEM >",
        "<ELEMevil>_</ ELEM >",
        "<ELEMevil></ ELEM >",
        "<ELEM>>evil</ ELEM >",
        "<ELEM<>evil</ ELEM >",
        "<ELEM/>evil</ ELEM >",
        "<ELEMeVil>evil</ ELEM >",
        "<ELEMEVIL>evil</ ELEM >",
        "<ELEMev_il>evil</ ELEM >",
        "<ELEMev il>evil</ ELEM >",
        "<ELEMev4il>evil</ ELEM >",
        "<ELEMe>evil</ ELEM >",
        "<ELEM >evil</ ELEM >",
        "<ELEM6>evil</ ELEM >",
        "<ELEM_>evil</ ELEM >",
        "<ELEM>evil</ ELEM >",
        "<ELEM>evil</ELEM>",
        "<ELEMevil>evil</ ELEM >"
      ]
    },
    {
      "regex": "^rwl_enable",
      "exceptionStackTrace": null,
      "matches": ["rwl_enable"]
    },
    { "regex": "\\A(\\[)", "exceptionStackTrace": null, "matches": ["["] },
    {
      "regex": "(,|'[^']*'|\"[^\"]*\")",
      "exceptionStackTrace": null,
      "matches": [
        "\",\"",
        "\"'\"",
        "\"\"\"",
        "\"eVil\"",
        "\"EVIL\"",
        "\"ev_il\"",
        "\"ev il\"",
        "\"ev4il\"",
        "\"e\"",
        "\" \"",
        "\"6\"",
        "\"_\"",
        "','",
        "'''",
        "'\"'",
        "'eVil'",
        "'EVIL'",
        "'ev_il'",
        "'ev il'",
        "'ev4il'",
        "'e'",
        "' '",
        "'6'",
        "'_'",
        "\"\"",
        "''",
        "\"evil\"",
        "'evil'",
        ","
      ]
    },
    {
      "regex": ":(\\d+): parser error : Content error in the external subset",
      "exceptionStackTrace": null,
      "matches": [
        ":00: parser error : Content error in the external subset",
        ":: parser error : Content error in the external subset",
        ":0: parser error : Content error in the external subset"
      ]
    },
    {
      "regex": "^not\\s+",
      "exceptionStackTrace": null,
      "matches": ["not  ", "not", "not "]
    },
    {
      "regex": "^the following attack files exist:$",
      "exceptionStackTrace": null,
      "matches": ["the following attack files exist:"]
    },
    {
      "regex": "Lolita::LazyLoader",
      "exceptionStackTrace": null,
      "matches": ["Lolita::LazyLoader"]
    },
    {
      "regex": "pgsql|sqlite2?",
      "exceptionStackTrace": null,
      "matches": ["sqlite22", "sqlite", "sqlite2", "pgsql"]
    },
    {
      "regex": "^shade(\\d+)$",
      "exceptionStackTrace": null,
      "matches": ["shade00", "shade", "shade0"]
    },
    {
      "regex": "(?:\\G|,\\s*)((?:fuzzy)|(?:no-)?(?:c|objc|sh|lisp|elisp|librep|scheme|smalltalk|java|csharp|awk|object-pascal|ycp|tcl|perl|perl-brace|php|gcc-internal|qt|boost)-format)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\G"
      },
      "matches": []
    },
    {
      "regex": "\\bJson\\.Remote\\b",
      "exceptionStackTrace": null,
      "matches": ["Json.Remote"]
    },
    {
      "regex": "%%.*$",
      "exceptionStackTrace": null,
      "matches": [
        "%%%",
        "%%eVil",
        "%%EVIL",
        "%%ev_il",
        "%%ev il",
        "%%ev4il",
        "%%e",
        "%% ",
        "%%6",
        "%%_",
        "%%",
        "%%evil"
      ]
    },
    {
      "regex": "Allocated to snapshot\\s+(\\S+)%",
      "exceptionStackTrace": null,
      "matches": [
        "Allocated to snapshot %%",
        "Allocated to snapshot eVil%",
        "Allocated to snapshot EVIL%",
        "Allocated to snapshot ev_il%",
        "Allocated to snapshot ev il%",
        "Allocated to snapshot ev4il%",
        "Allocated to snapshot e%",
        "Allocated to snapshot  %",
        "Allocated to snapshot 6%",
        "Allocated to snapshot _%",
        "Allocated to snapshot %",
        "Allocated to snapshot  evil%",
        "Allocated to snapshotevil%",
        "Allocated to snapshot evil%"
      ]
    },
    { "regex": "_stem$", "exceptionStackTrace": null, "matches": ["_stem"] },
    {
      "regex": "[\\x00-\\x20\\x7f-\\xff\"#<>?`{}]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 0"
      },
      "matches": []
    },
    {
      "regex": "object_[0-9]+",
      "exceptionStackTrace": null,
      "matches": ["object_00", "object_", "object_0"]
    },
    {
      "regex": "(<[^>]+>[^<]+<\\/[^<]+>)|(<[^>]+>)",
      "exceptionStackTrace": null,
      "matches": [
        "<>>",
        "<<>",
        "</>",
        "<eVil>",
        "<EVIL>",
        "<ev_il>",
        "<ev il>",
        "<ev4il>",
        "<e>",
        "< >",
        "<6>",
        "<_>",
        "<>",
        "<evil>evil</>>",
        "<evil>evil</<>",
        "<evil>evil<//>",
        "<evil>evil</eVil>",
        "<evil>evil</EVIL>",
        "<evil>evil</ev_il>",
        "<evil>evil</ev il>",
        "<evil>evil</ev4il>",
        "<evil>evil</e>",
        "<evil>evil</ >",
        "<evil>evil</6>",
        "<evil>evil</_>",
        "<evil>evil</>",
        "<evil>></evil>",
        "<evil><</evil>",
        "<evil>/</evil>",
        "<evil>eVil</evil>",
        "<evil>EVIL</evil>",
        "<evil>ev_il</evil>",
        "<evil>ev il</evil>",
        "<evil>ev4il</evil>",
        "<evil>e</evil>",
        "<evil> </evil>",
        "<evil>6</evil>",
        "<evil>_</evil>",
        "<evil></evil>",
        "<>>evil</evil>",
        "<<>evil</evil>",
        "</>evil</evil>",
        "<eVil>evil</evil>",
        "<EVIL>evil</evil>",
        "<ev_il>evil</evil>",
        "<ev il>evil</evil>",
        "<ev4il>evil</evil>",
        "<e>evil</evil>",
        "< >evil</evil>",
        "<6>evil</evil>",
        "<_>evil</evil>",
        "<>evil</evil>",
        "<evil>",
        "<evil>evil</evil>"
      ]
    },
    {
      "regex": "^([^:]+):\\s*(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil: :",
        "evil: eVil",
        "evil: EVIL",
        "evil: ev_il",
        "evil: ev il",
        "evil: ev4il",
        "evil: e",
        "evil:  ",
        "evil: 6",
        "evil: _",
        "evil: ",
        "evil:  evil",
        "evil:evil",
        ":: evil",
        "eVil: evil",
        "EVIL: evil",
        "ev_il: evil",
        "ev il: evil",
        "ev4il: evil",
        "e: evil",
        " : evil",
        "6: evil",
        "_: evil",
        ": evil",
        "evil:",
        "evil: evil"
      ]
    },
    { "regex": "(?:(?:NP))\\b", "exceptionStackTrace": null, "matches": ["NP"] },
    {
      "regex": "^ku(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "kueVil",
        "kuEVIL",
        "kuev_il",
        "kuev il",
        "kuev4il",
        "kue",
        "ku ",
        "ku6",
        "ku_",
        "ku",
        "kuevil"
      ]
    },
    {
      "regex": "The function 'hiera' is deprecated in favor of using 'lookup'. See https:",
      "exceptionStackTrace": null,
      "matches": [
        "The function 'hiera' is deprecated in favor of using 'lookup'A See https:",
        "The function 'hiera' is deprecated in favor of using 'lookup': See https:",
        "The function 'hiera' is deprecated in favor of using 'lookup'0 See https:",
        "The function 'hiera' is deprecated in favor of using 'lookup'' See https:",
        "The function 'hiera' is deprecated in favor of using 'lookup'  See https:",
        "The function 'hiera' is deprecated in favor of using 'lookup'a See https:"
      ]
    },
    {
      "regex": "(?i)what do you want to eat",
      "exceptionStackTrace": null,
      "matches": ["what do you want to eat"]
    },
    {
      "regex": "\\s?(.+)\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^database",
      "exceptionStackTrace": null,
      "matches": ["database"]
    },
    {
      "regex": "^Content-Disposition: .*?filename=(?<f>[^\\s]+|\\x22[^\\x22]+\\x22)\\x3B?.*$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<f"
      },
      "matches": []
    },
    {
      "regex": "(?<![<>])(<S>[Tt]r\\x{ed}<\\/S> (?:<P[^>]*>[Ii]ad<\\/P>))(?![<>])",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "incomplete escape \\x"
      },
      "matches": []
    },
    {
      "regex": "[^\\d]*([\\d]+)",
      "exceptionStackTrace": null,
      "matches": [
        "evil00",
        "evil",
        "eVil0",
        "EVIL0",
        "ev_il0",
        "ev il0",
        "ev4il0",
        "e0",
        " 0",
        "60",
        "_0",
        "0",
        "evil0"
      ]
    },
    {
      "regex": "Enrollment failed with error \\[such_error\\]",
      "exceptionStackTrace": null,
      "matches": ["Enrollment failed with error [such_error]"]
    },
    {
      "regex": "\\s*<(\\w*)>",
      "exceptionStackTrace": null,
      "matches": [
        " <eVil>",
        " <EVIL>",
        " <ev_il>",
        " <ev il>",
        " <ev4il>",
        " <e>",
        " < >",
        " <6>",
        " <_>",
        " <>",
        "  <evil>",
        "<evil>",
        "<>",
        " <evil>"
      ]
    },
    {
      "regex": "\\$start(_|)list2\\(\\)",
      "exceptionStackTrace": null,
      "matches": ["$start__list2()", "$startlist2()", "$start_list2()"]
    },
    { "regex": "0000$", "exceptionStackTrace": null, "matches": ["0000"] },
    {
      "regex": "regex_.*",
      "exceptionStackTrace": null,
      "matches": [
        "regex_eVil",
        "regex_EVIL",
        "regex_ev_il",
        "regex_ev il",
        "regex_ev4il",
        "regex_e",
        "regex_ ",
        "regex_6",
        "regex__",
        "regex_",
        "regex_evil"
      ]
    },
    {
      "regex": "checkboxLabel must be a string",
      "exceptionStackTrace": null,
      "matches": ["checkboxLabel must be a string"]
    },
    {
      "regex": "(?i)\\bstats_(s(ta(ndard_deviation|t_(noncentral_t|correlation|in(nerproduct|dependent_t)|p(owersum|ercentile|aired_t)|gennch|binomial_coef))|kew)|harmonic_mean|c(ovariance|df_(n(oncentral_(chisquare|f)|egative_binomial)|c(hisquare|auchy)|t|uniform|poisson|exponential|f|weibull|l(ogistic|aplace)|gamma|b(inomial|eta)))|den(s_(n(ormal|egative_binomial)|c(hisquare|auchy)|t|pmf_(hypergeometric|poisson|binomial)|exponential|f|weibull|l(ogistic|aplace)|gamma|beta)|_uniform)|variance|kurtosis|absolute_deviation|rand_(setall|phrase_to_seeds|ranf|ge(n_(no(ncen(tral_(t|f)|ral_chisquare)|rmal)|chisquare|t|i(nt|uniform|poisson|binomial(_negative)?)|exponential|f(uniform)?|gamma|beta)|t_seeds)))\\b",
      "exceptionStackTrace": null,
      "matches": [
        "stats_rand_gen_funiformuniform",
        "stats_rand_gen_ibinomial_negative_negative",
        "stats_rand_gen_f",
        "stats_rand_gen_ibinomial",
        "stats_rand_get_seeds",
        "stats_rand_gen_beta",
        "stats_rand_gen_gamma",
        "stats_rand_gen_funiform",
        "stats_rand_gen_exponential",
        "stats_rand_gen_ibinomial_negative",
        "stats_rand_gen_ipoisson",
        "stats_rand_gen_iuniform",
        "stats_rand_gen_int",
        "stats_rand_gen_t",
        "stats_rand_gen_chisquare",
        "stats_rand_gen_normal",
        "stats_rand_gen_noncenral_chisquare",
        "stats_rand_gen_noncentral_f",
        "stats_rand_gen_noncentral_t",
        "stats_rand_ranf",
        "stats_rand_phrase_to_seeds",
        "stats_rand_setall",
        "stats_absolute_deviation",
        "stats_kurtosis",
        "stats_variance",
        "stats_den_uniform",
        "stats_dens_beta",
        "stats_dens_gamma",
        "stats_dens_laplace",
        "stats_dens_logistic",
        "stats_dens_weibull",
        "stats_dens_f",
        "stats_dens_exponential",
        "stats_dens_pmf_binomial",
        "stats_dens_pmf_poisson",
        "stats_dens_pmf_hypergeometric",
        "stats_dens_t",
        "stats_dens_cauchy",
        "stats_dens_chisquare",
        "stats_dens_negative_binomial",
        "stats_dens_normal",
        "stats_cdf_beta",
        "stats_cdf_binomial",
        "stats_cdf_gamma",
        "stats_cdf_laplace",
        "stats_cdf_logistic",
        "stats_cdf_weibull",
        "stats_cdf_f",
        "stats_cdf_exponential",
        "stats_cdf_poisson",
        "stats_cdf_uniform",
        "stats_cdf_t",
        "stats_cdf_cauchy",
        "stats_cdf_chisquare",
        "stats_cdf_negative_binomial",
        "stats_cdf_noncentral_f",
        "stats_cdf_noncentral_chisquare",
        "stats_covariance",
        "stats_harmonic_mean",
        "stats_skew",
        "stats_stat_binomial_coef",
        "stats_stat_gennch",
        "stats_stat_paired_t",
        "stats_stat_percentile",
        "stats_stat_powersum",
        "stats_stat_independent_t",
        "stats_stat_innerproduct",
        "stats_stat_correlation",
        "stats_stat_noncentral_t",
        "stats_standard_deviation"
      ]
    },
    {
      "regex": "^ @?$me_nick \\s* [:,\\-] \\s*\n        |  \\s* , \\s* @?$me_nick [.!?]? $\n        |  , \\s* @?$me_nick \\s* ,\n        ",
      "exceptionStackTrace": null,
      "matches": [
        "  ,   @me_nick    ,\n        ",
        "  ,   @me_nick  ,\n        ",
        "  ,   @@me_nick   ,\n        ",
        "  ,   me_nick   ,\n        ",
        "  ,    @me_nick   ,\n        ",
        "  ,  @me_nick   ,\n        ",
        "    ,   @me_nick ?? \n        ",
        "    ,   @me_nick  \n        ",
        "    ,   @me_nick . \n        ",
        "    ,   @me_nick ! \n        ",
        "    ,   @@me_nick ? \n        ",
        "    ,   me_nick ? \n        ",
        "    ,    @me_nick ? \n        ",
        "    ,  @me_nick ? \n        ",
        "     ,   @me_nick ? \n        ",
        "   ,   @me_nick ? \n        ",
        " @me_nick   -   \n        ",
        " @me_nick   - \n        ",
        " @me_nick   :  \n        ",
        " @me_nick   ,  \n        ",
        " @me_nick    -  \n        ",
        " @me_nick  -  \n        ",
        " @@me_nick   -  \n        ",
        " me_nick   -  \n        ",
        "  ,  me_nick  ,\n        ",
        "   ,  me_nick  \n        ",
        " me_nick  - \n        ",
        "  ,   @me_nick   ,\n        ",
        "    ,   @me_nick ? \n        ",
        " @me_nick   -  \n        "
      ]
    },
    {
      "regex": "(.*)data/sub1/a/README.md",
      "exceptionStackTrace": null,
      "matches": [
        "evildata/sub1/a/READMEAmd",
        "evildata/sub1/a/README0md",
        "evildata/sub1/a/README/md",
        "evildata/sub1/a/README md",
        "/data/sub1/a/READMEamd",
        "eVildata/sub1/a/READMEamd",
        "EVILdata/sub1/a/READMEamd",
        "ev_ildata/sub1/a/READMEamd",
        "ev ildata/sub1/a/READMEamd",
        "ev4ildata/sub1/a/READMEamd",
        "edata/sub1/a/READMEamd",
        " data/sub1/a/READMEamd",
        "6data/sub1/a/READMEamd",
        "_data/sub1/a/READMEamd",
        "data/sub1/a/READMEamd",
        "evildata/sub1/a/READMEamd"
      ]
    },
    {
      "regex": "\\$[\\{\\(\\[]",
      "exceptionStackTrace": null,
      "matches": ["${", "$(", "$["]
    },
    {
      "regex": "no valid endorsements found",
      "exceptionStackTrace": null,
      "matches": ["no valid endorsements found"]
    },
    {
      "regex": "(\\W)spin\\(",
      "exceptionStackTrace": null,
      "matches": [
        "aspin(",
        "_spin(",
        "Aspin(",
        "0spin(",
        "(spin(",
        " spin(",
        ";spin("
      ]
    },
    {
      "regex": "\\[img=([^\\[\\]].*?)\\.(",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "missing ), unterminated subpattern"
      },
      "matches": []
    },
    {
      "regex": "(<AcctNo>)(\\d|x)*(</AcctNo>)",
      "exceptionStackTrace": null,
      "matches": [
        "<AcctNo>00</AcctNo>",
        "<AcctNo></AcctNo>",
        "<AcctNo>x</AcctNo>",
        "<AcctNo>0</AcctNo>"
      ]
    },
    {
      "regex": "^[a-zA-Z0-9\\-_.!~*'()]*$",
      "exceptionStackTrace": null,
      "matches": [
        "~",
        ".",
        "-",
        "*",
        ")",
        "(",
        "'",
        "!",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "comment><comment>       Function => [\"<font color=\\\"#007f00\\\">\", \"<",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unterminated character set"
      },
      "matches": []
    },
    {
      "regex": "[a-z]+ [a-z]+",
      "exceptionStackTrace": null,
      "matches": [
        "evil eVil",
        "evil EVIL",
        "evil ev_il",
        "evil ev il",
        "evil ev4il",
        "evil e",
        "evil  ",
        "evil 6",
        "evil _",
        "evil ",
        "eVil evil",
        "EVIL evil",
        "ev_il evil",
        "ev il evil",
        "ev4il evil",
        "e evil",
        "  evil",
        "6 evil",
        "_ evil",
        " evil",
        "evil evil"
      ]
    },
    { "regex": "Expires=", "exceptionStackTrace": null, "matches": ["Expires="] },
    {
      "regex": "compareWith: Equiv required for third argument",
      "exceptionStackTrace": null,
      "matches": ["compareWith: Equiv required for third argument"]
    },
    {
      "regex": "dummyimage\\.png$",
      "exceptionStackTrace": null,
      "matches": ["dummyimage.png"]
    },
    { "regex": "\\%3A", "exceptionStackTrace": null, "matches": ["%3A"] },
    {
      "regex": "missing key",
      "exceptionStackTrace": null,
      "matches": ["missing key"]
    },
    {
      "regex": "windows|cisco|solaris|aarch64|el-",
      "exceptionStackTrace": null,
      "matches": ["el-", "aarch64", "solaris", "cisco", "windows"]
    },
    {
      "regex": "^.{2,10}:.*,.*-.*\u00b0.*;.*$",
      "exceptionStackTrace": null,
      "matches": [
        "aa:evil,evil-evil\u00b0evil;;",
        "aa:evil,evil-evil\u00b0evil;:",
        "aa:evil,evil-evil\u00b0evil;-",
        "aa:evil,evil-evil\u00b0evil;,",
        "aa:evil,evil-evil\u00b0evil;eVil",
        "aa:evil,evil-evil\u00b0evil;EVIL",
        "aa:evil,evil-evil\u00b0evil;ev_il",
        "aa:evil,evil-evil\u00b0evil;ev il",
        "aa:evil,evil-evil\u00b0evil;ev4il",
        "aa:evil,evil-evil\u00b0evil;e",
        "aa:evil,evil-evil\u00b0evil; ",
        "aa:evil,evil-evil\u00b0evil;6",
        "aa:evil,evil-evil\u00b0evil;_",
        "aa:evil,evil-evil\u00b0evil;",
        "aa:evil,evil-evil\u00b0;;evil",
        "aa:evil,evil-evil\u00b0:;evil",
        "aa:evil,evil-evil\u00b0-;evil",
        "aa:evil,evil-evil\u00b0,;evil",
        "aa:evil,evil-evil\u00b0eVil;evil",
        "aa:evil,evil-evil\u00b0EVIL;evil",
        "aa:evil,evil-evil\u00b0ev_il;evil",
        "aa:evil,evil-evil\u00b0ev il;evil",
        "aa:evil,evil-evil\u00b0ev4il;evil",
        "aa:evil,evil-evil\u00b0e;evil",
        "aa:evil,evil-evil\u00b0 ;evil",
        "aa:evil,evil-evil\u00b06;evil",
        "aa:evil,evil-evil\u00b0_;evil",
        "aa:evil,evil-evil\u00b0;evil",
        "aa:evil,evil-;\u00b0evil;evil",
        "aa:evil,evil-:\u00b0evil;evil",
        "aa:evil,evil--\u00b0evil;evil",
        "aa:evil,evil-,\u00b0evil;evil",
        "aa:evil,evil-eVil\u00b0evil;evil",
        "aa:evil,evil-EVIL\u00b0evil;evil",
        "aa:evil,evil-ev_il\u00b0evil;evil",
        "aa:evil,evil-ev il\u00b0evil;evil",
        "aa:evil,evil-ev4il\u00b0evil;evil",
        "aa:evil,evil-e\u00b0evil;evil",
        "aa:evil,evil- \u00b0evil;evil",
        "aa:evil,evil-6\u00b0evil;evil",
        "aa:evil,evil-_\u00b0evil;evil",
        "aa:evil,evil-\u00b0evil;evil",
        "aa:evil,;-evil\u00b0evil;evil",
        "aa:evil,:-evil\u00b0evil;evil",
        "aa:evil,--evil\u00b0evil;evil",
        "aa:evil,,-evil\u00b0evil;evil",
        "aa:evil,eVil-evil\u00b0evil;evil",
        "aa:evil,EVIL-evil\u00b0evil;evil",
        "aa:evil,ev_il-evil\u00b0evil;evil",
        "aa:evil,ev il-evil\u00b0evil;evil",
        "aa:evil,ev4il-evil\u00b0evil;evil",
        "aa:evil,e-evil\u00b0evil;evil",
        "aa:evil, -evil\u00b0evil;evil",
        "aa:evil,6-evil\u00b0evil;evil",
        "aa:evil,_-evil\u00b0evil;evil",
        "aa:evil,-evil\u00b0evil;evil",
        "aa:;,evil-evil\u00b0evil;evil",
        "aa::,evil-evil\u00b0evil;evil",
        "aa:-,evil-evil\u00b0evil;evil",
        "aa:,,evil-evil\u00b0evil;evil",
        "aa:eVil,evil-evil\u00b0evil;evil",
        "aa:EVIL,evil-evil\u00b0evil;evil",
        "aa:ev_il,evil-evil\u00b0evil;evil",
        "aa:ev il,evil-evil\u00b0evil;evil",
        "aa:ev4il,evil-evil\u00b0evil;evil",
        "aa:e,evil-evil\u00b0evil;evil",
        "aa: ,evil-evil\u00b0evil;evil",
        "aa:6,evil-evil\u00b0evil;evil",
        "aa:_,evil-evil\u00b0evil;evil",
        "aa:,evil-evil\u00b0evil;evil",
        "aaaaaaaaaaa:evil,evil-evil\u00b0evil;evil",
        "aaaaaaaaaa:evil,evil-evil\u00b0evil;evil",
        "a:evil,evil-evil\u00b0evil;evil",
        "Aa:evil,evil-evil\u00b0evil;evil",
        ";a:evil,evil-evil\u00b0evil;evil",
        ":a:evil,evil-evil\u00b0evil;evil",
        "0a:evil,evil-evil\u00b0evil;evil",
        "-a:evil,evil-evil\u00b0evil;evil",
        ",a:evil,evil-evil\u00b0evil;evil",
        " a:evil,evil-evil\u00b0evil;evil",
        "aa:,-\u00b0;",
        "aa:evil,evil-evil\u00b0evil;evil"
      ]
    },
    {
      "regex": "WebSocket error",
      "exceptionStackTrace": null,
      "matches": ["WebSocket error"]
    },
    {
      "regex": "\n      MRB_(API|INLINE)\\s+\n      ((struct\\s+)?\\w+(\\s*\\*)?)\\s*\n      ((\\w+\\s+)+)?(\\w+)\\s*\n      \\(([\\w\\s\\*,\\.]*)\\)\n    ",
      "exceptionStackTrace": null,
      "matches": [
        "\n      MRB_API \n      struct evil * \n      evil evil \n      (.)\n    ",
        "\n      MRB_API \n      struct evil * \n      evil evil \n      (,)\n    ",
        "\n      MRB_API \n      struct evil * \n      evil evil \n      (*)\n    ",
        "\n      MRB_API \n      struct evil * \n      evil evil \n      ())\n    ",
        "\n      MRB_API \n      struct evil * \n      evil evil \n      (()\n    ",
        "\n      MRB_API \n      struct evil * \n      evil evil \n      (eVil)\n    ",
        "\n      MRB_API \n      struct evil * \n      evil evil \n      (EVIL)\n    ",
        "\n      MRB_API \n      struct evil * \n      evil evil \n      (ev_il)\n    ",
        "\n      MRB_API \n      struct evil * \n      evil evil \n      (ev il)\n    ",
        "\n      MRB_API \n      struct evil * \n      evil evil \n      (ev4il)\n    ",
        "\n      MRB_API \n      struct evil * \n      evil evil \n      (e)\n    ",
        "\n      MRB_API \n      struct evil * \n      evil evil \n      ( )\n    ",
        "\n      MRB_API \n      struct evil * \n      evil evil \n      (6)\n    ",
        "\n      MRB_API \n      struct evil * \n      evil evil \n      (_)\n    ",
        "\n      MRB_API \n      struct evil * \n      evil evil \n      ()\n    ",
        "\n      MRB_API \n      struct evil * \n      evil evil  \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil * \n      evil evil\n      (evil)\n    ",
        "\n      MRB_API \n      struct evil * \n      evil eVil \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil * \n      evil EVIL \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil * \n      evil ev_il \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil * \n      evil ev il \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil * \n      evil ev4il \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil * \n      evil e \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil * \n      evil   \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil * \n      evil 6 \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil * \n      evil _ \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil * \n      evil  \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil * \n      evil evil evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil * \n      evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil * \n      evil  evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil * \n      evilevil \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil * \n      eVil evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil * \n      EVIL evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil * \n      ev_il evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil * \n      ev il evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil * \n      ev4il evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil * \n      e evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil * \n        evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil * \n      6 evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil * \n      _ evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil * \n       evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil *  \n      evil evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil *\n      evil evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil * * \n      evil evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil \n      evil evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil  * \n      evil evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil* \n      evil evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct eVil * \n      evil evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct EVIL * \n      evil evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct ev_il * \n      evil evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct ev il * \n      evil evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct ev4il * \n      evil evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct e * \n      evil evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct   * \n      evil evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct 6 * \n      evil evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct _ * \n      evil evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct  * \n      evil evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct struct evil * \n      evil evil \n      (evil)\n    ",
        "\n      MRB_API \n      evil * \n      evil evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct  evil * \n      evil evil \n      (evil)\n    ",
        "\n      MRB_API \n      structevil * \n      evil evil \n      (evil)\n    ",
        "\n      MRB_API  \n      struct evil * \n      evil evil \n      (evil)\n    ",
        "\n      MRB_API\n      struct evil * \n      evil evil \n      (evil)\n    ",
        "\n      MRB_INLINE \n      evil\n      evil\n      ()\n    ",
        "\n      MRB_API \n      evil\n      evil\n      ()\n    ",
        "\n      MRB_INLINE \n      struct evil * \n      evil evil \n      (evil)\n    ",
        "\n      MRB_API \n      struct evil * \n      evil evil \n      (evil)\n    "
      ]
    },
    {
      "regex": "^{{\\s*[\\w\\.]+\\s*}},$",
      "exceptionStackTrace": null,
      "matches": [
        "{{ evil  }},",
        "{{ evil}},",
        "{{ } }},",
        "{{ { }},",
        "{{ . }},",
        "{{ , }},",
        "{{ eVil }},",
        "{{ EVIL }},",
        "{{ ev_il }},",
        "{{ ev il }},",
        "{{ ev4il }},",
        "{{ e }},",
        "{{   }},",
        "{{ 6 }},",
        "{{ _ }},",
        "{{  }},",
        "{{  evil }},",
        "{{evil }},",
        "{{evil}},",
        "{{ evil }},"
      ]
    },
    {
      "regex": "[1-9]00",
      "exceptionStackTrace": null,
      "matches": ["000", "100"]
    },
    {
      "regex": "url\\([\\'\\\"]?([^\\'\\\"]+)[\\'\\\"]?\\)",
      "exceptionStackTrace": null,
      "matches": [
        "url(\"evil\"\")",
        "url(\"evil)",
        "url(\"evil')",
        "url(\")\")",
        "url(\"(\")",
        "url(\"'\")",
        "url(\"\"\")",
        "url(\"eVil\")",
        "url(\"EVIL\")",
        "url(\"ev_il\")",
        "url(\"ev il\")",
        "url(\"ev4il\")",
        "url(\"e\")",
        "url(\" \")",
        "url(\"6\")",
        "url(\"_\")",
        "url(\"\")",
        "url(\"\"evil\")",
        "url(evil\")",
        "url('evil\")",
        "url(evil)",
        "url(\"evil\")"
      ]
    },
    {
      "regex": "^(\\d+)([smh])$",
      "exceptionStackTrace": null,
      "matches": ["0s", "0m", "0a", "00h", "h", "0h"]
    },
    {
      "regex": "checked\\nnot checked",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "\\,\\s*([^\\/])",
      "exceptionStackTrace": null,
      "matches": [", A", ", 0", ", /", ", ,", ",  ", ",  a", ",a", ", a"]
    },
    {
      "regex": "#\\{\\{(\\d+)\\}\\}#",
      "exceptionStackTrace": null,
      "matches": ["#{{00}}#", "#{{}}#", "#{{0}}#"]
    },
    {
      "regex": "ceph_osd_scrub_state{cluster=\"ceph\",osd=\"osd.12\"} 1",
      "exceptionStackTrace": null,
      "matches": [
        "ceph_osd_scrub_state{cluster=\"ceph\",osd=\"osd}12\"} 1",
        "ceph_osd_scrub_state{cluster=\"ceph\",osd=\"osd{12\"} 1",
        "ceph_osd_scrub_state{cluster=\"ceph\",osd=\"osd_12\"} 1",
        "ceph_osd_scrub_state{cluster=\"ceph\",osd=\"osdA12\"} 1",
        "ceph_osd_scrub_state{cluster=\"ceph\",osd=\"osd=12\"} 1",
        "ceph_osd_scrub_state{cluster=\"ceph\",osd=\"osd012\"} 1",
        "ceph_osd_scrub_state{cluster=\"ceph\",osd=\"osd,12\"} 1",
        "ceph_osd_scrub_state{cluster=\"ceph\",osd=\"osd\"12\"} 1",
        "ceph_osd_scrub_state{cluster=\"ceph\",osd=\"osd 12\"} 1",
        "ceph_osd_scrub_state{cluster=\"ceph\",osd=\"osda12\"} 1"
      ]
    },
    {
      "regex": "\\$\\{MESSAGES\\}",
      "exceptionStackTrace": null,
      "matches": ["${MESSAGES}"]
    },
    {
      "regex": "HTTP\\/(\\d\\.\\d)\\s+(\\d{3})\\s*(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "HTTP/0.0 000 /",
        "HTTP/0.0 000 .",
        "HTTP/0.0 000 eVil",
        "HTTP/0.0 000 EVIL",
        "HTTP/0.0 000 ev_il",
        "HTTP/0.0 000 ev il",
        "HTTP/0.0 000 ev4il",
        "HTTP/0.0 000 e",
        "HTTP/0.0 000  ",
        "HTTP/0.0 000 6",
        "HTTP/0.0 000 _",
        "HTTP/0.0 000 ",
        "HTTP/0.0 000  evil",
        "HTTP/0.0 000evil",
        "HTTP/0.0 0000 evil",
        "HTTP/0.0 00 evil",
        "HTTP/0.0  000 evil",
        "HTTP/0.0000 evil",
        "HTTP/0.0 000",
        "HTTP/0.0 000 evil"
      ]
    },
    {
      "regex": "(?i)(ALTER\\s+TABLE\\s+[\\w_]+\\s+ADD)\\s+(?!.*CONSTRAINT)",
      "exceptionStackTrace": null,
      "matches": [
        "ALTER TABLE evil ADD  ",
        "ALTER TABLE evil ADD",
        "ALTER TABLE evil  ADD ",
        "ALTER TABLE evilADD ",
        "ALTER TABLE eVil ADD ",
        "ALTER TABLE EVIL ADD ",
        "ALTER TABLE ev_il ADD ",
        "ALTER TABLE ev il ADD ",
        "ALTER TABLE ev4il ADD ",
        "ALTER TABLE e ADD ",
        "ALTER TABLE   ADD ",
        "ALTER TABLE 6 ADD ",
        "ALTER TABLE _ ADD ",
        "ALTER TABLE  ADD ",
        "ALTER TABLE  evil ADD ",
        "ALTER TABLEevil ADD ",
        "ALTER  TABLE evil ADD ",
        "ALTERTABLE evil ADD ",
        "ALTER TABLE evil ADD "
      ]
    },
    { "regex": "^rcpt", "exceptionStackTrace": null, "matches": ["rcpt"] },
    {
      "regex": "is essential to the starters behavior and cannot be overwritten",
      "exceptionStackTrace": null,
      "matches": [
        "is essential to the starters behavior and cannot be overwritten"
      ]
    },
    {
      "regex": "[\\(\\)\\{\\};,.#]",
      "exceptionStackTrace": null,
      "matches": ["}", "{", ";", ".", ",", ")", "(", "#"]
    },
    {
      "regex": "\\@\\d+\\.\\d+\\.\\d+",
      "exceptionStackTrace": null,
      "matches": [
        "@0.0.00",
        "@0.0.",
        "@0.00.0",
        "@0..0",
        "@00.0.0",
        "@.0.0",
        "@0.0.0"
      ]
    },
    {
      "regex": ".+\\.t$",
      "exceptionStackTrace": null,
      "matches": [
        "..t",
        "eVil.t",
        "EVIL.t",
        "ev_il.t",
        "ev il.t",
        "ev4il.t",
        "e.t",
        " .t",
        "6.t",
        "_.t",
        ".t",
        "evil.t"
      ]
    },
    {
      "regex": "^([A-Z]+)\\d*\\s*=\\s*(.+?)\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        "evil0 = evil  ",
        "evil0 = evil",
        "evil0 = = ",
        "evil0 = eVil ",
        "evil0 = EVIL ",
        "evil0 = ev_il ",
        "evil0 = ev il ",
        "evil0 = ev4il ",
        "evil0 = e ",
        "evil0 =   ",
        "evil0 = 6 ",
        "evil0 = _ ",
        "evil0 =  ",
        "evil0 =  evil ",
        "evil0 =evil ",
        "evil0  = evil ",
        "evil0= evil ",
        "evil00 = evil ",
        "evil = evil ",
        "eVil0 = evil ",
        "EVIL0 = evil ",
        "ev_il0 = evil ",
        "ev il0 = evil ",
        "ev4il0 = evil ",
        "e0 = evil ",
        " 0 = evil ",
        "60 = evil ",
        "_0 = evil ",
        "0 = evil ",
        "evil=evil",
        "evil0 = evil "
      ]
    },
    {
      "regex": "^rgba\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d?\\.?\\d+)\\s*\\)$",
      "exceptionStackTrace": null,
      "matches": [
        "rgba( 0 , 0 , 0 , 0.0  )",
        "rgba( 0 , 0 , 0 , 0.0)",
        "rgba( 0 , 0 , 0 , 0.00 )",
        "rgba( 0 , 0 , 0 , 0. )",
        "rgba( 0 , 0 , 0 , 0..0 )",
        "rgba( 0 , 0 , 0 , 00 )",
        "rgba( 0 , 0 , 0 , 00.0 )",
        "rgba( 0 , 0 , 0 , .0 )",
        "rgba( 0 , 0 , 0 ,  0.0 )",
        "rgba( 0 , 0 , 0 ,0.0 )",
        "rgba( 0 , 0 , 0  , 0.0 )",
        "rgba( 0 , 0 , 0, 0.0 )",
        "rgba( 0 , 0 , 0000 , 0.0 )",
        "rgba( 0 , 0 , 000 , 0.0 )",
        "rgba( 0 , 0 ,  , 0.0 )",
        "rgba( 0 , 0 ,  0 , 0.0 )",
        "rgba( 0 , 0 ,0 , 0.0 )",
        "rgba( 0 , 0  , 0 , 0.0 )",
        "rgba( 0 , 0, 0 , 0.0 )",
        "rgba( 0 , 0000 , 0 , 0.0 )",
        "rgba( 0 , 000 , 0 , 0.0 )",
        "rgba( 0 ,  , 0 , 0.0 )",
        "rgba( 0 ,  0 , 0 , 0.0 )",
        "rgba( 0 ,0 , 0 , 0.0 )",
        "rgba( 0  , 0 , 0 , 0.0 )",
        "rgba( 0, 0 , 0 , 0.0 )",
        "rgba( 0000 , 0 , 0 , 0.0 )",
        "rgba( 000 , 0 , 0 , 0.0 )",
        "rgba(  , 0 , 0 , 0.0 )",
        "rgba(  0 , 0 , 0 , 0.0 )",
        "rgba(0 , 0 , 0 , 0.0 )",
        "rgba(0,0,0,0)",
        "rgba( 0 , 0 , 0 , 0.0 )"
      ]
    },
    {
      "regex": "^\\d+%$|\\A[-+]?[0-9]+\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "\\\\[\\\\tnr]",
      "exceptionStackTrace": null,
      "matches": ["\\t", "\\n", "\\a", "\\\\", "\\r"]
    },
    {
      "regex": "^(?:de(?:stroy|l(?:ete)?)|remove|miss)$",
      "exceptionStackTrace": null,
      "matches": ["deleteete", "del", "miss", "remove", "delete", "destroy"]
    },
    {
      "regex": "^[0-9a-zA-Z\\s\\-]{2,}",
      "exceptionStackTrace": null,
      "matches": ["-", "a-", "A-", "0-", " -", "--"]
    },
    {
      "regex": "SECRET_KEY=[a-f0-9]{128}",
      "exceptionStackTrace": null,
      "matches": [
        "SECRET_KEY=000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "SECRET_KEY=0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "SECRET_KEY=g0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "SECRET_KEY=a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "SECRET_KEY=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    {
      "regex": "v8::internal::.*\\[CPP]$",
      "exceptionStackTrace": null,
      "matches": [
        "v8::internal::][CPP]",
        "v8::internal::[[CPP]",
        "v8::internal:::[CPP]",
        "v8::internal::eVil[CPP]",
        "v8::internal::EVIL[CPP]",
        "v8::internal::ev_il[CPP]",
        "v8::internal::ev il[CPP]",
        "v8::internal::ev4il[CPP]",
        "v8::internal::e[CPP]",
        "v8::internal:: [CPP]",
        "v8::internal::6[CPP]",
        "v8::internal::_[CPP]",
        "v8::internal::[CPP]",
        "v8::internal::evil[CPP]"
      ]
    },
    {
      "regex": "Can.*t find.* method (SuperCA\\.)?initialize\\(\\)",
      "exceptionStackTrace": null,
      "matches": [
        "Canevilt findevil method SuperCA.SuperCA.initialize()",
        "Canevilt findevil method initialize()",
        "Canevilt find. method SuperCA.initialize()",
        "Canevilt find) method SuperCA.initialize()",
        "Canevilt find( method SuperCA.initialize()",
        "Canevilt findeVil method SuperCA.initialize()",
        "Canevilt findEVIL method SuperCA.initialize()",
        "Canevilt findev_il method SuperCA.initialize()",
        "Canevilt findev il method SuperCA.initialize()",
        "Canevilt findev4il method SuperCA.initialize()",
        "Canevilt finde method SuperCA.initialize()",
        "Canevilt find  method SuperCA.initialize()",
        "Canevilt find6 method SuperCA.initialize()",
        "Canevilt find_ method SuperCA.initialize()",
        "Canevilt find method SuperCA.initialize()",
        "Can.t findevil method SuperCA.initialize()",
        "Can)t findevil method SuperCA.initialize()",
        "Can(t findevil method SuperCA.initialize()",
        "CaneVilt findevil method SuperCA.initialize()",
        "CanEVILt findevil method SuperCA.initialize()",
        "Canev_ilt findevil method SuperCA.initialize()",
        "Canev ilt findevil method SuperCA.initialize()",
        "Canev4ilt findevil method SuperCA.initialize()",
        "Canet findevil method SuperCA.initialize()",
        "Can t findevil method SuperCA.initialize()",
        "Can6t findevil method SuperCA.initialize()",
        "Can_t findevil method SuperCA.initialize()",
        "Cant findevil method SuperCA.initialize()",
        "Cant find method initialize()",
        "Canevilt findevil method SuperCA.initialize()"
      ]
    },
    {
      "regex": "([^\\cJ]+)(\\cJ[^\\c@]*|)\\c@",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\c"
      },
      "matches": []
    },
    {
      "regex": "\\#(\\S+)\\b",
      "exceptionStackTrace": null,
      "matches": [
        "##",
        "#eVil",
        "#EVIL",
        "#ev_il",
        "#ev il",
        "#ev4il",
        "#e",
        "# ",
        "#6",
        "#_",
        "#",
        "#evil"
      ]
    },
    { "regex": "\\&\\|", "exceptionStackTrace": null, "matches": ["&|"] },
    {
      "regex": "^I put the table in edit mode$",
      "exceptionStackTrace": null,
      "matches": ["I put the table in edit mode"]
    },
    {
      "regex": "[a-z0-9](\\.[a-z0-9]+)+",
      "exceptionStackTrace": null,
      "matches": [
        "0.evil.evil",
        "0",
        "0.eVil",
        "0.EVIL",
        "0.ev_il",
        "0.ev il",
        "0.ev4il",
        "0.e",
        "0. ",
        "0.6",
        "0._",
        "0.",
        "a.evil",
        "0.evil"
      ]
    },
    {
      "regex": "^xmtp:Body-Multipart$",
      "exceptionStackTrace": null,
      "matches": ["xmtp:Body-Multipart"]
    },
    {
      "regex": "^@attr.*ClassWithAttribs",
      "exceptionStackTrace": null,
      "matches": [
        "@attr@ClassWithAttribs",
        "@attreVilClassWithAttribs",
        "@attrEVILClassWithAttribs",
        "@attrev_ilClassWithAttribs",
        "@attrev ilClassWithAttribs",
        "@attrev4ilClassWithAttribs",
        "@attreClassWithAttribs",
        "@attr ClassWithAttribs",
        "@attr6ClassWithAttribs",
        "@attr_ClassWithAttribs",
        "@attrClassWithAttribs",
        "@attrevilClassWithAttribs"
      ]
    },
    {
      "regex": "@(.*?): (.*)",
      "exceptionStackTrace": null,
      "matches": [
        "@evil: @",
        "@evil: :",
        "@evil: eVil",
        "@evil: EVIL",
        "@evil: ev_il",
        "@evil: ev il",
        "@evil: ev4il",
        "@evil: e",
        "@evil:  ",
        "@evil: 6",
        "@evil: _",
        "@evil: ",
        "@@: evil",
        "@:: evil",
        "@eVil: evil",
        "@EVIL: evil",
        "@ev_il: evil",
        "@ev il: evil",
        "@ev4il: evil",
        "@e: evil",
        "@ : evil",
        "@6: evil",
        "@_: evil",
        "@: evil",
        "@: ",
        "@evil: evil"
      ]
    },
    {
      "regex": "^.+@.+$",
      "exceptionStackTrace": null,
      "matches": [
        "evil@@",
        "evil@eVil",
        "evil@EVIL",
        "evil@ev_il",
        "evil@ev il",
        "evil@ev4il",
        "evil@e",
        "evil@ ",
        "evil@6",
        "evil@_",
        "evil@",
        "@@evil",
        "eVil@evil",
        "EVIL@evil",
        "ev_il@evil",
        "ev il@evil",
        "ev4il@evil",
        "e@evil",
        " @evil",
        "6@evil",
        "_@evil",
        "@evil",
        "evil@evil"
      ]
    },
    { "regex": "\\bvcard\\b", "exceptionStackTrace": null, "matches": ["vcard"] },
    {
      "regex": "\\<a href\\=\\\"\\/tmp[^\\\"]\\>\\&uarr\\;\\&nbsp\\;Top\\<\\/a\\>",
      "exceptionStackTrace": null,
      "matches": [
        "<a href=\"/tmpA>&uarr;&nbsp;Top</a>",
        "<a href=\"/tmp>>&uarr;&nbsp;Top</a>",
        "<a href=\"/tmp=>&uarr;&nbsp;Top</a>",
        "<a href=\"/tmp<>&uarr;&nbsp;Top</a>",
        "<a href=\"/tmp;>&uarr;&nbsp;Top</a>",
        "<a href=\"/tmp0>&uarr;&nbsp;Top</a>",
        "<a href=\"/tmp/>&uarr;&nbsp;Top</a>",
        "<a href=\"/tmp&>&uarr;&nbsp;Top</a>",
        "<a href=\"/tmp\">&uarr;&nbsp;Top</a>",
        "<a href=\"/tmp >&uarr;&nbsp;Top</a>",
        "<a href=\"/tmpa>&uarr;&nbsp;Top</a>"
      ]
    },
    {
      "regex": "(?m)^/remove-(area|committee|kind|language|priority|sig|triage|wg)\\s*(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "/remove-area /",
        "/remove-area -",
        "/remove-area eVil",
        "/remove-area EVIL",
        "/remove-area ev_il",
        "/remove-area ev il",
        "/remove-area ev4il",
        "/remove-area e",
        "/remove-area  ",
        "/remove-area 6",
        "/remove-area _",
        "/remove-area ",
        "/remove-area  evil",
        "/remove-areaevil",
        "/remove-wg",
        "/remove-triage",
        "/remove-sig",
        "/remove-priority",
        "/remove-language",
        "/remove-kind",
        "/remove-committee",
        "/remove-area",
        "/remove-wg evil",
        "/remove-triage evil",
        "/remove-sig evil",
        "/remove-priority evil",
        "/remove-language evil",
        "/remove-kind evil",
        "/remove-committee evil",
        "/remove-area evil"
      ]
    },
    {
      "regex": "not-parsed",
      "exceptionStackTrace": null,
      "matches": ["not-parsed"]
    },
    {
      "regex": "<body><span style=\"font-size:\\s?large;?\"><p><em>foo<\\/em><\\/p><\\/span><\\/body>",
      "exceptionStackTrace": null,
      "matches": [
        "<body><span style=\"font-size: large;;\"><p><em>foo</em></p></span></body>",
        "<body><span style=\"font-size: large\"><p><em>foo</em></p></span></body>",
        "<body><span style=\"font-size:  large;\"><p><em>foo</em></p></span></body>",
        "<body><span style=\"font-size:large;\"><p><em>foo</em></p></span></body>",
        "<body><span style=\"font-size:large\"><p><em>foo</em></p></span></body>",
        "<body><span style=\"font-size: large;\"><p><em>foo</em></p></span></body>"
      ]
    },
    { "regex": "LOCAL\\b", "exceptionStackTrace": null, "matches": ["LOCAL"] },
    {
      "regex": "^-----BEGIN",
      "exceptionStackTrace": null,
      "matches": ["-----BEGIN"]
    },
    {
      "regex": "^(okhttp)\\/([\\d\\.]+)",
      "exceptionStackTrace": null,
      "matches": ["okhttp/..", "okhttp/", "okhttp/0", "okhttp/."]
    },
    {
      "regex": "expected at least once, not yet invoked",
      "exceptionStackTrace": null,
      "matches": ["expected at least once, not yet invoked"]
    },
    {
      "regex": "^DEBUG.*x-severity=\\\"DEBUG\\\"",
      "exceptionStackTrace": null,
      "matches": [
        "DEBUG=x-severity=\"DEBUG\"",
        "DEBUG-x-severity=\"DEBUG\"",
        "DEBUG\"x-severity=\"DEBUG\"",
        "DEBUGeVilx-severity=\"DEBUG\"",
        "DEBUGEVILx-severity=\"DEBUG\"",
        "DEBUGev_ilx-severity=\"DEBUG\"",
        "DEBUGev ilx-severity=\"DEBUG\"",
        "DEBUGev4ilx-severity=\"DEBUG\"",
        "DEBUGex-severity=\"DEBUG\"",
        "DEBUG x-severity=\"DEBUG\"",
        "DEBUG6x-severity=\"DEBUG\"",
        "DEBUG_x-severity=\"DEBUG\"",
        "DEBUGx-severity=\"DEBUG\"",
        "DEBUGevilx-severity=\"DEBUG\""
      ]
    },
    {
      "regex": "[^\\\\](:)",
      "exceptionStackTrace": null,
      "matches": ["\\:", "A:", "::", "0:", " :", "a:"]
    },
    {
      "regex": "(^\\+53|\\D)",
      "exceptionStackTrace": null,
      "matches": ["_", "A", "0", "+", " ", "a", "+53"]
    },
    {
      "regex": "^remote-rt://([\\w.-]+)/ticket/(\\d+)$",
      "exceptionStackTrace": null,
      "matches": [
        "remote-rt://evil/ticket/00",
        "remote-rt://evil/ticket/",
        "remote-rt://:/ticket/0",
        "remote-rt:////ticket/0",
        "remote-rt://./ticket/0",
        "remote-rt://-/ticket/0",
        "remote-rt://eVil/ticket/0",
        "remote-rt://EVIL/ticket/0",
        "remote-rt://ev_il/ticket/0",
        "remote-rt://ev il/ticket/0",
        "remote-rt://ev4il/ticket/0",
        "remote-rt://e/ticket/0",
        "remote-rt:// /ticket/0",
        "remote-rt://6/ticket/0",
        "remote-rt://_/ticket/0",
        "remote-rt:///ticket/0",
        "remote-rt://evil/ticket/0"
      ]
    },
    {
      "regex": "msie 8\\.0",
      "exceptionStackTrace": null,
      "matches": ["msie 8.0"]
    },
    {
      "regex": "\\$\\(HOST:.+?\\)",
      "exceptionStackTrace": null,
      "matches": [
        "$(HOST::)",
        "$(HOST:))",
        "$(HOST:()",
        "$(HOST:$)",
        "$(HOST:eVil)",
        "$(HOST:EVIL)",
        "$(HOST:ev_il)",
        "$(HOST:ev il)",
        "$(HOST:ev4il)",
        "$(HOST:e)",
        "$(HOST: )",
        "$(HOST:6)",
        "$(HOST:_)",
        "$(HOST:)",
        "$(HOST:evil)"
      ]
    },
    {
      "regex": "(?:\u00e3\u0081\u0086\u00e3\u0081\u008a|\u00e9\u00ad\u009a)\u00e5\u00ba\u00a7",
      "exceptionStackTrace": null,
      "matches": [
        "\u00e9\u00ad\u009a\u00e5\u00ba\u00a7",
        "\u00e3\u0081\u0086\u00e3\u0081\u008a\u00e5\u00ba\u00a7"
      ]
    },
    {
      "regex": "[\\$a-zA-Z0-9]",
      "exceptionStackTrace": null,
      "matches": ["a", "A", "0", "$"]
    },
    {
      "regex": "(*UTF8)[^\\p{L}]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "nothing to repeat"
      },
      "matches": []
    },
    {
      "regex": "^(TR|TH|TD)$",
      "exceptionStackTrace": null,
      "matches": ["TD", "TH", "TR"]
    },
    {
      "regex": "\n        ([^:=\\s][^:=]*)       # very permissive!\n        \\s*[:=]\\s*            # any number of space chars,\n                              # followed by separator\n                              # (either : or =), followed\n                              # by any # space chars\n        (.*)$                 # everything up to eol\n      ",
      "exceptionStackTrace": null,
      "matches": [
        "\n        aevil       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        =                 # everything up to eol\n      ",
        "\n        aevil       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        :                 # everything up to eol\n      ",
        "\n        aevil       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        ,                 # everything up to eol\n      ",
        "\n        aevil       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        #                 # everything up to eol\n      ",
        "\n        aevil       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        !                 # everything up to eol\n      ",
        "\n        aevil       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        eVil                 # everything up to eol\n      ",
        "\n        aevil       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        EVIL                 # everything up to eol\n      ",
        "\n        aevil       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        ev_il                 # everything up to eol\n      ",
        "\n        aevil       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        ev il                 # everything up to eol\n      ",
        "\n        aevil       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        ev4il                 # everything up to eol\n      ",
        "\n        aevil       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        e                 # everything up to eol\n      ",
        "\n        aevil       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n                          # everything up to eol\n      ",
        "\n        aevil       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        6                 # everything up to eol\n      ",
        "\n        aevil       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        _                 # everything up to eol\n      ",
        "\n        aevil       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n                         # everything up to eol\n      ",
        "\n        aevil       # very permissive!\n         =              # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        evil                 # everything up to eol\n      ",
        "\n        aevil       # very permissive!\n         =            # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        evil                 # everything up to eol\n      ",
        "\n        aevil       # very permissive!\n         :             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        evil                 # everything up to eol\n      ",
        "\n        aevil       # very permissive!\n          =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        evil                 # everything up to eol\n      ",
        "\n        aevil       # very permissive!\n        =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        evil                 # everything up to eol\n      ",
        "\n        a=       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        evil                 # everything up to eol\n      ",
        "\n        a:       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        evil                 # everything up to eol\n      ",
        "\n        a,       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        evil                 # everything up to eol\n      ",
        "\n        a#       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        evil                 # everything up to eol\n      ",
        "\n        a!       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        evil                 # everything up to eol\n      ",
        "\n        aeVil       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        evil                 # everything up to eol\n      ",
        "\n        aEVIL       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        evil                 # everything up to eol\n      ",
        "\n        aev_il       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        evil                 # everything up to eol\n      ",
        "\n        aev il       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        evil                 # everything up to eol\n      ",
        "\n        aev4il       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        evil                 # everything up to eol\n      ",
        "\n        ae       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        evil                 # everything up to eol\n      ",
        "\n        a        # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        evil                 # everything up to eol\n      ",
        "\n        a6       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        evil                 # everything up to eol\n      ",
        "\n        a_       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        evil                 # everything up to eol\n      ",
        "\n        a       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        evil                 # everything up to eol\n      ",
        "\n        Aevil       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        evil                 # everything up to eol\n      ",
        "\n        =evil       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        evil                 # everything up to eol\n      ",
        "\n        :evil       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        evil                 # everything up to eol\n      ",
        "\n        0evil       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        evil                 # everything up to eol\n      ",
        "\n        ,evil       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        evil                 # everything up to eol\n      ",
        "\n        #evil       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        evil                 # everything up to eol\n      ",
        "\n        !evil       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        evil                 # everything up to eol\n      ",
        "\n         evil       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        evil                 # everything up to eol\n      ",
        "\n        a       # very permissive!\n        =            # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n                         # everything up to eol\n      ",
        "\n        aevil       # very permissive!\n         =             # any number of space chars,\n                              # followed by separator\n                              # either : or =, followed\n                              # by any # space chars\n        evil                 # everything up to eol\n      "
      ]
    },
    { "regex": "WEBVTT", "exceptionStackTrace": null, "matches": ["WEBVTT"] },
    {
      "regex": "^(\\d[\\d:]+\\d)\\.(\\d+)\\.(\\d+)$",
      "exceptionStackTrace": null,
      "matches": [
        "0:0.0.00",
        "0:0.0.",
        "0:0.00.0",
        "0:0..0",
        "0::0.0.0",
        "00.0.0",
        "000.0.0",
        "0:0.0.0"
      ]
    },
    {
      "regex": "^(\\d{4,})-(\\d\\d)$",
      "exceptionStackTrace": null,
      "matches": ["000-00", "0000-00"]
    },
    {
      "regex": "<td[^<>]*>(<(table|tbody|p|tr|h[1-6])[^<>]*>)*|(</(table|tbody|p|h[1-6])>)*</td>",
      "exceptionStackTrace": null,
      "matches": [
        "</h0></td>",
        "</table></table></td>",
        "<tdevil><h0evil>",
        "<tdevil><tableevil><tableevil>",
        "<tdevil>",
        "<tdevil><table>>",
        "<tdevil><table<>",
        "<tdevil><table/>",
        "<tdevil><tableeVil>",
        "<tdevil><tableEVIL>",
        "<tdevil><tableev_il>",
        "<tdevil><tableev il>",
        "<tdevil><tableev4il>",
        "<tdevil><tablee>",
        "<tdevil><table >",
        "<tdevil><table6>",
        "<tdevil><table_>",
        "<tdevil><table>",
        "<td>><tableevil>",
        "<td<><tableevil>",
        "<td/><tableevil>",
        "<tdeVil><tableevil>",
        "<tdEVIL><tableevil>",
        "<tdev_il><tableevil>",
        "<tdev il><tableevil>",
        "<tdev4il><tableevil>",
        "<tde><tableevil>",
        "<td ><tableevil>",
        "<td6><tableevil>",
        "<td_><tableevil>",
        "<td><tableevil>",
        "</td>",
        "<td>",
        "</h1></td>",
        "</p></td>",
        "</tbody></td>",
        "</table></td>",
        "<tdevil><h1evil>",
        "<tdevil><trevil>",
        "<tdevil><pevil>",
        "<tdevil><tbodyevil>",
        "<tdevil><tableevil>"
      ]
    },
    {
      "regex": "(.*::(.*))",
      "exceptionStackTrace": null,
      "matches": [
        "evil:::",
        "evil::eVil",
        "evil::EVIL",
        "evil::ev_il",
        "evil::ev il",
        "evil::ev4il",
        "evil::e",
        "evil:: ",
        "evil::6",
        "evil::_",
        "evil::",
        ":::evil",
        "eVil::evil",
        "EVIL::evil",
        "ev_il::evil",
        "ev il::evil",
        "ev4il::evil",
        "e::evil",
        " ::evil",
        "6::evil",
        "_::evil",
        "::evil",
        "::",
        "evil::evil"
      ]
    },
    {
      "regex": "(?:(?:one\ntwo)){0,}",
      "exceptionStackTrace": null,
      "matches": ["one\ntwoone\ntwo", "", "one\ntwo"]
    },
    {
      "regex": "Subject:\\s*(.*)\\s*From:\\s*(.*)\\s*Date:\\s*(.*)\\s*To:\\s*(.*)\\s*(CC:\\s*(.*)\\s*)?",
      "exceptionStackTrace": null,
      "matches": [
        "Subject: evil From: evil Date: evil To: evil CC: evil CC: evil ",
        "Subject: evil From: evil Date: evil To: evil ",
        "Subject: evil From: evil Date: evil To: evil CC: evil  ",
        "Subject: evil From: evil Date: evil To: evil CC: evil",
        "Subject: evil From: evil Date: evil To: evil CC: : ",
        "Subject: evil From: evil Date: evil To: evil CC: eVil ",
        "Subject: evil From: evil Date: evil To: evil CC: EVIL ",
        "Subject: evil From: evil Date: evil To: evil CC: ev_il ",
        "Subject: evil From: evil Date: evil To: evil CC: ev il ",
        "Subject: evil From: evil Date: evil To: evil CC: ev4il ",
        "Subject: evil From: evil Date: evil To: evil CC: e ",
        "Subject: evil From: evil Date: evil To: evil CC:   ",
        "Subject: evil From: evil Date: evil To: evil CC: 6 ",
        "Subject: evil From: evil Date: evil To: evil CC: _ ",
        "Subject: evil From: evil Date: evil To: evil CC:  ",
        "Subject: evil From: evil Date: evil To: evil CC:  evil ",
        "Subject: evil From: evil Date: evil To: evil CC:evil ",
        "Subject: evil From: evil Date: evil To: evil  CC: evil ",
        "Subject: evil From: evil Date: evil To: evilCC: evil ",
        "Subject: evil From: evil Date: evil To: : CC: evil ",
        "Subject: evil From: evil Date: evil To: eVil CC: evil ",
        "Subject: evil From: evil Date: evil To: EVIL CC: evil ",
        "Subject: evil From: evil Date: evil To: ev_il CC: evil ",
        "Subject: evil From: evil Date: evil To: ev il CC: evil ",
        "Subject: evil From: evil Date: evil To: ev4il CC: evil ",
        "Subject: evil From: evil Date: evil To: e CC: evil ",
        "Subject: evil From: evil Date: evil To:   CC: evil ",
        "Subject: evil From: evil Date: evil To: 6 CC: evil ",
        "Subject: evil From: evil Date: evil To: _ CC: evil ",
        "Subject: evil From: evil Date: evil To:  CC: evil ",
        "Subject: evil From: evil Date: evil To:  evil CC: evil ",
        "Subject: evil From: evil Date: evil To:evil CC: evil ",
        "Subject: evil From: evil Date: evil  To: evil CC: evil ",
        "Subject: evil From: evil Date: evilTo: evil CC: evil ",
        "Subject: evil From: evil Date: : To: evil CC: evil ",
        "Subject: evil From: evil Date: eVil To: evil CC: evil ",
        "Subject: evil From: evil Date: EVIL To: evil CC: evil ",
        "Subject: evil From: evil Date: ev_il To: evil CC: evil ",
        "Subject: evil From: evil Date: ev il To: evil CC: evil ",
        "Subject: evil From: evil Date: ev4il To: evil CC: evil ",
        "Subject: evil From: evil Date: e To: evil CC: evil ",
        "Subject: evil From: evil Date:   To: evil CC: evil ",
        "Subject: evil From: evil Date: 6 To: evil CC: evil ",
        "Subject: evil From: evil Date: _ To: evil CC: evil ",
        "Subject: evil From: evil Date:  To: evil CC: evil ",
        "Subject: evil From: evil Date:  evil To: evil CC: evil ",
        "Subject: evil From: evil Date:evil To: evil CC: evil ",
        "Subject: evil From: evil  Date: evil To: evil CC: evil ",
        "Subject: evil From: evilDate: evil To: evil CC: evil ",
        "Subject: evil From: : Date: evil To: evil CC: evil ",
        "Subject: evil From: eVil Date: evil To: evil CC: evil ",
        "Subject: evil From: EVIL Date: evil To: evil CC: evil ",
        "Subject: evil From: ev_il Date: evil To: evil CC: evil ",
        "Subject: evil From: ev il Date: evil To: evil CC: evil ",
        "Subject: evil From: ev4il Date: evil To: evil CC: evil ",
        "Subject: evil From: e Date: evil To: evil CC: evil ",
        "Subject: evil From:   Date: evil To: evil CC: evil ",
        "Subject: evil From: 6 Date: evil To: evil CC: evil ",
        "Subject: evil From: _ Date: evil To: evil CC: evil ",
        "Subject: evil From:  Date: evil To: evil CC: evil ",
        "Subject: evil From:  evil Date: evil To: evil CC: evil ",
        "Subject: evil From:evil Date: evil To: evil CC: evil ",
        "Subject: evil  From: evil Date: evil To: evil CC: evil ",
        "Subject: evilFrom: evil Date: evil To: evil CC: evil ",
        "Subject: : From: evil Date: evil To: evil CC: evil ",
        "Subject: eVil From: evil Date: evil To: evil CC: evil ",
        "Subject: EVIL From: evil Date: evil To: evil CC: evil ",
        "Subject: ev_il From: evil Date: evil To: evil CC: evil ",
        "Subject: ev il From: evil Date: evil To: evil CC: evil ",
        "Subject: ev4il From: evil Date: evil To: evil CC: evil ",
        "Subject: e From: evil Date: evil To: evil CC: evil ",
        "Subject:   From: evil Date: evil To: evil CC: evil ",
        "Subject: 6 From: evil Date: evil To: evil CC: evil ",
        "Subject: _ From: evil Date: evil To: evil CC: evil ",
        "Subject:  From: evil Date: evil To: evil CC: evil ",
        "Subject:  evil From: evil Date: evil To: evil CC: evil ",
        "Subject:evil From: evil Date: evil To: evil CC: evil ",
        "Subject:From:Date:To:",
        "Subject: evil From: evil Date: evil To: evil CC: evil "
      ]
    },
    {
      "regex": "Cannot define many filler chunk in a cluster\\.",
      "exceptionStackTrace": null,
      "matches": ["Cannot define many filler chunk in a cluster."]
    },
    {
      "regex": "\\[(\\$[^\\]]+)\\]",
      "exceptionStackTrace": null,
      "matches": [
        "[$]]",
        "[$[]",
        "[$$]",
        "[$eVil]",
        "[$EVIL]",
        "[$ev_il]",
        "[$ev il]",
        "[$ev4il]",
        "[$e]",
        "[$ ]",
        "[$6]",
        "[$_]",
        "[$]",
        "[$evil]"
      ]
    },
    {
      "regex": "^char \\*emalloc\\(",
      "exceptionStackTrace": null,
      "matches": ["char *emalloc("]
    },
    { "regex": "\\+\\+", "exceptionStackTrace": null, "matches": ["++"] },
    {
      "regex": "^(\\r|\\n)*$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": "secrets\\.yml\\.enc",
      "exceptionStackTrace": null,
      "matches": ["secrets.yml.enc"]
    },
    {
      "regex": "count:>(\\d+)",
      "exceptionStackTrace": null,
      "matches": ["count:>00", "count:>", "count:>0"]
    },
    {
      "regex": "Error while evaluating a Resource Statement, Cannot alias Package\\[other-guid\\] to \\[\"guid\", \"",
      "exceptionStackTrace": null,
      "matches": [
        "Error while evaluating a Resource Statement, Cannot alias Package[other-guid] to [\"guid\", \""
      ]
    },
    { "regex": "<TO>", "exceptionStackTrace": null, "matches": ["<TO>"] },
    { "regex": "([0-9])(-)", "exceptionStackTrace": null, "matches": ["0-"] },
    {
      "regex": "@import\\s+(?:'([^']+)'|\"([^\"]+)\"|url\\(([^\\)]+)\\))",
      "exceptionStackTrace": null,
      "matches": [
        "@import url(@)",
        "@import url())",
        "@import url(()",
        "@import url(')",
        "@import url(\")",
        "@import url(eVil)",
        "@import url(EVIL)",
        "@import url(ev_il)",
        "@import url(ev il)",
        "@import url(ev4il)",
        "@import url(e)",
        "@import url( )",
        "@import url(6)",
        "@import url(_)",
        "@import url()",
        "@import \"@\"",
        "@import \")\"",
        "@import \"(\"",
        "@import \"'\"",
        "@import \"\"\"",
        "@import \"eVil\"",
        "@import \"EVIL\"",
        "@import \"ev_il\"",
        "@import \"ev il\"",
        "@import \"ev4il\"",
        "@import \"e\"",
        "@import \" \"",
        "@import \"6\"",
        "@import \"_\"",
        "@import \"\"",
        "@import '@'",
        "@import ')'",
        "@import '('",
        "@import '''",
        "@import '\"'",
        "@import 'eVil'",
        "@import 'EVIL'",
        "@import 'ev_il'",
        "@import 'ev il'",
        "@import 'ev4il'",
        "@import 'e'",
        "@import ' '",
        "@import '6'",
        "@import '_'",
        "@import ''",
        "@import  'evil'",
        "@import'evil'",
        "@import url(evil)",
        "@import \"evil\"",
        "@import 'evil'"
      ]
    },
    {
      "regex": "export function reducer",
      "exceptionStackTrace": null,
      "matches": ["export function reducer"]
    },
    {
      "regex": "RS_IP\\d+_ASSIGNMENT",
      "exceptionStackTrace": null,
      "matches": ["RS_IP00_ASSIGNMENT", "RS_IP_ASSIGNMENT", "RS_IP0_ASSIGNMENT"]
    },
    {
      "regex": "^none.t",
      "exceptionStackTrace": null,
      "matches": ["none_t", "noneAt", "none0t", "none t", "noneat"]
    },
    { "regex": "Raye", "exceptionStackTrace": null, "matches": ["Raye"] },
    {
      "regex": "THREE\\.|\\s*=\\s*function",
      "exceptionStackTrace": null,
      "matches": [
        " =  function",
        " =function",
        "  = function",
        "= function",
        "=function",
        " = function",
        "THREE."
      ]
    },
    {
      "regex": "use\\s+Psr\\\\Http\\\\Server\\\\MiddlewareInterface(\\s*)(?<end>;|as\\s*(?<alias>[^;\\s]+)\\s*;)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<e"
      },
      "matches": []
    },
    {
      "regex": "^I am looking at the Pan Palette page$",
      "exceptionStackTrace": null,
      "matches": ["I am looking at the Pan Palette page"]
    },
    {
      "regex": "'([sm]|re)",
      "exceptionStackTrace": null,
      "matches": ["'s", "'a", "'re", "'m"]
    },
    {
      "regex": "<[^!?/>]+|<!--",
      "exceptionStackTrace": null,
      "matches": [
        "<?",
        "<>",
        "<<",
        "</",
        "<-",
        "<!",
        "<eVil",
        "<EVIL",
        "<ev_il",
        "<ev il",
        "<ev4il",
        "<e",
        "< ",
        "<6",
        "<_",
        "<",
        "<!--",
        "<evil"
      ]
    },
    { "regex": "\\['", "exceptionStackTrace": null, "matches": ["['"] },
    {
      "regex": "^[-\\w]+:",
      "exceptionStackTrace": null,
      "matches": [
        "::",
        "-:",
        "eVil:",
        "EVIL:",
        "ev_il:",
        "ev il:",
        "ev4il:",
        "e:",
        " :",
        "6:",
        "_:",
        ":",
        "evil:"
      ]
    },
    {
      "regex": "[\\n\\r] +",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "(?i)(?=[^$a-z0-9_\\\\])",
      "exceptionStackTrace": null,
      "matches": [""]
    },
    { "regex": "$item", "exceptionStackTrace": null, "matches": ["item"] },
    {
      "regex": "^\\([ivxIVX]+\\)\\. ",
      "exceptionStackTrace": null,
      "matches": [
        "(XX). ",
        "(). ",
        "(x). ",
        "(v). ",
        "(i). ",
        "(a). ",
        "(V). ",
        "(I). ",
        "(A). ",
        "(X). "
      ]
    },
    {
      "regex": "/([^/]*)/?",
      "exceptionStackTrace": null,
      "matches": [
        "/evil//",
        "/evil",
        "///",
        "/eVil/",
        "/EVIL/",
        "/ev_il/",
        "/ev il/",
        "/ev4il/",
        "/e/",
        "/ /",
        "/6/",
        "/_/",
        "//",
        "/",
        "/evil/"
      ]
    },
    {
      "regex": "^<ul[^>]*>(.*?(?R)?.*?)<\\/ul>",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?R"
      },
      "matches": []
    },
    {
      "regex": ",.*",
      "exceptionStackTrace": null,
      "matches": [
        ",,",
        ",eVil",
        ",EVIL",
        ",ev_il",
        ",ev il",
        ",ev4il",
        ",e",
        ", ",
        ",6",
        ",_",
        ",",
        ",evil"
      ]
    },
    {
      "regex": "(?x)\n        and=|or=|!|%|&|\\^|\\*|\\/|(\\-)?\\-(?!>)|\\+\\+|\\+|~|==|=(?!>)|!=|<=|>=|<<=|>>=|\n        >>>=|<>|<|>|!|&&|\\.\\.(\\.)?|\\?|\\||\\|\\||\\:|\\*=|(?<!\\()/=|%=|\\+=|\\-=|&=|\n        \\^=|\\b(?<![\\.\\$])(instanceof|new|delete|typeof|and|or|is|isnt|not|super)\\b\n      ",
      "exceptionStackTrace": null,
      "matches": [
        "....",
        "---",
        "..",
        "-",
        "super\n      ",
        "not\n      ",
        "isnt\n      ",
        "is\n      ",
        "or\n      ",
        "and\n      ",
        "typeof\n      ",
        "delete\n      ",
        "new\n      ",
        "instanceof\n      ",
        "\n        ^=",
        "&=",
        "-=",
        "+=",
        "%=",
        "/=",
        "*=",
        ":",
        "||",
        "|",
        "?",
        "...",
        "&&",
        ">",
        "<",
        "<>",
        "\n        >>>=",
        ">>=",
        "<<=",
        ">=",
        "<=",
        "!=",
        "=",
        "==",
        "~",
        "+",
        "++",
        "--",
        "/",
        "*",
        "^",
        "&",
        "%",
        "!",
        "or=",
        "\n        and="
      ]
    },
    {
      "regex": "^msg:\\s*",
      "exceptionStackTrace": null,
      "matches": ["msg:  ", "msg:", "msg: "]
    },
    {
      "regex": "(^|[^<])<(?!<)",
      "exceptionStackTrace": null,
      "matches": ["A<", "<<", "0<", " <", "a<", "<"]
    },
    {
      "regex": "^\\!?[a-zA-Z]{1,}:?[a-zA-Z0-9\\-]*",
      "exceptionStackTrace": null,
      "matches": [
        "!evil::",
        "!evil:-",
        "!evil:!",
        "!evil:eVil",
        "!evil:EVIL",
        "!evil:ev_il",
        "!evil:ev il",
        "!evil:ev4il",
        "!evil:e",
        "!evil: ",
        "!evil:6",
        "!evil:_",
        "!evil:",
        "!evil::evil",
        "!evilevil",
        "!eVil:evil",
        "!EVIL:evil",
        "!ev_il:evil",
        "!ev il:evil",
        "!ev4il:evil",
        "!e:evil",
        "! :evil",
        "!6:evil",
        "!_:evil",
        "!:evil",
        "!!evil:evil",
        "evil:evil",
        "evil",
        "!evil:evil"
      ]
    },
    {
      "regex": "\\\"_id\\\"\\s*:\\s*",
      "exceptionStackTrace": null,
      "matches": [
        "\"_id\" :  ",
        "\"_id\" :",
        "\"_id\"  : ",
        "\"_id\": ",
        "\"_id\":",
        "\"_id\" : "
      ]
    },
    {
      "regex": "^\\s*#\\s*_(if|unless|els(?:e|if)|end)_(?:\\s(.+))?",
      "exceptionStackTrace": null,
      "matches": [
        " # _if_ evil evil",
        " # _if_",
        " # _if_ #",
        " # _if_ eVil",
        " # _if_ EVIL",
        " # _if_ ev_il",
        " # _if_ ev il",
        " # _if_ ev4il",
        " # _if_ e",
        " # _if_  ",
        " # _if_ 6",
        " # _if_ _",
        " # _if_ ",
        " #  _if_ evil",
        " #_if_ evil",
        "  # _if_ evil",
        "# _if_ evil",
        "#_end_",
        "#_elsif_",
        "#_else_",
        "#_unless_",
        "#_if_",
        " # _end_ evil",
        " # _elsif_ evil",
        " # _else_ evil",
        " # _unless_ evil",
        " # _if_ evil"
      ]
    },
    {
      "regex": "Yyy: migrating",
      "exceptionStackTrace": null,
      "matches": ["Yyy: migrating"]
    },
    {
      "regex": "^([a-zA-Z0-9_\\\\]+) as ([a-zA-Z0-9_]+)",
      "exceptionStackTrace": null,
      "matches": [
        "evil as \\",
        "evil as eVil",
        "evil as EVIL",
        "evil as ev_il",
        "evil as ev il",
        "evil as ev4il",
        "evil as e",
        "evil as  ",
        "evil as 6",
        "evil as _",
        "evil as ",
        "\\ as evil",
        "eVil as evil",
        "EVIL as evil",
        "ev_il as evil",
        "ev il as evil",
        "ev4il as evil",
        "e as evil",
        "  as evil",
        "6 as evil",
        "_ as evil",
        " as evil",
        "evil as evil"
      ]
    },
    {
      "regex": "\\\"([\\d\\D][^\\\"]+)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "\"a\"\"",
        "\"aeVil\"",
        "\"aEVIL\"",
        "\"aev_il\"",
        "\"aev il\"",
        "\"aev4il\"",
        "\"ae\"",
        "\"a \"",
        "\"a6\"",
        "\"a_\"",
        "\"a\"",
        "\"_evil\"",
        "\"Aevil\"",
        "\"0evil\"",
        "\"\"evil\"",
        "\" evil\"",
        "\"aevil\""
      ]
    },
    {
      "regex": "(?:constraint|index) \\[(.+?)\\]",
      "exceptionStackTrace": null,
      "matches": [
        "constraint []]",
        "constraint [[]",
        "constraint [eVil]",
        "constraint [EVIL]",
        "constraint [ev_il]",
        "constraint [ev il]",
        "constraint [ev4il]",
        "constraint [e]",
        "constraint [ ]",
        "constraint [6]",
        "constraint [_]",
        "constraint []",
        "index [evil]",
        "constraint [evil]"
      ]
    },
    {
      "regex": "env\\/shared\\/key\\.rb:\\d+: warning: ENV\\.index is deprecated; use ENV\\.key",
      "exceptionStackTrace": null,
      "matches": [
        "env/shared/key.rb:00: warning: ENV.index is deprecated; use ENV.key",
        "env/shared/key.rb:: warning: ENV.index is deprecated; use ENV.key",
        "env/shared/key.rb:0: warning: ENV.index is deprecated; use ENV.key"
      ]
    },
    {
      "regex": "[\\u1D5B\\u1D65\\u1E7D\\u1E7F\\u2174\\u24E5\\uFF56]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 7515"
      },
      "matches": []
    },
    {
      "regex": "^CONNECT\\s+([^\\r\\n]+)\\r\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": ".+\\@.+",
      "exceptionStackTrace": null,
      "matches": [
        "evil@@",
        "evil@eVil",
        "evil@EVIL",
        "evil@ev_il",
        "evil@ev il",
        "evil@ev4il",
        "evil@e",
        "evil@ ",
        "evil@6",
        "evil@_",
        "evil@",
        "@@evil",
        "eVil@evil",
        "EVIL@evil",
        "ev_il@evil",
        "ev il@evil",
        "ev4il@evil",
        "e@evil",
        " @evil",
        "6@evil",
        "_@evil",
        "@evil",
        "evil@evil"
      ]
    },
    { "regex": "[aq]", "exceptionStackTrace": null, "matches": ["b", "a", "q"] },
    {
      "regex": "(^|[^0-9A-Za-z\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u024f\u1e00-\u1eff\u2c60-\u2c7f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua7ff])((?:C[a\\xE2]ntarea[\\s\\xa0]*celor[\\s\\xa0]*trei[\\s\\xa0]*(?:tiner|evre)i|(?:Trei|3)[\\s\\xa0]*tineri|SgThree))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 226"
      },
      "matches": []
    },
    {
      "regex": "^(\\-?\\d+(\\.\\d{1,2})?)@(ms(\\d+(\\.\\d{1,2})?)?|s|vs)$",
      "exceptionStackTrace": null,
      "matches": [
        "-0.0@ms0.00.0",
        "-0.0@ms",
        "-0.0@ms0.0.0",
        "-0.0@ms0",
        "-0.0@ms0.000",
        "-0.0@ms0.00",
        "-0.0@ms0.",
        "-0.0@ms00.0",
        "-0.0@ms.0",
        "-0.0.0@ms0.0",
        "-0@ms0.0",
        "-0.000@ms0.0",
        "-0.00@ms0.0",
        "-0.@ms0.0",
        "-00.0@ms0.0",
        "-.0@ms0.0",
        "--0.0@ms0.0",
        "0.0@ms0.0",
        "0@vs",
        "0@s",
        "0@ms",
        "-0.0@vs",
        "-0.0@s",
        "-0.0@ms0.0"
      ]
    },
    {
      "regex": "(\\d+)/(\\d+)/(\\d+)(?::\\+(\\d+)/\\+\\4)?\\Z",
      "exceptionStackTrace": null,
      "matches": [
        "0/0/0:+0/+0:+0/+0",
        "0/0/0:+00/+0",
        "0/0/0:+/+0",
        "0/0/00:+0/+0",
        "0/0/:+0/+0",
        "0/00/0:+0/+0",
        "0//0:+0/+0",
        "00/0/0:+0/+0",
        "/0/0:+0/+0",
        "0/0/0",
        "0/0/0:+0/+0"
      ]
    },
    {
      "regex": "^TER {3}.*",
      "exceptionStackTrace": null,
      "matches": [
        "TER   eVil",
        "TER   EVIL",
        "TER   ev_il",
        "TER   ev il",
        "TER   ev4il",
        "TER   e",
        "TER    ",
        "TER   6",
        "TER   _",
        "TER    evil",
        "TER  evil",
        "TER   ",
        "TER   evil"
      ]
    },
    {
      "regex": "\\G\\/",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\G"
      },
      "matches": []
    },
    {
      "regex": "<entry.+?>(.+?)<\\/entry>",
      "exceptionStackTrace": null,
      "matches": [
        "<entryevil>></entry>",
        "<entryevil><</entry>",
        "<entryevil>/</entry>",
        "<entryevil>eVil</entry>",
        "<entryevil>EVIL</entry>",
        "<entryevil>ev_il</entry>",
        "<entryevil>ev il</entry>",
        "<entryevil>ev4il</entry>",
        "<entryevil>e</entry>",
        "<entryevil> </entry>",
        "<entryevil>6</entry>",
        "<entryevil>_</entry>",
        "<entryevil></entry>",
        "<entry>>evil</entry>",
        "<entry<>evil</entry>",
        "<entry/>evil</entry>",
        "<entryeVil>evil</entry>",
        "<entryEVIL>evil</entry>",
        "<entryev_il>evil</entry>",
        "<entryev il>evil</entry>",
        "<entryev4il>evil</entry>",
        "<entrye>evil</entry>",
        "<entry >evil</entry>",
        "<entry6>evil</entry>",
        "<entry_>evil</entry>",
        "<entry>evil</entry>",
        "<entryevil>evil</entry>"
      ]
    },
    {
      "regex": "^[a-z0-9\\-\\.\\_\\~\\:\\/\\?\\#\\[\\]\\@\\!\\$\\&'\\(\\)\\*\\+\\,\\;\\=\\%]+$",
      "exceptionStackTrace": null,
      "matches": [
        "~",
        "]",
        "[",
        "@",
        "?",
        "=",
        ";",
        ":",
        "/",
        ".",
        "-",
        ",",
        "+",
        "*",
        ")",
        "(",
        "'",
        "&",
        "%",
        "$",
        "#",
        "!",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "jquery-ui\\.min\\.css",
      "exceptionStackTrace": null,
      "matches": ["jquery-ui.min.css"]
    },
    { "regex": "^action=", "exceptionStackTrace": null, "matches": ["action="] },
    {
      "regex": ".*\\r?\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": "^\\s*form-data(?:\\s*;\\s*(?:name\\s*=\\s*\"([^\"]+)\"|filename\\s*=\\s*\"([^\"]+)\"))+\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        " form-data ; filename = \"=\" ",
        " form-data ; filename = \";\" ",
        " form-data ; filename = \"-\" ",
        " form-data ; filename = \"\"\" ",
        " form-data ; filename = \"eVil\" ",
        " form-data ; filename = \"EVIL\" ",
        " form-data ; filename = \"ev_il\" ",
        " form-data ; filename = \"ev il\" ",
        " form-data ; filename = \"ev4il\" ",
        " form-data ; filename = \"e\" ",
        " form-data ; filename = \" \" ",
        " form-data ; filename = \"6\" ",
        " form-data ; filename = \"_\" ",
        " form-data ; filename = \"\" ",
        " form-data ; filename =  \"evil\" ",
        " form-data ; filename =\"evil\" ",
        " form-data ; filename  = \"evil\" ",
        " form-data ; filename= \"evil\" ",
        " form-data ; name = \"evil\"  ",
        " form-data ; name = \"evil\"",
        " form-data ; name = \"evil\" ; name = \"evil\" ",
        " form-data ",
        " form-data ; name = \"=\" ",
        " form-data ; name = \";\" ",
        " form-data ; name = \"-\" ",
        " form-data ; name = \"\"\" ",
        " form-data ; name = \"eVil\" ",
        " form-data ; name = \"EVIL\" ",
        " form-data ; name = \"ev_il\" ",
        " form-data ; name = \"ev il\" ",
        " form-data ; name = \"ev4il\" ",
        " form-data ; name = \"e\" ",
        " form-data ; name = \" \" ",
        " form-data ; name = \"6\" ",
        " form-data ; name = \"_\" ",
        " form-data ; name = \"\" ",
        " form-data ; name =  \"evil\" ",
        " form-data ; name =\"evil\" ",
        " form-data ; name  = \"evil\" ",
        " form-data ; name= \"evil\" ",
        " form-data ;  name = \"evil\" ",
        " form-data ;name = \"evil\" ",
        " form-data  ; name = \"evil\" ",
        " form-data; name = \"evil\" ",
        "  form-data ; name = \"evil\" ",
        "form-data ; name = \"evil\" ",
        "form-data;filename=\"evil\"",
        "form-data;name=\"evil\"",
        " form-data ; filename = \"evil\" ",
        " form-data ; name = \"evil\" "
      ]
    },
    {
      "regex": "\\/doubles(\\.json)?",
      "exceptionStackTrace": null,
      "matches": ["/doubles.json.json", "/doubles", "/doubles.json"]
    },
    {
      "regex": "never seen",
      "exceptionStackTrace": null,
      "matches": ["never seen"]
    },
    {
      "regex": "^error_[0-9]+_[a-zA-Z0-9]+\\.tsk$",
      "exceptionStackTrace": null,
      "matches": [
        "error_0_eVil.tsk",
        "error_0_EVIL.tsk",
        "error_0_ev_il.tsk",
        "error_0_ev il.tsk",
        "error_0_ev4il.tsk",
        "error_0_e.tsk",
        "error_0_ .tsk",
        "error_0_6.tsk",
        "error_0__.tsk",
        "error_0_.tsk",
        "error_00_evil.tsk",
        "error__evil.tsk",
        "error_0_evil.tsk"
      ]
    },
    {
      "regex": "^\\-e(nhanced)?$",
      "exceptionStackTrace": null,
      "matches": ["-enhancednhanced", "-e", "-enhanced"]
    },
    {
      "regex": "(?<![<>])(<Y>m'<\\/Y>)(?![<>])",
      "exceptionStackTrace": null,
      "matches": ["<Y>m'</Y>"]
    },
    {
      "regex": "^`{3}([\\S]+)?\\s*\\n([\\s\\S]+?)\\n`{3}\\s*?$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "([a-z0-9_]+\\([^\\)]*\\))",
      "exceptionStackTrace": null,
      "matches": [
        "evil())",
        "evil(()",
        "evil(eVil)",
        "evil(EVIL)",
        "evil(ev_il)",
        "evil(ev il)",
        "evil(ev4il)",
        "evil(e)",
        "evil( )",
        "evil(6)",
        "evil(_)",
        ")(evil)",
        "((evil)",
        "eVil(evil)",
        "EVIL(evil)",
        "ev_il(evil)",
        "ev il(evil)",
        "ev4il(evil)",
        "e(evil)",
        " (evil)",
        "6(evil)",
        "_(evil)",
        "(evil)",
        "evil()",
        "evil(evil)"
      ]
    },
    {
      "regex": "1 matching item",
      "exceptionStackTrace": null,
      "matches": ["1 matching item"]
    },
    {
      "regex": "((\\d{2,5}):)?([^:@]+)(:(\\d{2,5}))?",
      "exceptionStackTrace": null,
      "matches": [
        "00:evil:00:00",
        "00:evil",
        "00:evil:000000",
        "00:evil:00000",
        "00:evil:0",
        "00:@:00",
        "00:::00",
        "00:eVil:00",
        "00:EVIL:00",
        "00:ev_il:00",
        "00:ev il:00",
        "00:ev4il:00",
        "00:e:00",
        "00: :00",
        "00:6:00",
        "00:_:00",
        "00::00",
        "00:00:evil:00",
        "evil:00",
        "000000:evil:00",
        "00000:evil:00",
        "0:evil:00",
        "evil",
        "00:evil:00"
      ]
    },
    {
      "regex": "\\bisArguments\\b",
      "exceptionStackTrace": null,
      "matches": ["isArguments"]
    },
    {
      "regex": "(.*?)(nosetest.*)",
      "exceptionStackTrace": null,
      "matches": [
        "evilnosetesteVil",
        "evilnosetestEVIL",
        "evilnosetestev_il",
        "evilnosetestev il",
        "evilnosetestev4il",
        "evilnoseteste",
        "evilnosetest ",
        "evilnosetest6",
        "evilnosetest_",
        "evilnosetest",
        "eVilnosetestevil",
        "EVILnosetestevil",
        "ev_ilnosetestevil",
        "ev ilnosetestevil",
        "ev4ilnosetestevil",
        "enosetestevil",
        " nosetestevil",
        "6nosetestevil",
        "_nosetestevil",
        "nosetestevil",
        "nosetest",
        "evilnosetestevil"
      ]
    },
    {
      "regex": "Function foo missing in provided namespace",
      "exceptionStackTrace": null,
      "matches": ["Function foo missing in provided namespace"]
    },
    {
      "regex": "\\/\\*!?(?:@preserve)?[ \\t]*(?:\\r\\n|\\n)([\\s\\S]*?)(?:\\r\\n|\\n)[ \\t]*\\*\\/",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "Only argument should be an integer",
      "exceptionStackTrace": null,
      "matches": ["Only argument should be an integer"]
    },
    {
      "regex": "^Authorization: Basic YWRtaW46YWRtaW4=",
      "exceptionStackTrace": null,
      "matches": ["Authorization: Basic YWRtaW46YWRtaW4="]
    },
    {
      "regex": "\\s+\\([^)]+\\)$",
      "exceptionStackTrace": null,
      "matches": [
        " ())",
        " (()",
        " (eVil)",
        " (EVIL)",
        " (ev_il)",
        " (ev il)",
        " (ev4il)",
        " (e)",
        " ( )",
        " (6)",
        " (_)",
        " ()",
        "  (evil)",
        "(evil)",
        " (evil)"
      ]
    },
    {
      "regex": "`switch_to_window` is not supposed to be invoked from",
      "exceptionStackTrace": null,
      "matches": ["`switch_to_window` is not supposed to be invoked from"]
    },
    {
      "regex": "\u672c\u9801\u4e3b\u984c: (.+)\\n?",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "Update expression cannot have an undefined field \"boom\"\\.",
      "exceptionStackTrace": null,
      "matches": ["Update expression cannot have an undefined field \"boom\"."]
    },
    {
      "regex": "(\\^#[_a-zA-Z0-9]+)",
      "exceptionStackTrace": null,
      "matches": [
        "^#^",
        "^##",
        "^#eVil",
        "^#EVIL",
        "^#ev_il",
        "^#ev il",
        "^#ev4il",
        "^#e",
        "^# ",
        "^#6",
        "^#_",
        "^#",
        "^#evil"
      ]
    },
    {
      "regex": "^[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?(\\.[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?)*$",
      "exceptionStackTrace": null,
      "matches": [
        "AevilA.AevilA.AevilA",
        "AevilA",
        "AevilA.AevilAevilA",
        "AevilA.A",
        "AevilA.Aevila",
        "AevilA.Aevil0",
        "AevilA.AevilevilA",
        "AevilA.A.A",
        "AevilA.A-A",
        "AevilA.AeVilA",
        "AevilA.AEVILA",
        "AevilA.Aev_ilA",
        "AevilA.Aev ilA",
        "AevilA.Aev4ilA",
        "AevilA.AeA",
        "AevilA.A A",
        "AevilA.A6A",
        "AevilA.A_A",
        "AevilA.AA",
        "AevilA.aevilA",
        "AevilAevilA.AevilA",
        "A.AevilA",
        "Aevila.AevilA",
        "Aevil0.AevilA",
        "AevilevilA.AevilA",
        "A.A.AevilA",
        "A-A.AevilA",
        "AeVilA.AevilA",
        "AEVILA.AevilA",
        "Aev_ilA.AevilA",
        "Aev ilA.AevilA",
        "Aev4ilA.AevilA",
        "AeA.AevilA",
        "A A.AevilA",
        "A6A.AevilA",
        "A_A.AevilA",
        "AA.AevilA",
        "aevilA.AevilA",
        "A",
        "AevilA.AevilA"
      ]
    },
    {
      "regex": "^\\s*(select|show)",
      "exceptionStackTrace": null,
      "matches": ["  select", "show", "select", " show", " select"]
    },
    { "regex": "\\AALTER\\b", "exceptionStackTrace": null, "matches": ["ALTER"] },
    {
      "regex": "^(<[^>]+(?: [^>]*)?>)",
      "exceptionStackTrace": null,
      "matches": [
        "<evil evil evil>",
        "<evil >>",
        "<evil <>",
        "<evil eVil>",
        "<evil EVIL>",
        "<evil ev_il>",
        "<evil ev il>",
        "<evil ev4il>",
        "<evil e>",
        "<evil  >",
        "<evil 6>",
        "<evil _>",
        "<evil >",
        "<> evil>",
        "<< evil>",
        "<eVil evil>",
        "<EVIL evil>",
        "<ev_il evil>",
        "<ev il evil>",
        "<ev4il evil>",
        "<e evil>",
        "<  evil>",
        "<6 evil>",
        "<_ evil>",
        "< evil>",
        "<evil>",
        "<evil evil>"
      ]
    },
    {
      "regex": "(\\w+)_generator.rb$",
      "exceptionStackTrace": null,
      "matches": [
        "evil_generator_rb",
        "evil_generatorArb",
        "evil_generator0rb",
        "evil_generator rb",
        "eVil_generatorarb",
        "EVIL_generatorarb",
        "ev_il_generatorarb",
        "ev il_generatorarb",
        "ev4il_generatorarb",
        "e_generatorarb",
        " _generatorarb",
        "6_generatorarb",
        "__generatorarb",
        "_generatorarb",
        "evil_generatorarb"
      ]
    },
    {
      "regex": "<widget[^>]*\\sid=([\"'])((?:(?!\\1|\\s).)+)",
      "exceptionStackTrace": null,
      "matches": [
        "<widgetevil id='aa",
        "<widgetevil id='",
        "<widgetevil id='A",
        "<widgetevil id='>",
        "<widgetevil id='=",
        "<widgetevil id='<",
        "<widgetevil id='0",
        "<widgetevil id=''",
        "<widgetevil id='\"",
        "<widgetevil id=' ",
        "<widgetevil id=\"a",
        "<widget> id='a",
        "<widget= id='a",
        "<widget< id='a",
        "<widget' id='a",
        "<widget\" id='a",
        "<widgeteVil id='a",
        "<widgetEVIL id='a",
        "<widgetev_il id='a",
        "<widgetev il id='a",
        "<widgetev4il id='a",
        "<widgete id='a",
        "<widget  id='a",
        "<widget6 id='a",
        "<widget_ id='a",
        "<widget id='a",
        "<widgetevil id='a"
      ]
    },
    { "regex": "\\bb", "exceptionStackTrace": null, "matches": ["b"] },
    {
      "regex": "EOS.*dictionary value",
      "exceptionStackTrace": null,
      "matches": [
        "EOSeVildictionary value",
        "EOSEVILdictionary value",
        "EOSev_ildictionary value",
        "EOSev ildictionary value",
        "EOSev4ildictionary value",
        "EOSedictionary value",
        "EOS dictionary value",
        "EOS6dictionary value",
        "EOS_dictionary value",
        "EOSdictionary value",
        "EOSevildictionary value"
      ]
    },
    {
      "regex": "\\]\\]>\\s*\\Z",
      "exceptionStackTrace": null,
      "matches": ["]]>  ", "]]>", "]]> "]
    },
    {
      "regex": "\\Aapplication/json($|;)",
      "exceptionStackTrace": null,
      "matches": ["application/json;", "application/json"]
    },
    {
      "regex": "^-?join\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "^\\{\\{~?#",
      "exceptionStackTrace": null,
      "matches": ["{{~~#", "{{#", "{{~#"]
    },
    {
      "regex": "\\A(?:LOCATE)",
      "exceptionStackTrace": null,
      "matches": ["LOCATE"]
    },
    { "regex": "tr>\n  <", "exceptionStackTrace": null, "matches": ["tr>\n  <"] },
    {
      "regex": "\\((\\d+), (\\d+)\\)",
      "exceptionStackTrace": null,
      "matches": ["(0, 00)", "(0, )", "(00, 0)", "(, 0)", "(0, 0)"]
    },
    {
      "regex": "(^|[^%])(\\d+)( |\u00a0)?(C|F)([\\W \\.,:!\\?\"\\]\\)]|$)",
      "exceptionStackTrace": null,
      "matches": [
        "]0 C)",
        "A0 C)",
        "?0 C)",
        ":0 C)",
        ".0 C)",
        ",0 C)",
        ")0 C)",
        "%0 C)",
        "\"0 C)",
        "!0 C)",
        " 0 C)",
        "0 Ca",
        "0 C_",
        "0 C]",
        "0 CA",
        "0 C?",
        "0 C:",
        "0 C0",
        "0 C.",
        "0 C,",
        "0 C%",
        "0 C\"",
        "0 C!",
        "0 C ",
        "0  C)",
        "00 C)",
        " C)",
        "a0C)",
        "0F)",
        "0C",
        "0C)",
        "a0 C)",
        "0\u00a0C)",
        "0 F)",
        "0 C",
        "0 C)"
      ]
    },
    {
      "regex": "\\b(?<_1>version|return|with|invariant|body|scope|in|out|inout|asm|mixin|function|delegate)\\b",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<_"
      },
      "matches": []
    },
    {
      "regex": "(\\.(t?(ar|gz|bz2?|xz)|zip))+$",
      "exceptionStackTrace": null,
      "matches": [
        ".tbz22",
        ".tbz",
        ".tar.tar",
        "",
        ".ttar",
        ".xz",
        ".bz",
        ".gz",
        ".ar",
        ".zip",
        ".txz",
        ".tbz2",
        ".tgz",
        ".tar"
      ]
    },
    { "regex": "pcm", "exceptionStackTrace": null, "matches": ["pcm"] },
    {
      "regex": "<a href=\"/s/${sid}/\\d+/[-\\w]+\">.*?<div\\s*class='[-\\w\\s]+'>([^<]+)<div",
      "exceptionStackTrace": null,
      "matches": [
        "<a href=\"/s/{sid}/0/evil\">evil<div class='evil'>}<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='evil'>{<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='evil'>><div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='evil'>=<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='evil'><<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='evil'>/<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='evil'>-<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='evil'>'<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='evil'>\"<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='evil'>eVil<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='evil'>EVIL<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='evil'>ev_il<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='evil'>ev il<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='evil'>ev4il<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='evil'>e<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='evil'> <div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='evil'>6<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='evil'>_<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='evil'><div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='}'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='{'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='>'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='='>evil<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='<'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='/'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='-'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='''>evil<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='\"'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='eVil'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='EVIL'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='ev_il'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='ev il'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='ev4il'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='e'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class=' '>evil<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='6'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='_'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class=''>evil<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div  class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">evil<divclass='evil'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">}<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">{<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">><div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">=<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/evil\"><<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">/<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">-<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">'<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">\"<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">eVil<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">EVIL<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">ev_il<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">ev il<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">ev4il<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">e<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/evil\"> <div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">6<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">_<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/evil\"><div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/}\">evil<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/{\">evil<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/>\">evil<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/=\">evil<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/<\">evil<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0//\">evil<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/-\">evil<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/'\">evil<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/\"\">evil<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/eVil\">evil<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/EVIL\">evil<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/ev_il\">evil<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/ev il\">evil<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/ev4il\">evil<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/e\">evil<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/ \">evil<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/6\">evil<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/_\">evil<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/\">evil<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/00/evil\">evil<div class='evil'>evil<div",
        "<a href=\"/s/{sid}//evil\">evil<div class='evil'>evil<div",
        "<a href=\"/s/{sid}/0/evil\"><divclass='evil'>evil<div",
        "<a href=\"/s/{sid}/0/evil\">evil<div class='evil'>evil<div"
      ]
    },
    {
      "regex": "^tty[A-Za-z0-9]+$",
      "exceptionStackTrace": null,
      "matches": [
        "ttyeVil",
        "ttyEVIL",
        "ttyev_il",
        "ttyev il",
        "ttyev4il",
        "ttye",
        "tty ",
        "tty6",
        "tty_",
        "tty",
        "ttyevil"
      ]
    },
    {
      "regex": "[:-]?no_nasty_warnings",
      "exceptionStackTrace": null,
      "matches": [
        "--no_nasty_warnings",
        ":no_nasty_warnings",
        "no_nasty_warnings",
        "-no_nasty_warnings"
      ]
    },
    {
      "regex": "\\/\\*\\*((?!\\*\\/).)*?language file for GeSHi\\.((?!\\*\\/).)*?\\*\\/",
      "exceptionStackTrace": null,
      "matches": [
        "/**alanguage file for GeSHi.aa*/",
        "/**alanguage file for GeSHi.*/",
        "/**alanguage file for GeSHi.A*/",
        "/**alanguage file for GeSHi.0*/",
        "/**alanguage file for GeSHi./*/",
        "/**alanguage file for GeSHi..*/",
        "/**alanguage file for GeSHi.**/",
        "/**alanguage file for GeSHi. */",
        "/**aalanguage file for GeSHi.a*/",
        "/**language file for GeSHi.a*/",
        "/**Alanguage file for GeSHi.a*/",
        "/**0language file for GeSHi.a*/",
        "/**/language file for GeSHi.a*/",
        "/**.language file for GeSHi.a*/",
        "/***language file for GeSHi.a*/",
        "/** language file for GeSHi.a*/",
        "/**language file for GeSHi.*/",
        "/**alanguage file for GeSHi.a*/"
      ]
    },
    {
      "regex": "\\.(?:tar\\.|t)bz2$",
      "exceptionStackTrace": null,
      "matches": [".tbz2", ".tar.bz2"]
    },
    {
      "regex": "^(BLOSUM|PAM)\\d\\d$",
      "exceptionStackTrace": null,
      "matches": ["PAM00", "BLOSUM00"]
    },
    { "regex": ":blank", "exceptionStackTrace": null, "matches": [":blank"] },
    {
      "regex": "\\[X\\] bear(,|\\s|on |in )+(January|February|March|April|May|June|July|August|September|October|November|December){0,1}[,\\s\\d]* (to|in|at) \\[Y\\] \\[(\\d)*-(\\w*)-(\\d)*.*\\d+-(\\w+)-\\d+\\]",
      "exceptionStackTrace": null,
      "matches": [
        "[X] bear,January, to [Y] [0-evil-0evil0-evil-00]",
        "[X] bear,January, to [Y] [0-evil-0evil0-evil-]",
        "[X] bear,January, to [Y] [0-evil-0evil0-eVil-0]",
        "[X] bear,January, to [Y] [0-evil-0evil0-EVIL-0]",
        "[X] bear,January, to [Y] [0-evil-0evil0-ev_il-0]",
        "[X] bear,January, to [Y] [0-evil-0evil0-ev il-0]",
        "[X] bear,January, to [Y] [0-evil-0evil0-ev4il-0]",
        "[X] bear,January, to [Y] [0-evil-0evil0-e-0]",
        "[X] bear,January, to [Y] [0-evil-0evil0- -0]",
        "[X] bear,January, to [Y] [0-evil-0evil0-6-0]",
        "[X] bear,January, to [Y] [0-evil-0evil0-_-0]",
        "[X] bear,January, to [Y] [0-evil-0evil0--0]",
        "[X] bear,January, to [Y] [0-evil-0evil00-evil-0]",
        "[X] bear,January, to [Y] [0-evil-0evil-evil-0]",
        "[X] bear,January, to [Y] [0-evil-0]0-evil-0]",
        "[X] bear,January, to [Y] [0-evil-0[0-evil-0]",
        "[X] bear,January, to [Y] [0-evil-0-0-evil-0]",
        "[X] bear,January, to [Y] [0-evil-0,0-evil-0]",
        "[X] bear,January, to [Y] [0-evil-0eVil0-evil-0]",
        "[X] bear,January, to [Y] [0-evil-0EVIL0-evil-0]",
        "[X] bear,January, to [Y] [0-evil-0ev_il0-evil-0]",
        "[X] bear,January, to [Y] [0-evil-0ev il0-evil-0]",
        "[X] bear,January, to [Y] [0-evil-0ev4il0-evil-0]",
        "[X] bear,January, to [Y] [0-evil-0e0-evil-0]",
        "[X] bear,January, to [Y] [0-evil-0 0-evil-0]",
        "[X] bear,January, to [Y] [0-evil-060-evil-0]",
        "[X] bear,January, to [Y] [0-evil-0_0-evil-0]",
        "[X] bear,January, to [Y] [0-evil-00-evil-0]",
        "[X] bear,January, to [Y] [0-evil-00evil0-evil-0]",
        "[X] bear,January, to [Y] [0-evil-evil0-evil-0]",
        "[X] bear,January, to [Y] [0-eVil-0evil0-evil-0]",
        "[X] bear,January, to [Y] [0-EVIL-0evil0-evil-0]",
        "[X] bear,January, to [Y] [0-ev_il-0evil0-evil-0]",
        "[X] bear,January, to [Y] [0-ev il-0evil0-evil-0]",
        "[X] bear,January, to [Y] [0-ev4il-0evil0-evil-0]",
        "[X] bear,January, to [Y] [0-e-0evil0-evil-0]",
        "[X] bear,January, to [Y] [0- -0evil0-evil-0]",
        "[X] bear,January, to [Y] [0-6-0evil0-evil-0]",
        "[X] bear,January, to [Y] [0-_-0evil0-evil-0]",
        "[X] bear,January, to [Y] [0--0evil0-evil-0]",
        "[X] bear,January, to [Y] [00-evil-0evil0-evil-0]",
        "[X] bear,January, to [Y] [-evil-0evil0-evil-0]",
        "[X] bear,January,, to [Y] [0-evil-0evil0-evil-0]",
        "[X] bear,January to [Y] [0-evil-0evil0-evil-0]",
        "[X] bear,January0 to [Y] [0-evil-0evil0-evil-0]",
        "[X] bear,January  to [Y] [0-evil-0evil0-evil-0]",
        "[X] bear,JanuaryJanuary, to [Y] [0-evil-0evil0-evil-0]",
        "[X] bear,, to [Y] [0-evil-0evil0-evil-0]",
        "[X] bear,,January, to [Y] [0-evil-0evil0-evil-0]",
        "[X] bearJanuary, to [Y] [0-evil-0evil0-evil-0]",
        "[X] bearin  to [Y] [--0-evil-0]",
        "[X] bearon  to [Y] [--0-evil-0]",
        "[X] bear  to [Y] [--0-evil-0]",
        "[X] bear, at [Y] [--0-evil-0]",
        "[X] bear, in [Y] [--0-evil-0]",
        "[X] bear, to [Y] [--0-evil-0]",
        "[X] bearin January, to [Y] [0-evil-0evil0-evil-0]",
        "[X] bearon January, to [Y] [0-evil-0evil0-evil-0]",
        "[X] bear January, to [Y] [0-evil-0evil0-evil-0]",
        "[X] bear,December, to [Y] [0-evil-0evil0-evil-0]",
        "[X] bear,November, to [Y] [0-evil-0evil0-evil-0]",
        "[X] bear,October, to [Y] [0-evil-0evil0-evil-0]",
        "[X] bear,September, to [Y] [0-evil-0evil0-evil-0]",
        "[X] bear,August, to [Y] [0-evil-0evil0-evil-0]",
        "[X] bear,July, to [Y] [0-evil-0evil0-evil-0]",
        "[X] bear,June, to [Y] [0-evil-0evil0-evil-0]",
        "[X] bear,May, to [Y] [0-evil-0evil0-evil-0]",
        "[X] bear,April, to [Y] [0-evil-0evil0-evil-0]",
        "[X] bear,March, to [Y] [0-evil-0evil0-evil-0]",
        "[X] bear,February, to [Y] [0-evil-0evil0-evil-0]",
        "[X] bear,January, at [Y] [0-evil-0evil0-evil-0]",
        "[X] bear,January, in [Y] [0-evil-0evil0-evil-0]",
        "[X] bear,January, to [Y] [0-evil-0evil0-evil-0]"
      ]
    },
    {
      "regex": "^[0-9]+([\\\\.]+|[0-9]+)*$",
      "exceptionStackTrace": null,
      "matches": ["000", "0..", "0\\", "00.", ".", "0", "00", "0."]
    },
    {
      "regex": "Firefox|Fennec",
      "exceptionStackTrace": null,
      "matches": ["Fennec", "Firefox"]
    },
    {
      "regex": "^(?:(?:on|allow)[a-z]+|async|autofocus|autoplay|capture|checked|controls|default|defer|disabled|formnovalidate|hidden|ismap|itemscope|loop|multiple|muted|nomodule|novalidate|open|playsinline|readonly|required|reversed|selected|truespeed|typemustmatch|usecache)$",
      "exceptionStackTrace": null,
      "matches": [
        "oneVil",
        "onEVIL",
        "onev_il",
        "onev il",
        "onev4il",
        "one",
        "on ",
        "on6",
        "on_",
        "on",
        "usecache",
        "typemustmatch",
        "truespeed",
        "selected",
        "reversed",
        "required",
        "readonly",
        "playsinline",
        "open",
        "novalidate",
        "nomodule",
        "muted",
        "multiple",
        "loop",
        "itemscope",
        "ismap",
        "hidden",
        "formnovalidate",
        "disabled",
        "defer",
        "default",
        "controls",
        "checked",
        "capture",
        "autoplay",
        "autofocus",
        "async",
        "allowevil",
        "onevil"
      ]
    },
    {
      "regex": "^\\s*(.*?)\\((.*)\\)\\s*",
      "exceptionStackTrace": null,
      "matches": [
        " evil(evil)  ",
        " evil(evil)",
        " evil()) ",
        " evil(() ",
        " evil(eVil) ",
        " evil(EVIL) ",
        " evil(ev_il) ",
        " evil(ev il) ",
        " evil(ev4il) ",
        " evil(e) ",
        " evil( ) ",
        " evil(6) ",
        " evil(_) ",
        " evil() ",
        " )(evil) ",
        " ((evil) ",
        " eVil(evil) ",
        " EVIL(evil) ",
        " ev_il(evil) ",
        " ev il(evil) ",
        " ev4il(evil) ",
        " e(evil) ",
        "  (evil) ",
        " 6(evil) ",
        " _(evil) ",
        " (evil) ",
        "  evil(evil) ",
        "evil(evil) ",
        "()",
        " evil(evil) "
      ]
    },
    {
      "regex": "(?:<[\\/A-DF-Z][^>]*>)+([Uu]m)<\\/[A-DF-Z]> (?:<[\\/A-DF-Z][^>]*>)+(an)<\\/[A-DF-Z]> (?:<[\\/A-DF-Z][^>]*>)+(dtaca)<\\/[A-DF-Z]>",
      "exceptionStackTrace": null,
      "matches": [
        "</evil>um</F> </evil>an</F> </evil>dtaca</E>",
        "</evil>um</F> </evil>an</F> </evil>dtaca</A>",
        "</evil>um</F> </evil>an</F> </evil></evil>dtaca</F>",
        "</evil>um</F> </evil>an</F> dtaca</F>",
        "</evil>um</F> </evil>an</F> </>>dtaca</F>",
        "</evil>um</F> </evil>an</F> </<>dtaca</F>",
        "</evil>um</F> </evil>an</F> <//>dtaca</F>",
        "</evil>um</F> </evil>an</F> </eVil>dtaca</F>",
        "</evil>um</F> </evil>an</F> </EVIL>dtaca</F>",
        "</evil>um</F> </evil>an</F> </ev_il>dtaca</F>",
        "</evil>um</F> </evil>an</F> </ev il>dtaca</F>",
        "</evil>um</F> </evil>an</F> </ev4il>dtaca</F>",
        "</evil>um</F> </evil>an</F> </e>dtaca</F>",
        "</evil>um</F> </evil>an</F> </ >dtaca</F>",
        "</evil>um</F> </evil>an</F> </6>dtaca</F>",
        "</evil>um</F> </evil>an</F> </_>dtaca</F>",
        "</evil>um</F> </evil>an</F> </>dtaca</F>",
        "</evil>um</F> </evil>an</F> <Fevil>dtaca</F>",
        "</evil>um</F> </evil>an</F> <Eevil>dtaca</F>",
        "</evil>um</F> </evil>an</F> <Aevil>dtaca</F>",
        "</evil>um</F> </evil>an</E> </evil>dtaca</F>",
        "</evil>um</F> </evil>an</A> </evil>dtaca</F>",
        "</evil>um</F> </evil></evil>an</F> </evil>dtaca</F>",
        "</evil>um</F> an</F> </evil>dtaca</F>",
        "</evil>um</F> </>>an</F> </evil>dtaca</F>",
        "</evil>um</F> </<>an</F> </evil>dtaca</F>",
        "</evil>um</F> <//>an</F> </evil>dtaca</F>",
        "</evil>um</F> </eVil>an</F> </evil>dtaca</F>",
        "</evil>um</F> </EVIL>an</F> </evil>dtaca</F>",
        "</evil>um</F> </ev_il>an</F> </evil>dtaca</F>",
        "</evil>um</F> </ev il>an</F> </evil>dtaca</F>",
        "</evil>um</F> </ev4il>an</F> </evil>dtaca</F>",
        "</evil>um</F> </e>an</F> </evil>dtaca</F>",
        "</evil>um</F> </ >an</F> </evil>dtaca</F>",
        "</evil>um</F> </6>an</F> </evil>dtaca</F>",
        "</evil>um</F> </_>an</F> </evil>dtaca</F>",
        "</evil>um</F> </>an</F> </evil>dtaca</F>",
        "</evil>um</F> <Fevil>an</F> </evil>dtaca</F>",
        "</evil>um</F> <Eevil>an</F> </evil>dtaca</F>",
        "</evil>um</F> <Aevil>an</F> </evil>dtaca</F>",
        "</evil>um</E> </evil>an</F> </evil>dtaca</F>",
        "</evil>um</A> </evil>an</F> </evil>dtaca</F>",
        "</evil>am</F> </evil>an</F> </evil>dtaca</F>",
        "</evil>Um</F> </evil>an</F> </evil>dtaca</F>",
        "</evil>Am</F> </evil>an</F> </evil>dtaca</F>",
        "</evil></evil>um</F> </evil>an</F> </evil>dtaca</F>",
        "um</F> </evil>an</F> </evil>dtaca</F>",
        "</>>um</F> </evil>an</F> </evil>dtaca</F>",
        "</<>um</F> </evil>an</F> </evil>dtaca</F>",
        "<//>um</F> </evil>an</F> </evil>dtaca</F>",
        "</eVil>um</F> </evil>an</F> </evil>dtaca</F>",
        "</EVIL>um</F> </evil>an</F> </evil>dtaca</F>",
        "</ev_il>um</F> </evil>an</F> </evil>dtaca</F>",
        "</ev il>um</F> </evil>an</F> </evil>dtaca</F>",
        "</ev4il>um</F> </evil>an</F> </evil>dtaca</F>",
        "</e>um</F> </evil>an</F> </evil>dtaca</F>",
        "</ >um</F> </evil>an</F> </evil>dtaca</F>",
        "</6>um</F> </evil>an</F> </evil>dtaca</F>",
        "</_>um</F> </evil>an</F> </evil>dtaca</F>",
        "</>um</F> </evil>an</F> </evil>dtaca</F>",
        "<Fevil>um</F> </evil>an</F> </evil>dtaca</F>",
        "<Eevil>um</F> </evil>an</F> </evil>dtaca</F>",
        "<Aevil>um</F> </evil>an</F> </evil>dtaca</F>",
        "</>um</F> </>an</F> </>dtaca</F>",
        "</evil>um</F> </evil>an</F> </evil>dtaca</F>"
      ]
    },
    {
      "regex": "^projectDir\\/exportDir",
      "exceptionStackTrace": null,
      "matches": ["projectDir/exportDir"]
    },
    {
      "regex": "^.*<main",
      "exceptionStackTrace": null,
      "matches": [
        "<<main",
        "eVil<main",
        "EVIL<main",
        "ev_il<main",
        "ev il<main",
        "ev4il<main",
        "e<main",
        " <main",
        "6<main",
        "_<main",
        "<main",
        "evil<main"
      ]
    },
    {
      "regex": "\\\\cyrchar\\\\cyrchvcrs ",
      "exceptionStackTrace": null,
      "matches": ["\\cyrchar\\cyrchvcrs "]
    },
    {
      "regex": "[.\\/\\\\()\\\"'-:,.;<>~!@#$%^&*|+=\\[\\]{}`~?]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (bad range): Invalid range: '-:"
      },
      "matches": []
    },
    {
      "regex": "(([[:alnum:]]+(-?\\w*)*('?\\w+)?) ?){1,}",
      "exceptionStackTrace": null,
      "matches": [
        ":]-evil'evil :]-evil'evil ",
        "",
        ":]-evil'evil  ",
        ":]-evil'evil",
        ":]-evil'evil'evil ",
        ":]-evil ",
        ":]-evil'eVil ",
        ":]-evil'EVIL ",
        ":]-evil'ev_il ",
        ":]-evil'ev il ",
        ":]-evil'ev4il ",
        ":]-evil'e ",
        ":]-evil'  ",
        ":]-evil'6 ",
        ":]-evil'_ ",
        ":]-evil' ",
        ":]-evil''evil ",
        ":]-evilevil ",
        ":]-evil-evil'evil ",
        ":]'evil ",
        ":]-eVil'evil ",
        ":]-EVIL'evil ",
        ":]-ev_il'evil ",
        ":]-ev il'evil ",
        ":]-ev4il'evil ",
        ":]-e'evil ",
        ":]- 'evil ",
        ":]-6'evil ",
        ":]-_'evil ",
        ":]-'evil ",
        ":]--evil'evil ",
        ":]evil'evil ",
        ":]]-evil'evil ",
        ":-evil'evil ",
        "u]-evil'evil ",
        "n]-evil'evil ",
        "m]-evil'evil ",
        "l]-evil'evil ",
        "b]-evil'evil ",
        "a]-evil'evil ",
        "[]-evil'evil ",
        ":]",
        ":]-evil'evil "
      ]
    },
    {
      "regex": "\\ALibreOffice \\d\\.\\d\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "Archives</a></h3>(.*)<h3><a id=\"mailinglists\"",
      "exceptionStackTrace": null,
      "matches": [
        "Archives</a></h3>><h3><a id=\"mailinglists\"",
        "Archives</a></h3>=<h3><a id=\"mailinglists\"",
        "Archives</a></h3><<h3><a id=\"mailinglists\"",
        "Archives</a></h3>/<h3><a id=\"mailinglists\"",
        "Archives</a></h3>\"<h3><a id=\"mailinglists\"",
        "Archives</a></h3>eVil<h3><a id=\"mailinglists\"",
        "Archives</a></h3>EVIL<h3><a id=\"mailinglists\"",
        "Archives</a></h3>ev_il<h3><a id=\"mailinglists\"",
        "Archives</a></h3>ev il<h3><a id=\"mailinglists\"",
        "Archives</a></h3>ev4il<h3><a id=\"mailinglists\"",
        "Archives</a></h3>e<h3><a id=\"mailinglists\"",
        "Archives</a></h3> <h3><a id=\"mailinglists\"",
        "Archives</a></h3>6<h3><a id=\"mailinglists\"",
        "Archives</a></h3>_<h3><a id=\"mailinglists\"",
        "Archives</a></h3><h3><a id=\"mailinglists\"",
        "Archives</a></h3>evil<h3><a id=\"mailinglists\""
      ]
    },
    {
      "regex": "([0-9a-f]{5,}|:{3,}|[^:]:$|^:[^:]|\\/$)",
      "exceptionStackTrace": null,
      "matches": [
        ":A",
        ":0",
        ":/",
        ": ",
        "A:",
        "0:",
        "/:",
        " :",
        "::",
        "aaaa",
        "gaaaa",
        "0aaaa",
        "/",
        ":a",
        "a:",
        ":::",
        "aaaaa"
      ]
    },
    { "regex": "(ide)$", "exceptionStackTrace": null, "matches": ["ide"] },
    {
      "regex": "xmlsoap\\.org",
      "exceptionStackTrace": null,
      "matches": ["xmlsoap.org"]
    },
    {
      "regex": "start transaction",
      "exceptionStackTrace": null,
      "matches": ["start transaction"]
    },
    {
      "regex": "^the client sets mode \"(.*?)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "the client sets mode \"\"\"",
        "the client sets mode \"eVil\"",
        "the client sets mode \"EVIL\"",
        "the client sets mode \"ev_il\"",
        "the client sets mode \"ev il\"",
        "the client sets mode \"ev4il\"",
        "the client sets mode \"e\"",
        "the client sets mode \" \"",
        "the client sets mode \"6\"",
        "the client sets mode \"_\"",
        "the client sets mode \"\"",
        "the client sets mode \"evil\""
      ]
    },
    {
      "regex": "[^k]$",
      "exceptionStackTrace": null,
      "matches": ["k", "_", "A", "0", " ", "a"]
    },
    {
      "regex": "\\bajax=true\\b",
      "exceptionStackTrace": null,
      "matches": ["ajax=true"]
    },
    {
      "regex": "\\.controller\\(",
      "exceptionStackTrace": null,
      "matches": [".controller("]
    },
    {
      "regex": "foobar/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
      "exceptionStackTrace": null,
      "matches": [
        "foobar/00000000-0000-0000-0000-0000000000000",
        "foobar/00000000-0000-0000-0000-00000000000",
        "foobar/00000000-0000-0000-0000-g00000000000",
        "foobar/00000000-0000-0000-0000-a00000000000",
        "foobar/00000000-0000-0000-00000-000000000000",
        "foobar/00000000-0000-0000-000-000000000000",
        "foobar/00000000-0000-0000-g000-000000000000",
        "foobar/00000000-0000-0000-a000-000000000000",
        "foobar/00000000-0000-00000-0000-000000000000",
        "foobar/00000000-0000-000-0000-000000000000",
        "foobar/00000000-0000-g000-0000-000000000000",
        "foobar/00000000-0000-a000-0000-000000000000",
        "foobar/00000000-00000-0000-0000-000000000000",
        "foobar/00000000-000-0000-0000-000000000000",
        "foobar/00000000-g000-0000-0000-000000000000",
        "foobar/00000000-a000-0000-0000-000000000000",
        "foobar/000000000-0000-0000-0000-000000000000",
        "foobar/0000000-0000-0000-0000-000000000000",
        "foobar/g0000000-0000-0000-0000-000000000000",
        "foobar/a0000000-0000-0000-0000-000000000000",
        "foobar/00000000-0000-0000-0000-000000000000"
      ]
    },
    {
      "regex": "^VB\\.FORM$",
      "exceptionStackTrace": null,
      "matches": ["VB.FORM"]
    },
    {
      "regex": "\\s*([^;]+)",
      "exceptionStackTrace": null,
      "matches": [
        " ;",
        " eVil",
        " EVIL",
        " ev_il",
        " ev il",
        " ev4il",
        " e",
        "  ",
        " 6",
        " _",
        " ",
        "  evil",
        "evil",
        " evil"
      ]
    },
    {
      "regex": "(new)\\s+(\\w+(?:\\.\\w*)*)",
      "exceptionStackTrace": null,
      "matches": [
        "new evil.evil.evil",
        "new evil.eVil",
        "new evil.EVIL",
        "new evil.ev_il",
        "new evil.ev il",
        "new evil.ev4il",
        "new evil.e",
        "new evil. ",
        "new evil.6",
        "new evil._",
        "new evil.",
        "new eVil.evil",
        "new EVIL.evil",
        "new ev_il.evil",
        "new ev il.evil",
        "new ev4il.evil",
        "new e.evil",
        "new  .evil",
        "new 6.evil",
        "new _.evil",
        "new .evil",
        "new  evil.evil",
        "newevil.evil",
        "new evil",
        "new evil.evil"
      ]
    },
    {
      "regex": "^=encoding (.+)",
      "exceptionStackTrace": null,
      "matches": [
        "=encoding =",
        "=encoding eVil",
        "=encoding EVIL",
        "=encoding ev_il",
        "=encoding ev il",
        "=encoding ev4il",
        "=encoding e",
        "=encoding  ",
        "=encoding 6",
        "=encoding _",
        "=encoding ",
        "=encoding evil"
      ]
    },
    {
      "regex": "^(\\$\\w+\\s?\\=)|print|echo",
      "exceptionStackTrace": null,
      "matches": [
        "$evil  =",
        "$eVil =",
        "$EVIL =",
        "$ev_il =",
        "$ev il =",
        "$ev4il =",
        "$e =",
        "$  =",
        "$6 =",
        "$_ =",
        "$ =",
        "$evil=",
        "echo",
        "print",
        "$evil ="
      ]
    },
    {
      "regex": "(-- PREPEND ITEMS HERE --)",
      "exceptionStackTrace": null,
      "matches": ["-- PREPEND ITEMS HERE --"]
    },
    { "regex": "%r\\{", "exceptionStackTrace": null, "matches": ["%r{"] },
    {
      "regex": "<title>libraptor</title>",
      "exceptionStackTrace": null,
      "matches": ["<title>libraptor</title>"]
    },
    {
      "regex": "-d\\s+\\!\\s+([\\w\\:]+)",
      "exceptionStackTrace": null,
      "matches": [
        "-d ! :",
        "-d ! -",
        "-d ! !",
        "-d ! eVil",
        "-d ! EVIL",
        "-d ! ev_il",
        "-d ! ev il",
        "-d ! ev4il",
        "-d ! e",
        "-d !  ",
        "-d ! 6",
        "-d ! _",
        "-d ! ",
        "-d !  evil",
        "-d !evil",
        "-d  ! evil",
        "-d! evil",
        "-d ! evil"
      ]
    },
    {
      "regex": "^--(.+)",
      "exceptionStackTrace": null,
      "matches": [
        "---",
        "--eVil",
        "--EVIL",
        "--ev_il",
        "--ev il",
        "--ev4il",
        "--e",
        "-- ",
        "--6",
        "--_",
        "--",
        "--evil"
      ]
    },
    {
      "regex": "(!?):",
      "exceptionStackTrace": null,
      "matches": ["!!:", ":", "!:"]
    },
    {
      "regex": "^Javascript error: Script error\\.? on line 0$",
      "exceptionStackTrace": null,
      "matches": [
        "Javascript error: Script error.. on line 0",
        "Javascript error: Script error on line 0",
        "Javascript error: Script error. on line 0"
      ]
    },
    { "regex": "anomaly", "exceptionStackTrace": null, "matches": ["anomaly"] },
    {
      "regex": "\\G(.*?(\\n|\\z))",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\G"
      },
      "matches": []
    },
    { "regex": "\\\\AE", "exceptionStackTrace": null, "matches": ["\\AE"] },
    {
      "regex": "\\/FeatureServer\\/?$",
      "exceptionStackTrace": null,
      "matches": ["/FeatureServer//", "/FeatureServer", "/FeatureServer/"]
    },
    {
      "regex": "^\\Q$_[1]\\E(?:/|$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\Q"
      },
      "matches": []
    },
    {
      "regex": "hydro\\w*\\.arcgis\\.com",
      "exceptionStackTrace": null,
      "matches": [
        "hydroeVil.arcgis.com",
        "hydroEVIL.arcgis.com",
        "hydroev_il.arcgis.com",
        "hydroev il.arcgis.com",
        "hydroev4il.arcgis.com",
        "hydroe.arcgis.com",
        "hydro .arcgis.com",
        "hydro6.arcgis.com",
        "hydro_.arcgis.com",
        "hydro.arcgis.com",
        "hydroevil.arcgis.com"
      ]
    },
    {
      "regex": " {3}6 \\| - \\[ \\] New",
      "exceptionStackTrace": null,
      "matches": ["    6 | - [ ] New", "  6 | - [ ] New", "   6 | - [ ] New"]
    },
    {
      "regex": "ignorethis",
      "exceptionStackTrace": null,
      "matches": ["ignorethis"]
    },
    {
      "regex": "(^\\s*)?(?=<erl>)",
      "exceptionStackTrace": null,
      "matches": ["  ", "", " "]
    },
    { "regex": "^(fail)", "exceptionStackTrace": null, "matches": ["fail"] },
    {
      "regex": "hbbtv\\/\\d+\\.\\d+\\.\\d+\\s+\\([\\w\\s]*;\\s*(\\w[^;]*);([^;]*)",
      "exceptionStackTrace": null,
      "matches": [
        "hbbtv/0.0.0 (evil; aevil;;",
        "hbbtv/0.0.0 (evil; aevil;/",
        "hbbtv/0.0.0 (evil; aevil;.",
        "hbbtv/0.0.0 (evil; aevil;(",
        "hbbtv/0.0.0 (evil; aevil;eVil",
        "hbbtv/0.0.0 (evil; aevil;EVIL",
        "hbbtv/0.0.0 (evil; aevil;ev_il",
        "hbbtv/0.0.0 (evil; aevil;ev il",
        "hbbtv/0.0.0 (evil; aevil;ev4il",
        "hbbtv/0.0.0 (evil; aevil;e",
        "hbbtv/0.0.0 (evil; aevil; ",
        "hbbtv/0.0.0 (evil; aevil;6",
        "hbbtv/0.0.0 (evil; aevil;_",
        "hbbtv/0.0.0 (evil; aevil;",
        "hbbtv/0.0.0 (evil; a;;evil",
        "hbbtv/0.0.0 (evil; a/;evil",
        "hbbtv/0.0.0 (evil; a.;evil",
        "hbbtv/0.0.0 (evil; a(;evil",
        "hbbtv/0.0.0 (evil; aeVil;evil",
        "hbbtv/0.0.0 (evil; aEVIL;evil",
        "hbbtv/0.0.0 (evil; aev_il;evil",
        "hbbtv/0.0.0 (evil; aev il;evil",
        "hbbtv/0.0.0 (evil; aev4il;evil",
        "hbbtv/0.0.0 (evil; ae;evil",
        "hbbtv/0.0.0 (evil; a ;evil",
        "hbbtv/0.0.0 (evil; a6;evil",
        "hbbtv/0.0.0 (evil; a_;evil",
        "hbbtv/0.0.0 (evil; a;evil",
        "hbbtv/0.0.0 (evil; _evil;evil",
        "hbbtv/0.0.0 (evil; Aevil;evil",
        "hbbtv/0.0.0 (evil; 0evil;evil",
        "hbbtv/0.0.0 (evil;  aevil;evil",
        "hbbtv/0.0.0 (evil;aevil;evil",
        "hbbtv/0.0.0 (eVil; aevil;evil",
        "hbbtv/0.0.0 (EVIL; aevil;evil",
        "hbbtv/0.0.0 (ev_il; aevil;evil",
        "hbbtv/0.0.0 (ev il; aevil;evil",
        "hbbtv/0.0.0 (ev4il; aevil;evil",
        "hbbtv/0.0.0 (e; aevil;evil",
        "hbbtv/0.0.0 ( ; aevil;evil",
        "hbbtv/0.0.0 (6; aevil;evil",
        "hbbtv/0.0.0 (_; aevil;evil",
        "hbbtv/0.0.0 (; aevil;evil",
        "hbbtv/0.0.0  (evil; aevil;evil",
        "hbbtv/0.0.0(evil; aevil;evil",
        "hbbtv/0.0.00 (evil; aevil;evil",
        "hbbtv/0.0. (evil; aevil;evil",
        "hbbtv/0.00.0 (evil; aevil;evil",
        "hbbtv/0..0 (evil; aevil;evil",
        "hbbtv/00.0.0 (evil; aevil;evil",
        "hbbtv/.0.0 (evil; aevil;evil",
        "hbbtv/0.0.0 (;a;",
        "hbbtv/0.0.0 (evil; aevil;evil"
      ]
    },
    {
      "regex": "^(?:&lt;)?$s:[$uricCheat][$uric]*(?:&gt;)?$",
      "exceptionStackTrace": null,
      "matches": [
        "&lt;s:tc&gt;&gt;",
        "&lt;s:tc",
        "&lt;s:tcc&gt;",
        "&lt;s:t&gt;",
        "&lt;s:tu&gt;",
        "&lt;s:tr&gt;",
        "&lt;s:ti&gt;",
        "&lt;s:ta&gt;",
        "&lt;s:t$&gt;",
        "&lt;s:uc&gt;",
        "&lt;s:rc&gt;",
        "&lt;s:ic&gt;",
        "&lt;s:hc&gt;",
        "&lt;s:ec&gt;",
        "&lt;s:cc&gt;",
        "&lt;s:bc&gt;",
        "&lt;s:ac&gt;",
        "&lt;s:Cc&gt;",
        "&lt;s:Ac&gt;",
        "&lt;s:$c&gt;",
        "&lt;&lt;s:tc&gt;",
        "s:tc&gt;",
        "s:t",
        "&lt;s:tc&gt;"
      ]
    },
    { "regex": "^sam", "exceptionStackTrace": null, "matches": ["sam"] },
    {
      "regex": "\\| *$",
      "exceptionStackTrace": null,
      "matches": ["|  ", "|", "| "]
    },
    { "regex": "[([]", "exceptionStackTrace": null, "matches": ["(", "["] },
    {
      "regex": "^\\s+address 10\\.0\\.0\\.1\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        " address 10.0.0.1  ",
        "  address 10.0.0.1 ",
        "address 10.0.0.1 ",
        " address 10.0.0.1",
        " address 10.0.0.1 "
      ]
    },
    {
      "regex": "\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b",
      "exceptionStackTrace": null,
      "matches": [
        "GMT+0000+0000",
        "GMT+00000",
        "GMT+000",
        "GMT-0000",
        "AST",
        "ADT",
        "AAT",
        "PPT",
        "MPT",
        "EPT",
        "CPT",
        "BPT",
        "UTC",
        "GMT",
        "UTC+0000",
        "GMT+0000",
        "Atlantic Standard Time",
        "Eastern Standard Time",
        "Central Standard Time",
        "Mountain Standard Time",
        "Pacific Prevailing Time",
        "Pacific Daylight Time",
        "Pacific Standard Time",
        "APT"
      ]
    },
    {
      "regex": "(Generated by ).*Docutils.*",
      "exceptionStackTrace": null,
      "matches": [
        "Generated by evilDocutilseVil",
        "Generated by evilDocutilsEVIL",
        "Generated by evilDocutilsev_il",
        "Generated by evilDocutilsev il",
        "Generated by evilDocutilsev4il",
        "Generated by evilDocutilse",
        "Generated by evilDocutils ",
        "Generated by evilDocutils6",
        "Generated by evilDocutils_",
        "Generated by evilDocutils",
        "Generated by eVilDocutilsevil",
        "Generated by EVILDocutilsevil",
        "Generated by ev_ilDocutilsevil",
        "Generated by ev ilDocutilsevil",
        "Generated by ev4ilDocutilsevil",
        "Generated by eDocutilsevil",
        "Generated by  Docutilsevil",
        "Generated by 6Docutilsevil",
        "Generated by _Docutilsevil",
        "Generated by Docutilsevil",
        "Generated by Docutils",
        "Generated by evilDocutilsevil"
      ]
    },
    {
      "regex": "api_calls",
      "exceptionStackTrace": null,
      "matches": ["api_calls"]
    },
    {
      "regex": "[({\\[]",
      "exceptionStackTrace": null,
      "matches": ["{", "(", "["]
    },
    { "regex": "123", "exceptionStackTrace": null, "matches": ["123"] },
    {
      "regex": "\\.php(\\.dist)?$",
      "exceptionStackTrace": null,
      "matches": [".php.dist.dist", ".php", ".php.dist"]
    },
    {
      "regex": "^\\s*my\\s",
      "exceptionStackTrace": null,
      "matches": ["  my ", "my ", " my "]
    },
    {
      "regex": "pending spec TEST",
      "exceptionStackTrace": null,
      "matches": ["pending spec TEST"]
    },
    {
      "regex": "^strs(\\d+)?",
      "exceptionStackTrace": null,
      "matches": ["strs00", "strs", "strs0"]
    },
    {
      "regex": "^Log_ADBI_",
      "exceptionStackTrace": null,
      "matches": ["Log_ADBI_"]
    },
    {
      "regex": "\\A[^=]+=",
      "exceptionStackTrace": null,
      "matches": [
        "==",
        "eVil=",
        "EVIL=",
        "ev_il=",
        "ev il=",
        "ev4il=",
        "e=",
        " =",
        "6=",
        "_=",
        "=",
        "evil="
      ]
    },
    { "regex": "[$][{]", "exceptionStackTrace": null, "matches": ["${"] },
    {
      "regex": "^I press the enter button$",
      "exceptionStackTrace": null,
      "matches": ["I press the enter button"]
    },
    {
      "regex": "([0-9]+)\\.([0-9]+)\\.([0-9]+)(.*)?",
      "exceptionStackTrace": null,
      "matches": [
        "0.0.0evilevil",
        "0.0.0.",
        "0.0.0eVil",
        "0.0.0EVIL",
        "0.0.0ev_il",
        "0.0.0ev il",
        "0.0.0ev4il",
        "0.0.0e",
        "0.0.0 ",
        "0.0.06",
        "0.0.0_",
        "0.0.00evil",
        "0.0.evil",
        "0.00.0evil",
        "0..0evil",
        "00.0.0evil",
        ".0.0evil",
        "0.0.0",
        "0.0.0evil"
      ]
    },
    {
      "regex": "^client\\s*(\\d+:)",
      "exceptionStackTrace": null,
      "matches": ["client 00:", "client :", "client  0:", "client0:", "client 0:"]
    },
    { "regex": "Range", "exceptionStackTrace": null, "matches": ["Range"] },
    {
      "regex": "$args_ref->{'id'}",
      "exceptionStackTrace": null,
      "matches": ["args_ref->{'id'}"]
    },
    {
      "regex": "<form[^>]*action=\"/admin/blog_posts/",
      "exceptionStackTrace": null,
      "matches": [
        "<form>action=\"/admin/blog_posts/",
        "<form=action=\"/admin/blog_posts/",
        "<form<action=\"/admin/blog_posts/",
        "<form/action=\"/admin/blog_posts/",
        "<form\"action=\"/admin/blog_posts/",
        "<formeVilaction=\"/admin/blog_posts/",
        "<formEVILaction=\"/admin/blog_posts/",
        "<formev_ilaction=\"/admin/blog_posts/",
        "<formev ilaction=\"/admin/blog_posts/",
        "<formev4ilaction=\"/admin/blog_posts/",
        "<formeaction=\"/admin/blog_posts/",
        "<form action=\"/admin/blog_posts/",
        "<form6action=\"/admin/blog_posts/",
        "<form_action=\"/admin/blog_posts/",
        "<formaction=\"/admin/blog_posts/",
        "<formevilaction=\"/admin/blog_posts/"
      ]
    },
    {
      "regex": ".+artifact,\\d+?,id,(?:.+?:|)(.+)",
      "exceptionStackTrace": null,
      "matches": [
        "evilartifact,0,id,evil::",
        "evilartifact,0,id,evil:,",
        "evilartifact,0,id,evil:eVil",
        "evilartifact,0,id,evil:EVIL",
        "evilartifact,0,id,evil:ev_il",
        "evilartifact,0,id,evil:ev il",
        "evilartifact,0,id,evil:ev4il",
        "evilartifact,0,id,evil:e",
        "evilartifact,0,id,evil: ",
        "evilartifact,0,id,evil:6",
        "evilartifact,0,id,evil:_",
        "evilartifact,0,id,evil:",
        "evilartifact,0,id,evil:evil:evil",
        "evilartifact,0,id,::evil",
        "evilartifact,0,id,,:evil",
        "evilartifact,0,id,eVil:evil",
        "evilartifact,0,id,EVIL:evil",
        "evilartifact,0,id,ev_il:evil",
        "evilartifact,0,id,ev il:evil",
        "evilartifact,0,id,ev4il:evil",
        "evilartifact,0,id,e:evil",
        "evilartifact,0,id, :evil",
        "evilartifact,0,id,6:evil",
        "evilartifact,0,id,_:evil",
        "evilartifact,0,id,:evil",
        "evilartifact,00,id,evil:evil",
        "evilartifact,,id,evil:evil",
        ":artifact,0,id,evil:evil",
        ",artifact,0,id,evil:evil",
        "eVilartifact,0,id,evil:evil",
        "EVILartifact,0,id,evil:evil",
        "ev_ilartifact,0,id,evil:evil",
        "ev ilartifact,0,id,evil:evil",
        "ev4ilartifact,0,id,evil:evil",
        "eartifact,0,id,evil:evil",
        " artifact,0,id,evil:evil",
        "6artifact,0,id,evil:evil",
        "_artifact,0,id,evil:evil",
        "artifact,0,id,evil:evil",
        "evilartifact,0,id,evil",
        "evilartifact,0,id,evil:evil"
      ]
    },
    {
      "regex": "^the client successfully appends binary \"(.*?)\" onto \"(.*?)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "the client successfully appends binary \"evil\" onto \"\"\"",
        "the client successfully appends binary \"evil\" onto \"eVil\"",
        "the client successfully appends binary \"evil\" onto \"EVIL\"",
        "the client successfully appends binary \"evil\" onto \"ev_il\"",
        "the client successfully appends binary \"evil\" onto \"ev il\"",
        "the client successfully appends binary \"evil\" onto \"ev4il\"",
        "the client successfully appends binary \"evil\" onto \"e\"",
        "the client successfully appends binary \"evil\" onto \" \"",
        "the client successfully appends binary \"evil\" onto \"6\"",
        "the client successfully appends binary \"evil\" onto \"_\"",
        "the client successfully appends binary \"evil\" onto \"\"",
        "the client successfully appends binary \"\"\" onto \"evil\"",
        "the client successfully appends binary \"eVil\" onto \"evil\"",
        "the client successfully appends binary \"EVIL\" onto \"evil\"",
        "the client successfully appends binary \"ev_il\" onto \"evil\"",
        "the client successfully appends binary \"ev il\" onto \"evil\"",
        "the client successfully appends binary \"ev4il\" onto \"evil\"",
        "the client successfully appends binary \"e\" onto \"evil\"",
        "the client successfully appends binary \" \" onto \"evil\"",
        "the client successfully appends binary \"6\" onto \"evil\"",
        "the client successfully appends binary \"_\" onto \"evil\"",
        "the client successfully appends binary \"\" onto \"evil\"",
        "the client successfully appends binary \"\" onto \"\"",
        "the client successfully appends binary \"evil\" onto \"evil\""
      ]
    },
    {
      "regex": "(^|[^0-9A-Za-z\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u024f\u0b82-\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99-\u0b9a\u0b9c\u0b9e-\u0b9f\u0ba3-\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bc0\u0bcd\u0bd0\u1e00-\u1eff\u2c60-\u2c7f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua7ff])((?:1(?:[\\s\\xa0]*\u0b8e\u0bb8\u0bcd\u0ba4\u0bbf\u0bb0\u0bbe\u0bb8\u0bcd|Esd)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 160"
      },
      "matches": []
    },
    {
      "regex": "^node-red-node-",
      "exceptionStackTrace": null,
      "matches": ["node-red-node-"]
    },
    {
      "regex": "(http[^<>\"{}|\\\\^\\[\\]`\\s]+)",
      "exceptionStackTrace": null,
      "matches": [
        "http}",
        "http|",
        "http{",
        "http`",
        "http^",
        "http]",
        "http\\",
        "http[",
        "http>",
        "http<",
        "http\"",
        "httpeVil",
        "httpEVIL",
        "httpev_il",
        "httpev il",
        "httpev4il",
        "httpe",
        "http ",
        "http6",
        "http_",
        "http",
        "httpevil"
      ]
    },
    {
      "regex": "Sources must be an array of indices \\(or undefined\\)",
      "exceptionStackTrace": null,
      "matches": ["Sources must be an array of indices (or undefined)"]
    },
    {
      "regex": "instance variable @ivar6 not initialized",
      "exceptionStackTrace": null,
      "matches": ["instance variable @ivar6 not initialized"]
    },
    {
      "regex": "\\(([^\\(\\)]*)\\)",
      "exceptionStackTrace": null,
      "matches": [
        "())",
        "(()",
        "(eVil)",
        "(EVIL)",
        "(ev_il)",
        "(ev il)",
        "(ev4il)",
        "(e)",
        "( )",
        "(6)",
        "(_)",
        "()",
        "(evil)"
      ]
    },
    {
      "regex": "^[\\w]+(\\[\\])?$",
      "exceptionStackTrace": null,
      "matches": [
        "evil[][]",
        "eVil[]",
        "EVIL[]",
        "ev_il[]",
        "ev il[]",
        "ev4il[]",
        "e[]",
        " []",
        "6[]",
        "_[]",
        "[]",
        "evil",
        "evil[]"
      ]
    },
    {
      "regex": "^Version[0-9]{14}.yaml$",
      "exceptionStackTrace": null,
      "matches": [
        "Version00000000000000_yaml",
        "Version00000000000000Ayaml",
        "Version000000000000000yaml",
        "Version00000000000000 yaml",
        "Version000000000000000ayaml",
        "Version0000000000000ayaml",
        "Version00000000000000ayaml"
      ]
    },
    {
      "regex": "^(America|Antartica|Arctic|Asia|Atlantic|Europe|Indian|Pacific)\\/",
      "exceptionStackTrace": null,
      "matches": [
        "Pacific/",
        "Indian/",
        "Europe/",
        "Atlantic/",
        "Asia/",
        "Arctic/",
        "Antartica/",
        "America/"
      ]
    },
    {
      "regex": "\u00e1\u00be\u0098",
      "exceptionStackTrace": null,
      "matches": ["\u00e1\u00be\u0098"]
    },
    { "regex": "^pref$", "exceptionStackTrace": null, "matches": ["pref"] },
    {
      "regex": "^\\x1b",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 27"
      },
      "matches": []
    },
    {
      "regex": "^([^:]+):([0-9]+)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil:00",
        "evil:",
        "::0",
        "eVil:0",
        "EVIL:0",
        "ev_il:0",
        "ev il:0",
        "ev4il:0",
        "e:0",
        " :0",
        "6:0",
        "_:0",
        ":0",
        "evil:0"
      ]
    },
    {
      "regex": "\\?qrcode\\/1$",
      "exceptionStackTrace": null,
      "matches": ["?qrcode/1"]
    },
    {
      "regex": "<div>Caller:\\s*(.*?)\\s*</div>",
      "exceptionStackTrace": null,
      "matches": [
        "<div>Caller: evil  </div>",
        "<div>Caller: evil</div>",
        "<div>Caller: > </div>",
        "<div>Caller: < </div>",
        "<div>Caller: : </div>",
        "<div>Caller: / </div>",
        "<div>Caller: eVil </div>",
        "<div>Caller: EVIL </div>",
        "<div>Caller: ev_il </div>",
        "<div>Caller: ev il </div>",
        "<div>Caller: ev4il </div>",
        "<div>Caller: e </div>",
        "<div>Caller:   </div>",
        "<div>Caller: 6 </div>",
        "<div>Caller: _ </div>",
        "<div>Caller:  </div>",
        "<div>Caller:  evil </div>",
        "<div>Caller:evil </div>",
        "<div>Caller:</div>",
        "<div>Caller: evil </div>"
      ]
    },
    { "regex": "^(temp)$", "exceptionStackTrace": null, "matches": ["temp"] },
    {
      "regex": " xmlns(:[^=]+)?=\"[^\"]+\"",
      "exceptionStackTrace": null,
      "matches": [
        " xmlns:evil=\"=\"",
        " xmlns:evil=\":\"",
        " xmlns:evil=\"\"\"",
        " xmlns:evil=\"eVil\"",
        " xmlns:evil=\"EVIL\"",
        " xmlns:evil=\"ev_il\"",
        " xmlns:evil=\"ev il\"",
        " xmlns:evil=\"ev4il\"",
        " xmlns:evil=\"e\"",
        " xmlns:evil=\" \"",
        " xmlns:evil=\"6\"",
        " xmlns:evil=\"_\"",
        " xmlns:evil=\"\"",
        " xmlns:evil:evil=\"evil\"",
        " xmlns:==\"evil\"",
        " xmlns::=\"evil\"",
        " xmlns:\"=\"evil\"",
        " xmlns:eVil=\"evil\"",
        " xmlns:EVIL=\"evil\"",
        " xmlns:ev_il=\"evil\"",
        " xmlns:ev il=\"evil\"",
        " xmlns:ev4il=\"evil\"",
        " xmlns:e=\"evil\"",
        " xmlns: =\"evil\"",
        " xmlns:6=\"evil\"",
        " xmlns:_=\"evil\"",
        " xmlns:=\"evil\"",
        " xmlns=\"evil\"",
        " xmlns:evil=\"evil\""
      ]
    },
    {
      "regex": "(^|[^0-9A-Za-z\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u024f\u0591-\u05bd\u05bf\u05c1-\u05c2\u05c4-\u05c5\u05c7\u05d0-\u05ea\u05f0-\u05f2\u1e00-\u1eff\u2c60-\u2c7f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua7ff])((?:\u05d0(?:\u05d2\u05e8\u05ea\u05d5[\\s\\xa0]*\u05d4\u05e8\u05d0\u05e9\u05d5\u05e0\u05d4[\\s\\xa0]*\u05e9\u05dc[\\s\\xa0]*\u05d9\u05d5\u05d7\u05e0\u05df[\\s\\xa0]*\u05d4\u05e9\u05dc\u05d9\u05d7?|\u05d9\u05d2\u05e8\u05ea[\\s\\xa0]*\u05d9\u05d5\u05d7\u05e0\u05df[\\s\\xa0]*\u05d4\u05e8\u05d0\u05e9\u05d5\u05e0\u05d4)|\u05d4\u05e8\u05d0\u05e9\u05d5\u05e0\u05d4[\\s\\xa0]*\u05d9\u05d5\u05d7\u05e0\u05df|1John))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 160"
      },
      "matches": []
    },
    {
      "regex": "\\.h2Annex[^{]+\\{[^{]+font-family: \"Lato\", sans-serif;",
      "exceptionStackTrace": null,
      "matches": [
        ".h2Annexevil{{font-family: \"Lato\", sans-serif;",
        ".h2Annexevil{;font-family: \"Lato\", sans-serif;",
        ".h2Annexevil{:font-family: \"Lato\", sans-serif;",
        ".h2Annexevil{.font-family: \"Lato\", sans-serif;",
        ".h2Annexevil{-font-family: \"Lato\", sans-serif;",
        ".h2Annexevil{,font-family: \"Lato\", sans-serif;",
        ".h2Annexevil{\"font-family: \"Lato\", sans-serif;",
        ".h2Annexevil{eVilfont-family: \"Lato\", sans-serif;",
        ".h2Annexevil{EVILfont-family: \"Lato\", sans-serif;",
        ".h2Annexevil{ev_ilfont-family: \"Lato\", sans-serif;",
        ".h2Annexevil{ev ilfont-family: \"Lato\", sans-serif;",
        ".h2Annexevil{ev4ilfont-family: \"Lato\", sans-serif;",
        ".h2Annexevil{efont-family: \"Lato\", sans-serif;",
        ".h2Annexevil{ font-family: \"Lato\", sans-serif;",
        ".h2Annexevil{6font-family: \"Lato\", sans-serif;",
        ".h2Annexevil{_font-family: \"Lato\", sans-serif;",
        ".h2Annexevil{font-family: \"Lato\", sans-serif;",
        ".h2Annex{{evilfont-family: \"Lato\", sans-serif;",
        ".h2Annex;{evilfont-family: \"Lato\", sans-serif;",
        ".h2Annex:{evilfont-family: \"Lato\", sans-serif;",
        ".h2Annex.{evilfont-family: \"Lato\", sans-serif;",
        ".h2Annex-{evilfont-family: \"Lato\", sans-serif;",
        ".h2Annex,{evilfont-family: \"Lato\", sans-serif;",
        ".h2Annex\"{evilfont-family: \"Lato\", sans-serif;",
        ".h2AnnexeVil{evilfont-family: \"Lato\", sans-serif;",
        ".h2AnnexEVIL{evilfont-family: \"Lato\", sans-serif;",
        ".h2Annexev_il{evilfont-family: \"Lato\", sans-serif;",
        ".h2Annexev il{evilfont-family: \"Lato\", sans-serif;",
        ".h2Annexev4il{evilfont-family: \"Lato\", sans-serif;",
        ".h2Annexe{evilfont-family: \"Lato\", sans-serif;",
        ".h2Annex {evilfont-family: \"Lato\", sans-serif;",
        ".h2Annex6{evilfont-family: \"Lato\", sans-serif;",
        ".h2Annex_{evilfont-family: \"Lato\", sans-serif;",
        ".h2Annex{evilfont-family: \"Lato\", sans-serif;",
        ".h2Annexevil{evilfont-family: \"Lato\", sans-serif;"
      ]
    },
    {
      "regex": "m?s",
      "exceptionStackTrace": null,
      "matches": ["mms", "s", "ms"]
    },
    {
      "regex": "(\\?|\\&)id\\=([a-z0-9_]*)",
      "exceptionStackTrace": null,
      "matches": [
        "?id=?",
        "?id==",
        "?id=&",
        "?id=eVil",
        "?id=EVIL",
        "?id=ev_il",
        "?id=ev il",
        "?id=ev4il",
        "?id=e",
        "?id= ",
        "?id=6",
        "?id=_",
        "&id=",
        "?id=",
        "&id=evil",
        "?id=evil"
      ]
    },
    {
      "regex": "Inline: <svg",
      "exceptionStackTrace": null,
      "matches": ["Inline: <svg"]
    },
    {
      "regex": "^https?:\\/\\/player.vimeo.com\\/video\\/\\d{0,9}(?=\\b|\\/)",
      "exceptionStackTrace": null,
      "matches": [
        "https://playeravimeoacom/video/0000000000",
        "https://playeravimeoacom/video/000000000",
        "https://playeravimeoacom/video/",
        "https://playeravimeoAcom/video/0",
        "https://playeravimeo:com/video/0",
        "https://playeravimeo0com/video/0",
        "https://playeravimeo/com/video/0",
        "https://playeravimeo com/video/0",
        "https://playerAvimeoacom/video/0",
        "https://player:vimeoacom/video/0",
        "https://player0vimeoacom/video/0",
        "https://player/vimeoacom/video/0",
        "https://player vimeoacom/video/0",
        "httpss://playeravimeoacom/video/0",
        "http://playeravimeoacom/video/0",
        "http://playeravimeoacom/video/",
        "https://playeravimeoacom/video/0"
      ]
    },
    {
      "regex": "[\\n\\t\"e\",\\n\\t{\\n\\t\\t\"pluribus\":\\s?\"unum\"\\n\\t}\\n]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "\\[(\\w*)M(\\w*)\\]",
      "exceptionStackTrace": null,
      "matches": [
        "[evilMeVil]",
        "[evilMEVIL]",
        "[evilMev_il]",
        "[evilMev il]",
        "[evilMev4il]",
        "[evilMe]",
        "[evilM ]",
        "[evilM6]",
        "[evilM_]",
        "[evilM]",
        "[eVilMevil]",
        "[EVILMevil]",
        "[ev_ilMevil]",
        "[ev ilMevil]",
        "[ev4ilMevil]",
        "[eMevil]",
        "[ Mevil]",
        "[6Mevil]",
        "[_Mevil]",
        "[Mevil]",
        "[M]",
        "[evilMevil]"
      ]
    },
    { "regex": "/stats", "exceptionStackTrace": null, "matches": ["/stats"] },
    {
      "regex": "[\\w|\\s|/]+ \\| [\\w|\\s|/]+ - [\\w|\\s|/]+",
      "exceptionStackTrace": null,
      "matches": [
        "evil | evil - |",
        "evil | evil - /",
        "evil | evil - -",
        "evil | evil - eVil",
        "evil | evil - EVIL",
        "evil | evil - ev_il",
        "evil | evil - ev il",
        "evil | evil - ev4il",
        "evil | evil - e",
        "evil | evil -  ",
        "evil | evil - 6",
        "evil | evil - _",
        "evil | evil - ",
        "evil | | - evil",
        "evil | / - evil",
        "evil | - - evil",
        "evil | eVil - evil",
        "evil | EVIL - evil",
        "evil | ev_il - evil",
        "evil | ev il - evil",
        "evil | ev4il - evil",
        "evil | e - evil",
        "evil |   - evil",
        "evil | 6 - evil",
        "evil | _ - evil",
        "evil |  - evil",
        "| | evil - evil",
        "/ | evil - evil",
        "- | evil - evil",
        "eVil | evil - evil",
        "EVIL | evil - evil",
        "ev_il | evil - evil",
        "ev il | evil - evil",
        "ev4il | evil - evil",
        "e | evil - evil",
        "  | evil - evil",
        "6 | evil - evil",
        "_ | evil - evil",
        " | evil - evil",
        "evil | evil - evil"
      ]
    },
    {
      "regex": "['\"]{{DERBY_BUNDLED_AT}},['\"]",
      "exceptionStackTrace": null,
      "matches": [
        "\"{{DERBY_BUNDLED_AT}},'",
        "'{{DERBY_BUNDLED_AT}},\"",
        "\"{{DERBY_BUNDLED_AT}},\""
      ]
    },
    {
      "regex": "\\@?\\#(\\d+)$",
      "exceptionStackTrace": null,
      "matches": ["@#00", "@#", "@@#0", "#0", "@#0"]
    },
    {
      "regex": "\\Aimages global\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "^(?:CC-BY-NC-4.0)",
      "exceptionStackTrace": null,
      "matches": [
        "CC-BY-NC-4A0",
        "CC-BY-NC-400",
        "CC-BY-NC-4-0",
        "CC-BY-NC-4 0",
        "CC-BY-NC-4a0"
      ]
    },
    {
      "regex": "^over(lap)?$",
      "exceptionStackTrace": null,
      "matches": ["overlaplap", "over", "overlap"]
    },
    {
      "regex": "^(.+)@(.*):([0-9]+):([0-9]+)",
      "exceptionStackTrace": null,
      "matches": [
        "evil@evil:0:00",
        "evil@evil:0:",
        "evil@evil:00:0",
        "evil@evil::0",
        "evil@@:0:0",
        "evil@::0:0",
        "evil@eVil:0:0",
        "evil@EVIL:0:0",
        "evil@ev_il:0:0",
        "evil@ev il:0:0",
        "evil@ev4il:0:0",
        "evil@e:0:0",
        "evil@ :0:0",
        "evil@6:0:0",
        "evil@_:0:0",
        "@@evil:0:0",
        ":@evil:0:0",
        "eVil@evil:0:0",
        "EVIL@evil:0:0",
        "ev_il@evil:0:0",
        "ev il@evil:0:0",
        "ev4il@evil:0:0",
        "e@evil:0:0",
        " @evil:0:0",
        "6@evil:0:0",
        "_@evil:0:0",
        "@evil:0:0",
        "evil@:0:0",
        "evil@evil:0:0"
      ]
    },
    {
      "regex": "^([0-9a-f]{32})",
      "exceptionStackTrace": null,
      "matches": [
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "gaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
      ]
    },
    {
      "regex": "\\.gemspec$",
      "exceptionStackTrace": null,
      "matches": [".gemspec"]
    },
    {
      "regex": "([\\w\\+\\-\\(\\)]+)\\(\\s*,\\s*(\\w+)\\s*,\\s*(\\d)\\s*\\)",
      "exceptionStackTrace": null,
      "matches": [
        "evil( , evil , 0  )",
        "evil( , evil , 0)",
        "evil( , evil ,  0 )",
        "evil( , evil ,0 )",
        "evil( , evil  , 0 )",
        "evil( , evil, 0 )",
        "evil( , eVil , 0 )",
        "evil( , EVIL , 0 )",
        "evil( , ev_il , 0 )",
        "evil( , ev il , 0 )",
        "evil( , ev4il , 0 )",
        "evil( , e , 0 )",
        "evil( ,   , 0 )",
        "evil( , 6 , 0 )",
        "evil( , _ , 0 )",
        "evil( ,  , 0 )",
        "evil( ,  evil , 0 )",
        "evil( ,evil , 0 )",
        "evil(  , evil , 0 )",
        "evil(, evil , 0 )",
        "-( , evil , 0 )",
        ",( , evil , 0 )",
        "+( , evil , 0 )",
        ")( , evil , 0 )",
        "(( , evil , 0 )",
        "eVil( , evil , 0 )",
        "EVIL( , evil , 0 )",
        "ev_il( , evil , 0 )",
        "ev il( , evil , 0 )",
        "ev4il( , evil , 0 )",
        "e( , evil , 0 )",
        " ( , evil , 0 )",
        "6( , evil , 0 )",
        "_( , evil , 0 )",
        "( , evil , 0 )",
        "evil(,evil,0)",
        "evil( , evil , 0 )"
      ]
    },
    {
      "regex": ".-",
      "exceptionStackTrace": null,
      "matches": ["A-", "0-", "--", " -", "a-"]
    },
    {
      "regex": "^\\s*th(?:read)?\\s*(?:cur(?:rent)?)?\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        " thread current  ",
        " thread current",
        " thread currentcurrent ",
        " thread  ",
        " thread currentrent ",
        " thread cur ",
        " thread  current ",
        " threadcurrent ",
        " threadread current ",
        " th current ",
        "  thread current ",
        "thread current ",
        "th",
        " thread current "
      ]
    },
    {
      "regex": "<<([\\'\"]?)([a-zA-Z_][a-zA-Z0-9_]*)\\1;?\\n.*?\\n\\2\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "equirectangular",
      "exceptionStackTrace": null,
      "matches": ["equirectangular"]
    },
    {
      "regex": "((http|https):\\/\\/(\\w+:{0,1}\\w*@)?([^\\s\\*\\)`]+)(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?)",
      "exceptionStackTrace": null,
      "matches": [
        "http://evil:evil@evil/a",
        "http://evil:evil@evil/_",
        "http://evil:evil@evil/A",
        "http://evil:evil@evil/@",
        "http://evil:evil@evil/?",
        "http://evil:evil@evil/=",
        "http://evil:evil@evil/:",
        "http://evil:evil@evil/0",
        "http://evil:evil@evil/.",
        "http://evil:evil@evil/-",
        "http://evil:evil@evil/+",
        "http://evil:evil@evil/&",
        "http://evil:evil@evil/%",
        "http://evil:evil@evil/#",
        "http://evil:evil@evil/!",
        "http://evil:evil@evil",
        "http://evil:evil@`/",
        "http://evil:evil@@/",
        "http://evil:evil@?/",
        "http://evil:evil@=/",
        "http://evil:evil@:/",
        "http://evil:evil@//",
        "http://evil:evil@./",
        "http://evil:evil@-/",
        "http://evil:evil@+/",
        "http://evil:evil@*/",
        "http://evil:evil@)/",
        "http://evil:evil@&/",
        "http://evil:evil@%/",
        "http://evil:evil@#/",
        "http://evil:evil@!/",
        "http://evil:evil@eVil/",
        "http://evil:evil@EVIL/",
        "http://evil:evil@ev_il/",
        "http://evil:evil@ev il/",
        "http://evil:evil@ev4il/",
        "http://evil:evil@e/",
        "http://evil:evil@ /",
        "http://evil:evil@6/",
        "http://evil:evil@_/",
        "http://evil:evil@/",
        "http://evil:evil@evil:evil@evil/",
        "http://evil/",
        "http://evil:eVil@evil/",
        "http://evil:EVIL@evil/",
        "http://evil:ev_il@evil/",
        "http://evil:ev il@evil/",
        "http://evil:ev4il@evil/",
        "http://evil:e@evil/",
        "http://evil: @evil/",
        "http://evil:6@evil/",
        "http://evil:_@evil/",
        "http://evil:@evil/",
        "http://evil::evil@evil/",
        "http://evilevil@evil/",
        "http://eVil:evil@evil/",
        "http://EVIL:evil@evil/",
        "http://ev_il:evil@evil/",
        "http://ev il:evil@evil/",
        "http://ev4il:evil@evil/",
        "http://e:evil@evil/",
        "http:// :evil@evil/",
        "http://6:evil@evil/",
        "http://_:evil@evil/",
        "http://:evil@evil/",
        "https://evil",
        "http://evil",
        "https://evil:evil@evil/",
        "http://evil:evil@evil//",
        "http://evil:evil@evil/"
      ]
    },
    {
      "regex": "^A\\s+edits/(.+)",
      "exceptionStackTrace": null,
      "matches": [
        "A edits//",
        "A edits/eVil",
        "A edits/EVIL",
        "A edits/ev_il",
        "A edits/ev il",
        "A edits/ev4il",
        "A edits/e",
        "A edits/ ",
        "A edits/6",
        "A edits/_",
        "A edits/",
        "A  edits/evil",
        "Aedits/evil",
        "A edits/evil"
      ]
    },
    { "regex": "post", "exceptionStackTrace": null, "matches": ["post"] },
    {
      "regex": "^\\*\\s+(BYE)\\b",
      "exceptionStackTrace": null,
      "matches": ["*  BYE", "*BYE", "* BYE"]
    },
    {
      "regex": "$valid_ele_nre",
      "exceptionStackTrace": null,
      "matches": ["valid_ele_nre"]
    },
    {
      "regex": "^\\s*([^:]+):\\s*(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        " evil: :",
        " evil: eVil",
        " evil: EVIL",
        " evil: ev_il",
        " evil: ev il",
        " evil: ev4il",
        " evil: e",
        " evil:  ",
        " evil: 6",
        " evil: _",
        " evil: ",
        " evil:  evil",
        " evil:evil",
        " :: evil",
        " eVil: evil",
        " EVIL: evil",
        " ev_il: evil",
        " ev il: evil",
        " ev4il: evil",
        " e: evil",
        "  : evil",
        " 6: evil",
        " _: evil",
        " : evil",
        "  evil: evil",
        "evil: evil",
        "evil:",
        " evil: evil"
      ]
    },
    {
      "regex": "^the result is \"([^\"]*)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "the result is \"\"\"",
        "the result is \"eVil\"",
        "the result is \"EVIL\"",
        "the result is \"ev_il\"",
        "the result is \"ev il\"",
        "the result is \"ev4il\"",
        "the result is \"e\"",
        "the result is \" \"",
        "the result is \"6\"",
        "the result is \"_\"",
        "the result is \"\"",
        "the result is \"evil\""
      ]
    },
    {
      "regex": "^__(\\w+)$",
      "exceptionStackTrace": null,
      "matches": [
        "__eVil",
        "__EVIL",
        "__ev_il",
        "__ev il",
        "__ev4il",
        "__e",
        "__ ",
        "__6",
        "___",
        "__",
        "__evil"
      ]
    },
    {
      "regex": "JisonLexerError:[^]*?Unrecognized text\\.",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unterminated character set"
      },
      "matches": []
    },
    {
      "regex": "^repos_\\\\d{4}$",
      "exceptionStackTrace": null,
      "matches": ["repos_\\ddddd", "repos_\\ddd", "repos_\\dddd"]
    },
    { "regex": "EI$", "exceptionStackTrace": null, "matches": ["EI"] },
    {
      "regex": "components\\/([A-Z]\\w*)\\/index\\.tsx",
      "exceptionStackTrace": null,
      "matches": [
        "components/AeVil/index.tsx",
        "components/AEVIL/index.tsx",
        "components/Aev_il/index.tsx",
        "components/Aev il/index.tsx",
        "components/Aev4il/index.tsx",
        "components/Ae/index.tsx",
        "components/A /index.tsx",
        "components/A6/index.tsx",
        "components/A_/index.tsx",
        "components/A/index.tsx",
        "components/Aevil/index.tsx"
      ]
    },
    {
      "regex": "^QEMU emulator version ([\\d\\.]+) \\(",
      "exceptionStackTrace": null,
      "matches": [
        "QEMU emulator version .. (",
        "QEMU emulator version  (",
        "QEMU emulator version 0 (",
        "QEMU emulator version . ("
      ]
    },
    {
      "regex": "^pseudorabies virus",
      "exceptionStackTrace": null,
      "matches": ["pseudorabies virus"]
    },
    { "regex": "^_sum", "exceptionStackTrace": null, "matches": ["_sum"] },
    {
      "regex": "SHA mismatch: expected d707e56f9f41f05fcb86396b31c1272d6e242e3748212a3ba373a74d13aaff1a to be xxx",
      "exceptionStackTrace": null,
      "matches": [
        "SHA mismatch: expected d707e56f9f41f05fcb86396b31c1272d6e242e3748212a3ba373a74d13aaff1a to be xxx"
      ]
    },
    {
      "regex": "^debug://.*/4$",
      "exceptionStackTrace": null,
      "matches": [
        "debug://:/4",
        "debug:////4",
        "debug://eVil/4",
        "debug://EVIL/4",
        "debug://ev_il/4",
        "debug://ev il/4",
        "debug://ev4il/4",
        "debug://e/4",
        "debug:// /4",
        "debug://6/4",
        "debug://_/4",
        "debug:///4",
        "debug://evil/4"
      ]
    },
    { "regex": "^(<<=)", "exceptionStackTrace": null, "matches": ["<<="] },
    {
      "regex": "payment_type=",
      "exceptionStackTrace": null,
      "matches": ["payment_type="]
    },
    {
      "regex": "^(?:0x)?[0-9a-fA-F]+$",
      "exceptionStackTrace": null,
      "matches": ["0xAA", "0x", "0xg", "0xa", "0xG", "0x0", "0x0xA", "A", "0xA"]
    },
    {
      "regex": "\\A(?:DOUBLE_PRECISION)",
      "exceptionStackTrace": null,
      "matches": ["DOUBLE_PRECISION"]
    },
    {
      "regex": "(?:\\<.+\\>|\\[\\w+\\:.+\\])$",
      "exceptionStackTrace": null,
      "matches": [
        "[evil:]]",
        "[evil:[]",
        "[evil:>]",
        "[evil:<]",
        "[evil::]",
        "[evil:eVil]",
        "[evil:EVIL]",
        "[evil:ev_il]",
        "[evil:ev il]",
        "[evil:ev4il]",
        "[evil:e]",
        "[evil: ]",
        "[evil:6]",
        "[evil:_]",
        "[evil:]",
        "[eVil:evil]",
        "[EVIL:evil]",
        "[ev_il:evil]",
        "[ev il:evil]",
        "[ev4il:evil]",
        "[e:evil]",
        "[ :evil]",
        "[6:evil]",
        "[_:evil]",
        "[:evil]",
        "<]>",
        "<[>",
        "<>>",
        "<<>",
        "<:>",
        "<eVil>",
        "<EVIL>",
        "<ev_il>",
        "<ev il>",
        "<ev4il>",
        "<e>",
        "< >",
        "<6>",
        "<_>",
        "<>",
        "[evil:evil]",
        "<evil>"
      ]
    },
    {
      "regex": "(?:ET|TD)",
      "exceptionStackTrace": null,
      "matches": ["TD", "ET"]
    },
    {
      "regex": "^The following commands should output only the most basic summary information to STDOUT:$",
      "exceptionStackTrace": null,
      "matches": [
        "The following commands should output only the most basic summary information to STDOUT:"
      ]
    },
    {
      "regex": "^$PL_count_zero$",
      "exceptionStackTrace": null,
      "matches": ["PL_count_zero"]
    },
    {
      "regex": "^N:([^;]+)?;([^;]+)?;([^;]+)?;([^;]+)?;([^;]+)?$",
      "exceptionStackTrace": null,
      "matches": [
        "N:evil;evil;evil;evil;evilevil",
        "N:evil;evil;evil;evil;;",
        "N:evil;evil;evil;evil;:",
        "N:evil;evil;evil;evil;eVil",
        "N:evil;evil;evil;evil;EVIL",
        "N:evil;evil;evil;evil;ev_il",
        "N:evil;evil;evil;evil;ev il",
        "N:evil;evil;evil;evil;ev4il",
        "N:evil;evil;evil;evil;e",
        "N:evil;evil;evil;evil; ",
        "N:evil;evil;evil;evil;6",
        "N:evil;evil;evil;evil;_",
        "N:evil;evil;evil;evil;",
        "N:evil;evil;evil;evilevil;evil",
        "N:evil;evil;evil;;;evil",
        "N:evil;evil;evil;:;evil",
        "N:evil;evil;evil;eVil;evil",
        "N:evil;evil;evil;EVIL;evil",
        "N:evil;evil;evil;ev_il;evil",
        "N:evil;evil;evil;ev il;evil",
        "N:evil;evil;evil;ev4il;evil",
        "N:evil;evil;evil;e;evil",
        "N:evil;evil;evil; ;evil",
        "N:evil;evil;evil;6;evil",
        "N:evil;evil;evil;_;evil",
        "N:evil;evil;evil;;evil",
        "N:evil;evil;evilevil;evil;evil",
        "N:evil;evil;;;evil;evil",
        "N:evil;evil;:;evil;evil",
        "N:evil;evil;eVil;evil;evil",
        "N:evil;evil;EVIL;evil;evil",
        "N:evil;evil;ev_il;evil;evil",
        "N:evil;evil;ev il;evil;evil",
        "N:evil;evil;ev4il;evil;evil",
        "N:evil;evil;e;evil;evil",
        "N:evil;evil; ;evil;evil",
        "N:evil;evil;6;evil;evil",
        "N:evil;evil;_;evil;evil",
        "N:evil;evil;;evil;evil",
        "N:evil;evilevil;evil;evil;evil",
        "N:evil;;;evil;evil;evil",
        "N:evil;:;evil;evil;evil",
        "N:evil;eVil;evil;evil;evil",
        "N:evil;EVIL;evil;evil;evil",
        "N:evil;ev_il;evil;evil;evil",
        "N:evil;ev il;evil;evil;evil",
        "N:evil;ev4il;evil;evil;evil",
        "N:evil;e;evil;evil;evil",
        "N:evil; ;evil;evil;evil",
        "N:evil;6;evil;evil;evil",
        "N:evil;_;evil;evil;evil",
        "N:evil;;evil;evil;evil",
        "N:evilevil;evil;evil;evil;evil",
        "N:;;evil;evil;evil;evil",
        "N::;evil;evil;evil;evil",
        "N:eVil;evil;evil;evil;evil",
        "N:EVIL;evil;evil;evil;evil",
        "N:ev_il;evil;evil;evil;evil",
        "N:ev il;evil;evil;evil;evil",
        "N:ev4il;evil;evil;evil;evil",
        "N:e;evil;evil;evil;evil",
        "N: ;evil;evil;evil;evil",
        "N:6;evil;evil;evil;evil",
        "N:_;evil;evil;evil;evil",
        "N:;evil;evil;evil;evil",
        "N:;;;;",
        "N:evil;evil;evil;evil;evil"
      ]
    },
    { "regex": "\\.raml$", "exceptionStackTrace": null, "matches": [".raml"] },
    {
      "regex": "^(rel|dev|recent|modern)$",
      "exceptionStackTrace": null,
      "matches": ["modern", "recent", "dev", "rel"]
    },
    {
      "regex": "^$indent1\\s+",
      "exceptionStackTrace": null,
      "matches": ["indent1  ", "indent1", "indent1 "]
    },
    {
      "regex": "^[^<>\"{} | ^\\\\]",
      "exceptionStackTrace": null,
      "matches": ["}", "|", "{", "^", "\\", "A", ">", "<", "0", "\"", " ", "a"]
    },
    { "regex": "Trigger$", "exceptionStackTrace": null, "matches": ["Trigger"] },
    {
      "regex": "(?i)^alter function",
      "exceptionStackTrace": null,
      "matches": ["alter function"]
    },
    {
      "regex": "emptyColumn",
      "exceptionStackTrace": null,
      "matches": ["emptyColumn"]
    },
    {
      "regex": "Uppercase",
      "exceptionStackTrace": null,
      "matches": ["Uppercase"]
    },
    {
      "regex": "timeout|timed out",
      "exceptionStackTrace": null,
      "matches": ["timed out", "timeout"]
    },
    {
      "regex": "^[\\w\\.]+:[\\w]+:[\\w]+$",
      "exceptionStackTrace": null,
      "matches": [
        "evil:evil:eVil",
        "evil:evil:EVIL",
        "evil:evil:ev_il",
        "evil:evil:ev il",
        "evil:evil:ev4il",
        "evil:evil:e",
        "evil:evil: ",
        "evil:evil:6",
        "evil:evil:_",
        "evil:evil:",
        "evil:eVil:evil",
        "evil:EVIL:evil",
        "evil:ev_il:evil",
        "evil:ev il:evil",
        "evil:ev4il:evil",
        "evil:e:evil",
        "evil: :evil",
        "evil:6:evil",
        "evil:_:evil",
        "evil::evil",
        "::evil:evil",
        ".:evil:evil",
        "eVil:evil:evil",
        "EVIL:evil:evil",
        "ev_il:evil:evil",
        "ev il:evil:evil",
        "ev4il:evil:evil",
        "e:evil:evil",
        " :evil:evil",
        "6:evil:evil",
        "_:evil:evil",
        ":evil:evil",
        "evil:evil:evil"
      ]
    },
    {
      "regex": "uncompiled\\s?",
      "exceptionStackTrace": null,
      "matches": ["uncompiled  ", "uncompiled", "uncompiled "]
    },
    { "regex": "Dumping", "exceptionStackTrace": null, "matches": ["Dumping"] },
    {
      "regex": "\\A(?:Scen::)",
      "exceptionStackTrace": null,
      "matches": ["Scen::"]
    },
    {
      "regex": "^[a-z_]{1,30}$",
      "exceptionStackTrace": null,
      "matches": [
        "_______________________________",
        "______________________________",
        "",
        "a",
        "_"
      ]
    },
    {
      "regex": "[^.a-zA-Z0-9]",
      "exceptionStackTrace": null,
      "matches": ["a", "A", "0", ".", " "]
    },
    {
      "regex": "https?://(?:www\\.)?ssh101\\.com/(?:secure)?live/",
      "exceptionStackTrace": null,
      "matches": [
        "https://www.ssh101.com/securesecurelive/",
        "https://www.ssh101.com/live/",
        "https://www.www.ssh101.com/securelive/",
        "https://ssh101.com/securelive/",
        "httpss://www.ssh101.com/securelive/",
        "http://www.ssh101.com/securelive/",
        "http://ssh101.com/live/",
        "https://www.ssh101.com/securelive/"
      ]
    },
    {
      "regex": ".*?([0-9]+)\\.?(.*?)\\.sql",
      "exceptionStackTrace": null,
      "matches": [
        "evil0...sql",
        "evil0.eVil.sql",
        "evil0.EVIL.sql",
        "evil0.ev_il.sql",
        "evil0.ev il.sql",
        "evil0.ev4il.sql",
        "evil0.e.sql",
        "evil0. .sql",
        "evil0.6.sql",
        "evil0._.sql",
        "evil0..sql",
        "evil0..evil.sql",
        "evil0evil.sql",
        "evil00.evil.sql",
        "evil.evil.sql",
        ".0.evil.sql",
        "eVil0.evil.sql",
        "EVIL0.evil.sql",
        "ev_il0.evil.sql",
        "ev il0.evil.sql",
        "ev4il0.evil.sql",
        "e0.evil.sql",
        " 0.evil.sql",
        "60.evil.sql",
        "_0.evil.sql",
        "0.evil.sql",
        "0.sql",
        "evil0.evil.sql"
      ]
    },
    {
      "regex": "catalog_uuid: '?([a-z0-9\\-]*)'?",
      "exceptionStackTrace": null,
      "matches": [
        "catalog_uuid: 'evil''",
        "catalog_uuid: 'evil",
        "catalog_uuid: ':'",
        "catalog_uuid: '-'",
        "catalog_uuid: '''",
        "catalog_uuid: 'eVil'",
        "catalog_uuid: 'EVIL'",
        "catalog_uuid: 'ev_il'",
        "catalog_uuid: 'ev il'",
        "catalog_uuid: 'ev4il'",
        "catalog_uuid: 'e'",
        "catalog_uuid: ' '",
        "catalog_uuid: '6'",
        "catalog_uuid: '_'",
        "catalog_uuid: ''",
        "catalog_uuid: ''evil'",
        "catalog_uuid: evil'",
        "catalog_uuid: ",
        "catalog_uuid: 'evil'"
      ]
    },
    {
      "regex": "multiple environments possible",
      "exceptionStackTrace": null,
      "matches": ["multiple environments possible"]
    },
    {
      "regex": "-p 10\\s+",
      "exceptionStackTrace": null,
      "matches": ["-p 10  ", "-p 10", "-p 10 "]
    },
    {
      "regex": "[\\\\s-]+",
      "exceptionStackTrace": null,
      "matches": ["--", "", "s", "a", "\\", "-"]
    },
    {
      "regex": "third failed to deploy after \\d.\\ds",
      "exceptionStackTrace": null,
      "matches": [
        "third failed to deploy after 0_0s",
        "third failed to deploy after 0A0s",
        "third failed to deploy after 000s",
        "third failed to deploy after 0 0s",
        "third failed to deploy after 0a0s"
      ]
    },
    { "regex": "\\&\\#062;", "exceptionStackTrace": null, "matches": ["&#062;"] },
    {
      "regex": "^\\/api\\/themetype\\/?$",
      "exceptionStackTrace": null,
      "matches": ["/api/themetype//", "/api/themetype", "/api/themetype/"]
    },
    { "regex": "pu", "exceptionStackTrace": null, "matches": ["pu"] },
    {
      "regex": "<div +id *= *[\"']disqus_thread[\"'] *>",
      "exceptionStackTrace": null,
      "matches": [
        "<div id = 'disqus_thread'  >",
        "<div id = 'disqus_thread'>",
        "<div id = 'disqus_thread\" >",
        "<div id = \"disqus_thread' >",
        "<div id =  'disqus_thread' >",
        "<div id ='disqus_thread' >",
        "<div id  = 'disqus_thread' >",
        "<div id= 'disqus_thread' >",
        "<div  id = 'disqus_thread' >",
        "<divid = 'disqus_thread' >",
        "<div id='disqus_thread'>",
        "<div id = 'disqus_thread' >"
      ]
    },
    {
      "regex": "Cartridges:\\s+",
      "exceptionStackTrace": null,
      "matches": ["Cartridges:  ", "Cartridges:", "Cartridges: "]
    },
    {
      "regex": "fullPreviewHashPath=\"([^\"]+)\"",
      "exceptionStackTrace": null,
      "matches": [
        "fullPreviewHashPath=\"=\"",
        "fullPreviewHashPath=\"\"\"",
        "fullPreviewHashPath=\"eVil\"",
        "fullPreviewHashPath=\"EVIL\"",
        "fullPreviewHashPath=\"ev_il\"",
        "fullPreviewHashPath=\"ev il\"",
        "fullPreviewHashPath=\"ev4il\"",
        "fullPreviewHashPath=\"e\"",
        "fullPreviewHashPath=\" \"",
        "fullPreviewHashPath=\"6\"",
        "fullPreviewHashPath=\"_\"",
        "fullPreviewHashPath=\"\"",
        "fullPreviewHashPath=\"evil\""
      ]
    },
    {
      "regex": "<URIObject[^>]*?\\stype=\\\"([^\\\"]+?)\\\"",
      "exceptionStackTrace": null,
      "matches": [
        "<URIObjectevil type=\">\"",
        "<URIObjectevil type=\"=\"",
        "<URIObjectevil type=\"<\"",
        "<URIObjectevil type=\"\"\"",
        "<URIObjectevil type=\"eVil\"",
        "<URIObjectevil type=\"EVIL\"",
        "<URIObjectevil type=\"ev_il\"",
        "<URIObjectevil type=\"ev il\"",
        "<URIObjectevil type=\"ev4il\"",
        "<URIObjectevil type=\"e\"",
        "<URIObjectevil type=\" \"",
        "<URIObjectevil type=\"6\"",
        "<URIObjectevil type=\"_\"",
        "<URIObjectevil type=\"\"",
        "<URIObject> type=\"evil\"",
        "<URIObject= type=\"evil\"",
        "<URIObject< type=\"evil\"",
        "<URIObject\" type=\"evil\"",
        "<URIObjecteVil type=\"evil\"",
        "<URIObjectEVIL type=\"evil\"",
        "<URIObjectev_il type=\"evil\"",
        "<URIObjectev il type=\"evil\"",
        "<URIObjectev4il type=\"evil\"",
        "<URIObjecte type=\"evil\"",
        "<URIObject  type=\"evil\"",
        "<URIObject6 type=\"evil\"",
        "<URIObject_ type=\"evil\"",
        "<URIObject type=\"evil\"",
        "<URIObjectevil type=\"evil\""
      ]
    },
    {
      "regex": "/github-groups(/.*)?$",
      "exceptionStackTrace": null,
      "matches": [
        "/github-groups/evil/evil",
        "/github-groups//",
        "/github-groups/-",
        "/github-groups/eVil",
        "/github-groups/EVIL",
        "/github-groups/ev_il",
        "/github-groups/ev il",
        "/github-groups/ev4il",
        "/github-groups/e",
        "/github-groups/ ",
        "/github-groups/6",
        "/github-groups/_",
        "/github-groups/",
        "/github-groups",
        "/github-groups/evil"
      ]
    },
    {
      "regex": "\\.(eot|svg|ttf|woff|woff2)$",
      "exceptionStackTrace": null,
      "matches": [".woff2", ".woff", ".ttf", ".svg", ".eot"]
    },
    {
      "regex": "^(::?)i",
      "exceptionStackTrace": null,
      "matches": [":::i", ":i", "::i"]
    },
    {
      "regex": "(.*?)(\\*)(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "evil**",
        "evil*eVil",
        "evil*EVIL",
        "evil*ev_il",
        "evil*ev il",
        "evil*ev4il",
        "evil*e",
        "evil* ",
        "evil*6",
        "evil*_",
        "evil*",
        "**evil",
        "eVil*evil",
        "EVIL*evil",
        "ev_il*evil",
        "ev il*evil",
        "ev4il*evil",
        "e*evil",
        " *evil",
        "6*evil",
        "_*evil",
        "*evil",
        "*",
        "evil*evil"
      ]
    },
    {
      "regex": ", \\w+=nil",
      "exceptionStackTrace": null,
      "matches": [
        ", eVil=nil",
        ", EVIL=nil",
        ", ev_il=nil",
        ", ev il=nil",
        ", ev4il=nil",
        ", e=nil",
        ",  =nil",
        ", 6=nil",
        ", _=nil",
        ", =nil",
        ", evil=nil"
      ]
    },
    {
      "regex": "$class\\::",
      "exceptionStackTrace": null,
      "matches": ["class::"]
    },
    {
      "regex": "this is a? message",
      "exceptionStackTrace": null,
      "matches": ["this is aa message", "this is  message", "this is a message"]
    },
    {
      "regex": "^\\s*.",
      "exceptionStackTrace": null,
      "matches": [" _", " A", " 0", "  ", "  a", "a", " a"]
    },
    {
      "regex": "#comments$",
      "exceptionStackTrace": null,
      "matches": ["#comments"]
    },
    {
      "regex": "^\\s*[\\[(]\\s*  # bracket\n\t\t   ([^\\])]+?)\\s* # content\n\t           [\\])]\\s*",
      "exceptionStackTrace": null,
      "matches": [
        " (   # bracket\n\t\t   evil  # content\n\t           )  ",
        " (   # bracket\n\t\t   evil  # content\n\t           )",
        " (   # bracket\n\t\t   evil  # content\n\t           ] ",
        " (   # bracket\n\t\t   evil   # content\n\t           ) ",
        " (   # bracket\n\t\t   evil # content\n\t           ) ",
        " (   # bracket\n\t\t   ]  # content\n\t           ) ",
        " (   # bracket\n\t\t   [  # content\n\t           ) ",
        " (   # bracket\n\t\t   )  # content\n\t           ) ",
        " (   # bracket\n\t\t   (  # content\n\t           ) ",
        " (   # bracket\n\t\t   #  # content\n\t           ) ",
        " (   # bracket\n\t\t   eVil  # content\n\t           ) ",
        " (   # bracket\n\t\t   EVIL  # content\n\t           ) ",
        " (   # bracket\n\t\t   ev_il  # content\n\t           ) ",
        " (   # bracket\n\t\t   ev il  # content\n\t           ) ",
        " (   # bracket\n\t\t   ev4il  # content\n\t           ) ",
        " (   # bracket\n\t\t   e  # content\n\t           ) ",
        " (   # bracket\n\t\t      # content\n\t           ) ",
        " (   # bracket\n\t\t   6  # content\n\t           ) ",
        " (   # bracket\n\t\t   _  # content\n\t           ) ",
        " (   # bracket\n\t\t     # content\n\t           ) ",
        " (    # bracket\n\t\t   evil  # content\n\t           ) ",
        " (  # bracket\n\t\t   evil  # content\n\t           ) ",
        " [   # bracket\n\t\t   evil  # content\n\t           ) ",
        "  (   # bracket\n\t\t   evil  # content\n\t           ) ",
        "(   # bracket\n\t\t   evil  # content\n\t           ) ",
        "(  # bracket\n\t\t   evil # content\n\t           )",
        " (   # bracket\n\t\t   evil  # content\n\t           ) "
      ]
    },
    {
      "regex": "^# BEGIN BPS TAGGED BLOCK {{{",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (parse error): Input string ended prematurely"
      },
      "matches": []
    },
    {
      "regex": ":?(title|description|keywords|site_name)$",
      "exceptionStackTrace": null,
      "matches": [
        "::title",
        "site_name",
        "keywords",
        "description",
        "title",
        ":site_name",
        ":keywords",
        ":description",
        ":title"
      ]
    },
    {
      "regex": "sys\\/health",
      "exceptionStackTrace": null,
      "matches": ["sys/health"]
    },
    {
      "regex": "https?://dynasty-scans\\.com/chapters/",
      "exceptionStackTrace": null,
      "matches": [
        "httpss://dynasty-scans.com/chapters/",
        "http://dynasty-scans.com/chapters/",
        "https://dynasty-scans.com/chapters/"
      ]
    },
    {
      "regex": "^\\\\([\\\\w \\\\._\\\\+\\\\-@]+\\\\)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad character range \\\\-@"
      },
      "matches": []
    },
    {
      "regex": "(\\S+)\\(.* .([\\d\\.]+).",
      "exceptionStackTrace": null,
      "matches": [
        "evil(evil a.A",
        "evil(evil a.0",
        "evil(evil a..",
        "evil(evil a.(",
        "evil(evil a. ",
        "evil(evil a..a",
        "evil(evil aa",
        "evil(evil a0a",
        "evil(evil A.a",
        "evil(evil 0.a",
        "evil(evil ..a",
        "evil(evil (.a",
        "evil(evil  .a",
        "evil(. a.a",
        "evil(( a.a",
        "evil(eVil a.a",
        "evil(EVIL a.a",
        "evil(ev_il a.a",
        "evil(ev il a.a",
        "evil(ev4il a.a",
        "evil(e a.a",
        "evil(  a.a",
        "evil(6 a.a",
        "evil(_ a.a",
        ".(evil a.a",
        "((evil a.a",
        "eVil(evil a.a",
        "EVIL(evil a.a",
        "ev_il(evil a.a",
        "ev il(evil a.a",
        "ev4il(evil a.a",
        "e(evil a.a",
        " (evil a.a",
        "6(evil a.a",
        "_(evil a.a",
        "(evil a.a",
        "evil( a.a",
        "evil(evil a.a"
      ]
    },
    {
      "regex": ".pl$",
      "exceptionStackTrace": null,
      "matches": ["_pl", "Apl", "0pl", " pl", "apl"]
    },
    {
      "regex": "^(.*) (is|am) watching \"([^\"]+)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "evil is watching \"\"\"",
        "evil is watching \"eVil\"",
        "evil is watching \"EVIL\"",
        "evil is watching \"ev_il\"",
        "evil is watching \"ev il\"",
        "evil is watching \"ev4il\"",
        "evil is watching \"e\"",
        "evil is watching \" \"",
        "evil is watching \"6\"",
        "evil is watching \"_\"",
        "evil is watching \"\"",
        "\" is watching \"evil\"",
        "eVil is watching \"evil\"",
        "EVIL is watching \"evil\"",
        "ev_il is watching \"evil\"",
        "ev il is watching \"evil\"",
        "ev4il is watching \"evil\"",
        "e is watching \"evil\"",
        "  is watching \"evil\"",
        "6 is watching \"evil\"",
        "_ is watching \"evil\"",
        " am watching \"evil\"",
        " is watching \"evil\"",
        "evil am watching \"evil\"",
        "evil is watching \"evil\""
      ]
    },
    {
      "regex": "\\x00\\x00\\x00?",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 0"
      },
      "matches": []
    },
    {
      "regex": "^(blockchain:)((\\\\/\\\\/[a-fA-F0-9]{64})?)\\\\/(tx|block|address)\\\\/([a-fA-F0-9]{64})$",
      "exceptionStackTrace": null,
      "matches": [
        "blockchain:\\/\\/0000000000000000000000000000000000000000000000000000000000000000\\/tx\\/00000000000000000000000000000000000000000000000000000000000000000",
        "blockchain:\\/\\/0000000000000000000000000000000000000000000000000000000000000000\\/tx\\/000000000000000000000000000000000000000000000000000000000000000",
        "blockchain:\\/\\/0000000000000000000000000000000000000000000000000000000000000000\\/tx\\/g000000000000000000000000000000000000000000000000000000000000000",
        "blockchain:\\/\\/0000000000000000000000000000000000000000000000000000000000000000\\/tx\\/a000000000000000000000000000000000000000000000000000000000000000",
        "blockchain:\\/\\/0000000000000000000000000000000000000000000000000000000000000000\\/tx\\/G000000000000000000000000000000000000000000000000000000000000000",
        "blockchain:\\/\\/0000000000000000000000000000000000000000000000000000000000000000\\/tx\\/A000000000000000000000000000000000000000000000000000000000000000",
        "blockchain:\\/\\/0000000000000000000000000000000000000000000000000000000000000000\\/\\/0000000000000000000000000000000000000000000000000000000000000000\\/tx\\/0000000000000000000000000000000000000000000000000000000000000000",
        "blockchain:\\/\\/00000000000000000000000000000000000000000000000000000000000000000\\/tx\\/0000000000000000000000000000000000000000000000000000000000000000",
        "blockchain:\\/\\/000000000000000000000000000000000000000000000000000000000000000\\/tx\\/0000000000000000000000000000000000000000000000000000000000000000",
        "blockchain:\\/\\/g000000000000000000000000000000000000000000000000000000000000000\\/tx\\/0000000000000000000000000000000000000000000000000000000000000000",
        "blockchain:\\/\\/a000000000000000000000000000000000000000000000000000000000000000\\/tx\\/0000000000000000000000000000000000000000000000000000000000000000",
        "blockchain:\\/\\/G000000000000000000000000000000000000000000000000000000000000000\\/tx\\/0000000000000000000000000000000000000000000000000000000000000000",
        "blockchain:\\/\\/A000000000000000000000000000000000000000000000000000000000000000\\/tx\\/0000000000000000000000000000000000000000000000000000000000000000",
        "blockchain:\\/address\\/0000000000000000000000000000000000000000000000000000000000000000",
        "blockchain:\\/block\\/0000000000000000000000000000000000000000000000000000000000000000",
        "blockchain:\\/tx\\/0000000000000000000000000000000000000000000000000000000000000000",
        "blockchain:\\/\\/0000000000000000000000000000000000000000000000000000000000000000\\/address\\/0000000000000000000000000000000000000000000000000000000000000000",
        "blockchain:\\/\\/0000000000000000000000000000000000000000000000000000000000000000\\/block\\/0000000000000000000000000000000000000000000000000000000000000000",
        "blockchain:\\/\\/0000000000000000000000000000000000000000000000000000000000000000\\/tx\\/0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    {
      "regex": "We were unable to parse.*Styled Components",
      "exceptionStackTrace": null,
      "matches": [
        "We were unable to parseeVilStyled Components",
        "We were unable to parseEVILStyled Components",
        "We were unable to parseev_ilStyled Components",
        "We were unable to parseev ilStyled Components",
        "We were unable to parseev4ilStyled Components",
        "We were unable to parseeStyled Components",
        "We were unable to parse Styled Components",
        "We were unable to parse6Styled Components",
        "We were unable to parse_Styled Components",
        "We were unable to parseStyled Components",
        "We were unable to parseevilStyled Components"
      ]
    },
    {
      "regex": "select \"someAlias\"\\.\\* from \"Model1\" as \"someAlias\" where \"someAlias\"\\.\"id\" in \\(2\\)",
      "exceptionStackTrace": null,
      "matches": [
        "select \"someAlias\".* from \"Model1\" as \"someAlias\" where \"someAlias\".\"id\" in (2)"
      ]
    },
    {
      "regex": "(?i).*\\s+limit\\s+[0-9]*(\\s?,\\s?[0-9]*)?$",
      "exceptionStackTrace": null,
      "matches": [
        "evil limit 0 , 0 , 0",
        "evil limit 0",
        "evil limit 0 , 00",
        "evil limit 0 , ",
        "evil limit 0 ,  0",
        "evil limit 0 ,0",
        "evil limit 0  , 0",
        "evil limit 0, 0",
        "evil limit 00 , 0",
        "evil limit  , 0",
        "evil limit  0 , 0",
        "evil limit0 , 0",
        "evil  limit 0 , 0",
        "evillimit 0 , 0",
        ", limit 0 , 0",
        "eVil limit 0 , 0",
        "EVIL limit 0 , 0",
        "ev_il limit 0 , 0",
        "ev il limit 0 , 0",
        "ev4il limit 0 , 0",
        "e limit 0 , 0",
        "  limit 0 , 0",
        "6 limit 0 , 0",
        "_ limit 0 , 0",
        " limit 0 , 0",
        " limit ",
        "evil limit 0 , 0"
      ]
    },
    {
      "regex": "prefetch-src 'self'",
      "exceptionStackTrace": null,
      "matches": ["prefetch-src 'self'"]
    },
    {
      "regex": "\\$(?:([A-Z][A-Z0-9_]+)|\\{([A-Z][A-Z0-9_]+)\\})",
      "exceptionStackTrace": null,
      "matches": [
        "${A}}",
        "${A{}",
        "${A$}",
        "${AeVil}",
        "${AEVIL}",
        "${Aev_il}",
        "${Aev il}",
        "${Aev4il}",
        "${Ae}",
        "${A }",
        "${A6}",
        "${A_}",
        "${A}",
        "$A}",
        "$A{",
        "$A$",
        "$AeVil",
        "$AEVIL",
        "$Aev_il",
        "$Aev il",
        "$Aev4il",
        "$Ae",
        "$A ",
        "$A6",
        "$A_",
        "$A",
        "${Aevil}",
        "$Aevil"
      ]
    },
    { "regex": "^real$", "exceptionStackTrace": null, "matches": ["real"] },
    { "regex": "$co", "exceptionStackTrace": null, "matches": ["co"] },
    {
      "regex": "URL: (.*)\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "(do|once)",
      "exceptionStackTrace": null,
      "matches": ["once", "do"]
    },
    {
      "regex": "(\\\"cvv\\\\\\\":\\\\\\\")\\d+",
      "exceptionStackTrace": null,
      "matches": ["\"cvv\\\":\\\"00", "\"cvv\\\":\\\"", "\"cvv\\\":\\\"0"]
    },
    {
      "regex": "^$options{CGISTART}",
      "exceptionStackTrace": null,
      "matches": ["options{CGISTART}"]
    },
    {
      "regex": "^/api/clouds/([^/]+)/ip_addresses/([^/]+)/ip_address_bindings$",
      "exceptionStackTrace": null,
      "matches": [
        "/api/clouds/evil/ip_addresses///ip_address_bindings",
        "/api/clouds/evil/ip_addresses/eVil/ip_address_bindings",
        "/api/clouds/evil/ip_addresses/EVIL/ip_address_bindings",
        "/api/clouds/evil/ip_addresses/ev_il/ip_address_bindings",
        "/api/clouds/evil/ip_addresses/ev il/ip_address_bindings",
        "/api/clouds/evil/ip_addresses/ev4il/ip_address_bindings",
        "/api/clouds/evil/ip_addresses/e/ip_address_bindings",
        "/api/clouds/evil/ip_addresses/ /ip_address_bindings",
        "/api/clouds/evil/ip_addresses/6/ip_address_bindings",
        "/api/clouds/evil/ip_addresses/_/ip_address_bindings",
        "/api/clouds/evil/ip_addresses//ip_address_bindings",
        "/api/clouds///ip_addresses/evil/ip_address_bindings",
        "/api/clouds/eVil/ip_addresses/evil/ip_address_bindings",
        "/api/clouds/EVIL/ip_addresses/evil/ip_address_bindings",
        "/api/clouds/ev_il/ip_addresses/evil/ip_address_bindings",
        "/api/clouds/ev il/ip_addresses/evil/ip_address_bindings",
        "/api/clouds/ev4il/ip_addresses/evil/ip_address_bindings",
        "/api/clouds/e/ip_addresses/evil/ip_address_bindings",
        "/api/clouds/ /ip_addresses/evil/ip_address_bindings",
        "/api/clouds/6/ip_addresses/evil/ip_address_bindings",
        "/api/clouds/_/ip_addresses/evil/ip_address_bindings",
        "/api/clouds//ip_addresses/evil/ip_address_bindings",
        "/api/clouds/evil/ip_addresses/evil/ip_address_bindings"
      ]
    },
    {
      "regex": "^3\\.[12]",
      "exceptionStackTrace": null,
      "matches": ["3.1", "3.0", "3.2"]
    },
    {
      "regex": "^\\s+(\\S.*)",
      "exceptionStackTrace": null,
      "matches": [
        " aeVil",
        " aEVIL",
        " aev_il",
        " aev il",
        " aev4il",
        " ae",
        " a ",
        " a6",
        " a_",
        " _evil",
        " Aevil",
        " 0evil",
        "  evil",
        "  aevil",
        "aevil",
        " a",
        " aevil"
      ]
    },
    {
      "regex": "(quicklatex.com-[a-f0-9]{32}_l3.)(png)",
      "exceptionStackTrace": null,
      "matches": [
        "quicklatexacom-00000000000000000000000000000000_l3_png",
        "quicklatexacom-00000000000000000000000000000000_l3Apng",
        "quicklatexacom-00000000000000000000000000000000_l30png",
        "quicklatexacom-00000000000000000000000000000000_l3-png",
        "quicklatexacom-00000000000000000000000000000000_l3 png",
        "quicklatexacom-000000000000000000000000000000000_l3apng",
        "quicklatexacom-0000000000000000000000000000000_l3apng",
        "quicklatexacom-g0000000000000000000000000000000_l3apng",
        "quicklatexacom-a0000000000000000000000000000000_l3apng",
        "quicklatex_com-00000000000000000000000000000000_l3apng",
        "quicklatexAcom-00000000000000000000000000000000_l3apng",
        "quicklatex0com-00000000000000000000000000000000_l3apng",
        "quicklatex-com-00000000000000000000000000000000_l3apng",
        "quicklatex com-00000000000000000000000000000000_l3apng",
        "quicklatexacom-00000000000000000000000000000000_l3apng"
      ]
    },
    {
      "regex": "\r?\n(?=\\S)",
      "exceptionStackTrace": null,
      "matches": ["\r\r\n", "\n", "\r\n"]
    },
    {
      "regex": "VERSION\\s*=.*",
      "exceptionStackTrace": null,
      "matches": [
        "VERSION ==",
        "VERSION =eVil",
        "VERSION =EVIL",
        "VERSION =ev_il",
        "VERSION =ev il",
        "VERSION =ev4il",
        "VERSION =e",
        "VERSION = ",
        "VERSION =6",
        "VERSION =_",
        "VERSION =",
        "VERSION  =evil",
        "VERSION=evil",
        "VERSION=",
        "VERSION =evil"
      ]
    },
    {
      "regex": "a??a+",
      "exceptionStackTrace": null,
      "matches": ["aaa", "a", "aa"]
    },
    {
      "regex": "\\\\.|[dDjlNSwzWFmMntLoYyaABgGhHisueIOPTZcrU]",
      "exceptionStackTrace": null,
      "matches": [
        "z",
        "y",
        "w",
        "u",
        "t",
        "s",
        "r",
        "o",
        "n",
        "m",
        "l",
        "j",
        "i",
        "h",
        "g",
        "e",
        "d",
        "c",
        "b",
        "a",
        "Z",
        "Y",
        "W",
        "T",
        "S",
        "P",
        "O",
        "N",
        "M",
        "L",
        "I",
        "H",
        "G",
        "F",
        "D",
        "C",
        "B",
        "A",
        "\\\\",
        "\\A",
        "\\0",
        "\\ ",
        "U",
        "\\a"
      ]
    },
    {
      "regex": "^(603601|622137|622327|622340|622366)\\d{11}$",
      "exceptionStackTrace": null,
      "matches": [
        "603601000000000000",
        "6036010000000000",
        "62236600000000000",
        "62234000000000000",
        "62232700000000000",
        "62213700000000000",
        "60360100000000000"
      ]
    },
    {
      "regex": "_v(.+)\\+",
      "exceptionStackTrace": null,
      "matches": [
        "_v++",
        "_veVil+",
        "_vEVIL+",
        "_vev_il+",
        "_vev il+",
        "_vev4il+",
        "_ve+",
        "_v +",
        "_v6+",
        "_v_+",
        "_v+",
        "_vevil+"
      ]
    },
    {
      "regex": "^(hint|master|slave|stub|forward)$",
      "exceptionStackTrace": null,
      "matches": ["forward", "stub", "slave", "master", "hint"]
    },
    { "regex": "^\\*\\d", "exceptionStackTrace": null, "matches": ["*0"] },
    {
      "regex": "[&<>\\u00A0]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 160"
      },
      "matches": []
    },
    {
      "regex": "[$RusCharset{'All'}]",
      "exceptionStackTrace": null,
      "matches": [
        "{",
        "u",
        "t",
        "s",
        "r",
        "l",
        "h",
        "e",
        "b",
        "a",
        "R",
        "C",
        "B",
        "A",
        "'",
        "$",
        "}"
      ]
    },
    {
      "regex": "unknown option:.*bar",
      "exceptionStackTrace": null,
      "matches": [
        "unknown option::bar",
        "unknown option:eVilbar",
        "unknown option:EVILbar",
        "unknown option:ev_ilbar",
        "unknown option:ev ilbar",
        "unknown option:ev4ilbar",
        "unknown option:ebar",
        "unknown option: bar",
        "unknown option:6bar",
        "unknown option:_bar",
        "unknown option:bar",
        "unknown option:evilbar"
      ]
    },
    {
      "regex": "profile|packages",
      "exceptionStackTrace": null,
      "matches": ["packages", "profile"]
    },
    {
      "regex": "%[dfijoOs]",
      "exceptionStackTrace": null,
      "matches": ["%o", "%j", "%i", "%f", "%d", "%a", "%O", "%A", "%s"]
    },
    {
      "regex": "; *(Orange |Optimus )(Monte Carlo|San Francisco) Build",
      "exceptionStackTrace": null,
      "matches": [
        ";  Orange Monte Carlo Build",
        ";Optimus Monte Carlo Build",
        ";Orange San Francisco Build",
        ";Orange Monte Carlo Build",
        "; Optimus Monte Carlo Build",
        "; Orange San Francisco Build",
        "; Orange Monte Carlo Build"
      ]
    },
    {
      "regex": "(.+)::Patch::(.+)",
      "exceptionStackTrace": null,
      "matches": [
        "evil::Patch:::",
        "evil::Patch::eVil",
        "evil::Patch::EVIL",
        "evil::Patch::ev_il",
        "evil::Patch::ev il",
        "evil::Patch::ev4il",
        "evil::Patch::e",
        "evil::Patch:: ",
        "evil::Patch::6",
        "evil::Patch::_",
        "evil::Patch::",
        ":::Patch::evil",
        "eVil::Patch::evil",
        "EVIL::Patch::evil",
        "ev_il::Patch::evil",
        "ev il::Patch::evil",
        "ev4il::Patch::evil",
        "e::Patch::evil",
        " ::Patch::evil",
        "6::Patch::evil",
        "_::Patch::evil",
        "::Patch::evil",
        "evil::Patch::evil"
      ]
    },
    {
      "regex": "[\\n-\\r]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "url://abcdef",
      "exceptionStackTrace": null,
      "matches": ["url://abcdef"]
    },
    {
      "regex": "#\\w",
      "exceptionStackTrace": null,
      "matches": ["#_", "#A", "#0", "#a"]
    },
    {
      "regex": "^(.*?) should be recorded in my list$",
      "exceptionStackTrace": null,
      "matches": [
        "eVil should be recorded in my list",
        "EVIL should be recorded in my list",
        "ev_il should be recorded in my list",
        "ev il should be recorded in my list",
        "ev4il should be recorded in my list",
        "e should be recorded in my list",
        "  should be recorded in my list",
        "6 should be recorded in my list",
        "_ should be recorded in my list",
        " should be recorded in my list",
        "evil should be recorded in my list"
      ]
    },
    {
      "regex": "[\\+\\.\\-]",
      "exceptionStackTrace": null,
      "matches": [".", "+", "-"]
    },
    { "regex": "E11000", "exceptionStackTrace": null, "matches": ["E11000"] },
    {
      "regex": ", \\*\\/\\*;q=0\\.1\\Z",
      "exceptionStackTrace": null,
      "matches": [", */*;q=0.1"]
    },
    {
      "regex": "(\\d)(\\+)?(\\*)?",
      "exceptionStackTrace": null,
      "matches": ["0+**", "0+", "0++*", "0*", "0", "0+*"]
    },
    {
      "regex": "counter: -4",
      "exceptionStackTrace": null,
      "matches": ["counter: -4"]
    },
    {
      "regex": "^RangeError: maxtime must be greater than 0$",
      "exceptionStackTrace": null,
      "matches": ["RangeError: maxtime must be greater than 0"]
    },
    {
      "regex": "^.*app\\/views\\/",
      "exceptionStackTrace": null,
      "matches": [
        "/app/views/",
        "eVilapp/views/",
        "EVILapp/views/",
        "ev_ilapp/views/",
        "ev ilapp/views/",
        "ev4ilapp/views/",
        "eapp/views/",
        " app/views/",
        "6app/views/",
        "_app/views/",
        "app/views/",
        "evilapp/views/"
      ]
    },
    {
      "regex": "^update_jobs_list",
      "exceptionStackTrace": null,
      "matches": ["update_jobs_list"]
    },
    {
      "regex": "^(~~~.+?~~~)",
      "exceptionStackTrace": null,
      "matches": [
        "~~~~~~~",
        "~~~eVil~~~",
        "~~~EVIL~~~",
        "~~~ev_il~~~",
        "~~~ev il~~~",
        "~~~ev4il~~~",
        "~~~e~~~",
        "~~~ ~~~",
        "~~~6~~~",
        "~~~_~~~",
        "~~~~~~",
        "~~~evil~~~"
      ]
    },
    {
      "regex": "^-l(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "-l-",
        "-leVil",
        "-lEVIL",
        "-lev_il",
        "-lev il",
        "-lev4il",
        "-le",
        "-l ",
        "-l6",
        "-l_",
        "-l",
        "-levil"
      ]
    },
    {
      "regex": "(?m)^(\\s*)dependencies\\s*=\\s*\\[.*\\]\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        " dependencies = [evil]  ",
        " dependencies = [evil]",
        " dependencies = []] ",
        " dependencies = [[] ",
        " dependencies = [=] ",
        " dependencies = [eVil] ",
        " dependencies = [EVIL] ",
        " dependencies = [ev_il] ",
        " dependencies = [ev il] ",
        " dependencies = [ev4il] ",
        " dependencies = [e] ",
        " dependencies = [ ] ",
        " dependencies = [6] ",
        " dependencies = [_] ",
        " dependencies = [] ",
        " dependencies =  [evil] ",
        " dependencies =[evil] ",
        " dependencies  = [evil] ",
        " dependencies= [evil] ",
        "  dependencies = [evil] ",
        "dependencies = [evil] ",
        "dependencies=[]",
        " dependencies = [evil] "
      ]
    },
    {
      "regex": "^\\$\\$testcafe_test_run\\$\\$(\\S+)\\$\\$$",
      "exceptionStackTrace": null,
      "matches": [
        "$$testcafe_test_run$$$$$",
        "$$testcafe_test_run$$eVil$$",
        "$$testcafe_test_run$$EVIL$$",
        "$$testcafe_test_run$$ev_il$$",
        "$$testcafe_test_run$$ev il$$",
        "$$testcafe_test_run$$ev4il$$",
        "$$testcafe_test_run$$e$$",
        "$$testcafe_test_run$$ $$",
        "$$testcafe_test_run$$6$$",
        "$$testcafe_test_run$$_$$",
        "$$testcafe_test_run$$$$",
        "$$testcafe_test_run$$evil$$"
      ]
    },
    {
      "regex": "Identity.map: Function required",
      "exceptionStackTrace": null,
      "matches": [
        "IdentityAmap: Function required",
        "Identity:map: Function required",
        "Identity0map: Function required",
        "Identity map: Function required",
        "Identityamap: Function required"
      ]
    },
    { "regex": "^manager$", "exceptionStackTrace": null, "matches": ["manager"] },
    {
      "regex": "s[ac]ss$",
      "exceptionStackTrace": null,
      "matches": ["sbss", "sass", "scss"]
    },
    {
      "regex": "^\\t\\Q$arg\\E\\s*=\\s*(boolSV\\(|(&PL_sv_yes|&PL_sv_no|&PL_sv_undef)\\s*;)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\Q"
      },
      "matches": []
    },
    {
      "regex": "<img src='\\/images\\/background.jpg' \\/>",
      "exceptionStackTrace": null,
      "matches": [
        "<img src='/images/backgroundAjpg' />",
        "<img src='/images/background>jpg' />",
        "<img src='/images/background=jpg' />",
        "<img src='/images/background<jpg' />",
        "<img src='/images/background0jpg' />",
        "<img src='/images/background/jpg' />",
        "<img src='/images/background'jpg' />",
        "<img src='/images/background jpg' />",
        "<img src='/images/backgroundajpg' />"
      ]
    },
    {
      "regex": "(<[ACDF-Y][^>]*>)",
      "exceptionStackTrace": null,
      "matches": [
        "<D>>",
        "<D<>",
        "<DeVil>",
        "<DEVIL>",
        "<Dev_il>",
        "<Dev il>",
        "<Dev4il>",
        "<De>",
        "<D >",
        "<D6>",
        "<D_>",
        "<Fevil>",
        "<Cevil>",
        "<Bevil>",
        "<Aevil>",
        "<D>",
        "<Devil>"
      ]
    },
    {
      "regex": "^(.*?)(\\s+|\\s*)\\b(Y|N|YT|NT|YS|NS)\\s+(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil Y eVil",
        "evil Y EVIL",
        "evil Y ev_il",
        "evil Y ev il",
        "evil Y ev4il",
        "evil Y e",
        "evil Y  ",
        "evil Y 6",
        "evil Y _",
        "evil Y ",
        "evil Y  evil",
        "evil Yevil",
        "evil  Y evil",
        "evilY evil",
        "eVil Y evil",
        "EVIL Y evil",
        "ev_il Y evil",
        "ev il Y evil",
        "ev4il Y evil",
        "e Y evil",
        "  Y evil",
        "6 Y evil",
        "_ Y evil",
        " Y evil",
        "Y ",
        " NS ",
        " YS ",
        " NT ",
        " YT ",
        " N ",
        " Y ",
        "evil NS evil",
        "evil YS evil",
        "evil NT evil",
        "evil YT evil",
        "evil N evil",
        "evil Y evil"
      ]
    },
    {
      "regex": "^I should see that there is a match$",
      "exceptionStackTrace": null,
      "matches": ["I should see that there is a match"]
    },
    {
      "regex": "([^[/]+)?(\\[[^\\]]+\\])?[^/]*(\\/.+)?",
      "exceptionStackTrace": null,
      "matches": [
        "evil[evil]evil/evil/evil",
        "evil[evil]evil",
        "evil[evil]evil/]",
        "evil[evil]evil/[",
        "evil[evil]evil//",
        "evil[evil]evil/eVil",
        "evil[evil]evil/EVIL",
        "evil[evil]evil/ev_il",
        "evil[evil]evil/ev il",
        "evil[evil]evil/ev4il",
        "evil[evil]evil/e",
        "evil[evil]evil/ ",
        "evil[evil]evil/6",
        "evil[evil]evil/_",
        "evil[evil]evil/",
        "evil[evil]]/evil",
        "evil[evil][/evil",
        "evil[evil]//evil",
        "evil[evil]eVil/evil",
        "evil[evil]EVIL/evil",
        "evil[evil]ev_il/evil",
        "evil[evil]ev il/evil",
        "evil[evil]ev4il/evil",
        "evil[evil]e/evil",
        "evil[evil] /evil",
        "evil[evil]6/evil",
        "evil[evil]_/evil",
        "evil[evil]/evil",
        "evil[evil][evil]evil/evil",
        "evilevil/evil",
        "evil[]]evil/evil",
        "evil[[]evil/evil",
        "evil[/]evil/evil",
        "evil[eVil]evil/evil",
        "evil[EVIL]evil/evil",
        "evil[ev_il]evil/evil",
        "evil[ev il]evil/evil",
        "evil[ev4il]evil/evil",
        "evil[e]evil/evil",
        "evil[ ]evil/evil",
        "evil[6]evil/evil",
        "evil[_]evil/evil",
        "evil[]evil/evil",
        "evilevil[evil]evil/evil",
        "][evil]evil/evil",
        "[[evil]evil/evil",
        "/[evil]evil/evil",
        "eVil[evil]evil/evil",
        "EVIL[evil]evil/evil",
        "ev_il[evil]evil/evil",
        "ev il[evil]evil/evil",
        "ev4il[evil]evil/evil",
        "e[evil]evil/evil",
        " [evil]evil/evil",
        "6[evil]evil/evil",
        "_[evil]evil/evil",
        "[evil]evil/evil",
        "",
        "evil[evil]evil/evil"
      ]
    },
    {
      "regex": "&nbsp;(\\d+)-(\\d+)",
      "exceptionStackTrace": null,
      "matches": ["&nbsp;0-00", "&nbsp;0-", "&nbsp;00-0", "&nbsp;-0", "&nbsp;0-0"]
    },
    { "regex": "^kasket-", "exceptionStackTrace": null, "matches": ["kasket-"] },
    {
      "regex": "(citizen[_-])?code[_-]of[_-]conduct",
      "exceptionStackTrace": null,
      "matches": [
        "citizen-code-of_conduct",
        "citizen-code_of-conduct",
        "citizen-citizen-code-of-conduct",
        "citizen_code-of-conduct",
        "code-of-conduct",
        "citizen-code-of-conduct"
      ]
    },
    {
      "regex": "Metadata key \"#\" contains illegal characters",
      "exceptionStackTrace": null,
      "matches": ["Metadata key \"#\" contains illegal characters"]
    },
    { "regex": "(?i)list", "exceptionStackTrace": null, "matches": ["list"] },
    {
      "regex": "^(0|(-?[1-9])[0-9]*)$",
      "exceptionStackTrace": null,
      "matches": ["-100", "-1", "-00", "--10", "10", "1", "-10", "0"]
    },
    { "regex": "^vuln-", "exceptionStackTrace": null, "matches": ["vuln-"] },
    {
      "regex": "([{\\[]) \\s* ( [^}\\]]+? ) \\s* [}\\]]",
      "exceptionStackTrace": null,
      "matches": [
        "[    evil    }",
        "[    evil     ]",
        "[    evil   ]",
        "[    }    ]",
        "[    {    ]",
        "[    ]    ]",
        "[    [    ]",
        "[    eVil    ]",
        "[    EVIL    ]",
        "[    ev_il    ]",
        "[    ev il    ]",
        "[    ev4il    ]",
        "[    e    ]",
        "[         ]",
        "[    6    ]",
        "[    _    ]",
        "[        ]",
        "[     evil    ]",
        "[   evil    ]",
        "{    evil    ]",
        "[   evil   ]",
        "[    evil    ]"
      ]
    },
    {
      "regex": "^Missing mRNA ends:\\s+(\\w+)",
      "exceptionStackTrace": null,
      "matches": [
        "Missing mRNA ends: eVil",
        "Missing mRNA ends: EVIL",
        "Missing mRNA ends: ev_il",
        "Missing mRNA ends: ev il",
        "Missing mRNA ends: ev4il",
        "Missing mRNA ends: e",
        "Missing mRNA ends:  ",
        "Missing mRNA ends: 6",
        "Missing mRNA ends: _",
        "Missing mRNA ends: ",
        "Missing mRNA ends:  evil",
        "Missing mRNA ends:evil",
        "Missing mRNA ends: evil"
      ]
    },
    {
      "regex": "usage: [\\S]+ template list",
      "exceptionStackTrace": null,
      "matches": [
        "usage: : template list",
        "usage: eVil template list",
        "usage: EVIL template list",
        "usage: ev_il template list",
        "usage: ev il template list",
        "usage: ev4il template list",
        "usage: e template list",
        "usage:   template list",
        "usage: 6 template list",
        "usage: _ template list",
        "usage:  template list",
        "usage: evil template list"
      ]
    },
    {
      "regex": "(\\/)*$",
      "exceptionStackTrace": null,
      "matches": ["//", "", "/"]
    },
    {
      "regex": "^(?P<unit>A|Q|QNH)?\n                           (?P<press>[\\dO]{3,4}|////)\n                           (?P<unit2>INS)?\\s+",
      "exceptionStackTrace": null,
      "matches": [
        "A\n                           OOO\n                           INS  ",
        "A\n                           OOO\n                           INS",
        "A\n                           OOO\n                           INSINS ",
        "A\n                           OOO\n                            ",
        "A\n                           OOOOO\n                           INS ",
        "A\n                           OOOO\n                           INS ",
        "A\n                           OO\n                           INS ",
        "A\n                           AOO\n                           INS ",
        "A\n                           0OO\n                           INS ",
        "AA\n                           OOO\n                           INS ",
        "\n                           OOO\n                           INS ",
        "\n                           ////\n                            ",
        "\n                           OOO\n                            ",
        "QNH\n                           OOO\n                           INS ",
        "Q\n                           OOO\n                           INS ",
        "A\n                           ////\n                           INS ",
        "A\n                           OOO\n                           INS "
      ]
    },
    {
      "regex": "^it should create the post-commit hook$",
      "exceptionStackTrace": null,
      "matches": ["it should create the post-commit hook"]
    },
    {
      "regex": "AppleWebKit\\/(\\d+)",
      "exceptionStackTrace": null,
      "matches": ["AppleWebKit/00", "AppleWebKit/", "AppleWebKit/0"]
    },
    {
      "regex": "[\\x20-\\x3A\\x3C-\\x7E]+",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (bad range): Invalid range: <-~"
      },
      "matches": []
    },
    {
      "regex": "--baseDir.*target directory",
      "exceptionStackTrace": null,
      "matches": [
        "--baseDir-target directory",
        "--baseDireViltarget directory",
        "--baseDirEVILtarget directory",
        "--baseDirev_iltarget directory",
        "--baseDirev iltarget directory",
        "--baseDirev4iltarget directory",
        "--baseDiretarget directory",
        "--baseDir target directory",
        "--baseDir6target directory",
        "--baseDir_target directory",
        "--baseDirtarget directory",
        "--baseDireviltarget directory"
      ]
    },
    {
      "regex": "^\\s?$",
      "exceptionStackTrace": null,
      "matches": ["  ", "", " "]
    },
    {
      "regex": "\\((?:C|TM|R)\\)|\\.{3}|->|<-|=>|<=|&#(?:\\d+|x[a-fA-F\\d]+);|(?: |^)--(?=\\s+\\S)",
      "exceptionStackTrace": null,
      "matches": [
        "&#x00;",
        "&#x;",
        "&#xg;",
        "&#xa;",
        "&#xG;",
        "&#xA;",
        "&#00;",
        "&#;",
        "....",
        "..",
        "--",
        " --",
        "&#x0;",
        "&#0;",
        "<=",
        "=>",
        "<-",
        "->",
        "...",
        "(R)",
        "(TM)",
        "(C)"
      ]
    },
    { "regex": "^listen", "exceptionStackTrace": null, "matches": ["listen"] },
    {
      "regex": "[ \\t]*(#.*$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "(^|[^0-9A-Za-z\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u024f\u1e00-\u1eff\u2c60-\u2c7f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua7ff])((?:(?:(?:II|2)\\.|Pili)[\\s\\xa0]*Ezra|(?:II|2)[\\s\\xa0]*Ezra|2Esd|Kitabu[\\s\\xa0]*cha[\\s\\xa0]*Pili[\\s\\xa0]*cha[\\s\\xa0]*Ezra))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 160"
      },
      "matches": []
    },
    {
      "regex": "^& (.*?) (\\d+) (\\d+): (.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "& evil 0 0: :",
        "& evil 0 0: &",
        "& evil 0 0: eVil",
        "& evil 0 0: EVIL",
        "& evil 0 0: ev_il",
        "& evil 0 0: ev il",
        "& evil 0 0: ev4il",
        "& evil 0 0: e",
        "& evil 0 0:  ",
        "& evil 0 0: 6",
        "& evil 0 0: _",
        "& evil 0 0: ",
        "& evil 0 00: evil",
        "& evil 0 : evil",
        "& evil 00 0: evil",
        "& evil  0: evil",
        "& : 0 0: evil",
        "& & 0 0: evil",
        "& eVil 0 0: evil",
        "& EVIL 0 0: evil",
        "& ev_il 0 0: evil",
        "& ev il 0 0: evil",
        "& ev4il 0 0: evil",
        "& e 0 0: evil",
        "&   0 0: evil",
        "& 6 0 0: evil",
        "& _ 0 0: evil",
        "&  0 0: evil",
        "&  0 0: ",
        "& evil 0 0: evil"
      ]
    },
    { "regex": "remove_", "exceptionStackTrace": null, "matches": ["remove_"] },
    {
      "regex": "\\G$ws*(==|!=|<=>|>=|<=)$ws*",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\G"
      },
      "matches": []
    },
    {
      "regex": "(?i)\\bpublished\\b",
      "exceptionStackTrace": null,
      "matches": ["published"]
    },
    {
      "regex": "?(?|?|?|?)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "nothing to repeat"
      },
      "matches": []
    },
    {
      "regex": "^\\s*(end(?:\\s+using\\s+terms\\s+from)?)(?=\\s*(--.*?)?$)",
      "exceptionStackTrace": null,
      "matches": [
        " end using terms from using terms from",
        " end",
        " end using terms  from",
        " end using termsfrom",
        " end using  terms from",
        " end usingterms from",
        " end  using terms from",
        " endusing terms from",
        "  end using terms from",
        "end using terms from",
        "end",
        " end using terms from"
      ]
    },
    {
      "regex": "\\s(https?.+(jpe?g|png|gif))\\s",
      "exceptionStackTrace": null,
      "matches": [
        " httpseviljpeeg ",
        " httpseviljpg ",
        " httpseViljpeg ",
        " httpsEVILjpeg ",
        " httpsev_iljpeg ",
        " httpsev iljpeg ",
        " httpsev4iljpeg ",
        " httpsejpeg ",
        " https jpeg ",
        " https6jpeg ",
        " https_jpeg ",
        " httpsjpeg ",
        " httpsseviljpeg ",
        " httpeviljpeg ",
        " httpevilgif ",
        " httpevilpng ",
        " httpeviljpg ",
        " httpsevilgif ",
        " httpsevilpng ",
        " httpseviljpeg "
      ]
    },
    {
      "regex": "\\A(?:REGR_ICPT)",
      "exceptionStackTrace": null,
      "matches": ["REGR_ICPT"]
    },
    {
      "regex": "^IntCharSet$",
      "exceptionStackTrace": null,
      "matches": ["IntCharSet"]
    },
    {
      "regex": "\\.vcxproj\\.user$",
      "exceptionStackTrace": null,
      "matches": [".vcxproj.user"]
    },
    {
      "regex": "wallet-date-column",
      "exceptionStackTrace": null,
      "matches": ["wallet-date-column"]
    },
    { "regex": "(#|\\.)", "exceptionStackTrace": null, "matches": [".", "#"] },
    {
      "regex": "[ ]*([a-zA-Z0-9 \\[\\]\\<\\>]+) ([a-zA-Z0-9_]+)",
      "exceptionStackTrace": null,
      "matches": [
        " evil ]",
        " evil [",
        " evil >",
        " evil <",
        " evil eVil",
        " evil EVIL",
        " evil ev_il",
        " evil ev il",
        " evil ev4il",
        " evil e",
        " evil  ",
        " evil 6",
        " evil _",
        " evil ",
        " ] evil",
        " [ evil",
        " > evil",
        " < evil",
        " eVil evil",
        " EVIL evil",
        " ev_il evil",
        " ev il evil",
        " ev4il evil",
        " e evil",
        "   evil",
        " 6 evil",
        " _ evil",
        "  evil",
        "  evil evil",
        "evil evil",
        " evil evil"
      ]
    },
    { "regex": "PANSITE", "exceptionStackTrace": null, "matches": ["PANSITE"] },
    {
      "regex": "<td align=\"center\">(.*?)<(.+)",
      "exceptionStackTrace": null,
      "matches": [
        "<td align=\"center\">evil<>",
        "<td align=\"center\">evil<=",
        "<td align=\"center\">evil<<",
        "<td align=\"center\">evil<\"",
        "<td align=\"center\">evil<eVil",
        "<td align=\"center\">evil<EVIL",
        "<td align=\"center\">evil<ev_il",
        "<td align=\"center\">evil<ev il",
        "<td align=\"center\">evil<ev4il",
        "<td align=\"center\">evil<e",
        "<td align=\"center\">evil< ",
        "<td align=\"center\">evil<6",
        "<td align=\"center\">evil<_",
        "<td align=\"center\">evil<",
        "<td align=\"center\">><evil",
        "<td align=\"center\">=<evil",
        "<td align=\"center\"><<evil",
        "<td align=\"center\">\"<evil",
        "<td align=\"center\">eVil<evil",
        "<td align=\"center\">EVIL<evil",
        "<td align=\"center\">ev_il<evil",
        "<td align=\"center\">ev il<evil",
        "<td align=\"center\">ev4il<evil",
        "<td align=\"center\">e<evil",
        "<td align=\"center\"> <evil",
        "<td align=\"center\">6<evil",
        "<td align=\"center\">_<evil",
        "<td align=\"center\"><evil",
        "<td align=\"center\">evil<evil"
      ]
    },
    {
      "regex": "$V\\s*(\\w*)",
      "exceptionStackTrace": null,
      "matches": [
        "V eVil",
        "V EVIL",
        "V ev_il",
        "V ev il",
        "V ev4il",
        "V e",
        "V  ",
        "V 6",
        "V _",
        "V ",
        "V  evil",
        "Vevil",
        "V",
        "V evil"
      ]
    },
    {
      "regex": "https_pkcs12_file=",
      "exceptionStackTrace": null,
      "matches": ["https_pkcs12_file="]
    },
    {
      "regex": "http://schema.org/Attorney",
      "exceptionStackTrace": null,
      "matches": [
        "http://schemaAorg/Attorney",
        "http://schema:org/Attorney",
        "http://schema0org/Attorney",
        "http://schema/org/Attorney",
        "http://schema org/Attorney",
        "http://schemaaorg/Attorney"
      ]
    },
    {
      "regex": "\\s+data-parsoid\\s*=\\s*['\"]",
      "exceptionStackTrace": null,
      "matches": [
        " data-parsoid = '",
        " data-parsoid =  \"",
        " data-parsoid =\"",
        " data-parsoid  = \"",
        " data-parsoid= \"",
        "  data-parsoid = \"",
        "data-parsoid = \"",
        " data-parsoid=\"",
        " data-parsoid = \""
      ]
    },
    {
      "regex": "et:\"(.+?)\"",
      "exceptionStackTrace": null,
      "matches": [
        "et:\":\"",
        "et:\"\"\"",
        "et:\"eVil\"",
        "et:\"EVIL\"",
        "et:\"ev_il\"",
        "et:\"ev il\"",
        "et:\"ev4il\"",
        "et:\"e\"",
        "et:\" \"",
        "et:\"6\"",
        "et:\"_\"",
        "et:\"\"",
        "et:\"evil\""
      ]
    },
    { "regex": "attend", "exceptionStackTrace": null, "matches": ["attend"] },
    {
      "regex": "^#Error.*Please",
      "exceptionStackTrace": null,
      "matches": [
        "#Error#Please",
        "#ErroreVilPlease",
        "#ErrorEVILPlease",
        "#Errorev_ilPlease",
        "#Errorev ilPlease",
        "#Errorev4ilPlease",
        "#ErrorePlease",
        "#Error Please",
        "#Error6Please",
        "#Error_Please",
        "#ErrorPlease",
        "#ErrorevilPlease"
      ]
    },
    {
      "regex": "^<Load>\\/",
      "exceptionStackTrace": null,
      "matches": ["<Load>/"]
    },
    {
      "regex": "\\d{4}\\-\\d{1,2}\\-\\d{1,2} +\\d{1,2}:\\d{1,2}",
      "exceptionStackTrace": null,
      "matches": [
        "0000-0-0 0:000",
        "0000-0-0 0:00",
        "0000-0-0 0:",
        "0000-0-0 000:0",
        "0000-0-0 00:0",
        "0000-0-0 :0",
        "0000-0-0  0:0",
        "0000-0-00:0",
        "0000-0-000 0:0",
        "0000-0-00 0:0",
        "0000-0- 0:0",
        "0000-000-0 0:0",
        "0000-00-0 0:0",
        "0000--0 0:0",
        "00000-0-0 0:0",
        "000-0-0 0:0",
        "0000-0-0 0:0"
      ]
    },
    { "regex": "(?!^\\/)(\\/)", "exceptionStackTrace": null, "matches": ["/"] },
    {
      "regex": "^$base(\\.|$)",
      "exceptionStackTrace": null,
      "matches": ["base", "base."]
    },
    {
      "regex": "^[qPp]\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "I read the adapter in slot \"(.+?)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "I read the adapter in slot \"\"\"",
        "I read the adapter in slot \"eVil\"",
        "I read the adapter in slot \"EVIL\"",
        "I read the adapter in slot \"ev_il\"",
        "I read the adapter in slot \"ev il\"",
        "I read the adapter in slot \"ev4il\"",
        "I read the adapter in slot \"e\"",
        "I read the adapter in slot \" \"",
        "I read the adapter in slot \"6\"",
        "I read the adapter in slot \"_\"",
        "I read the adapter in slot \"\"",
        "I read the adapter in slot \"evil\""
      ]
    },
    {
      "regex": "(?:(?:`|\")?(\\w+)(?:`|\")?\\.)?(?:`|\")?(\\w+)(?:`|\")?",
      "exceptionStackTrace": null,
      "matches": [
        "`evil`.`evil``",
        "`evil`.`evil",
        "`evil`.`eVil`",
        "`evil`.`EVIL`",
        "`evil`.`ev_il`",
        "`evil`.`ev il`",
        "`evil`.`ev4il`",
        "`evil`.`e`",
        "`evil`.` `",
        "`evil`.`6`",
        "`evil`.`_`",
        "`evil`.``",
        "`evil`.``evil`",
        "`evil`.evil`",
        "`evil`.`evil`.`evil`",
        "`evil`",
        "`evil``.`evil`",
        "`evil.`evil`",
        "`eVil`.`evil`",
        "`EVIL`.`evil`",
        "`ev_il`.`evil`",
        "`ev il`.`evil`",
        "`ev4il`.`evil`",
        "`e`.`evil`",
        "` `.`evil`",
        "`6`.`evil`",
        "`_`.`evil`",
        "``.`evil`",
        "``evil`.`evil`",
        "evil`.`evil`",
        "evil",
        "\"evil`.`evil`",
        "`evil\".`evil`",
        "`evil`.\"evil`",
        "`evil`.`evil\"",
        "`evil`.`evil`"
      ]
    },
    {
      "regex": "embryonic\\/larval",
      "exceptionStackTrace": null,
      "matches": ["embryonic/larval"]
    },
    {
      "regex": "(?P<data>.+)",
      "exceptionStackTrace": null,
      "matches": [
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "^the paypal permissions callback page$",
      "exceptionStackTrace": null,
      "matches": ["the paypal permissions callback page"]
    },
    {
      "regex": "<package[^>]+version=['\"]([^\"']+)['\"]",
      "exceptionStackTrace": null,
      "matches": [
        "<packageevilversion=\"evil'",
        "<packageevilversion=\">\"",
        "<packageevilversion=\"=\"",
        "<packageevilversion=\"<\"",
        "<packageevilversion=\"'\"",
        "<packageevilversion=\"\"\"",
        "<packageevilversion=\"eVil\"",
        "<packageevilversion=\"EVIL\"",
        "<packageevilversion=\"ev_il\"",
        "<packageevilversion=\"ev il\"",
        "<packageevilversion=\"ev4il\"",
        "<packageevilversion=\"e\"",
        "<packageevilversion=\" \"",
        "<packageevilversion=\"6\"",
        "<packageevilversion=\"_\"",
        "<packageevilversion=\"\"",
        "<packageevilversion='evil\"",
        "<package>version=\"evil\"",
        "<package=version=\"evil\"",
        "<package<version=\"evil\"",
        "<package'version=\"evil\"",
        "<package\"version=\"evil\"",
        "<packageeVilversion=\"evil\"",
        "<packageEVILversion=\"evil\"",
        "<packageev_ilversion=\"evil\"",
        "<packageev ilversion=\"evil\"",
        "<packageev4ilversion=\"evil\"",
        "<packageeversion=\"evil\"",
        "<package version=\"evil\"",
        "<package6version=\"evil\"",
        "<package_version=\"evil\"",
        "<packageversion=\"evil\"",
        "<packageevilversion=\"evil\""
      ]
    },
    {
      "regex": "(\\d{2}/\\d{2}/\\d{4})(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "00/00/0000/",
        "00/00/0000eVil",
        "00/00/0000EVIL",
        "00/00/0000ev_il",
        "00/00/0000ev il",
        "00/00/0000ev4il",
        "00/00/0000e",
        "00/00/0000 ",
        "00/00/00006",
        "00/00/0000_",
        "00/00/00000evil",
        "00/00/000evil",
        "00/000/0000evil",
        "00/0/0000evil",
        "000/00/0000evil",
        "0/00/0000evil",
        "00/00/0000",
        "00/00/0000evil"
      ]
    },
    {
      "regex": "current ar archive",
      "exceptionStackTrace": null,
      "matches": ["current ar archive"]
    },
    {
      "regex": "$RegexXtickselect",
      "exceptionStackTrace": null,
      "matches": ["RegexXtickselect"]
    },
    {
      "regex": "\n                     ^\n                     \\s*\n                     ( [+-]? )\n                     (0?b)?\n                     (\n                         [01]*\n                         ( _ [01]+ )*\n                     )\n                     \\s*\n                     $\n                 ",
      "exceptionStackTrace": null,
      "matches": [
        "\n                     \n                      \n                      - \n                     0b\n                     \n                         1\n                          _ 1 \n                     \n                       \n                     \n                 ",
        "\n                     \n                      \n                      - \n                     0b\n                     \n                         1\n                          _ 1 \n                     \n                     \n                     \n                 ",
        "\n                     \n                      \n                      - \n                     0b\n                     \n                         1\n                          _ 1  _ 1 \n                     \n                      \n                     \n                 ",
        "\n                     \n                      \n                      - \n                     0b\n                     \n                         1\n                         \n                     \n                      \n                     \n                 ",
        "\n                     \n                      \n                      - \n                     0b\n                     \n                         1\n                          _ 11 \n                     \n                      \n                     \n                 ",
        "\n                     \n                      \n                      - \n                     0b\n                     \n                         1\n                          _  \n                     \n                      \n                     \n                 ",
        "\n                     \n                      \n                      - \n                     0b\n                     \n                         1\n                          _ 2 \n                     \n                      \n                     \n                 ",
        "\n                     \n                      \n                      - \n                     0b\n                     \n                         1\n                          _ 0 \n                     \n                      \n                     \n                 ",
        "\n                     \n                      \n                      - \n                     0b\n                     \n                         11\n                          _ 1 \n                     \n                      \n                     \n                 ",
        "\n                     \n                      \n                      - \n                     0b\n                     \n                         \n                          _ 1 \n                     \n                      \n                     \n                 ",
        "\n                     \n                      \n                      - \n                     0b\n                     \n                         2\n                          _ 1 \n                     \n                      \n                     \n                 ",
        "\n                     \n                      \n                      - \n                     0b\n                     \n                         0\n                          _ 1 \n                     \n                      \n                     \n                 ",
        "\n                     \n                      \n                      - \n                     0b0b\n                     \n                         1\n                          _ 1 \n                     \n                      \n                     \n                 ",
        "\n                     \n                      \n                      - \n                     \n                     \n                         1\n                          _ 1 \n                     \n                      \n                     \n                 ",
        "\n                     \n                      \n                      - \n                     00b\n                     \n                         1\n                          _ 1 \n                     \n                      \n                     \n                 ",
        "\n                     \n                      \n                      - \n                     b\n                     \n                         1\n                          _ 1 \n                     \n                      \n                     \n                 ",
        "\n                     \n                      \n                      -- \n                     0b\n                     \n                         1\n                          _ 1 \n                     \n                      \n                     \n                 ",
        "\n                     \n                      \n                       \n                     0b\n                     \n                         1\n                          _ 1 \n                     \n                      \n                     \n                 ",
        "\n                     \n                      \n                      + \n                     0b\n                     \n                         1\n                          _ 1 \n                     \n                      \n                     \n                 ",
        "\n                     \n                       \n                      - \n                     0b\n                     \n                         1\n                          _ 1 \n                     \n                      \n                     \n                 ",
        "\n                     \n                     \n                      - \n                     0b\n                     \n                         1\n                          _ 1 \n                     \n                      \n                     \n                 ",
        "\n                     \n                     \n                       \n                     \n                     \n                         \n                         \n                     \n                     \n                     \n                 ",
        "\n                     \n                      \n                      - \n                     0b\n                     \n                         1\n                          _ 1 \n                     \n                      \n                     \n                 "
      ]
    },
    {
      "regex": "(?![a-z]+$|[0-9]+$)^[a-zA-Z0-9]{6,16}$",
      "exceptionStackTrace": null,
      "matches": [
        "00000000000000000",
        "0000000000000000",
        "00000",
        "a00000",
        "A00000",
        "000000"
      ]
    },
    {
      "regex": "\\A[yntN]\\Z",
      "exceptionStackTrace": null,
      "matches": ["y", "t", "n", "a", "A", "N"]
    },
    {
      "regex": "^(?:const )?char ?\\*[\\*&]?$",
      "exceptionStackTrace": null,
      "matches": [
        "const char *&&",
        "const char *",
        "const char **",
        "const char  *&",
        "const char*&",
        "const const char *&",
        "char *&",
        "char*",
        "const char *&"
      ]
    },
    {
      "regex": "[$a-zA-Z_]\\w*",
      "exceptionStackTrace": null,
      "matches": [
        "_eVil",
        "_EVIL",
        "_ev_il",
        "_ev il",
        "_ev4il",
        "_e",
        "_ ",
        "_6",
        "__",
        "aevil",
        "Aevil",
        "$evil",
        "_",
        "_evil"
      ]
    },
    {
      "regex": "\\/css\\/style.[a-f0-9]{32}.css",
      "exceptionStackTrace": null,
      "matches": [
        "/css/stylea00000000000000000000000000000000Acss",
        "/css/stylea000000000000000000000000000000000css",
        "/css/stylea00000000000000000000000000000000/css",
        "/css/stylea00000000000000000000000000000000 css",
        "/css/stylea000000000000000000000000000000000acss",
        "/css/stylea0000000000000000000000000000000acss",
        "/css/styleag0000000000000000000000000000000acss",
        "/css/styleaa0000000000000000000000000000000acss",
        "/css/styleA00000000000000000000000000000000acss",
        "/css/style000000000000000000000000000000000acss",
        "/css/style/00000000000000000000000000000000acss",
        "/css/style 00000000000000000000000000000000acss",
        "/css/stylea00000000000000000000000000000000acss"
      ]
    },
    {
      "regex": "^load (.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "load eVil",
        "load EVIL",
        "load ev_il",
        "load ev il",
        "load ev4il",
        "load e",
        "load  ",
        "load 6",
        "load _",
        "load ",
        "load evil"
      ]
    },
    {
      "regex": "G([EI])",
      "exceptionStackTrace": null,
      "matches": ["GE", "GA", "GI"]
    },
    {
      "regex": "micromessenger",
      "exceptionStackTrace": null,
      "matches": ["micromessenger"]
    },
    {
      "regex": "^\\-\\-\\-\\-\\-BEGIN PUBLIC KEY\\-\\-\\-\\-\\-[\\S\\n]+\\-\\-\\-\\-\\-END PUBLIC KEY\\-\\-\\-\\-\\-$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    { "regex": "^0\\.9", "exceptionStackTrace": null, "matches": ["0.9"] },
    {
      "regex": "\\b(let) u(s)",
      "exceptionStackTrace": null,
      "matches": ["let us"]
    },
    {
      "regex": ",(\\s*[^,]+)(?=,|$)",
      "exceptionStackTrace": null,
      "matches": [
        ", ,",
        ", eVil",
        ", EVIL",
        ", ev_il",
        ", ev il",
        ", ev4il",
        ", e",
        ",  ",
        ", 6",
        ", _",
        ", ",
        ",  evil",
        ",evil",
        ", evil"
      ]
    },
    {
      "regex": "manager\\s*=> \\'yum\\'",
      "exceptionStackTrace": null,
      "matches": ["manager  => 'yum'", "manager=> 'yum'", "manager => 'yum'"]
    },
    {
      "regex": "^(Content-|MIME-)",
      "exceptionStackTrace": null,
      "matches": ["MIME-", "Content-"]
    },
    {
      "regex": "^<(\\d+)>(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "<0>>",
        "<0><",
        "<0>eVil",
        "<0>EVIL",
        "<0>ev_il",
        "<0>ev il",
        "<0>ev4il",
        "<0>e",
        "<0> ",
        "<0>6",
        "<0>_",
        "<00>evil",
        "<>evil",
        "<0>",
        "<0>evil"
      ]
    },
    { "regex": "wpa2", "exceptionStackTrace": null, "matches": ["wpa2"] },
    {
      "regex": "Migration 123-migration.js (or wrapper) didn't return a promise",
      "exceptionStackTrace": null,
      "matches": [
        "Migration 123-migrationAjs or wrapper didn't return a promise",
        "Migration 123-migration0js or wrapper didn't return a promise",
        "Migration 123-migration-js or wrapper didn't return a promise",
        "Migration 123-migration'js or wrapper didn't return a promise",
        "Migration 123-migration js or wrapper didn't return a promise",
        "Migration 123-migrationajs or wrapper didn't return a promise"
      ]
    },
    {
      "regex": "\\\\s\\s+(\\d+)",
      "exceptionStackTrace": null,
      "matches": ["\\s 00", "\\s ", "\\s  0", "\\s0", "\\s 0"]
    },
    {
      "regex": "You should write stub examples here:",
      "exceptionStackTrace": null,
      "matches": ["You should write stub examples here:"]
    },
    { "regex": "Black", "exceptionStackTrace": null, "matches": ["Black"] },
    {
      "regex": "^Release Date:\\s*",
      "exceptionStackTrace": null,
      "matches": ["Release Date:  ", "Release Date:", "Release Date: "]
    },
    {
      "regex": "\\s*(\\([-\\d]+\\))\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        " (-)  ",
        " (-)",
        " (--) ",
        " () ",
        " (0) ",
        "  (-) ",
        "(-) ",
        "(-)",
        " (-) "
      ]
    },
    {
      "regex": "Module '\\.\\.\\/package.json' is not allowed to be required\\. The path is outside the border!",
      "exceptionStackTrace": null,
      "matches": [
        "Module '../packageAjson' is not allowed to be required. The path is outside the border!",
        "Module '../package0json' is not allowed to be required. The path is outside the border!",
        "Module '../package/json' is not allowed to be required. The path is outside the border!",
        "Module '../package.json' is not allowed to be required. The path is outside the border!",
        "Module '../package'json' is not allowed to be required. The path is outside the border!",
        "Module '../package!json' is not allowed to be required. The path is outside the border!",
        "Module '../package json' is not allowed to be required. The path is outside the border!",
        "Module '../packageajson' is not allowed to be required. The path is outside the border!"
      ]
    },
    {
      "regex": "In.*1",
      "exceptionStackTrace": null,
      "matches": [
        "IneVil1",
        "InEVIL1",
        "Inev_il1",
        "Inev il1",
        "Inev4il1",
        "Ine1",
        "In 1",
        "In61",
        "In_1",
        "In1",
        "Inevil1"
      ]
    },
    {
      "regex": "\\$\\.rubySass\\(sassOptions\\)",
      "exceptionStackTrace": null,
      "matches": ["$.rubySass(sassOptions)"]
    },
    {
      "regex": "(?:size_)?in_bytes",
      "exceptionStackTrace": null,
      "matches": ["size_size_in_bytes", "in_bytes", "size_in_bytes"]
    },
    {
      "regex": "\\$(.{1})",
      "exceptionStackTrace": null,
      "matches": ["$aa", "$", "$A", "$0", "$$", "$ ", "$a"]
    },
    {
      "regex": "needs `browserslist-config-` prefix",
      "exceptionStackTrace": null,
      "matches": ["needs `browserslist-config-` prefix"]
    },
    {
      "regex": "has \"add\" operator with invalid value in \"optInt\"",
      "exceptionStackTrace": null,
      "matches": ["has \"add\" operator with invalid value in \"optInt\""]
    },
    {
      "regex": "^(.+\\d+\u00e5\u009c\u00b0\u00e5\u0089\u00b2)(?:\u00ef\u00bc\u0088(.+)\u00ef\u00bc\u0089)?$",
      "exceptionStackTrace": null,
      "matches": [
        "evil0\u00e5\u009c\u00b0\u00e5\u0089\u00b2\u00ef\u00bc\u0088evil\u00ef\u00bc\u0089\u00ef\u00bc\u0088evil\u00ef\u00bc\u0089",
        "evil0\u00e5\u009c\u00b0\u00e5\u0089\u00b2\u00ef\u00bc\u0088eVil\u00ef\u00bc\u0089",
        "evil0\u00e5\u009c\u00b0\u00e5\u0089\u00b2\u00ef\u00bc\u0088EVIL\u00ef\u00bc\u0089",
        "evil0\u00e5\u009c\u00b0\u00e5\u0089\u00b2\u00ef\u00bc\u0088ev_il\u00ef\u00bc\u0089",
        "evil0\u00e5\u009c\u00b0\u00e5\u0089\u00b2\u00ef\u00bc\u0088ev il\u00ef\u00bc\u0089",
        "evil0\u00e5\u009c\u00b0\u00e5\u0089\u00b2\u00ef\u00bc\u0088ev4il\u00ef\u00bc\u0089",
        "evil0\u00e5\u009c\u00b0\u00e5\u0089\u00b2\u00ef\u00bc\u0088e\u00ef\u00bc\u0089",
        "evil0\u00e5\u009c\u00b0\u00e5\u0089\u00b2\u00ef\u00bc\u0088 \u00ef\u00bc\u0089",
        "evil0\u00e5\u009c\u00b0\u00e5\u0089\u00b2\u00ef\u00bc\u00886\u00ef\u00bc\u0089",
        "evil0\u00e5\u009c\u00b0\u00e5\u0089\u00b2\u00ef\u00bc\u0088_\u00ef\u00bc\u0089",
        "evil0\u00e5\u009c\u00b0\u00e5\u0089\u00b2\u00ef\u00bc\u0088\u00ef\u00bc\u0089",
        "evil00\u00e5\u009c\u00b0\u00e5\u0089\u00b2\u00ef\u00bc\u0088evil\u00ef\u00bc\u0089",
        "evil\u00e5\u009c\u00b0\u00e5\u0089\u00b2\u00ef\u00bc\u0088evil\u00ef\u00bc\u0089",
        "eVil0\u00e5\u009c\u00b0\u00e5\u0089\u00b2\u00ef\u00bc\u0088evil\u00ef\u00bc\u0089",
        "EVIL0\u00e5\u009c\u00b0\u00e5\u0089\u00b2\u00ef\u00bc\u0088evil\u00ef\u00bc\u0089",
        "ev_il0\u00e5\u009c\u00b0\u00e5\u0089\u00b2\u00ef\u00bc\u0088evil\u00ef\u00bc\u0089",
        "ev il0\u00e5\u009c\u00b0\u00e5\u0089\u00b2\u00ef\u00bc\u0088evil\u00ef\u00bc\u0089",
        "ev4il0\u00e5\u009c\u00b0\u00e5\u0089\u00b2\u00ef\u00bc\u0088evil\u00ef\u00bc\u0089",
        "e0\u00e5\u009c\u00b0\u00e5\u0089\u00b2\u00ef\u00bc\u0088evil\u00ef\u00bc\u0089",
        " 0\u00e5\u009c\u00b0\u00e5\u0089\u00b2\u00ef\u00bc\u0088evil\u00ef\u00bc\u0089",
        "60\u00e5\u009c\u00b0\u00e5\u0089\u00b2\u00ef\u00bc\u0088evil\u00ef\u00bc\u0089",
        "_0\u00e5\u009c\u00b0\u00e5\u0089\u00b2\u00ef\u00bc\u0088evil\u00ef\u00bc\u0089",
        "0\u00e5\u009c\u00b0\u00e5\u0089\u00b2\u00ef\u00bc\u0088evil\u00ef\u00bc\u0089",
        "evil0\u00e5\u009c\u00b0\u00e5\u0089\u00b2",
        "evil0\u00e5\u009c\u00b0\u00e5\u0089\u00b2\u00ef\u00bc\u0088evil\u00ef\u00bc\u0089"
      ]
    },
    {
      "regex": "(^CROTA\\d*$)|(^(CD|PC)\\d+_\\d+[A-Z]?$)",
      "exceptionStackTrace": null,
      "matches": [
        "CD0_0AA",
        "CD0_00A",
        "CD0_A",
        "CD00_0A",
        "CD_0A",
        "CROTA00",
        "PC0_0",
        "CD0_0",
        "CROTA",
        "PC0_0A",
        "CD0_0A",
        "CROTA0"
      ]
    },
    {
      "regex": "^identifier|private-data$",
      "exceptionStackTrace": null,
      "matches": ["private-data", "identifier"]
    },
    {
      "regex": "^alpha.*$",
      "exceptionStackTrace": null,
      "matches": [
        "alphaeVil",
        "alphaEVIL",
        "alphaev_il",
        "alphaev il",
        "alphaev4il",
        "alphae",
        "alpha ",
        "alpha6",
        "alpha_",
        "alpha",
        "alphaevil"
      ]
    },
    { "regex": "\\\\O ", "exceptionStackTrace": null, "matches": ["\\O "] },
    {
      "regex": "^\\/route2",
      "exceptionStackTrace": null,
      "matches": ["/route2"]
    },
    {
      "regex": "^# Column_\\d+ ",
      "exceptionStackTrace": null,
      "matches": ["# Column_00 ", "# Column_ ", "# Column_0 "]
    },
    {
      "regex": "\\+\\s*\"aaa\": \"1\"",
      "exceptionStackTrace": null,
      "matches": ["+  \"aaa\": \"1\"", "+\"aaa\": \"1\"", "+ \"aaa\": \"1\""]
    },
    {
      "regex": "win32|windows|msdos|mswin|cygwin|mingw",
      "exceptionStackTrace": null,
      "matches": ["mingw", "cygwin", "mswin", "msdos", "windows", "win32"]
    },
    { "regex": "(ax)is$", "exceptionStackTrace": null, "matches": ["axis"] },
    {
      "regex": "\\+([0-9A-Fa-f]{2})",
      "exceptionStackTrace": null,
      "matches": ["+aaa", "+a", "+ga", "+Ga", "+Aa", "+0a", "+aa"]
    },
    {
      "regex": "(?:\\.\\.\\/)*(?:",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "missing ), unterminated subpattern"
      },
      "matches": []
    },
    { "regex": "^(stmt)$", "exceptionStackTrace": null, "matches": ["stmt"] },
    {
      "regex": "`.+?'",
      "exceptionStackTrace": null,
      "matches": [
        "``'",
        "`''",
        "`eVil'",
        "`EVIL'",
        "`ev_il'",
        "`ev il'",
        "`ev4il'",
        "`e'",
        "` '",
        "`6'",
        "`_'",
        "`'",
        "`evil'"
      ]
    },
    {
      "regex": "^the output contains:$",
      "exceptionStackTrace": null,
      "matches": ["the output contains:"]
    },
    {
      "regex": "[\\s]*cliptop: .*?[;]?",
      "exceptionStackTrace": null,
      "matches": [
        " cliptop: evil;;",
        " cliptop: evil",
        " cliptop: ;;",
        " cliptop: :;",
        " cliptop: eVil;",
        " cliptop: EVIL;",
        " cliptop: ev_il;",
        " cliptop: ev il;",
        " cliptop: ev4il;",
        " cliptop: e;",
        " cliptop:  ;",
        " cliptop: 6;",
        " cliptop: _;",
        " cliptop: ;",
        "  cliptop: evil;",
        "cliptop: evil;",
        "cliptop: ",
        " cliptop: evil;"
      ]
    },
    {
      "regex": "Registered By:\n\t(.+)\n",
      "exceptionStackTrace": null,
      "matches": [
        "Registered By:\n\t:\n",
        "Registered By:\n\teVil\n",
        "Registered By:\n\tEVIL\n",
        "Registered By:\n\tev_il\n",
        "Registered By:\n\tev il\n",
        "Registered By:\n\tev4il\n",
        "Registered By:\n\te\n",
        "Registered By:\n\t \n",
        "Registered By:\n\t6\n",
        "Registered By:\n\t_\n",
        "Registered By:\n\t\n",
        "Registered By:\n\tevil\n"
      ]
    },
    {
      "regex": "SPNameQualifier=\"Some SPName qualifier\"",
      "exceptionStackTrace": null,
      "matches": ["SPNameQualifier=\"Some SPName qualifier\""]
    },
    {
      "regex": "\\A\\@(\\w+)=\\\"([^\\\"]*)\\\"\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "^#<Resty:0x[a-f\\d]+ no-href>$",
      "exceptionStackTrace": null,
      "matches": [
        "#<Resty:0x00 no-href>",
        "#<Resty:0x no-href>",
        "#<Resty:0xg no-href>",
        "#<Resty:0xa no-href>",
        "#<Resty:0x0 no-href>"
      ]
    },
    {
      "regex": "(config.assets.debug = true)+",
      "exceptionStackTrace": null,
      "matches": [
        "configaassetsadebug = trueconfigaassetsadebug = true",
        "",
        "configaassetsAdebug = true",
        "configaassets=debug = true",
        "configaassets0debug = true",
        "configaassets debug = true",
        "configAassetsadebug = true",
        "config=assetsadebug = true",
        "config0assetsadebug = true",
        "config assetsadebug = true",
        "configaassetsadebug = true"
      ]
    },
    {
      "regex": "new admin product page",
      "exceptionStackTrace": null,
      "matches": ["new admin product page"]
    },
    {
      "regex": "(\\(|, ?)\\$\\$",
      "exceptionStackTrace": null,
      "matches": [",  $$", ",$$", ", $$", "($$"]
    },
    {
      "regex": "^https:\\/\\/([^@]+@)?bitbucket.org\\/(?<user>[^\\/]+)\\/(?<repo>.+)\\.git$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<u"
      },
      "matches": []
    },
    {
      "regex": "^\\s*?\n                       (recursive|pure|elemental)?\\s*?\n                       (\n                           character\\s*?(\\([\\w\\s\\=\\(\\)\\*]+?\\))?\\s+\n                         | type\\s*?\\([\\w\\s]+?\\)\\s+\n                         | integer\\s*?(\\([\\w\\s\\=\\(\\)\\*]+?\\))?\\s+\n                         | real\\s*?(\\([\\w\\s\\=\\(\\)\\*]+?\\))?\\s+\n                         | double\\s+precision\\s+\n                         | logical\\s*?(\\([\\w\\s\\=\\(\\)\\*]+?\\))?\\s+\n                         | complex\\s*?(\\([\\w\\s\\=\\(\\)\\*]+?\\))?\\s+\n                       )?\n                       function\\s+(\\w+)\\s*?\n                       (\\(.*?\\))?(\\s+result\\((.*?)\\))?\\s*?(!.*?)?$\n                      ",
      "exceptionStackTrace": null,
      "matches": [
        " \n                       recursive \n                        complex (evil)  \n                       \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        complex (evil)\n                       \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        complex (evil)(evil) \n                       \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        complex  \n                       \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        complex (=) \n                       \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        complex (*) \n                       \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        complex ()) \n                       \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        complex (() \n                       \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        complex (!) \n                       \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        complex (eVil) \n                       \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        complex (EVIL) \n                       \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        complex (ev_il) \n                       \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        complex (ev il) \n                       \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        complex (ev4il) \n                       \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        complex (e) \n                       \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        complex ( ) \n                       \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        complex (6) \n                       \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        complex (_) \n                       \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        complex () \n                       \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        complex  (evil) \n                       \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        complex(evil) \n                       \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        logical (evil)  \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        logical (evil)\n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        logical (evil)(evil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        logical  \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        logical (=) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        logical (*) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        logical ()) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        logical (() \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        logical (!) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        logical (eVil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        logical (EVIL) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        logical (ev_il) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        logical (ev il) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        logical (ev4il) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        logical (e) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        logical ( ) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        logical (6) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        logical (_) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        logical () \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        logical  (evil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        logical(evil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        double precision  \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        double precision\n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        double  precision \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        doubleprecision \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        real (evil)  \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        real (evil)\n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        real (evil)(evil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        real  \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        real (=) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        real (*) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        real ()) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        real (() \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        real (!) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        real (eVil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        real (EVIL) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        real (ev_il) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        real (ev il) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        real (ev4il) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        real (e) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        real ( ) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        real (6) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        real (_) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        real () \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        real  (evil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        real(evil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        integer (evil)  \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        integer (evil)\n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        integer (evil)(evil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        integer  \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        integer (=) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        integer (*) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        integer ()) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        integer (() \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        integer (!) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        integer (eVil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        integer (EVIL) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        integer (ev_il) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        integer (ev il) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        integer (ev4il) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        integer (e) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        integer ( ) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        integer (6) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        integer (_) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        integer () \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        integer  (evil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        integer(evil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        type (evil)  \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        type (evil)\n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        type (eVil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        type (EVIL) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        type (ev_il) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        type (ev il) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        type (ev4il) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        type (e) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        type ( ) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        type (6) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        type (_) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        type () \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        type  (evil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        type(evil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(evil) !evil!evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(evil) \n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(evil) !=\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(evil) !*\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(evil) !)\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(evil) !(\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(evil) !!\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(evil) !eVil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(evil) !EVIL\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(evil) !ev_il\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(evil) !ev il\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(evil) !ev4il\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(evil) !e\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(evil) ! \n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(evil) !6\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(evil) !_\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(evil) !\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(evil)  !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(evil)!evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(=) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(*) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result()) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(() !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(!) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(eVil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(EVIL) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(ev_il) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(ev il) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(ev4il) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(e) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result( ) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(6) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(_) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result() !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil)  result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil)result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil)(evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                        result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (=) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (*) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       ()) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (() result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (!) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (eVil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (EVIL) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (ev_il) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (ev il) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (ev4il) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (e) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       ( ) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (6) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (_) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       () result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil  \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil\n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function eVil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function EVIL \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function ev_il \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function ev il \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function ev4il \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function e \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function   \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function 6 \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function _ \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function  \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function  evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       functionevil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil)  \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil)\n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil)(evil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character  \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (=) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (*) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character ()) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (() \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (!) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (eVil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (EVIL) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (ev_il) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (ev il) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (ev4il) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (e) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character ( ) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (6) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (_) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character () \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character  (evil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character(evil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive  \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive\n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursiverecursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                        \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        "  \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        "\n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        "\n                       \n                       \n                       function evil\n                       \n                      ",
        " \n                       elemental \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       pure \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        complex (evil) \n                       \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        logical (evil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        double precision \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        real (evil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        integer (evil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                        type (evil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      ",
        " \n                       recursive \n                       \n                           character (evil) \n                         \n                       function evil \n                       (evil) result(evil) !evil\n                      "
      ]
    },
    {
      "regex": "\n      /compare/ # match any URL beginning with /compare/\n      (.+)      # extract the full path (including any directories)\n      /         # match the final slash\n      ([^.]+)   # match the first SHA1\n      \\.{2,3}   # match .. or ...\n      (.+)      # match the second SHA1\n    ",
      "exceptionStackTrace": null,
      "matches": [
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aaa\n      /      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aaa\n      .      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aaa\n      #      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aaa\n      eVil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aaa\n      EVIL      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aaa\n      ev_il      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aaa\n      ev il      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aaa\n      ev4il      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aaa\n      e      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aaa\n             # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aaa\n      6      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aaa\n      _      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aaa\n            # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aaA\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aa0\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aa/\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aa.\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aa#\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aa \n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aAa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or a0a\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or a/a\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or a.a\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or a#a\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or a a\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or Aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or 0aa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or /aa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or .aa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or #aa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or  aa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aA or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match a0 or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match a/ or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match a. or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match a# or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match a  or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match Aa or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match 0a or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match /a or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match .a or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match #a or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match  a or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ....   # match aa or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ...   # match aa or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      .   # match aa or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      /   # match the first SHA1\n      ..   # match aa or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      .   # match the first SHA1\n      ..   # match aa or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      #   # match the first SHA1\n      ..   # match aa or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      eVil   # match the first SHA1\n      ..   # match aa or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      EVIL   # match the first SHA1\n      ..   # match aa or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      ev_il   # match the first SHA1\n      ..   # match aa or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      ev il   # match the first SHA1\n      ..   # match aa or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      ev4il   # match the first SHA1\n      ..   # match aa or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      e   # match the first SHA1\n      ..   # match aa or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n          # match the first SHA1\n      ..   # match aa or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      6   # match the first SHA1\n      ..   # match aa or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      _   # match the first SHA1\n      ..   # match aa or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n         # match the first SHA1\n      ..   # match aa or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      /      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      .      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      #      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      eVil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      EVIL      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      ev_il      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      ev il      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      ev4il      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      e      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n             # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      6      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      _      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n            # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aaa\n      evil      # match the second SHA1\n    ",
        "\n      /compare/ # match any URL beginning with /compare/\n      evil      # extract the full path including any directories\n      /         # match the final slash\n      evil   # match the first SHA1\n      ..   # match aa or aaa\n      evil      # match the second SHA1\n    "
      ]
    },
    {
      "regex": "_atom_site.group_PDB",
      "exceptionStackTrace": null,
      "matches": [
        "_atom_site_group_PDB",
        "_atom_siteAgroup_PDB",
        "_atom_site0group_PDB",
        "_atom_site group_PDB",
        "_atom_siteagroup_PDB"
      ]
    },
    {
      "regex": "\u00e2\u20ac\u00b9",
      "exceptionStackTrace": null,
      "matches": ["\u00e2\u20ac\u00b9"]
    },
    {
      "regex": "^(get_|post_|put_|delete_)*(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "get_eVil",
        "get_EVIL",
        "get_ev_il",
        "get_ev il",
        "get_ev4il",
        "get_e",
        "get_ ",
        "get_6",
        "get__",
        "get_",
        "get_get_evil",
        "evil",
        "",
        "delete_evil",
        "put_evil",
        "post_evil",
        "get_evil"
      ]
    },
    {
      "regex": "_templateObject\\d*_[A-Fa-f0-9]+\\s*=",
      "exceptionStackTrace": null,
      "matches": [
        "_templateObject0_0  =",
        "_templateObject0_0=",
        "_templateObject0_00 =",
        "_templateObject0_ =",
        "_templateObject0_g =",
        "_templateObject0_a =",
        "_templateObject0_G =",
        "_templateObject0_A =",
        "_templateObject00_0 =",
        "_templateObject_0 =",
        "_templateObject_0=",
        "_templateObject0_0 ="
      ]
    },
    {
      "regex": "^\\s*(?:(?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2}))\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        " 0000.250.250.250 ",
        " 000.250.250.250 ",
        " 0.250.250.250 ",
        " 20.250.250.250 ",
        " 250.0000.250.250 ",
        " 250.000.250.250 ",
        " 250.0.250.250 ",
        " 250.20.250.250 ",
        " 250.250.0000.250 ",
        " 250.250.000.250 ",
        " 250.250.0.250 ",
        " 250.250.20.250 ",
        " 250.250.250.0000 ",
        " 250.250.250.000 ",
        " 250.250.250.0 ",
        " 250.250.250.20 ",
        " 250.250.250.250  ",
        " 250.250.250.250",
        " 250.250.250.256 ",
        " 250.250.256.250 ",
        " 250.256.250.250 ",
        " 256.250.250.250 ",
        "  250.250.250.250 ",
        "250.250.250.250 ",
        "0.250.250.250",
        "200.250.250.250",
        "250.0.250.250",
        "250.200.250.250",
        "250.250.0.250",
        "250.250.200.250",
        "250.250.250.0",
        "250.250.250.200",
        "250.250.250.250",
        " 00.250.250.250 ",
        " 200.250.250.250 ",
        " 250.00.250.250 ",
        " 250.200.250.250 ",
        " 250.250.00.250 ",
        " 250.250.200.250 ",
        " 250.250.250.00 ",
        " 250.250.250.200 ",
        " 250.250.250.250 "
      ]
    },
    {
      "regex": "[^\\w\\-' ]+",
      "exceptionStackTrace": null,
      "matches": [
        "-",
        "'",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "^locations$",
      "exceptionStackTrace": null,
      "matches": ["locations"]
    },
    { "regex": "^ios", "exceptionStackTrace": null, "matches": ["ios"] },
    { "regex": "__LLVM", "exceptionStackTrace": null, "matches": ["__LLVM"] },
    {
      "regex": "^(\\+|\\-|\\<|source|join|merge)",
      "exceptionStackTrace": null,
      "matches": ["merge", "join", "source", "<", "-", "+"]
    },
    {
      "regex": "^(\\d+)](.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "0]]",
        "0]eVil",
        "0]EVIL",
        "0]ev_il",
        "0]ev il",
        "0]ev4il",
        "0]e",
        "0] ",
        "0]6",
        "0]_",
        "00]evil",
        "]evil",
        "0]",
        "0]evil"
      ]
    },
    { "regex": "[\\$\\,]", "exceptionStackTrace": null, "matches": ["$", ","] },
    {
      "regex": "^(index|main|home)$",
      "exceptionStackTrace": null,
      "matches": ["home", "main", "index"]
    },
    {
      "regex": "[\\d.]+Q",
      "exceptionStackTrace": null,
      "matches": ["..Q", "Q", "0Q", ".Q"]
    },
    {
      "regex": "\\$.+\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "\\. [^\\.]+ \\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "(Sony)(?:BDP\\/|\\/)?([^ /;\\)]+)[ /;\\)]",
      "exceptionStackTrace": null,
      "matches": [
        "SonyBDP/evil;",
        "SonyBDP/evil/",
        "SonyBDP/evil ",
        "SonyBDP/;)",
        "SonyBDP//)",
        "SonyBDP/))",
        "SonyBDP/eVil)",
        "SonyBDP/EVIL)",
        "SonyBDP/ev_il)",
        "SonyBDP/ev il)",
        "SonyBDP/ev4il)",
        "SonyBDP/e)",
        "SonyBDP/ )",
        "SonyBDP/6)",
        "SonyBDP/_)",
        "SonyBDP/)",
        "SonyBDP/BDP/evil)",
        "Sonyevil)",
        "Sony/evil)",
        "SonyBDP/evil)"
      ]
    },
    {
      "regex": "^\\/{3}(\\d{2}(|MPS|KMH|KT))$",
      "exceptionStackTrace": null,
      "matches": [
        "///00MPSMPS",
        "///000MPS",
        "///0MPS",
        "////00MPS",
        "//00MPS",
        "///00",
        "///00KT",
        "///00KMH",
        "///00MPS"
      ]
    },
    { "regex": "^ham", "exceptionStackTrace": null, "matches": ["ham"] },
    {
      "regex": "organisation",
      "exceptionStackTrace": null,
      "matches": ["organisation"]
    },
    { "regex": "Flycast", "exceptionStackTrace": null, "matches": ["Flycast"] },
    {
      "regex": "UNSIGNED_WORD\\((.*?)\\)",
      "exceptionStackTrace": null,
      "matches": [
        "UNSIGNED_WORD())",
        "UNSIGNED_WORD(()",
        "UNSIGNED_WORD(eVil)",
        "UNSIGNED_WORD(EVIL)",
        "UNSIGNED_WORD(ev_il)",
        "UNSIGNED_WORD(ev il)",
        "UNSIGNED_WORD(ev4il)",
        "UNSIGNED_WORD(e)",
        "UNSIGNED_WORD( )",
        "UNSIGNED_WORD(6)",
        "UNSIGNED_WORD(_)",
        "UNSIGNED_WORD()",
        "UNSIGNED_WORD(evil)"
      ]
    },
    {
      "regex": "[\\/\\\\]fake[\\/\\\\]\\.jshintrc$",
      "exceptionStackTrace": null,
      "matches": ["\\fake/.jshintrc", "/fake\\.jshintrc", "\\fake\\.jshintrc"]
    },
    {
      "regex": "(?:year|month|day|hour|minute|second)$",
      "exceptionStackTrace": null,
      "matches": ["second", "minute", "hour", "day", "month", "year"]
    },
    {
      "regex": "([0-9]+)?\\.[0-9]+",
      "exceptionStackTrace": null,
      "matches": ["0.00", "0.", "00.0", ".0", "0.0"]
    },
    {
      "regex": "\\G (.) ",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\G"
      },
      "matches": []
    },
    {
      "regex": "(.*?)\\.local$",
      "exceptionStackTrace": null,
      "matches": [
        "..local",
        "eVil.local",
        "EVIL.local",
        "ev_il.local",
        "ev il.local",
        "ev4il.local",
        "e.local",
        " .local",
        "6.local",
        "_.local",
        ".local",
        "evil.local"
      ]
    },
    {
      "regex": "(G|S|C)",
      "exceptionStackTrace": null,
      "matches": ["C", "S", "G"]
    },
    {
      "regex": "task.chain\\(f\\): f is not a function\\. Actual value: 1",
      "exceptionStackTrace": null,
      "matches": [
        "taskAchain(f): f is not a function. Actual value: 1",
        "task:chain(f): f is not a function. Actual value: 1",
        "task0chain(f): f is not a function. Actual value: 1",
        "task.chain(f): f is not a function. Actual value: 1",
        "task)chain(f): f is not a function. Actual value: 1",
        "task(chain(f): f is not a function. Actual value: 1",
        "task chain(f): f is not a function. Actual value: 1",
        "taskachain(f): f is not a function. Actual value: 1"
      ]
    },
    {
      "regex": "(a (b(?x: (c d) (?-x:(e f) )g) h)i j)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (internal): Unexpected extension ?-"
      },
      "matches": []
    },
    {
      "regex": "^([^:]+):(?:/{2})?(.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil://:",
        "evil:///",
        "evil://eVil",
        "evil://EVIL",
        "evil://ev_il",
        "evil://ev il",
        "evil://ev4il",
        "evil://e",
        "evil:// ",
        "evil://6",
        "evil://_",
        "evil://",
        "evil:////evil",
        "evil:///evil",
        "evil:/evil",
        ":://evil",
        "/://evil",
        "eVil://evil",
        "EVIL://evil",
        "ev_il://evil",
        "ev il://evil",
        "ev4il://evil",
        "e://evil",
        " ://evil",
        "6://evil",
        "_://evil",
        "://evil",
        "evil:evil",
        "evil://evil"
      ]
    },
    { "regex": "\\$LINE", "exceptionStackTrace": null, "matches": ["$LINE"] },
    {
      "regex": "export type FooActions = LoadFoos",
      "exceptionStackTrace": null,
      "matches": ["export type FooActions = LoadFoos"]
    },
    {
      "regex": "^:(\\d{6})\\s(\\d{6})\\s\n\t\t\t\t\t($::sha1)\\s($::sha1)\\s\n\t\t\t\t\t([MTCRAD])\\d*$",
      "exceptionStackTrace": null,
      "matches": [
        ":000000 000000 \n\t\t\t\t\t::sha1 ::sha1 \n\t\t\t\t\tD00",
        ":000000 000000 \n\t\t\t\t\t::sha1 ::sha1 \n\t\t\t\t\tT0",
        ":000000 000000 \n\t\t\t\t\t::sha1 ::sha1 \n\t\t\t\t\tR0",
        ":000000 000000 \n\t\t\t\t\t::sha1 ::sha1 \n\t\t\t\t\tM0",
        ":000000 000000 \n\t\t\t\t\t::sha1 ::sha1 \n\t\t\t\t\tC0",
        ":000000 000000 \n\t\t\t\t\t::sha1 ::sha1 \n\t\t\t\t\tB0",
        ":000000 000000 \n\t\t\t\t\t::sha1 ::sha1 \n\t\t\t\t\tA0",
        ":000000 0000000 \n\t\t\t\t\t::sha1 ::sha1 \n\t\t\t\t\tD0",
        ":000000 00000 \n\t\t\t\t\t::sha1 ::sha1 \n\t\t\t\t\tD0",
        ":0000000 000000 \n\t\t\t\t\t::sha1 ::sha1 \n\t\t\t\t\tD0",
        ":00000 000000 \n\t\t\t\t\t::sha1 ::sha1 \n\t\t\t\t\tD0",
        ":000000 000000 \n\t\t\t\t\t::sha1 ::sha1 \n\t\t\t\t\tD",
        ":000000 000000 \n\t\t\t\t\t::sha1 ::sha1 \n\t\t\t\t\tD0"
      ]
    },
    {
      "regex": "Gemfile.rails-(\\d+).\\d+.x",
      "exceptionStackTrace": null,
      "matches": [
        "Gemfilearails-0a0Ax",
        "Gemfilearails-0a00x",
        "Gemfilearails-0a0-x",
        "Gemfilearails-0a0 x",
        "Gemfilearails-0a00ax",
        "Gemfilearails-0aax",
        "Gemfilearails-0A0ax",
        "Gemfilearails-000ax",
        "Gemfilearails-0-0ax",
        "Gemfilearails-0 0ax",
        "Gemfilearails-00a0ax",
        "Gemfilearails-a0ax",
        "GemfileArails-0a0ax",
        "Gemfile0rails-0a0ax",
        "Gemfile-rails-0a0ax",
        "Gemfile rails-0a0ax",
        "Gemfilearails-0a0ax"
      ]
    },
    {
      "regex": "^me(/.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "me//",
        "me/eVil",
        "me/EVIL",
        "me/ev_il",
        "me/ev il",
        "me/ev4il",
        "me/e",
        "me/ ",
        "me/6",
        "me/_",
        "me/",
        "me/evil"
      ]
    },
    { "regex": "\\.map$", "exceptionStackTrace": null, "matches": [".map"] },
    {
      "regex": "Aria\\.loadTemplate",
      "exceptionStackTrace": null,
      "matches": ["Aria.loadTemplate"]
    },
    {
      "regex": "<input readonly=\\\"readonly\\\" (.*name\\s*=\\s*\\\"?$self->{'CFG'}{'captcha_plugin_start'}_$self->{'captcha_name'}\\\"?)",
      "exceptionStackTrace": null,
      "matches": [
        "<input readonly=\"readonly\" evilname = \"self->{'CFG'}{'captcha_plugin_start'}_self->{'captcha_name'}\"\"",
        "<input readonly=\"readonly\" evilname = \"self->{'CFG'}{'captcha_plugin_start'}_self->{'captcha_name'}",
        "<input readonly=\"readonly\" evilname = \"\"self->{'CFG'}{'captcha_plugin_start'}_self->{'captcha_name'}\"",
        "<input readonly=\"readonly\" evilname = self->{'CFG'}{'captcha_plugin_start'}_self->{'captcha_name'}\"",
        "<input readonly=\"readonly\" evilname =  \"self->{'CFG'}{'captcha_plugin_start'}_self->{'captcha_name'}\"",
        "<input readonly=\"readonly\" evilname =\"self->{'CFG'}{'captcha_plugin_start'}_self->{'captcha_name'}\"",
        "<input readonly=\"readonly\" evilname  = \"self->{'CFG'}{'captcha_plugin_start'}_self->{'captcha_name'}\"",
        "<input readonly=\"readonly\" evilname= \"self->{'CFG'}{'captcha_plugin_start'}_self->{'captcha_name'}\"",
        "<input readonly=\"readonly\" }name = \"self->{'CFG'}{'captcha_plugin_start'}_self->{'captcha_name'}\"",
        "<input readonly=\"readonly\" {name = \"self->{'CFG'}{'captcha_plugin_start'}_self->{'captcha_name'}\"",
        "<input readonly=\"readonly\" >name = \"self->{'CFG'}{'captcha_plugin_start'}_self->{'captcha_name'}\"",
        "<input readonly=\"readonly\" =name = \"self->{'CFG'}{'captcha_plugin_start'}_self->{'captcha_name'}\"",
        "<input readonly=\"readonly\" <name = \"self->{'CFG'}{'captcha_plugin_start'}_self->{'captcha_name'}\"",
        "<input readonly=\"readonly\" -name = \"self->{'CFG'}{'captcha_plugin_start'}_self->{'captcha_name'}\"",
        "<input readonly=\"readonly\" 'name = \"self->{'CFG'}{'captcha_plugin_start'}_self->{'captcha_name'}\"",
        "<input readonly=\"readonly\" \"name = \"self->{'CFG'}{'captcha_plugin_start'}_self->{'captcha_name'}\"",
        "<input readonly=\"readonly\" eVilname = \"self->{'CFG'}{'captcha_plugin_start'}_self->{'captcha_name'}\"",
        "<input readonly=\"readonly\" EVILname = \"self->{'CFG'}{'captcha_plugin_start'}_self->{'captcha_name'}\"",
        "<input readonly=\"readonly\" ev_ilname = \"self->{'CFG'}{'captcha_plugin_start'}_self->{'captcha_name'}\"",
        "<input readonly=\"readonly\" ev ilname = \"self->{'CFG'}{'captcha_plugin_start'}_self->{'captcha_name'}\"",
        "<input readonly=\"readonly\" ev4ilname = \"self->{'CFG'}{'captcha_plugin_start'}_self->{'captcha_name'}\"",
        "<input readonly=\"readonly\" ename = \"self->{'CFG'}{'captcha_plugin_start'}_self->{'captcha_name'}\"",
        "<input readonly=\"readonly\"  name = \"self->{'CFG'}{'captcha_plugin_start'}_self->{'captcha_name'}\"",
        "<input readonly=\"readonly\" 6name = \"self->{'CFG'}{'captcha_plugin_start'}_self->{'captcha_name'}\"",
        "<input readonly=\"readonly\" _name = \"self->{'CFG'}{'captcha_plugin_start'}_self->{'captcha_name'}\"",
        "<input readonly=\"readonly\" name = \"self->{'CFG'}{'captcha_plugin_start'}_self->{'captcha_name'}\"",
        "<input readonly=\"readonly\" name=self->{'CFG'}{'captcha_plugin_start'}_self->{'captcha_name'}",
        "<input readonly=\"readonly\" evilname = \"self->{'CFG'}{'captcha_plugin_start'}_self->{'captcha_name'}\""
      ]
    },
    {
      "regex": "^I should be able to add a comment$",
      "exceptionStackTrace": null,
      "matches": ["I should be able to add a comment"]
    },
    {
      "regex": "<!-- !!([^!]+)!!([^!]+)!! -->",
      "exceptionStackTrace": null,
      "matches": [
        "<!-- !!evil!!>!! -->",
        "<!-- !!evil!!<!! -->",
        "<!-- !!evil!!-!! -->",
        "<!-- !!evil!!!!! -->",
        "<!-- !!evil!!eVil!! -->",
        "<!-- !!evil!!EVIL!! -->",
        "<!-- !!evil!!ev_il!! -->",
        "<!-- !!evil!!ev il!! -->",
        "<!-- !!evil!!ev4il!! -->",
        "<!-- !!evil!!e!! -->",
        "<!-- !!evil!! !! -->",
        "<!-- !!evil!!6!! -->",
        "<!-- !!evil!!_!! -->",
        "<!-- !!evil!!!! -->",
        "<!-- !!>!!evil!! -->",
        "<!-- !!<!!evil!! -->",
        "<!-- !!-!!evil!! -->",
        "<!-- !!!!!evil!! -->",
        "<!-- !!eVil!!evil!! -->",
        "<!-- !!EVIL!!evil!! -->",
        "<!-- !!ev_il!!evil!! -->",
        "<!-- !!ev il!!evil!! -->",
        "<!-- !!ev4il!!evil!! -->",
        "<!-- !!e!!evil!! -->",
        "<!-- !! !!evil!! -->",
        "<!-- !!6!!evil!! -->",
        "<!-- !!_!!evil!! -->",
        "<!-- !!!!evil!! -->",
        "<!-- !!evil!!evil!! -->"
      ]
    },
    {
      "regex": "[\\x00-\\x09\\x0B\\x0C\\x1E\\x1F]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 0"
      },
      "matches": []
    },
    {
      "regex": "^\\p{Alpha}{3}",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\p"
      },
      "matches": []
    },
    {
      "regex": "\\.rejectUtilsScriptPromise",
      "exceptionStackTrace": null,
      "matches": [".rejectUtilsScriptPromise"]
    },
    { "regex": "gpg$", "exceptionStackTrace": null, "matches": ["gpg"] },
    {
      "regex": "StaticMatic::TemplateError",
      "exceptionStackTrace": null,
      "matches": ["StaticMatic::TemplateError"]
    },
    {
      "regex": "UTF-8 Unicode text",
      "exceptionStackTrace": null,
      "matches": ["UTF-8 Unicode text"]
    },
    {
      "regex": "^ (.+?) (?:_([^_,]+))? ,([^,]+) (?:,(.+))? ",
      "exceptionStackTrace": null,
      "matches": [
        " evil _evil ,evil ,evil,evil ",
        " evil _evil ,evil  ",
        " evil _evil ,evil ,, ",
        " evil _evil ,evil ,eVil ",
        " evil _evil ,evil ,EVIL ",
        " evil _evil ,evil ,ev_il ",
        " evil _evil ,evil ,ev il ",
        " evil _evil ,evil ,ev4il ",
        " evil _evil ,evil ,e ",
        " evil _evil ,evil ,  ",
        " evil _evil ,evil ,6 ",
        " evil _evil ,evil ,_ ",
        " evil _evil ,evil , ",
        " evil _evil ,, ,evil ",
        " evil _evil ,eVil ,evil ",
        " evil _evil ,EVIL ,evil ",
        " evil _evil ,ev_il ,evil ",
        " evil _evil ,ev il ,evil ",
        " evil _evil ,ev4il ,evil ",
        " evil _evil ,e ,evil ",
        " evil _evil ,  ,evil ",
        " evil _evil ,6 ,evil ",
        " evil _evil ,_ ,evil ",
        " evil _evil , ,evil ",
        " evil _evil_evil ,evil ,evil ",
        " evil  ,evil ,evil ",
        " evil _, ,evil ,evil ",
        " evil _eVil ,evil ,evil ",
        " evil _EVIL ,evil ,evil ",
        " evil _ev_il ,evil ,evil ",
        " evil _ev il ,evil ,evil ",
        " evil _ev4il ,evil ,evil ",
        " evil _e ,evil ,evil ",
        " evil _  ,evil ,evil ",
        " evil _6 ,evil ,evil ",
        " evil __ ,evil ,evil ",
        " evil _ ,evil ,evil ",
        " , _evil ,evil ,evil ",
        " eVil _evil ,evil ,evil ",
        " EVIL _evil ,evil ,evil ",
        " ev_il _evil ,evil ,evil ",
        " ev il _evil ,evil ,evil ",
        " ev4il _evil ,evil ,evil ",
        " e _evil ,evil ,evil ",
        "   _evil ,evil ,evil ",
        " 6 _evil ,evil ,evil ",
        " _ _evil ,evil ,evil ",
        "  _evil ,evil ,evil ",
        " evil  ,evil  ",
        " evil _evil ,evil ,evil "
      ]
    },
    {
      "regex": "/gui/.*[?&]action=getfiles&*.*",
      "exceptionStackTrace": null,
      "matches": [
        "/gui/evil&action=getfiles&?",
        "/gui/evil&action=getfiles&=",
        "/gui/evil&action=getfiles&/",
        "/gui/evil&action=getfiles&&",
        "/gui/evil&action=getfiles&eVil",
        "/gui/evil&action=getfiles&EVIL",
        "/gui/evil&action=getfiles&ev_il",
        "/gui/evil&action=getfiles&ev il",
        "/gui/evil&action=getfiles&ev4il",
        "/gui/evil&action=getfiles&e",
        "/gui/evil&action=getfiles& ",
        "/gui/evil&action=getfiles&6",
        "/gui/evil&action=getfiles&_",
        "/gui/evil&action=getfiles&",
        "/gui/evil&action=getfiles&&evil",
        "/gui/evil&action=getfilesevil",
        "/gui/evil?action=getfiles&evil",
        "/gui/?&action=getfiles&evil",
        "/gui/=&action=getfiles&evil",
        "/gui//&action=getfiles&evil",
        "/gui/&&action=getfiles&evil",
        "/gui/eVil&action=getfiles&evil",
        "/gui/EVIL&action=getfiles&evil",
        "/gui/ev_il&action=getfiles&evil",
        "/gui/ev il&action=getfiles&evil",
        "/gui/ev4il&action=getfiles&evil",
        "/gui/e&action=getfiles&evil",
        "/gui/ &action=getfiles&evil",
        "/gui/6&action=getfiles&evil",
        "/gui/_&action=getfiles&evil",
        "/gui/&action=getfiles&evil",
        "/gui/&action=getfiles",
        "/gui/evil&action=getfiles&evil"
      ]
    },
    {
      "regex": "^Invalid REST API identifier specified",
      "exceptionStackTrace": null,
      "matches": ["Invalid REST API identifier specified"]
    },
    {
      "regex": "$character",
      "exceptionStackTrace": null,
      "matches": ["character"]
    },
    { "regex": "\\bQt\\/\\b", "exceptionStackTrace": null, "matches": ["Qt/"] },
    {
      "regex": "l\u00fcnch",
      "exceptionStackTrace": null,
      "matches": ["l\u00fcnch"]
    },
    {
      "regex": "pfam|search",
      "exceptionStackTrace": null,
      "matches": ["search", "pfam"]
    },
    {
      "regex": "invalid_value",
      "exceptionStackTrace": null,
      "matches": ["invalid_value"]
    },
    {
      "regex": "Try wrapping the first argument",
      "exceptionStackTrace": null,
      "matches": ["Try wrapping the first argument"]
    },
    {
      "regex": "(raw)(\\s*)(%\\})",
      "exceptionStackTrace": null,
      "matches": ["raw  %}", "raw%}", "raw %}"]
    },
    {
      "regex": "^\\n{{!}},-",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "10.1038",
      "exceptionStackTrace": null,
      "matches": ["10_1038", "10A1038", "1001038", "10 1038", "10a1038"]
    },
    {
      "regex": "\\\\?\\[(.*?)\\\\?\\]",
      "exceptionStackTrace": null,
      "matches": [
        "\\[evil\\\\]",
        "\\[evil]",
        "\\[]\\]",
        "\\[\\\\]",
        "\\[[\\]",
        "\\[eVil\\]",
        "\\[EVIL\\]",
        "\\[ev_il\\]",
        "\\[ev il\\]",
        "\\[ev4il\\]",
        "\\[e\\]",
        "\\[ \\]",
        "\\[6\\]",
        "\\[_\\]",
        "\\[\\]",
        "\\\\[evil\\]",
        "[evil\\]",
        "[]",
        "\\[evil\\]"
      ]
    },
    {
      "regex": "^rewrite[-_]subject\\s+(\\d+)$",
      "exceptionStackTrace": null,
      "matches": [
        "rewrite_subject 00",
        "rewrite_subject ",
        "rewrite_subject  0",
        "rewrite_subject0",
        "rewrite-subject 0",
        "rewrite_subject 0"
      ]
    },
    {
      "regex": "filename=\"(.+)\"",
      "exceptionStackTrace": null,
      "matches": [
        "filename=\"=\"",
        "filename=\"\"\"",
        "filename=\"eVil\"",
        "filename=\"EVIL\"",
        "filename=\"ev_il\"",
        "filename=\"ev il\"",
        "filename=\"ev4il\"",
        "filename=\"e\"",
        "filename=\" \"",
        "filename=\"6\"",
        "filename=\"_\"",
        "filename=\"\"",
        "filename=\"evil\""
      ]
    },
    { "regex": "^(15)", "exceptionStackTrace": null, "matches": ["15"] },
    {
      "regex": "\n([0-9]+)\n([\\.]?)\n([0-9]+?)\n(%)\n$\n",
      "exceptionStackTrace": null,
      "matches": [
        "\n0\n.\n00\n%\n\n",
        "\n0\n.\n\n%\n\n",
        "\n0\n..\n0\n%\n\n",
        "\n00\n.\n0\n%\n\n",
        "\n\n.\n0\n%\n\n",
        "\n0\n\n0\n%\n\n",
        "\n0\n.\n0\n%\n\n"
      ]
    },
    {
      "regex": "^\\(in OLE method `add': \\)",
      "exceptionStackTrace": null,
      "matches": ["(in OLE method `add': )"]
    },
    {
      "regex": "^I select \"([^\"]*)\" from \"([^\"]*)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "I select \"evil\" from \"\"\"",
        "I select \"evil\" from \"eVil\"",
        "I select \"evil\" from \"EVIL\"",
        "I select \"evil\" from \"ev_il\"",
        "I select \"evil\" from \"ev il\"",
        "I select \"evil\" from \"ev4il\"",
        "I select \"evil\" from \"e\"",
        "I select \"evil\" from \" \"",
        "I select \"evil\" from \"6\"",
        "I select \"evil\" from \"_\"",
        "I select \"evil\" from \"\"",
        "I select \"\"\" from \"evil\"",
        "I select \"eVil\" from \"evil\"",
        "I select \"EVIL\" from \"evil\"",
        "I select \"ev_il\" from \"evil\"",
        "I select \"ev il\" from \"evil\"",
        "I select \"ev4il\" from \"evil\"",
        "I select \"e\" from \"evil\"",
        "I select \" \" from \"evil\"",
        "I select \"6\" from \"evil\"",
        "I select \"_\" from \"evil\"",
        "I select \"\" from \"evil\"",
        "I select \"\" from \"\"",
        "I select \"evil\" from \"evil\""
      ]
    },
    {
      "regex": "^\\\\?test\\\\",
      "exceptionStackTrace": null,
      "matches": ["\\\\test\\", "test\\", "\\test\\"]
    },
    {
      "regex": "( {2,}|\\n|\\t)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "(.*)cao$",
      "exceptionStackTrace": null,
      "matches": [
        "eVilcao",
        "EVILcao",
        "ev_ilcao",
        "ev ilcao",
        "ev4ilcao",
        "ecao",
        " cao",
        "6cao",
        "_cao",
        "cao",
        "evilcao"
      ]
    },
    {
      "regex": "<a.+?href=\"(.+?/\\d+/\\d+.*?)\".+?>(.+?)</a>",
      "exceptionStackTrace": null,
      "matches": [
        "<aevilhref=\"evil/0/0evil\"evil>></a>",
        "<aevilhref=\"evil/0/0evil\"evil>=</a>",
        "<aevilhref=\"evil/0/0evil\"evil><</a>",
        "<aevilhref=\"evil/0/0evil\"evil>/</a>",
        "<aevilhref=\"evil/0/0evil\"evil>\"</a>",
        "<aevilhref=\"evil/0/0evil\"evil>eVil</a>",
        "<aevilhref=\"evil/0/0evil\"evil>EVIL</a>",
        "<aevilhref=\"evil/0/0evil\"evil>ev_il</a>",
        "<aevilhref=\"evil/0/0evil\"evil>ev il</a>",
        "<aevilhref=\"evil/0/0evil\"evil>ev4il</a>",
        "<aevilhref=\"evil/0/0evil\"evil>e</a>",
        "<aevilhref=\"evil/0/0evil\"evil> </a>",
        "<aevilhref=\"evil/0/0evil\"evil>6</a>",
        "<aevilhref=\"evil/0/0evil\"evil>_</a>",
        "<aevilhref=\"evil/0/0evil\"evil></a>",
        "<aevilhref=\"evil/0/0evil\">>evil</a>",
        "<aevilhref=\"evil/0/0evil\"=>evil</a>",
        "<aevilhref=\"evil/0/0evil\"<>evil</a>",
        "<aevilhref=\"evil/0/0evil\"/>evil</a>",
        "<aevilhref=\"evil/0/0evil\"\">evil</a>",
        "<aevilhref=\"evil/0/0evil\"eVil>evil</a>",
        "<aevilhref=\"evil/0/0evil\"EVIL>evil</a>",
        "<aevilhref=\"evil/0/0evil\"ev_il>evil</a>",
        "<aevilhref=\"evil/0/0evil\"ev il>evil</a>",
        "<aevilhref=\"evil/0/0evil\"ev4il>evil</a>",
        "<aevilhref=\"evil/0/0evil\"e>evil</a>",
        "<aevilhref=\"evil/0/0evil\" >evil</a>",
        "<aevilhref=\"evil/0/0evil\"6>evil</a>",
        "<aevilhref=\"evil/0/0evil\"_>evil</a>",
        "<aevilhref=\"evil/0/0evil\">evil</a>",
        "<aevilhref=\"evil/0/0>\"evil>evil</a>",
        "<aevilhref=\"evil/0/0=\"evil>evil</a>",
        "<aevilhref=\"evil/0/0<\"evil>evil</a>",
        "<aevilhref=\"evil/0/0/\"evil>evil</a>",
        "<aevilhref=\"evil/0/0\"\"evil>evil</a>",
        "<aevilhref=\"evil/0/0eVil\"evil>evil</a>",
        "<aevilhref=\"evil/0/0EVIL\"evil>evil</a>",
        "<aevilhref=\"evil/0/0ev_il\"evil>evil</a>",
        "<aevilhref=\"evil/0/0ev il\"evil>evil</a>",
        "<aevilhref=\"evil/0/0ev4il\"evil>evil</a>",
        "<aevilhref=\"evil/0/0e\"evil>evil</a>",
        "<aevilhref=\"evil/0/0 \"evil>evil</a>",
        "<aevilhref=\"evil/0/06\"evil>evil</a>",
        "<aevilhref=\"evil/0/0_\"evil>evil</a>",
        "<aevilhref=\"evil/0/00evil\"evil>evil</a>",
        "<aevilhref=\"evil/0/evil\"evil>evil</a>",
        "<aevilhref=\"evil/00/0evil\"evil>evil</a>",
        "<aevilhref=\"evil//0evil\"evil>evil</a>",
        "<aevilhref=\">/0/0evil\"evil>evil</a>",
        "<aevilhref=\"=/0/0evil\"evil>evil</a>",
        "<aevilhref=\"</0/0evil\"evil>evil</a>",
        "<aevilhref=\"//0/0evil\"evil>evil</a>",
        "<aevilhref=\"\"/0/0evil\"evil>evil</a>",
        "<aevilhref=\"eVil/0/0evil\"evil>evil</a>",
        "<aevilhref=\"EVIL/0/0evil\"evil>evil</a>",
        "<aevilhref=\"ev_il/0/0evil\"evil>evil</a>",
        "<aevilhref=\"ev il/0/0evil\"evil>evil</a>",
        "<aevilhref=\"ev4il/0/0evil\"evil>evil</a>",
        "<aevilhref=\"e/0/0evil\"evil>evil</a>",
        "<aevilhref=\" /0/0evil\"evil>evil</a>",
        "<aevilhref=\"6/0/0evil\"evil>evil</a>",
        "<aevilhref=\"_/0/0evil\"evil>evil</a>",
        "<aevilhref=\"/0/0evil\"evil>evil</a>",
        "<a>href=\"evil/0/0evil\"evil>evil</a>",
        "<a=href=\"evil/0/0evil\"evil>evil</a>",
        "<a<href=\"evil/0/0evil\"evil>evil</a>",
        "<a/href=\"evil/0/0evil\"evil>evil</a>",
        "<a\"href=\"evil/0/0evil\"evil>evil</a>",
        "<aeVilhref=\"evil/0/0evil\"evil>evil</a>",
        "<aEVILhref=\"evil/0/0evil\"evil>evil</a>",
        "<aev_ilhref=\"evil/0/0evil\"evil>evil</a>",
        "<aev ilhref=\"evil/0/0evil\"evil>evil</a>",
        "<aev4ilhref=\"evil/0/0evil\"evil>evil</a>",
        "<aehref=\"evil/0/0evil\"evil>evil</a>",
        "<a href=\"evil/0/0evil\"evil>evil</a>",
        "<a6href=\"evil/0/0evil\"evil>evil</a>",
        "<a_href=\"evil/0/0evil\"evil>evil</a>",
        "<ahref=\"evil/0/0evil\"evil>evil</a>",
        "<aevilhref=\"evil/0/0\"evil>evil</a>",
        "<aevilhref=\"evil/0/0evil\"evil>evil</a>"
      ]
    },
    {
      "regex": "I, \\[(.*)\\] *INFO -- : foo$",
      "exceptionStackTrace": null,
      "matches": [
        "I, [evil]  INFO -- : foo",
        "I, [evil]INFO -- : foo",
        "I, []] INFO -- : foo",
        "I, [[] INFO -- : foo",
        "I, [:] INFO -- : foo",
        "I, [-] INFO -- : foo",
        "I, [,] INFO -- : foo",
        "I, [eVil] INFO -- : foo",
        "I, [EVIL] INFO -- : foo",
        "I, [ev_il] INFO -- : foo",
        "I, [ev il] INFO -- : foo",
        "I, [ev4il] INFO -- : foo",
        "I, [e] INFO -- : foo",
        "I, [ ] INFO -- : foo",
        "I, [6] INFO -- : foo",
        "I, [_] INFO -- : foo",
        "I, [] INFO -- : foo",
        "I, []INFO -- : foo",
        "I, [evil] INFO -- : foo"
      ]
    },
    {
      "regex": "on\\s+delete\\s+set\\s+null",
      "exceptionStackTrace": null,
      "matches": [
        "on delete set  null",
        "on delete setnull",
        "on delete  set null",
        "on deleteset null",
        "on  delete set null",
        "ondelete set null",
        "on delete set null"
      ]
    },
    {
      "regex": "^(@{[ IPV4CIDRRGX ]}|@{[ IPV4REGEX ]})$",
      "exceptionStackTrace": null,
      "matches": [
        "@{E}",
        "@{X}",
        "@{V}",
        "@{R}",
        "@{P}",
        "@{I}",
        "@{G}",
        "@{D}",
        "@{C}",
        "@{A}",
        "@{4}",
        "@{0}",
        "@{ }"
      ]
    },
    { "regex": "\\A foo \\Z", "exceptionStackTrace": null, "matches": [" foo "] },
    {
      "regex": "^([^:]*):([^:]*):(.+)\\.([^\\.]+)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil:evil:evil.:",
        "evil:evil:evil..",
        "evil:evil:evil.eVil",
        "evil:evil:evil.EVIL",
        "evil:evil:evil.ev_il",
        "evil:evil:evil.ev il",
        "evil:evil:evil.ev4il",
        "evil:evil:evil.e",
        "evil:evil:evil. ",
        "evil:evil:evil.6",
        "evil:evil:evil._",
        "evil:evil:evil.",
        "evil:evil::.evil",
        "evil:evil:..evil",
        "evil:evil:eVil.evil",
        "evil:evil:EVIL.evil",
        "evil:evil:ev_il.evil",
        "evil:evil:ev il.evil",
        "evil:evil:ev4il.evil",
        "evil:evil:e.evil",
        "evil:evil: .evil",
        "evil:evil:6.evil",
        "evil:evil:_.evil",
        "evil:evil:.evil",
        "evil:::evil.evil",
        "evil:.:evil.evil",
        "evil:eVil:evil.evil",
        "evil:EVIL:evil.evil",
        "evil:ev_il:evil.evil",
        "evil:ev il:evil.evil",
        "evil:ev4il:evil.evil",
        "evil:e:evil.evil",
        "evil: :evil.evil",
        "evil:6:evil.evil",
        "evil:_:evil.evil",
        "evil::evil.evil",
        "::evil:evil.evil",
        ".:evil:evil.evil",
        "eVil:evil:evil.evil",
        "EVIL:evil:evil.evil",
        "ev_il:evil:evil.evil",
        "ev il:evil:evil.evil",
        "ev4il:evil:evil.evil",
        "e:evil:evil.evil",
        " :evil:evil.evil",
        "6:evil:evil.evil",
        "_:evil:evil.evil",
        ":evil:evil.evil",
        "::evil.evil",
        "evil:evil:evil.evil"
      ]
    },
    {
      "regex": "^(\\$*\\w+)$",
      "exceptionStackTrace": null,
      "matches": [
        "$eVil",
        "$EVIL",
        "$ev_il",
        "$ev il",
        "$ev4il",
        "$e",
        "$ ",
        "$6",
        "$_",
        "$",
        "$$evil",
        "evil",
        "$evil"
      ]
    },
    {
      "regex": "<ph:if test=(?:\"|')([^\\<\\>\"'\\n]+)(?:\"|')>",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^(?:[A-Za-z]:)?/",
      "exceptionStackTrace": null,
      "matches": ["a:a:/", "A:/", "/", "a:/"]
    },
    {
      "regex": " AS ([\\w\\d]+)_(\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        " AS evil_00",
        " AS evil_",
        " AS eVil_0",
        " AS EVIL_0",
        " AS ev_il_0",
        " AS ev il_0",
        " AS ev4il_0",
        " AS e_0",
        " AS  _0",
        " AS 6_0",
        " AS __0",
        " AS _0",
        " AS evil_0"
      ]
    },
    {
      "regex": "^([\\w.\\-_]+)?\\w+@[\\w-_]+(\\.\\w+){1,2}$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad character range \\w-_"
      },
      "matches": []
    },
    {
      "regex": "^content-type:.*?charset=[\"']?([\\w-]+)",
      "exceptionStackTrace": null,
      "matches": [
        "content-type:evilcharset='=",
        "content-type:evilcharset=':",
        "content-type:evilcharset='-",
        "content-type:evilcharset=''",
        "content-type:evilcharset='\"",
        "content-type:evilcharset='eVil",
        "content-type:evilcharset='EVIL",
        "content-type:evilcharset='ev_il",
        "content-type:evilcharset='ev il",
        "content-type:evilcharset='ev4il",
        "content-type:evilcharset='e",
        "content-type:evilcharset=' ",
        "content-type:evilcharset='6",
        "content-type:evilcharset='_",
        "content-type:evilcharset='",
        "content-type:evilcharset=''evil",
        "content-type:evilcharset=evil",
        "content-type:evilcharset=\"evil",
        "content-type:=charset='evil",
        "content-type::charset='evil",
        "content-type:-charset='evil",
        "content-type:'charset='evil",
        "content-type:\"charset='evil",
        "content-type:eVilcharset='evil",
        "content-type:EVILcharset='evil",
        "content-type:ev_ilcharset='evil",
        "content-type:ev ilcharset='evil",
        "content-type:ev4ilcharset='evil",
        "content-type:echarset='evil",
        "content-type: charset='evil",
        "content-type:6charset='evil",
        "content-type:_charset='evil",
        "content-type:charset='evil",
        "content-type:charset=evil",
        "content-type:evilcharset='evil"
      ]
    },
    {
      "regex": "(?:\\\"([^\\\"]+)\\\"|(?!\\\"([^\\\"]+)\\\")(\\S+))",
      "exceptionStackTrace": null,
      "matches": [
        "\"",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "\"\"\"",
        "\"eVil\"",
        "\"EVIL\"",
        "\"ev_il\"",
        "\"ev il\"",
        "\"ev4il\"",
        "\"e\"",
        "\" \"",
        "\"6\"",
        "\"_\"",
        "\"\"",
        "evil",
        "\"evil\""
      ]
    },
    {
      "regex": "(\\d+(?:\\.\\d+))",
      "exceptionStackTrace": null,
      "matches": ["0.00", "0.", "00.0", ".0", "0.0"]
    },
    {
      "regex": "CORPUS_PAGE_URL",
      "exceptionStackTrace": null,
      "matches": ["CORPUS_PAGE_URL"]
    },
    {
      "regex": "(?x:\n\t\\!\t\t\t\t\t\t\t# Images start with !\n\t(?<_1>\\[)(?<_2>(?<square>[^\\[\\]\\\\]|\\\\.|\\[\\g<square>*+\\])*+)(?<_3>\\])\t\n\t# Match the link text.\n\t(?<_4>[ ])?\t\t\t\t\t\t# Space not allowed\n\t(?<_5>\\()\t\t\t\t\t\t# Opening paren for url\n\t(?<_6><?)(?<_7>\\S+?)(?<_8>>?)\t\t\t# The url\n\t[ \\t]*\t\t\t\t\t# Optional whitespace\n\t(?:\n\t  (?<_9>(?<_10>\\().+?(?<_11>\\)))\t\t# Match title in parens\u2026\n\t| (?<_12>(?<_13>\").+?(?<_14>\"))\t\t# or in quotes.\n\t)?\t\t\t\t\t\t# Title is optional\n\t\\s*\t\t\t\t\t\t# Optional whitespace\n\t(?<_15>\\))\n\t )",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<_"
      },
      "matches": []
    },
    {
      "regex": "(^\\/\\/)|(^[\\w]+:\\/\\/)|(^__PHP_TAG_START)|(^\\w+:)|(^[#\\?])",
      "exceptionStackTrace": null,
      "matches": [
        "#",
        "eVil:",
        "EVIL:",
        "ev_il:",
        "ev il:",
        "ev4il:",
        "e:",
        " :",
        "6:",
        "_:",
        ":",
        "eVil://",
        "EVIL://",
        "ev_il://",
        "ev il://",
        "ev4il://",
        "e://",
        " ://",
        "6://",
        "_://",
        "://",
        "?",
        "evil:",
        "__PHP_TAG_START",
        "evil://",
        "//"
      ]
    },
    {
      "regex": "INCORRECT_localhost",
      "exceptionStackTrace": null,
      "matches": ["INCORRECT_localhost"]
    },
    { "regex": "^(?:do)", "exceptionStackTrace": null, "matches": ["do"] },
    { "regex": "[\\.%]", "exceptionStackTrace": null, "matches": [".", "%"] },
    {
      "regex": "\\.(gif|jpg|jpeg|png|bmp|tif|tiff|swf|html)$",
      "exceptionStackTrace": null,
      "matches": [
        ".html",
        ".swf",
        ".tiff",
        ".tif",
        ".bmp",
        ".png",
        ".jpeg",
        ".jpg",
        ".gif"
      ]
    },
    {
      "regex": "\\A(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "[\\u2018|\\u2019]|\u00e2\u20ac\u2122|\u00e2\u20ac\u02dc]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 8216"
      },
      "matches": []
    },
    {
      "regex": "Other file",
      "exceptionStackTrace": null,
      "matches": ["Other file"]
    },
    { "regex": "\\'s ", "exceptionStackTrace": null, "matches": ["'s "] },
    {
      "regex": "BadArguments",
      "exceptionStackTrace": null,
      "matches": ["BadArguments"]
    },
    {
      "regex": "$self->{rules}->{Row}",
      "exceptionStackTrace": null,
      "matches": ["self->{rules}->{Row}"]
    },
    {
      "regex": "\\b(?:A(?:BS|COS|DD(?:DATE|TIME)|ES_(?:DECRYPT|ENCRYPT)|REA|S(?:BINARY|IN|TEXT|WK(?:B|T))|TAN(?:2|))|B(?:ENCHMARK|I(?:N|T_(?:AND|COUNT|LENGTH|OR|XOR)))|C(?:AST|E(?:IL(?:ING|)|NTROID)|HAR(?:ACTER_LENGTH|_LENGTH)|O(?:ALESCE|ERCIBILITY|MPRESS|N(?:CAT(?:_WS|)|NECTION_ID|V(?:ERT_TZ|))|S|T|UNT)|R(?:C32|OSSES)|UR(?:DATE|TIME))|D(?:A(?:TE(?:DIFF|_(?:ADD|FORMAT|SUB))|Y(?:NAME|OF(?:MONTH|WEEK|YEAR)))|E(?:CODE|GREES|S_(?:DECRYPT|ENCRYPT))|I(?:MENSION|SJOINT))|E(?:LT|N(?:C(?:ODE|RYPT)|DPOINT|VELOPE)|QUALS|X(?:P(?:ORT_SET|)|T(?:ERIORRING|RACT)))|F(?:I(?:ELD|ND_IN_SET)|LOOR|O(?:RMAT|UND_ROWS)|ROM_(?:DAYS|UNIXTIME))|G(?:E(?:OM(?:COLLFROM(?:TEXT|WKB)|ETRY(?:COLLECTIONFROM(?:TEXT|WKB)|FROM(?:TEXT|WKB)|N|TYPE)|FROM(?:TEXT|WKB))|T_LOCK)|LENGTH|R(?:EATEST|OUP_(?:CONCAT|UNIQUE_USERS)))|HEX|I(?:FNULL|N(?:ET_(?:ATON|NTOA)|STR|TER(?:IORRINGN|SECTS))|S(?:CLOSED|EMPTY|NULL|SIMPLE|_(?:FREE_LOCK|USED_LOCK)))|L(?:AST_(?:DAY|INSERT_ID)|CASE|E(?:AST|NGTH)|INE(?:FROM(?:TEXT|WKB)|STRINGFROM(?:TEXT|WKB))|N|O(?:AD_FILE|CATE|G(?:10|2|)|WER)|PAD|TRIM)|M(?:A(?:KE(?:DATE|TIME|_SET)|STER_POS_WAIT|X)|BR(?:CONTAINS|DISJOINT|EQUAL|INTERSECTS|OVERLAPS|TOUCHES|WITHIN)|D5|I(?:D|N)|LINEFROM(?:TEXT|WKB)|ONTHNAME|PO(?:INTFROM(?:TEXT|WKB)|LYFROM(?:TEXT|WKB))|ULTI(?:LINESTRINGFROM(?:TEXT|WKB)|PO(?:INTFROM(?:TEXT|WKB)|LYGONFROM(?:TEXT|WKB))))|N(?:AME_CONST|OW|U(?:LLIF|M(?:GEOMETRIES|INTERIORRINGS|POINTS)))|O(?:CT(?:ET_LENGTH|)|RD|VERLAPS)|P(?:ERIOD_(?:ADD|DIFF)|I|O(?:INT(?:FROM(?:TEXT|WKB)|N)|LY(?:FROM(?:TEXT|WKB)|GONFROM(?:TEXT|WKB))|SITION|W(?:ER|)))|QUOTE|R(?:A(?:DIANS|ND)|E(?:LEASE_LOCK|VERSE)|O(?:UND|W_COUNT)|PAD|TRIM)|S(?:E(?:C_TO_TIME|SSION_USER)|HA(?:1|)|I(?:GN|N)|LEEP|OUNDEX|PACE|QRT|RID|T(?:ARTPOINT|D(?:DEV(?:_(?:POP|SAMP)|)|)|R(?:CMP|_TO_DATE))|U(?:B(?:DATE|STR(?:ING(?:_INDEX|)|)|TIME)|M)|YS(?:DATE|TEM_USER))|T(?:AN|IME(?:DIFF|_(?:FORMAT|TO_SEC))|O(?:UCHES|_DAYS)|RIM)|U(?:CASE|N(?:COMPRESS(?:ED_LENGTH|)|HEX|I(?:QUE_USERS|X_TIMESTAMP))|PPER|UID)|V(?:AR(?:IANCE|_(?:POP|SAMP))|ERSION)|W(?:EEK(?:DAY|OFYEAR)|ITHIN)|X|Y(?:EARWEEK|))(?=\\()",
      "exceptionStackTrace": null,
      "matches": [
        "YEARWEEKEARWEEK",
        "UNCOMPRESSED_LENGTHED_LENGTH",
        "SUBSTRING_INDEXING_INDEX",
        "SUBSTRING_INDEX_INDEX",
        "SUBSTRING",
        "STDDEV_POPDEV_POP",
        "STDDEV_POP_POP",
        "STDDEV",
        "SHA11",
        "POWERER",
        "OCTET_LENGTHET_LENGTH",
        "LOG22",
        "EXPORT_SETORT_SET",
        "CONVERT_TZERT_TZ",
        "CONCAT_WS_WS",
        "CEILINGING",
        "ATAN22",
        "Y",
        "UNCOMPRESS",
        "SUBSTR",
        "STD",
        "SHA",
        "POW",
        "OCT",
        "LOG",
        "EXP",
        "CONV",
        "CONCAT",
        "CEIL",
        "ATAN",
        "YEARWEEK",
        "X",
        "WITHIN",
        "WEEKOFYEAR",
        "WEEKDAY",
        "VERSION",
        "VAR_SAMP",
        "VAR_POP",
        "VARIANCE",
        "UUID",
        "UPPER",
        "UNIX_TIMESTAMP",
        "UNIQUE_USERS",
        "UNHEX",
        "UNCOMPRESSED_LENGTH",
        "UCASE",
        "TRIM",
        "TO_DAYS",
        "TOUCHES",
        "TIME_TO_SEC",
        "TIME_FORMAT",
        "TIMEDIFF",
        "TAN",
        "SYSTEM_USER",
        "SYSDATE",
        "SUM",
        "SUBTIME",
        "SUBSTRING_INDEX",
        "SUBDATE",
        "STR_TO_DATE",
        "STRCMP",
        "STDDEV_SAMP",
        "STDDEV_POP",
        "STARTPOINT",
        "SRID",
        "SQRT",
        "SPACE",
        "SOUNDEX",
        "SLEEP",
        "SIN",
        "SIGN",
        "SHA1",
        "SESSION_USER",
        "SEC_TO_TIME",
        "RTRIM",
        "RPAD",
        "ROW_COUNT",
        "ROUND",
        "REVERSE",
        "RELEASE_LOCK",
        "RAND",
        "RADIANS",
        "QUOTE",
        "POWER",
        "POSITION",
        "POLYGONFROMWKB",
        "POLYGONFROMTEXT",
        "POLYFROMWKB",
        "POLYFROMTEXT",
        "POINTN",
        "POINTFROMWKB",
        "POINTFROMTEXT",
        "PI",
        "PERIOD_DIFF",
        "PERIOD_ADD",
        "OVERLAPS",
        "ORD",
        "OCTET_LENGTH",
        "NUMPOINTS",
        "NUMINTERIORRINGS",
        "NUMGEOMETRIES",
        "NULLIF",
        "NOW",
        "NAME_CONST",
        "MULTIPOLYGONFROMWKB",
        "MULTIPOLYGONFROMTEXT",
        "MULTIPOINTFROMWKB",
        "MULTIPOINTFROMTEXT",
        "MULTILINESTRINGFROMWKB",
        "MULTILINESTRINGFROMTEXT",
        "MPOLYFROMWKB",
        "MPOLYFROMTEXT",
        "MPOINTFROMWKB",
        "MPOINTFROMTEXT",
        "MONTHNAME",
        "MLINEFROMWKB",
        "MLINEFROMTEXT",
        "MIN",
        "MID",
        "MD5",
        "MBRWITHIN",
        "MBRTOUCHES",
        "MBROVERLAPS",
        "MBRINTERSECTS",
        "MBREQUAL",
        "MBRDISJOINT",
        "MBRCONTAINS",
        "MAX",
        "MASTER_POS_WAIT",
        "MAKE_SET",
        "MAKETIME",
        "MAKEDATE",
        "LTRIM",
        "LPAD",
        "LOWER",
        "LOG2",
        "LOG10",
        "LOCATE",
        "LOAD_FILE",
        "LN",
        "LINESTRINGFROMWKB",
        "LINESTRINGFROMTEXT",
        "LINEFROMWKB",
        "LINEFROMTEXT",
        "LENGTH",
        "LEAST",
        "LCASE",
        "LAST_INSERT_ID",
        "LAST_DAY",
        "IS_USED_LOCK",
        "IS_FREE_LOCK",
        "ISSIMPLE",
        "ISNULL",
        "ISEMPTY",
        "ISCLOSED",
        "INTERSECTS",
        "INTERIORRINGN",
        "INSTR",
        "INET_NTOA",
        "INET_ATON",
        "IFNULL",
        "HEX",
        "GROUP_UNIQUE_USERS",
        "GROUP_CONCAT",
        "GREATEST",
        "GLENGTH",
        "GET_LOCK",
        "GEOMFROMWKB",
        "GEOMFROMTEXT",
        "GEOMETRYTYPE",
        "GEOMETRYN",
        "GEOMETRYFROMWKB",
        "GEOMETRYFROMTEXT",
        "GEOMETRYCOLLECTIONFROMWKB",
        "GEOMETRYCOLLECTIONFROMTEXT",
        "GEOMCOLLFROMWKB",
        "GEOMCOLLFROMTEXT",
        "FROM_UNIXTIME",
        "FROM_DAYS",
        "FOUND_ROWS",
        "FORMAT",
        "FLOOR",
        "FIND_IN_SET",
        "FIELD",
        "EXTRACT",
        "EXTERIORRING",
        "EXPORT_SET",
        "EQUALS",
        "ENVELOPE",
        "ENDPOINT",
        "ENCRYPT",
        "ENCODE",
        "ELT",
        "DISJOINT",
        "DIMENSION",
        "DES_ENCRYPT",
        "DES_DECRYPT",
        "DEGREES",
        "DECODE",
        "DAYOFYEAR",
        "DAYOFWEEK",
        "DAYOFMONTH",
        "DAYNAME",
        "DATE_SUB",
        "DATE_FORMAT",
        "DATE_ADD",
        "DATEDIFF",
        "CURTIME",
        "CURDATE",
        "CROSSES",
        "CRC32",
        "COUNT",
        "COT",
        "COS",
        "CONVERT_TZ",
        "CONNECTION_ID",
        "CONCAT_WS",
        "COMPRESS",
        "COERCIBILITY",
        "COALESCE",
        "CHAR_LENGTH",
        "CHARACTER_LENGTH",
        "CENTROID",
        "CEILING",
        "CAST",
        "BIT_XOR",
        "BIT_OR",
        "BIT_LENGTH",
        "BIT_COUNT",
        "BIT_AND",
        "BIN",
        "BENCHMARK",
        "ATAN2",
        "ASWKT",
        "ASWKB",
        "ASTEXT",
        "ASIN",
        "ASBINARY",
        "AREA",
        "AES_ENCRYPT",
        "AES_DECRYPT",
        "ADDTIME",
        "ADDDATE",
        "ACOS",
        "ABS"
      ]
    },
    {
      "regex": "(?<=a[a-z][a-z])\\w\\w\\w",
      "exceptionStackTrace": null,
      "matches": [
        "aa_",
        "aaA",
        "aa0",
        "a_a",
        "aAa",
        "a0a",
        "_aa",
        "Aaa",
        "0aa",
        "aaa"
      ]
    },
    {
      "regex": "^the (error output|output) should contain \"(.+)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "the error output should contain \"\"\"",
        "the error output should contain \"eVil\"",
        "the error output should contain \"EVIL\"",
        "the error output should contain \"ev_il\"",
        "the error output should contain \"ev il\"",
        "the error output should contain \"ev4il\"",
        "the error output should contain \"e\"",
        "the error output should contain \" \"",
        "the error output should contain \"6\"",
        "the error output should contain \"_\"",
        "the error output should contain \"\"",
        "the output should contain \"evil\"",
        "the error output should contain \"evil\""
      ]
    },
    {
      "regex": "^physical id\\s+:\\s+(\\d+)$",
      "exceptionStackTrace": null,
      "matches": [
        "physical id : 00",
        "physical id : ",
        "physical id :  0",
        "physical id :0",
        "physical id  : 0",
        "physical id: 0",
        "physical id : 0"
      ]
    },
    {
      "regex": "^<[a..z]>$",
      "exceptionStackTrace": null,
      "matches": ["<b>", "<a>", "<.>", "<z>"]
    },
    {
      "regex": "^(.*)(\\#comment-([0-9]{1,}))$",
      "exceptionStackTrace": null,
      "matches": [
        "evil#comment-00",
        "evil#comment-",
        "-#comment-0",
        "##comment-0",
        "eVil#comment-0",
        "EVIL#comment-0",
        "ev_il#comment-0",
        "ev il#comment-0",
        "ev4il#comment-0",
        "e#comment-0",
        " #comment-0",
        "6#comment-0",
        "_#comment-0",
        "#comment-0",
        "evil#comment-0"
      ]
    },
    {
      "regex": "\\-maxdepth 4",
      "exceptionStackTrace": null,
      "matches": ["-maxdepth 4"]
    },
    { "regex": "<\\/item>", "exceptionStackTrace": null, "matches": ["</item>"] },
    {
      "regex": "\u5348\u524d|\u5348\u5f8c",
      "exceptionStackTrace": null,
      "matches": ["\u5348\u5f8c", "\u5348\u524d"]
    },
    {
      "regex": "StructurePrinter$",
      "exceptionStackTrace": null,
      "matches": ["StructurePrinter"]
    },
    {
      "regex": "foo.$",
      "exceptionStackTrace": null,
      "matches": ["foo_", "fooA", "foo0", "foo ", "fooa"]
    },
    {
      "regex": "^HandBrake",
      "exceptionStackTrace": null,
      "matches": ["HandBrake"]
    },
    { "regex": "ykk", "exceptionStackTrace": null, "matches": ["ykk"] },
    {
      "regex": "^$AbbreviatedAmharic{$key}",
      "exceptionStackTrace": null,
      "matches": ["AbbreviatedAmharic{key}"]
    },
    {
      "regex": "assert\\(_ENV,",
      "exceptionStackTrace": null,
      "matches": ["assert(_ENV,"]
    },
    { "regex": "^self::", "exceptionStackTrace": null, "matches": ["self::"] },
    {
      "regex": "Card::Error::BadQuery",
      "exceptionStackTrace": null,
      "matches": ["Card::Error::BadQuery"]
    },
    {
      "regex": "(?x)\n               (?=def\\b)                                                      # an optimization to help Oniguruma fail fast\n               (?<=^|\\s)(def)\\s+                                              # the def keyword\n               ( (?>[a-zA-Z_]\\w*(?>\\.|::))?                                   # a method name prefix\n                 (?>[a-zA-Z_]\\w*(?>[?!]|=(?!>))?                              # the method name\n                 |===?|>[>=]?|<=>|<[<=]?|[%&`/\\|]|\\*\\*?|=?~|[-+]@?|\\[\\]=?) )  # \u2026or an operator method\n               \\s*(\\()                                                        # the openning parenthesis for arguments\n              ",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?>"
      },
      "matches": []
    },
    {
      "regex": "^Hello?",
      "exceptionStackTrace": null,
      "matches": ["Helloo", "Hell", "Hello"]
    },
    {
      "regex": "^[SP]T-",
      "exceptionStackTrace": null,
      "matches": ["ST-", "AT-", "PT-"]
    },
    {
      "regex": "[ab]*",
      "exceptionStackTrace": null,
      "matches": ["bb", "c", "a", "", "b"]
    },
    {
      "regex": "(^|[^0-9A-Za-z\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u024f\u1e00-\u1eff\u2c60-\u2c7f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua7ff])((?:(?:(?:2(?:nd)?|II)\\.[\\s\\xa0]*Cor(?:in(?:(?:t(?:h(?:i(?:a[ai]|o)|oa)|i[ao])|ithai)n|thia?n|(?:th[io]|ith)ian|thaian|[an]thian)|thian)|(?:2(?:nd)?|II)[\\s\\xa0]*Cor(?:in(?:(?:t(?:h(?:i(?:a[ai]|o)|oa)|i[ao])|ithai)n|thia?n|(?:th[io]|ith)ian|thaian|[an]thian)|thian)|Second[\\s\\xa0]*Cor(?:in(?:(?:t(?:h(?:i(?:a[ai]|o)|oa)|i[ao])|ithai)n|thia?n|(?:th[io]|ith)ian|thaian|[an]thian)|thian))s)|(?:(?:(?:2(?:nd)?|II)\\.[\\s\\xa0]*Corin(?:itha|thai)|(?:2(?:nd)?|II)[\\s\\xa0]*Corin(?:itha|thai)|Second[\\s\\xa0]*Corin(?:itha|thai))ns)|(?:(?:(?:2(?:nd)?|II)\\.|2(?:nd)?|II|Second)[\\s\\xa0]*Corinthans)|(?:(?:2(?:nd)?|II)[\\s\\xa0]*C(?:o(?:r(?:(?:n(?:ithaia|thai)|rin?thai|ninthai|nthia)ns|n(?:i(?:thai?|ntha)|thi)ns|thian|th|(?:(?:rin?|an|nin?)th|nthi)ians|i(?:(?:n(?:thi(?:an[ao]|na)|ithina)|th[ai]n)s|n(?:t(?:h(?:ian)?)?)?|th(?:ai|ia)ns|th(?:ii|o)ans|inthii?ans))?)?|hor(?:(?:[in]|an)thia|inth(?:ai|ia|i))ns)|2Cor|(?:2(?:nd)?|II)\\.[\\s\\xa0]*C(?:o(?:r(?:(?:n(?:ithaia|thai)|rin?thai|ninthai|nthia)ns|n(?:i(?:thai?|ntha)|thi)ns|thian|th|(?:(?:rin?|an|nin?)th|nthi)ians|i(?:(?:n(?:thi(?:an[ao]|na)|ithina)|th[ai]n)s|n(?:t(?:h(?:ian)?)?)?|th(?:ai|ia)ns|th(?:ii|o)ans|inthii?ans))?)?|hor(?:(?:[in]|an)thia|inth(?:ai|ia|i))ns)|Second[\\s\\xa0]*C(?:o(?:r(?:(?:n(?:ithaia|thai)|rin?thai|ninthai|nthia)ns|n(?:i(?:thai?|ntha)|thi)ns|thian|th|(?:(?:rin?|an|nin?)th|nthi)ians|i(?:(?:n(?:thi(?:an[ao]|na)|ithina)|th[ai]n)s|n(?:t(?:h(?:ian)?)?)?|th(?:ai|ia)ns|th(?:ii|o)ans|inthii?ans))?)?|hor(?:(?:[in]|an)thia|inth(?:ai|ia|i))ns)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 160"
      },
      "matches": []
    },
    {
      "regex": ".*span.*item1test0..*span.*span.*item2test1.*span.*item3test2.*span.*",
      "exceptionStackTrace": null,
      "matches": [
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspaneVil",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspanEVIL",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspanev_il",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspanev il",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspanev4il",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspane",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspan ",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspan6",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspan_",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspan",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2eVilspanevil",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2EVILspanevil",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2ev_ilspanevil",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2ev ilspanevil",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2ev4ilspanevil",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2espanevil",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2 spanevil",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test26spanevil",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2_spanevil",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2spanevil",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspaneVilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspanEVILitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspanev_ilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspanev ilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspanev4ilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspaneitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspan item3test2evilspanevil",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspan6item3test2evilspanevil",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspan_item3test2evilspanevil",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspanitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1eVilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1EVILspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1ev_ilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1ev ilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1ev4ilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1espanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1 spanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test16spanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1_spanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1spanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanevilspaneVilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanevilspanEVILitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanevilspanev_ilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanevilspanev ilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanevilspanev4ilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanevilspaneitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanevilspan item2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanevilspan6item2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanevilspan_item2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanevilspanitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspaneVilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanEVILspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanev_ilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanev ilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanev4ilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanespanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspan spanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspan6spanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspan_spanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aevilspanspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aeVilspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aEVILspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aev_ilspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aev ilspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aev4ilspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aespanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0a spanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0a6spanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0a_spanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0aspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0_evilspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0Aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test00evilspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanevilitem1test0 evilspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspaneVilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanEVILitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanev_ilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanev ilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanev4ilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspaneitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspan item1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspan6item1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspan_item1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "evilspanitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "eVilspanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "EVILspanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "ev_ilspanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "ev ilspanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "ev4ilspanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "espanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        " spanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "6spanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "_spanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "spanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil",
        "spanitem1test0aspanspanitem2test1spanitem3test2span",
        "evilspanevilitem1test0aevilspanevilspanevilitem2test1evilspanevilitem3test2evilspanevil"
      ]
    },
    {
      "regex": "^\\s*[$seq$and$or]\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        " r  ",
        " r",
        " s ",
        " q ",
        " o ",
        " n ",
        " e ",
        " d ",
        " b ",
        " a ",
        " $ ",
        "  r ",
        "r ",
        "r",
        " r "
      ]
    },
    {
      "regex": "syntax OK",
      "exceptionStackTrace": null,
      "matches": ["syntax OK"]
    },
    {
      "regex": "ssh://([^@]+)@.+",
      "exceptionStackTrace": null,
      "matches": [
        "ssh://evil@@",
        "ssh://evil@:",
        "ssh://evil@/",
        "ssh://evil@eVil",
        "ssh://evil@EVIL",
        "ssh://evil@ev_il",
        "ssh://evil@ev il",
        "ssh://evil@ev4il",
        "ssh://evil@e",
        "ssh://evil@ ",
        "ssh://evil@6",
        "ssh://evil@_",
        "ssh://evil@",
        "ssh://@@evil",
        "ssh://:@evil",
        "ssh:///@evil",
        "ssh://eVil@evil",
        "ssh://EVIL@evil",
        "ssh://ev_il@evil",
        "ssh://ev il@evil",
        "ssh://ev4il@evil",
        "ssh://e@evil",
        "ssh:// @evil",
        "ssh://6@evil",
        "ssh://_@evil",
        "ssh://@evil",
        "ssh://evil@evil"
      ]
    },
    { "regex": ":exact$", "exceptionStackTrace": null, "matches": [":exact"] },
    {
      "regex": "_Listing$",
      "exceptionStackTrace": null,
      "matches": ["_Listing"]
    },
    {
      "regex": "^build\\\\s+anywhere\\\\s+(Army|Fleet)\\\\s+(\\\\S+)$",
      "exceptionStackTrace": null,
      "matches": [
        "build\\sanywhere\\sArmy\\s\\SS",
        "build\\sanywhere\\sArmy\\s\\",
        "build\\sanywhere\\sArmy\\ss\\S",
        "build\\sanywhere\\sArmy\\\\S",
        "build\\sanywhere\\ssArmy\\s\\S",
        "build\\sanywhere\\Army\\s\\S",
        "build\\ssanywhere\\sArmy\\s\\S",
        "build\\anywhere\\sArmy\\s\\S",
        "build\\sanywhere\\sFleet\\s\\S",
        "build\\sanywhere\\sArmy\\s\\S"
      ]
    },
    {
      "regex": "\\A(?-mix:AElig|Aacute|Acirc|Agrave|Alpha|Aring|Atilde|Auml|Beta|Ccedil|Chi|Dagger|Delta|ETH|Eacute|Ecirc|Egrave|Epsilon|Eta|Euml|Gamma|Iacute|Icirc|Igrave|Iota|Iuml|Kappa|Lambda|Mu|Ntilde|Nu|OElig|Oacute|Ocirc|Ograve|Omega|Omicron|Oslash|Otilde|Ouml|Phi|Pi|Prime|Psi|Rho|Scaron|Sigma|THORN|Tau|Theta|Uacute|Ucirc|Ugrave|Upsilon|Uuml|Xi|Yacute|Yuml|Zeta|aacute|acirc|acute|aelig|agrave|alefsym|alpha|amp|and|ang|apos|aring|asymp|atilde|auml|bdquo|beta|brvbar|bull|cap|ccedil|cedil|cent|chi|circ|clubs|cong|copy|crarr|cup|curren|dArr|dagger|darr|deg|delta|diams|divide|eacute|ecirc|egrave|empty|emsp|ensp|epsilon|equiv|eta|eth|euml|euro|exist|fnof|forall|frac12|frac14|frac34|frasl|gamma|ge|gt|hArr|harr|hearts|hellip|iacute|icirc|iexcl|igrave|image|infin|int|iota|iquest|isin|iuml|kappa|lArr|lambda|lang|laquo|larr|lceil|ldquo|le|lfloor|lowast|loz|lrm|lsaquo|lsquo|lt|macr|mdash|micro|middot|minus|mu|nabla|nbsp|ndash|ne|ni|not|notin|nsub|ntilde|nu|oacute|ocirc|oelig|ograve|oline|omega|omicron|oplus|or|ordf|ordm|oslash|otilde|otimes|ouml|para|part|permil|perp|phi|pi|piv|plusmn|pound|prime|prod|prop|psi|quot|rArr|radic|rang|raquo|rarr|rceil|rdquo|real|reg|rfloor|rho|rlm|rsaquo|rsquo|sbquo|scaron|sdot|sect|shy|sigma|sigmaf|sim|spades|sub|sube|sum|sup|sup1|sup2|sup3|supe|szlig|tau|there4|theta|thetasym|thinsp|thorn|tilde|times|trade|uArr|uacute|uarr|ucirc|ugrave|uml|upsih|upsilon|uuml|weierp|xi|yacute|yen|yuml|zeta|zwj|zwnj)\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "^=(?!cut)\\w+",
      "exceptionStackTrace": null,
      "matches": [
        "=eVil",
        "=EVIL",
        "=ev_il",
        "=ev il",
        "=ev4il",
        "=e",
        "= ",
        "=6",
        "=_",
        "=",
        "=evil"
      ]
    },
    {
      "regex": "enable \\:raise_errors",
      "exceptionStackTrace": null,
      "matches": ["enable :raise_errors"]
    },
    {
      "regex": "[\\^$\\\\\\/.*+?()\\[\\]{}|]",
      "exceptionStackTrace": null,
      "matches": [
        "}",
        "{",
        "^",
        "]",
        "\\",
        "[",
        "?",
        "/",
        ".",
        "+",
        "*",
        ")",
        "(",
        "$",
        "|"
      ]
    },
    {
      "regex": "[1-9](\\d{1,2})?\\.(0|([1-9](\\d{1,2})?))\\.(0|([1-9](\\d{1,2})?))\\.(0|([1-9](\\d{1,2})?))",
      "exceptionStackTrace": null,
      "matches": [
        "10.1000.0.0",
        "10.100.0.0",
        "10.1.0.0",
        "10.00.0.0",
        "10.0.1000.0",
        "10.0.100.0",
        "10.0.1.0",
        "10.0.00.0",
        "10.0.0.1000",
        "10.0.0.100",
        "10.0.0.1",
        "10.0.0.00",
        "1000.0.0.0",
        "100.0.0.0",
        "00.0.0.0",
        "1.1.0.0",
        "1.0.1.0",
        "1.0.0.1",
        "1.0.0.0",
        "10.10.0.0",
        "10.0.10.0",
        "10.0.0.10",
        "10.0.0.0"
      ]
    },
    {
      "regex": "^a new deprecated content block should be created$",
      "exceptionStackTrace": null,
      "matches": ["a new deprecated content block should be created"]
    },
    {
      "regex": ":[\\w\\d_$]+",
      "exceptionStackTrace": null,
      "matches": [
        "::",
        ":$",
        ":eVil",
        ":EVIL",
        ":ev_il",
        ":ev il",
        ":ev4il",
        ":e",
        ": ",
        ":6",
        ":_",
        ":",
        ":evil"
      ]
    },
    {
      "regex": "(in[\\s]*\\(.+\\))",
      "exceptionStackTrace": null,
      "matches": [
        "in ())",
        "in (()",
        "in (eVil)",
        "in (EVIL)",
        "in (ev_il)",
        "in (ev il)",
        "in (ev4il)",
        "in (e)",
        "in ( )",
        "in (6)",
        "in (_)",
        "in ()",
        "in  (evil)",
        "in(evil)",
        "in (evil)"
      ]
    },
    {
      "regex": "\\A(.*)bore$",
      "exceptionStackTrace": null,
      "matches": [
        "eVilbore",
        "EVILbore",
        "ev_ilbore",
        "ev ilbore",
        "ev4ilbore",
        "ebore",
        " bore",
        "6bore",
        "_bore",
        "bore",
        "evilbore"
      ]
    },
    {
      "regex": ":(.+)(\\d+)$",
      "exceptionStackTrace": null,
      "matches": [
        ":evil00",
        ":evil",
        "::0",
        ":eVil0",
        ":EVIL0",
        ":ev_il0",
        ":ev il0",
        ":ev4il0",
        ":e0",
        ": 0",
        ":60",
        ":_0",
        ":0",
        ":evil0"
      ]
    },
    {
      "regex": "^\\s+\\w+",
      "exceptionStackTrace": null,
      "matches": [
        " eVil",
        " EVIL",
        " ev_il",
        " ev il",
        " ev4il",
        " e",
        "  ",
        " 6",
        " _",
        " ",
        "  evil",
        "evil",
        " evil"
      ]
    },
    {
      "regex": "^Seat (?P<seat>\\d+): (?P<name>.+?) \\(\\$?(?P<stack>\\d+(\\.\\d+)?) in chips\\)",
      "exceptionStackTrace": null,
      "matches": [
        "Seat 0: evil ($0.0.0 in chips)",
        "Seat 0: evil ($0 in chips)",
        "Seat 0: evil ($0.00 in chips)",
        "Seat 0: evil ($0. in chips)",
        "Seat 0: evil ($00.0 in chips)",
        "Seat 0: evil ($.0 in chips)",
        "Seat 0: evil ($$0.0 in chips)",
        "Seat 0: evil (0.0 in chips)",
        "Seat 0: : ($0.0 in chips)",
        "Seat 0: . ($0.0 in chips)",
        "Seat 0: ) ($0.0 in chips)",
        "Seat 0: ( ($0.0 in chips)",
        "Seat 0: $ ($0.0 in chips)",
        "Seat 0: eVil ($0.0 in chips)",
        "Seat 0: EVIL ($0.0 in chips)",
        "Seat 0: ev_il ($0.0 in chips)",
        "Seat 0: ev il ($0.0 in chips)",
        "Seat 0: ev4il ($0.0 in chips)",
        "Seat 0: e ($0.0 in chips)",
        "Seat 0:   ($0.0 in chips)",
        "Seat 0: 6 ($0.0 in chips)",
        "Seat 0: _ ($0.0 in chips)",
        "Seat 0:  ($0.0 in chips)",
        "Seat 00: evil ($0.0 in chips)",
        "Seat : evil ($0.0 in chips)",
        "Seat 0: evil (0 in chips)",
        "Seat 0: evil ($0.0 in chips)"
      ]
    },
    {
      "regex": "sets an initial value",
      "exceptionStackTrace": null,
      "matches": ["sets an initial value"]
    },
    {
      "regex": "all|left",
      "exceptionStackTrace": null,
      "matches": ["left", "all"]
    },
    {
      "regex": "(.*)\\b($PL_sb_irregular)$",
      "exceptionStackTrace": null,
      "matches": [
        "eVilPL_sb_irregular",
        "EVILPL_sb_irregular",
        "ev_ilPL_sb_irregular",
        "ev ilPL_sb_irregular",
        "ev4ilPL_sb_irregular",
        "ePL_sb_irregular",
        " PL_sb_irregular",
        "6PL_sb_irregular",
        "_PL_sb_irregular",
        "PL_sb_irregular",
        "evilPL_sb_irregular"
      ]
    },
    {
      "regex": "Van Buren",
      "exceptionStackTrace": null,
      "matches": ["Van Buren"]
    },
    {
      "regex": "(1\\.\\d|\\d\\d*)",
      "exceptionStackTrace": null,
      "matches": ["000", "0", "00", "1.0"]
    },
    {
      "regex": "^a directory called 'mixed_files' containing some clean and smelly files$",
      "exceptionStackTrace": null,
      "matches": [
        "a directory called 'mixed_files' containing some clean and smelly files"
      ]
    },
    {
      "regex": "\\s+Domain Last Updated:\\s+(.*)\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "(?<!\\\\)([\\<\\>])",
      "exceptionStackTrace": null,
      "matches": ["<", ">"]
    },
    {
      "regex": "_resampled\\/[^-]+-",
      "exceptionStackTrace": null,
      "matches": [
        "_resampled//-",
        "_resampled/--",
        "_resampled/eVil-",
        "_resampled/EVIL-",
        "_resampled/ev_il-",
        "_resampled/ev il-",
        "_resampled/ev4il-",
        "_resampled/e-",
        "_resampled/ -",
        "_resampled/6-",
        "_resampled/_-",
        "_resampled/-",
        "_resampled/evil-"
      ]
    },
    {
      "regex": "^https?:\\/\\/content\\.jwplatform\\.com\\/players\\/([_a-zA-Z0-9\\-]+)\\.html",
      "exceptionStackTrace": null,
      "matches": [
        "https://content.jwplatform.com/players/:.html",
        "https://content.jwplatform.com/players//.html",
        "https://content.jwplatform.com/players/..html",
        "https://content.jwplatform.com/players/-.html",
        "https://content.jwplatform.com/players/eVil.html",
        "https://content.jwplatform.com/players/EVIL.html",
        "https://content.jwplatform.com/players/ev_il.html",
        "https://content.jwplatform.com/players/ev il.html",
        "https://content.jwplatform.com/players/ev4il.html",
        "https://content.jwplatform.com/players/e.html",
        "https://content.jwplatform.com/players/ .html",
        "https://content.jwplatform.com/players/6.html",
        "https://content.jwplatform.com/players/_.html",
        "https://content.jwplatform.com/players/.html",
        "httpss://content.jwplatform.com/players/evil.html",
        "http://content.jwplatform.com/players/evil.html",
        "https://content.jwplatform.com/players/evil.html"
      ]
    },
    {
      "regex": "it should return an? ([\\w\\:]+)$",
      "exceptionStackTrace": null,
      "matches": [
        "it should return an :",
        "it should return an eVil",
        "it should return an EVIL",
        "it should return an ev_il",
        "it should return an ev il",
        "it should return an ev4il",
        "it should return an e",
        "it should return an  ",
        "it should return an 6",
        "it should return an _",
        "it should return an ",
        "it should return ann evil",
        "it should return a evil",
        "it should return an evil"
      ]
    },
    { "regex": "STRING\\/", "exceptionStackTrace": null, "matches": ["STRING/"] },
    {
      "regex": "\\[egg:core:ready_stat] end ready task b, remain \\[]",
      "exceptionStackTrace": null,
      "matches": ["[egg:core:ready_stat] end ready task b, remain []"]
    },
    {
      "regex": "^I verify the existence of the checkbox$",
      "exceptionStackTrace": null,
      "matches": ["I verify the existence of the checkbox"]
    },
    {
      "regex": "service file link could not be removed",
      "exceptionStackTrace": null,
      "matches": ["service file link could not be removed"]
    },
    {
      "regex": "^(\\w+)___(\\w+)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil___eVil",
        "evil___EVIL",
        "evil___ev_il",
        "evil___ev il",
        "evil___ev4il",
        "evil___e",
        "evil___ ",
        "evil___6",
        "evil____",
        "evil___",
        "eVil___evil",
        "EVIL___evil",
        "ev_il___evil",
        "ev il___evil",
        "ev4il___evil",
        "e___evil",
        " ___evil",
        "6___evil",
        "____evil",
        "___evil",
        "evil___evil"
      ]
    },
    {
      "regex": "^the client appends (.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "the client appends eVil",
        "the client appends EVIL",
        "the client appends ev_il",
        "the client appends ev il",
        "the client appends ev4il",
        "the client appends e",
        "the client appends  ",
        "the client appends 6",
        "the client appends _",
        "the client appends ",
        "the client appends evil"
      ]
    },
    {
      "regex": "^(Boolean|Number|String)$",
      "exceptionStackTrace": null,
      "matches": ["String", "Number", "Boolean"]
    },
    {
      "regex": "\\/(\\?+)$",
      "exceptionStackTrace": null,
      "matches": ["/??", "/", "/?"]
    },
    {
      "regex": "[^A-Za-z0-9#]",
      "exceptionStackTrace": null,
      "matches": ["a", "A", "0", "#", " "]
    },
    {
      "regex": "var allVideos\\s*=\\s*(\\[\\{.*\\}]);",
      "exceptionStackTrace": null,
      "matches": [
        "var allVideos = [{}}];",
        "var allVideos = [{{}];",
        "var allVideos = [{]}];",
        "var allVideos = [{[}];",
        "var allVideos = [{=}];",
        "var allVideos = [{;}];",
        "var allVideos = [{eVil}];",
        "var allVideos = [{EVIL}];",
        "var allVideos = [{ev_il}];",
        "var allVideos = [{ev il}];",
        "var allVideos = [{ev4il}];",
        "var allVideos = [{e}];",
        "var allVideos = [{ }];",
        "var allVideos = [{6}];",
        "var allVideos = [{_}];",
        "var allVideos = [{}];",
        "var allVideos =  [{evil}];",
        "var allVideos =[{evil}];",
        "var allVideos  = [{evil}];",
        "var allVideos= [{evil}];",
        "var allVideos=[{}];",
        "var allVideos = [{evil}];"
      ]
    },
    { "regex": "^<span", "exceptionStackTrace": null, "matches": ["<span"] },
    {
      "regex": "[\\r\\n\\t\\f]+",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": "Swe(dish|sub)",
      "exceptionStackTrace": null,
      "matches": ["Swesub", "Swedish"]
    },
    {
      "regex": "dora: listened on 8001",
      "exceptionStackTrace": null,
      "matches": ["dora: listened on 8001"]
    },
    {
      "regex": "(^|[^*])\\*\\*\\*([^*]|$)",
      "exceptionStackTrace": null,
      "matches": [
        "A***a",
        "0***a",
        "****a",
        " ***a",
        "***A",
        "***0",
        "****",
        "*** ",
        "a***a",
        "***",
        "***a"
      ]
    },
    {
      "regex": "(\\w+) (\\w+)( (\\w+))?",
      "exceptionStackTrace": null,
      "matches": [
        "evil evil evil evil",
        "evil evil eVil",
        "evil evil EVIL",
        "evil evil ev_il",
        "evil evil ev il",
        "evil evil ev4il",
        "evil evil e",
        "evil evil  ",
        "evil evil 6",
        "evil evil _",
        "evil evil ",
        "evil eVil evil",
        "evil EVIL evil",
        "evil ev_il evil",
        "evil ev il evil",
        "evil ev4il evil",
        "evil e evil",
        "evil   evil",
        "evil 6 evil",
        "evil _ evil",
        "evil  evil",
        "eVil evil evil",
        "EVIL evil evil",
        "ev_il evil evil",
        "ev il evil evil",
        "ev4il evil evil",
        "e evil evil",
        "  evil evil",
        "6 evil evil",
        "_ evil evil",
        " evil evil",
        "evil evil",
        "evil evil evil"
      ]
    },
    {
      "regex": "^[a-zA-Z0-9_:.$%/-]{0,64}$",
      "exceptionStackTrace": null,
      "matches": [
        "-----------------------------------------------------------------",
        "----------------------------------------------------------------",
        "a",
        "_",
        "A",
        ":",
        "0",
        "/",
        ".",
        "%",
        "$",
        "",
        "-"
      ]
    },
    {
      "regex": ".*.sh$",
      "exceptionStackTrace": null,
      "matches": [
        "evil_sh",
        "evilAsh",
        "evil0sh",
        "evil sh",
        "eVilash",
        "EVILash",
        "ev_ilash",
        "ev ilash",
        "ev4ilash",
        "eash",
        " ash",
        "6ash",
        "_ash",
        "ash",
        "evilash"
      ]
    },
    {
      "regex": "\\nORIGIN.*\\n([\\s\\S]+)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": ":name: :component_2",
      "exceptionStackTrace": null,
      "matches": [":name: :component_2"]
    },
    {
      "regex": "^(?:url\\x28\"{0,1}|)(?:data:image/shrink,|)(.+?)(?:\"{0,1}\\x29|)$",
      "exceptionStackTrace": null,
      "matches": [
        "url(\"data:image/shrink,evil\")\")",
        "url(\"data:image/shrink,evil",
        "url(\"data:image/shrink,evil\"\")",
        "url(\"data:image/shrink,evil)",
        "url(\"data:image/shrink,:\")",
        "url(\"data:image/shrink,/\")",
        "url(\"data:image/shrink,,\")",
        "url(\"data:image/shrink,)\")",
        "url(\"data:image/shrink,(\")",
        "url(\"data:image/shrink,\"\")",
        "url(\"data:image/shrink,eVil\")",
        "url(\"data:image/shrink,EVIL\")",
        "url(\"data:image/shrink,ev_il\")",
        "url(\"data:image/shrink,ev il\")",
        "url(\"data:image/shrink,ev4il\")",
        "url(\"data:image/shrink,e\")",
        "url(\"data:image/shrink, \")",
        "url(\"data:image/shrink,6\")",
        "url(\"data:image/shrink,_\")",
        "url(\"data:image/shrink,\")",
        "url(\"data:image/shrink,data:image/shrink,evil\")",
        "url(\"evil\")",
        "url(\"url(\"data:image/shrink,evil\")",
        "data:image/shrink,evil\")",
        "url(\"\"data:image/shrink,evil\")",
        "url(data:image/shrink,evil\")",
        "evil",
        "url(\"data:image/shrink,evil\")"
      ]
    },
    {
      "regex": "^[\\d\\w]+\\.",
      "exceptionStackTrace": null,
      "matches": [
        "eVil.",
        "EVIL.",
        "ev_il.",
        "ev il.",
        "ev4il.",
        "e.",
        " .",
        "6.",
        "_.",
        ".",
        "evil."
      ]
    },
    {
      "regex": "Unknown format",
      "exceptionStackTrace": null,
      "matches": ["Unknown format"]
    },
    {
      "regex": "preserve--",
      "exceptionStackTrace": null,
      "matches": ["preserve--"]
    },
    {
      "regex": "\\{\\#(\\d+)\\}",
      "exceptionStackTrace": null,
      "matches": ["{#00}", "{#}", "{#0}"]
    },
    {
      "regex": "^Resent-Date:\\s*(.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "Resent-Date: :",
        "Resent-Date: -",
        "Resent-Date: eVil",
        "Resent-Date: EVIL",
        "Resent-Date: ev_il",
        "Resent-Date: ev il",
        "Resent-Date: ev4il",
        "Resent-Date: e",
        "Resent-Date:  ",
        "Resent-Date: 6",
        "Resent-Date: _",
        "Resent-Date: ",
        "Resent-Date:  evil",
        "Resent-Date:evil",
        "Resent-Date: evil"
      ]
    },
    {
      "regex": "^\\/\\/\\{\\{\\{$",
      "exceptionStackTrace": null,
      "matches": ["//{{{"]
    },
    {
      "regex": "no layer assoc",
      "exceptionStackTrace": null,
      "matches": ["no layer assoc"]
    },
    {
      "regex": ".*(group|groups|force|consortium|team)$",
      "exceptionStackTrace": null,
      "matches": [
        "eVilgroup",
        "EVILgroup",
        "ev_ilgroup",
        "ev ilgroup",
        "ev4ilgroup",
        "egroup",
        " group",
        "6group",
        "_group",
        "team",
        "consortium",
        "force",
        "groups",
        "group",
        "evilteam",
        "evilconsortium",
        "evilforce",
        "evilgroups",
        "evilgroup"
      ]
    },
    {
      "regex": "^\\d{1,4}?$",
      "exceptionStackTrace": null,
      "matches": ["00000", "0000", "", "0"]
    },
    {
      "regex": "^(?:OSL-2.0)",
      "exceptionStackTrace": null,
      "matches": ["OSL-2A0", "OSL-200", "OSL-2-0", "OSL-2 0", "OSL-2a0"]
    },
    {
      "regex": "(?m)^; rpcpass=.+$",
      "exceptionStackTrace": null,
      "matches": [
        "; rpcpass==",
        "; rpcpass=;",
        "; rpcpass=eVil",
        "; rpcpass=EVIL",
        "; rpcpass=ev_il",
        "; rpcpass=ev il",
        "; rpcpass=ev4il",
        "; rpcpass=e",
        "; rpcpass= ",
        "; rpcpass=6",
        "; rpcpass=_",
        "; rpcpass=",
        "; rpcpass=evil"
      ]
    },
    {
      "regex": "^\\s*(?:(partial|callback)\\s+)?interface\\s+([A-Za-z][A-Za-z0-9]*)(?:\\s+:\\s*([^{]+)\\s*)?",
      "exceptionStackTrace": null,
      "matches": [
        " partial interface aevil : evil  : evil ",
        " partial interface aevil",
        " partial interface aevil : evil  ",
        " partial interface aevil : evil",
        " partial interface aevil : { ",
        " partial interface aevil : : ",
        " partial interface aevil : eVil ",
        " partial interface aevil : EVIL ",
        " partial interface aevil : ev_il ",
        " partial interface aevil : ev il ",
        " partial interface aevil : ev4il ",
        " partial interface aevil : e ",
        " partial interface aevil :   ",
        " partial interface aevil : 6 ",
        " partial interface aevil : _ ",
        " partial interface aevil :  ",
        " partial interface aevil :  evil ",
        " partial interface aevil :evil ",
        " partial interface aevil  : evil ",
        " partial interface aevil: evil ",
        " partial interface aeVil : evil ",
        " partial interface aEVIL : evil ",
        " partial interface aev_il : evil ",
        " partial interface aev il : evil ",
        " partial interface aev4il : evil ",
        " partial interface ae : evil ",
        " partial interface a  : evil ",
        " partial interface a6 : evil ",
        " partial interface a_ : evil ",
        " partial interface a : evil ",
        " partial interface Aevil : evil ",
        " partial interface  aevil : evil ",
        " partial interfaceaevil : evil ",
        " partial partial interface aevil : evil ",
        " interface aevil : evil ",
        " partial  interface aevil : evil ",
        " partialinterface aevil : evil ",
        "  partial interface aevil : evil ",
        "partial interface aevil : evil ",
        "interface a",
        " callback interface aevil : evil ",
        " partial interface aevil : evil "
      ]
    },
    {
      "regex": "\\(([A-Z]+),\\s*(\\d+)\\)",
      "exceptionStackTrace": null,
      "matches": [
        "(evil, 00)",
        "(evil, )",
        "(evil,  0)",
        "(eVil, 0)",
        "(EVIL, 0)",
        "(ev_il, 0)",
        "(ev il, 0)",
        "(ev4il, 0)",
        "(e, 0)",
        "( , 0)",
        "(6, 0)",
        "(_, 0)",
        "(, 0)",
        "(evil,0)",
        "(evil, 0)"
      ]
    },
    {
      "regex": "^ +<pre>before\\nmiddle\\nafter</pre>",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^([[:graph:]]*)(\\[:[[:graph:]]+:\\]\\{([[:digit:]]+)\\})([[:graph:]]*)$",
      "exceptionStackTrace": null,
      "matches": [
        ":][::]:]{:]}:]]",
        ":][::]:]{:]}:",
        ":][::]:]{:]}r]",
        ":][::]:]{:]}p]",
        ":][::]:]{:]}h]",
        ":][::]:]{:]}g]",
        ":][::]:]{:]}b]",
        ":][::]:]{:]}a]",
        ":][::]:]{:]}[]",
        ":][::]:]{:]]}:]",
        ":][::]:]{:}:]",
        ":][::]:]{t]}:]",
        ":][::]:]{i]}:]",
        ":][::]:]{g]}:]",
        ":][::]:]{d]}:]",
        ":][::]:]{a]}:]",
        ":][::]:]{[]}:]",
        ":][::]]:]{:]}:]",
        ":][:::]{:]}:]",
        ":][:r]:]{:]}:]",
        ":][:p]:]{:]}:]",
        ":][:h]:]{:]}:]",
        ":][:g]:]{:]}:]",
        ":][:b]:]{:]}:]",
        ":][:a]:]{:]}:]",
        ":][:[]:]{:]}:]",
        ":]][::]:]{:]}:]",
        ":[::]:]{:]}:]",
        "r][::]:]{:]}:]",
        "p][::]:]{:]}:]",
        "h][::]:]{:]}:]",
        "g][::]:]{:]}:]",
        "b][::]:]{:]}:]",
        "a][::]:]{:]}:]",
        "[][::]:]{:]}:]",
        ":[::]:]{:]}:",
        ":][::]:]{:]}:]"
      ]
    },
    {
      "regex": "<postalCode>0000</postalCode>",
      "exceptionStackTrace": null,
      "matches": ["<postalCode>0000</postalCode>"]
    },
    {
      "regex": "[\\/\\&\\?=#\\.\\s]",
      "exceptionStackTrace": null,
      "matches": ["?", "=", "/", "&", "#", " ", "."]
    },
    {
      "regex": "\\{?(?:[0-9a-f]\\-*){32}\\}?",
      "exceptionStackTrace": null,
      "matches": [
        "{a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-}}",
        "{a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-",
        "{a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-}",
        "{a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-}",
        "{a--a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-}",
        "{aa-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-}",
        "{g-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-}",
        "{0-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-}",
        "{{a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-}",
        "a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-}",
        "aa-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-",
        "{a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-}"
      ]
    },
    {
      "regex": "(0x[0-9a-f]+)\\)$",
      "exceptionStackTrace": null,
      "matches": ["0xaa)", "0x)", "0xg)", "0x0)", "0xa)"]
    },
    {
      "regex": "md-toast-content",
      "exceptionStackTrace": null,
      "matches": ["md-toast-content"]
    },
    {
      "regex": "^[ \\n\\r\\t\\/]$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "import platform",
      "exceptionStackTrace": null,
      "matches": ["import platform"]
    },
    {
      "regex": "RSpec.describe ActiveUserPolicy, type: :policy do",
      "exceptionStackTrace": null,
      "matches": [
        "RSpecAdescribe ActiveUserPolicy, type: :policy do",
        "RSpec:describe ActiveUserPolicy, type: :policy do",
        "RSpec0describe ActiveUserPolicy, type: :policy do",
        "RSpec,describe ActiveUserPolicy, type: :policy do",
        "RSpec describe ActiveUserPolicy, type: :policy do",
        "RSpecadescribe ActiveUserPolicy, type: :policy do"
      ]
    },
    {
      "regex": "($tcPropertyPattern)",
      "exceptionStackTrace": null,
      "matches": ["tcPropertyPattern"]
    },
    {
      "regex": "<p>Powered by request-log-analyzer v\\d+(?:\\.\\d+)+</p>\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": " ([,!?;:])",
      "exceptionStackTrace": null,
      "matches": [" ?", " ;", " ,", " !", " :"]
    },
    {
      "regex": ".+?\\.([a-zA-Z]{3})$",
      "exceptionStackTrace": null,
      "matches": [
        "evil.AAAA",
        "evil.AA",
        "evil.aAA",
        "..AAA",
        "eVil.AAA",
        "EVIL.AAA",
        "ev_il.AAA",
        "ev il.AAA",
        "ev4il.AAA",
        "e.AAA",
        " .AAA",
        "6.AAA",
        "_.AAA",
        ".AAA",
        "evil.AAA"
      ]
    },
    {
      "regex": "label [^>]*for.+input",
      "exceptionStackTrace": null,
      "matches": [
        "label evilfor>input",
        "label evilforeVilinput",
        "label evilforEVILinput",
        "label evilforev_ilinput",
        "label evilforev ilinput",
        "label evilforev4ilinput",
        "label evilforeinput",
        "label evilfor input",
        "label evilfor6input",
        "label evilfor_input",
        "label evilforinput",
        "label >forevilinput",
        "label eVilforevilinput",
        "label EVILforevilinput",
        "label ev_ilforevilinput",
        "label ev ilforevilinput",
        "label ev4ilforevilinput",
        "label eforevilinput",
        "label  forevilinput",
        "label 6forevilinput",
        "label _forevilinput",
        "label forevilinput",
        "label evilforevilinput"
      ]
    },
    {
      "regex": "blah:(\\d+\\.\\d+)\\|",
      "exceptionStackTrace": null,
      "matches": ["blah:0.00|", "blah:0.|", "blah:00.0|", "blah:.0|", "blah:0.0|"]
    },
    {
      "regex": "site.intro:\\sGo Home",
      "exceptionStackTrace": null,
      "matches": [
        "siteAintro: Go Home",
        "site:intro: Go Home",
        "site0intro: Go Home",
        "site intro: Go Home",
        "siteaintro: Go Home"
      ]
    },
    {
      "regex": "JLToast.*\\.(h|swift)",
      "exceptionStackTrace": null,
      "matches": [
        "JLToast..h",
        "JLToasteVil.h",
        "JLToastEVIL.h",
        "JLToastev_il.h",
        "JLToastev il.h",
        "JLToastev4il.h",
        "JLToaste.h",
        "JLToast .h",
        "JLToast6.h",
        "JLToast_.h",
        "JLToast.swift",
        "JLToast.h",
        "JLToastevil.swift",
        "JLToastevil.h"
      ]
    },
    {
      "regex": "[ \\t\\r\\n]+<<(@heredelim).*",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "The given parameters match process \\d+",
      "exceptionStackTrace": null,
      "matches": [
        "The given parameters match process 00",
        "The given parameters match process ",
        "The given parameters match process 0"
      ]
    },
    {
      "regex": "ko(\\d{5})",
      "exceptionStackTrace": null,
      "matches": ["ko000000", "ko0000", "ko00000"]
    },
    {
      "regex": "\\b0x(?<_1>[a-fA-F0-9]*)?\\b",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<_"
      },
      "matches": []
    },
    {
      "regex": ".*\\.com&&\n        |\\/(?:(?:groups\\/[^\\/]+\\/videos\\/)\n        |(?:ondemand|channels)(?:(?:\\/less\\/)\n        |(?:user[0-9]+\\/review\\/)?([0-9]+).*\n        |(?:\\/\\w*\\/))|(?:video\\/))?([0-9]+).*$\n        ",
      "exceptionStackTrace": null,
      "matches": [
        "/ondemand/eVil/0evil\n        ",
        "/ondemand/EVIL/0evil\n        ",
        "/ondemand/ev_il/0evil\n        ",
        "/ondemand/ev il/0evil\n        ",
        "/ondemand/ev4il/0evil\n        ",
        "/ondemand/e/0evil\n        ",
        "/ondemand/ /0evil\n        ",
        "/ondemand/6/0evil\n        ",
        "/ondemand/_/0evil\n        ",
        "/ondemand//0evil\n        ",
        "/ondemanduser0/review/0/\n        0evil\n        ",
        "/ondemanduser0/review/0.\n        0evil\n        ",
        "/ondemanduser0/review/0&\n        0evil\n        ",
        "/ondemanduser0/review/0eVil\n        0evil\n        ",
        "/ondemanduser0/review/0EVIL\n        0evil\n        ",
        "/ondemanduser0/review/0ev_il\n        0evil\n        ",
        "/ondemanduser0/review/0ev il\n        0evil\n        ",
        "/ondemanduser0/review/0ev4il\n        0evil\n        ",
        "/ondemanduser0/review/0e\n        0evil\n        ",
        "/ondemanduser0/review/0 \n        0evil\n        ",
        "/ondemanduser0/review/06\n        0evil\n        ",
        "/ondemanduser0/review/0_\n        0evil\n        ",
        "/ondemanduser0/review/0\n        0evil\n        ",
        "/ondemanduser0/review/00evil\n        0evil\n        ",
        "/ondemanduser0/review/evil\n        0evil\n        ",
        "/ondemanduser0/review/user0/review/0evil\n        0evil\n        ",
        "/ondemand0evil\n        0evil\n        ",
        "/ondemanduser00/review/0evil\n        0evil\n        ",
        "/ondemanduser/review/0evil\n        0evil\n        ",
        "/groups/evil/videos/\n        0/\n        ",
        "/groups/evil/videos/\n        0.\n        ",
        "/groups/evil/videos/\n        0&\n        ",
        "/groups/evil/videos/\n        0eVil\n        ",
        "/groups/evil/videos/\n        0EVIL\n        ",
        "/groups/evil/videos/\n        0ev_il\n        ",
        "/groups/evil/videos/\n        0ev il\n        ",
        "/groups/evil/videos/\n        0ev4il\n        ",
        "/groups/evil/videos/\n        0e\n        ",
        "/groups/evil/videos/\n        0 \n        ",
        "/groups/evil/videos/\n        06\n        ",
        "/groups/evil/videos/\n        0_\n        ",
        "/groups/evil/videos/\n        0\n        ",
        "/groups/evil/videos/\n        00evil\n        ",
        "/groups/evil/videos/\n        evil\n        ",
        "/groups/evil/videos/\n        groups/evil/videos/\n        0evil\n        ",
        "/0evil\n        ",
        "/groups///videos/\n        0evil\n        ",
        "/groups/./videos/\n        0evil\n        ",
        "/groups/&/videos/\n        0evil\n        ",
        "/groups/eVil/videos/\n        0evil\n        ",
        "/groups/EVIL/videos/\n        0evil\n        ",
        "/groups/ev_il/videos/\n        0evil\n        ",
        "/groups/ev il/videos/\n        0evil\n        ",
        "/groups/ev4il/videos/\n        0evil\n        ",
        "/groups/e/videos/\n        0evil\n        ",
        "/groups/ /videos/\n        0evil\n        ",
        "/groups/6/videos/\n        0evil\n        ",
        "/groups/_/videos/\n        0evil\n        ",
        "/groups//videos/\n        0evil\n        ",
        "/.com&&\n        ",
        "..com&&\n        ",
        "&.com&&\n        ",
        "eVil.com&&\n        ",
        "EVIL.com&&\n        ",
        "ev_il.com&&\n        ",
        "ev il.com&&\n        ",
        "ev4il.com&&\n        ",
        "e.com&&\n        ",
        " .com&&\n        ",
        "6.com&&\n        ",
        "_.com&&\n        ",
        "/0\n        ",
        ".com&&\n        ",
        "/video/0evil\n        ",
        "/channels/less/\n        0evil\n        ",
        "/ondemand/evil/0evil\n        ",
        "/ondemanduser0/review/0evil\n        0evil\n        ",
        "/ondemand/less/\n        0evil\n        ",
        "/groups/evil/videos/\n        0evil\n        ",
        "evil.com&&\n        "
      ]
    },
    {
      "regex": "\\\\x[0-9a-fA-F]{2}",
      "exceptionStackTrace": null,
      "matches": ["\\xAAA", "\\xA", "\\xgA", "\\xaA", "\\xGA", "\\x0A", "\\xAA"]
    },
    {
      "regex": "(\\n *)+$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "([^\\/]*)\\/([^\\/]*)",
      "exceptionStackTrace": null,
      "matches": [
        "evil//",
        "evil/eVil",
        "evil/EVIL",
        "evil/ev_il",
        "evil/ev il",
        "evil/ev4il",
        "evil/e",
        "evil/ ",
        "evil/6",
        "evil/_",
        "evil/",
        "//evil",
        "eVil/evil",
        "EVIL/evil",
        "ev_il/evil",
        "ev il/evil",
        "ev4il/evil",
        "e/evil",
        " /evil",
        "6/evil",
        "_/evil",
        "/evil",
        "/",
        "evil/evil"
      ]
    },
    {
      "regex": "(?P<nature2> (constitutionnelle|organique))",
      "exceptionStackTrace": null,
      "matches": [" organique", " constitutionnelle"]
    },
    {
      "regex": "(self|oldSelf|newSelf)\\.ReasonReact\\.update",
      "exceptionStackTrace": null,
      "matches": [
        "newSelf.ReasonReact.update",
        "oldSelf.ReasonReact.update",
        "self.ReasonReact.update"
      ]
    },
    {
      "regex": "^a descriptor file is provided$",
      "exceptionStackTrace": null,
      "matches": ["a descriptor file is provided"]
    },
    {
      "regex": "^\\s*(\\d+)(\\D.*)?",
      "exceptionStackTrace": null,
      "matches": [
        " 0aevilaevil",
        " 0",
        " 0aeVil",
        " 0aEVIL",
        " 0aev_il",
        " 0aev il",
        " 0aev4il",
        " 0ae",
        " 0a ",
        " 0a6",
        " 0a_",
        " 0a",
        " 0_evil",
        " 0Aevil",
        " 00evil",
        " 0 evil",
        " 00aevil",
        " aevil",
        "  0aevil",
        "0aevil",
        "0",
        " 0aevil"
      ]
    },
    {
      "regex": "\\bUI(EdgeInsets(?:Zero)?)\\b",
      "exceptionStackTrace": null,
      "matches": ["UIEdgeInsetsZeroZero", "UIEdgeInsets", "UIEdgeInsetsZero"]
    },
    {
      "regex": "\\(tag:\\s+(.*)\\)",
      "exceptionStackTrace": null,
      "matches": [
        "(tag: :)",
        "(tag: ))",
        "(tag: ()",
        "(tag: eVil)",
        "(tag: EVIL)",
        "(tag: ev_il)",
        "(tag: ev il)",
        "(tag: ev4il)",
        "(tag: e)",
        "(tag:  )",
        "(tag: 6)",
        "(tag: _)",
        "(tag:  evil)",
        "(tag:evil)",
        "(tag: )",
        "(tag: evil)"
      ]
    },
    {
      "regex": "\\[\\/color\\]",
      "exceptionStackTrace": null,
      "matches": ["[/color]"]
    },
    {
      "regex": "^\\s*(requires|configure_requires|build_requires|test_requires|author_requires)\\s+['\\\"]([^'\\\"]+)['\\\"](\\s*,\\s*['\\\"]([^'\\\"]+)['\\\"])?\\s*;\\s*(#\\s*.*)?",
      "exceptionStackTrace": null,
      "matches": [
        " requires \"evil\" , \"evil\" ; # evil# evil",
        " requires \"evil\" , \"evil\" ; ",
        " requires \"evil\" , \"evil\" ; # ;",
        " requires \"evil\" , \"evil\" ; # ,",
        " requires \"evil\" , \"evil\" ; # '",
        " requires \"evil\" , \"evil\" ; # #",
        " requires \"evil\" , \"evil\" ; # \"",
        " requires \"evil\" , \"evil\" ; # eVil",
        " requires \"evil\" , \"evil\" ; # EVIL",
        " requires \"evil\" , \"evil\" ; # ev_il",
        " requires \"evil\" , \"evil\" ; # ev il",
        " requires \"evil\" , \"evil\" ; # ev4il",
        " requires \"evil\" , \"evil\" ; # e",
        " requires \"evil\" , \"evil\" ; #  ",
        " requires \"evil\" , \"evil\" ; # 6",
        " requires \"evil\" , \"evil\" ; # _",
        " requires \"evil\" , \"evil\" ; # ",
        " requires \"evil\" , \"evil\" ; #  evil",
        " requires \"evil\" , \"evil\" ; #evil",
        " requires \"evil\" , \"evil\" ;  # evil",
        " requires \"evil\" , \"evil\" ;# evil",
        " requires \"evil\" , \"evil\"  ; # evil",
        " requires \"evil\" , \"evil\"; # evil",
        " requires \"evil\" , \"evil\" , \"evil\" ; # evil",
        " requires \"evil\" ; # evil",
        " requires \"evil\" , \"evil' ; # evil",
        " requires \"evil\" , \";\" ; # evil",
        " requires \"evil\" , \",\" ; # evil",
        " requires \"evil\" , \"'\" ; # evil",
        " requires \"evil\" , \"#\" ; # evil",
        " requires \"evil\" , \"\"\" ; # evil",
        " requires \"evil\" , \"eVil\" ; # evil",
        " requires \"evil\" , \"EVIL\" ; # evil",
        " requires \"evil\" , \"ev_il\" ; # evil",
        " requires \"evil\" , \"ev il\" ; # evil",
        " requires \"evil\" , \"ev4il\" ; # evil",
        " requires \"evil\" , \"e\" ; # evil",
        " requires \"evil\" , \" \" ; # evil",
        " requires \"evil\" , \"6\" ; # evil",
        " requires \"evil\" , \"_\" ; # evil",
        " requires \"evil\" , \"\" ; # evil",
        " requires \"evil\" , 'evil\" ; # evil",
        " requires \"evil\" ,  \"evil\" ; # evil",
        " requires \"evil\" ,\"evil\" ; # evil",
        " requires \"evil\"  , \"evil\" ; # evil",
        " requires \"evil\", \"evil\" ; # evil",
        " requires \"evil' , \"evil\" ; # evil",
        " requires \";\" , \"evil\" ; # evil",
        " requires \",\" , \"evil\" ; # evil",
        " requires \"'\" , \"evil\" ; # evil",
        " requires \"#\" , \"evil\" ; # evil",
        " requires \"\"\" , \"evil\" ; # evil",
        " requires \"eVil\" , \"evil\" ; # evil",
        " requires \"EVIL\" , \"evil\" ; # evil",
        " requires \"ev_il\" , \"evil\" ; # evil",
        " requires \"ev il\" , \"evil\" ; # evil",
        " requires \"ev4il\" , \"evil\" ; # evil",
        " requires \"e\" , \"evil\" ; # evil",
        " requires \" \" , \"evil\" ; # evil",
        " requires \"6\" , \"evil\" ; # evil",
        " requires \"_\" , \"evil\" ; # evil",
        " requires \"\" , \"evil\" ; # evil",
        " requires 'evil\" , \"evil\" ; # evil",
        " requires  \"evil\" , \"evil\" ; # evil",
        " requires\"evil\" , \"evil\" ; # evil",
        "  requires \"evil\" , \"evil\" ; # evil",
        "requires \"evil\" , \"evil\" ; # evil",
        "author_requires \"evil\";",
        "test_requires \"evil\";",
        "build_requires \"evil\";",
        "configure_requires \"evil\";",
        "requires \"evil\";",
        " author_requires \"evil\" , \"evil\" ; # evil",
        " test_requires \"evil\" , \"evil\" ; # evil",
        " build_requires \"evil\" , \"evil\" ; # evil",
        " configure_requires \"evil\" , \"evil\" ; # evil",
        " requires \"evil\" , \"evil\" ; # evil"
      ]
    },
    {
      "regex": "> 1 \\(function \\([^)]+\\) \\{ const x = 10;",
      "exceptionStackTrace": null,
      "matches": [
        "> 1 (function ({) { const x = 10;",
        "> 1 (function (>) { const x = 10;",
        "> 1 (function (=) { const x = 10;",
        "> 1 (function (;) { const x = 10;",
        "> 1 (function ()) { const x = 10;",
        "> 1 (function (() { const x = 10;",
        "> 1 (function (eVil) { const x = 10;",
        "> 1 (function (EVIL) { const x = 10;",
        "> 1 (function (ev_il) { const x = 10;",
        "> 1 (function (ev il) { const x = 10;",
        "> 1 (function (ev4il) { const x = 10;",
        "> 1 (function (e) { const x = 10;",
        "> 1 (function ( ) { const x = 10;",
        "> 1 (function (6) { const x = 10;",
        "> 1 (function (_) { const x = 10;",
        "> 1 (function () { const x = 10;",
        "> 1 (function (evil) { const x = 10;"
      ]
    },
    {
      "regex": "[\\u1ECF]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 7887"
      },
      "matches": []
    },
    { "regex": "^xor\\b", "exceptionStackTrace": null, "matches": ["xor"] },
    {
      "regex": "^the file \"(.+)\" contains:$",
      "exceptionStackTrace": null,
      "matches": [
        "the file \":\" contains:",
        "the file \"\"\" contains:",
        "the file \"eVil\" contains:",
        "the file \"EVIL\" contains:",
        "the file \"ev_il\" contains:",
        "the file \"ev il\" contains:",
        "the file \"ev4il\" contains:",
        "the file \"e\" contains:",
        "the file \" \" contains:",
        "the file \"6\" contains:",
        "the file \"_\" contains:",
        "the file \"\" contains:",
        "the file \"evil\" contains:"
      ]
    },
    {
      "regex": "LooseScan(;|$)",
      "exceptionStackTrace": null,
      "matches": ["LooseScan", "LooseScan;"]
    },
    {
      "regex": "^text-justify",
      "exceptionStackTrace": null,
      "matches": ["text-justify"]
    },
    { "regex": "^\\\\\\=", "exceptionStackTrace": null, "matches": ["\\="] },
    { "regex": "\\$DECODE", "exceptionStackTrace": null, "matches": ["$DECODE"] },
    {
      "regex": "(M:|HOOK:|GENERIC#)(\\s+)(\\S+)(\\s+)(\\S+)",
      "exceptionStackTrace": null,
      "matches": [
        "M: evil :",
        "M: evil #",
        "M: evil eVil",
        "M: evil EVIL",
        "M: evil ev_il",
        "M: evil ev il",
        "M: evil ev4il",
        "M: evil e",
        "M: evil  ",
        "M: evil 6",
        "M: evil _",
        "M: evil ",
        "M: evil  evil",
        "M: evilevil",
        "M: : evil",
        "M: # evil",
        "M: eVil evil",
        "M: EVIL evil",
        "M: ev_il evil",
        "M: ev il evil",
        "M: ev4il evil",
        "M: e evil",
        "M:   evil",
        "M: 6 evil",
        "M: _ evil",
        "M:  evil",
        "M:  evil evil",
        "M:evil evil",
        "GENERIC# evil evil",
        "HOOK: evil evil",
        "M: evil evil"
      ]
    },
    {
      "regex": "^\\t*",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "copying jobs: provider_fail\\/[a-f0-9]+",
      "exceptionStackTrace": null,
      "matches": [
        "copying jobs: provider_fail/00",
        "copying jobs: provider_fail/",
        "copying jobs: provider_fail/g",
        "copying jobs: provider_fail/a",
        "copying jobs: provider_fail/0"
      ]
    },
    {
      "regex": "^@dec (\\S+)(?: (\\d+))?$",
      "exceptionStackTrace": null,
      "matches": [
        "@dec evil 0 0",
        "@dec evil 00",
        "@dec evil ",
        "@dec @ 0",
        "@dec eVil 0",
        "@dec EVIL 0",
        "@dec ev_il 0",
        "@dec ev il 0",
        "@dec ev4il 0",
        "@dec e 0",
        "@dec   0",
        "@dec 6 0",
        "@dec _ 0",
        "@dec  0",
        "@dec evil",
        "@dec evil 0"
      ]
    },
    {
      "regex": "^BBU Capacity Info for Adapter:\\s+(?<value>\\d+)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<v"
      },
      "matches": []
    },
    {
      "regex": "\\/toc\\.md$",
      "exceptionStackTrace": null,
      "matches": ["/toc.md"]
    },
    {
      "regex": "^([fp]*$jt)",
      "exceptionStackTrace": null,
      "matches": ["ppjt", "fjt", "ajt", "jt", "pjt"]
    },
    {
      "regex": "(<pre[^>]*>)\\s*\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^([LRCSPWDE])",
      "exceptionStackTrace": null,
      "matches": ["W", "S", "R", "P", "L", "D", "C", "A", "E"]
    },
    {
      "regex": "&(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "&&",
        "&eVil",
        "&EVIL",
        "&ev_il",
        "&ev il",
        "&ev4il",
        "&e",
        "& ",
        "&6",
        "&_",
        "&",
        "&evil"
      ]
    },
    {
      "regex": "^1\\.(8|9)(\\.\\d+)?(pre|rc\\d?)?",
      "exceptionStackTrace": null,
      "matches": [
        "1.8.0rc00",
        "1.8.0rc",
        "1.8.0prepre",
        "1.8.0",
        "1.8.0.0pre",
        "1.8pre",
        "1.8.00pre",
        "1.8.pre",
        "1.9",
        "1.8",
        "1.9.0pre",
        "1.8.0rc0",
        "1.8.0pre"
      ]
    },
    {
      "regex": "^\\+?inf(inity)?$",
      "exceptionStackTrace": null,
      "matches": [
        "+infinityinity",
        "+inf",
        "++infinity",
        "infinity",
        "inf",
        "+infinity"
      ]
    },
    {
      "regex": "(<T>[Aa]n<\\/T> )<B><Z><N pl=\"n\" gnt=\"n\" gnd=\"f\".><A pl=\"n\" gnt=\"n\".>(?:<[A-Z][^>]*>)*<\\/Z>([^<]+)<\\/B>()",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (parse error): expected character type but received RIGHT_PAREN"
      },
      "matches": []
    },
    {
      "regex": "^\\s*ecu-?(kr|jp|cn|tw|jisx0213)\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        " ecu-kr  ",
        " ecu-kr",
        " ecu--kr ",
        " ecukr ",
        "  ecu-kr ",
        "ecu-kr ",
        "ecujisx0213",
        "ecutw",
        "ecucn",
        "ecujp",
        "ecukr",
        " ecu-jisx0213 ",
        " ecu-tw ",
        " ecu-cn ",
        " ecu-jp ",
        " ecu-kr "
      ]
    },
    {
      "regex": "(?:^|\\s+)qvfnoyrq(?:\\s+|$)",
      "exceptionStackTrace": null,
      "matches": [
        "  qvfnoyrq ",
        "qvfnoyrq  ",
        " qvfnoyrq ",
        "qvfnoyrq",
        "qvfnoyrq "
      ]
    },
    {
      "regex": "Transatlantic Trade",
      "exceptionStackTrace": null,
      "matches": ["Transatlantic Trade"]
    },
    {
      "regex": "(\\w)\\.video\\.id",
      "exceptionStackTrace": null,
      "matches": ["_.video.id", "A.video.id", "0.video.id", "a.video.id"]
    },
    {
      "regex": "removeEvent",
      "exceptionStackTrace": null,
      "matches": ["removeEvent"]
    },
    {
      "regex": "ceph_pool_read_total{cluster=\"ceph\",pool=\"cinder_ssd\"} 347",
      "exceptionStackTrace": null,
      "matches": [
        "ceph_pool_read_total{cluster=\"ceph\",pool=\"cinder_ssd\"} 347"
      ]
    },
    {
      "regex": "<\\S*iframe",
      "exceptionStackTrace": null,
      "matches": [
        "<<iframe",
        "<eViliframe",
        "<EVILiframe",
        "<ev_iliframe",
        "<ev iliframe",
        "<ev4iliframe",
        "<eiframe",
        "< iframe",
        "<6iframe",
        "<_iframe",
        "<iframe",
        "<eviliframe"
      ]
    },
    {
      "regex": "^to [\\w.]+",
      "exceptionStackTrace": null,
      "matches": [
        "to .",
        "to eVil",
        "to EVIL",
        "to ev_il",
        "to ev il",
        "to ev4il",
        "to e",
        "to  ",
        "to 6",
        "to _",
        "to ",
        "to evil"
      ]
    },
    {
      "regex": "\\s+#([\\d]+)$",
      "exceptionStackTrace": null,
      "matches": [" #00", " #", "  #0", "#0", " #0"]
    },
    {
      "regex": "{lang}([^\\{\\}]+){/lang}",
      "exceptionStackTrace": null,
      "matches": [
        "{lang}}{/lang}",
        "{lang}{{/lang}",
        "{lang}/{/lang}",
        "{lang}eVil{/lang}",
        "{lang}EVIL{/lang}",
        "{lang}ev_il{/lang}",
        "{lang}ev il{/lang}",
        "{lang}ev4il{/lang}",
        "{lang}e{/lang}",
        "{lang} {/lang}",
        "{lang}6{/lang}",
        "{lang}_{/lang}",
        "{lang}{/lang}",
        "{lang}evil{/lang}"
      ]
    },
    {
      "regex": "--robin.*\\[required]",
      "exceptionStackTrace": null,
      "matches": [
        "--robin][required]",
        "--robin[[required]",
        "--robin-[required]",
        "--robineVil[required]",
        "--robinEVIL[required]",
        "--robinev_il[required]",
        "--robinev il[required]",
        "--robinev4il[required]",
        "--robine[required]",
        "--robin [required]",
        "--robin6[required]",
        "--robin_[required]",
        "--robin[required]",
        "--robinevil[required]"
      ]
    },
    {
      "regex": "^(?:bbox|columnconfigure|configure|forget|info|location|propagate|remove|rowconfigure|size|slaves)$",
      "exceptionStackTrace": null,
      "matches": [
        "slaves",
        "size",
        "rowconfigure",
        "remove",
        "propagate",
        "location",
        "info",
        "forget",
        "configure",
        "columnconfigure",
        "bbox"
      ]
    },
    {
      "regex": "([A-Z]{2},)*[A-Z]{2}:[a-z]{2}",
      "exceptionStackTrace": null,
      "matches": [
        "AA,AA:aaa",
        "AA,AA:a",
        "AA,AAA:aa",
        "AA,A:aa",
        "AA,AA,AA:aa",
        "AAA,AA:aa",
        "A,AA:aa",
        "AA:aa",
        "AA,AA:aa"
      ]
    },
    {
      "regex": "^(start|minlen|maxlen|sep|scale)$",
      "exceptionStackTrace": null,
      "matches": ["scale", "sep", "maxlen", "minlen", "start"]
    },
    {
      "regex": "--organization-id",
      "exceptionStackTrace": null,
      "matches": ["--organization-id"]
    },
    {
      "regex": "(https?:\\/\\/|www\\.)[\\w-]+(\\.[\\w-]+)+([\\w\\(\\)\\u0080-\\u00FF.,!@?^=%&amp;:\\/~+#-]*[\\w\\(\\)\\u0080-\\u00FF!@?^=%&amp;\\/~+#-])?",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 128"
      },
      "matches": []
    },
    {
      "regex": "(^analy)(sis|ses)$",
      "exceptionStackTrace": null,
      "matches": ["analyses", "analysis"]
    },
    {
      "regex": "\\A(\\w+)(_|-)",
      "exceptionStackTrace": null,
      "matches": [
        "eVil_",
        "EVIL_",
        "ev_il_",
        "ev il_",
        "ev4il_",
        "e_",
        " _",
        "6_",
        "__",
        "_",
        "evil-",
        "evil_"
      ]
    },
    {
      "regex": "^(?:|I )upload the (.+) \"(.+)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "I upload the evil \"\"\"",
        "I upload the evil \"eVil\"",
        "I upload the evil \"EVIL\"",
        "I upload the evil \"ev_il\"",
        "I upload the evil \"ev il\"",
        "I upload the evil \"ev4il\"",
        "I upload the evil \"e\"",
        "I upload the evil \" \"",
        "I upload the evil \"6\"",
        "I upload the evil \"_\"",
        "I upload the evil \"\"",
        "I upload the \" \"evil\"",
        "I upload the eVil \"evil\"",
        "I upload the EVIL \"evil\"",
        "I upload the ev_il \"evil\"",
        "I upload the ev il \"evil\"",
        "I upload the ev4il \"evil\"",
        "I upload the e \"evil\"",
        "I upload the   \"evil\"",
        "I upload the 6 \"evil\"",
        "I upload the _ \"evil\"",
        "I upload the  \"evil\"",
        "I I upload the evil \"evil\"",
        "upload the evil \"evil\"",
        "I upload the evil \"evil\""
      ]
    },
    { "regex": "^$ingroup", "exceptionStackTrace": null, "matches": ["ingroup"] },
    {
      "regex": "^0|(\\d+(%|px|pt|in|pc|mm|cm))$",
      "exceptionStackTrace": null,
      "matches": ["00%", "%", "0cm", "0mm", "0pc", "0in", "0pt", "0px", "0%", "0"]
    },
    {
      "regex": "^(.*)_thumb$",
      "exceptionStackTrace": null,
      "matches": [
        "eVil_thumb",
        "EVIL_thumb",
        "ev_il_thumb",
        "ev il_thumb",
        "ev4il_thumb",
        "e_thumb",
        " _thumb",
        "6_thumb",
        "__thumb",
        "_thumb",
        "evil_thumb"
      ]
    },
    {
      "regex": "identifier[^>]+>urn:issn:X987654321<",
      "exceptionStackTrace": null,
      "matches": [
        "identifier>>urn:issn:X987654321<",
        "identifier<>urn:issn:X987654321<",
        "identifier:>urn:issn:X987654321<",
        "identifiereVil>urn:issn:X987654321<",
        "identifierEVIL>urn:issn:X987654321<",
        "identifierev_il>urn:issn:X987654321<",
        "identifierev il>urn:issn:X987654321<",
        "identifierev4il>urn:issn:X987654321<",
        "identifiere>urn:issn:X987654321<",
        "identifier >urn:issn:X987654321<",
        "identifier6>urn:issn:X987654321<",
        "identifier_>urn:issn:X987654321<",
        "identifier>urn:issn:X987654321<",
        "identifierevil>urn:issn:X987654321<"
      ]
    },
    {
      "regex": "script\\_cve\\_id\\(\\\"([^\\)]*)\\\"\\)",
      "exceptionStackTrace": null,
      "matches": [
        "script_cve_id(\")\")",
        "script_cve_id(\"(\")",
        "script_cve_id(\"\"\")",
        "script_cve_id(\"eVil\")",
        "script_cve_id(\"EVIL\")",
        "script_cve_id(\"ev_il\")",
        "script_cve_id(\"ev il\")",
        "script_cve_id(\"ev4il\")",
        "script_cve_id(\"e\")",
        "script_cve_id(\" \")",
        "script_cve_id(\"6\")",
        "script_cve_id(\"_\")",
        "script_cve_id(\"\")",
        "script_cve_id(\"evil\")"
      ]
    },
    {
      "regex": "^([+\\-]?)0*(?=\\d)",
      "exceptionStackTrace": null,
      "matches": ["-00", "-", "--0", "0", "+0", "", "-0"]
    },
    {
      "regex": "\\s+0$",
      "exceptionStackTrace": null,
      "matches": ["  0", "0", " 0"]
    },
    {
      "regex": "\\<|css\\-([a-zA-Z0-9]+)",
      "exceptionStackTrace": null,
      "matches": [
        "css-eVil",
        "css-EVIL",
        "css-ev_il",
        "css-ev il",
        "css-ev4il",
        "css-e",
        "css- ",
        "css-6",
        "css-_",
        "css-",
        "css-evil",
        "<"
      ]
    },
    {
      "regex": "^(?:0[oO])?([0-7]+)$",
      "exceptionStackTrace": null,
      "matches": ["0O00", "0O", "0O8", "0O0O0", "0o0", "0a0", "0A0", "0", "0O0"]
    },
    {
      "regex": "@test_var",
      "exceptionStackTrace": null,
      "matches": ["@test_var"]
    },
    {
      "regex": "^\\d September 2016$",
      "exceptionStackTrace": null,
      "matches": ["0 September 2016"]
    },
    {
      "regex": "^YAML configuration file `([[a-z][A-Z][0-9]-_\\/\\.]+)` in path `([^`]+)`$",
      "exceptionStackTrace": null,
      "matches": [
        "YAML configuration file `[A0-_/.]` in path ```",
        "YAML configuration file `[A0-_/.]` in path `]`",
        "YAML configuration file `[A0-_/.]` in path `[`",
        "YAML configuration file `[A0-_/.]` in path `/`",
        "YAML configuration file `[A0-_/.]` in path `.`",
        "YAML configuration file `[A0-_/.]` in path `-`",
        "YAML configuration file `[A0-_/.]` in path `eVil`",
        "YAML configuration file `[A0-_/.]` in path `EVIL`",
        "YAML configuration file `[A0-_/.]` in path `ev_il`",
        "YAML configuration file `[A0-_/.]` in path `ev il`",
        "YAML configuration file `[A0-_/.]` in path `ev4il`",
        "YAML configuration file `[A0-_/.]` in path `e`",
        "YAML configuration file `[A0-_/.]` in path ` `",
        "YAML configuration file `[A0-_/.]` in path `6`",
        "YAML configuration file `[A0-_/.]` in path `_`",
        "YAML configuration file `[A0-_/.]` in path ``",
        "YAML configuration file `[A0-_/.]]` in path `evil`",
        "YAML configuration file `[A0-_/.` in path `evil`",
        "YAML configuration file `aA0-_/.]` in path `evil`",
        "YAML configuration file `[A0-_/.]` in path `evil`"
      ]
    },
    { "regex": "irb\\.rb", "exceptionStackTrace": null, "matches": ["irb.rb"] },
    {
      "regex": "g[ea]n$",
      "exceptionStackTrace": null,
      "matches": ["gen", "gbn", "gan"]
    },
    {
      "regex": "humpyard:\\/\\/asset\\/([0-9]*)",
      "exceptionStackTrace": null,
      "matches": [
        "humpyard://asset/00",
        "humpyard://asset/",
        "humpyard://asset/0"
      ]
    },
    {
      "regex": "(?:;\\s*|\\s+)(\\b\\w{2}\\b(?:-\\b\\w{2}\\b)?)\\s*;|(?:\\(|\\[|;)\\s*(\\b\\w{2}\\b(?:-\\b\\w{2}\\b)?)\\s*(?:\\]|\\)|;)",
      "exceptionStackTrace": null,
      "matches": [
        "( aa-aa  ]",
        "( aa-aa]",
        "( aa-aa-aa ]",
        "( aa ]",
        "( aa-aaa ]",
        "( aa-a ]",
        "( aa-_a ]",
        "( aa-Aa ]",
        "( aa-0a ]",
        "( aaa-aa ]",
        "( a-aa ]",
        "( _a-aa ]",
        "( Aa-aa ]",
        "( 0a-aa ]",
        "(  aa-aa ]",
        "(aa-aa ]",
        "  aa-aa ;",
        "aa-aa ;",
        "; aa-aa  ;",
        "; aa-aa;",
        "; aa-aa-aa ;",
        "; aa ;",
        "; aa-aaa ;",
        "; aa-a ;",
        "; aa-_a ;",
        "; aa-Aa ;",
        "; aa-0a ;",
        "; aaa-aa ;",
        "; a-aa ;",
        "; _a-aa ;",
        "; Aa-aa ;",
        "; 0a-aa ;",
        ";  aa-aa ;",
        ";aa-aa ;",
        ";aa]",
        "[aa]",
        "(aa;",
        "(aa)",
        "(aa]",
        " aa;",
        ";aa;",
        "; aa-aa ]",
        "[ aa-aa ]",
        "( aa-aa ;",
        "( aa-aa )",
        "( aa-aa ]",
        " aa-aa ;",
        "; aa-aa ;"
      ]
    },
    {
      "regex": "\\A(name|repeat)\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "[);:]$",
      "exceptionStackTrace": null,
      "matches": [";", ")", ":"]
    },
    { "regex": "RELDIR", "exceptionStackTrace": null, "matches": ["RELDIR"] },
    {
      "regex": "sns\\.(.+Grid)\\(",
      "exceptionStackTrace": null,
      "matches": [
        "sns..Grid(",
        "sns.(Grid(",
        "sns.eVilGrid(",
        "sns.EVILGrid(",
        "sns.ev_ilGrid(",
        "sns.ev ilGrid(",
        "sns.ev4ilGrid(",
        "sns.eGrid(",
        "sns. Grid(",
        "sns.6Grid(",
        "sns._Grid(",
        "sns.Grid(",
        "sns.evilGrid("
      ]
    },
    {
      "regex": "access_token=(.+)&expires=(\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "access_token=evil&expires=00",
        "access_token=evil&expires=",
        "access_token==&expires=0",
        "access_token=&&expires=0",
        "access_token=eVil&expires=0",
        "access_token=EVIL&expires=0",
        "access_token=ev_il&expires=0",
        "access_token=ev il&expires=0",
        "access_token=ev4il&expires=0",
        "access_token=e&expires=0",
        "access_token= &expires=0",
        "access_token=6&expires=0",
        "access_token=_&expires=0",
        "access_token=&expires=0",
        "access_token=evil&expires=0"
      ]
    },
    {
      "regex": "a+?a??",
      "exceptionStackTrace": null,
      "matches": ["aaa", "a", "aa"]
    },
    {
      "regex": "Server does not support environment variables",
      "exceptionStackTrace": null,
      "matches": ["Server does not support environment variables"]
    },
    {
      "regex": "Gid:\\s*?(\\d+)\\s*?(\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "Gid: 0 00",
        "Gid: 0 ",
        "Gid: 0  0",
        "Gid: 00",
        "Gid: 00 0",
        "Gid:  0",
        "Gid:  0 0",
        "Gid:0 0",
        "Gid:00",
        "Gid: 0 0"
      ]
    },
    {
      "regex": "<td class=\"([^\\\"]*)today([^\\\"]*)\">14</td>",
      "exceptionStackTrace": null,
      "matches": [
        "<td class=\"eviltoday>\">14</td>",
        "<td class=\"eviltoday=\">14</td>",
        "<td class=\"eviltoday<\">14</td>",
        "<td class=\"eviltoday/\">14</td>",
        "<td class=\"eviltoday\"\">14</td>",
        "<td class=\"eviltodayeVil\">14</td>",
        "<td class=\"eviltodayEVIL\">14</td>",
        "<td class=\"eviltodayev_il\">14</td>",
        "<td class=\"eviltodayev il\">14</td>",
        "<td class=\"eviltodayev4il\">14</td>",
        "<td class=\"eviltodaye\">14</td>",
        "<td class=\"eviltoday \">14</td>",
        "<td class=\"eviltoday6\">14</td>",
        "<td class=\"eviltoday_\">14</td>",
        "<td class=\"eviltoday\">14</td>",
        "<td class=\">todayevil\">14</td>",
        "<td class=\"=todayevil\">14</td>",
        "<td class=\"<todayevil\">14</td>",
        "<td class=\"/todayevil\">14</td>",
        "<td class=\"\"todayevil\">14</td>",
        "<td class=\"eViltodayevil\">14</td>",
        "<td class=\"EVILtodayevil\">14</td>",
        "<td class=\"ev_iltodayevil\">14</td>",
        "<td class=\"ev iltodayevil\">14</td>",
        "<td class=\"ev4iltodayevil\">14</td>",
        "<td class=\"etodayevil\">14</td>",
        "<td class=\" todayevil\">14</td>",
        "<td class=\"6todayevil\">14</td>",
        "<td class=\"_todayevil\">14</td>",
        "<td class=\"todayevil\">14</td>",
        "<td class=\"today\">14</td>",
        "<td class=\"eviltodayevil\">14</td>"
      ]
    },
    {
      "regex": "(?<![<>])(<S>[Ii] dteannta<\\/S> (?:<[DOS][^>]*>[Ll][^<]+<\\/[DOS]>))(?![<>])",
      "exceptionStackTrace": null,
      "matches": [
        "<S>i dteannta</S> <Sevil>levil</O>",
        "<S>i dteannta</S> <Sevil>levil</D>",
        "<S>i dteannta</S> <Sevil>levil</A>",
        "<S>i dteannta</S> <Sevil>l></S>",
        "<S>i dteannta</S> <Sevil>l<</S>",
        "<S>i dteannta</S> <Sevil>l/</S>",
        "<S>i dteannta</S> <Sevil>leVil</S>",
        "<S>i dteannta</S> <Sevil>lEVIL</S>",
        "<S>i dteannta</S> <Sevil>lev_il</S>",
        "<S>i dteannta</S> <Sevil>lev il</S>",
        "<S>i dteannta</S> <Sevil>lev4il</S>",
        "<S>i dteannta</S> <Sevil>le</S>",
        "<S>i dteannta</S> <Sevil>l </S>",
        "<S>i dteannta</S> <Sevil>l6</S>",
        "<S>i dteannta</S> <Sevil>l_</S>",
        "<S>i dteannta</S> <Sevil>l</S>",
        "<S>i dteannta</S> <Sevil>aevil</S>",
        "<S>i dteannta</S> <Sevil>Levil</S>",
        "<S>i dteannta</S> <Sevil>Aevil</S>",
        "<S>i dteannta</S> <S>>levil</S>",
        "<S>i dteannta</S> <S<>levil</S>",
        "<S>i dteannta</S> <S/>levil</S>",
        "<S>i dteannta</S> <SeVil>levil</S>",
        "<S>i dteannta</S> <SEVIL>levil</S>",
        "<S>i dteannta</S> <Sev_il>levil</S>",
        "<S>i dteannta</S> <Sev il>levil</S>",
        "<S>i dteannta</S> <Sev4il>levil</S>",
        "<S>i dteannta</S> <Se>levil</S>",
        "<S>i dteannta</S> <S >levil</S>",
        "<S>i dteannta</S> <S6>levil</S>",
        "<S>i dteannta</S> <S_>levil</S>",
        "<S>i dteannta</S> <Oevil>levil</S>",
        "<S>i dteannta</S> <Devil>levil</S>",
        "<S>i dteannta</S> <Aevil>levil</S>",
        "<S>a dteannta</S> <Sevil>levil</S>",
        "<S>I dteannta</S> <Sevil>levil</S>",
        "<S>A dteannta</S> <Sevil>levil</S>",
        "<S>i dteannta</S> <S>levil</S>",
        "<S>i dteannta</S> <Sevil>levil</S>"
      ]
    },
    {
      "regex": "\\\\sharp ",
      "exceptionStackTrace": null,
      "matches": ["\\sharp "]
    },
    {
      "regex": "^(?:LicenseRef-([0-9A-Za-z-+.]+))",
      "exceptionStackTrace": null,
      "matches": [
        "LicenseRef-.",
        "LicenseRef--",
        "LicenseRef-+",
        "LicenseRef-eVil",
        "LicenseRef-EVIL",
        "LicenseRef-ev_il",
        "LicenseRef-ev il",
        "LicenseRef-ev4il",
        "LicenseRef-e",
        "LicenseRef- ",
        "LicenseRef-6",
        "LicenseRef-_",
        "LicenseRef-",
        "LicenseRef-evil"
      ]
    },
    {
      "regex": "\\\\30[3-5]\\\\[0-9]{3}",
      "exceptionStackTrace": null,
      "matches": ["\\303\\0000", "\\303\\00", "\\300\\000", "\\303\\000"]
    },
    {
      "regex": "\\n?^<!--",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^mastersthesis",
      "exceptionStackTrace": null,
      "matches": ["mastersthesis"]
    },
    {
      "regex": "([\\d]+)\\.\\.([\\d]+)",
      "exceptionStackTrace": null,
      "matches": ["0..00", "0..", "00..0", "..0", "0..0"]
    },
    {
      "regex": "\\A([a-z]+):",
      "exceptionStackTrace": null,
      "matches": [
        "eVil:",
        "EVIL:",
        "ev_il:",
        "ev il:",
        "ev4il:",
        "e:",
        " :",
        "6:",
        "_:",
        ":",
        "evil:"
      ]
    },
    { "regex": "::X509", "exceptionStackTrace": null, "matches": ["::X509"] },
    {
      "regex": "\\b($comp_re)\\b",
      "exceptionStackTrace": null,
      "matches": ["comp_re"]
    },
    {
      "regex": "^[\\s]*Warning:",
      "exceptionStackTrace": null,
      "matches": ["  Warning:", "Warning:", " Warning:"]
    },
    {
      "regex": "\\/*\\/*\\.html$",
      "exceptionStackTrace": null,
      "matches": ["///.html", "/.html", ".html", "//.html"]
    },
    {
      "regex": "(?P<cuda>cuda\\d+\\.\\d+)\\.(?P<mofed>mofed\\d+\\.\\d+)\\.(?P<compiler>(gnu\\d+\\.\\d+\\.\\d+)|(pgi\\d+\\.\\d+))",
      "exceptionStackTrace": null,
      "matches": [
        "cuda0.0.mofed0.0.pgi0.00",
        "cuda0.0.mofed0.0.pgi0.",
        "cuda0.0.mofed0.0.pgi00.0",
        "cuda0.0.mofed0.0.pgi.0",
        "cuda0.0.mofed0.0.gnu0.0.00",
        "cuda0.0.mofed0.0.gnu0.0.",
        "cuda0.0.mofed0.0.gnu0.00.0",
        "cuda0.0.mofed0.0.gnu0..0",
        "cuda0.0.mofed0.0.gnu00.0.0",
        "cuda0.0.mofed0.0.gnu.0.0",
        "cuda0.0.mofed0.00.gnu0.0.0",
        "cuda0.0.mofed0..gnu0.0.0",
        "cuda0.0.mofed00.0.gnu0.0.0",
        "cuda0.0.mofed.0.gnu0.0.0",
        "cuda0.00.mofed0.0.gnu0.0.0",
        "cuda0..mofed0.0.gnu0.0.0",
        "cuda00.0.mofed0.0.gnu0.0.0",
        "cuda.0.mofed0.0.gnu0.0.0",
        "cuda0.0.mofed0.0.pgi0.0",
        "cuda0.0.mofed0.0.gnu0.0.0"
      ]
    },
    {
      "regex": "([0-9]+~)(.*?)",
      "exceptionStackTrace": null,
      "matches": [
        "0~~",
        "0~eVil",
        "0~EVIL",
        "0~ev_il",
        "0~ev il",
        "0~ev4il",
        "0~e",
        "0~ ",
        "0~6",
        "0~_",
        "00~evil",
        "~evil",
        "0~",
        "0~evil"
      ]
    },
    {
      "regex": "NET 2003[\\/\\]VC7",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unterminated character set"
      },
      "matches": []
    },
    { "regex": "^title=", "exceptionStackTrace": null, "matches": ["title="] },
    {
      "regex": "[0-9]{4}\\.[0-9]{5}",
      "exceptionStackTrace": null,
      "matches": [
        "0000.000000",
        "0000.0000",
        "00000.00000",
        "000.00000",
        "0000.00000"
      ]
    },
    {
      "regex": "\\*|div|mod",
      "exceptionStackTrace": null,
      "matches": ["mod", "div", "*"]
    },
    {
      "regex": "GeomFromText\\('(.+)',\\d+\\)",
      "exceptionStackTrace": null,
      "matches": [
        "GeomFromText('evil',00)",
        "GeomFromText('evil',)",
        "GeomFromText(',',0)",
        "GeomFromText(')',0)",
        "GeomFromText('(',0)",
        "GeomFromText(''',0)",
        "GeomFromText('eVil',0)",
        "GeomFromText('EVIL',0)",
        "GeomFromText('ev_il',0)",
        "GeomFromText('ev il',0)",
        "GeomFromText('ev4il',0)",
        "GeomFromText('e',0)",
        "GeomFromText(' ',0)",
        "GeomFromText('6',0)",
        "GeomFromText('_',0)",
        "GeomFromText('',0)",
        "GeomFromText('evil',0)"
      ]
    },
    {
      "regex": "^balances included",
      "exceptionStackTrace": null,
      "matches": ["balances included"]
    },
    {
      "regex": "<meta name=\"twitter:description\" content=\"Custom Twitter description\" \\/>",
      "exceptionStackTrace": null,
      "matches": [
        "<meta name=\"twitter:description\" content=\"Custom Twitter description\" />"
      ]
    },
    {
      "regex": "([aioeu])\\^",
      "exceptionStackTrace": null,
      "matches": ["o^", "i^", "e^", "b^", "a^", "u^"]
    },
    {
      "regex": "\\.(dll|exe)$",
      "exceptionStackTrace": null,
      "matches": [".exe", ".dll"]
    },
    {
      "regex": "^[\\w\\.\\-]+\\@[\\w\\.\\-]+$",
      "exceptionStackTrace": null,
      "matches": [
        "evil@@",
        "evil@.",
        "evil@-",
        "evil@eVil",
        "evil@EVIL",
        "evil@ev_il",
        "evil@ev il",
        "evil@ev4il",
        "evil@e",
        "evil@ ",
        "evil@6",
        "evil@_",
        "evil@",
        "@@evil",
        ".@evil",
        "-@evil",
        "eVil@evil",
        "EVIL@evil",
        "ev_il@evil",
        "ev il@evil",
        "ev4il@evil",
        "e@evil",
        " @evil",
        "6@evil",
        "_@evil",
        "@evil",
        "evil@evil"
      ]
    },
    {
      "regex": "invalid arg specified: 3.142",
      "exceptionStackTrace": null,
      "matches": [
        "invalid arg specified: 3A142",
        "invalid arg specified: 3:142",
        "invalid arg specified: 30142",
        "invalid arg specified: 3 142",
        "invalid arg specified: 3a142"
      ]
    },
    {
      "regex": "N 'T( |$)",
      "exceptionStackTrace": null,
      "matches": ["N 'T", "N 'T "]
    },
    {
      "regex": "([A-Za-z0-9#_\\-\\;\\&.\\'\\^\\`\\\\\\{\\} ]+?)\u300a(.+?)\u300b",
      "exceptionStackTrace": null,
      "matches": [
        "evil\u300a}\u300b",
        "evil\u300a{\u300b",
        "evil\u300a`\u300b",
        "evil\u300a^\u300b",
        "evil\u300a\\\u300b",
        "evil\u300a;\u300b",
        "evil\u300a.\u300b",
        "evil\u300a-\u300b",
        "evil\u300a'\u300b",
        "evil\u300a&\u300b",
        "evil\u300a#\u300b",
        "evil\u300aeVil\u300b",
        "evil\u300aEVIL\u300b",
        "evil\u300aev_il\u300b",
        "evil\u300aev il\u300b",
        "evil\u300aev4il\u300b",
        "evil\u300ae\u300b",
        "evil\u300a \u300b",
        "evil\u300a6\u300b",
        "evil\u300a_\u300b",
        "evil\u300a\u300b",
        "}\u300aevil\u300b",
        "{\u300aevil\u300b",
        "`\u300aevil\u300b",
        "^\u300aevil\u300b",
        "\\\u300aevil\u300b",
        ";\u300aevil\u300b",
        ".\u300aevil\u300b",
        "-\u300aevil\u300b",
        "'\u300aevil\u300b",
        "&\u300aevil\u300b",
        "#\u300aevil\u300b",
        "eVil\u300aevil\u300b",
        "EVIL\u300aevil\u300b",
        "ev_il\u300aevil\u300b",
        "ev il\u300aevil\u300b",
        "ev4il\u300aevil\u300b",
        "e\u300aevil\u300b",
        " \u300aevil\u300b",
        "6\u300aevil\u300b",
        "_\u300aevil\u300b",
        "\u300aevil\u300b",
        "evil\u300aevil\u300b"
      ]
    },
    {
      "regex": "grep \\^key= ~\\/\\.ssh\\/environment",
      "exceptionStackTrace": null,
      "matches": ["grep ^key= ~/.ssh/environment"]
    },
    {
      "regex": "^(\\/vol|snap reserve)",
      "exceptionStackTrace": null,
      "matches": ["snap reserve", "/vol"]
    },
    {
      "regex": ":.*\\\".*\\\"",
      "exceptionStackTrace": null,
      "matches": [
        ":evil\":\"",
        ":evil\"\"\"",
        ":evil\"eVil\"",
        ":evil\"EVIL\"",
        ":evil\"ev_il\"",
        ":evil\"ev il\"",
        ":evil\"ev4il\"",
        ":evil\"e\"",
        ":evil\" \"",
        ":evil\"6\"",
        ":evil\"_\"",
        ":evil\"\"",
        "::\"evil\"",
        ":\"\"evil\"",
        ":eVil\"evil\"",
        ":EVIL\"evil\"",
        ":ev_il\"evil\"",
        ":ev il\"evil\"",
        ":ev4il\"evil\"",
        ":e\"evil\"",
        ": \"evil\"",
        ":6\"evil\"",
        ":_\"evil\"",
        ":\"evil\"",
        ":\"\"",
        ":evil\"evil\""
      ]
    },
    {
      "regex": "Pair.chain: Function must return a Pair",
      "exceptionStackTrace": null,
      "matches": [
        "PairAchain: Function must return a Pair",
        "Pair:chain: Function must return a Pair",
        "Pair0chain: Function must return a Pair",
        "Pair chain: Function must return a Pair",
        "Pairachain: Function must return a Pair"
      ]
    },
    {
      "regex": "^[nsew]\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "example test sub",
      "exceptionStackTrace": null,
      "matches": ["example test sub"]
    },
    {
      "regex": "([^=]*)(?:=?)(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "evil==",
        "evil=eVil",
        "evil=EVIL",
        "evil=ev_il",
        "evil=ev il",
        "evil=ev4il",
        "evil=e",
        "evil= ",
        "evil=6",
        "evil=_",
        "evil=",
        "evil==evil",
        "evilevil",
        "==evil",
        "eVil=evil",
        "EVIL=evil",
        "ev_il=evil",
        "ev il=evil",
        "ev4il=evil",
        "e=evil",
        " =evil",
        "6=evil",
        "_=evil",
        "=evil",
        "",
        "evil=evil"
      ]
    },
    {
      "regex": "[$'][\\w\\D]+[$']",
      "exceptionStackTrace": null,
      "matches": [
        "'evil$",
        "'''",
        "'$'",
        "'eVil'",
        "'EVIL'",
        "'ev_il'",
        "'ev il'",
        "'ev4il'",
        "'e'",
        "' '",
        "'6'",
        "'_'",
        "''",
        "$evil'",
        "'evil'"
      ]
    },
    { "regex": "^tag_", "exceptionStackTrace": null, "matches": ["tag_"] },
    {
      "regex": "Exiting hashdiff_initial; changes: 2, nested changes: 0",
      "exceptionStackTrace": null,
      "matches": ["Exiting hashdiff_initial; changes: 2, nested changes: 0"]
    },
    {
      "regex": "user_id.*:index=>{.* :with=>\\[\"str_short\", \"",
      "exceptionStackTrace": null,
      "matches": [
        "user_idevil:index=>{{ :with=>[\"str_short\", \"",
        "user_idevil:index=>{[ :with=>[\"str_short\", \"",
        "user_idevil:index=>{> :with=>[\"str_short\", \"",
        "user_idevil:index=>{= :with=>[\"str_short\", \"",
        "user_idevil:index=>{: :with=>[\"str_short\", \"",
        "user_idevil:index=>{, :with=>[\"str_short\", \"",
        "user_idevil:index=>{\" :with=>[\"str_short\", \"",
        "user_idevil:index=>{eVil :with=>[\"str_short\", \"",
        "user_idevil:index=>{EVIL :with=>[\"str_short\", \"",
        "user_idevil:index=>{ev_il :with=>[\"str_short\", \"",
        "user_idevil:index=>{ev il :with=>[\"str_short\", \"",
        "user_idevil:index=>{ev4il :with=>[\"str_short\", \"",
        "user_idevil:index=>{e :with=>[\"str_short\", \"",
        "user_idevil:index=>{  :with=>[\"str_short\", \"",
        "user_idevil:index=>{6 :with=>[\"str_short\", \"",
        "user_idevil:index=>{_ :with=>[\"str_short\", \"",
        "user_idevil:index=>{ :with=>[\"str_short\", \"",
        "user_id{:index=>{evil :with=>[\"str_short\", \"",
        "user_id[:index=>{evil :with=>[\"str_short\", \"",
        "user_id>:index=>{evil :with=>[\"str_short\", \"",
        "user_id=:index=>{evil :with=>[\"str_short\", \"",
        "user_id::index=>{evil :with=>[\"str_short\", \"",
        "user_id,:index=>{evil :with=>[\"str_short\", \"",
        "user_id\":index=>{evil :with=>[\"str_short\", \"",
        "user_ideVil:index=>{evil :with=>[\"str_short\", \"",
        "user_idEVIL:index=>{evil :with=>[\"str_short\", \"",
        "user_idev_il:index=>{evil :with=>[\"str_short\", \"",
        "user_idev il:index=>{evil :with=>[\"str_short\", \"",
        "user_idev4il:index=>{evil :with=>[\"str_short\", \"",
        "user_ide:index=>{evil :with=>[\"str_short\", \"",
        "user_id :index=>{evil :with=>[\"str_short\", \"",
        "user_id6:index=>{evil :with=>[\"str_short\", \"",
        "user_id_:index=>{evil :with=>[\"str_short\", \"",
        "user_id:index=>{evil :with=>[\"str_short\", \"",
        "user_id:index=>{ :with=>[\"str_short\", \"",
        "user_idevil:index=>{evil :with=>[\"str_short\", \""
      ]
    },
    {
      "regex": "$self->{'regex_tec_country'}",
      "exceptionStackTrace": null,
      "matches": ["self->{'regex_tec_country'}"]
    },
    {
      "regex": "The use of doubles or partial doubles from rspec-mocks outside of the per-test lifecycle is not supported.",
      "exceptionStackTrace": null,
      "matches": [
        "The use of doubles or partial doubles from rspec-mocks outside of the per-test lifecycle is not supportedA",
        "The use of doubles or partial doubles from rspec-mocks outside of the per-test lifecycle is not supported0",
        "The use of doubles or partial doubles from rspec-mocks outside of the per-test lifecycle is not supported-",
        "The use of doubles or partial doubles from rspec-mocks outside of the per-test lifecycle is not supported ",
        "The use of doubles or partial doubles from rspec-mocks outside of the per-test lifecycle is not supporteda"
      ]
    },
    {
      "regex": "carlson.sharp.visit1",
      "exceptionStackTrace": null,
      "matches": [
        "carlsonasharp_visit1",
        "carlsonasharpAvisit1",
        "carlsonasharp0visit1",
        "carlsonasharp visit1",
        "carlson_sharpavisit1",
        "carlsonAsharpavisit1",
        "carlson0sharpavisit1",
        "carlson sharpavisit1",
        "carlsonasharpavisit1"
      ]
    },
    { "regex": "-\\$", "exceptionStackTrace": null, "matches": ["-$"] },
    {
      "regex": "^[A-Za-z\\$_][A-Za-z0-9\\$_]*$",
      "exceptionStackTrace": null,
      "matches": [
        "_$",
        "_eVil",
        "_EVIL",
        "_ev_il",
        "_ev il",
        "_ev4il",
        "_e",
        "_ ",
        "_6",
        "__",
        "aevil",
        "Aevil",
        "$evil",
        "_",
        "_evil"
      ]
    },
    {
      "regex": "^__(version|author|license)__ = '([\\w\\.@]+)'$",
      "exceptionStackTrace": null,
      "matches": [
        "__version__ = '@'",
        "__version__ = '='",
        "__version__ = '.'",
        "__version__ = '''",
        "__version__ = 'eVil'",
        "__version__ = 'EVIL'",
        "__version__ = 'ev_il'",
        "__version__ = 'ev il'",
        "__version__ = 'ev4il'",
        "__version__ = 'e'",
        "__version__ = ' '",
        "__version__ = '6'",
        "__version__ = '_'",
        "__version__ = ''",
        "__license__ = 'evil'",
        "__author__ = 'evil'",
        "__version__ = 'evil'"
      ]
    },
    {
      "regex": "System returned to ROM by ",
      "exceptionStackTrace": null,
      "matches": ["System returned to ROM by "]
    },
    {
      "regex": "(\\d\\d\\d\\d)(?:(\\d\\d)(?:(\\d\\d)(?:T([0-9:.,]*)(?:Z|([+-][0-9:.,]*))?)?)?)?",
      "exceptionStackTrace": null,
      "matches": [
        "00000000T,-,,",
        "00000000T,-",
        "00000000T,-:",
        "00000000T,-0",
        "00000000T,-.",
        "00000000T,+,",
        "00000000T,Z0000T,Z",
        "00000000T,Z00T,Z",
        "000000",
        "00000000T,ZT,Z",
        "00000000",
        "00000000T,ZZ",
        "00000000T,",
        "00000000T,,Z",
        "00000000TZ",
        "00000000T:Z",
        "00000000T0Z",
        "00000000T.Z",
        "0000",
        "00000000T,-,",
        "00000000T,Z"
      ]
    },
    {
      "regex": "AppleWebKit\\/([0-9]+)(?:\\.([0-9]+))(?:\\.([0-9]+))",
      "exceptionStackTrace": null,
      "matches": [
        "AppleWebKit/0.0.00",
        "AppleWebKit/0.0.",
        "AppleWebKit/0.00.0",
        "AppleWebKit/0..0",
        "AppleWebKit/00.0.0",
        "AppleWebKit/.0.0",
        "AppleWebKit/0.0.0"
      ]
    },
    {
      "regex": "ceph_monitor_clock_skew_seconds{cluster=\"ceph\",monitor=\"test-mon01\"} 2.2e\\-05",
      "exceptionStackTrace": null,
      "matches": [
        "ceph_monitor_clock_skew_seconds{cluster=\"ceph\",monitor=\"test-mon01\"} 2}2e-05",
        "ceph_monitor_clock_skew_seconds{cluster=\"ceph\",monitor=\"test-mon01\"} 2{2e-05",
        "ceph_monitor_clock_skew_seconds{cluster=\"ceph\",monitor=\"test-mon01\"} 2_2e-05",
        "ceph_monitor_clock_skew_seconds{cluster=\"ceph\",monitor=\"test-mon01\"} 2A2e-05",
        "ceph_monitor_clock_skew_seconds{cluster=\"ceph\",monitor=\"test-mon01\"} 2=2e-05",
        "ceph_monitor_clock_skew_seconds{cluster=\"ceph\",monitor=\"test-mon01\"} 202e-05",
        "ceph_monitor_clock_skew_seconds{cluster=\"ceph\",monitor=\"test-mon01\"} 2-2e-05",
        "ceph_monitor_clock_skew_seconds{cluster=\"ceph\",monitor=\"test-mon01\"} 2,2e-05",
        "ceph_monitor_clock_skew_seconds{cluster=\"ceph\",monitor=\"test-mon01\"} 2\"2e-05",
        "ceph_monitor_clock_skew_seconds{cluster=\"ceph\",monitor=\"test-mon01\"} 2 2e-05",
        "ceph_monitor_clock_skew_seconds{cluster=\"ceph\",monitor=\"test-mon01\"} 2a2e-05"
      ]
    },
    { "regex": "%UP%", "exceptionStackTrace": null, "matches": ["%UP%"] },
    { "regex": "SCALAR\\(", "exceptionStackTrace": null, "matches": ["SCALAR("] },
    {
      "regex": "^mysql://",
      "exceptionStackTrace": null,
      "matches": ["mysql://"]
    },
    {
      "regex": "^(.*):\\s+(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "evil: :",
        "evil: eVil",
        "evil: EVIL",
        "evil: ev_il",
        "evil: ev il",
        "evil: ev4il",
        "evil: e",
        "evil:  ",
        "evil: 6",
        "evil: _",
        "evil: ",
        "evil:  evil",
        "evil:evil",
        ":: evil",
        "eVil: evil",
        "EVIL: evil",
        "ev_il: evil",
        "ev il: evil",
        "ev4il: evil",
        "e: evil",
        " : evil",
        "6: evil",
        "_: evil",
        ": evil",
        ": ",
        "evil: evil"
      ]
    },
    { "regex": "jobvl$", "exceptionStackTrace": null, "matches": ["jobvl"] },
    { "regex": "^$ns", "exceptionStackTrace": null, "matches": ["ns"] },
    {
      "regex": "^ERRSIG\\s+([^\\s]+)",
      "exceptionStackTrace": null,
      "matches": [
        "ERRSIG eVil",
        "ERRSIG EVIL",
        "ERRSIG ev_il",
        "ERRSIG ev il",
        "ERRSIG ev4il",
        "ERRSIG e",
        "ERRSIG  ",
        "ERRSIG 6",
        "ERRSIG _",
        "ERRSIG ",
        "ERRSIG  evil",
        "ERRSIGevil",
        "ERRSIG evil"
      ]
    },
    {
      "regex": "__($subsre)(?:\\((.+?)\\))?__}",
      "exceptionStackTrace": null,
      "matches": [
        "__subsre(evil)(evil)__}",
        "__subsre(})__}",
        "__subsre())__}",
        "__subsre(()__}",
        "__subsre(eVil)__}",
        "__subsre(EVIL)__}",
        "__subsre(ev_il)__}",
        "__subsre(ev il)__}",
        "__subsre(ev4il)__}",
        "__subsre(e)__}",
        "__subsre( )__}",
        "__subsre(6)__}",
        "__subsre(_)__}",
        "__subsre()__}",
        "__subsre__}",
        "__subsre(evil)__}"
      ]
    },
    {
      "regex": "\\Q$HIGHLIGHT_STYLE\\E",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\Q"
      },
      "matches": []
    },
    {
      "regex": "\\x1b[^m]*m",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 27"
      },
      "matches": []
    },
    {
      "regex": "^0+([0-7]{0,10}|[0-3][0-7]{10})$",
      "exceptionStackTrace": null,
      "matches": [
        "0000000000000",
        "008000000000",
        "040000000000",
        "00000000000",
        "08",
        "000",
        "0",
        "000000000000",
        "00"
      ]
    },
    { "regex": "MB", "exceptionStackTrace": null, "matches": ["MB"] },
    {
      "regex": "^[0-9]{4}-[01][0-9]-[0-3][0-9]T[0-9]{2}:[0-9]{2}:[0-9]{2}$",
      "exceptionStackTrace": null,
      "matches": [
        "0000-10-00T00:00:000",
        "0000-10-00T00:00:0",
        "0000-10-00T00:000:00",
        "0000-10-00T00:0:00",
        "0000-10-00T000:00:00",
        "0000-10-00T0:00:00",
        "0000-10-40T00:00:00",
        "0000-20-00T00:00:00",
        "0000-00-00T00:00:00",
        "00000-10-00T00:00:00",
        "000-10-00T00:00:00",
        "0000-10-00T00:00:00"
      ]
    },
    {
      "regex": "<($local_part)\\@($domain)>",
      "exceptionStackTrace": null,
      "matches": ["<local_part@domain>"]
    },
    {
      "regex": "(?<![<>])(<[A-DF-Z][^>]*>n?[Dd]h?eich<\\/[A-DF-Z]> <N pl=\"n\" gnt=\"n\" gnd=\"f\">n-uair<\\/N>)(?![<>])",
      "exceptionStackTrace": null,
      "matches": [
        "<Fevil>ndheich</E> <N pl=\"n\" gnt=\"n\" gnd=\"f\">n-uair</N>",
        "<Fevil>ndheich</A> <N pl=\"n\" gnt=\"n\" gnd=\"f\">n-uair</N>",
        "<Fevil>ndhheich</F> <N pl=\"n\" gnt=\"n\" gnd=\"f\">n-uair</N>",
        "<Fevil>ndeich</F> <N pl=\"n\" gnt=\"n\" gnd=\"f\">n-uair</N>",
        "<Fevil>naheich</F> <N pl=\"n\" gnt=\"n\" gnd=\"f\">n-uair</N>",
        "<Fevil>nDheich</F> <N pl=\"n\" gnt=\"n\" gnd=\"f\">n-uair</N>",
        "<Fevil>nAheich</F> <N pl=\"n\" gnt=\"n\" gnd=\"f\">n-uair</N>",
        "<Fevil>nndheich</F> <N pl=\"n\" gnt=\"n\" gnd=\"f\">n-uair</N>",
        "<Fevil>dheich</F> <N pl=\"n\" gnt=\"n\" gnd=\"f\">n-uair</N>",
        "<F>>ndheich</F> <N pl=\"n\" gnt=\"n\" gnd=\"f\">n-uair</N>",
        "<F=>ndheich</F> <N pl=\"n\" gnt=\"n\" gnd=\"f\">n-uair</N>",
        "<F<>ndheich</F> <N pl=\"n\" gnt=\"n\" gnd=\"f\">n-uair</N>",
        "<F/>ndheich</F> <N pl=\"n\" gnt=\"n\" gnd=\"f\">n-uair</N>",
        "<F->ndheich</F> <N pl=\"n\" gnt=\"n\" gnd=\"f\">n-uair</N>",
        "<F\">ndheich</F> <N pl=\"n\" gnt=\"n\" gnd=\"f\">n-uair</N>",
        "<FeVil>ndheich</F> <N pl=\"n\" gnt=\"n\" gnd=\"f\">n-uair</N>",
        "<FEVIL>ndheich</F> <N pl=\"n\" gnt=\"n\" gnd=\"f\">n-uair</N>",
        "<Fev_il>ndheich</F> <N pl=\"n\" gnt=\"n\" gnd=\"f\">n-uair</N>",
        "<Fev il>ndheich</F> <N pl=\"n\" gnt=\"n\" gnd=\"f\">n-uair</N>",
        "<Fev4il>ndheich</F> <N pl=\"n\" gnt=\"n\" gnd=\"f\">n-uair</N>",
        "<Fe>ndheich</F> <N pl=\"n\" gnt=\"n\" gnd=\"f\">n-uair</N>",
        "<F >ndheich</F> <N pl=\"n\" gnt=\"n\" gnd=\"f\">n-uair</N>",
        "<F6>ndheich</F> <N pl=\"n\" gnt=\"n\" gnd=\"f\">n-uair</N>",
        "<F_>ndheich</F> <N pl=\"n\" gnt=\"n\" gnd=\"f\">n-uair</N>",
        "<F>ndheich</F> <N pl=\"n\" gnt=\"n\" gnd=\"f\">n-uair</N>",
        "<Eevil>ndheich</F> <N pl=\"n\" gnt=\"n\" gnd=\"f\">n-uair</N>",
        "<Aevil>ndheich</F> <N pl=\"n\" gnt=\"n\" gnd=\"f\">n-uair</N>",
        "<F>deich</F> <N pl=\"n\" gnt=\"n\" gnd=\"f\">n-uair</N>",
        "<Fevil>ndheich</F> <N pl=\"n\" gnt=\"n\" gnd=\"f\">n-uair</N>"
      ]
    },
    {
      "regex": "webOS.*(P160UNA)/(\\d+).(\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "webOSevilP160UNA/0a00",
        "webOSevilP160UNA/0a",
        "webOSevilP160UNA/0A0",
        "webOSevilP160UNA/000",
        "webOSevilP160UNA/0/0",
        "webOSevilP160UNA/0 0",
        "webOSevilP160UNA/00a0",
        "webOSevilP160UNA/a0",
        "webOS/P160UNA/0a0",
        "webOSeVilP160UNA/0a0",
        "webOSEVILP160UNA/0a0",
        "webOSev_ilP160UNA/0a0",
        "webOSev ilP160UNA/0a0",
        "webOSev4ilP160UNA/0a0",
        "webOSeP160UNA/0a0",
        "webOS P160UNA/0a0",
        "webOS6P160UNA/0a0",
        "webOS_P160UNA/0a0",
        "webOSP160UNA/0a0",
        "webOSevilP160UNA/0a0"
      ]
    },
    {
      "regex": "Updated:\\s+(.*)\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^I pipe \"([^\"]*)\" into redcar with \"-w\"$",
      "exceptionStackTrace": null,
      "matches": [
        "I pipe \"-\" into redcar with \"-w\"",
        "I pipe \"\"\" into redcar with \"-w\"",
        "I pipe \"eVil\" into redcar with \"-w\"",
        "I pipe \"EVIL\" into redcar with \"-w\"",
        "I pipe \"ev_il\" into redcar with \"-w\"",
        "I pipe \"ev il\" into redcar with \"-w\"",
        "I pipe \"ev4il\" into redcar with \"-w\"",
        "I pipe \"e\" into redcar with \"-w\"",
        "I pipe \" \" into redcar with \"-w\"",
        "I pipe \"6\" into redcar with \"-w\"",
        "I pipe \"_\" into redcar with \"-w\"",
        "I pipe \"\" into redcar with \"-w\"",
        "I pipe \"evil\" into redcar with \"-w\""
      ]
    },
    {
      "regex": "\\# ([0-9]*)\\/([0-9]*) \\(id\\/([0-9]*)\\/total\\)",
      "exceptionStackTrace": null,
      "matches": [
        "# 0/0 (id/00/total)",
        "# 0/0 (id//total)",
        "# 0/00 (id/0/total)",
        "# 0/ (id/0/total)",
        "# 00/0 (id/0/total)",
        "# /0 (id/0/total)",
        "# / (id//total)",
        "# 0/0 (id/0/total)"
      ]
    },
    { "regex": "[-,_]", "exceptionStackTrace": null, "matches": ["-", ",", "_"] },
    {
      "regex": "^([A-Za-z])",
      "exceptionStackTrace": null,
      "matches": ["A", "a"]
    },
    { "regex": "\\(the", "exceptionStackTrace": null, "matches": ["(the"] },
    {
      "regex": " LIMIT \\d+",
      "exceptionStackTrace": null,
      "matches": [" LIMIT 00", " LIMIT ", " LIMIT 0"]
    },
    {
      "regex": "Injected error",
      "exceptionStackTrace": null,
      "matches": ["Injected error"]
    },
    {
      "regex": "\\bchd=e:v\\.f\\.AA\\b",
      "exceptionStackTrace": null,
      "matches": ["chd=e:v.f.AA"]
    },
    {
      "regex": "^the inflated response should be an empty array$",
      "exceptionStackTrace": null,
      "matches": ["the inflated response should be an empty array"]
    },
    {
      "regex": "^I paste text$",
      "exceptionStackTrace": null,
      "matches": ["I paste text"]
    },
    { "regex": "^live-", "exceptionStackTrace": null, "matches": ["live-"] },
    { "regex": "wn|up", "exceptionStackTrace": null, "matches": ["up", "wn"] },
    {
      "regex": "(?<_1>s)\\s*\\(",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<_"
      },
      "matches": []
    },
    {
      "regex": "[^0-9.e+-]",
      "exceptionStackTrace": null,
      "matches": ["e", "A", "0", ".", "-", "+", " ", "a"]
    },
    {
      "regex": "node_modules",
      "exceptionStackTrace": null,
      "matches": ["node_modules"]
    },
    {
      "regex": "^(?:(direct):([^#]+)(?:#(.+))?)$",
      "exceptionStackTrace": null,
      "matches": [
        "direct:evil#evil#evil",
        "direct:evil#:",
        "direct:evil##",
        "direct:evil#eVil",
        "direct:evil#EVIL",
        "direct:evil#ev_il",
        "direct:evil#ev il",
        "direct:evil#ev4il",
        "direct:evil#e",
        "direct:evil# ",
        "direct:evil#6",
        "direct:evil#_",
        "direct:evil#",
        "direct::#evil",
        "direct:##evil",
        "direct:eVil#evil",
        "direct:EVIL#evil",
        "direct:ev_il#evil",
        "direct:ev il#evil",
        "direct:ev4il#evil",
        "direct:e#evil",
        "direct: #evil",
        "direct:6#evil",
        "direct:_#evil",
        "direct:#evil",
        "direct:evil",
        "direct:evil#evil"
      ]
    },
    {
      "regex": "\\/mod\\/wiki\\/create\\.php.*([\\&\\?]swid=\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "/mod/wiki/create.phpevil?swid=00",
        "/mod/wiki/create.phpevil?swid=",
        "/mod/wiki/create.phpevil&swid=0",
        "/mod/wiki/create.php??swid=0",
        "/mod/wiki/create.php=?swid=0",
        "/mod/wiki/create.php/?swid=0",
        "/mod/wiki/create.php.?swid=0",
        "/mod/wiki/create.php&?swid=0",
        "/mod/wiki/create.phpeVil?swid=0",
        "/mod/wiki/create.phpEVIL?swid=0",
        "/mod/wiki/create.phpev_il?swid=0",
        "/mod/wiki/create.phpev il?swid=0",
        "/mod/wiki/create.phpev4il?swid=0",
        "/mod/wiki/create.phpe?swid=0",
        "/mod/wiki/create.php ?swid=0",
        "/mod/wiki/create.php6?swid=0",
        "/mod/wiki/create.php_?swid=0",
        "/mod/wiki/create.php?swid=0",
        "/mod/wiki/create.phpevil?swid=0"
      ]
    },
    {
      "regex": "\\/demos\\/",
      "exceptionStackTrace": null,
      "matches": ["/demos/"]
    },
    {
      "regex": "^(https?:)?\\/\\/\\w+\\.wunderlist.com\\/",
      "exceptionStackTrace": null,
      "matches": [
        "https://evil.wunderlistAcom/",
        "https://evil.wunderlist:com/",
        "https://evil.wunderlist0com/",
        "https://evil.wunderlist/com/",
        "https://evil.wunderlist.com/",
        "https://evil.wunderlist com/",
        "https://eVil.wunderlistacom/",
        "https://EVIL.wunderlistacom/",
        "https://ev_il.wunderlistacom/",
        "https://ev il.wunderlistacom/",
        "https://ev4il.wunderlistacom/",
        "https://e.wunderlistacom/",
        "https:// .wunderlistacom/",
        "https://6.wunderlistacom/",
        "https://_.wunderlistacom/",
        "https://.wunderlistacom/",
        "https:https://evil.wunderlistacom/",
        "httpss://evil.wunderlistacom/",
        "http://evil.wunderlistacom/",
        "//evil.wunderlistacom/",
        "https://evil.wunderlistacom/"
      ]
    },
    {
      "regex": "Could not find help for that entry",
      "exceptionStackTrace": null,
      "matches": ["Could not find help for that entry"]
    },
    {
      "regex": ".+((?:&#038;|&amp;|&)s=(-?[0-4])).*",
      "exceptionStackTrace": null,
      "matches": [
        "evil&#038;s=-0=",
        "evil&#038;s=-0;",
        "evil&#038;s=-0-",
        "evil&#038;s=-0&",
        "evil&#038;s=-0#",
        "evil&#038;s=-0eVil",
        "evil&#038;s=-0EVIL",
        "evil&#038;s=-0ev_il",
        "evil&#038;s=-0ev il",
        "evil&#038;s=-0ev4il",
        "evil&#038;s=-0e",
        "evil&#038;s=-0 ",
        "evil&#038;s=-06",
        "evil&#038;s=-0_",
        "evil&#038;s=-0",
        "evil&#038;s=-5evil",
        "evil&#038;s=--0evil",
        "evil&#038;s=0evil",
        "=&#038;s=-0evil",
        ";&#038;s=-0evil",
        "-&#038;s=-0evil",
        "&&#038;s=-0evil",
        "#&#038;s=-0evil",
        "eVil&#038;s=-0evil",
        "EVIL&#038;s=-0evil",
        "ev_il&#038;s=-0evil",
        "ev il&#038;s=-0evil",
        "ev4il&#038;s=-0evil",
        "e&#038;s=-0evil",
        " &#038;s=-0evil",
        "6&#038;s=-0evil",
        "_&#038;s=-0evil",
        "&#038;s=-0evil",
        "evil&s=0",
        "evil&amp;s=0",
        "evil&#038;s=0",
        "evil&s=-0evil",
        "evil&amp;s=-0evil",
        "evil&#038;s=-0evil"
      ]
    },
    {
      "regex": "(\\D+)$",
      "exceptionStackTrace": null,
      "matches": [
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "^$form_name_context",
      "exceptionStackTrace": null,
      "matches": ["form_name_context"]
    },
    {
      "regex": "^[#] \\s* Marpa::R2[:][:]Display[:][:]End\\b",
      "exceptionStackTrace": null,
      "matches": [
        "#    Marpa::R2::Display::End",
        "#  Marpa::R2::Display::End",
        "#   Marpa::R2::Display::End"
      ]
    },
    {
      "regex": "\\b(?i:(SetObjPropCharVS|vsoInsertAllParams|vsoGetEventInfo))\\b",
      "exceptionStackTrace": null,
      "matches": [""]
    },
    {
      "regex": "no=(\\d+)\\&",
      "exceptionStackTrace": null,
      "matches": ["no=00&", "no=&", "no=0&"]
    },
    {
      "regex": "\\A(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3}):[0-9]+\\Z",
      "exceptionStackTrace": null,
      "matches": [
        "0.0.0.0:00",
        "0.0.0.0:",
        "0.0.0.0000:0",
        "0.0.0.000:0",
        "0.0.0.:0",
        "0.0.0000.0:0",
        "0.0.000.0:0",
        "0.0..0:0",
        "0.0000.0.0:0",
        "0.000.0.0:0",
        "0..0.0:0",
        "0000.0.0.0:0",
        "000.0.0.0:0",
        ".0.0.0:0",
        "0.0.0.0:0"
      ]
    },
    {
      "regex": "Division_undefined",
      "exceptionStackTrace": null,
      "matches": ["Division_undefined"]
    },
    {
      "regex": "\\b(?i:(?<_1>allocate|allocated|deallocate)(?=\\())",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<_"
      },
      "matches": []
    },
    {
      "regex": "\\ACannot turn ",
      "exceptionStackTrace": null,
      "matches": ["Cannot turn "]
    },
    {
      "regex": "{%([\\w\\s\\=]+)%}",
      "exceptionStackTrace": null,
      "matches": [
        "{%}%}",
        "{%{%}",
        "{%=%}",
        "{%%%}",
        "{%eVil%}",
        "{%EVIL%}",
        "{%ev_il%}",
        "{%ev il%}",
        "{%ev4il%}",
        "{%e%}",
        "{% %}",
        "{%6%}",
        "{%_%}",
        "{%%}",
        "{%evil%}"
      ]
    },
    {
      "regex": "by c.*$",
      "exceptionStackTrace": null,
      "matches": [
        "by ceVil",
        "by cEVIL",
        "by cev_il",
        "by cev il",
        "by cev4il",
        "by ce",
        "by c ",
        "by c6",
        "by c_",
        "by c",
        "by cevil"
      ]
    },
    {
      "regex": "^(06)[.-]?(\\d{6})[-.]?(\\d{1})",
      "exceptionStackTrace": null,
      "matches": [
        "06-000000.00",
        "06-000000.",
        "06-000000..0",
        "06-0000000",
        "06-000000-0",
        "06-0000000.0",
        "06-00000.0",
        "06--000000.0",
        "06000000.0",
        "06.000000.0",
        "060000000",
        "06-000000.0"
      ]
    },
    {
      "regex": "!!after_perform_foo!! \\[3\\, 4\\]",
      "exceptionStackTrace": null,
      "matches": ["!!after_perform_foo!! [3, 4]"]
    },
    {
      "regex": "[(A-Z)(0-9)]",
      "exceptionStackTrace": null,
      "matches": ["A", "0", "(", ")"]
    },
    {
      "regex": "([,;])[^,;]+\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": ".*a=a b.*",
      "exceptionStackTrace": null,
      "matches": [
        "evila=a b=",
        "evila=a beVil",
        "evila=a bEVIL",
        "evila=a bev_il",
        "evila=a bev il",
        "evila=a bev4il",
        "evila=a be",
        "evila=a b ",
        "evila=a b6",
        "evila=a b_",
        "evila=a b",
        "=a=a bevil",
        "eVila=a bevil",
        "EVILa=a bevil",
        "ev_ila=a bevil",
        "ev ila=a bevil",
        "ev4ila=a bevil",
        "ea=a bevil",
        " a=a bevil",
        "6a=a bevil",
        "_a=a bevil",
        "a=a bevil",
        "a=a b",
        "evila=a bevil"
      ]
    },
    {
      "regex": "(^|\\s)((http|https|news|ftp)://[-_:A-Za-z0-9@]+(\\.[-~,_/=:A-Za-z0-9#@&?=%+]+)+)",
      "exceptionStackTrace": null,
      "matches": [
        "http://evil.evil.evil",
        "http://evil",
        "http://evil.~",
        "http://evil.@",
        "http://evil.?",
        "http://evil.=",
        "http://evil.:",
        "http://evil./",
        "http://evil..",
        "http://evil.-",
        "http://evil.,",
        "http://evil.+",
        "http://evil.&",
        "http://evil.%",
        "http://evil.#",
        "http://evil.eVil",
        "http://evil.EVIL",
        "http://evil.ev_il",
        "http://evil.ev il",
        "http://evil.ev4il",
        "http://evil.e",
        "http://evil. ",
        "http://evil.6",
        "http://evil._",
        "http://evil.",
        "http://~.evil",
        "http://@.evil",
        "http://?.evil",
        "http://=.evil",
        "http://:.evil",
        "http:///.evil",
        "http://..evil",
        "http://-.evil",
        "http://,.evil",
        "http://+.evil",
        "http://&.evil",
        "http://%.evil",
        "http://#.evil",
        "http://eVil.evil",
        "http://EVIL.evil",
        "http://ev_il.evil",
        "http://ev il.evil",
        "http://ev4il.evil",
        "http://e.evil",
        "http:// .evil",
        "http://6.evil",
        "http://_.evil",
        "http://.evil",
        " http://evil.evil",
        "ftp://evil.evil",
        "news://evil.evil",
        "https://evil.evil",
        "http://evil.evil"
      ]
    },
    {
      "regex": "https*:",
      "exceptionStackTrace": null,
      "matches": ["httpss:", "http:", "https:"]
    },
    {
      "regex": "^([0-9a-f]{4,6})-([0-9a-f]{4,6})$",
      "exceptionStackTrace": null,
      "matches": [
        "aaaa-aaaaaaa",
        "aaaa-aaaaaa",
        "aaaa-aaa",
        "aaaa-gaaa",
        "aaaa-0aaa",
        "aaaaaaa-aaaa",
        "aaaaaa-aaaa",
        "aaa-aaaa",
        "gaaa-aaaa",
        "0aaa-aaaa",
        "aaaa-aaaa"
      ]
    },
    {
      "regex": "expected NameError with \\\"example message\\\", got #<RuntimeError: example message>",
      "exceptionStackTrace": null,
      "matches": [
        "expected NameError with \"example message\", got #<RuntimeError: example message>"
      ]
    },
    {
      "regex": "([bcdfghjklmnpqrstvwxz])y$",
      "exceptionStackTrace": null,
      "matches": [
        "xy",
        "wy",
        "vy",
        "ty",
        "sy",
        "ry",
        "qy",
        "py",
        "ny",
        "my",
        "ly",
        "ky",
        "jy",
        "hy",
        "gy",
        "fy",
        "dy",
        "cy",
        "by",
        "ay",
        "zy"
      ]
    },
    {
      "regex": "closed MySQL connection",
      "exceptionStackTrace": null,
      "matches": ["closed MySQL connection"]
    },
    {
      "regex": "rake aborted",
      "exceptionStackTrace": null,
      "matches": ["rake aborted"]
    },
    {
      "regex": "^drop_(.*?)\\.php$",
      "exceptionStackTrace": null,
      "matches": [
        "drop_..php",
        "drop_eVil.php",
        "drop_EVIL.php",
        "drop_ev_il.php",
        "drop_ev il.php",
        "drop_ev4il.php",
        "drop_e.php",
        "drop_ .php",
        "drop_6.php",
        "drop__.php",
        "drop_.php",
        "drop_evil.php"
      ]
    },
    {
      "regex": "(?<=[^\\n])\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "^[\\s\\S]+?github\\.com[:\\/]([\\s\\S]+?)\\.wiki[\\s\\S]+$",
      "exceptionStackTrace": null,
      "matches": [
        "evilgithub.com/evil.wiki:",
        "evilgithub.com/evil.wiki/",
        "evilgithub.com/evil.wiki.",
        "evilgithub.com/evil.wikieVil",
        "evilgithub.com/evil.wikiEVIL",
        "evilgithub.com/evil.wikiev_il",
        "evilgithub.com/evil.wikiev il",
        "evilgithub.com/evil.wikiev4il",
        "evilgithub.com/evil.wikie",
        "evilgithub.com/evil.wiki ",
        "evilgithub.com/evil.wiki6",
        "evilgithub.com/evil.wiki_",
        "evilgithub.com/evil.wiki",
        "evilgithub.com/:.wikievil",
        "evilgithub.com//.wikievil",
        "evilgithub.com/..wikievil",
        "evilgithub.com/eVil.wikievil",
        "evilgithub.com/EVIL.wikievil",
        "evilgithub.com/ev_il.wikievil",
        "evilgithub.com/ev il.wikievil",
        "evilgithub.com/ev4il.wikievil",
        "evilgithub.com/e.wikievil",
        "evilgithub.com/ .wikievil",
        "evilgithub.com/6.wikievil",
        "evilgithub.com/_.wikievil",
        "evilgithub.com/.wikievil",
        "evilgithub.com:evil.wikievil",
        ":github.com/evil.wikievil",
        "/github.com/evil.wikievil",
        ".github.com/evil.wikievil",
        "eVilgithub.com/evil.wikievil",
        "EVILgithub.com/evil.wikievil",
        "ev_ilgithub.com/evil.wikievil",
        "ev ilgithub.com/evil.wikievil",
        "ev4ilgithub.com/evil.wikievil",
        "egithub.com/evil.wikievil",
        " github.com/evil.wikievil",
        "6github.com/evil.wikievil",
        "_github.com/evil.wikievil",
        "github.com/evil.wikievil",
        "evilgithub.com/evil.wikievil"
      ]
    },
    {
      "regex": "$aclmap{$_}",
      "exceptionStackTrace": null,
      "matches": ["aclmap{_}"]
    },
    {
      "regex": "UID\\([a-f0-9:]+\\/([^\\/]+)\\/([^\\/]+)\\/[0-9a-z\\.]+\\)\\+CE-HTML",
      "exceptionStackTrace": null,
      "matches": [
        "UID(:/evil/evil/:)+CE-HTML",
        "UID(:/evil/evil//)+CE-HTML",
        "UID(:/evil/evil/.)+CE-HTML",
        "UID(:/evil/evil/-)+CE-HTML",
        "UID(:/evil/evil/+)+CE-HTML",
        "UID(:/evil/evil/))+CE-HTML",
        "UID(:/evil/evil/()+CE-HTML",
        "UID(:/evil/evil/eVil)+CE-HTML",
        "UID(:/evil/evil/EVIL)+CE-HTML",
        "UID(:/evil/evil/ev_il)+CE-HTML",
        "UID(:/evil/evil/ev il)+CE-HTML",
        "UID(:/evil/evil/ev4il)+CE-HTML",
        "UID(:/evil/evil/e)+CE-HTML",
        "UID(:/evil/evil/ )+CE-HTML",
        "UID(:/evil/evil/6)+CE-HTML",
        "UID(:/evil/evil/_)+CE-HTML",
        "UID(:/evil/evil/)+CE-HTML",
        "UID(:/evil/:/evil)+CE-HTML",
        "UID(:/evil///evil)+CE-HTML",
        "UID(:/evil/./evil)+CE-HTML",
        "UID(:/evil/-/evil)+CE-HTML",
        "UID(:/evil/+/evil)+CE-HTML",
        "UID(:/evil/)/evil)+CE-HTML",
        "UID(:/evil/(/evil)+CE-HTML",
        "UID(:/evil/eVil/evil)+CE-HTML",
        "UID(:/evil/EVIL/evil)+CE-HTML",
        "UID(:/evil/ev_il/evil)+CE-HTML",
        "UID(:/evil/ev il/evil)+CE-HTML",
        "UID(:/evil/ev4il/evil)+CE-HTML",
        "UID(:/evil/e/evil)+CE-HTML",
        "UID(:/evil/ /evil)+CE-HTML",
        "UID(:/evil/6/evil)+CE-HTML",
        "UID(:/evil/_/evil)+CE-HTML",
        "UID(:/evil//evil)+CE-HTML",
        "UID(:/:/evil/evil)+CE-HTML",
        "UID(:///evil/evil)+CE-HTML",
        "UID(:/./evil/evil)+CE-HTML",
        "UID(:/-/evil/evil)+CE-HTML",
        "UID(:/+/evil/evil)+CE-HTML",
        "UID(:/)/evil/evil)+CE-HTML",
        "UID(:/(/evil/evil)+CE-HTML",
        "UID(:/eVil/evil/evil)+CE-HTML",
        "UID(:/EVIL/evil/evil)+CE-HTML",
        "UID(:/ev_il/evil/evil)+CE-HTML",
        "UID(:/ev il/evil/evil)+CE-HTML",
        "UID(:/ev4il/evil/evil)+CE-HTML",
        "UID(:/e/evil/evil)+CE-HTML",
        "UID(:/ /evil/evil)+CE-HTML",
        "UID(:/6/evil/evil)+CE-HTML",
        "UID(:/_/evil/evil)+CE-HTML",
        "UID(://evil/evil)+CE-HTML",
        "UID(::/evil/evil/evil)+CE-HTML",
        "UID(/evil/evil/evil)+CE-HTML",
        "UID(g/evil/evil/evil)+CE-HTML",
        "UID(a/evil/evil/evil)+CE-HTML",
        "UID(0/evil/evil/evil)+CE-HTML",
        "UID(:/evil/evil/evil)+CE-HTML"
      ]
    },
    {
      "regex": "\\G\\((.*?)(?<!\\\\)\\)\\s*",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\G"
      },
      "matches": []
    },
    {
      "regex": "Got response for request ID \\d+ but expected response for request ID \\d+",
      "exceptionStackTrace": null,
      "matches": [
        "Got response for request ID 0 but expected response for request ID 00",
        "Got response for request ID 0 but expected response for request ID ",
        "Got response for request ID 00 but expected response for request ID 0",
        "Got response for request ID  but expected response for request ID 0",
        "Got response for request ID 0 but expected response for request ID 0"
      ]
    },
    {
      "regex": "already connected",
      "exceptionStackTrace": null,
      "matches": ["already connected"]
    },
    {
      "regex": "^\\/myhand\\/(.*)\\/(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "/myhand/evil//",
        "/myhand/evil/eVil",
        "/myhand/evil/EVIL",
        "/myhand/evil/ev_il",
        "/myhand/evil/ev il",
        "/myhand/evil/ev4il",
        "/myhand/evil/e",
        "/myhand/evil/ ",
        "/myhand/evil/6",
        "/myhand/evil/_",
        "/myhand/evil/",
        "/myhand///evil",
        "/myhand/eVil/evil",
        "/myhand/EVIL/evil",
        "/myhand/ev_il/evil",
        "/myhand/ev il/evil",
        "/myhand/ev4il/evil",
        "/myhand/e/evil",
        "/myhand/ /evil",
        "/myhand/6/evil",
        "/myhand/_/evil",
        "/myhand//evil",
        "/myhand//",
        "/myhand/evil/evil"
      ]
    },
    {
      "regex": "^(Mac|Win)\\.",
      "exceptionStackTrace": null,
      "matches": ["Win.", "Mac."]
    },
    {
      "regex": "a()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()(a)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (parse error): expected character type but received RIGHT_PAREN"
      },
      "matches": []
    },
    {
      "regex": "C([LZ])",
      "exceptionStackTrace": null,
      "matches": ["CL", "CA", "CZ"]
    },
    {
      "regex": "^(?:each|for) +([a-zA-Z_$][\\w$]*)(?: *, *([a-zA-Z_$][\\w$]*))? * in *([^\\n]+)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "text\\(\\d+\\)",
      "exceptionStackTrace": null,
      "matches": ["text(00)", "text()", "text(0)"]
    },
    {
      "regex": "\\bzbov|zvav$",
      "exceptionStackTrace": null,
      "matches": ["zvav", "zbov"]
    },
    {
      "regex": "(?<=[A-Za-z])(?=[A-Z])",
      "exceptionStackTrace": null,
      "matches": [""]
    },
    {
      "regex": "http:\\/\\/\\d+\\.\\d+\\.\\d+\\.\\d+",
      "exceptionStackTrace": null,
      "matches": [
        "http://0.0.0.00",
        "http://0.0.0.",
        "http://0.0.00.0",
        "http://0.0..0",
        "http://0.00.0.0",
        "http://0..0.0",
        "http://00.0.0.0",
        "http://.0.0.0",
        "http://0.0.0.0"
      ]
    },
    {
      "regex": " replaced(http-equiv=\"[^\"]*\")",
      "exceptionStackTrace": null,
      "matches": [
        " replacedhttp-equiv=\"=\"",
        " replacedhttp-equiv=\"-\"",
        " replacedhttp-equiv=\"\"\"",
        " replacedhttp-equiv=\"eVil\"",
        " replacedhttp-equiv=\"EVIL\"",
        " replacedhttp-equiv=\"ev_il\"",
        " replacedhttp-equiv=\"ev il\"",
        " replacedhttp-equiv=\"ev4il\"",
        " replacedhttp-equiv=\"e\"",
        " replacedhttp-equiv=\" \"",
        " replacedhttp-equiv=\"6\"",
        " replacedhttp-equiv=\"_\"",
        " replacedhttp-equiv=\"\"",
        " replacedhttp-equiv=\"evil\""
      ]
    },
    {
      "regex": "ColourChooser",
      "exceptionStackTrace": null,
      "matches": ["ColourChooser"]
    },
    {
      "regex": "skewsymmetric",
      "exceptionStackTrace": null,
      "matches": ["skewsymmetric"]
    },
    {
      "regex": "doesn't matter",
      "exceptionStackTrace": null,
      "matches": ["doesn't matter"]
    },
    {
      "regex": "<div align=left>(.*?)<\\/div>",
      "exceptionStackTrace": null,
      "matches": [
        "<div align=left>></div>",
        "<div align=left>=</div>",
        "<div align=left><</div>",
        "<div align=left>/</div>",
        "<div align=left>eVil</div>",
        "<div align=left>EVIL</div>",
        "<div align=left>ev_il</div>",
        "<div align=left>ev il</div>",
        "<div align=left>ev4il</div>",
        "<div align=left>e</div>",
        "<div align=left> </div>",
        "<div align=left>6</div>",
        "<div align=left>_</div>",
        "<div align=left></div>",
        "<div align=left>evil</div>"
      ]
    },
    {
      "regex": "Could not find class.*Foosrs",
      "exceptionStackTrace": null,
      "matches": [
        "Could not find classeVilFoosrs",
        "Could not find classEVILFoosrs",
        "Could not find classev_ilFoosrs",
        "Could not find classev ilFoosrs",
        "Could not find classev4ilFoosrs",
        "Could not find classeFoosrs",
        "Could not find class Foosrs",
        "Could not find class6Foosrs",
        "Could not find class_Foosrs",
        "Could not find classFoosrs",
        "Could not find classevilFoosrs"
      ]
    },
    {
      "regex": "^replica_set",
      "exceptionStackTrace": null,
      "matches": ["replica_set"]
    },
    {
      "regex": "^\\d{21}$",
      "exceptionStackTrace": null,
      "matches": [
        "0000000000000000000000",
        "00000000000000000000",
        "000000000000000000000"
      ]
    },
    { "regex": "(hertz)", "exceptionStackTrace": null, "matches": ["hertz"] },
    {
      "regex": "Called #unwrap_err! on #<Opted::Result::Ok:.* @value=\"hello\">",
      "exceptionStackTrace": null,
      "matches": [
        "Called #unwrap_err! on #<Opted::Result::Ok:@ @value=\"hello\">",
        "Called #unwrap_err! on #<Opted::Result::Ok:> @value=\"hello\">",
        "Called #unwrap_err! on #<Opted::Result::Ok:= @value=\"hello\">",
        "Called #unwrap_err! on #<Opted::Result::Ok:< @value=\"hello\">",
        "Called #unwrap_err! on #<Opted::Result::Ok:: @value=\"hello\">",
        "Called #unwrap_err! on #<Opted::Result::Ok:# @value=\"hello\">",
        "Called #unwrap_err! on #<Opted::Result::Ok:\" @value=\"hello\">",
        "Called #unwrap_err! on #<Opted::Result::Ok:! @value=\"hello\">",
        "Called #unwrap_err! on #<Opted::Result::Ok:eVil @value=\"hello\">",
        "Called #unwrap_err! on #<Opted::Result::Ok:EVIL @value=\"hello\">",
        "Called #unwrap_err! on #<Opted::Result::Ok:ev_il @value=\"hello\">",
        "Called #unwrap_err! on #<Opted::Result::Ok:ev il @value=\"hello\">",
        "Called #unwrap_err! on #<Opted::Result::Ok:ev4il @value=\"hello\">",
        "Called #unwrap_err! on #<Opted::Result::Ok:e @value=\"hello\">",
        "Called #unwrap_err! on #<Opted::Result::Ok:  @value=\"hello\">",
        "Called #unwrap_err! on #<Opted::Result::Ok:6 @value=\"hello\">",
        "Called #unwrap_err! on #<Opted::Result::Ok:_ @value=\"hello\">",
        "Called #unwrap_err! on #<Opted::Result::Ok: @value=\"hello\">",
        "Called #unwrap_err! on #<Opted::Result::Ok:evil @value=\"hello\">"
      ]
    },
    {
      "regex": "\\{{3}(?:\\s*\\#![^\\n]+)?(.+?)\\}{3}",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^[a-zA-Z0-9][-a-zA-Z0-9]+[a-zA-Z0-9](.*?)$",
      "exceptionStackTrace": null,
      "matches": [
        "0evil0-",
        "0evil0eVil",
        "0evil0EVIL",
        "0evil0ev_il",
        "0evil0ev il",
        "0evil0ev4il",
        "0evil0e",
        "0evil0 ",
        "0evil06",
        "0evil0_",
        "0evilaevil",
        "0evilAevil",
        "0-0evil",
        "0eVil0evil",
        "0EVIL0evil",
        "0ev_il0evil",
        "0ev il0evil",
        "0ev4il0evil",
        "0e0evil",
        "0 0evil",
        "060evil",
        "0_0evil",
        "00evil",
        "aevil0evil",
        "Aevil0evil",
        "0evil0",
        "0evil0evil"
      ]
    },
    {
      "regex": "ruby|go|agent",
      "exceptionStackTrace": null,
      "matches": ["agent", "go", "ruby"]
    },
    {
      "regex": "([\\\\\\-\\]\\[/^])",
      "exceptionStackTrace": null,
      "matches": ["]", "\\", "[", "/", "-", "^"]
    },
    {
      "regex": "\\{[^}]*\\}|[^{]+",
      "exceptionStackTrace": null,
      "matches": [
        "}",
        "{",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "{}}",
        "{{}",
        "{eVil}",
        "{EVIL}",
        "{ev_il}",
        "{ev il}",
        "{ev4il}",
        "{e}",
        "{ }",
        "{6}",
        "{_}",
        "{}",
        "evil",
        "{evil}"
      ]
    },
    {
      "regex": "^([+-])(\\d{2})(\\d{2})?$",
      "exceptionStackTrace": null,
      "matches": ["-000000", "-00000", "-000", "+0000", "-00", "-0000"]
    },
    {
      "regex": "^[a-z]{16}$",
      "exceptionStackTrace": null,
      "matches": ["aaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaa"]
    },
    {
      "regex": "\\d+ (?:\"((?:[^\"\\\\]|\\\\.)*)\"|'((?:[^'\\\\]|\\\\.)*)'|(url\\(\\s*(?:'(?:[^']|\\\\')*'|\"(?:[^\"]|\\\\\")*\"|(?:[^'\"\\\\]|\\\\.)*?\\s*)\\)))",
      "exceptionStackTrace": null,
      "matches": [
        "0 url( \\\\ )",
        "0 url( \\A )",
        "0 url( \\0 )",
        "0 url( \\) )",
        "0 url( \\( )",
        "0 url( \\' )",
        "0 url( \\\" )",
        "0 url( \\  )",
        "0 url( a  )",
        "0 url( a)",
        "0 url( aa )",
        "0 url(  )",
        "0 url( \\ )",
        "0 url( A )",
        "0 url( 0 )",
        "0 url( ) )",
        "0 url( ( )",
        "0 url( ' )",
        "0 url( \" )",
        "0 url(   )",
        "0 url( \"aa\")",
        "0 url( \"\")",
        "0 url( \"\\\")",
        "0 url( \"A\")",
        "0 url( \"0\")",
        "0 url( \")\")",
        "0 url( \"(\")",
        "0 url( \"'\")",
        "0 url( \"\"\")",
        "0 url( \" \")",
        "0 url( 'aa')",
        "0 url( '')",
        "0 url( '\\')",
        "0 url( 'A')",
        "0 url( '0')",
        "0 url( ')')",
        "0 url( '(')",
        "0 url( ''')",
        "0 url( '\"')",
        "0 url( ' ')",
        "0 url(  'a')",
        "0 url('a')",
        "0 '\\\\'",
        "0 '\\A'",
        "0 '\\0'",
        "0 '\\)'",
        "0 '\\('",
        "0 '\\''",
        "0 '\\\"'",
        "0 '\\ '",
        "0 'aa'",
        "0 '\\'",
        "0 'A'",
        "0 '0'",
        "0 ')'",
        "0 '('",
        "0 '''",
        "0 '\"'",
        "0 ' '",
        "0 \"\\\\\"",
        "0 \"\\A\"",
        "0 \"\\0\"",
        "0 \"\\)\"",
        "0 \"\\(\"",
        "0 \"\\'\"",
        "0 \"\\\"\"",
        "0 \"\\ \"",
        "0 \"aa\"",
        "0 \"\\\"",
        "0 \"A\"",
        "0 \"0\"",
        "0 \")\"",
        "0 \"(\"",
        "0 \"'\"",
        "0 \"\"\"",
        "0 \" \"",
        "00 \"a\"",
        " \"a\"",
        "0 url()",
        "0 url(\"\")",
        "0 url('')",
        "0 ''",
        "0 \"\"",
        "0 url( \\a )",
        "0 url( a )",
        "0 url( \"\\\"\")",
        "0 url( \"a\")",
        "0 url( '\\'')",
        "0 url( 'a')",
        "0 '\\a'",
        "0 'a'",
        "0 \"\\a\"",
        "0 \"a\""
      ]
    },
    {
      "regex": "((?:\\/\\*\\*(?:(?:\\*[^/]|[^*])+?)\\*\\/)(?:[\\s\\r\\n])*constructor\\(.*)|$(?:[\\r\\n]$)*((?![\\r\\n]))|.+",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": "S-\\d-\\d-\\d{2}-\\d{10}-\\d{8,10}-\\d{8,10}-\\d{3,6}",
      "exceptionStackTrace": null,
      "matches": [
        "S-0-0-00-0000000000-00000000-00000000-0000000",
        "S-0-0-00-0000000000-00000000-00000000-000000",
        "S-0-0-00-0000000000-00000000-00000000-00",
        "S-0-0-00-0000000000-00000000-00000000000-000",
        "S-0-0-00-0000000000-00000000-0000000000-000",
        "S-0-0-00-0000000000-00000000-0000000-000",
        "S-0-0-00-0000000000-00000000000-00000000-000",
        "S-0-0-00-0000000000-0000000000-00000000-000",
        "S-0-0-00-0000000000-0000000-00000000-000",
        "S-0-0-00-00000000000-00000000-00000000-000",
        "S-0-0-00-000000000-00000000-00000000-000",
        "S-0-0-000-0000000000-00000000-00000000-000",
        "S-0-0-0-0000000000-00000000-00000000-000",
        "S-0-0-00-0000000000-00000000-00000000-000"
      ]
    },
    {
      "regex": "\\.handlebars",
      "exceptionStackTrace": null,
      "matches": [".handlebars"]
    },
    {
      "regex": "^do\\s+droplets?\\s+create(?:\\s+[^\\s]+){4}",
      "exceptionStackTrace": null,
      "matches": [
        "do droplets create evil evil evil evil evil",
        "do droplets create evil evil evil",
        "do droplets create eVil evil evil evil",
        "do droplets create EVIL evil evil evil",
        "do droplets create ev_il evil evil evil",
        "do droplets create ev il evil evil evil",
        "do droplets create ev4il evil evil evil",
        "do droplets create e evil evil evil",
        "do droplets create   evil evil evil",
        "do droplets create 6 evil evil evil",
        "do droplets create _ evil evil evil",
        "do droplets create  evil evil evil",
        "do droplets create  evil evil evil evil",
        "do droplets createevil evil evil evil",
        "do droplets  create evil evil evil evil",
        "do dropletscreate evil evil evil evil",
        "do dropletss create evil evil evil evil",
        "do  droplets create evil evil evil evil",
        "dodroplets create evil evil evil evil",
        "do droplet create evil evil evil evil",
        "do droplets create evil evil evil evil"
      ]
    },
    {
      "regex": "((.min)?.(js|css|map))$",
      "exceptionStackTrace": null,
      "matches": [
        "amin_js",
        "aminAjs",
        "amin0js",
        "amin js",
        "aminaminajs",
        "_minajs",
        "Aminajs",
        "0minajs",
        " minajs",
        "amap",
        "acss",
        "ajs",
        "aminamap",
        "aminacss",
        "aminajs"
      ]
    },
    {
      "regex": "^(?:\\$[A-Za-z]+\\$\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "$evil$00",
        "$evil$",
        "$eVil$0",
        "$EVIL$0",
        "$ev_il$0",
        "$ev il$0",
        "$ev4il$0",
        "$e$0",
        "$ $0",
        "$6$0",
        "$_$0",
        "$$0",
        "$evil$0"
      ]
    },
    {
      "regex": "Unable to rename",
      "exceptionStackTrace": null,
      "matches": ["Unable to rename"]
    },
    {
      "regex": "create_table :products",
      "exceptionStackTrace": null,
      "matches": ["create_table :products"]
    },
    {
      "regex": "^\\((bool|boolean)\\)",
      "exceptionStackTrace": null,
      "matches": ["(boolean)", "(bool)"]
    },
    {
      "regex": "^\"[^\"]*\"$",
      "exceptionStackTrace": null,
      "matches": [
        "\"\"\"",
        "\"eVil\"",
        "\"EVIL\"",
        "\"ev_il\"",
        "\"ev il\"",
        "\"ev4il\"",
        "\"e\"",
        "\" \"",
        "\"6\"",
        "\"_\"",
        "\"\"",
        "\"evil\""
      ]
    },
    {
      "regex": "(?<![<>])((?:<N[^>]*>[Mm]ara<\\/N>) (?:<V[^>]*>[^<]+<\\/V>))(?![<>])",
      "exceptionStackTrace": null,
      "matches": [
        "<Nevil>mara</N> <Vevil>></V>",
        "<Nevil>mara</N> <Vevil><</V>",
        "<Nevil>mara</N> <Vevil>/</V>",
        "<Nevil>mara</N> <Vevil>eVil</V>",
        "<Nevil>mara</N> <Vevil>EVIL</V>",
        "<Nevil>mara</N> <Vevil>ev_il</V>",
        "<Nevil>mara</N> <Vevil>ev il</V>",
        "<Nevil>mara</N> <Vevil>ev4il</V>",
        "<Nevil>mara</N> <Vevil>e</V>",
        "<Nevil>mara</N> <Vevil> </V>",
        "<Nevil>mara</N> <Vevil>6</V>",
        "<Nevil>mara</N> <Vevil>_</V>",
        "<Nevil>mara</N> <Vevil></V>",
        "<Nevil>mara</N> <V>>evil</V>",
        "<Nevil>mara</N> <V<>evil</V>",
        "<Nevil>mara</N> <V/>evil</V>",
        "<Nevil>mara</N> <VeVil>evil</V>",
        "<Nevil>mara</N> <VEVIL>evil</V>",
        "<Nevil>mara</N> <Vev_il>evil</V>",
        "<Nevil>mara</N> <Vev il>evil</V>",
        "<Nevil>mara</N> <Vev4il>evil</V>",
        "<Nevil>mara</N> <Ve>evil</V>",
        "<Nevil>mara</N> <V >evil</V>",
        "<Nevil>mara</N> <V6>evil</V>",
        "<Nevil>mara</N> <V_>evil</V>",
        "<Nevil>mara</N> <V>evil</V>",
        "<Nevil>aara</N> <Vevil>evil</V>",
        "<Nevil>Mara</N> <Vevil>evil</V>",
        "<Nevil>Aara</N> <Vevil>evil</V>",
        "<N>>mara</N> <Vevil>evil</V>",
        "<N<>mara</N> <Vevil>evil</V>",
        "<N/>mara</N> <Vevil>evil</V>",
        "<NeVil>mara</N> <Vevil>evil</V>",
        "<NEVIL>mara</N> <Vevil>evil</V>",
        "<Nev_il>mara</N> <Vevil>evil</V>",
        "<Nev il>mara</N> <Vevil>evil</V>",
        "<Nev4il>mara</N> <Vevil>evil</V>",
        "<Ne>mara</N> <Vevil>evil</V>",
        "<N >mara</N> <Vevil>evil</V>",
        "<N6>mara</N> <Vevil>evil</V>",
        "<N_>mara</N> <Vevil>evil</V>",
        "<N>mara</N> <Vevil>evil</V>",
        "<N>mara</N> <V>evil</V>",
        "<Nevil>mara</N> <Vevil>evil</V>"
      ]
    },
    {
      "regex": "^(@[a-zA-Z0-9\\._\\$]+)",
      "exceptionStackTrace": null,
      "matches": [
        "@@",
        "@.",
        "@$",
        "@eVil",
        "@EVIL",
        "@ev_il",
        "@ev il",
        "@ev4il",
        "@e",
        "@ ",
        "@6",
        "@_",
        "@",
        "@evil"
      ]
    },
    {
      "regex": "^the user creates a new page (Android|IOS) that inherits from the user defined page$",
      "exceptionStackTrace": null,
      "matches": [
        "the user creates a new page IOS that inherits from the user defined page",
        "the user creates a new page Android that inherits from the user defined page"
      ]
    },
    {
      "regex": "\\[img=([^\\[\\]].*?)\\.(png|bmp|jpg|gif|jpeg)\\]",
      "exceptionStackTrace": null,
      "matches": [
        "[img=a].png]",
        "[img=a[.png]",
        "[img=a=.png]",
        "[img=a..png]",
        "[img=aeVil.png]",
        "[img=aEVIL.png]",
        "[img=aev_il.png]",
        "[img=aev il.png]",
        "[img=aev4il.png]",
        "[img=ae.png]",
        "[img=a .png]",
        "[img=a6.png]",
        "[img=a_.png]",
        "[img=]evil.png]",
        "[img=[evil.png]",
        "[img=Aevil.png]",
        "[img==evil.png]",
        "[img=0evil.png]",
        "[img=.evil.png]",
        "[img= evil.png]",
        "[img=a.jpeg]",
        "[img=a.gif]",
        "[img=a.jpg]",
        "[img=a.bmp]",
        "[img=a.png]",
        "[img=aevil.jpeg]",
        "[img=aevil.gif]",
        "[img=aevil.jpg]",
        "[img=aevil.bmp]",
        "[img=aevil.png]"
      ]
    },
    {
      "regex": "^\\s*+(-)\\s*+(record)\\s*+(\\()\\s*+([a-z][a-zA-Z\\d@_]*+)\\s*+(,)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "multiple repeat"
      },
      "matches": []
    },
    {
      "regex": "^(\\s*\\S+\\s*=\\s*)$macro",
      "exceptionStackTrace": null,
      "matches": [
        " evil =  macro",
        " evil =macro",
        " evil  = macro",
        " evil= macro",
        " = = macro",
        " eVil = macro",
        " EVIL = macro",
        " ev_il = macro",
        " ev il = macro",
        " ev4il = macro",
        " e = macro",
        "   = macro",
        " 6 = macro",
        " _ = macro",
        "  = macro",
        "  evil = macro",
        "evil = macro",
        "evil=macro",
        " evil = macro"
      ]
    },
    {
      "regex": "^SHUTDOWN",
      "exceptionStackTrace": null,
      "matches": ["SHUTDOWN"]
    },
    {
      "regex": "^\\\\${([^}]+)}$",
      "exceptionStackTrace": null,
      "matches": [
        "\\{}}",
        "\\{{}",
        "\\{\\}",
        "\\{eVil}",
        "\\{EVIL}",
        "\\{ev_il}",
        "\\{ev il}",
        "\\{ev4il}",
        "\\{e}",
        "\\{ }",
        "\\{6}",
        "\\{_}",
        "\\{}",
        "\\{evil}"
      ]
    },
    {
      "regex": "\\.([0-9]{1,6})",
      "exceptionStackTrace": null,
      "matches": [".0000000", ".000000", ".", ".0"]
    },
    {
      "regex": "[\\x{0430}-\\x{04FF}]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "incomplete escape \\x"
      },
      "matches": []
    },
    {
      "regex": "^[a-zA-Z0-9\\ ]{0,50}$",
      "exceptionStackTrace": null,
      "matches": [
        "                                                   ",
        "                                                  ",
        "a",
        "A",
        "0",
        "",
        " "
      ]
    },
    {
      "regex": "\\\\~\\{A\\}",
      "exceptionStackTrace": null,
      "matches": ["\\~{A}"]
    },
    {
      "regex": "^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?\\.?$",
      "exceptionStackTrace": null,
      "matches": [
        "aaa..",
        "aaa",
        "aaaaa.",
        "a.",
        "aaA.",
        "aa0.",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.",
        "aa.",
        "aAa.",
        "a0a.",
        "Aaa.",
        "0aa.",
        "a",
        "a-a.",
        "aaa."
      ]
    },
    {
      "regex": "\\* \\[.*\\]\\(.*\\)",
      "exceptionStackTrace": null,
      "matches": [
        "* [evil](])",
        "* [evil]([)",
        "* [evil](*)",
        "* [evil]())",
        "* [evil](()",
        "* [evil](eVil)",
        "* [evil](EVIL)",
        "* [evil](ev_il)",
        "* [evil](ev il)",
        "* [evil](ev4il)",
        "* [evil](e)",
        "* [evil]( )",
        "* [evil](6)",
        "* [evil](_)",
        "* [evil]()",
        "* []](evil)",
        "* [[](evil)",
        "* [*](evil)",
        "* [)](evil)",
        "* [(](evil)",
        "* [eVil](evil)",
        "* [EVIL](evil)",
        "* [ev_il](evil)",
        "* [ev il](evil)",
        "* [ev4il](evil)",
        "* [e](evil)",
        "* [ ](evil)",
        "* [6](evil)",
        "* [_](evil)",
        "* [](evil)",
        "* []()",
        "* [evil](evil)"
      ]
    },
    {
      "regex": " ([\\d\\s]\\d):(\\d\\d)(:(\\d\\d))? ",
      "exceptionStackTrace": null,
      "matches": ["  0:00:00:00 ", " 00:00:00 ", "  0:00 ", "  0:00:00 "]
    },
    { "regex": "^TODO ", "exceptionStackTrace": null, "matches": ["TODO "] },
    {
      "regex": "ENC\\\\[(NACL|KMS),[a-zA-Z0-9+/=\\\\s]+\\\\]",
      "exceptionStackTrace": null,
      "matches": [
        "ENC\\|\\]",
        "ENC\\]\\]",
        "ENC\\\\\\]",
        "ENC\\[\\]",
        "ENC\\=\\]",
        "ENC\\/\\]",
        "ENC\\,\\]",
        "ENC\\+\\]",
        "ENC\\)\\]",
        "ENC\\(\\]",
        "ENC\\eVil\\]",
        "ENC\\EVIL\\]",
        "ENC\\ev_il\\]",
        "ENC\\ev il\\]",
        "ENC\\ev4il\\]",
        "ENC\\e\\]",
        "ENC\\ \\]",
        "ENC\\6\\]",
        "ENC\\_\\]",
        "ENC\\\\]",
        "ENC\\evil\\]"
      ]
    },
    {
      "regex": "\\[kuzzle-plugin-test\\] No \"init\" method found\\.",
      "exceptionStackTrace": null,
      "matches": ["[kuzzle-plugin-test] No \"init\" method found."]
    },
    {
      "regex": "(\\A|\\n)---\\s*\\r?\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^PAPP (\\d{5}) .",
      "exceptionStackTrace": null,
      "matches": [
        "PAPP 00000 _",
        "PAPP 00000 A",
        "PAPP 00000 0",
        "PAPP 00000  ",
        "PAPP 000000 a",
        "PAPP 0000 a",
        "PAPP 00000 a"
      ]
    },
    {
      "regex": "^[\\w\\.\\-\\*]*(.*?)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil.",
        "evil-",
        "evil*",
        "evileVil",
        "evilEVIL",
        "evilev_il",
        "evilev il",
        "evilev4il",
        "evile",
        "evil ",
        "evil6",
        "evil_",
        ".evil",
        "-evil",
        "*evil",
        "eVilevil",
        "EVILevil",
        "ev_ilevil",
        "ev ilevil",
        "ev4ilevil",
        "eevil",
        " evil",
        "6evil",
        "_evil",
        "evil",
        "",
        "evilevil"
      ]
    },
    {
      "regex": "\\s+ip ospf cost ",
      "exceptionStackTrace": null,
      "matches": ["  ip ospf cost ", "ip ospf cost ", " ip ospf cost "]
    },
    {
      "regex": "^-?[0-9]{1,20}$",
      "exceptionStackTrace": null,
      "matches": [
        "-000000000000000000000",
        "-00000000000000000000",
        "-",
        "--0",
        "0",
        "-0"
      ]
    },
    {
      "regex": "^[a-zA-Z0-9_-][a-zA-Z0-9_.-]*\\.(log|txt)$",
      "exceptionStackTrace": null,
      "matches": [
        "-..log",
        "--.log",
        "-eVil.log",
        "-EVIL.log",
        "-ev_il.log",
        "-ev il.log",
        "-ev4il.log",
        "-e.log",
        "- .log",
        "-6.log",
        "-_.log",
        "aevil.log",
        "_evil.log",
        "Aevil.log",
        "0evil.log",
        "-.txt",
        "-.log",
        "-evil.txt",
        "-evil.log"
      ]
    },
    {
      "regex": "\\b(?<_1>instanceof)\\b",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<_"
      },
      "matches": []
    },
    {
      "regex": "([\\d]+)[^\\\\\\/]*$",
      "exceptionStackTrace": null,
      "matches": [
        "0\\",
        "0/",
        "0eVil",
        "0EVIL",
        "0ev_il",
        "0ev il",
        "0ev4il",
        "0e",
        "0 ",
        "06",
        "0_",
        "00evil",
        "evil",
        "0",
        "0evil"
      ]
    },
    {
      "regex": "(image|url)",
      "exceptionStackTrace": null,
      "matches": ["url", "image"]
    },
    {
      "regex": "^the (?:user|member) \"([^\\\"]*)\" is removed from the (?:domain|namespace) \"([^\\\"]*)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "the user \"evil\" is removed from the domain \"\"\"",
        "the user \"evil\" is removed from the domain \"eVil\"",
        "the user \"evil\" is removed from the domain \"EVIL\"",
        "the user \"evil\" is removed from the domain \"ev_il\"",
        "the user \"evil\" is removed from the domain \"ev il\"",
        "the user \"evil\" is removed from the domain \"ev4il\"",
        "the user \"evil\" is removed from the domain \"e\"",
        "the user \"evil\" is removed from the domain \" \"",
        "the user \"evil\" is removed from the domain \"6\"",
        "the user \"evil\" is removed from the domain \"_\"",
        "the user \"evil\" is removed from the domain \"\"",
        "the user \"\"\" is removed from the domain \"evil\"",
        "the user \"eVil\" is removed from the domain \"evil\"",
        "the user \"EVIL\" is removed from the domain \"evil\"",
        "the user \"ev_il\" is removed from the domain \"evil\"",
        "the user \"ev il\" is removed from the domain \"evil\"",
        "the user \"ev4il\" is removed from the domain \"evil\"",
        "the user \"e\" is removed from the domain \"evil\"",
        "the user \" \" is removed from the domain \"evil\"",
        "the user \"6\" is removed from the domain \"evil\"",
        "the user \"_\" is removed from the domain \"evil\"",
        "the user \"\" is removed from the domain \"evil\"",
        "the member \"\" is removed from the domain \"\"",
        "the user \"\" is removed from the namespace \"\"",
        "the user \"\" is removed from the domain \"\"",
        "the member \"evil\" is removed from the domain \"evil\"",
        "the user \"evil\" is removed from the namespace \"evil\"",
        "the user \"evil\" is removed from the domain \"evil\""
      ]
    },
    { "regex": "^NOK: ", "exceptionStackTrace": null, "matches": ["NOK: "] },
    {
      "regex": "% username",
      "exceptionStackTrace": null,
      "matches": ["% username"]
    },
    {
      "regex": "twilighted.net/viewstory.php?sid=",
      "exceptionStackTrace": null,
      "matches": [
        "twilightedanet/viewstoryaphppsid=",
        "twilightedanet/viewstoryAphpsid=",
        "twilightedanet/viewstory=phpsid=",
        "twilightedanet/viewstory0phpsid=",
        "twilightedanet/viewstory/phpsid=",
        "twilightedanet/viewstory phpsid=",
        "twilightedAnet/viewstoryaphpsid=",
        "twilighted=net/viewstoryaphpsid=",
        "twilighted0net/viewstoryaphpsid=",
        "twilighted/net/viewstoryaphpsid=",
        "twilighted net/viewstoryaphpsid=",
        "twilightedanet/viewstoryaphsid=",
        "twilightedanet/viewstoryaphpsid="
      ]
    },
    {
      "regex": "^ ( [-+] )? inf $",
      "exceptionStackTrace": null,
      "matches": ["  +  +  inf ", "  -  inf ", "  inf ", "  +  inf "]
    },
    {
      "regex": "([a-z\\s]+),?\\s*(United States|USA|US|Canada)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil,  United States",
        "evil,United States",
        "evil,, United States",
        "evil United States",
        "eVil, United States",
        "EVIL, United States",
        "ev_il, United States",
        "ev il, United States",
        "ev4il, United States",
        "e, United States",
        " , United States",
        "6, United States",
        "_, United States",
        ", United States",
        "evilCanada",
        "evilUS",
        "evilUSA",
        "evilUnited States",
        "evil, Canada",
        "evil, US",
        "evil, USA",
        "evil, United States"
      ]
    },
    {
      "regex": "^[a-zA-Z0-9_\\-]*$",
      "exceptionStackTrace": null,
      "matches": [
        "-",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "^([^,]|$)",
      "exceptionStackTrace": null,
      "matches": ["A", "0", ",", " ", "", "a"]
    },
    {
      "regex": "^\\\\([a-z]+|.)$",
      "exceptionStackTrace": null,
      "matches": [
        "\\\\",
        "\\A",
        "\\0",
        "\\eVil",
        "\\EVIL",
        "\\ev_il",
        "\\ev il",
        "\\ev4il",
        "\\e",
        "\\ ",
        "\\6",
        "\\_",
        "\\",
        "\\a",
        "\\evil"
      ]
    },
    {
      "regex": "CREATE USER IF NOT EXISTS SA",
      "exceptionStackTrace": null,
      "matches": ["CREATE USER IF NOT EXISTS SA"]
    },
    {
      "regex": "[^-+_.A-Za-z0-9]",
      "exceptionStackTrace": null,
      "matches": ["a", "_", "A", "0", ".", "-", "+", " "]
    },
    {
      "regex": "^\\s*(0x[0-9a-f]+)L?",
      "exceptionStackTrace": null,
      "matches": [
        " 0xaLL",
        " 0xa",
        " 0xaaL",
        " 0xL",
        " 0xgL",
        " 0x0L",
        "  0xaL",
        "0xaL",
        "0xa",
        " 0xaL"
      ]
    },
    {
      "regex": " -I/opt/local/include",
      "exceptionStackTrace": null,
      "matches": [" -I/opt/local/include"]
    },
    {
      "regex": "(au)ki                  $ ",
      "exceptionStackTrace": null,
      "matches": ["auki                   "]
    },
    {
      "regex": "\\.git|\\.gitmodules",
      "exceptionStackTrace": null,
      "matches": [".gitmodules", ".git"]
    },
    {
      "regex": "([\\x{10000}-\\x{10ffff}])",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "incomplete escape \\x"
      },
      "matches": []
    },
    {
      "regex": "^([0-9]{5})([0-9]{4})?$",
      "exceptionStackTrace": null,
      "matches": ["0000000000000", "0000000000", "00000000", "00000", "000000000"]
    },
    {
      "regex": "\\/sap\\/bc\\/lrep\\/actions\\/getcsrftoken",
      "exceptionStackTrace": null,
      "matches": ["/sap/bc/lrep/actions/getcsrftoken"]
    },
    {
      "regex": "\\s+.*\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "^.*IqiyiVersion\\/([\\d.]+).*$",
      "exceptionStackTrace": null,
      "matches": [
        "evilIqiyiVersion/./",
        "evilIqiyiVersion/..",
        "evilIqiyiVersion/.eVil",
        "evilIqiyiVersion/.EVIL",
        "evilIqiyiVersion/.ev_il",
        "evilIqiyiVersion/.ev il",
        "evilIqiyiVersion/.ev4il",
        "evilIqiyiVersion/.e",
        "evilIqiyiVersion/. ",
        "evilIqiyiVersion/.6",
        "evilIqiyiVersion/._",
        "evilIqiyiVersion/.",
        "evilIqiyiVersion/..evil",
        "evilIqiyiVersion/evil",
        "evilIqiyiVersion/0evil",
        "/IqiyiVersion/.evil",
        ".IqiyiVersion/.evil",
        "eVilIqiyiVersion/.evil",
        "EVILIqiyiVersion/.evil",
        "ev_ilIqiyiVersion/.evil",
        "ev ilIqiyiVersion/.evil",
        "ev4ilIqiyiVersion/.evil",
        "eIqiyiVersion/.evil",
        " IqiyiVersion/.evil",
        "6IqiyiVersion/.evil",
        "_IqiyiVersion/.evil",
        "IqiyiVersion/.evil",
        "IqiyiVersion/.",
        "evilIqiyiVersion/.evil"
      ]
    },
    { "regex": "lalal", "exceptionStackTrace": null, "matches": ["lalal"] },
    {
      "regex": "\\d{4}W\\d{3}",
      "exceptionStackTrace": null,
      "matches": ["0000W0000", "0000W00", "00000W000", "000W000", "0000W000"]
    },
    {
      "regex": "^[NESW]$",
      "exceptionStackTrace": null,
      "matches": ["S", "N", "E", "A", "W"]
    },
    {
      "regex": "^bundle exec \\/",
      "exceptionStackTrace": null,
      "matches": ["bundle exec /"]
    },
    {
      "regex": "\\A(\\d*)(E)(\\d+)\\.(\\d+)(E)?(\\d*)\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    { "regex": "<90%>", "exceptionStackTrace": null, "matches": ["<90%>"] },
    {
      "regex": "passwordless\\/(\\w+)",
      "exceptionStackTrace": null,
      "matches": [
        "passwordless/eVil",
        "passwordless/EVIL",
        "passwordless/ev_il",
        "passwordless/ev il",
        "passwordless/ev4il",
        "passwordless/e",
        "passwordless/ ",
        "passwordless/6",
        "passwordless/_",
        "passwordless/",
        "passwordless/evil"
      ]
    },
    { "regex": "p = 6", "exceptionStackTrace": null, "matches": ["p = 6"] },
    {
      "regex": "^CKA_CLASS CK_OBJECT_CLASS CKO_CERTIFICATE",
      "exceptionStackTrace": null,
      "matches": ["CKA_CLASS CK_OBJECT_CLASS CKO_CERTIFICATE"]
    },
    {
      "regex": "^try to call \"([^\"]*)\" at \"([^\"]*)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "try to call \"evil\" at \"\"\"",
        "try to call \"evil\" at \"eVil\"",
        "try to call \"evil\" at \"EVIL\"",
        "try to call \"evil\" at \"ev_il\"",
        "try to call \"evil\" at \"ev il\"",
        "try to call \"evil\" at \"ev4il\"",
        "try to call \"evil\" at \"e\"",
        "try to call \"evil\" at \" \"",
        "try to call \"evil\" at \"6\"",
        "try to call \"evil\" at \"_\"",
        "try to call \"evil\" at \"\"",
        "try to call \"\"\" at \"evil\"",
        "try to call \"eVil\" at \"evil\"",
        "try to call \"EVIL\" at \"evil\"",
        "try to call \"ev_il\" at \"evil\"",
        "try to call \"ev il\" at \"evil\"",
        "try to call \"ev4il\" at \"evil\"",
        "try to call \"e\" at \"evil\"",
        "try to call \" \" at \"evil\"",
        "try to call \"6\" at \"evil\"",
        "try to call \"_\" at \"evil\"",
        "try to call \"\" at \"evil\"",
        "try to call \"\" at \"\"",
        "try to call \"evil\" at \"evil\""
      ]
    },
    {
      "regex": "{\"bar\"=>\"baz\"}",
      "exceptionStackTrace": null,
      "matches": ["{\"bar\"=>\"baz\"}"]
    },
    {
      "regex": "^(\\\"((?:\\\\\\\\|\\\\\\\"|.)+?)\\\")",
      "exceptionStackTrace": null,
      "matches": [
        "\"\\\"",
        "\"A\"",
        "\"0\"",
        "\"\"\"",
        "\" \"",
        "\"\\\\\\\\\"",
        "\"\"",
        "\"a\"",
        "\"\\\"\"",
        "\"\\\\\""
      ]
    },
    {
      "regex": "[\\u00A0 ]$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 160"
      },
      "matches": []
    },
    {
      "regex": "^file \"(.*?)\" does not exist in shared path$",
      "exceptionStackTrace": null,
      "matches": [
        "file \"\"\" does not exist in shared path",
        "file \"eVil\" does not exist in shared path",
        "file \"EVIL\" does not exist in shared path",
        "file \"ev_il\" does not exist in shared path",
        "file \"ev il\" does not exist in shared path",
        "file \"ev4il\" does not exist in shared path",
        "file \"e\" does not exist in shared path",
        "file \" \" does not exist in shared path",
        "file \"6\" does not exist in shared path",
        "file \"_\" does not exist in shared path",
        "file \"\" does not exist in shared path",
        "file \"evil\" does not exist in shared path"
      ]
    },
    {
      "regex": "(^|[^\\w])@(\\w{1,15})",
      "exceptionStackTrace": null,
      "matches": [
        "a@a",
        "_@a",
        "A@a",
        "@@a",
        "0@a",
        "@aaaaaaaaaaaaaaaa",
        "@aaaaaaaaaaaaaaa",
        "@",
        "@_",
        "@A",
        "@0",
        " @a",
        "@a"
      ]
    },
    {
      "regex": "with_moose",
      "exceptionStackTrace": null,
      "matches": ["with_moose"]
    },
    {
      "regex": "Address Verified",
      "exceptionStackTrace": null,
      "matches": ["Address Verified"]
    },
    {
      "regex": "(\\x1b\\x5b.*?[HfABCDsuJKmhIp])",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 27"
      },
      "matches": []
    },
    {
      "regex": "^(\\+|\\-|)([\\w\\/-]+)$",
      "exceptionStackTrace": null,
      "matches": [
        "--evil",
        "+/",
        "+-",
        "++",
        "+eVil",
        "+EVIL",
        "+ev_il",
        "+ev il",
        "+ev4il",
        "+e",
        "+ ",
        "+6",
        "+_",
        "+",
        "evil",
        "-evil",
        "+evil"
      ]
    },
    {
      "regex": "finished-when was renamed to wait-for-script",
      "exceptionStackTrace": null,
      "matches": ["finished-when was renamed to wait-for-script"]
    },
    {
      "regex": "^(cris|ax|test)es$",
      "exceptionStackTrace": null,
      "matches": ["testes", "axes", "crises"]
    },
    {
      "regex": "Page \\d+ of (\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "Page 0 of 00",
        "Page 0 of ",
        "Page 00 of 0",
        "Page  of 0",
        "Page 0 of 0"
      ]
    },
    {
      "regex": "tag `(.*?)`",
      "exceptionStackTrace": null,
      "matches": [
        "tag ```",
        "tag `eVil`",
        "tag `EVIL`",
        "tag `ev_il`",
        "tag `ev il`",
        "tag `ev4il`",
        "tag `e`",
        "tag ` `",
        "tag `6`",
        "tag `_`",
        "tag ``",
        "tag `evil`"
      ]
    },
    {
      "regex": " NOT IN\\s*\\(",
      "exceptionStackTrace": null,
      "matches": [" NOT IN  (", " NOT IN(", " NOT IN ("]
    },
    {
      "regex": "BEGINDICTIONARY",
      "exceptionStackTrace": null,
      "matches": ["BEGINDICTIONARY"]
    },
    {
      "regex": "(?: *\\/\\/.*\\n)* *(?:else )?if *\\(freeExports\\) *{\\s*}\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^{(\\d*)(,?)(\\d*)}",
      "exceptionStackTrace": null,
      "matches": [
        "{0,00}",
        "{0,}",
        "{0,,0}",
        "{00}",
        "{00,0}",
        "{,0}",
        "{}",
        "{0,0}"
      ]
    },
    {
      "regex": "^(local|nobind)",
      "exceptionStackTrace": null,
      "matches": ["nobind", "local"]
    },
    {
      "regex": "id:timestamp",
      "exceptionStackTrace": null,
      "matches": ["id:timestamp"]
    },
    {
      "regex": "\\$([^$]+)",
      "exceptionStackTrace": null,
      "matches": [
        "$$",
        "$eVil",
        "$EVIL",
        "$ev_il",
        "$ev il",
        "$ev4il",
        "$e",
        "$ ",
        "$6",
        "$_",
        "$",
        "$evil"
      ]
    },
    {
      "regex": "('(.+?)'(:([0-9A-D]|,)+|))",
      "exceptionStackTrace": null,
      "matches": [
        "'evil':A:A",
        "'evil':AA",
        "'evil':",
        "'evil':E",
        "'evil':0",
        "':':A",
        "',':A",
        "''':A",
        "'eVil':A",
        "'EVIL':A",
        "'ev_il':A",
        "'ev il':A",
        "'ev4il':A",
        "'e':A",
        "' ':A",
        "'6':A",
        "'_':A",
        "'':A",
        "'evil'",
        "'evil':,",
        "'evil':A"
      ]
    },
    {
      "regex": "\\b(FreeBSD(?: i386)?|Linux)\\b",
      "exceptionStackTrace": null,
      "matches": ["FreeBSD i386 i386", "FreeBSD", "Linux", "FreeBSD i386"]
    },
    {
      "regex": "INPUT|TEXTAREA|SELECT",
      "exceptionStackTrace": null,
      "matches": ["SELECT", "TEXTAREA", "INPUT"]
    },
    {
      "regex": "^machdep.cpu.stepping: (.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "machdepacpuastepping: :",
        "machdepacpuastepping: eVil",
        "machdepacpuastepping: EVIL",
        "machdepacpuastepping: ev_il",
        "machdepacpuastepping: ev il",
        "machdepacpuastepping: ev4il",
        "machdepacpuastepping: e",
        "machdepacpuastepping:  ",
        "machdepacpuastepping: 6",
        "machdepacpuastepping: _",
        "machdepacpuAstepping: evil",
        "machdepacpu:stepping: evil",
        "machdepacpu0stepping: evil",
        "machdepacpu stepping: evil",
        "machdepAcpuastepping: evil",
        "machdep:cpuastepping: evil",
        "machdep0cpuastepping: evil",
        "machdep cpuastepping: evil",
        "machdepacpuastepping: ",
        "machdepacpuastepping: evil"
      ]
    },
    {
      "regex": "(<script>|</script>)",
      "exceptionStackTrace": null,
      "matches": ["</script>", "<script>"]
    },
    {
      "regex": "(^\\s*select\\s+(distinctrow|distinct)?)",
      "exceptionStackTrace": null,
      "matches": [
        " select distinctrowdistinctrow",
        " select ",
        " select  distinctrow",
        " selectdistinctrow",
        "  select distinctrow",
        "select distinctrow",
        "select ",
        " select distinct",
        " select distinctrow"
      ]
    },
    {
      "regex": " 0 failures",
      "exceptionStackTrace": null,
      "matches": [" 0 failures"]
    },
    {
      "regex": "iglu:(.*)/([a-zA-Z0-9_\\-]+)/([a-z]+)/([\\d\\-]+)$",
      "exceptionStackTrace": null,
      "matches": [
        "iglu:evil/evil/evil/--",
        "iglu:evil/evil/evil/",
        "iglu:evil/evil/evil/0",
        "iglu:evil/evil/eVil/-",
        "iglu:evil/evil/EVIL/-",
        "iglu:evil/evil/ev_il/-",
        "iglu:evil/evil/ev il/-",
        "iglu:evil/evil/ev4il/-",
        "iglu:evil/evil/e/-",
        "iglu:evil/evil/ /-",
        "iglu:evil/evil/6/-",
        "iglu:evil/evil/_/-",
        "iglu:evil/evil//-",
        "iglu:evil/:/evil/-",
        "iglu:evil///evil/-",
        "iglu:evil/-/evil/-",
        "iglu:evil/eVil/evil/-",
        "iglu:evil/EVIL/evil/-",
        "iglu:evil/ev_il/evil/-",
        "iglu:evil/ev il/evil/-",
        "iglu:evil/ev4il/evil/-",
        "iglu:evil/e/evil/-",
        "iglu:evil/ /evil/-",
        "iglu:evil/6/evil/-",
        "iglu:evil/_/evil/-",
        "iglu:evil//evil/-",
        "iglu::/evil/evil/-",
        "iglu://evil/evil/-",
        "iglu:-/evil/evil/-",
        "iglu:eVil/evil/evil/-",
        "iglu:EVIL/evil/evil/-",
        "iglu:ev_il/evil/evil/-",
        "iglu:ev il/evil/evil/-",
        "iglu:ev4il/evil/evil/-",
        "iglu:e/evil/evil/-",
        "iglu: /evil/evil/-",
        "iglu:6/evil/evil/-",
        "iglu:_/evil/evil/-",
        "iglu:/evil/evil/-",
        "iglu:evil/evil/evil/-"
      ]
    },
    {
      "regex": "(.+?) copy ([0-9])",
      "exceptionStackTrace": null,
      "matches": [
        "eVil copy 0",
        "EVIL copy 0",
        "ev_il copy 0",
        "ev il copy 0",
        "ev4il copy 0",
        "e copy 0",
        "  copy 0",
        "6 copy 0",
        "_ copy 0",
        " copy 0",
        "evil copy 0"
      ]
    },
    {
      "regex": "HTMLParser",
      "exceptionStackTrace": null,
      "matches": ["HTMLParser"]
    },
    {
      "regex": "import-i64\\.wat",
      "exceptionStackTrace": null,
      "matches": ["import-i64.wat"]
    },
    {
      "regex": "(?i)WEEKLY ON (.+) AT (.+)",
      "exceptionStackTrace": null,
      "matches": [
        "WEEKLY ON evil AT eVil",
        "WEEKLY ON evil AT EVIL",
        "WEEKLY ON evil AT ev_il",
        "WEEKLY ON evil AT ev il",
        "WEEKLY ON evil AT ev4il",
        "WEEKLY ON evil AT e",
        "WEEKLY ON evil AT  ",
        "WEEKLY ON evil AT 6",
        "WEEKLY ON evil AT _",
        "WEEKLY ON evil AT ",
        "WEEKLY ON eVil AT evil",
        "WEEKLY ON EVIL AT evil",
        "WEEKLY ON ev_il AT evil",
        "WEEKLY ON ev il AT evil",
        "WEEKLY ON ev4il AT evil",
        "WEEKLY ON e AT evil",
        "WEEKLY ON   AT evil",
        "WEEKLY ON 6 AT evil",
        "WEEKLY ON _ AT evil",
        "WEEKLY ON  AT evil",
        "WEEKLY ON evil AT evil"
      ]
    },
    {
      "regex": "^[2|9]$",
      "exceptionStackTrace": null,
      "matches": ["|", "2", "0", "9"]
    },
    {
      "regex": "test error message",
      "exceptionStackTrace": null,
      "matches": ["test error message"]
    },
    {
      "regex": "((<\\?php|<\\?=)[\\s\\S]*?\\?>)|(<%[\\s\\S]*?%>)",
      "exceptionStackTrace": null,
      "matches": [
        "<%?%>",
        "<%>%>",
        "<%=%>",
        "<%<%>",
        "<%%%>",
        "<%eVil%>",
        "<%EVIL%>",
        "<%ev_il%>",
        "<%ev il%>",
        "<%ev4il%>",
        "<%e%>",
        "<% %>",
        "<%6%>",
        "<%_%>",
        "<?php??>",
        "<?php>?>",
        "<?php=?>",
        "<?php<?>",
        "<?php%?>",
        "<?phpeVil?>",
        "<?phpEVIL?>",
        "<?phpev_il?>",
        "<?phpev il?>",
        "<?phpev4il?>",
        "<?phpe?>",
        "<?php ?>",
        "<?php6?>",
        "<?php_?>",
        "<%%>",
        "<?=?>",
        "<?php?>",
        "<%evil%>",
        "<?=evil?>",
        "<?phpevil?>"
      ]
    },
    { "regex": "\\b($num)\\b", "exceptionStackTrace": null, "matches": ["num"] },
    {
      "regex": "^(.*?)(?:-(\\d.*?))?(?:%(.*?))?(?:@(.*?))?$",
      "exceptionStackTrace": null,
      "matches": [
        "evil-0evil%evil@evil@evil",
        "evil-0evil%evil",
        "evil-0evil%evil@@",
        "evil-0evil%evil@-",
        "evil-0evil%evil@%",
        "evil-0evil%evil@eVil",
        "evil-0evil%evil@EVIL",
        "evil-0evil%evil@ev_il",
        "evil-0evil%evil@ev il",
        "evil-0evil%evil@ev4il",
        "evil-0evil%evil@e",
        "evil-0evil%evil@ ",
        "evil-0evil%evil@6",
        "evil-0evil%evil@_",
        "evil-0evil%evil@",
        "evil-0evil%evil%evil@evil",
        "evil-0evil@evil",
        "evil-0evil%@@evil",
        "evil-0evil%-@evil",
        "evil-0evil%%@evil",
        "evil-0evil%eVil@evil",
        "evil-0evil%EVIL@evil",
        "evil-0evil%ev_il@evil",
        "evil-0evil%ev il@evil",
        "evil-0evil%ev4il@evil",
        "evil-0evil%e@evil",
        "evil-0evil% @evil",
        "evil-0evil%6@evil",
        "evil-0evil%_@evil",
        "evil-0evil%@evil",
        "evil-0evil-0evil%evil@evil",
        "evil%evil@evil",
        "evil-0@%evil@evil",
        "evil-0-%evil@evil",
        "evil-0%%evil@evil",
        "evil-0eVil%evil@evil",
        "evil-0EVIL%evil@evil",
        "evil-0ev_il%evil@evil",
        "evil-0ev il%evil@evil",
        "evil-0ev4il%evil@evil",
        "evil-0e%evil@evil",
        "evil-0 %evil@evil",
        "evil-06%evil@evil",
        "evil-0_%evil@evil",
        "evil-0%evil@evil",
        "@-0evil%evil@evil",
        "--0evil%evil@evil",
        "%-0evil%evil@evil",
        "eVil-0evil%evil@evil",
        "EVIL-0evil%evil@evil",
        "ev_il-0evil%evil@evil",
        "ev il-0evil%evil@evil",
        "ev4il-0evil%evil@evil",
        "e-0evil%evil@evil",
        " -0evil%evil@evil",
        "6-0evil%evil@evil",
        "_-0evil%evil@evil",
        "-0evil%evil@evil",
        "",
        "evil-0evil%evil@evil"
      ]
    },
    {
      "regex": "TypeError.*minsize assert",
      "exceptionStackTrace": null,
      "matches": [
        "TypeErroreVilminsize assert",
        "TypeErrorEVILminsize assert",
        "TypeErrorev_ilminsize assert",
        "TypeErrorev ilminsize assert",
        "TypeErrorev4ilminsize assert",
        "TypeErroreminsize assert",
        "TypeError minsize assert",
        "TypeError6minsize assert",
        "TypeError_minsize assert",
        "TypeErrorminsize assert",
        "TypeErrorevilminsize assert"
      ]
    },
    {
      "regex": "^Passed: (.*)",
      "exceptionStackTrace": null,
      "matches": [
        "Passed: :",
        "Passed: eVil",
        "Passed: EVIL",
        "Passed: ev_il",
        "Passed: ev il",
        "Passed: ev4il",
        "Passed: e",
        "Passed:  ",
        "Passed: 6",
        "Passed: _",
        "Passed: ",
        "Passed: evil"
      ]
    },
    {
      "regex": "^we should be able to see that the widgets? exists?:$",
      "exceptionStackTrace": null,
      "matches": [
        "we should be able to see that the widgets existss:",
        "we should be able to see that the widgets exist:",
        "we should be able to see that the widgetss exists:",
        "we should be able to see that the widget exists:",
        "we should be able to see that the widget exist:",
        "we should be able to see that the widgets exists:"
      ]
    },
    {
      "regex": "^205(\\d\\d\\d)",
      "exceptionStackTrace": null,
      "matches": ["205000"]
    },
    {
      "regex": "; *(DOOV)[ _]([^;/]+) Build",
      "exceptionStackTrace": null,
      "matches": [
        "; DOOV_; Build",
        "; DOOV_/ Build",
        "; DOOV_eVil Build",
        "; DOOV_EVIL Build",
        "; DOOV_ev_il Build",
        "; DOOV_ev il Build",
        "; DOOV_ev4il Build",
        "; DOOV_e Build",
        "; DOOV_  Build",
        "; DOOV_6 Build",
        "; DOOV__ Build",
        "; DOOV_ Build",
        "; DOOV evil Build",
        ";  DOOV_evil Build",
        ";DOOV_evil Build",
        "; DOOV_evil Build"
      ]
    },
    {
      "regex": "^[ ]*the +(.*)",
      "exceptionStackTrace": null,
      "matches": [
        " the eVil",
        " the EVIL",
        " the ev_il",
        " the ev il",
        " the ev4il",
        " the e",
        " the  ",
        " the 6",
        " the _",
        " the ",
        " the  evil",
        " theevil",
        "  the evil",
        "the evil",
        "the ",
        " the evil"
      ]
    },
    {
      "regex": "Tampilkan Berdasarkan(?:\\s+|(?:<[^>]+>\\s*)*):(?:\\s+|(?:<[^>]+>\\s*)*)Tanggal(?:\\s+|(?:<[^>]+>\\s*)*)Urutkan Berdasarkan(?:\\s+|(?:<[^>]+>\\s*)*):(?:\\s+|(?:<[^>]+>\\s*)*)Mulai dari yang kecil",
      "exceptionStackTrace": null,
      "matches": [
        "Tampilkan Berdasarkan<evil> <evil> : Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan<evil>  : Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan<evil>: Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan<>> : Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan<<> : Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan<:> : Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan<eVil> : Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan<EVIL> : Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan<ev_il> : Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan<ev il> : Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan<ev4il> : Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan<e> : Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan< > : Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan<6> : Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan<_> : Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan<> : Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan :<evil> <evil> Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan :<evil>  Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan :<evil>Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan :<>> Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan :<<> Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan :<:> Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan :<eVil> Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan :<EVIL> Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan :<ev_il> Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan :<ev il> Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan :<ev4il> Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan :<e> Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan :< > Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan :<6> Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan :<_> Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan :<> Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal<evil> <evil> Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal<evil>  Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal<evil>Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal<>> Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal<<> Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal<:> Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal<eVil> Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal<EVIL> Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal<ev_il> Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal<ev il> Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal<ev4il> Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal<e> Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal< > Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal<6> Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal<_> Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal<> Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan<evil> <evil> : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan<evil>  : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan<evil>: Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan<>> : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan<<> : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan<:> : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan<eVil> : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan<EVIL> : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan<ev_il> : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan<ev il> : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan<ev4il> : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan<e> : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan< > : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan<6> : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan<_> : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan<> : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan :<evil> <evil> Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan :<evil>  Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan :<evil>Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan :<>> Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan :<<> Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan :<:> Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan :<eVil> Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan :<EVIL> Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan :<ev_il> Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan :<ev il> Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan :<ev4il> Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan :<e> Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan :< > Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan :<6> Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan :<_> Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan :<> Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan :  Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan  : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal  Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan :  Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan  : Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan: Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan :Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : TanggalUrutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan: Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan :Mulai dari yang kecil",
        "Tampilkan Berdasarkan<evil> : Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan :<evil> Tanggal Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal<evil> Urutkan Berdasarkan : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan<evil> : Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan :<evil> Mulai dari yang kecil",
        "Tampilkan Berdasarkan : Tanggal Urutkan Berdasarkan : Mulai dari yang kecil"
      ]
    },
    { "regex": "^(?:IF\\b)", "exceptionStackTrace": null, "matches": ["IF"] },
    {
      "regex": "^(MD5|ENCRYPT)$",
      "exceptionStackTrace": null,
      "matches": ["ENCRYPT", "MD5"]
    },
    {
      "regex": "{%[\\s\\t]+((end)?(block|learn|response|client|prev|group))[\\s\\t]+([^%]*|%(?=[^}]))%}",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "CheckLoad CRITICAL: Per core load average \\([\\d+] CPU\\)\\: \\[[\\d]+.[\\d]+, [\\d]+.[\\d]+, [\\d]+.[\\d]+\\]",
      "exceptionStackTrace": null,
      "matches": [
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a0, 0a0, 0a00]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a0, 0a0, 0a]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a0, 0a0, 0]0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a0, 0a0, 0[0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a0, 0a0, 0A0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a0, 0a0, 0:0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a0, 0a0, 000]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a0, 0a0, 0,0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a0, 0a0, 0+0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a0, 0a0, 0)0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a0, 0a0, 0(0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a0, 0a0, 0 0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a0, 0a0, 00a0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a0, 0a0, a0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a0, 0a00, 0a0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a0, 0a, 0a0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a0, 0]0, 0a0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a0, 0[0, 0a0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a0, 0A0, 0a0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a0, 0:0, 0a0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a0, 000, 0a0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a0, 0,0, 0a0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a0, 0+0, 0a0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a0, 0)0, 0a0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a0, 0(0, 0a0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a0, 0 0, 0a0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a0, 00a0, 0a0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a0, a0, 0a0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a00, 0a0, 0a0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a, 0a0, 0a0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0]0, 0a0, 0a0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0[0, 0a0, 0a0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0A0, 0a0, 0a0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0:0, 0a0, 0a0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [000, 0a0, 0a0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0,0, 0a0, 0a0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0+0, 0a0, 0a0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0)0, 0a0, 0a0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0(0, 0a0, 0a0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0 0, 0a0, 0a0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [00a0, 0a0, 0a0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [a0, 0a0, 0a0]",
        "CheckLoad CRITICAL: Per core load average (0 CPU): [0a0, 0a0, 0a0]",
        "CheckLoad CRITICAL: Per core load average (+ CPU): [0a0, 0a0, 0a0]"
      ]
    },
    {
      "regex": "taggroup:(\\d+)",
      "exceptionStackTrace": null,
      "matches": ["taggroup:00", "taggroup:", "taggroup:0"]
    },
    {
      "regex": "\\A\\s*\\{(.*)\\}\\Z",
      "exceptionStackTrace": null,
      "matches": [
        " {}}",
        " {{}",
        " {eVil}",
        " {EVIL}",
        " {ev_il}",
        " {ev il}",
        " {ev4il}",
        " {e}",
        " { }",
        " {6}",
        " {_}",
        " {}",
        "  {evil}",
        "{evil}",
        "{}",
        " {evil}"
      ]
    },
    {
      "regex": " \\\\\\r?\\n ",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": "DUMP \\w+",
      "exceptionStackTrace": null,
      "matches": [
        "DUMP eVil",
        "DUMP EVIL",
        "DUMP ev_il",
        "DUMP ev il",
        "DUMP ev4il",
        "DUMP e",
        "DUMP  ",
        "DUMP 6",
        "DUMP _",
        "DUMP ",
        "DUMP evil"
      ]
    },
    {
      "regex": "After LHC response for request<\\d+> GET http://local.ch at \\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+\\d{2}:\\d{2} Time=0ms URL=http://local.ch:80/",
      "exceptionStackTrace": null,
      "matches": [
        "After LHC response for request<0> GET http://localach at 0000-00-00T00:00:00+00:00 Time=0ms URL=http://localAch:80/",
        "After LHC response for request<0> GET http://localach at 0000-00-00T00:00:00+00:00 Time=0ms URL=http://local>ch:80/",
        "After LHC response for request<0> GET http://localach at 0000-00-00T00:00:00+00:00 Time=0ms URL=http://local=ch:80/",
        "After LHC response for request<0> GET http://localach at 0000-00-00T00:00:00+00:00 Time=0ms URL=http://local<ch:80/",
        "After LHC response for request<0> GET http://localach at 0000-00-00T00:00:00+00:00 Time=0ms URL=http://local:ch:80/",
        "After LHC response for request<0> GET http://localach at 0000-00-00T00:00:00+00:00 Time=0ms URL=http://local0ch:80/",
        "After LHC response for request<0> GET http://localach at 0000-00-00T00:00:00+00:00 Time=0ms URL=http://local/ch:80/",
        "After LHC response for request<0> GET http://localach at 0000-00-00T00:00:00+00:00 Time=0ms URL=http://local-ch:80/",
        "After LHC response for request<0> GET http://localach at 0000-00-00T00:00:00+00:00 Time=0ms URL=http://local+ch:80/",
        "After LHC response for request<0> GET http://localach at 0000-00-00T00:00:00+00:00 Time=0ms URL=http://local ch:80/",
        "After LHC response for request<0> GET http://localach at 0000-00-00T00:00:00+00:000 Time=0ms URL=http://localach:80/",
        "After LHC response for request<0> GET http://localach at 0000-00-00T00:00:00+00:0 Time=0ms URL=http://localach:80/",
        "After LHC response for request<0> GET http://localach at 0000-00-00T00:00:00+000:00 Time=0ms URL=http://localach:80/",
        "After LHC response for request<0> GET http://localach at 0000-00-00T00:00:00+0:00 Time=0ms URL=http://localach:80/",
        "After LHC response for request<0> GET http://localach at 0000-00-00T00:00:000+00:00 Time=0ms URL=http://localach:80/",
        "After LHC response for request<0> GET http://localach at 0000-00-00T00:00:0+00:00 Time=0ms URL=http://localach:80/",
        "After LHC response for request<0> GET http://localach at 0000-00-00T00:000:00+00:00 Time=0ms URL=http://localach:80/",
        "After LHC response for request<0> GET http://localach at 0000-00-00T00:0:00+00:00 Time=0ms URL=http://localach:80/",
        "After LHC response for request<0> GET http://localach at 0000-00-00T000:00:00+00:00 Time=0ms URL=http://localach:80/",
        "After LHC response for request<0> GET http://localach at 0000-00-00T0:00:00+00:00 Time=0ms URL=http://localach:80/",
        "After LHC response for request<0> GET http://localach at 0000-00-000T00:00:00+00:00 Time=0ms URL=http://localach:80/",
        "After LHC response for request<0> GET http://localach at 0000-00-0T00:00:00+00:00 Time=0ms URL=http://localach:80/",
        "After LHC response for request<0> GET http://localach at 0000-000-00T00:00:00+00:00 Time=0ms URL=http://localach:80/",
        "After LHC response for request<0> GET http://localach at 0000-0-00T00:00:00+00:00 Time=0ms URL=http://localach:80/",
        "After LHC response for request<0> GET http://localach at 00000-00-00T00:00:00+00:00 Time=0ms URL=http://localach:80/",
        "After LHC response for request<0> GET http://localach at 000-00-00T00:00:00+00:00 Time=0ms URL=http://localach:80/",
        "After LHC response for request<0> GET http://localAch at 0000-00-00T00:00:00+00:00 Time=0ms URL=http://localach:80/",
        "After LHC response for request<0> GET http://local>ch at 0000-00-00T00:00:00+00:00 Time=0ms URL=http://localach:80/",
        "After LHC response for request<0> GET http://local=ch at 0000-00-00T00:00:00+00:00 Time=0ms URL=http://localach:80/",
        "After LHC response for request<0> GET http://local<ch at 0000-00-00T00:00:00+00:00 Time=0ms URL=http://localach:80/",
        "After LHC response for request<0> GET http://local:ch at 0000-00-00T00:00:00+00:00 Time=0ms URL=http://localach:80/",
        "After LHC response for request<0> GET http://local0ch at 0000-00-00T00:00:00+00:00 Time=0ms URL=http://localach:80/",
        "After LHC response for request<0> GET http://local/ch at 0000-00-00T00:00:00+00:00 Time=0ms URL=http://localach:80/",
        "After LHC response for request<0> GET http://local-ch at 0000-00-00T00:00:00+00:00 Time=0ms URL=http://localach:80/",
        "After LHC response for request<0> GET http://local+ch at 0000-00-00T00:00:00+00:00 Time=0ms URL=http://localach:80/",
        "After LHC response for request<0> GET http://local ch at 0000-00-00T00:00:00+00:00 Time=0ms URL=http://localach:80/",
        "After LHC response for request<00> GET http://localach at 0000-00-00T00:00:00+00:00 Time=0ms URL=http://localach:80/",
        "After LHC response for request<> GET http://localach at 0000-00-00T00:00:00+00:00 Time=0ms URL=http://localach:80/",
        "After LHC response for request<0> GET http://localach at 0000-00-00T00:00:00+00:00 Time=0ms URL=http://localach:80/"
      ]
    },
    {
      "regex": "Updating (.+)\\.\\.(.+)",
      "exceptionStackTrace": null,
      "matches": [
        "Updating evil...",
        "Updating evil..eVil",
        "Updating evil..EVIL",
        "Updating evil..ev_il",
        "Updating evil..ev il",
        "Updating evil..ev4il",
        "Updating evil..e",
        "Updating evil.. ",
        "Updating evil..6",
        "Updating evil.._",
        "Updating evil..",
        "Updating ...evil",
        "Updating eVil..evil",
        "Updating EVIL..evil",
        "Updating ev_il..evil",
        "Updating ev il..evil",
        "Updating ev4il..evil",
        "Updating e..evil",
        "Updating  ..evil",
        "Updating 6..evil",
        "Updating _..evil",
        "Updating ..evil",
        "Updating evil..evil"
      ]
    },
    {
      "regex": "one_two_three_test",
      "exceptionStackTrace": null,
      "matches": ["one_two_three_test"]
    },
    {
      "regex": "^stage[1-5]$",
      "exceptionStackTrace": null,
      "matches": ["stage0", "stage1"]
    },
    {
      "regex": "([\\\\$`()!#&*|])",
      "exceptionStackTrace": null,
      "matches": ["`", "\\", "*", ")", "(", "&", "$", "#", "!", "|"]
    },
    {
      "regex": "invalid date-time value",
      "exceptionStackTrace": null,
      "matches": ["invalid date-time value"]
    },
    {
      "regex": "--framework-env production",
      "exceptionStackTrace": null,
      "matches": ["--framework-env production"]
    },
    {
      "regex": "com\\.apple",
      "exceptionStackTrace": null,
      "matches": ["com.apple"]
    },
    {
      "regex": "^an \"([^\"]*)\" exception should be raised when I follow \"([^\"]*)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "an \"evil\" exception should be raised when I follow \"\"\"",
        "an \"evil\" exception should be raised when I follow \"eVil\"",
        "an \"evil\" exception should be raised when I follow \"EVIL\"",
        "an \"evil\" exception should be raised when I follow \"ev_il\"",
        "an \"evil\" exception should be raised when I follow \"ev il\"",
        "an \"evil\" exception should be raised when I follow \"ev4il\"",
        "an \"evil\" exception should be raised when I follow \"e\"",
        "an \"evil\" exception should be raised when I follow \" \"",
        "an \"evil\" exception should be raised when I follow \"6\"",
        "an \"evil\" exception should be raised when I follow \"_\"",
        "an \"evil\" exception should be raised when I follow \"\"",
        "an \"\"\" exception should be raised when I follow \"evil\"",
        "an \"eVil\" exception should be raised when I follow \"evil\"",
        "an \"EVIL\" exception should be raised when I follow \"evil\"",
        "an \"ev_il\" exception should be raised when I follow \"evil\"",
        "an \"ev il\" exception should be raised when I follow \"evil\"",
        "an \"ev4il\" exception should be raised when I follow \"evil\"",
        "an \"e\" exception should be raised when I follow \"evil\"",
        "an \" \" exception should be raised when I follow \"evil\"",
        "an \"6\" exception should be raised when I follow \"evil\"",
        "an \"_\" exception should be raised when I follow \"evil\"",
        "an \"\" exception should be raised when I follow \"evil\"",
        "an \"\" exception should be raised when I follow \"\"",
        "an \"evil\" exception should be raised when I follow \"evil\""
      ]
    },
    {
      "regex": "^(https?://)([^/]+)(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "https://evil:",
        "https://evil/",
        "https://evileVil",
        "https://evilEVIL",
        "https://evilev_il",
        "https://evilev il",
        "https://evilev4il",
        "https://evile",
        "https://evil ",
        "https://evil6",
        "https://evil_",
        "https://:evil",
        "https:///evil",
        "https://eVilevil",
        "https://EVILevil",
        "https://ev_ilevil",
        "https://ev ilevil",
        "https://ev4ilevil",
        "https://eevil",
        "https:// evil",
        "https://6evil",
        "https://_evil",
        "https://evil",
        "httpss://evilevil",
        "http://evilevil",
        "http://evil",
        "https://evilevil"
      ]
    },
    {
      "regex": "should be put, call or none",
      "exceptionStackTrace": null,
      "matches": ["should be put, call or none"]
    },
    {
      "regex": "^a.+e",
      "exceptionStackTrace": null,
      "matches": [
        "aeVile",
        "aEVILe",
        "aev_ile",
        "aev ile",
        "aev4ile",
        "aee",
        "a e",
        "a6e",
        "a_e",
        "ae",
        "aevile"
      ]
    },
    {
      "regex": "(^|[^0-9A-Za-z\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u024f\u0610-\u061a\u0620-\u065f\u066e-\u06d3\u06d5-\u06dc\u06df-\u06e8\u06ea-\u06ef\u06fa-\u06fc\u06ff\u0750-\u077f\u08a0\u08a2-\u08ac\u08e4-\u08fe\u1e00-\u1eff\u2c60-\u2c7f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua7ff\ufb50-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc])((?:1(?:[\\s\\xa0]*tav\u0101r\u012b\u1e2b|Chr|[\\s\\xa0\u06d4]*\u062a\u0648\u0627\u0631\u06cc\u062e|\\-?\u062a\u0648\u0627\u0631\u0650\u06cc\u062e)|(?:1\\.|\u06f1)(?:[\\s\\xa0\u06d4]*\u062a\u0648\u0627\u0631|\\-?\u062a\u0648\u0627\u0631\u0650)\u06cc\u062e|\u0627\u0648\u0651\u0644(?:[\\s\\xa0\u06d4]*\u062a\u0648\u0627\u0631|\\-?\u062a\u0648\u0627\u0631\u0650)\u06cc\u062e))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 160"
      },
      "matches": []
    },
    { "regex": "^99941", "exceptionStackTrace": null, "matches": ["99941"] },
    {
      "regex": "^searchdomain\\s",
      "exceptionStackTrace": null,
      "matches": ["searchdomain "]
    },
    {
      "regex": "\\\\([0-7]{3}|x\\h\\h|u\\h\\h\\h\\h)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\h"
      },
      "matches": []
    },
    {
      "regex": "Missing new Virtual Tree",
      "exceptionStackTrace": null,
      "matches": ["Missing new Virtual Tree"]
    },
    {
      "regex": "\\[$raa:$rab\\]",
      "exceptionStackTrace": null,
      "matches": ["[raa:rab]"]
    },
    { "regex": "#<Module", "exceptionStackTrace": null, "matches": ["#<Module"] },
    {
      "regex": "^(?:src|top|hdr|(.*))dir$",
      "exceptionStackTrace": null,
      "matches": [
        "eVildir",
        "EVILdir",
        "ev_ildir",
        "ev ildir",
        "ev4ildir",
        "edir",
        " dir",
        "6dir",
        "_dir",
        "dir",
        "evildir",
        "hdrdir",
        "topdir",
        "srcdir"
      ]
    },
    {
      "regex": "certificate not specified",
      "exceptionStackTrace": null,
      "matches": ["certificate not specified"]
    },
    {
      "regex": "\\[local\\]",
      "exceptionStackTrace": null,
      "matches": ["[local]"]
    },
    {
      "regex": "\\A([wn]n)+[wn]\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "\\A$r->{rx}",
      "exceptionStackTrace": null,
      "matches": ["r->{rx}"]
    },
    {
      "regex": "<$td>$s\\Q\u00a5\u00bf\u00a5\u00a4\u00a5\u00c8\u00a5\u00eb\\E$s<\\/$td>$s<$td>$s($str)<\\/$td>",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\Q"
      },
      "matches": []
    },
    {
      "regex": "(description:.*)",
      "exceptionStackTrace": null,
      "matches": [
        "description::",
        "description:eVil",
        "description:EVIL",
        "description:ev_il",
        "description:ev il",
        "description:ev4il",
        "description:e",
        "description: ",
        "description:6",
        "description:_",
        "description:",
        "description:evil"
      ]
    },
    { "regex": "MQQ", "exceptionStackTrace": null, "matches": ["MQQ"] },
    {
      "regex": "\\.app-specs\\.",
      "exceptionStackTrace": null,
      "matches": [".app-specs."]
    },
    {
      "regex": "^(no|none)$",
      "exceptionStackTrace": null,
      "matches": ["none", "no"]
    },
    { "regex": "quit$", "exceptionStackTrace": null, "matches": ["quit"] },
    {
      "regex": "(.*\\.|^)((com-etsy)|(com-twitter-scalding)).*",
      "exceptionStackTrace": null,
      "matches": [
        "evil.com-etsy.",
        "evil.com-etsy-",
        "evil.com-etsyeVil",
        "evil.com-etsyEVIL",
        "evil.com-etsyev_il",
        "evil.com-etsyev il",
        "evil.com-etsyev4il",
        "evil.com-etsye",
        "evil.com-etsy ",
        "evil.com-etsy6",
        "evil.com-etsy_",
        "evil.com-etsy",
        "..com-etsyevil",
        "-.com-etsyevil",
        "eVil.com-etsyevil",
        "EVIL.com-etsyevil",
        "ev_il.com-etsyevil",
        "ev il.com-etsyevil",
        "ev4il.com-etsyevil",
        "e.com-etsyevil",
        " .com-etsyevil",
        "6.com-etsyevil",
        "_.com-etsyevil",
        ".com-etsyevil",
        "com-etsy",
        ".com-twitter-scalding",
        ".com-etsy",
        "com-etsyevil",
        "evil.com-twitter-scaldingevil",
        "evil.com-etsyevil"
      ]
    },
    {
      "regex": "^(CATEGORIES|ALL)$",
      "exceptionStackTrace": null,
      "matches": ["ALL", "CATEGORIES"]
    },
    {
      "regex": "^.{$gpsPos}.{72}A([NS])([EW])",
      "exceptionStackTrace": null,
      "matches": [
        "a{gpsPos}aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaASE",
        "a{gpsPos}aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaASA",
        "a{gpsPos}aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaANW",
        "a{gpsPos}aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaAAW",
        "a{gpsPos}aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaASW",
        "a{gpsPos}aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaASW",
        "a{gpsPos}}aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaASW",
        "a{gpsPos}{aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaASW",
        "a{gpsPos}AaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaASW",
        "a{gpsPos}0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaASW",
        "a{gpsPos} aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaASW",
        "}{gpsPos}aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaASW",
        "{{gpsPos}aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaASW",
        "A{gpsPos}aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaASW",
        "0{gpsPos}aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaASW",
        " {gpsPos}aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaASW",
        "a{gpsPos}aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaASW"
      ]
    },
    {
      "regex": ".*_([0-9]*)",
      "exceptionStackTrace": null,
      "matches": [
        "evil_00",
        "evil_",
        "eVil_0",
        "EVIL_0",
        "ev_il_0",
        "ev il_0",
        "ev4il_0",
        "e_0",
        " _0",
        "6_0",
        "__0",
        "_0",
        "_",
        "evil_0"
      ]
    },
    {
      "regex": "^\\s+Label Stack=102 ",
      "exceptionStackTrace": null,
      "matches": ["  Label Stack=102 ", "Label Stack=102 ", " Label Stack=102 "]
    },
    {
      "regex": "^(?P<KEY>([^=]*))=(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil==",
        "evil=eVil",
        "evil=EVIL",
        "evil=ev_il",
        "evil=ev il",
        "evil=ev4il",
        "evil=e",
        "evil= ",
        "evil=6",
        "evil=_",
        "evil=",
        "==evil",
        "eVil=evil",
        "EVIL=evil",
        "ev_il=evil",
        "ev il=evil",
        "ev4il=evil",
        "e=evil",
        " =evil",
        "6=evil",
        "_=evil",
        "=evil",
        "=",
        "evil=evil"
      ]
    },
    {
      "regex": "^the \"([^\\\"]*)\" checkbox should be checked$",
      "exceptionStackTrace": null,
      "matches": [
        "the \"\"\" checkbox should be checked",
        "the \"eVil\" checkbox should be checked",
        "the \"EVIL\" checkbox should be checked",
        "the \"ev_il\" checkbox should be checked",
        "the \"ev il\" checkbox should be checked",
        "the \"ev4il\" checkbox should be checked",
        "the \"e\" checkbox should be checked",
        "the \" \" checkbox should be checked",
        "the \"6\" checkbox should be checked",
        "the \"_\" checkbox should be checked",
        "the \"\" checkbox should be checked",
        "the \"evil\" checkbox should be checked"
      ]
    },
    {
      "regex": "::Generator::State\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": " (start|stop)\\/([a-z\\-]+)(?:, process (\\d+))?",
      "exceptionStackTrace": null,
      "matches": [
        " start/evil, process 0, process 0",
        " start/evil, process 00",
        " start/evil, process ",
        " start//, process 0",
        " start/-, process 0",
        " start/,, process 0",
        " start/eVil, process 0",
        " start/EVIL, process 0",
        " start/ev_il, process 0",
        " start/ev il, process 0",
        " start/ev4il, process 0",
        " start/e, process 0",
        " start/ , process 0",
        " start/6, process 0",
        " start/_, process 0",
        " start/, process 0",
        " stop/evil",
        " start/evil",
        " stop/evil, process 0",
        " start/evil, process 0"
      ]
    },
    {
      "regex": "\\.d\\.tsx?$",
      "exceptionStackTrace": null,
      "matches": [".d.tsxx", ".d.ts", ".d.tsx"]
    },
    {
      "regex": "Black Lab Linux",
      "exceptionStackTrace": null,
      "matches": ["Black Lab Linux"]
    },
    {
      "regex": "\\/([-_\\.0-9a-zA-Z]+)",
      "exceptionStackTrace": null,
      "matches": [
        "//",
        "/.",
        "/-",
        "/eVil",
        "/EVIL",
        "/ev_il",
        "/ev il",
        "/ev4il",
        "/e",
        "/ ",
        "/6",
        "/_",
        "/",
        "/evil"
      ]
    },
    {
      "regex": "file_12.js",
      "exceptionStackTrace": null,
      "matches": [
        "file_12_js",
        "file_12Ajs",
        "file_120js",
        "file_12 js",
        "file_12ajs"
      ]
    },
    {
      "regex": "^\u00e0\u00ba\u00ad$",
      "exceptionStackTrace": null,
      "matches": ["\u00e0\u00ba\u00ad"]
    },
    {
      "regex": "^\\/?includes\\/vendor\\/",
      "exceptionStackTrace": null,
      "matches": ["//includes/vendor/", "includes/vendor/", "/includes/vendor/"]
    },
    {
      "regex": "Subject: (.+)\\r\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": "^square/(\\d+)/",
      "exceptionStackTrace": null,
      "matches": ["square/00/", "square//", "square/0/"]
    },
    {
      "regex": "^<?($HTML_Elements)",
      "exceptionStackTrace": null,
      "matches": ["<<HTML_Elements", "HTML_Elements", "<HTML_Elements"]
    },
    {
      "regex": "(notes|suggested pairing|make ahead)",
      "exceptionStackTrace": null,
      "matches": ["make ahead", "suggested pairing", "notes"]
    },
    {
      "regex": "^the upgrade metadata will be cleaned up$",
      "exceptionStackTrace": null,
      "matches": ["the upgrade metadata will be cleaned up"]
    },
    {
      "regex": "^KO_PATHWAY\\s{2}(ko\\d{5})$",
      "exceptionStackTrace": null,
      "matches": [
        "KO_PATHWAY  ko000000",
        "KO_PATHWAY  ko0000",
        "KO_PATHWAY   ko00000",
        "KO_PATHWAY ko00000",
        "KO_PATHWAY  ko00000"
      ]
    },
    {
      "regex": "Unexpected middleware set after the adapter",
      "exceptionStackTrace": null,
      "matches": ["Unexpected middleware set after the adapter"]
    },
    {
      "regex": "^Platform ",
      "exceptionStackTrace": null,
      "matches": ["Platform "]
    },
    {
      "regex": "data length does not match header",
      "exceptionStackTrace": null,
      "matches": ["data length does not match header"]
    },
    {
      "regex": "^it returns the element$",
      "exceptionStackTrace": null,
      "matches": ["it returns the element"]
    },
    {
      "regex": "^0?\\.?",
      "exceptionStackTrace": null,
      "matches": ["0..", "0", "00.", ".", "", "0."]
    },
    {
      "regex": "^grup\\.nom\\.",
      "exceptionStackTrace": null,
      "matches": ["grup.nom."]
    },
    {
      "regex": "patient_name",
      "exceptionStackTrace": null,
      "matches": ["patient_name"]
    },
    {
      "regex": "^(?:bpm|tempo)(\\d+)",
      "exceptionStackTrace": null,
      "matches": ["bpm00", "bpm", "tempo0", "bpm0"]
    },
    {
      "regex": "^Build failed",
      "exceptionStackTrace": null,
      "matches": ["Build failed"]
    },
    {
      "regex": "((?:https?\\:)?\\/\\/.*)api((?:\\.[a-zA-Z0-9\\-]+)*)(\\.2performant\\.com)",
      "exceptionStackTrace": null,
      "matches": [
        "https://evilapi.evil.evil.2performant.com",
        "https://evilapi.2performant.com",
        "https://evilapi.:.2performant.com",
        "https://evilapi./.2performant.com",
        "https://evilapi...2performant.com",
        "https://evilapi.-.2performant.com",
        "https://evilapi.eVil.2performant.com",
        "https://evilapi.EVIL.2performant.com",
        "https://evilapi.ev_il.2performant.com",
        "https://evilapi.ev il.2performant.com",
        "https://evilapi.ev4il.2performant.com",
        "https://evilapi.e.2performant.com",
        "https://evilapi. .2performant.com",
        "https://evilapi.6.2performant.com",
        "https://evilapi._.2performant.com",
        "https://evilapi..2performant.com",
        "https://:api.evil.2performant.com",
        "https:///api.evil.2performant.com",
        "https://.api.evil.2performant.com",
        "https://-api.evil.2performant.com",
        "https://eVilapi.evil.2performant.com",
        "https://EVILapi.evil.2performant.com",
        "https://ev_ilapi.evil.2performant.com",
        "https://ev ilapi.evil.2performant.com",
        "https://ev4ilapi.evil.2performant.com",
        "https://eapi.evil.2performant.com",
        "https:// api.evil.2performant.com",
        "https://6api.evil.2performant.com",
        "https://_api.evil.2performant.com",
        "https://api.evil.2performant.com",
        "https:https://evilapi.evil.2performant.com",
        "//evilapi.evil.2performant.com",
        "httpss://evilapi.evil.2performant.com",
        "http://evilapi.evil.2performant.com",
        "//api.2performant.com",
        "https://evilapi.evil.2performant.com"
      ]
    },
    {
      "regex": "((id='[:alpha:\\-]+)|[\\?&]|&amp;|&#038;)(et=[\\w-]+|sig=[\\w-=]+)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad character range \\w-="
      },
      "matches": []
    },
    {
      "regex": "(^\\W*)|({ \\|?.*\\|?)}",
      "exceptionStackTrace": null,
      "matches": [
        "{ |evil||}",
        "{ |evil}",
        "{ |}|}",
        "{ |||}",
        "{ |{|}",
        "{ |eVil|}",
        "{ |EVIL|}",
        "{ |ev_il|}",
        "{ |ev il|}",
        "{ |ev4il|}",
        "{ |e|}",
        "{ | |}",
        "{ |6|}",
        "{ |_|}",
        "{ ||}",
        "{ ||evil|}",
        "{ evil|}",
        ";;",
        "}",
        "|",
        "{",
        "a",
        "_",
        "A",
        "0",
        " ",
        "{ }",
        "",
        "{ |evil|}",
        ";"
      ]
    },
    {
      "regex": " \\G \\s* (['\"]) ((?:\\\\?.)*?) \\1 ",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\G"
      },
      "matches": []
    },
    { "regex": "Cli", "exceptionStackTrace": null, "matches": ["Cli"] },
    {
      "regex": "(http|ftp)://[a-zA-Z0-9][a-zA-Z0-9/.-/]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (bad range): Invalid range: .-/"
      },
      "matches": []
    },
    {
      "regex": "^\"([^\"]*)\" should not have been uninstalled$",
      "exceptionStackTrace": null,
      "matches": [
        "\"\"\" should not have been uninstalled",
        "\"eVil\" should not have been uninstalled",
        "\"EVIL\" should not have been uninstalled",
        "\"ev_il\" should not have been uninstalled",
        "\"ev il\" should not have been uninstalled",
        "\"ev4il\" should not have been uninstalled",
        "\"e\" should not have been uninstalled",
        "\" \" should not have been uninstalled",
        "\"6\" should not have been uninstalled",
        "\"_\" should not have been uninstalled",
        "\"\" should not have been uninstalled",
        "\"evil\" should not have been uninstalled"
      ]
    },
    { "regex": "Line 1:", "exceptionStackTrace": null, "matches": ["Line 1:"] },
    {
      "regex": "(.)                        $ ",
      "exceptionStackTrace": null,
      "matches": [
        "_                         ",
        "A                         ",
        "0                         ",
        "                          ",
        "a                         "
      ]
    },
    {
      "regex": "^##|\\t",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "^[bflsycwphqrimtnkvadegu]+$",
      "exceptionStackTrace": null,
      "matches": [
        "uu",
        "",
        "y",
        "w",
        "v",
        "t",
        "s",
        "r",
        "q",
        "p",
        "n",
        "m",
        "l",
        "k",
        "j",
        "i",
        "h",
        "g",
        "f",
        "e",
        "d",
        "c",
        "b",
        "a",
        "u"
      ]
    },
    {
      "regex": "(?:(?:JLB))\\b",
      "exceptionStackTrace": null,
      "matches": ["JLB"]
    },
    {
      "regex": "^:host-context\\(([^:]+)\\)$",
      "exceptionStackTrace": null,
      "matches": [
        ":host-context(:)",
        ":host-context(-)",
        ":host-context())",
        ":host-context(()",
        ":host-context(eVil)",
        ":host-context(EVIL)",
        ":host-context(ev_il)",
        ":host-context(ev il)",
        ":host-context(ev4il)",
        ":host-context(e)",
        ":host-context( )",
        ":host-context(6)",
        ":host-context(_)",
        ":host-context()",
        ":host-context(evil)"
      ]
    },
    {
      "regex": "\\AINCRTE\\Z",
      "exceptionStackTrace": null,
      "matches": ["INCRTE"]
    },
    {
      "regex": "A template that extends another one cannot include content outside Twig blocks\\. Did you forget to put the content inside a {% block %} tag at line 1\\?",
      "exceptionStackTrace": null,
      "matches": [
        "A template that extends another one cannot include content outside Twig blocks. Did you forget to put the content inside a {% block %} tag at line 1?"
      ]
    },
    {
      "regex": "^(% Invalid input detected at '\\^' marker.)$",
      "exceptionStackTrace": null,
      "matches": [
        "% Invalid input detected at '^' marker^",
        "% Invalid input detected at '^' markerA",
        "% Invalid input detected at '^' marker0",
        "% Invalid input detected at '^' marker'",
        "% Invalid input detected at '^' marker%",
        "% Invalid input detected at '^' marker ",
        "% Invalid input detected at '^' markera"
      ]
    },
    {
      "regex": "^(4026|417500|4508|4844|491(3|7))",
      "exceptionStackTrace": null,
      "matches": ["4917", "4913", "4844", "4508", "417500", "4026"]
    },
    {
      "regex": "\\[THREAD\\]",
      "exceptionStackTrace": null,
      "matches": ["[THREAD]"]
    },
    { "regex": "\\ARFC", "exceptionStackTrace": null, "matches": ["RFC"] },
    {
      "regex": "^the \"(.*)\" job is triggered from \"([^\"]*)\" and \"([^\"]*)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "the \"evil\" job is triggered from \"evil\" and \"\"\"",
        "the \"evil\" job is triggered from \"evil\" and \"eVil\"",
        "the \"evil\" job is triggered from \"evil\" and \"EVIL\"",
        "the \"evil\" job is triggered from \"evil\" and \"ev_il\"",
        "the \"evil\" job is triggered from \"evil\" and \"ev il\"",
        "the \"evil\" job is triggered from \"evil\" and \"ev4il\"",
        "the \"evil\" job is triggered from \"evil\" and \"e\"",
        "the \"evil\" job is triggered from \"evil\" and \" \"",
        "the \"evil\" job is triggered from \"evil\" and \"6\"",
        "the \"evil\" job is triggered from \"evil\" and \"_\"",
        "the \"evil\" job is triggered from \"evil\" and \"\"",
        "the \"evil\" job is triggered from \"\"\" and \"evil\"",
        "the \"evil\" job is triggered from \"eVil\" and \"evil\"",
        "the \"evil\" job is triggered from \"EVIL\" and \"evil\"",
        "the \"evil\" job is triggered from \"ev_il\" and \"evil\"",
        "the \"evil\" job is triggered from \"ev il\" and \"evil\"",
        "the \"evil\" job is triggered from \"ev4il\" and \"evil\"",
        "the \"evil\" job is triggered from \"e\" and \"evil\"",
        "the \"evil\" job is triggered from \" \" and \"evil\"",
        "the \"evil\" job is triggered from \"6\" and \"evil\"",
        "the \"evil\" job is triggered from \"_\" and \"evil\"",
        "the \"evil\" job is triggered from \"\" and \"evil\"",
        "the \"\"\" job is triggered from \"evil\" and \"evil\"",
        "the \"eVil\" job is triggered from \"evil\" and \"evil\"",
        "the \"EVIL\" job is triggered from \"evil\" and \"evil\"",
        "the \"ev_il\" job is triggered from \"evil\" and \"evil\"",
        "the \"ev il\" job is triggered from \"evil\" and \"evil\"",
        "the \"ev4il\" job is triggered from \"evil\" and \"evil\"",
        "the \"e\" job is triggered from \"evil\" and \"evil\"",
        "the \" \" job is triggered from \"evil\" and \"evil\"",
        "the \"6\" job is triggered from \"evil\" and \"evil\"",
        "the \"_\" job is triggered from \"evil\" and \"evil\"",
        "the \"\" job is triggered from \"evil\" and \"evil\"",
        "the \"\" job is triggered from \"\" and \"\"",
        "the \"evil\" job is triggered from \"evil\" and \"evil\""
      ]
    },
    {
      "regex": "^\"([^\\\"]*)\" should have the same contents as \"([^\\\"]*)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "\"evil\" should have the same contents as \"\"\"",
        "\"evil\" should have the same contents as \"eVil\"",
        "\"evil\" should have the same contents as \"EVIL\"",
        "\"evil\" should have the same contents as \"ev_il\"",
        "\"evil\" should have the same contents as \"ev il\"",
        "\"evil\" should have the same contents as \"ev4il\"",
        "\"evil\" should have the same contents as \"e\"",
        "\"evil\" should have the same contents as \" \"",
        "\"evil\" should have the same contents as \"6\"",
        "\"evil\" should have the same contents as \"_\"",
        "\"evil\" should have the same contents as \"\"",
        "\"\"\" should have the same contents as \"evil\"",
        "\"eVil\" should have the same contents as \"evil\"",
        "\"EVIL\" should have the same contents as \"evil\"",
        "\"ev_il\" should have the same contents as \"evil\"",
        "\"ev il\" should have the same contents as \"evil\"",
        "\"ev4il\" should have the same contents as \"evil\"",
        "\"e\" should have the same contents as \"evil\"",
        "\" \" should have the same contents as \"evil\"",
        "\"6\" should have the same contents as \"evil\"",
        "\"_\" should have the same contents as \"evil\"",
        "\"\" should have the same contents as \"evil\"",
        "\"\" should have the same contents as \"\"",
        "\"evil\" should have the same contents as \"evil\""
      ]
    },
    {
      "regex": "[^\\@]+(?=:)",
      "exceptionStackTrace": null,
      "matches": [
        "@",
        ":",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "^[+-]?\\d+\\.?\\d*(e-\\d+)?",
      "exceptionStackTrace": null,
      "matches": [
        "-0.0e-0e-0",
        "-0.0",
        "-0.0e-00",
        "-0.0e-",
        "-0.00e-0",
        "-0.e-0",
        "-0..0e-0",
        "-00e-0",
        "-00.0e-0",
        "-.0e-0",
        "--0.0e-0",
        "0.0e-0",
        "+0.0e-0",
        "0",
        "-0.0e-0"
      ]
    },
    {
      "regex": "^(?:discard|domain|max-age|\n                                    path|port|secure|version)$",
      "exceptionStackTrace": null,
      "matches": [
        "version",
        "secure",
        "port",
        "\n                                    path",
        "max-age",
        "domain",
        "discard"
      ]
    },
    {
      "regex": "describe \\('DELETE \\/Testing2\\/:id', function \\(\\) \\{",
      "exceptionStackTrace": null,
      "matches": ["describe ('DELETE /Testing2/:id', function () {"]
    },
    {
      "regex": "\\Adefine_callback(\\s|\\()",
      "exceptionStackTrace": null,
      "matches": ["define_callback(", "define_callback "]
    },
    { "regex": "ivities$", "exceptionStackTrace": null, "matches": ["ivities"] },
    {
      "regex": "(delete|select)\\s.*from\\s+\\Q$word\\E$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\Q"
      },
      "matches": []
    },
    {
      "regex": "\\blanguage-(\\S+)",
      "exceptionStackTrace": null,
      "matches": [
        "language--",
        "language-eVil",
        "language-EVIL",
        "language-ev_il",
        "language-ev il",
        "language-ev4il",
        "language-e",
        "language- ",
        "language-6",
        "language-_",
        "language-",
        "language-evil"
      ]
    },
    {
      "regex": "Rev\u00fc",
      "exceptionStackTrace": null,
      "matches": ["Rev\u00fc"]
    },
    { "regex": "^Final", "exceptionStackTrace": null, "matches": ["Final"] },
    {
      "regex": "(php|html?|css|js|cpp|sh)",
      "exceptionStackTrace": null,
      "matches": ["htmll", "htm", "sh", "cpp", "js", "css", "html", "php"]
    },
    {
      "regex": "(^|[^0-9A-Za-z\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u024f\u1e00-\u1eff\u2c60-\u2c7f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua7ff])((?:(?:III|3)[\\s\\xa0]*Mak(?:abejsk[a\\xE1])?|3Macc|(?:III|3)\\.[\\s\\xa0]*Mak(?:abejsk[a\\xE1])?|T[r\u0159]et[i\\xED][\\s\\xa0]*Mak(?:abejsk[a\\xE1])?))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 160"
      },
      "matches": []
    },
    {
      "regex": "<circle radius=\"10\"\\/>",
      "exceptionStackTrace": null,
      "matches": ["<circle radius=\"10\"/>"]
    },
    {
      "regex": "^---(.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "----",
        "---eVil",
        "---EVIL",
        "---ev_il",
        "---ev il",
        "---ev4il",
        "---e",
        "--- ",
        "---6",
        "---_",
        "---",
        "---evil"
      ]
    },
    {
      "regex": "\\[([0-9]+)\\]",
      "exceptionStackTrace": null,
      "matches": ["[00]", "[]", "[0]"]
    },
    {
      "regex": "(?<_1>\\$)(?<_2>zero|v[01]|a[0-3]|t[0-9]|s[0-7]|gp|sp|fp|ra)\\b",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<_"
      },
      "matches": []
    },
    {
      "regex": "<a href=\"http:\\/\\/my-ghost-blog.com\\/blog\\/not-so-short-bit-complex\\/#nowhere\" title=\"Anchor URL\">",
      "exceptionStackTrace": null,
      "matches": [
        "<a href=\"http://my-ghost-blogAcom/blog/not-so-short-bit-complex/#nowhere\" title=\"Anchor URL\">",
        "<a href=\"http://my-ghost-blog>com/blog/not-so-short-bit-complex/#nowhere\" title=\"Anchor URL\">",
        "<a href=\"http://my-ghost-blog=com/blog/not-so-short-bit-complex/#nowhere\" title=\"Anchor URL\">",
        "<a href=\"http://my-ghost-blog<com/blog/not-so-short-bit-complex/#nowhere\" title=\"Anchor URL\">",
        "<a href=\"http://my-ghost-blog:com/blog/not-so-short-bit-complex/#nowhere\" title=\"Anchor URL\">",
        "<a href=\"http://my-ghost-blog0com/blog/not-so-short-bit-complex/#nowhere\" title=\"Anchor URL\">",
        "<a href=\"http://my-ghost-blog/com/blog/not-so-short-bit-complex/#nowhere\" title=\"Anchor URL\">",
        "<a href=\"http://my-ghost-blog-com/blog/not-so-short-bit-complex/#nowhere\" title=\"Anchor URL\">",
        "<a href=\"http://my-ghost-blog#com/blog/not-so-short-bit-complex/#nowhere\" title=\"Anchor URL\">",
        "<a href=\"http://my-ghost-blog\"com/blog/not-so-short-bit-complex/#nowhere\" title=\"Anchor URL\">",
        "<a href=\"http://my-ghost-blog com/blog/not-so-short-bit-complex/#nowhere\" title=\"Anchor URL\">",
        "<a href=\"http://my-ghost-blogacom/blog/not-so-short-bit-complex/#nowhere\" title=\"Anchor URL\">"
      ]
    },
    {
      "regex": "(command|4dos)\\.com",
      "exceptionStackTrace": null,
      "matches": ["4dos.com", "command.com"]
    },
    {
      "regex": "([^.]+?)$",
      "exceptionStackTrace": null,
      "matches": [
        ".",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "(rebol|(:\\s+func|make\\s+object!|^\\s*context)\\s*\\[)",
      "exceptionStackTrace": null,
      "matches": [
        "  context [",
        "context [",
        "make  object! [",
        "makeobject! [",
        ": func  [",
        ":  func [",
        ":func [",
        "context[",
        "make object![",
        ": func[",
        " context [",
        "make object! [",
        ": func [",
        "rebol"
      ]
    },
    { "regex": "STATE", "exceptionStackTrace": null, "matches": ["STATE"] },
    {
      "regex": "(\\x10+)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 16"
      },
      "matches": []
    },
    {
      "regex": "^audio\\/.*$",
      "exceptionStackTrace": null,
      "matches": [
        "audio//",
        "audio/eVil",
        "audio/EVIL",
        "audio/ev_il",
        "audio/ev il",
        "audio/ev4il",
        "audio/e",
        "audio/ ",
        "audio/6",
        "audio/_",
        "audio/",
        "audio/evil"
      ]
    },
    {
      "regex": "\\.(\\d*?)(0*)$",
      "exceptionStackTrace": null,
      "matches": [".000", ".0", ".", ".00"]
    },
    {
      "regex": "(\\d+)dpi",
      "exceptionStackTrace": null,
      "matches": ["00dpi", "dpi", "0dpi"]
    },
    {
      "regex": "([^/.]*)\\.[a-z]+$",
      "exceptionStackTrace": null,
      "matches": [
        "evil.eVil",
        "evil.EVIL",
        "evil.ev_il",
        "evil.ev il",
        "evil.ev4il",
        "evil.e",
        "evil. ",
        "evil.6",
        "evil._",
        "evil.",
        "/.evil",
        "..evil",
        "eVil.evil",
        "EVIL.evil",
        "ev_il.evil",
        "ev il.evil",
        "ev4il.evil",
        "e.evil",
        " .evil",
        "6.evil",
        "_.evil",
        ".evil",
        "evil.evil"
      ]
    },
    {
      "regex": "https://s3.amazonaws.com/johnson/object\\?",
      "exceptionStackTrace": null,
      "matches": [
        "https://s3aamazonawsAcom/johnson/object?",
        "https://s3aamazonaws?com/johnson/object?",
        "https://s3aamazonaws:com/johnson/object?",
        "https://s3aamazonaws0com/johnson/object?",
        "https://s3aamazonaws/com/johnson/object?",
        "https://s3aamazonaws com/johnson/object?",
        "https://s3Aamazonawsacom/johnson/object?",
        "https://s3?amazonawsacom/johnson/object?",
        "https://s3:amazonawsacom/johnson/object?",
        "https://s30amazonawsacom/johnson/object?",
        "https://s3/amazonawsacom/johnson/object?",
        "https://s3 amazonawsacom/johnson/object?",
        "https://s3aamazonawsacom/johnson/object?"
      ]
    },
    {
      "regex": "([\\-+]\\d{2}):(\\d{2})$",
      "exceptionStackTrace": null,
      "matches": ["+00:000", "+00:0", "+000:00", "+0:00", "-00:00", "+00:00"]
    },
    {
      "regex": "your branch: \\d+\\.\\d+ms",
      "exceptionStackTrace": null,
      "matches": [
        "your branch: 0.00ms",
        "your branch: 0.ms",
        "your branch: 00.0ms",
        "your branch: .0ms",
        "your branch: 0.0ms"
      ]
    },
    {
      "regex": "^(?:git|tar)$",
      "exceptionStackTrace": null,
      "matches": ["tar", "git"]
    },
    {
      "regex": "^{.*\\n {4}",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^'(\\w+)' has '(\\w+)' that include '(\\w+)'$",
      "exceptionStackTrace": null,
      "matches": [
        "'evil' has 'evil' that include 'eVil'",
        "'evil' has 'evil' that include 'EVIL'",
        "'evil' has 'evil' that include 'ev_il'",
        "'evil' has 'evil' that include 'ev il'",
        "'evil' has 'evil' that include 'ev4il'",
        "'evil' has 'evil' that include 'e'",
        "'evil' has 'evil' that include ' '",
        "'evil' has 'evil' that include '6'",
        "'evil' has 'evil' that include '_'",
        "'evil' has 'evil' that include ''",
        "'evil' has 'eVil' that include 'evil'",
        "'evil' has 'EVIL' that include 'evil'",
        "'evil' has 'ev_il' that include 'evil'",
        "'evil' has 'ev il' that include 'evil'",
        "'evil' has 'ev4il' that include 'evil'",
        "'evil' has 'e' that include 'evil'",
        "'evil' has ' ' that include 'evil'",
        "'evil' has '6' that include 'evil'",
        "'evil' has '_' that include 'evil'",
        "'evil' has '' that include 'evil'",
        "'eVil' has 'evil' that include 'evil'",
        "'EVIL' has 'evil' that include 'evil'",
        "'ev_il' has 'evil' that include 'evil'",
        "'ev il' has 'evil' that include 'evil'",
        "'ev4il' has 'evil' that include 'evil'",
        "'e' has 'evil' that include 'evil'",
        "' ' has 'evil' that include 'evil'",
        "'6' has 'evil' that include 'evil'",
        "'_' has 'evil' that include 'evil'",
        "'' has 'evil' that include 'evil'",
        "'evil' has 'evil' that include 'evil'"
      ]
    },
    {
      "regex": "[\\x80-\\xff]{1,3}",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 128"
      },
      "matches": []
    },
    {
      "regex": "the admin locators page",
      "exceptionStackTrace": null,
      "matches": ["the admin locators page"]
    },
    {
      "regex": "^commit (.+)",
      "exceptionStackTrace": null,
      "matches": [
        "commit eVil",
        "commit EVIL",
        "commit ev_il",
        "commit ev il",
        "commit ev4il",
        "commit e",
        "commit  ",
        "commit 6",
        "commit _",
        "commit ",
        "commit evil"
      ]
    },
    { "regex": "^2\\d\\d\\d$", "exceptionStackTrace": null, "matches": ["2000"] },
    {
      "regex": "Score: (\\d+)",
      "exceptionStackTrace": null,
      "matches": ["Score: 00", "Score: ", "Score: 0"]
    },
    {
      "regex": "[^a-zA-Z-_.]",
      "exceptionStackTrace": null,
      "matches": ["a", "_", "A", ".", "-", " ", "0"]
    },
    {
      "regex": "\\W+(tc|telecine)\\W*",
      "exceptionStackTrace": null,
      "matches": [
        ";tc;;",
        ";tca",
        ";tc_",
        ";tcA",
        ";tc0",
        ";tc ",
        ";;tc;",
        "tc;",
        "atc;",
        "_tc;",
        "Atc;",
        "0tc;",
        " tc;",
        ";telecine",
        ";tc",
        ";telecine;",
        ";tc;"
      ]
    },
    {
      "regex": "([0-9\\.])*",
      "exceptionStackTrace": null,
      "matches": ["..", "0", "", "."]
    },
    { "regex": "&ordf;", "exceptionStackTrace": null, "matches": ["&ordf;"] },
    {
      "regex": "cannot generate a valid Hash",
      "exceptionStackTrace": null,
      "matches": ["cannot generate a valid Hash"]
    },
    {
      "regex": "^\\.([\\w-]+)\\(",
      "exceptionStackTrace": null,
      "matches": [
        "..(",
        ".-(",
        ".((",
        ".eVil(",
        ".EVIL(",
        ".ev_il(",
        ".ev il(",
        ".ev4il(",
        ".e(",
        ". (",
        ".6(",
        "._(",
        ".(",
        ".evil("
      ]
    },
    {
      "regex": "Cannot have a null result!",
      "exceptionStackTrace": null,
      "matches": ["Cannot have a null result!"]
    },
    {
      "regex": "^/session/[^/]+/element/[^/]+/attribute",
      "exceptionStackTrace": null,
      "matches": [
        "/session/evil/element///attribute",
        "/session/evil/element/eVil/attribute",
        "/session/evil/element/EVIL/attribute",
        "/session/evil/element/ev_il/attribute",
        "/session/evil/element/ev il/attribute",
        "/session/evil/element/ev4il/attribute",
        "/session/evil/element/e/attribute",
        "/session/evil/element/ /attribute",
        "/session/evil/element/6/attribute",
        "/session/evil/element/_/attribute",
        "/session/evil/element//attribute",
        "/session///element/evil/attribute",
        "/session/eVil/element/evil/attribute",
        "/session/EVIL/element/evil/attribute",
        "/session/ev_il/element/evil/attribute",
        "/session/ev il/element/evil/attribute",
        "/session/ev4il/element/evil/attribute",
        "/session/e/element/evil/attribute",
        "/session/ /element/evil/attribute",
        "/session/6/element/evil/attribute",
        "/session/_/element/evil/attribute",
        "/session//element/evil/attribute",
        "/session/evil/element/evil/attribute"
      ]
    },
    {
      "regex": "\\*\\*\\*\\*\\*\\*\\*\\*",
      "exceptionStackTrace": null,
      "matches": ["********"]
    },
    {
      "regex": "[*_+\\\\]?-?[_a-z\\\\][\\\\_a-z0-9-]*",
      "exceptionStackTrace": null,
      "matches": [
        "\\-\\\\",
        "\\-\\-",
        "\\-\\+",
        "\\-\\*",
        "\\-\\eVil",
        "\\-\\EVIL",
        "\\-\\ev_il",
        "\\-\\ev il",
        "\\-\\ev4il",
        "\\-\\e",
        "\\-\\ ",
        "\\-\\6",
        "\\-\\_",
        "\\-\\",
        "\\-aevil",
        "\\-_evil",
        "\\--\\evil",
        "\\\\evil",
        "\\\\-\\evil",
        "-\\evil",
        "_-\\evil",
        "+-\\evil",
        "*-\\evil",
        "\\",
        "\\-\\evil"
      ]
    },
    {
      "regex": "[\\w]+\\.",
      "exceptionStackTrace": null,
      "matches": [
        "eVil.",
        "EVIL.",
        "ev_il.",
        "ev il.",
        "ev4il.",
        "e.",
        " .",
        "6.",
        "_.",
        ".",
        "evil."
      ]
    },
    { "regex": "^Pattern$", "exceptionStackTrace": null, "matches": ["Pattern"] },
    {
      "regex": "\\{(\\$[a-z_][a-z0-9_$\\->'\\\"\\.\\[\\]]*?)\\}",
      "exceptionStackTrace": null,
      "matches": [
        "{$_}}",
        "{$_{}",
        "{$_]}",
        "{$_[}",
        "{$_>}",
        "{$_.}",
        "{$_-}",
        "{$_'}",
        "{$_$}",
        "{$_\"}",
        "{$_eVil}",
        "{$_EVIL}",
        "{$_ev_il}",
        "{$_ev il}",
        "{$_ev4il}",
        "{$_e}",
        "{$_ }",
        "{$_6}",
        "{$__}",
        "{$aevil}",
        "{$_}",
        "{$_evil}"
      ]
    },
    {
      "regex": "\\$?\\$\\{([A-Za-z0-9_]+)(:-(.*?))?\\}",
      "exceptionStackTrace": null,
      "matches": [
        "$${evil:-evil:-evil}",
        "$${evil}",
        "$${evil:-}}",
        "$${evil:-{}",
        "$${evil:-:}",
        "$${evil:--}",
        "$${evil:-$}",
        "$${evil:-eVil}",
        "$${evil:-EVIL}",
        "$${evil:-ev_il}",
        "$${evil:-ev il}",
        "$${evil:-ev4il}",
        "$${evil:-e}",
        "$${evil:- }",
        "$${evil:-6}",
        "$${evil:-_}",
        "$${evil:-}",
        "$${}:-evil}",
        "$${{:-evil}",
        "$${::-evil}",
        "$${-:-evil}",
        "$${$:-evil}",
        "$${eVil:-evil}",
        "$${EVIL:-evil}",
        "$${ev_il:-evil}",
        "$${ev il:-evil}",
        "$${ev4il:-evil}",
        "$${e:-evil}",
        "$${ :-evil}",
        "$${6:-evil}",
        "$${_:-evil}",
        "$${:-evil}",
        "$$${evil:-evil}",
        "${evil:-evil}",
        "${evil}",
        "$${evil:-evil}"
      ]
    },
    {
      "regex": "(^| )dz-message($| )",
      "exceptionStackTrace": null,
      "matches": [" dz-message", "dz-message ", "dz-message"]
    },
    { "regex": "($dirsep)", "exceptionStackTrace": null, "matches": ["dirsep"] },
    { "regex": "Vmdk", "exceptionStackTrace": null, "matches": ["Vmdk"] },
    {
      "regex": "^(\\d{4})-([A-Za-z]{3})-(\\d{2})\\s(\\d{2}):(\\d{2}):(\\d{2})$",
      "exceptionStackTrace": null,
      "matches": [
        "0000-aaa-00 00:00:000",
        "0000-aaa-00 00:00:0",
        "0000-aaa-00 00:000:00",
        "0000-aaa-00 00:0:00",
        "0000-aaa-00 000:00:00",
        "0000-aaa-00 0:00:00",
        "0000-aaa-000 00:00:00",
        "0000-aaa-0 00:00:00",
        "0000-aaaa-00 00:00:00",
        "0000-aa-00 00:00:00",
        "0000-Aaa-00 00:00:00",
        "00000-aaa-00 00:00:00",
        "000-aaa-00 00:00:00",
        "0000-aaa-00 00:00:00"
      ]
    },
    {
      "regex": "(\\[quote([^\\]\\<\\>])*\\](.*)\\[/quote([^\\]\\<\\>])*\\])",
      "exceptionStackTrace": null,
      "matches": [
        "[quotea]evil[/quoteaa]",
        "[quotea]evil[/quote]",
        "[quotea]evil[/quote]]",
        "[quotea]evil[/quote[]",
        "[quotea]evil[/quoteA]",
        "[quotea]evil[/quote>]",
        "[quotea]evil[/quote<]",
        "[quotea]evil[/quote0]",
        "[quotea]evil[/quote/]",
        "[quotea]evil[/quote ]",
        "[quotea]][/quotea]",
        "[quotea][[/quotea]",
        "[quotea]>[/quotea]",
        "[quotea]<[/quotea]",
        "[quotea]/[/quotea]",
        "[quotea]eVil[/quotea]",
        "[quotea]EVIL[/quotea]",
        "[quotea]ev_il[/quotea]",
        "[quotea]ev il[/quotea]",
        "[quotea]ev4il[/quotea]",
        "[quotea]e[/quotea]",
        "[quotea] [/quotea]",
        "[quotea]6[/quotea]",
        "[quotea]_[/quotea]",
        "[quotea][/quotea]",
        "[quoteaa]evil[/quotea]",
        "[quote]evil[/quotea]",
        "[quote]]evil[/quotea]",
        "[quote[]evil[/quotea]",
        "[quoteA]evil[/quotea]",
        "[quote>]evil[/quotea]",
        "[quote<]evil[/quotea]",
        "[quote0]evil[/quotea]",
        "[quote/]evil[/quotea]",
        "[quote ]evil[/quotea]",
        "[quote][/quote]",
        "[quotea]evil[/quotea]"
      ]
    },
    {
      "regex": "^:(std|standard)  $",
      "exceptionStackTrace": null,
      "matches": [":standard  ", ":std  "]
    },
    {
      "regex": "<(\\w)><\\/\\1>",
      "exceptionStackTrace": null,
      "matches": ["<_></a>", "<A></a>", "<0></a>", "<a></a>"]
    },
    { "regex": ";stop;", "exceptionStackTrace": null, "matches": [";stop;"] },
    {
      "regex": "^AR_SIGNAL_(\\w+)",
      "exceptionStackTrace": null,
      "matches": [
        "AR_SIGNAL_eVil",
        "AR_SIGNAL_EVIL",
        "AR_SIGNAL_ev_il",
        "AR_SIGNAL_ev il",
        "AR_SIGNAL_ev4il",
        "AR_SIGNAL_e",
        "AR_SIGNAL_ ",
        "AR_SIGNAL_6",
        "AR_SIGNAL__",
        "AR_SIGNAL_",
        "AR_SIGNAL_evil"
      ]
    },
    {
      "regex": "following|this",
      "exceptionStackTrace": null,
      "matches": ["this", "following"]
    },
    {
      "regex": "tmp|specs",
      "exceptionStackTrace": null,
      "matches": ["specs", "tmp"]
    },
    {
      "regex": "([^\\$\\w\\d])wWWWWW([^\\w\\d])",
      "exceptionStackTrace": null,
      "matches": [
        " wWWWWWa",
        " wWWWWW_",
        " wWWWWWA",
        " wWWWWW0",
        " wWWWWW$",
        "awWWWWW ",
        "_wWWWWW ",
        "AwWWWWW ",
        "0wWWWWW ",
        "$wWWWWW ",
        " wWWWWW "
      ]
    },
    {
      "regex": "NAME SERVER INFORMATION:\\n((.+\\n)+)\\s+\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "\n        Shorl:\\s+\n        <a\\s+href=\"http://shorl\\.com/\\w+\"\\s+rel=\"nofollow\">\\s*\n        (http://shorl\\.com/\\w+)\n        </a>.*?<br>\\s*Password:\\s+(\\w+)\n    ",
      "exceptionStackTrace": null,
      "matches": [
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br> Password: eVil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br> Password: EVIL\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br> Password: ev_il\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br> Password: ev il\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br> Password: ev4il\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br> Password: e\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br> Password:  \n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br> Password: 6\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br> Password: _\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br> Password: \n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br> Password:  evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br> Password:evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br>  Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br>Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>><br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>=<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a><<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>:<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>/<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>.<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>\"<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>eVil<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>EVIL<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>ev_il<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>ev il<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>ev4il<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>e<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a> <br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>6<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>_<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a><br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/eVil\n        </a>evil<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/EVIL\n        </a>evil<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/ev_il\n        </a>evil<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/ev il\n        </a>evil<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/ev4il\n        </a>evil<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/e\n        </a>evil<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/ \n        </a>evil<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/6\n        </a>evil<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/_\n        </a>evil<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/\n        </a>evil<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\">  \n        http://shorl.com/evil\n        </a>evil<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\">\n        http://shorl.com/evil\n        </a>evil<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\"  rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\"rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/eVil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/EVIL\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/ev_il\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/ev il\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/ev4il\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/e\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/ \" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/6\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/_\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br> Password: evil\n    ",
        "\n        Shorl: \n        <a  href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br> Password: evil\n    ",
        "\n        Shorl: \n        <ahref=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br> Password: evil\n    ",
        "\n        Shorl:  \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br> Password: evil\n    ",
        "\n        Shorl:\n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br> Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\">\n        http://shorl.com/evil\n        </a><br>Password: evil\n    ",
        "\n        Shorl: \n        <a href=\"http://shorl.com/evil\" rel=\"nofollow\"> \n        http://shorl.com/evil\n        </a>evil<br> Password: evil\n    "
      ]
    },
    {
      "regex": "^\\s*(?:url)\\s*\\(\\s*(.*)\\s*\\)",
      "exceptionStackTrace": null,
      "matches": [
        " url ( evil  )",
        " url ( evil)",
        " url ( ) )",
        " url ( ( )",
        " url ( eVil )",
        " url ( EVIL )",
        " url ( ev_il )",
        " url ( ev il )",
        " url ( ev4il )",
        " url ( e )",
        " url (   )",
        " url ( 6 )",
        " url ( _ )",
        " url (  )",
        " url (  evil )",
        " url (evil )",
        " url  ( evil )",
        " url( evil )",
        "  url ( evil )",
        "url ( evil )",
        "url()",
        " url ( evil )"
      ]
    },
    {
      "regex": "((https?)|ftp)",
      "exceptionStackTrace": null,
      "matches": ["httpss", "http", "ftp", "https"]
    },
    {
      "regex": "entry 'references' expects a Hash value, got Array",
      "exceptionStackTrace": null,
      "matches": ["entry 'references' expects a Hash value, got Array"]
    },
    {
      "regex": "\\S+\\.rb",
      "exceptionStackTrace": null,
      "matches": [
        "..rb",
        "eVil.rb",
        "EVIL.rb",
        "ev_il.rb",
        "ev il.rb",
        "ev4il.rb",
        "e.rb",
        " .rb",
        "6.rb",
        "_.rb",
        ".rb",
        "evil.rb"
      ]
    },
    {
      "regex": "restarts at (.*)",
      "exceptionStackTrace": null,
      "matches": [
        "restarts at eVil",
        "restarts at EVIL",
        "restarts at ev_il",
        "restarts at ev il",
        "restarts at ev4il",
        "restarts at e",
        "restarts at  ",
        "restarts at 6",
        "restarts at _",
        "restarts at ",
        "restarts at evil"
      ]
    },
    {
      "regex": "\\:splat is a reserved magic parameter name",
      "exceptionStackTrace": null,
      "matches": [":splat is a reserved magic parameter name"]
    },
    {
      "regex": "\\(3\\.14, -5\\.0\\)",
      "exceptionStackTrace": null,
      "matches": ["(3.14, -5.0)"]
    },
    { "regex": "^24h", "exceptionStackTrace": null, "matches": ["24h"] },
    {
      "regex": "^a photos directory should be created$",
      "exceptionStackTrace": null,
      "matches": ["a photos directory should be created"]
    },
    {
      "regex": "syntaxhighlighter-.*",
      "exceptionStackTrace": null,
      "matches": [
        "syntaxhighlighter--",
        "syntaxhighlighter-eVil",
        "syntaxhighlighter-EVIL",
        "syntaxhighlighter-ev_il",
        "syntaxhighlighter-ev il",
        "syntaxhighlighter-ev4il",
        "syntaxhighlighter-e",
        "syntaxhighlighter- ",
        "syntaxhighlighter-6",
        "syntaxhighlighter-_",
        "syntaxhighlighter-",
        "syntaxhighlighter-evil"
      ]
    },
    {
      "regex": "(.*)\\(([0-9]*)\\%",
      "exceptionStackTrace": null,
      "matches": [
        "evil(00%",
        "evil(%",
        "((0%",
        "%(0%",
        "eVil(0%",
        "EVIL(0%",
        "ev_il(0%",
        "ev il(0%",
        "ev4il(0%",
        "e(0%",
        " (0%",
        "6(0%",
        "_(0%",
        "(0%",
        "(%",
        "evil(0%"
      ]
    },
    {
      "regex": "\\|[^\\|]*",
      "exceptionStackTrace": null,
      "matches": [
        "||",
        "|eVil",
        "|EVIL",
        "|ev_il",
        "|ev il",
        "|ev4il",
        "|e",
        "| ",
        "|6",
        "|_",
        "|",
        "|evil"
      ]
    },
    {
      "regex": "(#Electron-builder output|\\/dist_electron)",
      "exceptionStackTrace": null,
      "matches": ["/dist_electron", "#Electron-builder output"]
    },
    {
      "regex": "((?:\\-[a-z][= ]\\S+\\s*)+)?(?:@?(\\w+))?",
      "exceptionStackTrace": null,
      "matches": [
        "-a evil @evil@evil",
        "-a evil ",
        "-a evil @eVil",
        "-a evil @EVIL",
        "-a evil @ev_il",
        "-a evil @ev il",
        "-a evil @ev4il",
        "-a evil @e",
        "-a evil @ ",
        "-a evil @6",
        "-a evil @_",
        "-a evil @",
        "-a evil @@evil",
        "-a evil evil",
        "-a evil -a evil @evil",
        "@evil",
        "-a evil  @evil",
        "-a evil@evil",
        "-a @ @evil",
        "-a = @evil",
        "-a - @evil",
        "-a eVil @evil",
        "-a EVIL @evil",
        "-a ev_il @evil",
        "-a ev il @evil",
        "-a ev4il @evil",
        "-a e @evil",
        "-a   @evil",
        "-a 6 @evil",
        "-a _ @evil",
        "-a  @evil",
        "-a=evil @evil",
        "",
        "-a evil @evil"
      ]
    },
    {
      "regex": "^ANON COPY$",
      "exceptionStackTrace": null,
      "matches": ["ANON COPY"]
    },
    {
      "regex": "^get_(.+)_by_(.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "get_evil_by_eVil",
        "get_evil_by_EVIL",
        "get_evil_by_ev_il",
        "get_evil_by_ev il",
        "get_evil_by_ev4il",
        "get_evil_by_e",
        "get_evil_by_ ",
        "get_evil_by_6",
        "get_evil_by__",
        "get_evil_by_",
        "get_eVil_by_evil",
        "get_EVIL_by_evil",
        "get_ev_il_by_evil",
        "get_ev il_by_evil",
        "get_ev4il_by_evil",
        "get_e_by_evil",
        "get_ _by_evil",
        "get_6_by_evil",
        "get___by_evil",
        "get__by_evil",
        "get_evil_by_evil"
      ]
    },
    {
      "regex": "define\\([\"']_PS_VERSION_[\"'], [\"'](?<version>[0-9.]+)[\"']\\)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<v"
      },
      "matches": []
    },
    {
      "regex": "<(?>(?!(?:",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?>"
      },
      "matches": []
    },
    {
      "regex": "img\\/image3\\.[a-z0-9]{8}\\.jpg",
      "exceptionStackTrace": null,
      "matches": [
        "img/image3.000000000.jpg",
        "img/image3.0000000.jpg",
        "img/image3.a0000000.jpg",
        "img/image3.00000000.jpg"
      ]
    },
    {
      "regex": "^\\d{4}(?:-|/)\\d{2}(?:-|/)\\d{2} \\d{2}(?::|-)\\d{2}(?::|-)\\d{2}$",
      "exceptionStackTrace": null,
      "matches": [
        "0000-00-00 00:00:000",
        "0000-00-00 00:00:0",
        "0000-00-00 00:000:00",
        "0000-00-00 00:0:00",
        "0000-00-00 000:00:00",
        "0000-00-00 0:00:00",
        "0000-00-000 00:00:00",
        "0000-00-0 00:00:00",
        "0000-000-00 00:00:00",
        "0000-0-00 00:00:00",
        "00000-00-00 00:00:00",
        "000-00-00 00:00:00",
        "0000/00-00 00:00:00",
        "0000-00/00 00:00:00",
        "0000-00-00 00-00:00",
        "0000-00-00 00:00-00",
        "0000-00-00 00:00:00"
      ]
    },
    {
      "regex": "invitable requires options be set",
      "exceptionStackTrace": null,
      "matches": ["invitable requires options be set"]
    },
    {
      "regex": "\\.(\\d{3})(\\d)",
      "exceptionStackTrace": null,
      "matches": [".00000", ".000", ".0000"]
    },
    {
      "regex": "\\s*=(?:.(?!;))*$",
      "exceptionStackTrace": null,
      "matches": [
        " =aa",
        " =",
        " =A",
        " ==",
        " =;",
        " =0",
        " = ",
        "  =a",
        "=a",
        "=",
        " =a"
      ]
    },
    { "regex": "aning$", "exceptionStackTrace": null, "matches": ["aning"] },
    {
      "regex": "^x\\s+",
      "exceptionStackTrace": null,
      "matches": ["x  ", "x", "x "]
    },
    {
      "regex": "Pr\u00f6(?=[^bps])",
      "exceptionStackTrace": null,
      "matches": ["Pr\u00f6"]
    },
    {
      "regex": "\u00c3\u0093",
      "exceptionStackTrace": null,
      "matches": ["\u00c3\u0093"]
    },
    {
      "regex": "^Password:\\s?",
      "exceptionStackTrace": null,
      "matches": ["Password:  ", "Password:", "Password: "]
    },
    {
      "regex": "# [\\w ]+$",
      "exceptionStackTrace": null,
      "matches": [
        "# eVil",
        "# EVIL",
        "# ev_il",
        "# ev il",
        "# ev4il",
        "# e",
        "#  ",
        "# 6",
        "# _",
        "# ",
        "# evil"
      ]
    },
    {
      "regex": "^[^\\s\"']+(\\s+|$)",
      "exceptionStackTrace": null,
      "matches": [
        "evil  ",
        "' ",
        "\" ",
        "eVil ",
        "EVIL ",
        "ev_il ",
        "ev il ",
        "ev4il ",
        "e ",
        "  ",
        "6 ",
        "_ ",
        " ",
        "evil",
        "evil "
      ]
    },
    {
      "regex": "^([^|]+)\\|([^\\/]+)\\/([^>]*)>",
      "exceptionStackTrace": null,
      "matches": [
        "evil|evil/|>",
        "evil|evil/>>",
        "evil|evil//>",
        "evil|evil/eVil>",
        "evil|evil/EVIL>",
        "evil|evil/ev_il>",
        "evil|evil/ev il>",
        "evil|evil/ev4il>",
        "evil|evil/e>",
        "evil|evil/ >",
        "evil|evil/6>",
        "evil|evil/_>",
        "evil||/evil>",
        "evil|>/evil>",
        "evil|//evil>",
        "evil|eVil/evil>",
        "evil|EVIL/evil>",
        "evil|ev_il/evil>",
        "evil|ev il/evil>",
        "evil|ev4il/evil>",
        "evil|e/evil>",
        "evil| /evil>",
        "evil|6/evil>",
        "evil|_/evil>",
        "evil|/evil>",
        "||evil/evil>",
        ">|evil/evil>",
        "/|evil/evil>",
        "eVil|evil/evil>",
        "EVIL|evil/evil>",
        "ev_il|evil/evil>",
        "ev il|evil/evil>",
        "ev4il|evil/evil>",
        "e|evil/evil>",
        " |evil/evil>",
        "6|evil/evil>",
        "_|evil/evil>",
        "|evil/evil>",
        "evil|evil/>",
        "evil|evil/evil>"
      ]
    },
    {
      "regex": "https?://(alpha\\.app\\.net)/(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "https://alpha.app.net/:",
        "https://alpha.app.net//",
        "https://alpha.app.net/.",
        "https://alpha.app.net/eVil",
        "https://alpha.app.net/EVIL",
        "https://alpha.app.net/ev_il",
        "https://alpha.app.net/ev il",
        "https://alpha.app.net/ev4il",
        "https://alpha.app.net/e",
        "https://alpha.app.net/ ",
        "https://alpha.app.net/6",
        "https://alpha.app.net/_",
        "https://alpha.app.net/",
        "httpss://alpha.app.net/evil",
        "http://alpha.app.net/evil",
        "http://alpha.app.net/",
        "https://alpha.app.net/evil"
      ]
    },
    {
      "regex": "^(control|hidden|restricted|hasdiskimage)$",
      "exceptionStackTrace": null,
      "matches": ["hasdiskimage", "restricted", "hidden", "control"]
    },
    {
      "regex": "AppleWebKit\\/([0-9]+.[0-9]+)",
      "exceptionStackTrace": null,
      "matches": [
        "AppleWebKit/0a00",
        "AppleWebKit/0a",
        "AppleWebKit/0A0",
        "AppleWebKit/000",
        "AppleWebKit/0/0",
        "AppleWebKit/0 0",
        "AppleWebKit/00a0",
        "AppleWebKit/a0",
        "AppleWebKit/0a0"
      ]
    },
    {
      "regex": "user not found",
      "exceptionStackTrace": null,
      "matches": ["user not found"]
    },
    {
      "regex": "lastToEither: Last or Last returning function required for second argument",
      "exceptionStackTrace": null,
      "matches": [
        "lastToEither: Last or Last returning function required for second argument"
      ]
    },
    {
      "regex": "\\\\\\\\\\\\\"",
      "exceptionStackTrace": null,
      "matches": ["\\\\\\\""]
    },
    {
      "regex": "(\\S+(?:\\s*[+]\\S+)?)",
      "exceptionStackTrace": null,
      "matches": [
        "evil +evil +evil",
        "evil ++",
        "evil +eVil",
        "evil +EVIL",
        "evil +ev_il",
        "evil +ev il",
        "evil +ev4il",
        "evil +e",
        "evil + ",
        "evil +6",
        "evil +_",
        "evil +",
        "evil  +evil",
        "evil+evil",
        "+ +evil",
        "eVil +evil",
        "EVIL +evil",
        "ev_il +evil",
        "ev il +evil",
        "ev4il +evil",
        "e +evil",
        "  +evil",
        "6 +evil",
        "_ +evil",
        " +evil",
        "evil",
        "evil +evil"
      ]
    },
    {
      "regex": "[\\]\\}],?",
      "exceptionStackTrace": null,
      "matches": ["},,", "],", "}", "},"]
    },
    {
      "regex": "\"width\":\"(.*?)\",\"height\":\"(.*?)\",\"size\":\"(.*?)\",\"commentingEnabled\":\"(.*?)\",\"allowNameTags\":\"(.*?)\",\"media\":\\{\"content\":\\[\\{\"url\":\"https:\\/\\/(.*?)\",",
      "exceptionStackTrace": null,
      "matches": [
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://{\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://[\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://:\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https:///\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://,\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://\"\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://eVil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://EVIL\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://ev_il\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://ev il\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://ev4il\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://e\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https:// \",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://6\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://_\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"{\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"[\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\":\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"/\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\",\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"\"\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"eVil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"EVIL\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"ev_il\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"ev il\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"ev4il\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"e\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\" \",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"6\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"_\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"{\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"[\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\":\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"/\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\",\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"\"\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"eVil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"EVIL\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"ev_il\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"ev il\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"ev4il\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"e\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\" \",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"6\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"_\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"{\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"[\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\":\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"/\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\",\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"\"\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"eVil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"EVIL\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"ev_il\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"ev il\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"ev4il\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"e\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\" \",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"6\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"_\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"{\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"[\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\":\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"/\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\",\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"\"\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"eVil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"EVIL\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"ev_il\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"ev il\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"ev4il\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"e\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\" \",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"6\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"_\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"evil\",\"height\":\"\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"{\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"[\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\":\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"/\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\",\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"\"\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"eVil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"EVIL\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"ev_il\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"ev il\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"ev4il\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"e\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\" \",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"6\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"_\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\",",
        "\"width\":\"\",\"height\":\"\",\"size\":\"\",\"commentingEnabled\":\"\",\"allowNameTags\":\"\",\"media\":{\"content\":[{\"url\":\"https://\",",
        "\"width\":\"evil\",\"height\":\"evil\",\"size\":\"evil\",\"commentingEnabled\":\"evil\",\"allowNameTags\":\"evil\",\"media\":{\"content\":[{\"url\":\"https://evil\","
      ]
    },
    {
      "regex": "^@(?<name>[^:]+):(?<path>.+)$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<n"
      },
      "matches": []
    },
    {
      "regex": "(^\\s+community)\\s.*$",
      "exceptionStackTrace": null,
      "matches": [
        " community eVil",
        " community EVIL",
        " community ev_il",
        " community ev il",
        " community ev4il",
        " community e",
        " community  ",
        " community 6",
        " community _",
        "  community evil",
        "community evil",
        " community ",
        " community evil"
      ]
    },
    {
      "regex": "([.!?])\\1+",
      "exceptionStackTrace": null,
      "matches": ["???", "?", ".?", "!?", "??"]
    },
    { "regex": "%20", "exceptionStackTrace": null, "matches": ["%20"] },
    {
      "regex": "(http://|www\\d*\\.)\\S*",
      "exceptionStackTrace": null,
      "matches": [
        "www00.evil",
        "www.evil",
        "http://:",
        "http:///",
        "http://.",
        "http://eVil",
        "http://EVIL",
        "http://ev_il",
        "http://ev il",
        "http://ev4il",
        "http://e",
        "http:// ",
        "http://6",
        "http://_",
        "www.",
        "http://",
        "www0.evil",
        "http://evil"
      ]
    },
    {
      "regex": "^the stdout does not contain:$",
      "exceptionStackTrace": null,
      "matches": ["the stdout does not contain:"]
    },
    {
      "regex": "name=\"user\\[comment\\]\\[title\\]\\[\\]\" value=\"1\"",
      "exceptionStackTrace": null,
      "matches": ["name=\"user[comment][title][]\" value=\"1\""]
    },
    {
      "regex": "^[0-9]{4}$",
      "exceptionStackTrace": null,
      "matches": ["00000", "000", "0000"]
    },
    {
      "regex": "^(?:From|To|Cc)$",
      "exceptionStackTrace": null,
      "matches": ["Cc", "To", "From"]
    },
    {
      "regex": "\\S\\n(\\n+)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^(.*)(@charset \\\"[^\\\"]*\\\";)",
      "exceptionStackTrace": null,
      "matches": [
        "evil@charset \"@\";",
        "evil@charset \";\";",
        "evil@charset \"\"\";",
        "evil@charset \"eVil\";",
        "evil@charset \"EVIL\";",
        "evil@charset \"ev_il\";",
        "evil@charset \"ev il\";",
        "evil@charset \"ev4il\";",
        "evil@charset \"e\";",
        "evil@charset \" \";",
        "evil@charset \"6\";",
        "evil@charset \"_\";",
        "evil@charset \"\";",
        "@@charset \"evil\";",
        ";@charset \"evil\";",
        "\"@charset \"evil\";",
        "eVil@charset \"evil\";",
        "EVIL@charset \"evil\";",
        "ev_il@charset \"evil\";",
        "ev il@charset \"evil\";",
        "ev4il@charset \"evil\";",
        "e@charset \"evil\";",
        " @charset \"evil\";",
        "6@charset \"evil\";",
        "_@charset \"evil\";",
        "@charset \"evil\";",
        "@charset \"\";",
        "evil@charset \"evil\";"
      ]
    },
    {
      "regex": "(?i)maxinum\\(.*\\)",
      "exceptionStackTrace": null,
      "matches": [
        "maxinum())",
        "maxinum(()",
        "maxinum(eVil)",
        "maxinum(EVIL)",
        "maxinum(ev_il)",
        "maxinum(ev il)",
        "maxinum(ev4il)",
        "maxinum(e)",
        "maxinum( )",
        "maxinum(6)",
        "maxinum(_)",
        "maxinum()",
        "maxinum(evil)"
      ]
    },
    {
      "regex": "(\\{\\$)(@IDENTFST@IDENTRST*)(\\})",
      "exceptionStackTrace": null,
      "matches": [
        "{$@IDENTFST@IDENTRSTT}",
        "{$@IDENTFST@IDENTRS}",
        "{$@IDENTFST@IDENTRST}"
      ]
    },
    {
      "regex": "^\\#LWP-Cookies-(\\d+\\.\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "#LWP-Cookies-0.00",
        "#LWP-Cookies-0.",
        "#LWP-Cookies-00.0",
        "#LWP-Cookies-.0",
        "#LWP-Cookies-0.0"
      ]
    },
    {
      "regex": "-.*-|\\r|\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": "(CHAR|DATE|TIME)",
      "exceptionStackTrace": null,
      "matches": ["TIME", "DATE", "CHAR"]
    },
    {
      "regex": "Deleting all authorizations associated with your account.*done",
      "exceptionStackTrace": null,
      "matches": [
        "Deleting all authorizations associated with your accounteVildone",
        "Deleting all authorizations associated with your accountEVILdone",
        "Deleting all authorizations associated with your accountev_ildone",
        "Deleting all authorizations associated with your accountev ildone",
        "Deleting all authorizations associated with your accountev4ildone",
        "Deleting all authorizations associated with your accountedone",
        "Deleting all authorizations associated with your account done",
        "Deleting all authorizations associated with your account6done",
        "Deleting all authorizations associated with your account_done",
        "Deleting all authorizations associated with your accountdone",
        "Deleting all authorizations associated with your accountevildone"
      ]
    },
    {
      "regex": "^gb?$",
      "exceptionStackTrace": null,
      "matches": ["gbb", "g", "gb"]
    },
    {
      "regex": "^text (tagName ){9}text (tagName ){2}(attribute ){2}(attributeValue ){3}(text ){2}(endTag ){3}text (endTag ){10}text$",
      "exceptionStackTrace": null,
      "matches": [
        "text tagName tagName tagName tagName tagName tagName tagName tagName tagName text tagName tagName attribute attribute attributeValue attributeValue attributeValue text text endTag endTag endTag text endTag endTag endTag endTag endTag endTag endTag endTag endTag endTag endTag text",
        "text tagName tagName tagName tagName tagName tagName tagName tagName tagName text tagName tagName attribute attribute attributeValue attributeValue attributeValue text text endTag endTag endTag text endTag endTag endTag endTag endTag endTag endTag endTag endTag text",
        "text tagName tagName tagName tagName tagName tagName tagName tagName tagName text tagName tagName attribute attribute attributeValue attributeValue attributeValue text text endTag endTag endTag endTag text endTag endTag endTag endTag endTag endTag endTag endTag endTag endTag text",
        "text tagName tagName tagName tagName tagName tagName tagName tagName tagName text tagName tagName attribute attribute attributeValue attributeValue attributeValue text text endTag endTag text endTag endTag endTag endTag endTag endTag endTag endTag endTag endTag text",
        "text tagName tagName tagName tagName tagName tagName tagName tagName tagName text tagName tagName attribute attribute attributeValue attributeValue attributeValue text text text endTag endTag endTag text endTag endTag endTag endTag endTag endTag endTag endTag endTag endTag text",
        "text tagName tagName tagName tagName tagName tagName tagName tagName tagName text tagName tagName attribute attribute attributeValue attributeValue attributeValue text endTag endTag endTag text endTag endTag endTag endTag endTag endTag endTag endTag endTag endTag text",
        "text tagName tagName tagName tagName tagName tagName tagName tagName tagName text tagName tagName attribute attribute attributeValue attributeValue attributeValue attributeValue text text endTag endTag endTag text endTag endTag endTag endTag endTag endTag endTag endTag endTag endTag text",
        "text tagName tagName tagName tagName tagName tagName tagName tagName tagName text tagName tagName attribute attribute attributeValue attributeValue text text endTag endTag endTag text endTag endTag endTag endTag endTag endTag endTag endTag endTag endTag text",
        "text tagName tagName tagName tagName tagName tagName tagName tagName tagName text tagName tagName attribute attribute attribute attributeValue attributeValue attributeValue text text endTag endTag endTag text endTag endTag endTag endTag endTag endTag endTag endTag endTag endTag text",
        "text tagName tagName tagName tagName tagName tagName tagName tagName tagName text tagName tagName attribute attributeValue attributeValue attributeValue text text endTag endTag endTag text endTag endTag endTag endTag endTag endTag endTag endTag endTag endTag text",
        "text tagName tagName tagName tagName tagName tagName tagName tagName tagName text tagName tagName tagName attribute attribute attributeValue attributeValue attributeValue text text endTag endTag endTag text endTag endTag endTag endTag endTag endTag endTag endTag endTag endTag text",
        "text tagName tagName tagName tagName tagName tagName tagName tagName tagName text tagName attribute attribute attributeValue attributeValue attributeValue text text endTag endTag endTag text endTag endTag endTag endTag endTag endTag endTag endTag endTag endTag text",
        "text tagName tagName tagName tagName tagName tagName tagName tagName tagName tagName text tagName tagName attribute attribute attributeValue attributeValue attributeValue text text endTag endTag endTag text endTag endTag endTag endTag endTag endTag endTag endTag endTag endTag text",
        "text tagName tagName tagName tagName tagName tagName tagName tagName text tagName tagName attribute attribute attributeValue attributeValue attributeValue text text endTag endTag endTag text endTag endTag endTag endTag endTag endTag endTag endTag endTag endTag text",
        "text tagName tagName tagName tagName tagName tagName tagName tagName tagName text tagName tagName attribute attribute attributeValue attributeValue attributeValue text text endTag endTag endTag text endTag endTag endTag endTag endTag endTag endTag endTag endTag endTag text"
      ]
    },
    {
      "regex": "\\.(mov|avi|mp4)",
      "exceptionStackTrace": null,
      "matches": [".mp4", ".avi", ".mov"]
    },
    { "regex": "Spain", "exceptionStackTrace": null, "matches": ["Spain"] },
    {
      "regex": "^(\\s*\"(?:[^\"\\\\]|\\\\.)*)\"(?=\\n)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": ".+?\\s(.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil eVil",
        "evil EVIL",
        "evil ev_il",
        "evil ev il",
        "evil ev4il",
        "evil e",
        "evil  ",
        "evil 6",
        "evil _",
        "evil ",
        "eVil evil",
        "EVIL evil",
        "ev_il evil",
        "ev il evil",
        "ev4il evil",
        "e evil",
        "  evil",
        "6 evil",
        "_ evil",
        " evil",
        "evil evil"
      ]
    },
    {
      "regex": "^\\w{3}\\s{1,2}(\\d{1,2}) (\\d{2}):(\\d{2})",
      "exceptionStackTrace": null,
      "matches": [
        "aaa 0 00:000",
        "aaa 0 00:0",
        "aaa 0 000:00",
        "aaa 0 0:00",
        "aaa 000 00:00",
        "aaa 00 00:00",
        "aaa  00:00",
        "aaa   0 00:00",
        "aaa  0 00:00",
        "aaa0 00:00",
        "aaaa 0 00:00",
        "aa 0 00:00",
        "_aa 0 00:00",
        "Aaa 0 00:00",
        "0aa 0 00:00",
        "aaa 0 00:00"
      ]
    },
    {
      "regex": "<style[\\S\\s]*?(<!--ABE[\\S\\s]*?--->)[\\S\\s]*?(<!--\\/ABE--->)[\\S\\s]*?<\\/style>",
      "exceptionStackTrace": null,
      "matches": [
        "<styleevil<!--ABEevil--->evil<!--/ABE--->></style>",
        "<styleevil<!--ABEevil--->evil<!--/ABE---><</style>",
        "<styleevil<!--ABEevil--->evil<!--/ABE--->/</style>",
        "<styleevil<!--ABEevil--->evil<!--/ABE--->-</style>",
        "<styleevil<!--ABEevil--->evil<!--/ABE--->!</style>",
        "<styleevil<!--ABEevil--->evil<!--/ABE--->eVil</style>",
        "<styleevil<!--ABEevil--->evil<!--/ABE--->EVIL</style>",
        "<styleevil<!--ABEevil--->evil<!--/ABE--->ev_il</style>",
        "<styleevil<!--ABEevil--->evil<!--/ABE--->ev il</style>",
        "<styleevil<!--ABEevil--->evil<!--/ABE--->ev4il</style>",
        "<styleevil<!--ABEevil--->evil<!--/ABE--->e</style>",
        "<styleevil<!--ABEevil--->evil<!--/ABE---> </style>",
        "<styleevil<!--ABEevil--->evil<!--/ABE--->6</style>",
        "<styleevil<!--ABEevil--->evil<!--/ABE--->_</style>",
        "<styleevil<!--ABEevil--->evil<!--/ABE---></style>",
        "<styleevil<!--ABEevil--->><!--/ABE--->evil</style>",
        "<styleevil<!--ABEevil---><<!--/ABE--->evil</style>",
        "<styleevil<!--ABEevil--->/<!--/ABE--->evil</style>",
        "<styleevil<!--ABEevil--->-<!--/ABE--->evil</style>",
        "<styleevil<!--ABEevil--->!<!--/ABE--->evil</style>",
        "<styleevil<!--ABEevil--->eVil<!--/ABE--->evil</style>",
        "<styleevil<!--ABEevil--->EVIL<!--/ABE--->evil</style>",
        "<styleevil<!--ABEevil--->ev_il<!--/ABE--->evil</style>",
        "<styleevil<!--ABEevil--->ev il<!--/ABE--->evil</style>",
        "<styleevil<!--ABEevil--->ev4il<!--/ABE--->evil</style>",
        "<styleevil<!--ABEevil--->e<!--/ABE--->evil</style>",
        "<styleevil<!--ABEevil---> <!--/ABE--->evil</style>",
        "<styleevil<!--ABEevil--->6<!--/ABE--->evil</style>",
        "<styleevil<!--ABEevil--->_<!--/ABE--->evil</style>",
        "<styleevil<!--ABEevil---><!--/ABE--->evil</style>",
        "<styleevil<!--ABE>--->evil<!--/ABE--->evil</style>",
        "<styleevil<!--ABE<--->evil<!--/ABE--->evil</style>",
        "<styleevil<!--ABE/--->evil<!--/ABE--->evil</style>",
        "<styleevil<!--ABE---->evil<!--/ABE--->evil</style>",
        "<styleevil<!--ABE!--->evil<!--/ABE--->evil</style>",
        "<styleevil<!--ABEeVil--->evil<!--/ABE--->evil</style>",
        "<styleevil<!--ABEEVIL--->evil<!--/ABE--->evil</style>",
        "<styleevil<!--ABEev_il--->evil<!--/ABE--->evil</style>",
        "<styleevil<!--ABEev il--->evil<!--/ABE--->evil</style>",
        "<styleevil<!--ABEev4il--->evil<!--/ABE--->evil</style>",
        "<styleevil<!--ABEe--->evil<!--/ABE--->evil</style>",
        "<styleevil<!--ABE --->evil<!--/ABE--->evil</style>",
        "<styleevil<!--ABE6--->evil<!--/ABE--->evil</style>",
        "<styleevil<!--ABE_--->evil<!--/ABE--->evil</style>",
        "<styleevil<!--ABE--->evil<!--/ABE--->evil</style>",
        "<style><!--ABEevil--->evil<!--/ABE--->evil</style>",
        "<style<<!--ABEevil--->evil<!--/ABE--->evil</style>",
        "<style/<!--ABEevil--->evil<!--/ABE--->evil</style>",
        "<style-<!--ABEevil--->evil<!--/ABE--->evil</style>",
        "<style!<!--ABEevil--->evil<!--/ABE--->evil</style>",
        "<styleeVil<!--ABEevil--->evil<!--/ABE--->evil</style>",
        "<styleEVIL<!--ABEevil--->evil<!--/ABE--->evil</style>",
        "<styleev_il<!--ABEevil--->evil<!--/ABE--->evil</style>",
        "<styleev il<!--ABEevil--->evil<!--/ABE--->evil</style>",
        "<styleev4il<!--ABEevil--->evil<!--/ABE--->evil</style>",
        "<stylee<!--ABEevil--->evil<!--/ABE--->evil</style>",
        "<style <!--ABEevil--->evil<!--/ABE--->evil</style>",
        "<style6<!--ABEevil--->evil<!--/ABE--->evil</style>",
        "<style_<!--ABEevil--->evil<!--/ABE--->evil</style>",
        "<style<!--ABEevil--->evil<!--/ABE--->evil</style>",
        "<style<!--ABE---><!--/ABE---></style>",
        "<styleevil<!--ABEevil--->evil<!--/ABE--->evil</style>"
      ]
    },
    {
      "regex": "^35(27|28|29|[3-8]\\d)\\d{12}$",
      "exceptionStackTrace": null,
      "matches": [
        "3500000000000000",
        "35270000000000000",
        "352700000000000",
        "3530000000000000",
        "3529000000000000",
        "3528000000000000",
        "3527000000000000"
      ]
    },
    {
      "regex": "(warning: .*)",
      "exceptionStackTrace": null,
      "matches": [
        "warning: :",
        "warning: eVil",
        "warning: EVIL",
        "warning: ev_il",
        "warning: ev il",
        "warning: ev4il",
        "warning: e",
        "warning:  ",
        "warning: 6",
        "warning: _",
        "warning: ",
        "warning: evil"
      ]
    },
    {
      "regex": "^.*?\u00a1\u00a6<\\/font>(?:&nbsp;| )",
      "exceptionStackTrace": null,
      "matches": [
        ">\u00a1\u00a6</font>&nbsp;",
        "<\u00a1\u00a6</font>&nbsp;",
        ";\u00a1\u00a6</font>&nbsp;",
        "/\u00a1\u00a6</font>&nbsp;",
        "&\u00a1\u00a6</font>&nbsp;",
        "eVil\u00a1\u00a6</font>&nbsp;",
        "EVIL\u00a1\u00a6</font>&nbsp;",
        "ev_il\u00a1\u00a6</font>&nbsp;",
        "ev il\u00a1\u00a6</font>&nbsp;",
        "ev4il\u00a1\u00a6</font>&nbsp;",
        "e\u00a1\u00a6</font>&nbsp;",
        " \u00a1\u00a6</font>&nbsp;",
        "6\u00a1\u00a6</font>&nbsp;",
        "_\u00a1\u00a6</font>&nbsp;",
        "\u00a1\u00a6</font> ",
        "\u00a1\u00a6</font>&nbsp;",
        "evil\u00a1\u00a6</font> ",
        "evil\u00a1\u00a6</font>&nbsp;"
      ]
    },
    {
      "regex": "(index|default)\\.[^#\\?\\/]*",
      "exceptionStackTrace": null,
      "matches": [
        "index.?",
        "index./",
        "index..",
        "index.#",
        "index.eVil",
        "index.EVIL",
        "index.ev_il",
        "index.ev il",
        "index.ev4il",
        "index.e",
        "index. ",
        "index.6",
        "index._",
        "default.",
        "index.",
        "default.evil",
        "index.evil"
      ]
    },
    {
      "regex": "^([a-z]\\w*\\(?|\\d+(?:\\.\\d*)?|\\.\\d+|\\()",
      "exceptionStackTrace": null,
      "matches": [
        ".00",
        ".",
        "0.0.0",
        "0.00",
        "0.",
        "00.0",
        "aevil((",
        "aevil",
        "aeVil(",
        "aEVIL(",
        "aev_il(",
        "aev il(",
        "aev4il(",
        "ae(",
        "a (",
        "a6(",
        "a_(",
        "a(",
        "0",
        "a",
        "(",
        ".0",
        "0.0",
        "aevil("
      ]
    },
    { "regex": "[\\u0050]", "exceptionStackTrace": null, "matches": ["P"] },
    {
      "regex": "^questbundle_s(\\d+)_week",
      "exceptionStackTrace": null,
      "matches": [
        "questbundle_s00_week",
        "questbundle_s_week",
        "questbundle_s0_week"
      ]
    },
    {
      "regex": "Error: no value",
      "exceptionStackTrace": null,
      "matches": ["Error: no value"]
    },
    {
      "regex": "^ {18}",
      "exceptionStackTrace": null,
      "matches": [
        "                   ",
        "                 ",
        "                  "
      ]
    },
    { "regex": "-owner@", "exceptionStackTrace": null, "matches": ["-owner@"] },
    { "regex": "wxsid", "exceptionStackTrace": null, "matches": ["wxsid"] },
    {
      "regex": "^<DD>(.+)",
      "exceptionStackTrace": null,
      "matches": [
        "<DD>>",
        "<DD><",
        "<DD>eVil",
        "<DD>EVIL",
        "<DD>ev_il",
        "<DD>ev il",
        "<DD>ev4il",
        "<DD>e",
        "<DD> ",
        "<DD>6",
        "<DD>_",
        "<DD>",
        "<DD>evil"
      ]
    },
    {
      "regex": "^from __future__ import \\(absolute_import,\\s*division,\\s*print_function(,\\s*unicode_literals)?\\)$",
      "exceptionStackTrace": null,
      "matches": [
        "from __future__ import (absolute_import, division, print_function, unicode_literals, unicode_literals)",
        "from __future__ import (absolute_import, division, print_function)",
        "from __future__ import (absolute_import, division, print_function,  unicode_literals)",
        "from __future__ import (absolute_import, division, print_function,unicode_literals)",
        "from __future__ import (absolute_import, division,  print_function, unicode_literals)",
        "from __future__ import (absolute_import, division,print_function, unicode_literals)",
        "from __future__ import (absolute_import,  division, print_function, unicode_literals)",
        "from __future__ import (absolute_import,division, print_function, unicode_literals)",
        "from __future__ import (absolute_import,division,print_function)",
        "from __future__ import (absolute_import, division, print_function, unicode_literals)"
      ]
    },
    {
      "regex": "[pmce][ds]t",
      "exceptionStackTrace": null,
      "matches": ["edt", "eat", "pst", "mst", "cst", "ast", "est"]
    },
    {
      "regex": "^[^\\(]+",
      "exceptionStackTrace": null,
      "matches": [
        "(",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "308|425|426|474|0b1",
      "exceptionStackTrace": null,
      "matches": ["0b1", "474", "426", "425", "308"]
    },
    {
      "regex": "\\A\\.\\/lib\\/([\\w\\_\\-\\/]+\\.rb)\\Z",
      "exceptionStackTrace": null,
      "matches": [
        "./lib//.rb",
        "./lib/..rb",
        "./lib/-.rb",
        "./lib/eVil.rb",
        "./lib/EVIL.rb",
        "./lib/ev_il.rb",
        "./lib/ev il.rb",
        "./lib/ev4il.rb",
        "./lib/e.rb",
        "./lib/ .rb",
        "./lib/6.rb",
        "./lib/_.rb",
        "./lib/.rb",
        "./lib/evil.rb"
      ]
    },
    {
      "regex": "Expected condition to be true or false",
      "exceptionStackTrace": null,
      "matches": ["Expected condition to be true or false"]
    },
    {
      "regex": "\\.routes\\.draw do",
      "exceptionStackTrace": null,
      "matches": [".routes.draw do"]
    },
    {
      "regex": "'\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}'",
      "exceptionStackTrace": null,
      "matches": [
        "'0000-00-00 00:00:000'",
        "'0000-00-00 00:00:0'",
        "'0000-00-00 00:000:00'",
        "'0000-00-00 00:0:00'",
        "'0000-00-00 000:00:00'",
        "'0000-00-00 0:00:00'",
        "'0000-00-000 00:00:00'",
        "'0000-00-0 00:00:00'",
        "'0000-000-00 00:00:00'",
        "'0000-0-00 00:00:00'",
        "'00000-00-00 00:00:00'",
        "'000-00-00 00:00:00'",
        "'0000-00-00 00:00:00'"
      ]
    },
    { "regex": "^[3-9]", "exceptionStackTrace": null, "matches": ["0", "3"] },
    {
      "regex": "\\s+fastcgi_pass\\s+localhost:5454.+$",
      "exceptionStackTrace": null,
      "matches": [
        " fastcgi_pass localhost:5454:",
        " fastcgi_pass localhost:5454eVil",
        " fastcgi_pass localhost:5454EVIL",
        " fastcgi_pass localhost:5454ev_il",
        " fastcgi_pass localhost:5454ev il",
        " fastcgi_pass localhost:5454ev4il",
        " fastcgi_pass localhost:5454e",
        " fastcgi_pass localhost:5454 ",
        " fastcgi_pass localhost:54546",
        " fastcgi_pass localhost:5454_",
        " fastcgi_pass localhost:5454",
        " fastcgi_pass  localhost:5454evil",
        " fastcgi_passlocalhost:5454evil",
        "  fastcgi_pass localhost:5454evil",
        "fastcgi_pass localhost:5454evil",
        " fastcgi_pass localhost:5454evil"
      ]
    },
    {
      "regex": "<(/)?(pre|code|kbd|script|math)[^>]*>",
      "exceptionStackTrace": null,
      "matches": [
        "</pre>>",
        "</pre<>",
        "</pre/>",
        "</preeVil>",
        "</preEVIL>",
        "</preev_il>",
        "</preev il>",
        "</preev4il>",
        "</pree>",
        "</pre >",
        "</pre6>",
        "</pre_>",
        "</pre>",
        "<//preevil>",
        "<preevil>",
        "<math>",
        "<script>",
        "<kbd>",
        "<code>",
        "<pre>",
        "</mathevil>",
        "</scriptevil>",
        "</kbdevil>",
        "</codeevil>",
        "</preevil>"
      ]
    },
    {
      "regex": "\\[([^)]+?)\\]",
      "exceptionStackTrace": null,
      "matches": [
        "[]]",
        "[[]",
        "[)]",
        "[eVil]",
        "[EVIL]",
        "[ev_il]",
        "[ev il]",
        "[ev4il]",
        "[e]",
        "[ ]",
        "[6]",
        "[_]",
        "[]",
        "[evil]"
      ]
    },
    {
      "regex": "^gd\\w+Font$",
      "exceptionStackTrace": null,
      "matches": [
        "gdeVilFont",
        "gdEVILFont",
        "gdev_ilFont",
        "gdev ilFont",
        "gdev4ilFont",
        "gdeFont",
        "gd Font",
        "gd6Font",
        "gd_Font",
        "gdFont",
        "gdevilFont"
      ]
    },
    {
      "regex": "(\\r|\\n|\\r\\n)+",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": "\\n==={1,}([\\s\\S]*?)##",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "\\.jpe?g\\Z",
      "exceptionStackTrace": null,
      "matches": [".jpeeg", ".jpg", ".jpeg"]
    },
    {
      "regex": "\\+?(\\d{3})\\D*(\\d{3})\\D*(\\d{4})\\D*(\\d*)$",
      "exceptionStackTrace": null,
      "matches": [
        "+000evil000evil0000evil00",
        "+000evil000evil0000evil",
        "+000evil000evil0000+0",
        "+000evil000evil0000eVil0",
        "+000evil000evil0000EVIL0",
        "+000evil000evil0000ev_il0",
        "+000evil000evil0000ev il0",
        "+000evil000evil0000ev4il0",
        "+000evil000evil0000e0",
        "+000evil000evil0000 0",
        "+000evil000evil000060",
        "+000evil000evil0000_0",
        "+000evil000evil00000",
        "+000evil000evil00000evil0",
        "+000evil000evil000evil0",
        "+000evil000+0000evil0",
        "+000evil000eVil0000evil0",
        "+000evil000EVIL0000evil0",
        "+000evil000ev_il0000evil0",
        "+000evil000ev il0000evil0",
        "+000evil000ev4il0000evil0",
        "+000evil000e0000evil0",
        "+000evil000 0000evil0",
        "+000evil00060000evil0",
        "+000evil000_0000evil0",
        "+000evil0000000evil0",
        "+000evil0000evil0000evil0",
        "+000evil00evil0000evil0",
        "+000+000evil0000evil0",
        "+000eVil000evil0000evil0",
        "+000EVIL000evil0000evil0",
        "+000ev_il000evil0000evil0",
        "+000ev il000evil0000evil0",
        "+000ev4il000evil0000evil0",
        "+000e000evil0000evil0",
        "+000 000evil0000evil0",
        "+0006000evil0000evil0",
        "+000_000evil0000evil0",
        "+000000evil0000evil0",
        "+0000evil000evil0000evil0",
        "+00evil000evil0000evil0",
        "++000evil000evil0000evil0",
        "000evil000evil0000evil0",
        "0000000000",
        "+000evil000evil0000evil0"
      ]
    },
    {
      "regex": "^origin\\s",
      "exceptionStackTrace": null,
      "matches": ["origin "]
    },
    {
      "regex": "\\.min.js$|\\.min.map$",
      "exceptionStackTrace": null,
      "matches": [
        ".minAmap",
        ".min0map",
        ".min.map",
        ".min map",
        ".minAjs",
        ".min0js",
        ".min.js",
        ".min js",
        ".minamap",
        ".minajs"
      ]
    },
    {
      "regex": "test/speculation/test_test\\.rb:\\d+:in `block in test_fdef_block_instrument'",
      "exceptionStackTrace": null,
      "matches": [
        "test/speculation/test_test.rb:00:in `block in test_fdef_block_instrument'",
        "test/speculation/test_test.rb::in `block in test_fdef_block_instrument'",
        "test/speculation/test_test.rb:0:in `block in test_fdef_block_instrument'"
      ]
    },
    {
      "regex": "^ {0,3}(=+|-+) *\\n$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "(^|\\/)begin$",
      "exceptionStackTrace": null,
      "matches": ["/begin", "begin"]
    },
    {
      "regex": "script src=['\"]http://ajax\\.googleapis\\.com/ajax/libs/jquery/1\\.11\\.0/jquery\\.min\\.js",
      "exceptionStackTrace": null,
      "matches": [
        "script src='http://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js",
        "script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"
      ]
    },
    {
      "regex": "\\A%(?P<magic>.+?)(?P<code>\\s+.*)?\\Z",
      "exceptionStackTrace": null,
      "matches": [
        "%evil evil evil",
        "%evil %",
        "%evil eVil",
        "%evil EVIL",
        "%evil ev_il",
        "%evil ev il",
        "%evil ev4il",
        "%evil e",
        "%evil  ",
        "%evil 6",
        "%evil _",
        "%evil ",
        "%evil  evil",
        "%evilevil",
        "%% evil",
        "%eVil evil",
        "%EVIL evil",
        "%ev_il evil",
        "%ev il evil",
        "%ev4il evil",
        "%e evil",
        "%  evil",
        "%6 evil",
        "%_ evil",
        "% evil",
        "%evil",
        "%evil evil"
      ]
    },
    {
      "regex": "<\\\\s*from\\\\s+[^>]*uri\\\\s*=\\\\s*\\\"([a-z0-9-]+:[^\\\"]+)\\\"[^>]*>",
      "exceptionStackTrace": null,
      "matches": [
        "<\\sfrom\\seviluri\\s=\\s\"evil:evil\"\\>",
        "<\\sfrom\\seviluri\\s=\\s\"evil:evil\">>",
        "<\\sfrom\\seviluri\\s=\\s\"evil:evil\"=>",
        "<\\sfrom\\seviluri\\s=\\s\"evil:evil\"<>",
        "<\\sfrom\\seviluri\\s=\\s\"evil:evil\":>",
        "<\\sfrom\\seviluri\\s=\\s\"evil:evil\"->",
        "<\\sfrom\\seviluri\\s=\\s\"evil:evil\"\">",
        "<\\sfrom\\seviluri\\s=\\s\"evil:evil\"eVil>",
        "<\\sfrom\\seviluri\\s=\\s\"evil:evil\"EVIL>",
        "<\\sfrom\\seviluri\\s=\\s\"evil:evil\"ev_il>",
        "<\\sfrom\\seviluri\\s=\\s\"evil:evil\"ev il>",
        "<\\sfrom\\seviluri\\s=\\s\"evil:evil\"ev4il>",
        "<\\sfrom\\seviluri\\s=\\s\"evil:evil\"e>",
        "<\\sfrom\\seviluri\\s=\\s\"evil:evil\" >",
        "<\\sfrom\\seviluri\\s=\\s\"evil:evil\"6>",
        "<\\sfrom\\seviluri\\s=\\s\"evil:evil\"_>",
        "<\\sfrom\\seviluri\\s=\\s\"evil:evil\">",
        "<\\sfrom\\seviluri\\s=\\s\"evil:\\\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\"evil:>\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\"evil:=\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\"evil:<\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\"evil::\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\"evil:-\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\"evil:\"\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\"evil:eVil\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\"evil:EVIL\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\"evil:ev_il\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\"evil:ev il\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\"evil:ev4il\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\"evil:e\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\"evil: \"evil>",
        "<\\sfrom\\seviluri\\s=\\s\"evil:6\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\"evil:_\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\"evil:\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\"\\:evil\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\">:evil\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\"=:evil\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\"<:evil\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\"::evil\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\"-:evil\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\"\":evil\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\"eVil:evil\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\"EVIL:evil\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\"ev_il:evil\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\"ev il:evil\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\"ev4il:evil\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\"e:evil\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\" :evil\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\"6:evil\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\"_:evil\"evil>",
        "<\\sfrom\\seviluri\\s=\\s\":evil\"evil>",
        "<\\sfrom\\seviluri\\s=\\ss\"evil:evil\"evil>",
        "<\\sfrom\\seviluri\\s=\\\"evil:evil\"evil>",
        "<\\sfrom\\seviluri\\ss=\\s\"evil:evil\"evil>",
        "<\\sfrom\\seviluri\\=\\s\"evil:evil\"evil>",
        "<\\sfrom\\s\\uri\\s=\\s\"evil:evil\"evil>",
        "<\\sfrom\\s>uri\\s=\\s\"evil:evil\"evil>",
        "<\\sfrom\\s=uri\\s=\\s\"evil:evil\"evil>",
        "<\\sfrom\\s<uri\\s=\\s\"evil:evil\"evil>",
        "<\\sfrom\\s:uri\\s=\\s\"evil:evil\"evil>",
        "<\\sfrom\\s-uri\\s=\\s\"evil:evil\"evil>",
        "<\\sfrom\\s\"uri\\s=\\s\"evil:evil\"evil>",
        "<\\sfrom\\seViluri\\s=\\s\"evil:evil\"evil>",
        "<\\sfrom\\sEVILuri\\s=\\s\"evil:evil\"evil>",
        "<\\sfrom\\sev_iluri\\s=\\s\"evil:evil\"evil>",
        "<\\sfrom\\sev iluri\\s=\\s\"evil:evil\"evil>",
        "<\\sfrom\\sev4iluri\\s=\\s\"evil:evil\"evil>",
        "<\\sfrom\\seuri\\s=\\s\"evil:evil\"evil>",
        "<\\sfrom\\s uri\\s=\\s\"evil:evil\"evil>",
        "<\\sfrom\\s6uri\\s=\\s\"evil:evil\"evil>",
        "<\\sfrom\\s_uri\\s=\\s\"evil:evil\"evil>",
        "<\\sfrom\\suri\\s=\\s\"evil:evil\"evil>",
        "<\\sfrom\\sseviluri\\s=\\s\"evil:evil\"evil>",
        "<\\sfrom\\eviluri\\s=\\s\"evil:evil\"evil>",
        "<\\ssfrom\\seviluri\\s=\\s\"evil:evil\"evil>",
        "<\\from\\seviluri\\s=\\s\"evil:evil\"evil>",
        "<\\from\\suri\\=\\\"evil:evil\">",
        "<\\sfrom\\seviluri\\s=\\s\"evil:evil\"evil>"
      ]
    },
    {
      "regex": "background-color: (transparent|rgba\\(0, 0, 0, 0\\))",
      "exceptionStackTrace": null,
      "matches": [
        "background-color: rgba(0, 0, 0, 0)",
        "background-color: transparent"
      ]
    },
    {
      "regex": "^([A-Za-z_]+\\w*)(\\.|#|::)([^ ]+)",
      "exceptionStackTrace": null,
      "matches": [
        "evilevil.:",
        "evilevil..",
        "evilevil.#",
        "evilevil.eVil",
        "evilevil.EVIL",
        "evilevil.ev_il",
        "evilevil.ev il",
        "evilevil.ev4il",
        "evilevil.e",
        "evilevil. ",
        "evilevil.6",
        "evilevil._",
        "evilevil.",
        "evileVil.evil",
        "evilEVIL.evil",
        "evilev_il.evil",
        "evilev il.evil",
        "evilev4il.evil",
        "evile.evil",
        "evil .evil",
        "evil6.evil",
        "evil_.evil",
        ":evil.evil",
        ".evil.evil",
        "#evil.evil",
        "eVilevil.evil",
        "EVILevil.evil",
        "ev_ilevil.evil",
        "ev ilevil.evil",
        "ev4ilevil.evil",
        "eevil.evil",
        " evil.evil",
        "6evil.evil",
        "_evil.evil",
        "evil::evil",
        "evil#evil",
        "evil.evil",
        "evilevil::evil",
        "evilevil#evil",
        "evilevil.evil"
      ]
    },
    {
      "regex": "^(?:char\\*|const char\\*|(?:const )?(Q(C?)String)[*&]?)$",
      "exceptionStackTrace": null,
      "matches": [
        "const QCString&&",
        "const QCString",
        "const QCString*",
        "const QCCString&",
        "const QString&",
        "const const QCString&",
        "QCString&",
        "QString",
        "const QCString&",
        "const char*",
        "char*"
      ]
    },
    {
      "regex": "too few values specified in the value list",
      "exceptionStackTrace": null,
      "matches": ["too few values specified in the value list"]
    },
    {
      "regex": "-unaligned|-unsigned",
      "exceptionStackTrace": null,
      "matches": ["-unsigned", "-unaligned"]
    },
    {
      "regex": "^\\s*(.*?)\\s+by\\s+(<a href[^>]+>.+?</a>)",
      "exceptionStackTrace": null,
      "matches": [
        " evil by <a hrefevil>></a>",
        " evil by <a hrefevil><</a>",
        " evil by <a hrefevil>/</a>",
        " evil by <a hrefevil>eVil</a>",
        " evil by <a hrefevil>EVIL</a>",
        " evil by <a hrefevil>ev_il</a>",
        " evil by <a hrefevil>ev il</a>",
        " evil by <a hrefevil>ev4il</a>",
        " evil by <a hrefevil>e</a>",
        " evil by <a hrefevil> </a>",
        " evil by <a hrefevil>6</a>",
        " evil by <a hrefevil>_</a>",
        " evil by <a hrefevil></a>",
        " evil by <a href>>evil</a>",
        " evil by <a href<>evil</a>",
        " evil by <a href/>evil</a>",
        " evil by <a hrefeVil>evil</a>",
        " evil by <a hrefEVIL>evil</a>",
        " evil by <a hrefev_il>evil</a>",
        " evil by <a hrefev il>evil</a>",
        " evil by <a hrefev4il>evil</a>",
        " evil by <a hrefe>evil</a>",
        " evil by <a href >evil</a>",
        " evil by <a href6>evil</a>",
        " evil by <a href_>evil</a>",
        " evil by <a href>evil</a>",
        " evil by  <a hrefevil>evil</a>",
        " evil by<a hrefevil>evil</a>",
        " evil  by <a hrefevil>evil</a>",
        " evilby <a hrefevil>evil</a>",
        " > by <a hrefevil>evil</a>",
        " < by <a hrefevil>evil</a>",
        " / by <a hrefevil>evil</a>",
        " eVil by <a hrefevil>evil</a>",
        " EVIL by <a hrefevil>evil</a>",
        " ev_il by <a hrefevil>evil</a>",
        " ev il by <a hrefevil>evil</a>",
        " ev4il by <a hrefevil>evil</a>",
        " e by <a hrefevil>evil</a>",
        "   by <a hrefevil>evil</a>",
        " 6 by <a hrefevil>evil</a>",
        " _ by <a hrefevil>evil</a>",
        "  by <a hrefevil>evil</a>",
        "  evil by <a hrefevil>evil</a>",
        "evil by <a hrefevil>evil</a>",
        " by <a hrefevil>evil</a>",
        " evil by <a hrefevil>evil</a>"
      ]
    },
    {
      "regex": "{sht-io}(.*?){sht-io}",
      "exceptionStackTrace": null,
      "matches": [
        "{sht-io}}{sht-io}",
        "{sht-io}{{sht-io}",
        "{sht-io}-{sht-io}",
        "{sht-io}eVil{sht-io}",
        "{sht-io}EVIL{sht-io}",
        "{sht-io}ev_il{sht-io}",
        "{sht-io}ev il{sht-io}",
        "{sht-io}ev4il{sht-io}",
        "{sht-io}e{sht-io}",
        "{sht-io} {sht-io}",
        "{sht-io}6{sht-io}",
        "{sht-io}_{sht-io}",
        "{sht-io}{sht-io}",
        "{sht-io}evil{sht-io}"
      ]
    },
    {
      "regex": "translate\\s*\\(\\s*([0-9.-]+)\\s*,\\s*([0-9.-]+)\\s*\\)",
      "exceptionStackTrace": null,
      "matches": [
        "translate ( - , -  )",
        "translate ( - , -)",
        "translate ( - , -- )",
        "translate ( - ,  )",
        "translate ( - , 0 )",
        "translate ( - , . )",
        "translate ( - ,  - )",
        "translate ( - ,- )",
        "translate ( -  , - )",
        "translate ( -, - )",
        "translate ( -- , - )",
        "translate (  , - )",
        "translate ( 0 , - )",
        "translate ( . , - )",
        "translate (  - , - )",
        "translate (- , - )",
        "translate  ( - , - )",
        "translate( - , - )",
        "translate(-,-)",
        "translate ( - , - )"
      ]
    },
    {
      "regex": "\u6e38\u620f",
      "exceptionStackTrace": null,
      "matches": ["\u6e38\u620f"]
    },
    {
      "regex": "<img[^>]+\\bsrc=[\"']([^\"']+)[\"']",
      "exceptionStackTrace": null,
      "matches": [
        "<imgevilsrc='evil\"",
        "<imgevilsrc='>'",
        "<imgevilsrc='='",
        "<imgevilsrc='<'",
        "<imgevilsrc='''",
        "<imgevilsrc='\"'",
        "<imgevilsrc='eVil'",
        "<imgevilsrc='EVIL'",
        "<imgevilsrc='ev_il'",
        "<imgevilsrc='ev il'",
        "<imgevilsrc='ev4il'",
        "<imgevilsrc='e'",
        "<imgevilsrc=' '",
        "<imgevilsrc='6'",
        "<imgevilsrc='_'",
        "<imgevilsrc=''",
        "<imgevilsrc=\"evil'",
        "<img>src='evil'",
        "<img=src='evil'",
        "<img<src='evil'",
        "<img'src='evil'",
        "<img\"src='evil'",
        "<imgeVilsrc='evil'",
        "<imgEVILsrc='evil'",
        "<imgev_ilsrc='evil'",
        "<imgev ilsrc='evil'",
        "<imgev4ilsrc='evil'",
        "<imgesrc='evil'",
        "<img src='evil'",
        "<img6src='evil'",
        "<img_src='evil'",
        "<imgsrc='evil'",
        "<imgevilsrc='evil'"
      ]
    },
    {
      "regex": "\\b(?:require)\\b",
      "exceptionStackTrace": null,
      "matches": ["require"]
    },
    {
      "regex": "\\{([A-Za-z0-9._\\-]+)\\}",
      "exceptionStackTrace": null,
      "matches": [
        "{}}",
        "{{}",
        "{.}",
        "{-}",
        "{eVil}",
        "{EVIL}",
        "{ev_il}",
        "{ev il}",
        "{ev4il}",
        "{e}",
        "{ }",
        "{6}",
        "{_}",
        "{}",
        "{evil}"
      ]
    },
    {
      "regex": "\\G sub    \\s+ ($identifier)\n                             \\s*? ( \\( ( $signature ) \\) )? (\\s+ $traits)?",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\G"
      },
      "matches": []
    },
    {
      "regex": "!\\s*singularize",
      "exceptionStackTrace": null,
      "matches": ["!  singularize", "!singularize", "! singularize"]
    },
    {
      "regex": "(?<![<>])(<S>[Nn]\\x{e1}<\\/S> <T>[Aa]n<\\/T> <N pl=\"n\" gnt=\"n\" gnd=\"m\">[aeiouAEIOU\\x{e1}\\x{e9}\\x{ed}\\x{f3}\\x{fa}\\x{c1}\\x{c9}\\x{cd}\\x{d3}\\x{da}][^<]*<\\/N>)(?![<>])",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "incomplete escape \\x"
      },
      "matches": []
    },
    {
      "regex": "http://\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "<([^:>]+)[:>]",
      "exceptionStackTrace": null,
      "matches": [
        "<evil:",
        "<>>",
        "<<>",
        "<:>",
        "<eVil>",
        "<EVIL>",
        "<ev_il>",
        "<ev il>",
        "<ev4il>",
        "<e>",
        "< >",
        "<6>",
        "<_>",
        "<>",
        "<evil>"
      ]
    },
    { "regex": "\\=\\{", "exceptionStackTrace": null, "matches": ["={"] },
    {
      "regex": "obj[\n|\r](.*)endobj[\n|\r]",
      "exceptionStackTrace": null,
      "matches": [
        "obj\revilendobj|",
        "obj\revilendobj\n",
        "obj\r|endobj\r",
        "obj\reVilendobj\r",
        "obj\rEVILendobj\r",
        "obj\rev_ilendobj\r",
        "obj\rev ilendobj\r",
        "obj\rev4ilendobj\r",
        "obj\reendobj\r",
        "obj\r endobj\r",
        "obj\r6endobj\r",
        "obj\r_endobj\r",
        "obj|evilendobj\r",
        "obj\nevilendobj\r",
        "obj\rendobj\r",
        "obj\revilendobj\r"
      ]
    },
    {
      "regex": "<i>(.+)<\\/i>",
      "exceptionStackTrace": null,
      "matches": [
        "<i>></i>",
        "<i><</i>",
        "<i>/</i>",
        "<i>eVil</i>",
        "<i>EVIL</i>",
        "<i>ev_il</i>",
        "<i>ev il</i>",
        "<i>ev4il</i>",
        "<i>e</i>",
        "<i> </i>",
        "<i>6</i>",
        "<i>_</i>",
        "<i></i>",
        "<i>evil</i>"
      ]
    },
    {
      "regex": "^(?P<H>\\d{2}):?(?P<M>\\d{2}):?(?P<S>\\d{2})(?P<MS>|[.]\\d+)(?P<TZ>|Z|(?P<TZH>[+-]\\d{2}):?(?P<TZM>\\d{2}))$",
      "exceptionStackTrace": null,
      "matches": [
        "00:00:00.0-00:000",
        "00:00:00.0-00:0",
        "00:00:00.0-00::00",
        "00:00:00.0-0000",
        "00:00:00.0-000:00",
        "00:00:00.0-0:00",
        "00:00:00.0+00:00",
        "00:00:00.0ZZ",
        "00:00:00.0",
        "00:00:00.0.0Z",
        "00:00:00Z",
        "00:00:00.00Z",
        "00:00:00.Z",
        "00:00:000.0Z",
        "00:00:0.0Z",
        "00:00::00.0Z",
        "00:0000.0Z",
        "00:000:00.0Z",
        "00:0:00.0Z",
        "00::00:00.0Z",
        "0000:00.0Z",
        "000:00:00.0Z",
        "0:00:00.0Z",
        "000000",
        "00:00:00.0-00:00",
        "00:00:00.0Z"
      ]
    },
    {
      "regex": "Suspend-(Job|Service)",
      "exceptionStackTrace": null,
      "matches": ["Suspend-Service", "Suspend-Job"]
    },
    { "regex": "s_r", "exceptionStackTrace": null, "matches": ["s_r"] },
    {
      "regex": "^(\\-|\\+)?0[0-9A-Fa-f]+h$",
      "exceptionStackTrace": null,
      "matches": [
        "-0aah",
        "-0h",
        "-0gh",
        "-0Gh",
        "-0Ah",
        "-00h",
        "--0ah",
        "0ah",
        "+0ah",
        "-0ah"
      ]
    },
    {
      "regex": "^it should( not)? have (?:a )property (?:named|called) \"(\\w+)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "it should not have a property named \"eVil\"",
        "it should not have a property named \"EVIL\"",
        "it should not have a property named \"ev_il\"",
        "it should not have a property named \"ev il\"",
        "it should not have a property named \"ev4il\"",
        "it should not have a property named \"e\"",
        "it should not have a property named \" \"",
        "it should not have a property named \"6\"",
        "it should not have a property named \"_\"",
        "it should not have a property named \"\"",
        "it should not not have a property named \"evil\"",
        "it should have a property called \"evil\"",
        "it should have a property named \"evil\"",
        "it should not have a property called \"evil\"",
        "it should not have a property named \"evil\""
      ]
    },
    {
      "regex": "(\\(|&#40(;|$|(?=\\W)))",
      "exceptionStackTrace": null,
      "matches": ["&#40", "&#40;", "("]
    },
    {
      "regex": "avc1\\.(\\d+)\\.(\\d+)",
      "exceptionStackTrace": null,
      "matches": ["avc1.0.00", "avc1.0.", "avc1.00.0", "avc1..0", "avc1.0.0"]
    },
    {
      "regex": "^mn|^meia[-\\s]noite",
      "exceptionStackTrace": null,
      "matches": ["meia noite", "meia-noite", "mn"]
    },
    {
      "regex": "Season (\\d+) Episode (\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "Season 0 Episode 00",
        "Season 0 Episode ",
        "Season 00 Episode 0",
        "Season  Episode 0",
        "Season 0 Episode 0"
      ]
    },
    {
      "regex": "[^a-zA-Z0-9\\/\\._]",
      "exceptionStackTrace": null,
      "matches": ["a", "_", "A", "0", "/", ".", " "]
    },
    {
      "regex": "^the project folder should contain a config file$",
      "exceptionStackTrace": null,
      "matches": ["the project folder should contain a config file"]
    },
    {
      "regex": "^php-debug-(start|data|exit)$",
      "exceptionStackTrace": null,
      "matches": ["php-debug-exit", "php-debug-data", "php-debug-start"]
    },
    {
      "regex": "\\[note]([\\s\\S]+)\\[\\/note]",
      "exceptionStackTrace": null,
      "matches": [
        "[note]][/note]",
        "[note][[/note]",
        "[note]/[/note]",
        "[note]eVil[/note]",
        "[note]EVIL[/note]",
        "[note]ev_il[/note]",
        "[note]ev il[/note]",
        "[note]ev4il[/note]",
        "[note]e[/note]",
        "[note] [/note]",
        "[note]6[/note]",
        "[note]_[/note]",
        "[note][/note]",
        "[note]evil[/note]"
      ]
    },
    {
      "regex": "http:\\/\\/services.arcgis.com\\/mock\\/arcgis\\/rest\\/services\\/MockImageService\\/ImageServer\\/exportImage\\?bbox=-?\\d+\\.\\d+%2C-?\\d+\\.\\d+%2C-?\\d+\\.\\d+%2C-?\\d+\\.\\d+&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
      "exceptionStackTrace": null,
      "matches": [
        "http://servicesaarcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.0%2C-0.00&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.0%2C-0.&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.0%2C-00.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.0%2C-.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.0%2C--0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.0%2C0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.00%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-00.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C--0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.00%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-00.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C--0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.00%2C-0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.%2C-0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-00.0%2C-0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-.0%2C-0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=--0.0%2C-0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=0.0%2C-0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgisAcom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgis?com/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgis=com/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgis:com/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgis0com/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgis/com/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgis.com/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgis-com/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgis&com/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgis%com/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgis com/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesAarcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://services?arcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://services=arcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://services:arcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://services0arcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://services/arcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://services.arcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://services-arcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://services&arcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://services%arcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://services arcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=0.0%2C0.0%2C0.0%2C0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json",
        "http://servicesaarcgisacom/mock/arcgis/rest/services/MockImageService/ImageServer/exportImage?bbox=-0.0%2C-0.0%2C-0.0%2C-0.0&size=500%2C500&format=jpgpng&transparent=true&bboxSR=3857&imageSR=3857&time=1389254400000%2C1389513600000&f=json"
      ]
    },
    {
      "regex": "<td COLSPAN=2 BGCOLOR=#FFFFFF>(.*?)<\\/td>",
      "exceptionStackTrace": null,
      "matches": [
        "<td COLSPAN=2 BGCOLOR=#FFFFFF>></td>",
        "<td COLSPAN=2 BGCOLOR=#FFFFFF>=</td>",
        "<td COLSPAN=2 BGCOLOR=#FFFFFF><</td>",
        "<td COLSPAN=2 BGCOLOR=#FFFFFF>/</td>",
        "<td COLSPAN=2 BGCOLOR=#FFFFFF>#</td>",
        "<td COLSPAN=2 BGCOLOR=#FFFFFF>eVil</td>",
        "<td COLSPAN=2 BGCOLOR=#FFFFFF>EVIL</td>",
        "<td COLSPAN=2 BGCOLOR=#FFFFFF>ev_il</td>",
        "<td COLSPAN=2 BGCOLOR=#FFFFFF>ev il</td>",
        "<td COLSPAN=2 BGCOLOR=#FFFFFF>ev4il</td>",
        "<td COLSPAN=2 BGCOLOR=#FFFFFF>e</td>",
        "<td COLSPAN=2 BGCOLOR=#FFFFFF> </td>",
        "<td COLSPAN=2 BGCOLOR=#FFFFFF>6</td>",
        "<td COLSPAN=2 BGCOLOR=#FFFFFF>_</td>",
        "<td COLSPAN=2 BGCOLOR=#FFFFFF></td>",
        "<td COLSPAN=2 BGCOLOR=#FFFFFF>evil</td>"
      ]
    },
    {
      "regex": "(^(?>[\\/\\*#\\s\\{]*))([\\@\\\\])([\\w]*)(\\}|[ \t]+.*?)?$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?>"
      },
      "matches": []
    },
    {
      "regex": "google\\.protobuf\\.",
      "exceptionStackTrace": null,
      "matches": ["google.protobuf."]
    },
    { "regex": "Mozshot", "exceptionStackTrace": null, "matches": ["Mozshot"] },
    {
      "regex": "\\`(.*)\\`_$",
      "exceptionStackTrace": null,
      "matches": [
        "```_",
        "`eVil`_",
        "`EVIL`_",
        "`ev_il`_",
        "`ev il`_",
        "`ev4il`_",
        "`e`_",
        "` `_",
        "`6`_",
        "`_`_",
        "``_",
        "`evil`_"
      ]
    },
    { "regex": "\\.vlw$", "exceptionStackTrace": null, "matches": [".vlw"] },
    {
      "regex": "\\.(js|json|css)(\\.|$)",
      "exceptionStackTrace": null,
      "matches": [".css.", ".json.", ".js", ".js."]
    },
    {
      "regex": "guid\\s*=\\s*\"([0-9a-z]+)\"",
      "exceptionStackTrace": null,
      "matches": [
        "guid = \"eVil\"",
        "guid = \"EVIL\"",
        "guid = \"ev_il\"",
        "guid = \"ev il\"",
        "guid = \"ev4il\"",
        "guid = \"e\"",
        "guid = \" \"",
        "guid = \"6\"",
        "guid = \"_\"",
        "guid = \"\"",
        "guid =  \"evil\"",
        "guid =\"evil\"",
        "guid  = \"evil\"",
        "guid= \"evil\"",
        "guid=\"evil\"",
        "guid = \"evil\""
      ]
    },
    {
      "regex": "`verdictdb_alias_\\d+_\\d+`",
      "exceptionStackTrace": null,
      "matches": [
        "`verdictdb_alias_0_00`",
        "`verdictdb_alias_0_`",
        "`verdictdb_alias_00_0`",
        "`verdictdb_alias__0`",
        "`verdictdb_alias_0_0`"
      ]
    },
    {
      "regex": ":([\\w\\-_|])+",
      "exceptionStackTrace": null,
      "matches": [":||", ":", ":a", ":_", ":A", ":0", ":-", ":|"]
    },
    {
      "regex": "\\S\\s+AS\\s+\\S",
      "exceptionStackTrace": null,
      "matches": [
        "a AS _",
        "a AS A",
        "a AS 0",
        "a AS  ",
        "a AS  a",
        "a ASa",
        "a  AS a",
        "aAS a",
        "_ AS a",
        "A AS a",
        "0 AS a",
        "  AS a",
        "a AS a"
      ]
    },
    {
      "regex": "([0-9\\.]+)\\s*\\n\\r?-+\\n\\r?",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "(.+?)(::|$)",
      "exceptionStackTrace": null,
      "matches": [
        ":::",
        "eVil::",
        "EVIL::",
        "ev_il::",
        "ev il::",
        "ev4il::",
        "e::",
        " ::",
        "6::",
        "_::",
        "::",
        "evil",
        "evil::"
      ]
    },
    {
      "regex": "^((?:[^,:]+,)+)::.*$",
      "exceptionStackTrace": null,
      "matches": [
        "evil,:::",
        "evil,::,",
        "evil,::eVil",
        "evil,::EVIL",
        "evil,::ev_il",
        "evil,::ev il",
        "evil,::ev4il",
        "evil,::e",
        "evil,:: ",
        "evil,::6",
        "evil,::_",
        "evil,evil,::evil",
        "::evil",
        ":,::evil",
        ",,::evil",
        "eVil,::evil",
        "EVIL,::evil",
        "ev_il,::evil",
        "ev il,::evil",
        "ev4il,::evil",
        "e,::evil",
        " ,::evil",
        "6,::evil",
        "_,::evil",
        ",::evil",
        "evil,::",
        "evil,::evil"
      ]
    },
    { "regex": "^sugar", "exceptionStackTrace": null, "matches": ["sugar"] },
    {
      "regex": "^(\\\\d)+$",
      "exceptionStackTrace": null,
      "matches": ["\\d\\d", "", "\\d"]
    },
    {
      "regex": "\\/helpers\\/(esm\\/)?inherits",
      "exceptionStackTrace": null,
      "matches": [
        "/helpers/esm/esm/inherits",
        "/helpers/inherits",
        "/helpers/esm/inherits"
      ]
    },
    {
      "regex": "ca <b>devrait<\\/b> marcher",
      "exceptionStackTrace": null,
      "matches": ["ca <b>devrait</b> marcher"]
    },
    {
      "regex": "{(.*?):(.*?)\\}",
      "exceptionStackTrace": null,
      "matches": [
        "{evil:}}",
        "{evil:{}",
        "{evil::}",
        "{evil:eVil}",
        "{evil:EVIL}",
        "{evil:ev_il}",
        "{evil:ev il}",
        "{evil:ev4il}",
        "{evil:e}",
        "{evil: }",
        "{evil:6}",
        "{evil:_}",
        "{evil:}",
        "{}:evil}",
        "{{:evil}",
        "{::evil}",
        "{eVil:evil}",
        "{EVIL:evil}",
        "{ev_il:evil}",
        "{ev il:evil}",
        "{ev4il:evil}",
        "{e:evil}",
        "{ :evil}",
        "{6:evil}",
        "{_:evil}",
        "{:evil}",
        "{:}",
        "{evil:evil}"
      ]
    },
    {
      "regex": "^collection \"(.*?)\" with (\\d+) products$",
      "exceptionStackTrace": null,
      "matches": [
        "collection \"evil\" with 00 products",
        "collection \"evil\" with  products",
        "collection \"\"\" with 0 products",
        "collection \"eVil\" with 0 products",
        "collection \"EVIL\" with 0 products",
        "collection \"ev_il\" with 0 products",
        "collection \"ev il\" with 0 products",
        "collection \"ev4il\" with 0 products",
        "collection \"e\" with 0 products",
        "collection \" \" with 0 products",
        "collection \"6\" with 0 products",
        "collection \"_\" with 0 products",
        "collection \"\" with 0 products",
        "collection \"evil\" with 0 products"
      ]
    },
    { "regex": "^path\\=", "exceptionStackTrace": null, "matches": ["path="] },
    {
      "regex": "if\\s+(not\\s+)?(\\w|\\-|\\.)+",
      "exceptionStackTrace": null,
      "matches": [
        "if not aa",
        "if not ",
        "if not _",
        "if not A",
        "if not 0",
        "if not not a",
        "if not  a",
        "if nota",
        "if  not a",
        "ifnot a",
        "if .",
        "if -",
        "if a",
        "if not .",
        "if not -",
        "if not a"
      ]
    },
    {
      "regex": "[- :.]",
      "exceptionStackTrace": null,
      "matches": [":", "-", " ", "."]
    },
    {
      "regex": ",[\\\\n|\\\\s]*\\\"com.redhat.bayesian.lsp\\\"",
      "exceptionStackTrace": null,
      "matches": [
        ",s\"comaredhatabayesian|lsp\"",
        ",s\"comaredhatabayesian\\lsp\"",
        ",s\"comaredhatabayesianAlsp\"",
        ",s\"comaredhatabayesian0lsp\"",
        ",s\"comaredhatabayesian,lsp\"",
        ",s\"comaredhatabayesian\"lsp\"",
        ",s\"comaredhatabayesian lsp\"",
        ",s\"comaredhat|bayesianalsp\"",
        ",s\"comaredhat\\bayesianalsp\"",
        ",s\"comaredhatAbayesianalsp\"",
        ",s\"comaredhat0bayesianalsp\"",
        ",s\"comaredhat,bayesianalsp\"",
        ",s\"comaredhat\"bayesianalsp\"",
        ",s\"comaredhat bayesianalsp\"",
        ",s\"com|redhatabayesianalsp\"",
        ",s\"com\\redhatabayesianalsp\"",
        ",s\"comAredhatabayesianalsp\"",
        ",s\"com0redhatabayesianalsp\"",
        ",s\"com,redhatabayesianalsp\"",
        ",s\"com\"redhatabayesianalsp\"",
        ",s\"com redhatabayesianalsp\"",
        ",ss\"comaredhatabayesianalsp\"",
        ",|\"comaredhatabayesianalsp\"",
        ",n\"comaredhatabayesianalsp\"",
        ",a\"comaredhatabayesianalsp\"",
        ",\\\"comaredhatabayesianalsp\"",
        ",\"comaredhatabayesianalsp\"",
        ",s\"comaredhatabayesianalsp\""
      ]
    },
    {
      "regex": "^[^:]+",
      "exceptionStackTrace": null,
      "matches": [
        ":",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "has too many decimal places",
      "exceptionStackTrace": null,
      "matches": ["has too many decimal places"]
    },
    {
      "regex": "\\&?_escaped_fragment_=[^\\&]*$",
      "exceptionStackTrace": null,
      "matches": [
        "&_escaped_fragment_==",
        "&_escaped_fragment_=&",
        "&_escaped_fragment_=eVil",
        "&_escaped_fragment_=EVIL",
        "&_escaped_fragment_=ev_il",
        "&_escaped_fragment_=ev il",
        "&_escaped_fragment_=ev4il",
        "&_escaped_fragment_=e",
        "&_escaped_fragment_= ",
        "&_escaped_fragment_=6",
        "&_escaped_fragment_=_",
        "&_escaped_fragment_=",
        "&&_escaped_fragment_=evil",
        "_escaped_fragment_=evil",
        "_escaped_fragment_=",
        "&_escaped_fragment_=evil"
      ]
    },
    {
      "regex": "/nifi-api/process-groups/(?:(?:root)|(?:[a-f0-9\\-]{36}))/remote-process-groups",
      "exceptionStackTrace": null,
      "matches": [
        "/nifi-api/process-groups/-------------------------------------/remote-process-groups",
        "/nifi-api/process-groups/-----------------------------------/remote-process-groups",
        "/nifi-api/process-groups/g-----------------------------------/remote-process-groups",
        "/nifi-api/process-groups/a-----------------------------------/remote-process-groups",
        "/nifi-api/process-groups/0-----------------------------------/remote-process-groups",
        "/nifi-api/process-groups/------------------------------------/remote-process-groups",
        "/nifi-api/process-groups/root/remote-process-groups"
      ]
    },
    {
      "regex": "(?P<remote_url>(?:.*?)(?:/|:))*(?P<team_name>[^/]+)/(?P<project_name>[^/]+?)(?:\\.git)?$",
      "exceptionStackTrace": null,
      "matches": [
        "evil/evil/evil.git.git",
        "evil/evil/evil",
        "evil/evil/:.git",
        "evil/evil//.git",
        "evil/evil/..git",
        "evil/evil/eVil.git",
        "evil/evil/EVIL.git",
        "evil/evil/ev_il.git",
        "evil/evil/ev il.git",
        "evil/evil/ev4il.git",
        "evil/evil/e.git",
        "evil/evil/ .git",
        "evil/evil/6.git",
        "evil/evil/_.git",
        "evil/evil/.git",
        "evil/:/evil.git",
        "evil///evil.git",
        "evil/./evil.git",
        "evil/eVil/evil.git",
        "evil/EVIL/evil.git",
        "evil/ev_il/evil.git",
        "evil/ev il/evil.git",
        "evil/ev4il/evil.git",
        "evil/e/evil.git",
        "evil/ /evil.git",
        "evil/6/evil.git",
        "evil/_/evil.git",
        "evil//evil.git",
        "evil/evil/evil/evil.git",
        "evil/evil.git",
        ":/evil/evil.git",
        "//evil/evil.git",
        "./evil/evil.git",
        "eVil/evil/evil.git",
        "EVIL/evil/evil.git",
        "ev_il/evil/evil.git",
        "ev il/evil/evil.git",
        "ev4il/evil/evil.git",
        "e/evil/evil.git",
        " /evil/evil.git",
        "6/evil/evil.git",
        "_/evil/evil.git",
        "/evil/evil.git",
        "evil/evil",
        "evil:evil/evil.git",
        "evil/evil/evil.git"
      ]
    },
    {
      "regex": "^block +([^\\n]+)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^\\s+[\\w+\\s+]+$",
      "exceptionStackTrace": null,
      "matches": [
        " +",
        " eVil",
        " EVIL",
        " ev_il",
        " ev il",
        " ev4il",
        " e",
        "  ",
        " 6",
        " _",
        " ",
        "  evil",
        "evil",
        " evil"
      ]
    },
    {
      "regex": "^error scalar:([\\w+\\/=+]*)$",
      "exceptionStackTrace": null,
      "matches": [
        "error scalar:=",
        "error scalar::",
        "error scalar:/",
        "error scalar:+",
        "error scalar:eVil",
        "error scalar:EVIL",
        "error scalar:ev_il",
        "error scalar:ev il",
        "error scalar:ev4il",
        "error scalar:e",
        "error scalar: ",
        "error scalar:6",
        "error scalar:_",
        "error scalar:",
        "error scalar:evil"
      ]
    },
    {
      "regex": "^#<WhyValidationsSuckIn96::Validation subclass for validating 'validates_rockingness'>",
      "exceptionStackTrace": null,
      "matches": [
        "#<WhyValidationsSuckIn96::Validation subclass for validating 'validates_rockingness'>"
      ]
    },
    {
      "regex": "(?:[0-9a-f]{1,4}:){1,1}(?::[0-9a-f]{1,4}){1,6}(?:\\/\\d{1,3})?",
      "exceptionStackTrace": null,
      "matches": [
        "a::a/0/0",
        "a::a/0000",
        "a::a/000",
        "a::a/",
        "a::a:a:a:a:a:a:a/0",
        "a::a:a:a:a:a:a/0",
        "a:/0",
        "a::aaaaa/0",
        "a::aaaa/0",
        "a::/0",
        "a::g/0",
        "a::0/0",
        "a:a::a/0",
        ":a/0",
        "aaaaa::a/0",
        "aaaa::a/0",
        "::a/0",
        "g::a/0",
        "0::a/0",
        "a::a",
        "a::a/0"
      ]
    },
    {
      "regex": "<title level=\\\"a\\\"> ([^<]+) </title>",
      "exceptionStackTrace": null,
      "matches": [
        "<title level=\"a\"> > </title>",
        "<title level=\"a\"> = </title>",
        "<title level=\"a\"> < </title>",
        "<title level=\"a\"> / </title>",
        "<title level=\"a\"> \" </title>",
        "<title level=\"a\"> eVil </title>",
        "<title level=\"a\"> EVIL </title>",
        "<title level=\"a\"> ev_il </title>",
        "<title level=\"a\"> ev il </title>",
        "<title level=\"a\"> ev4il </title>",
        "<title level=\"a\"> e </title>",
        "<title level=\"a\">   </title>",
        "<title level=\"a\"> 6 </title>",
        "<title level=\"a\"> _ </title>",
        "<title level=\"a\">  </title>",
        "<title level=\"a\"> evil </title>"
      ]
    },
    { "regex": "boolean", "exceptionStackTrace": null, "matches": ["boolean"] },
    {
      "regex": "\\[horizFov\\]",
      "exceptionStackTrace": null,
      "matches": ["[horizFov]"]
    },
    {
      "regex": "^$attribute$",
      "exceptionStackTrace": null,
      "matches": ["attribute"]
    },
    {
      "regex": "\\w+-lyrics",
      "exceptionStackTrace": null,
      "matches": [
        "eVil-lyrics",
        "EVIL-lyrics",
        "ev_il-lyrics",
        "ev il-lyrics",
        "ev4il-lyrics",
        "e-lyrics",
        " -lyrics",
        "6-lyrics",
        "_-lyrics",
        "-lyrics",
        "evil-lyrics"
      ]
    },
    { "regex": "(?=end)", "exceptionStackTrace": null, "matches": [""] },
    {
      "regex": "display:none",
      "exceptionStackTrace": null,
      "matches": ["display:none"]
    },
    {
      "regex": "(unknown|fatal|error|warn|info|debug)",
      "exceptionStackTrace": null,
      "matches": ["debug", "info", "warn", "error", "fatal", "unknown"]
    },
    {
      "regex": "masters\\s*((\\s+(\\d+\\.){3,3}\\d+|\\s+(([0-9a-f]*:){1,15}(:[0-9a-f]+){1,15}))){1,}\\s*(notify|$)",
      "exceptionStackTrace": null,
      "matches": [
        "masters  a::a:a:a:a:a:a:a:a:a:a:a:a:a:a:a:a notify",
        "masters  a::a:a:a:a:a:a:a:a:a:a:a:a:a:a:a notify",
        "masters  a: notify",
        "masters  a::aa notify",
        "masters  a:: notify",
        "masters  a::g notify",
        "masters  a::0 notify",
        "masters  a:a:a:a:a:a:a:a:a:a:a:a:a:a:a:a::a notify",
        "masters  a:a:a:a:a:a:a:a:a:a:a:a:a:a:a::a notify",
        "masters  :a notify",
        "masters  aa::a notify",
        "masters  ::a notify",
        "masters  g::a notify",
        "masters  0::a notify",
        "masters   a::a notify",
        "masters a::a notify",
        "masters  0.0.0.0  notify",
        "masters  0.0.0.0notify",
        "masters  0.0.0.0 0.0.0.0 notify",
        "masters  notify",
        "masters  0.0.0.00 notify",
        "masters  0.0.0. notify",
        "masters  0.0.0.0.0 notify",
        "masters  0.0.0 notify",
        "masters  00.0.0.0 notify",
        "masters  .0.0.0 notify",
        "masters   0.0.0.0 notify",
        "masters 0.0.0.0 notify",
        "masters ::anotify",
        "masters 0.0.0.0",
        "masters 0.0.0.0notify",
        "masters  a::a notify",
        "masters  0.0.0.0 ",
        "masters  0.0.0.0 notify"
      ]
    },
    {
      "regex": "^Domain : (.+)\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    { "regex": "dir\\d$", "exceptionStackTrace": null, "matches": ["dir0"] },
    {
      "regex": "\\s*\\/\\/(?![^(]*\\)).*|\\s*\\/\\*.*\\*\\/",
      "exceptionStackTrace": null,
      "matches": [
        " /*/*/",
        " /***/",
        " /*)*/",
        " /*(*/",
        " /*eVil*/",
        " /*EVIL*/",
        " /*ev_il*/",
        " /*ev il*/",
        " /*ev4il*/",
        " /*e*/",
        " /* */",
        " /*6*/",
        " /*_*/",
        " /**/",
        "  /*evil*/",
        "/*evil*/",
        " ///",
        " //*",
        " //)",
        " //(",
        " //eVil",
        " //EVIL",
        " //ev_il",
        " //ev il",
        " //ev4il",
        " //e",
        " // ",
        " //6",
        " //_",
        " //",
        "  //evil",
        "//evil",
        "/**/",
        "//",
        " /*evil*/",
        " //evil"
      ]
    },
    {
      "regex": "@media *([^\\{]+)\\{([\\S\\s]+?)$",
      "exceptionStackTrace": null,
      "matches": [
        "@media evil{{",
        "@media evil{@",
        "@media evil{eVil",
        "@media evil{EVIL",
        "@media evil{ev_il",
        "@media evil{ev il",
        "@media evil{ev4il",
        "@media evil{e",
        "@media evil{ ",
        "@media evil{6",
        "@media evil{_",
        "@media evil{",
        "@media {{evil",
        "@media @{evil",
        "@media eVil{evil",
        "@media EVIL{evil",
        "@media ev_il{evil",
        "@media ev il{evil",
        "@media ev4il{evil",
        "@media e{evil",
        "@media  {evil",
        "@media 6{evil",
        "@media _{evil",
        "@media {evil",
        "@media  evil{evil",
        "@mediaevil{evil",
        "@media evil{evil"
      ]
    },
    {
      "regex": "^(?:nbsp|amp|quot|apos|shy|lt|gt)",
      "exceptionStackTrace": null,
      "matches": ["gt", "lt", "shy", "apos", "quot", "amp", "nbsp"]
    },
    {
      "regex": "^ \\((.*)\\) $",
      "exceptionStackTrace": null,
      "matches": [
        " ()) ",
        " (() ",
        " (eVil) ",
        " (EVIL) ",
        " (ev_il) ",
        " (ev il) ",
        " (ev4il) ",
        " (e) ",
        " ( ) ",
        " (6) ",
        " (_) ",
        " () ",
        " (evil) "
      ]
    },
    {
      "regex": "import_[0-9]+",
      "exceptionStackTrace": null,
      "matches": ["import_00", "import_", "import_0"]
    },
    {
      "regex": "line\\s+\\d+",
      "exceptionStackTrace": null,
      "matches": ["line 00", "line ", "line  0", "line0", "line 0"]
    },
    {
      "regex": "^(?:PAGE|VIEW|SECTION)S$",
      "exceptionStackTrace": null,
      "matches": ["SECTIONS", "VIEWS", "PAGES"]
    },
    {
      "regex": "<style.+>",
      "exceptionStackTrace": null,
      "matches": [
        "<style>>",
        "<style<>",
        "<styleeVil>",
        "<styleEVIL>",
        "<styleev_il>",
        "<styleev il>",
        "<styleev4il>",
        "<stylee>",
        "<style >",
        "<style6>",
        "<style_>",
        "<style>",
        "<styleevil>"
      ]
    },
    {
      "regex": "(%[0-9a-f]{2})+",
      "exceptionStackTrace": null,
      "matches": ["%aa%aa", "", "%aaa", "%a", "%ga", "%0a", "%aa"]
    },
    {
      "regex": "library[\\\\\\/]$",
      "exceptionStackTrace": null,
      "matches": ["library\\", "library/"]
    },
    {
      "regex": "([\\w.-]+\\.(csv|zip|txt|gz))$",
      "exceptionStackTrace": null,
      "matches": [
        "..csv",
        "-.csv",
        "eVil.csv",
        "EVIL.csv",
        "ev_il.csv",
        "ev il.csv",
        "ev4il.csv",
        "e.csv",
        " .csv",
        "6.csv",
        "_.csv",
        ".csv",
        "evil.gz",
        "evil.txt",
        "evil.zip",
        "evil.csv"
      ]
    },
    {
      "regex": "\"qtk=(?P<qtk>\\S+)\";",
      "exceptionStackTrace": null,
      "matches": [
        "\"qtk==\";",
        "\"qtk=;\";",
        "\"qtk=\"\";",
        "\"qtk=eVil\";",
        "\"qtk=EVIL\";",
        "\"qtk=ev_il\";",
        "\"qtk=ev il\";",
        "\"qtk=ev4il\";",
        "\"qtk=e\";",
        "\"qtk= \";",
        "\"qtk=6\";",
        "\"qtk=_\";",
        "\"qtk=\";",
        "\"qtk=evil\";"
      ]
    },
    {
      "regex": "Cannot create",
      "exceptionStackTrace": null,
      "matches": ["Cannot create"]
    },
    {
      "regex": "^[<>=]{1,2}",
      "exceptionStackTrace": null,
      "matches": ["===", "==", "", ">", "<", "="]
    },
    {
      "regex": "\\[UNAVAILABLE\\]",
      "exceptionStackTrace": null,
      "matches": ["[UNAVAILABLE]"]
    },
    {
      "regex": "\\((.*?)\\)(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "(evil))",
        "(evil)(",
        "(evil)eVil",
        "(evil)EVIL",
        "(evil)ev_il",
        "(evil)ev il",
        "(evil)ev4il",
        "(evil)e",
        "(evil) ",
        "(evil)6",
        "(evil)_",
        "(evil)",
        "())evil",
        "(()evil",
        "(eVil)evil",
        "(EVIL)evil",
        "(ev_il)evil",
        "(ev il)evil",
        "(ev4il)evil",
        "(e)evil",
        "( )evil",
        "(6)evil",
        "(_)evil",
        "()evil",
        "()",
        "(evil)evil"
      ]
    },
    {
      "regex": "^(describe|desc)\\s+table\\s+(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "describe table eVil",
        "describe table EVIL",
        "describe table ev_il",
        "describe table ev il",
        "describe table ev4il",
        "describe table e",
        "describe table  ",
        "describe table 6",
        "describe table _",
        "describe table  evil",
        "describe tableevil",
        "describe  table evil",
        "describetable evil",
        "desc table ",
        "describe table ",
        "desc table evil",
        "describe table evil"
      ]
    },
    {
      "regex": "^\\s*(for|while|if|else)\\b(?!.*[;{}]\\s*(\\/\\/.*|\\/[*].*[*]\\/\\s*)?$)",
      "exceptionStackTrace": null,
      "matches": [
        "  for",
        "else",
        "if",
        "while",
        "for",
        " else",
        " if",
        " while",
        " for"
      ]
    },
    {
      "regex": "^searching the log for the application '([^']+)'$",
      "exceptionStackTrace": null,
      "matches": [
        "searching the log for the application '''",
        "searching the log for the application 'eVil'",
        "searching the log for the application 'EVIL'",
        "searching the log for the application 'ev_il'",
        "searching the log for the application 'ev il'",
        "searching the log for the application 'ev4il'",
        "searching the log for the application 'e'",
        "searching the log for the application ' '",
        "searching the log for the application '6'",
        "searching the log for the application '_'",
        "searching the log for the application ''",
        "searching the log for the application 'evil'"
      ]
    },
    {
      "regex": "^(?=^.{3,255}$)[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+$",
      "exceptionStackTrace": null,
      "matches": [
        "0-.0-.0-",
        "0-",
        "0-.0---------------------------------------------------------------",
        "0-.0--------------------------------------------------------------",
        "0-.0",
        "0-.0a",
        "0-.0A",
        "0-.00",
        "0-.a-",
        "0-.A-",
        "0---------------------------------------------------------------.0-",
        "0--------------------------------------------------------------.0-",
        "0.0-",
        "0a.0-",
        "0A.0-",
        "00.0-",
        "a-.0-",
        "A-.0-",
        "0.0",
        "0-.0-"
      ]
    },
    {
      "regex": "^ALTER TYPE .* ADD VALUE .*",
      "exceptionStackTrace": null,
      "matches": [
        "ALTER TYPE evil ADD VALUE eVil",
        "ALTER TYPE evil ADD VALUE EVIL",
        "ALTER TYPE evil ADD VALUE ev_il",
        "ALTER TYPE evil ADD VALUE ev il",
        "ALTER TYPE evil ADD VALUE ev4il",
        "ALTER TYPE evil ADD VALUE e",
        "ALTER TYPE evil ADD VALUE  ",
        "ALTER TYPE evil ADD VALUE 6",
        "ALTER TYPE evil ADD VALUE _",
        "ALTER TYPE evil ADD VALUE ",
        "ALTER TYPE eVil ADD VALUE evil",
        "ALTER TYPE EVIL ADD VALUE evil",
        "ALTER TYPE ev_il ADD VALUE evil",
        "ALTER TYPE ev il ADD VALUE evil",
        "ALTER TYPE ev4il ADD VALUE evil",
        "ALTER TYPE e ADD VALUE evil",
        "ALTER TYPE   ADD VALUE evil",
        "ALTER TYPE 6 ADD VALUE evil",
        "ALTER TYPE _ ADD VALUE evil",
        "ALTER TYPE  ADD VALUE evil",
        "ALTER TYPE  ADD VALUE ",
        "ALTER TYPE evil ADD VALUE evil"
      ]
    },
    {
      "regex": "\\[submodule \"vendor/([^\"]+)\"\\]",
      "exceptionStackTrace": null,
      "matches": [
        "[submodule \"vendor/]\"]",
        "[submodule \"vendor/[\"]",
        "[submodule \"vendor//\"]",
        "[submodule \"vendor/\"\"]",
        "[submodule \"vendor/eVil\"]",
        "[submodule \"vendor/EVIL\"]",
        "[submodule \"vendor/ev_il\"]",
        "[submodule \"vendor/ev il\"]",
        "[submodule \"vendor/ev4il\"]",
        "[submodule \"vendor/e\"]",
        "[submodule \"vendor/ \"]",
        "[submodule \"vendor/6\"]",
        "[submodule \"vendor/_\"]",
        "[submodule \"vendor/\"]",
        "[submodule \"vendor/evil\"]"
      ]
    },
    {
      "regex": "^auth\\=Bearer ",
      "exceptionStackTrace": null,
      "matches": ["auth=Bearer "]
    },
    {
      "regex": "@(namespace|module) (\\w+)",
      "exceptionStackTrace": null,
      "matches": [
        "@namespace eVil",
        "@namespace EVIL",
        "@namespace ev_il",
        "@namespace ev il",
        "@namespace ev4il",
        "@namespace e",
        "@namespace  ",
        "@namespace 6",
        "@namespace _",
        "@namespace ",
        "@module evil",
        "@namespace evil"
      ]
    },
    {
      "regex": "^the element \"(.*?)\" is checked$",
      "exceptionStackTrace": null,
      "matches": [
        "the element \"\"\" is checked",
        "the element \"eVil\" is checked",
        "the element \"EVIL\" is checked",
        "the element \"ev_il\" is checked",
        "the element \"ev il\" is checked",
        "the element \"ev4il\" is checked",
        "the element \"e\" is checked",
        "the element \" \" is checked",
        "the element \"6\" is checked",
        "the element \"_\" is checked",
        "the element \"\" is checked",
        "the element \"evil\" is checked"
      ]
    },
    {
      "regex": "Host:\\s*([-a-zA-z.]*)\\000",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported octal value 0"
      },
      "matches": []
    },
    {
      "regex": "\\[START\\s+([^\\]]+)\\]",
      "exceptionStackTrace": null,
      "matches": [
        "[START ]]",
        "[START []",
        "[START eVil]",
        "[START EVIL]",
        "[START ev_il]",
        "[START ev il]",
        "[START ev4il]",
        "[START e]",
        "[START  ]",
        "[START 6]",
        "[START _]",
        "[START ]",
        "[START  evil]",
        "[STARTevil]",
        "[START evil]"
      ]
    },
    {
      "regex": "^([0-9]+)\\.([0-9]+)\\.([0-9]+)\\.([0-9]+)$",
      "exceptionStackTrace": null,
      "matches": [
        "0.0.0.00",
        "0.0.0.",
        "0.0.00.0",
        "0.0..0",
        "0.00.0.0",
        "0..0.0",
        "00.0.0.0",
        ".0.0.0",
        "0.0.0.0"
      ]
    },
    {
      "regex": "[^\\d$is]*_[^\\d$is]*",
      "exceptionStackTrace": null,
      "matches": [
        "evil_$",
        "evil_eVil",
        "evil_EVIL",
        "evil_ev_il",
        "evil_ev il",
        "evil_ev4il",
        "evil_e",
        "evil_ ",
        "evil_6",
        "evil__",
        "evil_",
        "$_evil",
        "eVil_evil",
        "EVIL_evil",
        "ev_il_evil",
        "ev il_evil",
        "ev4il_evil",
        "e_evil",
        " _evil",
        "6_evil",
        "__evil",
        "_evil",
        "_",
        "evil_evil"
      ]
    },
    {
      "regex": ":\\s[^{]*?:",
      "exceptionStackTrace": null,
      "matches": [
        ": {:",
        ": ::",
        ": eVil:",
        ": EVIL:",
        ": ev_il:",
        ": ev il:",
        ": ev4il:",
        ": e:",
        ":  :",
        ": 6:",
        ": _:",
        ": :",
        ": evil:"
      ]
    },
    {
      "regex": "spec\\/dummy\\/public",
      "exceptionStackTrace": null,
      "matches": ["spec/dummy/public"]
    },
    {
      "regex": "%?macros.([^ =()]+)",
      "exceptionStackTrace": null,
      "matches": [
        "%macrosa=",
        "%macrosa)",
        "%macrosa(",
        "%macrosa%",
        "%macrosaeVil",
        "%macrosaEVIL",
        "%macrosaev_il",
        "%macrosaev il",
        "%macrosaev4il",
        "%macrosae",
        "%macrosa ",
        "%macrosa6",
        "%macrosa_",
        "%macrosa",
        "%macrosAevil",
        "%macros=evil",
        "%macros0evil",
        "%macros)evil",
        "%macros(evil",
        "%macros%evil",
        "%macros evil",
        "%%macrosaevil",
        "macrosaevil",
        "%macrosaevil"
      ]
    },
    {
      "regex": "(?<![<>])(<D>[Tt]r\\x{ed}n\\x{e1}r<\\/D> <[A-DF-Z][^>]*>(?:[aeiouAEIOU\\x{e1}\\x{e9}\\x{ed}\\x{f3}\\x{fa}\\x{c1}\\x{c9}\\x{cd}\\x{d3}\\x{da}cfptCFPT]|[Dd][^Tt']|[Gg][^Cc]|[Bb][^Pph]|[Bb]h[^fF])[^<]*<\\/[A-DF-Z]>)(?![<>])",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "incomplete escape \\x"
      },
      "matches": []
    },
    {
      "regex": "[^,)]*",
      "exceptionStackTrace": null,
      "matches": [
        ",",
        ")",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "^.+\\..+$",
      "exceptionStackTrace": null,
      "matches": [
        "evil..",
        "evil.eVil",
        "evil.EVIL",
        "evil.ev_il",
        "evil.ev il",
        "evil.ev4il",
        "evil.e",
        "evil. ",
        "evil.6",
        "evil._",
        "evil.",
        "..evil",
        "eVil.evil",
        "EVIL.evil",
        "ev_il.evil",
        "ev il.evil",
        "ev4il.evil",
        "e.evil",
        " .evil",
        "6.evil",
        "_.evil",
        ".evil",
        "evil.evil"
      ]
    },
    {
      "regex": "^([^\\(]+)\\(",
      "exceptionStackTrace": null,
      "matches": [
        "((",
        "eVil(",
        "EVIL(",
        "ev_il(",
        "ev il(",
        "ev4il(",
        "e(",
        " (",
        "6(",
        "_(",
        "(",
        "evil("
      ]
    },
    { "regex": "$past", "exceptionStackTrace": null, "matches": ["past"] },
    {
      "regex": "nvalid input detected",
      "exceptionStackTrace": null,
      "matches": ["nvalid input detected"]
    },
    {
      "regex": "^(.)\\1  $",
      "exceptionStackTrace": null,
      "matches": ["_a  ", "Aa  ", "0a  ", " a  ", "aa  "]
    },
    {
      "regex": "<a class=\"param\" onclick=\"window.parent.setUrlFragment\\('\\w+'\\)\">(null|this|Boolean|Object|Array|Number|String|Integer|Float|TypedArray|ArrayBuffer)<\\/a>",
      "exceptionStackTrace": null,
      "matches": [
        "<a class=\"param\" onclick=\"windowaparentasetUrlFragment('eVil')\">null</a>",
        "<a class=\"param\" onclick=\"windowaparentasetUrlFragment('EVIL')\">null</a>",
        "<a class=\"param\" onclick=\"windowaparentasetUrlFragment('ev_il')\">null</a>",
        "<a class=\"param\" onclick=\"windowaparentasetUrlFragment('ev il')\">null</a>",
        "<a class=\"param\" onclick=\"windowaparentasetUrlFragment('ev4il')\">null</a>",
        "<a class=\"param\" onclick=\"windowaparentasetUrlFragment('e')\">null</a>",
        "<a class=\"param\" onclick=\"windowaparentasetUrlFragment(' ')\">null</a>",
        "<a class=\"param\" onclick=\"windowaparentasetUrlFragment('6')\">null</a>",
        "<a class=\"param\" onclick=\"windowaparentasetUrlFragment('_')\">null</a>",
        "<a class=\"param\" onclick=\"windowaparentasetUrlFragment('')\">null</a>",
        "<a class=\"param\" onclick=\"windowaparentAsetUrlFragment('evil')\">null</a>",
        "<a class=\"param\" onclick=\"windowaparent>setUrlFragment('evil')\">null</a>",
        "<a class=\"param\" onclick=\"windowaparent=setUrlFragment('evil')\">null</a>",
        "<a class=\"param\" onclick=\"windowaparent<setUrlFragment('evil')\">null</a>",
        "<a class=\"param\" onclick=\"windowaparent0setUrlFragment('evil')\">null</a>",
        "<a class=\"param\" onclick=\"windowaparent/setUrlFragment('evil')\">null</a>",
        "<a class=\"param\" onclick=\"windowaparent)setUrlFragment('evil')\">null</a>",
        "<a class=\"param\" onclick=\"windowaparent(setUrlFragment('evil')\">null</a>",
        "<a class=\"param\" onclick=\"windowaparent'setUrlFragment('evil')\">null</a>",
        "<a class=\"param\" onclick=\"windowaparent\"setUrlFragment('evil')\">null</a>",
        "<a class=\"param\" onclick=\"windowaparent setUrlFragment('evil')\">null</a>",
        "<a class=\"param\" onclick=\"windowAparentasetUrlFragment('evil')\">null</a>",
        "<a class=\"param\" onclick=\"window>parentasetUrlFragment('evil')\">null</a>",
        "<a class=\"param\" onclick=\"window=parentasetUrlFragment('evil')\">null</a>",
        "<a class=\"param\" onclick=\"window<parentasetUrlFragment('evil')\">null</a>",
        "<a class=\"param\" onclick=\"window0parentasetUrlFragment('evil')\">null</a>",
        "<a class=\"param\" onclick=\"window/parentasetUrlFragment('evil')\">null</a>",
        "<a class=\"param\" onclick=\"window)parentasetUrlFragment('evil')\">null</a>",
        "<a class=\"param\" onclick=\"window(parentasetUrlFragment('evil')\">null</a>",
        "<a class=\"param\" onclick=\"window'parentasetUrlFragment('evil')\">null</a>",
        "<a class=\"param\" onclick=\"window\"parentasetUrlFragment('evil')\">null</a>",
        "<a class=\"param\" onclick=\"window parentasetUrlFragment('evil')\">null</a>",
        "<a class=\"param\" onclick=\"windowaparentasetUrlFragment('evil')\">ArrayBuffer</a>",
        "<a class=\"param\" onclick=\"windowaparentasetUrlFragment('evil')\">TypedArray</a>",
        "<a class=\"param\" onclick=\"windowaparentasetUrlFragment('evil')\">Float</a>",
        "<a class=\"param\" onclick=\"windowaparentasetUrlFragment('evil')\">Integer</a>",
        "<a class=\"param\" onclick=\"windowaparentasetUrlFragment('evil')\">String</a>",
        "<a class=\"param\" onclick=\"windowaparentasetUrlFragment('evil')\">Number</a>",
        "<a class=\"param\" onclick=\"windowaparentasetUrlFragment('evil')\">Array</a>",
        "<a class=\"param\" onclick=\"windowaparentasetUrlFragment('evil')\">Object</a>",
        "<a class=\"param\" onclick=\"windowaparentasetUrlFragment('evil')\">Boolean</a>",
        "<a class=\"param\" onclick=\"windowaparentasetUrlFragment('evil')\">this</a>",
        "<a class=\"param\" onclick=\"windowaparentasetUrlFragment('evil')\">null</a>"
      ]
    },
    {
      "regex": "^just (?=now)|\\.+$",
      "exceptionStackTrace": null,
      "matches": ["..", "", ".", "just "]
    },
    {
      "regex": "(?<name>.*?)=(?<query>.*)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<n"
      },
      "matches": []
    },
    {
      "regex": "permission.* could not be found",
      "exceptionStackTrace": null,
      "matches": [
        "permissioneVil could not be found",
        "permissionEVIL could not be found",
        "permissionev_il could not be found",
        "permissionev il could not be found",
        "permissionev4il could not be found",
        "permissione could not be found",
        "permission  could not be found",
        "permission6 could not be found",
        "permission_ could not be found",
        "permission could not be found",
        "permissionevil could not be found"
      ]
    },
    {
      "regex": "(\\w[\\-\\w]*)(?:(:)((?:\"[^\\\"]*\")|(?:[\\w:\\/\\.\\-\\+]+)))?",
      "exceptionStackTrace": null,
      "matches": [
        "aevil::",
        "aevil:/",
        "aevil:.",
        "aevil:-",
        "aevil:+",
        "aevil:\"",
        "aevil:eVil",
        "aevil:EVIL",
        "aevil:ev_il",
        "aevil:ev il",
        "aevil:ev4il",
        "aevil:e",
        "aevil: ",
        "aevil:6",
        "aevil:_",
        "aevil:",
        "aevil:\"evil\":\"evil\"",
        "aevil",
        "aevil:\":\"",
        "aevil:\"/\"",
        "aevil:\".\"",
        "aevil:\"-\"",
        "aevil:\"+\"",
        "aevil:\"\"\"",
        "aevil:\"eVil\"",
        "aevil:\"EVIL\"",
        "aevil:\"ev_il\"",
        "aevil:\"ev il\"",
        "aevil:\"ev4il\"",
        "aevil:\"e\"",
        "aevil:\" \"",
        "aevil:\"6\"",
        "aevil:\"_\"",
        "aevil:\"\"",
        "a::\"evil\"",
        "a/:\"evil\"",
        "a.:\"evil\"",
        "a-:\"evil\"",
        "a+:\"evil\"",
        "a\":\"evil\"",
        "aeVil:\"evil\"",
        "aEVIL:\"evil\"",
        "aev_il:\"evil\"",
        "aev il:\"evil\"",
        "aev4il:\"evil\"",
        "ae:\"evil\"",
        "a :\"evil\"",
        "a6:\"evil\"",
        "a_:\"evil\"",
        "a:\"evil\"",
        "_evil:\"evil\"",
        "Aevil:\"evil\"",
        "0evil:\"evil\"",
        "a",
        "aevil:evil",
        "aevil:\"evil\""
      ]
    },
    {
      "regex": "(<merchantID>).+(</merchantID>)",
      "exceptionStackTrace": null,
      "matches": [
        "<merchantID>></merchantID>",
        "<merchantID><</merchantID>",
        "<merchantID>/</merchantID>",
        "<merchantID>eVil</merchantID>",
        "<merchantID>EVIL</merchantID>",
        "<merchantID>ev_il</merchantID>",
        "<merchantID>ev il</merchantID>",
        "<merchantID>ev4il</merchantID>",
        "<merchantID>e</merchantID>",
        "<merchantID> </merchantID>",
        "<merchantID>6</merchantID>",
        "<merchantID>_</merchantID>",
        "<merchantID></merchantID>",
        "<merchantID>evil</merchantID>"
      ]
    },
    {
      "regex": "(<E[^>]*><R>[Nn]\\x{ed}(?: ?ba|b)<\\/R> <A pl=\"n\" gnt=\"y\" gnd=\"f\">[^<]+<\\/A><\\/E>)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "incomplete escape \\x"
      },
      "matches": []
    },
    {
      "regex": "^([^#]+)(#[A-Za-z][\\w-]*)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil#a-",
        "evil#a#",
        "evil#aeVil",
        "evil#aEVIL",
        "evil#aev_il",
        "evil#aev il",
        "evil#aev4il",
        "evil#ae",
        "evil#a ",
        "evil#a6",
        "evil#a_",
        "evil#Aevil",
        "-#aevil",
        "##aevil",
        "eVil#aevil",
        "EVIL#aevil",
        "ev_il#aevil",
        "ev il#aevil",
        "ev4il#aevil",
        "e#aevil",
        " #aevil",
        "6#aevil",
        "_#aevil",
        "#aevil",
        "evil#a",
        "evil#aevil"
      ]
    },
    { "regex": "^WE", "exceptionStackTrace": null, "matches": ["WE"] },
    {
      "regex": "one of sides in multiplication must be a number",
      "exceptionStackTrace": null,
      "matches": ["one of sides in multiplication must be a number"]
    },
    {
      "regex": "master_used:",
      "exceptionStackTrace": null,
      "matches": ["master_used:"]
    },
    {
      "regex": "; *([Uu])([89]\\d{3}) Build",
      "exceptionStackTrace": null,
      "matches": [
        "; u90000 Build",
        "; u900 Build",
        "; u8000 Build",
        "; u0000 Build",
        "; a9000 Build",
        "; U9000 Build",
        "; A9000 Build",
        ";  u9000 Build",
        ";u9000 Build",
        "; u9000 Build"
      ]
    },
    {
      "regex": "^\\s*(==)\\s.*\\s(==)$\\n?",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "CVE-2013-0155",
      "exceptionStackTrace": null,
      "matches": ["CVE-2013-0155"]
    },
    {
      "regex": ".*-PRD$",
      "exceptionStackTrace": null,
      "matches": [
        "--PRD",
        "eVil-PRD",
        "EVIL-PRD",
        "ev_il-PRD",
        "ev il-PRD",
        "ev4il-PRD",
        "e-PRD",
        " -PRD",
        "6-PRD",
        "_-PRD",
        "-PRD",
        "evil-PRD"
      ]
    },
    {
      "regex": "client[0-5]",
      "exceptionStackTrace": null,
      "matches": ["client6", "client0"]
    },
    {
      "regex": "^[0-9]{3,7}$",
      "exceptionStackTrace": null,
      "matches": ["00000000", "0000000", "00", "000"]
    },
    {
      "regex": "(~)(?=\\S)(.*?\\S)\\1",
      "exceptionStackTrace": null,
      "matches": [
        "~evil~~",
        "~evil_~",
        "~evilA~",
        "~evil0~",
        "~evil ~",
        "~~a~",
        "~eVila~",
        "~EVILa~",
        "~ev_ila~",
        "~ev ila~",
        "~ev4ila~",
        "~ea~",
        "~ a~",
        "~6a~",
        "~_a~",
        "~a~",
        "~evila~"
      ]
    },
    {
      "regex": "dummy#update",
      "exceptionStackTrace": null,
      "matches": ["dummy#update"]
    },
    {
      "regex": "^I should not see a selected option$",
      "exceptionStackTrace": null,
      "matches": ["I should not see a selected option"]
    },
    { "regex": "^:[A-Z]", "exceptionStackTrace": null, "matches": [":A"] },
    {
      "regex": "^.+ INFO .+ \\[Dummy\\] Destroy on .+$",
      "exceptionStackTrace": null,
      "matches": [
        "evil INFO evil [Dummy] Destroy on ]",
        "evil INFO evil [Dummy] Destroy on [",
        "evil INFO evil [Dummy] Destroy on eVil",
        "evil INFO evil [Dummy] Destroy on EVIL",
        "evil INFO evil [Dummy] Destroy on ev_il",
        "evil INFO evil [Dummy] Destroy on ev il",
        "evil INFO evil [Dummy] Destroy on ev4il",
        "evil INFO evil [Dummy] Destroy on e",
        "evil INFO evil [Dummy] Destroy on  ",
        "evil INFO evil [Dummy] Destroy on 6",
        "evil INFO evil [Dummy] Destroy on _",
        "evil INFO evil [Dummy] Destroy on ",
        "evil INFO ] [Dummy] Destroy on evil",
        "evil INFO [ [Dummy] Destroy on evil",
        "evil INFO eVil [Dummy] Destroy on evil",
        "evil INFO EVIL [Dummy] Destroy on evil",
        "evil INFO ev_il [Dummy] Destroy on evil",
        "evil INFO ev il [Dummy] Destroy on evil",
        "evil INFO ev4il [Dummy] Destroy on evil",
        "evil INFO e [Dummy] Destroy on evil",
        "evil INFO   [Dummy] Destroy on evil",
        "evil INFO 6 [Dummy] Destroy on evil",
        "evil INFO _ [Dummy] Destroy on evil",
        "evil INFO  [Dummy] Destroy on evil",
        "] INFO evil [Dummy] Destroy on evil",
        "[ INFO evil [Dummy] Destroy on evil",
        "eVil INFO evil [Dummy] Destroy on evil",
        "EVIL INFO evil [Dummy] Destroy on evil",
        "ev_il INFO evil [Dummy] Destroy on evil",
        "ev il INFO evil [Dummy] Destroy on evil",
        "ev4il INFO evil [Dummy] Destroy on evil",
        "e INFO evil [Dummy] Destroy on evil",
        "  INFO evil [Dummy] Destroy on evil",
        "6 INFO evil [Dummy] Destroy on evil",
        "_ INFO evil [Dummy] Destroy on evil",
        " INFO evil [Dummy] Destroy on evil",
        "evil INFO evil [Dummy] Destroy on evil"
      ]
    },
    {
      "regex": "<tt>([^<]+)</tt>",
      "exceptionStackTrace": null,
      "matches": [
        "<tt>></tt>",
        "<tt><</tt>",
        "<tt>/</tt>",
        "<tt>eVil</tt>",
        "<tt>EVIL</tt>",
        "<tt>ev_il</tt>",
        "<tt>ev il</tt>",
        "<tt>ev4il</tt>",
        "<tt>e</tt>",
        "<tt> </tt>",
        "<tt>6</tt>",
        "<tt>_</tt>",
        "<tt></tt>",
        "<tt>evil</tt>"
      ]
    },
    { "regex": "perlio$", "exceptionStackTrace": null, "matches": ["perlio"] },
    {
      "regex": "^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^/]+?|)(\\.[^./]*|))(?:[/]*)$",
      "exceptionStackTrace": null,
      "matches": [
        "/evilevilevil.evil/",
        "/evil/.evil/",
        "/evileVil.evil/",
        "/evilEVIL.evil/",
        "/evilev_il.evil/",
        "/evilev il.evil/",
        "/evilev4il.evil/",
        "/evile.evil/",
        "/evil .evil/",
        "/evil6.evil/",
        "/evil_.evil/",
        "/evil..evil//",
        "/evil..evil",
        "/evil..evil.evil/",
        "/evil./",
        "/evil..//",
        "/evil.../",
        "/evil..eVil/",
        "/evil..EVIL/",
        "/evil..ev_il/",
        "/evil..ev il/",
        "/evil..ev4il/",
        "/evil..e/",
        "/evil.. /",
        "/evil..6/",
        "/evil.._/",
        "/evil../",
        "/evil....evil/",
        "/evil...evil/",
        "/evil.evil/",
        "//..evil/",
        "/...evil/",
        "/eVil..evil/",
        "/EVIL..evil/",
        "/ev_il..evil/",
        "/ev il..evil/",
        "/ev4il..evil/",
        "/e..evil/",
        "/ ..evil/",
        "/6..evil/",
        "/_..evil/",
        "/..evil/",
        "//evil..evil/",
        "evil..evil/",
        "",
        ".",
        "/evilevil.evil/",
        "/evil..evil/"
      ]
    },
    {
      "regex": "^[^/]*\\.(jar|war)",
      "exceptionStackTrace": null,
      "matches": [
        "/.jar",
        "..jar",
        "eVil.jar",
        "EVIL.jar",
        "ev_il.jar",
        "ev il.jar",
        "ev4il.jar",
        "e.jar",
        " .jar",
        "6.jar",
        "_.jar",
        ".war",
        ".jar",
        "evil.war",
        "evil.jar"
      ]
    },
    {
      "regex": "^Windows-874$",
      "exceptionStackTrace": null,
      "matches": ["Windows-874"]
    },
    {
      "regex": "<title><!\\[CDATA\\[Short and Sweet\\]\\]>",
      "exceptionStackTrace": null,
      "matches": ["<title><![CDATA[Short and Sweet]]>"]
    },
    {
      "regex": "[]*1",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unterminated character set"
      },
      "matches": []
    },
    {
      "regex": ":([^:]+)\\*:",
      "exceptionStackTrace": null,
      "matches": [
        "::*:",
        ":**:",
        ":eVil*:",
        ":EVIL*:",
        ":ev_il*:",
        ":ev il*:",
        ":ev4il*:",
        ":e*:",
        ": *:",
        ":6*:",
        ":_*:",
        ":*:",
        ":evil*:"
      ]
    },
    {
      "regex": "^\\S+\\s+\\d+\\s+\\d+\\s+-?[\\dEe.]+",
      "exceptionStackTrace": null,
      "matches": [
        "evil 0 0 -..",
        "evil 0 0 -",
        "evil 0 0 -e",
        "evil 0 0 -a",
        "evil 0 0 -E",
        "evil 0 0 -A",
        "evil 0 0 -0",
        "evil 0 0 --.",
        "evil 0 0  -.",
        "evil 0 0-.",
        "evil 0 00 -.",
        "evil 0  -.",
        "evil 0  0 -.",
        "evil 00 -.",
        "evil 00 0 -.",
        "evil  0 -.",
        "evil  0 0 -.",
        "evil0 0 -.",
        ". 0 0 -.",
        "- 0 0 -.",
        "eVil 0 0 -.",
        "EVIL 0 0 -.",
        "ev_il 0 0 -.",
        "ev il 0 0 -.",
        "ev4il 0 0 -.",
        "e 0 0 -.",
        "  0 0 -.",
        "6 0 0 -.",
        "_ 0 0 -.",
        " 0 0 -.",
        "evil 0 0 .",
        "evil 0 0 -."
      ]
    },
    {
      "regex": "^I insert the text \"([^\"]*)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "I insert the text \"\"\"",
        "I insert the text \"eVil\"",
        "I insert the text \"EVIL\"",
        "I insert the text \"ev_il\"",
        "I insert the text \"ev il\"",
        "I insert the text \"ev4il\"",
        "I insert the text \"e\"",
        "I insert the text \" \"",
        "I insert the text \"6\"",
        "I insert the text \"_\"",
        "I insert the text \"\"",
        "I insert the text \"evil\""
      ]
    },
    {
      "regex": "^the inflated responses key '(.+)' item '(\\d+)' should be '(.+)'$",
      "exceptionStackTrace": null,
      "matches": [
        "the inflated responses key 'evil' item '0' should be '''",
        "the inflated responses key 'evil' item '0' should be 'eVil'",
        "the inflated responses key 'evil' item '0' should be 'EVIL'",
        "the inflated responses key 'evil' item '0' should be 'ev_il'",
        "the inflated responses key 'evil' item '0' should be 'ev il'",
        "the inflated responses key 'evil' item '0' should be 'ev4il'",
        "the inflated responses key 'evil' item '0' should be 'e'",
        "the inflated responses key 'evil' item '0' should be ' '",
        "the inflated responses key 'evil' item '0' should be '6'",
        "the inflated responses key 'evil' item '0' should be '_'",
        "the inflated responses key 'evil' item '0' should be ''",
        "the inflated responses key 'evil' item '00' should be 'evil'",
        "the inflated responses key 'evil' item '' should be 'evil'",
        "the inflated responses key ''' item '0' should be 'evil'",
        "the inflated responses key 'eVil' item '0' should be 'evil'",
        "the inflated responses key 'EVIL' item '0' should be 'evil'",
        "the inflated responses key 'ev_il' item '0' should be 'evil'",
        "the inflated responses key 'ev il' item '0' should be 'evil'",
        "the inflated responses key 'ev4il' item '0' should be 'evil'",
        "the inflated responses key 'e' item '0' should be 'evil'",
        "the inflated responses key ' ' item '0' should be 'evil'",
        "the inflated responses key '6' item '0' should be 'evil'",
        "the inflated responses key '_' item '0' should be 'evil'",
        "the inflated responses key '' item '0' should be 'evil'",
        "the inflated responses key 'evil' item '0' should be 'evil'"
      ]
    },
    {
      "regex": "\\.([^.]*$)",
      "exceptionStackTrace": null,
      "matches": [
        "..",
        ".eVil",
        ".EVIL",
        ".ev_il",
        ".ev il",
        ".ev4il",
        ".e",
        ". ",
        ".6",
        "._",
        ".",
        ".evil"
      ]
    },
    {
      "regex": "^(?:A(?:DDRESS|RTICLE|SIDE|UDIO)|BLOCKQUOTE|CAPTION|D(?:[DLT]|IV)|F(?:IGURE|IGCAPTION|OOTER)|H[1-6]|HEADER|L(?:ABEL|EGEND|I)|O(?:L|UTPUT)|P(?:RE)?|SECTION|T(?:ABLE|BODY|D|FOOT|H|HEAD|R)|COL(?:GROUP)?|UL)$",
      "exceptionStackTrace": null,
      "matches": [
        "COLGROUPGROUP",
        "PRERE",
        "H0",
        "DL",
        "DD",
        "DA",
        "COL",
        "P",
        "UL",
        "COLGROUP",
        "TR",
        "THEAD",
        "TH",
        "TFOOT",
        "TD",
        "TBODY",
        "TABLE",
        "SECTION",
        "PRE",
        "OUTPUT",
        "OL",
        "LI",
        "LEGEND",
        "LABEL",
        "HEADER",
        "H1",
        "FOOTER",
        "FIGCAPTION",
        "FIGURE",
        "DIV",
        "DT",
        "CAPTION",
        "BLOCKQUOTE",
        "AUDIO",
        "ASIDE",
        "ARTICLE",
        "ADDRESS"
      ]
    },
    {
      "regex": "(?is)EXTRACT\\(\\s*DATE\\s+FROM\\s+",
      "exceptionStackTrace": null,
      "matches": [
        "EXTRACT( DATE FROM  ",
        "EXTRACT( DATE FROM",
        "EXTRACT( DATE  FROM ",
        "EXTRACT( DATEFROM ",
        "EXTRACT(  DATE FROM ",
        "EXTRACT(DATE FROM ",
        "EXTRACT( DATE FROM "
      ]
    },
    {
      "regex": "default async function",
      "exceptionStackTrace": null,
      "matches": ["default async function"]
    },
    {
      "regex": "([^\\[<]|<!--.*?-->|<(script|style).*?\\2>|<(?!\\?(lasso(script)?|=))|\\[(?!noprocess))+",
      "exceptionStackTrace": null,
      "matches": [
        "<script[script>",
        "<script?script>",
        "<script>script>",
        "<script=script>",
        "<script<script>",
        "<script-script>",
        "<script!script>",
        "<scripteVilscript>",
        "<scriptEVILscript>",
        "<scriptev_ilscript>",
        "<scriptev ilscript>",
        "<scriptev4ilscript>",
        "<scriptescript>",
        "<script script>",
        "<script6script>",
        "<script_script>",
        "<!--[-->",
        "<!--?-->",
        "<!-->-->",
        "<!--=-->",
        "<!--<-->",
        "<!----->",
        "<!--!-->",
        "<!--eVil-->",
        "<!--EVIL-->",
        "<!--ev_il-->",
        "<!--ev il-->",
        "<!--ev4il-->",
        "<!--e-->",
        "<!-- -->",
        "<!--6-->",
        "<!--_-->",
        "aa",
        "",
        "A",
        "?",
        ">",
        "=",
        "0",
        "-",
        "!",
        " ",
        "<stylescript>",
        "<scriptscript>",
        "<!---->",
        "[",
        "<",
        "<styleevilscript>",
        "<scriptevilscript>",
        "<!--evil-->",
        "a"
      ]
    },
    {
      "regex": "^\\s*$name\\s+(.+)",
      "exceptionStackTrace": null,
      "matches": [
        " name eVil",
        " name EVIL",
        " name ev_il",
        " name ev il",
        " name ev4il",
        " name e",
        " name  ",
        " name 6",
        " name _",
        " name ",
        " name  evil",
        " nameevil",
        "  name evil",
        "name evil",
        " name evil"
      ]
    },
    {
      "regex": "^\\# HTTP Cookie File",
      "exceptionStackTrace": null,
      "matches": ["# HTTP Cookie File"]
    },
    {
      "regex": "^Error:.*data too large for key size$",
      "exceptionStackTrace": null,
      "matches": [
        "Error::data too large for key size",
        "Error:eVildata too large for key size",
        "Error:EVILdata too large for key size",
        "Error:ev_ildata too large for key size",
        "Error:ev ildata too large for key size",
        "Error:ev4ildata too large for key size",
        "Error:edata too large for key size",
        "Error: data too large for key size",
        "Error:6data too large for key size",
        "Error:_data too large for key size",
        "Error:data too large for key size",
        "Error:evildata too large for key size"
      ]
    },
    {
      "regex": "\\b(\\w+)(_)\\b",
      "exceptionStackTrace": null,
      "matches": [
        "eVil_",
        "EVIL_",
        "ev_il_",
        "ev il_",
        "ev4il_",
        "e_",
        " _",
        "6_",
        "__",
        "_",
        "evil_"
      ]
    },
    {
      "regex": "^\\/some\\/(.+)?some$",
      "exceptionStackTrace": null,
      "matches": [
        "/some/evilevilsome",
        "/some//some",
        "/some/eVilsome",
        "/some/EVILsome",
        "/some/ev_ilsome",
        "/some/ev ilsome",
        "/some/ev4ilsome",
        "/some/esome",
        "/some/ some",
        "/some/6some",
        "/some/_some",
        "/some/some",
        "/some/evilsome"
      ]
    },
    {
      "regex": "(:name)\\s+(?=[a-zA-Z+!\\-_?0-9*~\\#@'`\\/.$=])",
      "exceptionStackTrace": null,
      "matches": [":name  ", ":name", ":name "]
    },
    { "regex": "%DATE%", "exceptionStackTrace": null, "matches": ["%DATE%"] },
    {
      "regex": "^TARGET\\s+\\=\\s+([^\\s][\\w\\.\\/\\s]+)\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        "TARGET = aevil  ",
        "TARGET = a= ",
        "TARGET = a/ ",
        "TARGET = a. ",
        "TARGET = aeVil ",
        "TARGET = aEVIL ",
        "TARGET = aev_il ",
        "TARGET = aev il ",
        "TARGET = aev4il ",
        "TARGET = ae ",
        "TARGET = a  ",
        "TARGET = a6 ",
        "TARGET = a_ ",
        "TARGET = a ",
        "TARGET = Aevil ",
        "TARGET = =evil ",
        "TARGET = 0evil ",
        "TARGET = /evil ",
        "TARGET = .evil ",
        "TARGET =  evil ",
        "TARGET =  aevil ",
        "TARGET =aevil ",
        "TARGET  = aevil ",
        "TARGET= aevil ",
        "TARGET = aevil",
        "TARGET = aevil "
      ]
    },
    {
      "regex": "\\A$ppcons2",
      "exceptionStackTrace": null,
      "matches": ["ppcons2"]
    },
    {
      "regex": "(\\bAggregates\\s*:\\s*)(?:\\w+(?:\\s+with\\s+\\w+)?\\s*,\\s*)*\\w+(?:\\s+with\\s+\\w+)?",
      "exceptionStackTrace": null,
      "matches": [
        "Aggregates : evil with evil , evil with evil with evil",
        "Aggregates : evil with evil , evil",
        "Aggregates : evil with evil , evil with eVil",
        "Aggregates : evil with evil , evil with EVIL",
        "Aggregates : evil with evil , evil with ev_il",
        "Aggregates : evil with evil , evil with ev il",
        "Aggregates : evil with evil , evil with ev4il",
        "Aggregates : evil with evil , evil with e",
        "Aggregates : evil with evil , evil with  ",
        "Aggregates : evil with evil , evil with 6",
        "Aggregates : evil with evil , evil with _",
        "Aggregates : evil with evil , evil with ",
        "Aggregates : evil with evil , evil with  evil",
        "Aggregates : evil with evil , evil withevil",
        "Aggregates : evil with evil , evil  with evil",
        "Aggregates : evil with evil , evilwith evil",
        "Aggregates : evil with evil , eVil with evil",
        "Aggregates : evil with evil , EVIL with evil",
        "Aggregates : evil with evil , ev_il with evil",
        "Aggregates : evil with evil , ev il with evil",
        "Aggregates : evil with evil , ev4il with evil",
        "Aggregates : evil with evil , e with evil",
        "Aggregates : evil with evil ,   with evil",
        "Aggregates : evil with evil , 6 with evil",
        "Aggregates : evil with evil , _ with evil",
        "Aggregates : evil with evil ,  with evil",
        "Aggregates : evil with evil , evil with evil , evil with evil",
        "Aggregates : evil with evil",
        "Aggregates : evil with evil ,  evil with evil",
        "Aggregates : evil with evil ,evil with evil",
        "Aggregates : evil with evil  , evil with evil",
        "Aggregates : evil with evil, evil with evil",
        "Aggregates : evil with evil with evil , evil with evil",
        "Aggregates : evil , evil with evil",
        "Aggregates : evil with eVil , evil with evil",
        "Aggregates : evil with EVIL , evil with evil",
        "Aggregates : evil with ev_il , evil with evil",
        "Aggregates : evil with ev il , evil with evil",
        "Aggregates : evil with ev4il , evil with evil",
        "Aggregates : evil with e , evil with evil",
        "Aggregates : evil with   , evil with evil",
        "Aggregates : evil with 6 , evil with evil",
        "Aggregates : evil with _ , evil with evil",
        "Aggregates : evil with  , evil with evil",
        "Aggregates : evil with  evil , evil with evil",
        "Aggregates : evil withevil , evil with evil",
        "Aggregates : evil  with evil , evil with evil",
        "Aggregates : evilwith evil , evil with evil",
        "Aggregates : eVil with evil , evil with evil",
        "Aggregates : EVIL with evil , evil with evil",
        "Aggregates : ev_il with evil , evil with evil",
        "Aggregates : ev il with evil , evil with evil",
        "Aggregates : ev4il with evil , evil with evil",
        "Aggregates : e with evil , evil with evil",
        "Aggregates :   with evil , evil with evil",
        "Aggregates : 6 with evil , evil with evil",
        "Aggregates : _ with evil , evil with evil",
        "Aggregates :  with evil , evil with evil",
        "Aggregates :  evil with evil , evil with evil",
        "Aggregates :evil with evil , evil with evil",
        "Aggregates  : evil with evil , evil with evil",
        "Aggregates: evil with evil , evil with evil",
        "Aggregates:evil",
        "Aggregates : evil with evil , evil with evil"
      ]
    },
    {
      "regex": "\\d*\\.\\d*",
      "exceptionStackTrace": null,
      "matches": ["0.00", "0.", "00.0", ".0", ".", "0.0"]
    },
    {
      "regex": "Allowed Gear Sizes",
      "exceptionStackTrace": null,
      "matches": ["Allowed Gear Sizes"]
    },
    {
      "regex": "Method: GET",
      "exceptionStackTrace": null,
      "matches": ["Method: GET"]
    },
    {
      "regex": "\\\\[_*'`+#]|\\\\{2}[_*'`+#]{2}",
      "exceptionStackTrace": null,
      "matches": [
        "\\\\###",
        "\\\\#",
        "\\\\`#",
        "\\\\_#",
        "\\\\+#",
        "\\\\*#",
        "\\\\'#",
        "\\\\\\##",
        "\\##",
        "\\`",
        "\\_",
        "\\+",
        "\\*",
        "\\'",
        "\\\\##",
        "\\#"
      ]
    },
    {
      "regex": "^$search_field$",
      "exceptionStackTrace": null,
      "matches": ["search_field"]
    },
    {
      "regex": "^Could not find configuration file for testdoesnotexist domain",
      "exceptionStackTrace": null,
      "matches": ["Could not find configuration file for testdoesnotexist domain"]
    },
    {
      "regex": "/\\* Zend_Code_Generator_FileGenerator-UseMarker \\*/",
      "exceptionStackTrace": null,
      "matches": ["/* Zend_Code_Generator_FileGenerator-UseMarker */"]
    },
    {
      "regex": "^upload \\[(\\d+)]",
      "exceptionStackTrace": null,
      "matches": ["upload [00]", "upload []", "upload [0]"]
    },
    { "regex": "[*][(]=o", "exceptionStackTrace": null, "matches": ["*(=o"] },
    {
      "regex": "$state\\s+(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "state eVil",
        "state EVIL",
        "state ev_il",
        "state ev il",
        "state ev4il",
        "state e",
        "state  ",
        "state 6",
        "state _",
        "state  evil",
        "stateevil",
        "state ",
        "state evil"
      ]
    },
    { "regex": "([><])", "exceptionStackTrace": null, "matches": [">", "<"] },
    {
      "regex": "^(\\\\[0-7][0-7]?[0-7]?)",
      "exceptionStackTrace": null,
      "matches": ["\\008", "\\0000", "\\00", "\\080", "\\800", "\\0", "\\000"]
    },
    {
      "regex": "class Users::SubscriptionsWithDeviseController < ActivityNotification::SubscriptionsWithDeviseController",
      "exceptionStackTrace": null,
      "matches": [
        "class Users::SubscriptionsWithDeviseController < ActivityNotification::SubscriptionsWithDeviseController"
      ]
    },
    {
      "regex": "\\A[0-9A-Za-z_-]+\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "^(\\s*(\\w+) +- )",
      "exceptionStackTrace": null,
      "matches": [
        " evil  - ",
        " evil- ",
        " eVil - ",
        " EVIL - ",
        " ev_il - ",
        " ev il - ",
        " ev4il - ",
        " e - ",
        "   - ",
        " 6 - ",
        " _ - ",
        "  - ",
        "  evil - ",
        "evil - ",
        " evil - "
      ]
    },
    {
      "regex": "^(\\/[^\\n\\/]+\\/|\\\"[^\\n\\\"]*\\\"|\\'[^\\n\\']*\\')$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "The provided downloadable cartridge 'manifest://test' cannot be loaded.+Name is a required element",
      "exceptionStackTrace": null,
      "matches": [
        "The provided downloadable cartridge 'manifest://test' cannot be loaded:Name is a required element",
        "The provided downloadable cartridge 'manifest://test' cannot be loaded/Name is a required element",
        "The provided downloadable cartridge 'manifest://test' cannot be loaded'Name is a required element",
        "The provided downloadable cartridge 'manifest://test' cannot be loadedeVilName is a required element",
        "The provided downloadable cartridge 'manifest://test' cannot be loadedEVILName is a required element",
        "The provided downloadable cartridge 'manifest://test' cannot be loadedev_ilName is a required element",
        "The provided downloadable cartridge 'manifest://test' cannot be loadedev ilName is a required element",
        "The provided downloadable cartridge 'manifest://test' cannot be loadedev4ilName is a required element",
        "The provided downloadable cartridge 'manifest://test' cannot be loadedeName is a required element",
        "The provided downloadable cartridge 'manifest://test' cannot be loaded Name is a required element",
        "The provided downloadable cartridge 'manifest://test' cannot be loaded6Name is a required element",
        "The provided downloadable cartridge 'manifest://test' cannot be loaded_Name is a required element",
        "The provided downloadable cartridge 'manifest://test' cannot be loadedName is a required element",
        "The provided downloadable cartridge 'manifest://test' cannot be loadedevilName is a required element"
      ]
    },
    {
      "regex": "Unknown packet log writer: MYLOGWRITER",
      "exceptionStackTrace": null,
      "matches": ["Unknown packet log writer: MYLOGWRITER"]
    },
    {
      "regex": "^(\\d+)\\.(\\d+)\\.(\\d+)(?:\\.(.*?))?$",
      "exceptionStackTrace": null,
      "matches": [
        "0.0.0.evil.evil",
        "0.0.0..",
        "0.0.0.eVil",
        "0.0.0.EVIL",
        "0.0.0.ev_il",
        "0.0.0.ev il",
        "0.0.0.ev4il",
        "0.0.0.e",
        "0.0.0. ",
        "0.0.0.6",
        "0.0.0._",
        "0.0.0.",
        "0.0.00.evil",
        "0.0..evil",
        "0.00.0.evil",
        "0..0.evil",
        "00.0.0.evil",
        ".0.0.evil",
        "0.0.0",
        "0.0.0.evil"
      ]
    },
    {
      "regex": "{{ UUID }},",
      "exceptionStackTrace": null,
      "matches": ["{{ UUID }},"]
    },
    {
      "regex": "Content-Length: 10\\r\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": "ERROR - Thread\\[TestLoggingExecutor-[^\\]]+\\] ended abnormally with an exception\\njava.lang.RuntimeException: D'oh!\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^%action\\s+(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "%action %",
        "%action eVil",
        "%action EVIL",
        "%action ev_il",
        "%action ev il",
        "%action ev4il",
        "%action e",
        "%action  ",
        "%action 6",
        "%action _",
        "%action  evil",
        "%actionevil",
        "%action ",
        "%action evil"
      ]
    },
    {
      "regex": "ParameterNotFoundException",
      "exceptionStackTrace": null,
      "matches": ["ParameterNotFoundException"]
    },
    {
      "regex": "https?://[^?#]+\\?([^#]+)",
      "exceptionStackTrace": null,
      "matches": [
        "https://evil??",
        "https://evil?:",
        "https://evil?/",
        "https://evil?#",
        "https://evil?eVil",
        "https://evil?EVIL",
        "https://evil?ev_il",
        "https://evil?ev il",
        "https://evil?ev4il",
        "https://evil?e",
        "https://evil? ",
        "https://evil?6",
        "https://evil?_",
        "https://evil?",
        "https://??evil",
        "https://:?evil",
        "https:///?evil",
        "https://#?evil",
        "https://eVil?evil",
        "https://EVIL?evil",
        "https://ev_il?evil",
        "https://ev il?evil",
        "https://ev4il?evil",
        "https://e?evil",
        "https:// ?evil",
        "https://6?evil",
        "https://_?evil",
        "https://?evil",
        "httpss://evil?evil",
        "http://evil?evil",
        "https://evil?evil"
      ]
    },
    {
      "regex": "^[+-]?0x[0-9a-fA-F]+",
      "exceptionStackTrace": null,
      "matches": [
        "-0xAA",
        "-0x",
        "-0xg",
        "-0xa",
        "-0xG",
        "-0x0",
        "--0xA",
        "+0xA",
        "0xA",
        "-0xA"
      ]
    },
    {
      "regex": "^[\\w-]+:(?=.)",
      "exceptionStackTrace": null,
      "matches": [
        "::",
        "-:",
        "eVil:",
        "EVIL:",
        "ev_il:",
        "ev il:",
        "ev4il:",
        "e:",
        " :",
        "6:",
        "_:",
        ":",
        "evil:"
      ]
    },
    {
      "regex": "{(.*?)\u2591([^#]*?)}",
      "exceptionStackTrace": null,
      "matches": [
        "{evil\u2591}}",
        "{evil\u2591{}",
        "{evil\u2591#}",
        "{evil\u2591eVil}",
        "{evil\u2591EVIL}",
        "{evil\u2591ev_il}",
        "{evil\u2591ev il}",
        "{evil\u2591ev4il}",
        "{evil\u2591e}",
        "{evil\u2591 }",
        "{evil\u25916}",
        "{evil\u2591_}",
        "{evil\u2591}",
        "{}\u2591evil}",
        "{{\u2591evil}",
        "{#\u2591evil}",
        "{eVil\u2591evil}",
        "{EVIL\u2591evil}",
        "{ev_il\u2591evil}",
        "{ev il\u2591evil}",
        "{ev4il\u2591evil}",
        "{e\u2591evil}",
        "{ \u2591evil}",
        "{6\u2591evil}",
        "{_\u2591evil}",
        "{\u2591evil}",
        "{\u2591}",
        "{evil\u2591evil}"
      ]
    },
    {
      "regex": "\\-([0-9]+)_rootimg_snap",
      "exceptionStackTrace": null,
      "matches": ["-00_rootimg_snap", "-_rootimg_snap", "-0_rootimg_snap"]
    },
    {
      "regex": "^from \\[(${IP_ADDRESS})\\] by (\\S+) \\(Post",
      "exceptionStackTrace": null,
      "matches": [
        "from [{IP_ADDRESS}] by } (Post",
        "from [{IP_ADDRESS}] by { (Post",
        "from [{IP_ADDRESS}] by ] (Post",
        "from [{IP_ADDRESS}] by [ (Post",
        "from [{IP_ADDRESS}] by ( (Post",
        "from [{IP_ADDRESS}] by eVil (Post",
        "from [{IP_ADDRESS}] by EVIL (Post",
        "from [{IP_ADDRESS}] by ev_il (Post",
        "from [{IP_ADDRESS}] by ev il (Post",
        "from [{IP_ADDRESS}] by ev4il (Post",
        "from [{IP_ADDRESS}] by e (Post",
        "from [{IP_ADDRESS}] by   (Post",
        "from [{IP_ADDRESS}] by 6 (Post",
        "from [{IP_ADDRESS}] by _ (Post",
        "from [{IP_ADDRESS}] by  (Post",
        "from [{IP_ADDRESS}] by evil (Post"
      ]
    },
    {
      "regex": "handle keyword argument",
      "exceptionStackTrace": null,
      "matches": ["handle keyword argument"]
    },
    {
      "regex": "^([\\w-]+)\\s([\\S]+)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil -",
        "evil eVil",
        "evil EVIL",
        "evil ev_il",
        "evil ev il",
        "evil ev4il",
        "evil e",
        "evil  ",
        "evil 6",
        "evil _",
        "evil ",
        "- evil",
        "eVil evil",
        "EVIL evil",
        "ev_il evil",
        "ev il evil",
        "ev4il evil",
        "e evil",
        "  evil",
        "6 evil",
        "_ evil",
        " evil",
        "evil evil"
      ]
    },
    {
      "regex": "[\\u00EF\\u00EE]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 239"
      },
      "matches": []
    },
    {
      "regex": "[^A-Za-z0-9.-_]+",
      "exceptionStackTrace": null,
      "matches": [
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "^(?:OUTPUT)",
      "exceptionStackTrace": null,
      "matches": ["OUTPUT"]
    },
    {
      "regex": "\\b0+(?=\\d)",
      "exceptionStackTrace": null,
      "matches": ["00", "", "0"]
    },
    {
      "regex": "^I run \"([^\"]*)\" on node \"([^\"]*)\" and overwrite attributes with:$",
      "exceptionStackTrace": null,
      "matches": [
        "I run \"evil\" on node \":\" and overwrite attributes with:",
        "I run \"evil\" on node \"\"\" and overwrite attributes with:",
        "I run \"evil\" on node \"eVil\" and overwrite attributes with:",
        "I run \"evil\" on node \"EVIL\" and overwrite attributes with:",
        "I run \"evil\" on node \"ev_il\" and overwrite attributes with:",
        "I run \"evil\" on node \"ev il\" and overwrite attributes with:",
        "I run \"evil\" on node \"ev4il\" and overwrite attributes with:",
        "I run \"evil\" on node \"e\" and overwrite attributes with:",
        "I run \"evil\" on node \" \" and overwrite attributes with:",
        "I run \"evil\" on node \"6\" and overwrite attributes with:",
        "I run \"evil\" on node \"_\" and overwrite attributes with:",
        "I run \"evil\" on node \"\" and overwrite attributes with:",
        "I run \":\" on node \"evil\" and overwrite attributes with:",
        "I run \"\"\" on node \"evil\" and overwrite attributes with:",
        "I run \"eVil\" on node \"evil\" and overwrite attributes with:",
        "I run \"EVIL\" on node \"evil\" and overwrite attributes with:",
        "I run \"ev_il\" on node \"evil\" and overwrite attributes with:",
        "I run \"ev il\" on node \"evil\" and overwrite attributes with:",
        "I run \"ev4il\" on node \"evil\" and overwrite attributes with:",
        "I run \"e\" on node \"evil\" and overwrite attributes with:",
        "I run \" \" on node \"evil\" and overwrite attributes with:",
        "I run \"6\" on node \"evil\" and overwrite attributes with:",
        "I run \"_\" on node \"evil\" and overwrite attributes with:",
        "I run \"\" on node \"evil\" and overwrite attributes with:",
        "I run \"\" on node \"\" and overwrite attributes with:",
        "I run \"evil\" on node \"evil\" and overwrite attributes with:"
      ]
    },
    { "regex": "io time$", "exceptionStackTrace": null, "matches": ["io time"] },
    {
      "regex": "(^[^.].*)\\.test$",
      "exceptionStackTrace": null,
      "matches": [
        "a..test",
        "aeVil.test",
        "aEVIL.test",
        "aev_il.test",
        "aev il.test",
        "aev4il.test",
        "ae.test",
        "a .test",
        "a6.test",
        "a_.test",
        "Aevil.test",
        "0evil.test",
        ".evil.test",
        " evil.test",
        "a.test",
        "aevil.test"
      ]
    },
    {
      "regex": "\\A(https?:\\/\\/)",
      "exceptionStackTrace": null,
      "matches": ["httpss://", "http://", "https://"]
    },
    {
      "regex": "ERROR: Which man page do you want to convert?",
      "exceptionStackTrace": null,
      "matches": [
        "ERROR: Which man page do you want to convertt",
        "ERROR: Which man page do you want to conver",
        "ERROR: Which man page do you want to convert"
      ]
    },
    {
      "regex": "^\\Q$pat\\E",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\Q"
      },
      "matches": []
    },
    {
      "regex": "(?i)\\bsession_(s(tart|et_(save_handler|cookie_params)|ave_path)|cache_(expire|limiter)|name|i(s_registered|d)|de(stroy|code)|un(set|register)|encode|write_close|reg(ister|enerate_id)|get_cookie_params|module_name)(?=\\s*\\()",
      "exceptionStackTrace": null,
      "matches": [
        "session_module_name",
        "session_get_cookie_params",
        "session_regenerate_id",
        "session_register",
        "session_write_close",
        "session_encode",
        "session_unregister",
        "session_unset",
        "session_decode",
        "session_destroy",
        "session_id",
        "session_is_registered",
        "session_name",
        "session_cache_limiter",
        "session_cache_expire",
        "session_save_path",
        "session_set_cookie_params",
        "session_set_save_handler",
        "session_start"
      ]
    },
    {
      "regex": ".*\\.wav$",
      "exceptionStackTrace": null,
      "matches": [
        "..wav",
        "eVil.wav",
        "EVIL.wav",
        "ev_il.wav",
        "ev il.wav",
        "ev4il.wav",
        "e.wav",
        " .wav",
        "6.wav",
        "_.wav",
        ".wav",
        "evil.wav"
      ]
    },
    {
      "regex": "-s(\\d+)",
      "exceptionStackTrace": null,
      "matches": ["-s00", "-s", "-s0"]
    },
    {
      "regex": "<span (?:class=\"colour\" )?style=\"color:(.+?)\"(?: class=\"colour\")?>(.*?)",
      "exceptionStackTrace": null,
      "matches": [
        "<span class=\"colour\" style=\"color:evil\" class=\"colour\">>",
        "<span class=\"colour\" style=\"color:evil\" class=\"colour\">=",
        "<span class=\"colour\" style=\"color:evil\" class=\"colour\"><",
        "<span class=\"colour\" style=\"color:evil\" class=\"colour\">:",
        "<span class=\"colour\" style=\"color:evil\" class=\"colour\">\"",
        "<span class=\"colour\" style=\"color:evil\" class=\"colour\">eVil",
        "<span class=\"colour\" style=\"color:evil\" class=\"colour\">EVIL",
        "<span class=\"colour\" style=\"color:evil\" class=\"colour\">ev_il",
        "<span class=\"colour\" style=\"color:evil\" class=\"colour\">ev il",
        "<span class=\"colour\" style=\"color:evil\" class=\"colour\">ev4il",
        "<span class=\"colour\" style=\"color:evil\" class=\"colour\">e",
        "<span class=\"colour\" style=\"color:evil\" class=\"colour\"> ",
        "<span class=\"colour\" style=\"color:evil\" class=\"colour\">6",
        "<span class=\"colour\" style=\"color:evil\" class=\"colour\">_",
        "<span class=\"colour\" style=\"color:evil\" class=\"colour\">",
        "<span class=\"colour\" style=\"color:evil\" class=\"colour\" class=\"colour\">evil",
        "<span class=\"colour\" style=\"color:evil\">evil",
        "<span class=\"colour\" style=\"color:>\" class=\"colour\">evil",
        "<span class=\"colour\" style=\"color:=\" class=\"colour\">evil",
        "<span class=\"colour\" style=\"color:<\" class=\"colour\">evil",
        "<span class=\"colour\" style=\"color::\" class=\"colour\">evil",
        "<span class=\"colour\" style=\"color:\"\" class=\"colour\">evil",
        "<span class=\"colour\" style=\"color:eVil\" class=\"colour\">evil",
        "<span class=\"colour\" style=\"color:EVIL\" class=\"colour\">evil",
        "<span class=\"colour\" style=\"color:ev_il\" class=\"colour\">evil",
        "<span class=\"colour\" style=\"color:ev il\" class=\"colour\">evil",
        "<span class=\"colour\" style=\"color:ev4il\" class=\"colour\">evil",
        "<span class=\"colour\" style=\"color:e\" class=\"colour\">evil",
        "<span class=\"colour\" style=\"color: \" class=\"colour\">evil",
        "<span class=\"colour\" style=\"color:6\" class=\"colour\">evil",
        "<span class=\"colour\" style=\"color:_\" class=\"colour\">evil",
        "<span class=\"colour\" style=\"color:\" class=\"colour\">evil",
        "<span class=\"colour\" class=\"colour\" style=\"color:evil\" class=\"colour\">evil",
        "<span style=\"color:evil\" class=\"colour\">evil",
        "<span style=\"color:evil\">",
        "<span class=\"colour\" style=\"color:evil\" class=\"colour\">evil"
      ]
    },
    {
      "regex": "[0-9]{2}-[0-9]{2}-[0-9]{2}",
      "exceptionStackTrace": null,
      "matches": [
        "00-00-000",
        "00-00-0",
        "00-000-00",
        "00-0-00",
        "000-00-00",
        "0-00-00",
        "00-00-00"
      ]
    },
    {
      "regex": "^duplicate regex$",
      "exceptionStackTrace": null,
      "matches": ["duplicate regex"]
    },
    {
      "regex": "^[-!#$%&'*+\\/0-9=?A-Z^_a-z{|}~](\\.?[-!#$%&'*+\\/0-9=?A-Z^_a-z`{|}~])*@[a-zA-Z0-9](-*\\.?[a-zA-Z0-9])*\\.[a-zA-Z](-?[a-zA-Z0-9])+$",
      "exceptionStackTrace": null,
      "matches": [
        "~.~@0-.0.A-0-0",
        "~.~@0-.0.A",
        "~.~@0-.0.A-a",
        "~.~@0-.0.A-A",
        "~.~@0-.0.A--0",
        "~.~@0-.0.A0",
        "~.~@0-.0.a-0",
        "~.~@0-.0-.0.A-0",
        "~.~@0.A-0",
        "~.~@0-.a.A-0",
        "~.~@0-.A.A-0",
        "~.~@0-..0.A-0",
        "~.~@0-0.A-0",
        "~.~@0--.0.A-0",
        "~.~@0.0.A-0",
        "~.~@a-.0.A-0",
        "~.~@A-.0.A-0",
        "~.~.~@0-.0.A-0",
        "~@0-.0.A-0",
        "~.}@0-.0.A-0",
        "~.|@0-.0.A-0",
        "~.{@0-.0.A-0",
        "~.a@0-.0.A-0",
        "~.`@0-.0.A-0",
        "~._@0-.0.A-0",
        "~.^@0-.0.A-0",
        "~.A@0-.0.A-0",
        "~.?@0-.0.A-0",
        "~.=@0-.0.A-0",
        "~.0@0-.0.A-0",
        "~./@0-.0.A-0",
        "~.-@0-.0.A-0",
        "~.+@0-.0.A-0",
        "~.*@0-.0.A-0",
        "~.'@0-.0.A-0",
        "~.&@0-.0.A-0",
        "~.%@0-.0.A-0",
        "~.$@0-.0.A-0",
        "~.#@0-.0.A-0",
        "~.!@0-.0.A-0",
        "~..~@0-.0.A-0",
        "~~@0-.0.A-0",
        "}.~@0-.0.A-0",
        "|.~@0-.0.A-0",
        "{.~@0-.0.A-0",
        "a.~@0-.0.A-0",
        "_.~@0-.0.A-0",
        "^.~@0-.0.A-0",
        "A.~@0-.0.A-0",
        "?.~@0-.0.A-0",
        "=.~@0-.0.A-0",
        "0.~@0-.0.A-0",
        "/.~@0-.0.A-0",
        "-.~@0-.0.A-0",
        "+.~@0-.0.A-0",
        "*.~@0-.0.A-0",
        "'.~@0-.0.A-0",
        "&.~@0-.0.A-0",
        "%.~@0-.0.A-0",
        "$.~@0-.0.A-0",
        "#.~@0-.0.A-0",
        "!.~@0-.0.A-0",
        "~@0.A0",
        "~.~@0-.0.A-0"
      ]
    },
    {
      "regex": "Connection failure connecting to",
      "exceptionStackTrace": null,
      "matches": ["Connection failure connecting to"]
    },
    {
      "regex": "[a-zA-Z\\-\\_\\/]",
      "exceptionStackTrace": null,
      "matches": ["a", "_", "A", "-", "/"]
    },
    {
      "regex": "\\s*delete mode.*hosts/(.*)/host.cfg",
      "exceptionStackTrace": null,
      "matches": [
        " delete modeevilhosts/evil/hostAcfg",
        " delete modeevilhosts/evil/host0cfg",
        " delete modeevilhosts/evil/host/cfg",
        " delete modeevilhosts/evil/host cfg",
        " delete modeevilhosts///hostacfg",
        " delete modeevilhosts/eVil/hostacfg",
        " delete modeevilhosts/EVIL/hostacfg",
        " delete modeevilhosts/ev_il/hostacfg",
        " delete modeevilhosts/ev il/hostacfg",
        " delete modeevilhosts/ev4il/hostacfg",
        " delete modeevilhosts/e/hostacfg",
        " delete modeevilhosts/ /hostacfg",
        " delete modeevilhosts/6/hostacfg",
        " delete modeevilhosts/_/hostacfg",
        " delete modeevilhosts//hostacfg",
        " delete mode/hosts/evil/hostacfg",
        " delete modeeVilhosts/evil/hostacfg",
        " delete modeEVILhosts/evil/hostacfg",
        " delete modeev_ilhosts/evil/hostacfg",
        " delete modeev ilhosts/evil/hostacfg",
        " delete modeev4ilhosts/evil/hostacfg",
        " delete modeehosts/evil/hostacfg",
        " delete mode hosts/evil/hostacfg",
        " delete mode6hosts/evil/hostacfg",
        " delete mode_hosts/evil/hostacfg",
        " delete modehosts/evil/hostacfg",
        "  delete modeevilhosts/evil/hostacfg",
        "delete modeevilhosts/evil/hostacfg",
        "delete modehosts//hostacfg",
        " delete modeevilhosts/evil/hostacfg"
      ]
    },
    { "regex": "[ ]*$", "exceptionStackTrace": null, "matches": ["  ", "", " "] },
    { "regex": "^EM$", "exceptionStackTrace": null, "matches": ["EM"] },
    {
      "regex": "^[\\w]((?!\\/).)*$",
      "exceptionStackTrace": null,
      "matches": ["aaa", "aA", "a0", "a/", "a ", "_a", "Aa", "0a", "a", "aa"]
    },
    {
      "regex": "^\\/\\s*<reference",
      "exceptionStackTrace": null,
      "matches": ["/  <reference", "/<reference", "/ <reference"]
    },
    {
      "regex": "\\(line 1, column 1\\)",
      "exceptionStackTrace": null,
      "matches": ["(line 1, column 1)"]
    },
    {
      "regex": "\\G(?:$ignore)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\G"
      },
      "matches": []
    },
    {
      "regex": "[\\[\\]()|.,*?]",
      "exceptionStackTrace": null,
      "matches": ["|", "]", "[", ".", ",", "*", ")", "(", "?"]
    },
    {
      "regex": "\\/(guide|api|cookbook|misc|tutorial|error).*$",
      "exceptionStackTrace": null,
      "matches": [
        "/guide/",
        "/guideeVil",
        "/guideEVIL",
        "/guideev_il",
        "/guideev il",
        "/guideev4il",
        "/guidee",
        "/guide ",
        "/guide6",
        "/guide_",
        "/error",
        "/tutorial",
        "/misc",
        "/cookbook",
        "/api",
        "/guide",
        "/errorevil",
        "/tutorialevil",
        "/miscevil",
        "/cookbookevil",
        "/apievil",
        "/guideevil"
      ]
    },
    {
      "regex": "[ ](-?1\\.#IND[0-9]*)",
      "exceptionStackTrace": null,
      "matches": [
        " -1.#IND00",
        " -1.#IND",
        " --1.#IND0",
        " 1.#IND0",
        " 1.#IND",
        " -1.#IND0"
      ]
    },
    {
      "regex": "<\\/?meta[^>]*>",
      "exceptionStackTrace": null,
      "matches": [
        "</meta>>",
        "</meta<>",
        "</meta/>",
        "</metaeVil>",
        "</metaEVIL>",
        "</metaev_il>",
        "</metaev il>",
        "</metaev4il>",
        "</metae>",
        "</meta >",
        "</meta6>",
        "</meta_>",
        "</meta>",
        "<//metaevil>",
        "<metaevil>",
        "<meta>",
        "</metaevil>"
      ]
    },
    {
      "regex": "Git rev-parse failed.",
      "exceptionStackTrace": null,
      "matches": [
        "Git rev-parse failedA",
        "Git rev-parse failed0",
        "Git rev-parse failed-",
        "Git rev-parse failed ",
        "Git rev-parse faileda"
      ]
    },
    {
      "regex": "Safari\\/([\\d0-9\\.\\-]+)",
      "exceptionStackTrace": null,
      "matches": ["Safari/--", "Safari/", "Safari/0", "Safari/.", "Safari/-"]
    },
    {
      "regex": "\\[([^\\]]+|\\[[^\\]]+\\])\\]\\(([^\\)]+)\\)",
      "exceptionStackTrace": null,
      "matches": [
        "[[]]](evil)",
        "[[[]](evil)",
        "[[)]](evil)",
        "[[(]](evil)",
        "[[eVil]](evil)",
        "[[EVIL]](evil)",
        "[[ev_il]](evil)",
        "[[ev il]](evil)",
        "[[ev4il]](evil)",
        "[[e]](evil)",
        "[[ ]](evil)",
        "[[6]](evil)",
        "[[_]](evil)",
        "[[]](evil)",
        "[evil](])",
        "[evil]([)",
        "[evil]())",
        "[evil](()",
        "[evil](eVil)",
        "[evil](EVIL)",
        "[evil](ev_il)",
        "[evil](ev il)",
        "[evil](ev4il)",
        "[evil](e)",
        "[evil]( )",
        "[evil](6)",
        "[evil](_)",
        "[evil]()",
        "[]](evil)",
        "[[](evil)",
        "[)](evil)",
        "[(](evil)",
        "[eVil](evil)",
        "[EVIL](evil)",
        "[ev_il](evil)",
        "[ev il](evil)",
        "[ev4il](evil)",
        "[e](evil)",
        "[ ](evil)",
        "[6](evil)",
        "[_](evil)",
        "[](evil)",
        "[[evil]](evil)",
        "[evil](evil)"
      ]
    },
    {
      "regex": "^([!@*?+])?\\(",
      "exceptionStackTrace": null,
      "matches": ["++(", "@(", "?(", "*(", "!(", "(", "+("]
    },
    {
      "regex": "fieldtableerrorred",
      "exceptionStackTrace": null,
      "matches": ["fieldtableerrorred"]
    },
    { "regex": "\\.(xml)$", "exceptionStackTrace": null, "matches": [".xml"] },
    {
      "regex": "parent\\.onLoginDone",
      "exceptionStackTrace": null,
      "matches": ["parent.onLoginDone"]
    },
    {
      "regex": "\\/\\*-- END ([A-Za-z\\-]+) --\\*\\/",
      "exceptionStackTrace": null,
      "matches": [
        "/*-- END / --*/",
        "/*-- END - --*/",
        "/*-- END * --*/",
        "/*-- END eVil --*/",
        "/*-- END EVIL --*/",
        "/*-- END ev_il --*/",
        "/*-- END ev il --*/",
        "/*-- END ev4il --*/",
        "/*-- END e --*/",
        "/*-- END   --*/",
        "/*-- END 6 --*/",
        "/*-- END _ --*/",
        "/*-- END  --*/",
        "/*-- END evil --*/"
      ]
    },
    {
      "regex": "cannot specify.*--puppet-dev.*and.*--puppet-version",
      "exceptionStackTrace": null,
      "matches": [
        "cannot specifyevil--puppet-deveviland---puppet-version",
        "cannot specifyevil--puppet-devevilandeVil--puppet-version",
        "cannot specifyevil--puppet-devevilandEVIL--puppet-version",
        "cannot specifyevil--puppet-devevilandev_il--puppet-version",
        "cannot specifyevil--puppet-devevilandev il--puppet-version",
        "cannot specifyevil--puppet-devevilandev4il--puppet-version",
        "cannot specifyevil--puppet-devevilande--puppet-version",
        "cannot specifyevil--puppet-deveviland --puppet-version",
        "cannot specifyevil--puppet-deveviland6--puppet-version",
        "cannot specifyevil--puppet-deveviland_--puppet-version",
        "cannot specifyevil--puppet-deveviland--puppet-version",
        "cannot specifyevil--puppet-dev-andevil--puppet-version",
        "cannot specifyevil--puppet-deveVilandevil--puppet-version",
        "cannot specifyevil--puppet-devEVILandevil--puppet-version",
        "cannot specifyevil--puppet-devev_ilandevil--puppet-version",
        "cannot specifyevil--puppet-devev ilandevil--puppet-version",
        "cannot specifyevil--puppet-devev4ilandevil--puppet-version",
        "cannot specifyevil--puppet-deveandevil--puppet-version",
        "cannot specifyevil--puppet-dev andevil--puppet-version",
        "cannot specifyevil--puppet-dev6andevil--puppet-version",
        "cannot specifyevil--puppet-dev_andevil--puppet-version",
        "cannot specifyevil--puppet-devandevil--puppet-version",
        "cannot specify---puppet-devevilandevil--puppet-version",
        "cannot specifyeVil--puppet-devevilandevil--puppet-version",
        "cannot specifyEVIL--puppet-devevilandevil--puppet-version",
        "cannot specifyev_il--puppet-devevilandevil--puppet-version",
        "cannot specifyev il--puppet-devevilandevil--puppet-version",
        "cannot specifyev4il--puppet-devevilandevil--puppet-version",
        "cannot specifye--puppet-devevilandevil--puppet-version",
        "cannot specify --puppet-devevilandevil--puppet-version",
        "cannot specify6--puppet-devevilandevil--puppet-version",
        "cannot specify_--puppet-devevilandevil--puppet-version",
        "cannot specify--puppet-devevilandevil--puppet-version",
        "cannot specify--puppet-devand--puppet-version",
        "cannot specifyevil--puppet-devevilandevil--puppet-version"
      ]
    },
    { "regex": "49494", "exceptionStackTrace": null, "matches": ["49494"] },
    {
      "regex": " \\?(\\s|$)",
      "exceptionStackTrace": null,
      "matches": [" ?", " ? "]
    },
    { "regex": "^gu$t", "exceptionStackTrace": null, "matches": ["gut"] },
    { "regex": "FNOPS", "exceptionStackTrace": null, "matches": ["FNOPS"] },
    {
      "regex": "\\.(?<_1>configContainer|configContext|configText|doHide|doShow|init|initDefaultConfig|onContextMouseMove|onContextMouseOut|onContextMouseOver|preventOverlay)\\b(?=\\()",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<_"
      },
      "matches": []
    },
    {
      "regex": "([ ]*\\([a-z0-9_ =*:]*\\)|\\*[0-9:]*)",
      "exceptionStackTrace": null,
      "matches": [
        "*::",
        "*0",
        " (=)",
        " (:)",
        " (*)",
        " ())",
        " (()",
        " (eVil)",
        " (EVIL)",
        " (ev_il)",
        " (ev il)",
        " (ev4il)",
        " (e)",
        " ( )",
        " (6)",
        " (_)",
        " ()",
        "  (evil)",
        "(evil)",
        "*",
        "()",
        "*:",
        " (evil)"
      ]
    },
    {
      "regex": "\\{boardID\\}",
      "exceptionStackTrace": null,
      "matches": ["{boardID}"]
    },
    {
      "regex": "^she should see that the customer's email address is (.*?)$",
      "exceptionStackTrace": null,
      "matches": [
        "she should see that the customer's email address is '",
        "she should see that the customer's email address is eVil",
        "she should see that the customer's email address is EVIL",
        "she should see that the customer's email address is ev_il",
        "she should see that the customer's email address is ev il",
        "she should see that the customer's email address is ev4il",
        "she should see that the customer's email address is e",
        "she should see that the customer's email address is  ",
        "she should see that the customer's email address is 6",
        "she should see that the customer's email address is _",
        "she should see that the customer's email address is ",
        "she should see that the customer's email address is evil"
      ]
    },
    {
      "regex": "is not set",
      "exceptionStackTrace": null,
      "matches": ["is not set"]
    },
    { "regex": "^[CS]", "exceptionStackTrace": null, "matches": ["C", "A", "S"] },
    {
      "regex": "CSS|WXSS",
      "exceptionStackTrace": null,
      "matches": ["WXSS", "CSS"]
    },
    {
      "regex": "(?:(\\\\)|(\"))",
      "exceptionStackTrace": null,
      "matches": ["\"", "\\"]
    },
    {
      "regex": "\\\\(?:.|\\n)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "(.*?)(=.*)",
      "exceptionStackTrace": null,
      "matches": [
        "evil==",
        "evil=eVil",
        "evil=EVIL",
        "evil=ev_il",
        "evil=ev il",
        "evil=ev4il",
        "evil=e",
        "evil= ",
        "evil=6",
        "evil=_",
        "evil=",
        "==evil",
        "eVil=evil",
        "EVIL=evil",
        "ev_il=evil",
        "ev il=evil",
        "ev4il=evil",
        "e=evil",
        " =evil",
        "6=evil",
        "_=evil",
        "=evil",
        "=",
        "evil=evil"
      ]
    },
    {
      "regex": "FILEVERSION",
      "exceptionStackTrace": null,
      "matches": ["FILEVERSION"]
    },
    {
      "regex": "(.*) [\\|\\-] .*",
      "exceptionStackTrace": null,
      "matches": [
        "evil - |",
        "evil - -",
        "evil - eVil",
        "evil - EVIL",
        "evil - ev_il",
        "evil - ev il",
        "evil - ev4il",
        "evil - e",
        "evil -  ",
        "evil - 6",
        "evil - _",
        "evil - ",
        "evil | evil",
        "| - evil",
        "- - evil",
        "eVil - evil",
        "EVIL - evil",
        "ev_il - evil",
        "ev il - evil",
        "ev4il - evil",
        "e - evil",
        "  - evil",
        "6 - evil",
        "_ - evil",
        " - evil",
        " - ",
        "evil - evil"
      ]
    },
    {
      "regex": "^state:\\s*(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "state: :",
        "state: eVil",
        "state: EVIL",
        "state: ev_il",
        "state: ev il",
        "state: ev4il",
        "state: e",
        "state:  ",
        "state: 6",
        "state: _",
        "state: ",
        "state:  evil",
        "state:evil",
        "state:",
        "state: evil"
      ]
    },
    {
      "regex": "src=.*?(alert\\(|alert&\\#40;|javascript\\:|livescript\\:|mocha\\:|charset\\=|window\\.|document\\.|\\.cookie|<script|<xss|base64\\s*,)",
      "exceptionStackTrace": null,
      "matches": [
        "src=evilbase64  ,",
        "src=evilbase64,",
        "src==alert(",
        "src=<alert(",
        "src=;alert(",
        "src=:alert(",
        "src=.alert(",
        "src=,alert(",
        "src=(alert(",
        "src=&alert(",
        "src=#alert(",
        "src=eVilalert(",
        "src=EVILalert(",
        "src=ev_ilalert(",
        "src=ev ilalert(",
        "src=ev4ilalert(",
        "src=ealert(",
        "src= alert(",
        "src=6alert(",
        "src=_alert(",
        "src=base64,",
        "src=<xss",
        "src=<script",
        "src=.cookie",
        "src=document.",
        "src=window.",
        "src=charset=",
        "src=mocha:",
        "src=livescript:",
        "src=javascript:",
        "src=alert&#40;",
        "src=alert(",
        "src=evilbase64 ,",
        "src=evil<xss",
        "src=evil<script",
        "src=evil.cookie",
        "src=evildocument.",
        "src=evilwindow.",
        "src=evilcharset=",
        "src=evilmocha:",
        "src=evillivescript:",
        "src=eviljavascript:",
        "src=evilalert&#40;",
        "src=evilalert("
      ]
    },
    {
      "regex": "^http(s?)://.*$",
      "exceptionStackTrace": null,
      "matches": [
        "https://:",
        "https:///",
        "https://eVil",
        "https://EVIL",
        "https://ev_il",
        "https://ev il",
        "https://ev4il",
        "https://e",
        "https:// ",
        "https://6",
        "https://_",
        "https://",
        "httpss://evil",
        "http://evil",
        "http://",
        "https://evil"
      ]
    },
    { "regex": "^pswp", "exceptionStackTrace": null, "matches": ["pswp"] },
    {
      "regex": "x+(?:y+)z+",
      "exceptionStackTrace": null,
      "matches": ["xyzz", "xy", "xyyz", "xz", "xxyz", "yz", "xyz"]
    },
    {
      "regex": "^(\t)+",
      "exceptionStackTrace": null,
      "matches": ["\t\t", "", "\t"]
    },
    { "regex": "^$m", "exceptionStackTrace": null, "matches": ["m"] },
    {
      "regex": "[^.]+(?:\\.internal)?\\.([^.]+)",
      "exceptionStackTrace": null,
      "matches": [
        "evil.internal..",
        "evil.internal.eVil",
        "evil.internal.EVIL",
        "evil.internal.ev_il",
        "evil.internal.ev il",
        "evil.internal.ev4il",
        "evil.internal.e",
        "evil.internal. ",
        "evil.internal.6",
        "evil.internal._",
        "evil.internal.",
        "evil.internal.internal.evil",
        "..internal.evil",
        "eVil.internal.evil",
        "EVIL.internal.evil",
        "ev_il.internal.evil",
        "ev il.internal.evil",
        "ev4il.internal.evil",
        "e.internal.evil",
        " .internal.evil",
        "6.internal.evil",
        "_.internal.evil",
        ".internal.evil",
        "evil.evil",
        "evil.internal.evil"
      ]
    },
    {
      "regex": "WebSocket",
      "exceptionStackTrace": null,
      "matches": ["WebSocket"]
    },
    {
      "regex": "gem 'fist_of_fury', '~> (\\d+).(\\d+).+'",
      "exceptionStackTrace": null,
      "matches": [
        "gem 'fist_of_fury', '~> 0a0~'",
        "gem 'fist_of_fury', '~> 0a0>'",
        "gem 'fist_of_fury', '~> 0a0,'",
        "gem 'fist_of_fury', '~> 0a0''",
        "gem 'fist_of_fury', '~> 0a0eVil'",
        "gem 'fist_of_fury', '~> 0a0EVIL'",
        "gem 'fist_of_fury', '~> 0a0ev_il'",
        "gem 'fist_of_fury', '~> 0a0ev il'",
        "gem 'fist_of_fury', '~> 0a0ev4il'",
        "gem 'fist_of_fury', '~> 0a0e'",
        "gem 'fist_of_fury', '~> 0a0 '",
        "gem 'fist_of_fury', '~> 0a06'",
        "gem 'fist_of_fury', '~> 0a0_'",
        "gem 'fist_of_fury', '~> 0a0'",
        "gem 'fist_of_fury', '~> 0a00evil'",
        "gem 'fist_of_fury', '~> 0aevil'",
        "gem 'fist_of_fury', '~> 0~0evil'",
        "gem 'fist_of_fury', '~> 0_0evil'",
        "gem 'fist_of_fury', '~> 0A0evil'",
        "gem 'fist_of_fury', '~> 0>0evil'",
        "gem 'fist_of_fury', '~> 000evil'",
        "gem 'fist_of_fury', '~> 0,0evil'",
        "gem 'fist_of_fury', '~> 0'0evil'",
        "gem 'fist_of_fury', '~> 0 0evil'",
        "gem 'fist_of_fury', '~> 00a0evil'",
        "gem 'fist_of_fury', '~> a0evil'",
        "gem 'fist_of_fury', '~> 0a0evil'"
      ]
    },
    {
      "regex": "__STARTCOLOR__",
      "exceptionStackTrace": null,
      "matches": ["__STARTCOLOR__"]
    },
    {
      "regex": "^system\\.adapter\\.|^system\\.",
      "exceptionStackTrace": null,
      "matches": ["system.", "system.adapter."]
    },
    {
      "regex": "(<a[^<>]*href=)[\\\"']{0,1}([^\\\"'<>\\s]*)[\\\"']{0,1}",
      "exceptionStackTrace": null,
      "matches": [
        "<aevilhref='evil''",
        "<aevilhref='evil",
        "<aevilhref='evil\"",
        "<aevilhref='>'",
        "<aevilhref='='",
        "<aevilhref='<'",
        "<aevilhref='''",
        "<aevilhref='\"'",
        "<aevilhref='eVil'",
        "<aevilhref='EVIL'",
        "<aevilhref='ev_il'",
        "<aevilhref='ev il'",
        "<aevilhref='ev4il'",
        "<aevilhref='e'",
        "<aevilhref=' '",
        "<aevilhref='6'",
        "<aevilhref='_'",
        "<aevilhref=''",
        "<aevilhref=''evil'",
        "<aevilhref=evil'",
        "<aevilhref=\"evil'",
        "<a>href='evil'",
        "<a=href='evil'",
        "<a<href='evil'",
        "<a'href='evil'",
        "<a\"href='evil'",
        "<aeVilhref='evil'",
        "<aEVILhref='evil'",
        "<aev_ilhref='evil'",
        "<aev ilhref='evil'",
        "<aev4ilhref='evil'",
        "<aehref='evil'",
        "<a href='evil'",
        "<a6href='evil'",
        "<a_href='evil'",
        "<ahref='evil'",
        "<ahref=",
        "<aevilhref='evil'"
      ]
    },
    {
      "regex": ":([\\w\\-]+)(\\(['\"]?(\\w+)['\"]?\\))?",
      "exceptionStackTrace": null,
      "matches": [
        ":evil(\"evil\")(\"evil\")",
        ":evil(\"evil\"\")",
        ":evil(\"evil)",
        ":evil(\"evil')",
        ":evil(\"eVil\")",
        ":evil(\"EVIL\")",
        ":evil(\"ev_il\")",
        ":evil(\"ev il\")",
        ":evil(\"ev4il\")",
        ":evil(\"e\")",
        ":evil(\" \")",
        ":evil(\"6\")",
        ":evil(\"_\")",
        ":evil(\"\")",
        ":evil(\"\"evil\")",
        ":evil(evil\")",
        ":evil('evil\")",
        "::(\"evil\")",
        ":-(\"evil\")",
        ":)(\"evil\")",
        ":((\"evil\")",
        ":'(\"evil\")",
        ":\"(\"evil\")",
        ":eVil(\"evil\")",
        ":EVIL(\"evil\")",
        ":ev_il(\"evil\")",
        ":ev il(\"evil\")",
        ":ev4il(\"evil\")",
        ":e(\"evil\")",
        ": (\"evil\")",
        ":6(\"evil\")",
        ":_(\"evil\")",
        ":(\"evil\")",
        ":evil",
        ":evil(\"evil\")"
      ]
    },
    {
      "regex": "\\\"id\\\":\\\"[^\\\"]*\\\"",
      "exceptionStackTrace": null,
      "matches": [
        "\"id\":\":\"",
        "\"id\":\"\"\"",
        "\"id\":\"eVil\"",
        "\"id\":\"EVIL\"",
        "\"id\":\"ev_il\"",
        "\"id\":\"ev il\"",
        "\"id\":\"ev4il\"",
        "\"id\":\"e\"",
        "\"id\":\" \"",
        "\"id\":\"6\"",
        "\"id\":\"_\"",
        "\"id\":\"\"",
        "\"id\":\"evil\""
      ]
    },
    {
      "regex": "test-repo-url-ssh@0\\.0\\.1",
      "exceptionStackTrace": null,
      "matches": ["test-repo-url-ssh@0.0.1"]
    },
    {
      "regex": ".*[XZ][^a-zA-Z]*$",
      "exceptionStackTrace": null,
      "matches": [
        "evilZeVil",
        "evilZEVIL",
        "evilZev_il",
        "evilZev il",
        "evilZev4il",
        "evilZe",
        "evilZ ",
        "evilZ6",
        "evilZ_",
        "evilZ",
        "evilXevil",
        "evilAevil",
        "eVilZevil",
        "EVILZevil",
        "ev_ilZevil",
        "ev ilZevil",
        "ev4ilZevil",
        "eZevil",
        " Zevil",
        "6Zevil",
        "_Zevil",
        "Zevil",
        "Z",
        "evilZevil"
      ]
    },
    {
      "regex": "<font size=\\\"-1\\\">",
      "exceptionStackTrace": null,
      "matches": ["<font size=\"-1\">"]
    },
    {
      "regex": "(.*?)(<%%|<%\\s*(\\#)|<%(([=-])?)|\\n|$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^Updates: ([\\d+, ]+)",
      "exceptionStackTrace": null,
      "matches": [
        "Updates:   ",
        "Updates: ",
        "Updates: 0",
        "Updates: ,",
        "Updates: +",
        "Updates:  "
      ]
    },
    {
      "regex": "$self->{cleanup_suffix}",
      "exceptionStackTrace": null,
      "matches": ["self->{cleanup_suffix}"]
    },
    {
      "regex": "<.*? *\\/?>",
      "exceptionStackTrace": null,
      "matches": [
        "<evil //>",
        "<evil >",
        "<evil  />",
        "<evil/>",
        "<> />",
        "<< />",
        "</ />",
        "<eVil />",
        "<EVIL />",
        "<ev_il />",
        "<ev il />",
        "<ev4il />",
        "<e />",
        "<  />",
        "<6 />",
        "<_ />",
        "< />",
        "<>",
        "<evil />"
      ]
    },
    {
      "regex": "^Default:\\s*(.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "Default: :",
        "Default: eVil",
        "Default: EVIL",
        "Default: ev_il",
        "Default: ev il",
        "Default: ev4il",
        "Default: e",
        "Default:  ",
        "Default: 6",
        "Default: _",
        "Default: ",
        "Default:  evil",
        "Default:evil",
        "Default: evil"
      ]
    },
    {
      "regex": "^test/(.*)\\/?test_(.*)\\.rb$",
      "exceptionStackTrace": null,
      "matches": [
        "test/evil/test_/.rb",
        "test/evil/test_..rb",
        "test/evil/test_eVil.rb",
        "test/evil/test_EVIL.rb",
        "test/evil/test_ev_il.rb",
        "test/evil/test_ev il.rb",
        "test/evil/test_ev4il.rb",
        "test/evil/test_e.rb",
        "test/evil/test_ .rb",
        "test/evil/test_6.rb",
        "test/evil/test__.rb",
        "test/evil/test_.rb",
        "test/evil//test_evil.rb",
        "test/eviltest_evil.rb",
        "test///test_evil.rb",
        "test/./test_evil.rb",
        "test/eVil/test_evil.rb",
        "test/EVIL/test_evil.rb",
        "test/ev_il/test_evil.rb",
        "test/ev il/test_evil.rb",
        "test/ev4il/test_evil.rb",
        "test/e/test_evil.rb",
        "test/ /test_evil.rb",
        "test/6/test_evil.rb",
        "test/_/test_evil.rb",
        "test//test_evil.rb",
        "test/test_.rb",
        "test/evil/test_evil.rb"
      ]
    },
    {
      "regex": "[^a-zA-Z0-9\\s]",
      "exceptionStackTrace": null,
      "matches": ["a", "_", "A", "0", " ", "!"]
    },
    {
      "regex": "^([\\w\\-]+|%)\\(",
      "exceptionStackTrace": null,
      "matches": [
        "-(",
        "((",
        "eVil(",
        "EVIL(",
        "ev_il(",
        "ev il(",
        "ev4il(",
        "e(",
        " (",
        "6(",
        "_(",
        "(",
        "%(",
        "evil("
      ]
    },
    {
      "regex": "^[ \\t]*(class\\s+virtual\\s+)((\\[\\s*('[A-Za-z][a-zA-Z0-9_']*(?:\\s*,\\s*'[A-Za-z][a-zA-Z0-9_']*)*)\\s*\\]\\s+)?[a-z_][a-zA-Z0-9'_]*)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "[a-zA-Z][-a-zA-Z_0-9]*",
      "exceptionStackTrace": null,
      "matches": [
        "A-",
        "AeVil",
        "AEVIL",
        "Aev_il",
        "Aev il",
        "Aev4il",
        "Ae",
        "A ",
        "A6",
        "A_",
        "aevil",
        "A",
        "Aevil"
      ]
    },
    {
      "regex": "ISO_3166\\-2\\:(\\w){2,2}",
      "exceptionStackTrace": null,
      "matches": [
        "ISO_3166-2:aaa",
        "ISO_3166-2:a",
        "ISO_3166-2:_a",
        "ISO_3166-2:Aa",
        "ISO_3166-2:0a",
        "ISO_3166-2:aa"
      ]
    },
    {
      "regex": "\\bMonitor(?:Mixin)?\\b",
      "exceptionStackTrace": null,
      "matches": ["MonitorMixinMixin", "Monitor", "MonitorMixin"]
    },
    {
      "regex": "http\\://www.ofxhome.com/index.php/institution/view/\\w+",
      "exceptionStackTrace": null,
      "matches": [
        "http://wwwaofxhomeacom/indexaphp/institution/view/eVil",
        "http://wwwaofxhomeacom/indexaphp/institution/view/EVIL",
        "http://wwwaofxhomeacom/indexaphp/institution/view/ev_il",
        "http://wwwaofxhomeacom/indexaphp/institution/view/ev il",
        "http://wwwaofxhomeacom/indexaphp/institution/view/ev4il",
        "http://wwwaofxhomeacom/indexaphp/institution/view/e",
        "http://wwwaofxhomeacom/indexaphp/institution/view/ ",
        "http://wwwaofxhomeacom/indexaphp/institution/view/6",
        "http://wwwaofxhomeacom/indexaphp/institution/view/_",
        "http://wwwaofxhomeacom/indexaphp/institution/view/",
        "http://wwwaofxhomeacom/indexAphp/institution/view/evil",
        "http://wwwaofxhomeacom/index:php/institution/view/evil",
        "http://wwwaofxhomeacom/index0php/institution/view/evil",
        "http://wwwaofxhomeacom/index/php/institution/view/evil",
        "http://wwwaofxhomeacom/index php/institution/view/evil",
        "http://wwwaofxhomeAcom/indexaphp/institution/view/evil",
        "http://wwwaofxhome:com/indexaphp/institution/view/evil",
        "http://wwwaofxhome0com/indexaphp/institution/view/evil",
        "http://wwwaofxhome/com/indexaphp/institution/view/evil",
        "http://wwwaofxhome com/indexaphp/institution/view/evil",
        "http://wwwAofxhomeacom/indexaphp/institution/view/evil",
        "http://www:ofxhomeacom/indexaphp/institution/view/evil",
        "http://www0ofxhomeacom/indexaphp/institution/view/evil",
        "http://www/ofxhomeacom/indexaphp/institution/view/evil",
        "http://www ofxhomeacom/indexaphp/institution/view/evil",
        "http://wwwaofxhomeacom/indexaphp/institution/view/evil"
      ]
    },
    {
      "regex": "([[:digit:]]+)\\pP+(?=[[:digit:]])",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\p"
      },
      "matches": []
    },
    { "regex": "deliver", "exceptionStackTrace": null, "matches": ["deliver"] },
    { "regex": ":0", "exceptionStackTrace": null, "matches": [":0"] },
    {
      "regex": "^[a-zA-Z0-9\\\\._\\\\-]+$",
      "exceptionStackTrace": null,
      "matches": [
        "\\",
        ".",
        "-",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "<div class=\"BookTitle\">\\s*<span itemprop=\"name\">([^<]+)</span>",
      "exceptionStackTrace": null,
      "matches": [
        "<div class=\"BookTitle\"> <span itemprop=\"name\">></span>",
        "<div class=\"BookTitle\"> <span itemprop=\"name\">=</span>",
        "<div class=\"BookTitle\"> <span itemprop=\"name\"><</span>",
        "<div class=\"BookTitle\"> <span itemprop=\"name\">/</span>",
        "<div class=\"BookTitle\"> <span itemprop=\"name\">\"</span>",
        "<div class=\"BookTitle\"> <span itemprop=\"name\">eVil</span>",
        "<div class=\"BookTitle\"> <span itemprop=\"name\">EVIL</span>",
        "<div class=\"BookTitle\"> <span itemprop=\"name\">ev_il</span>",
        "<div class=\"BookTitle\"> <span itemprop=\"name\">ev il</span>",
        "<div class=\"BookTitle\"> <span itemprop=\"name\">ev4il</span>",
        "<div class=\"BookTitle\"> <span itemprop=\"name\">e</span>",
        "<div class=\"BookTitle\"> <span itemprop=\"name\"> </span>",
        "<div class=\"BookTitle\"> <span itemprop=\"name\">6</span>",
        "<div class=\"BookTitle\"> <span itemprop=\"name\">_</span>",
        "<div class=\"BookTitle\"> <span itemprop=\"name\"></span>",
        "<div class=\"BookTitle\">  <span itemprop=\"name\">evil</span>",
        "<div class=\"BookTitle\"><span itemprop=\"name\">evil</span>",
        "<div class=\"BookTitle\"> <span itemprop=\"name\">evil</span>"
      ]
    },
    {
      "regex": "($altere)(?=eser$)",
      "exceptionStackTrace": null,
      "matches": ["altere"]
    },
    {
      "regex": "<body.*>(.*)<\\/body>",
      "exceptionStackTrace": null,
      "matches": [
        "<bodyevil>></body>",
        "<bodyevil><</body>",
        "<bodyevil>/</body>",
        "<bodyevil>eVil</body>",
        "<bodyevil>EVIL</body>",
        "<bodyevil>ev_il</body>",
        "<bodyevil>ev il</body>",
        "<bodyevil>ev4il</body>",
        "<bodyevil>e</body>",
        "<bodyevil> </body>",
        "<bodyevil>6</body>",
        "<bodyevil>_</body>",
        "<bodyevil></body>",
        "<body>>evil</body>",
        "<body<>evil</body>",
        "<body/>evil</body>",
        "<bodyeVil>evil</body>",
        "<bodyEVIL>evil</body>",
        "<bodyev_il>evil</body>",
        "<bodyev il>evil</body>",
        "<bodyev4il>evil</body>",
        "<bodye>evil</body>",
        "<body >evil</body>",
        "<body6>evil</body>",
        "<body_>evil</body>",
        "<body>evil</body>",
        "<body></body>",
        "<bodyevil>evil</body>"
      ]
    },
    {
      "regex": "Cannot construct .+ from Hash",
      "exceptionStackTrace": null,
      "matches": [
        "Cannot construct eVil from Hash",
        "Cannot construct EVIL from Hash",
        "Cannot construct ev_il from Hash",
        "Cannot construct ev il from Hash",
        "Cannot construct ev4il from Hash",
        "Cannot construct e from Hash",
        "Cannot construct   from Hash",
        "Cannot construct 6 from Hash",
        "Cannot construct _ from Hash",
        "Cannot construct  from Hash",
        "Cannot construct evil from Hash"
      ]
    },
    {
      "regex": "[[\\]\\(\\)<>:]",
      "exceptionStackTrace": null,
      "matches": ["]", "[", ">", "<", ")", "(", ":"]
    },
    {
      "regex": "[01]{32}",
      "exceptionStackTrace": null,
      "matches": [
        "111111111111111111111111111111111",
        "1111111111111111111111111111111",
        "21111111111111111111111111111111",
        "01111111111111111111111111111111",
        "11111111111111111111111111111111"
      ]
    },
    {
      "regex": "client_123",
      "exceptionStackTrace": null,
      "matches": ["client_123"]
    },
    { "regex": "OptArgs2", "exceptionStackTrace": null, "matches": ["OptArgs2"] },
    {
      "regex": "\\btable\\s+.*$",
      "exceptionStackTrace": null,
      "matches": [
        "table eVil",
        "table EVIL",
        "table ev_il",
        "table ev il",
        "table ev4il",
        "table e",
        "table  ",
        "table 6",
        "table _",
        "table  evil",
        "tableevil",
        "table ",
        "table evil"
      ]
    },
    {
      "regex": "A.*=>.*B.*=>.*A",
      "exceptionStackTrace": null,
      "matches": [
        "Aevil=>evilBevil=>>A",
        "Aevil=>evilBevil=>=A",
        "Aevil=>evilBevil=>eVilA",
        "Aevil=>evilBevil=>EVILA",
        "Aevil=>evilBevil=>ev_ilA",
        "Aevil=>evilBevil=>ev ilA",
        "Aevil=>evilBevil=>ev4ilA",
        "Aevil=>evilBevil=>eA",
        "Aevil=>evilBevil=> A",
        "Aevil=>evilBevil=>6A",
        "Aevil=>evilBevil=>_A",
        "Aevil=>evilBevil=>A",
        "Aevil=>evilB>=>evilA",
        "Aevil=>evilB==>evilA",
        "Aevil=>evilBeVil=>evilA",
        "Aevil=>evilBEVIL=>evilA",
        "Aevil=>evilBev_il=>evilA",
        "Aevil=>evilBev il=>evilA",
        "Aevil=>evilBev4il=>evilA",
        "Aevil=>evilBe=>evilA",
        "Aevil=>evilB =>evilA",
        "Aevil=>evilB6=>evilA",
        "Aevil=>evilB_=>evilA",
        "Aevil=>evilB=>evilA",
        "Aevil=>>Bevil=>evilA",
        "Aevil=>=Bevil=>evilA",
        "Aevil=>eVilBevil=>evilA",
        "Aevil=>EVILBevil=>evilA",
        "Aevil=>ev_ilBevil=>evilA",
        "Aevil=>ev ilBevil=>evilA",
        "Aevil=>ev4ilBevil=>evilA",
        "Aevil=>eBevil=>evilA",
        "Aevil=> Bevil=>evilA",
        "Aevil=>6Bevil=>evilA",
        "Aevil=>_Bevil=>evilA",
        "Aevil=>Bevil=>evilA",
        "A>=>evilBevil=>evilA",
        "A==>evilBevil=>evilA",
        "AeVil=>evilBevil=>evilA",
        "AEVIL=>evilBevil=>evilA",
        "Aev_il=>evilBevil=>evilA",
        "Aev il=>evilBevil=>evilA",
        "Aev4il=>evilBevil=>evilA",
        "Ae=>evilBevil=>evilA",
        "A =>evilBevil=>evilA",
        "A6=>evilBevil=>evilA",
        "A_=>evilBevil=>evilA",
        "A=>evilBevil=>evilA",
        "A=>B=>A",
        "Aevil=>evilBevil=>evilA"
      ]
    },
    {
      "regex": ".(.)$",
      "exceptionStackTrace": null,
      "matches": ["a_", "aA", "a0", "a ", "_a", "Aa", "0a", " a", "aa"]
    },
    {
      "regex": "^crop/(\\d+),(\\d+),(\\d+)x(\\d+)/",
      "exceptionStackTrace": null,
      "matches": [
        "crop/0,0,0x00/",
        "crop/0,0,0x/",
        "crop/0,0,00x0/",
        "crop/0,0,x0/",
        "crop/0,00,0x0/",
        "crop/0,,0x0/",
        "crop/00,0,0x0/",
        "crop/,0,0x0/",
        "crop/0,0,0x0/"
      ]
    },
    {
      "regex": "[A-Z][A-Z0-9]*$",
      "exceptionStackTrace": null,
      "matches": [
        "AeVil",
        "AEVIL",
        "Aev_il",
        "Aev il",
        "Aev4il",
        "Ae",
        "A ",
        "A6",
        "A_",
        "A",
        "Aevil"
      ]
    },
    {
      "regex": "[ \\t\\n]([a-zA-Z]{2,16}:\\/\\/[a-zA-Z0-9@:%_\\+.~#?&=]{2,256}.[a-z]{2,4}\\b(\\/[\\-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*)?)[ \\t\\n]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "a\\\\ \\\\\\(file\\\\\\)\\\\ with\\\\ parantheses.txt",
      "exceptionStackTrace": null,
      "matches": [
        "a\\ \\(file\\)\\ with\\ parantheses\\txt",
        "a\\ \\(file\\)\\ with\\ paranthesesAtxt",
        "a\\ \\(file\\)\\ with\\ parantheses0txt",
        "a\\ \\(file\\)\\ with\\ parantheses)txt",
        "a\\ \\(file\\)\\ with\\ parantheses(txt",
        "a\\ \\(file\\)\\ with\\ parantheses txt",
        "a\\ \\(file\\)\\ with\\ paranthesesatxt"
      ]
    },
    {
      "regex": "(\\/ID \\[ (<[0-9a-fA-F]+> ){2}\\])",
      "exceptionStackTrace": null,
      "matches": [
        "/ID [ <A> <A> <A> ]",
        "/ID [ <A> ]",
        "/ID [ <AA> <A> ]",
        "/ID [ <> <A> ]",
        "/ID [ <g> <A> ]",
        "/ID [ <a> <A> ]",
        "/ID [ <G> <A> ]",
        "/ID [ <0> <A> ]",
        "/ID [ <A> <A> ]"
      ]
    },
    {
      "regex": "^I build the containers with \"([^\"]*)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "I build the containers with \"\"\"",
        "I build the containers with \"eVil\"",
        "I build the containers with \"EVIL\"",
        "I build the containers with \"ev_il\"",
        "I build the containers with \"ev il\"",
        "I build the containers with \"ev4il\"",
        "I build the containers with \"e\"",
        "I build the containers with \" \"",
        "I build the containers with \"6\"",
        "I build the containers with \"_\"",
        "I build the containers with \"\"",
        "I build the containers with \"evil\""
      ]
    },
    {
      "regex": "The application is not running",
      "exceptionStackTrace": null,
      "matches": ["The application is not running"]
    },
    {
      "regex": ".*Saved [0-9]+ new dependencies.*",
      "exceptionStackTrace": null,
      "matches": [
        "evilSaved 0 new dependencieseVil",
        "evilSaved 0 new dependenciesEVIL",
        "evilSaved 0 new dependenciesev_il",
        "evilSaved 0 new dependenciesev il",
        "evilSaved 0 new dependenciesev4il",
        "evilSaved 0 new dependenciese",
        "evilSaved 0 new dependencies ",
        "evilSaved 0 new dependencies6",
        "evilSaved 0 new dependencies_",
        "evilSaved 0 new dependencies",
        "evilSaved 00 new dependenciesevil",
        "evilSaved  new dependenciesevil",
        "eVilSaved 0 new dependenciesevil",
        "EVILSaved 0 new dependenciesevil",
        "ev_ilSaved 0 new dependenciesevil",
        "ev ilSaved 0 new dependenciesevil",
        "ev4ilSaved 0 new dependenciesevil",
        "eSaved 0 new dependenciesevil",
        " Saved 0 new dependenciesevil",
        "6Saved 0 new dependenciesevil",
        "_Saved 0 new dependenciesevil",
        "Saved 0 new dependenciesevil",
        "Saved 0 new dependencies",
        "evilSaved 0 new dependenciesevil"
      ]
    },
    {
      "regex": "j(?:enkins)? b(?:uild)? ([\\w\\.\\-_ ]+)(, (.+))?",
      "exceptionStackTrace": null,
      "matches": [
        "jenkins build evil, evil, evil",
        "jenkins build evil",
        "jenkins build evil, .",
        "jenkins build evil, -",
        "jenkins build evil, ,",
        "jenkins build evil, eVil",
        "jenkins build evil, EVIL",
        "jenkins build evil, ev_il",
        "jenkins build evil, ev il",
        "jenkins build evil, ev4il",
        "jenkins build evil, e",
        "jenkins build evil,  ",
        "jenkins build evil, 6",
        "jenkins build evil, _",
        "jenkins build evil, ",
        "jenkins build ., evil",
        "jenkins build -, evil",
        "jenkins build ,, evil",
        "jenkins build eVil, evil",
        "jenkins build EVIL, evil",
        "jenkins build ev_il, evil",
        "jenkins build ev il, evil",
        "jenkins build ev4il, evil",
        "jenkins build e, evil",
        "jenkins build  , evil",
        "jenkins build 6, evil",
        "jenkins build _, evil",
        "jenkins build , evil",
        "jenkins builduild evil, evil",
        "jenkins b evil, evil",
        "jenkinsenkins build evil, evil",
        "j build evil, evil",
        "j b evil",
        "jenkins build evil, evil"
      ]
    },
    {
      "regex": "^I have read the default file from the default directory$",
      "exceptionStackTrace": null,
      "matches": ["I have read the default file from the default directory"]
    },
    { "regex": "switch\\b", "exceptionStackTrace": null, "matches": ["switch"] },
    { "regex": "_file$", "exceptionStackTrace": null, "matches": ["_file"] },
    {
      "regex": "Hello, <b>world<\\/b>",
      "exceptionStackTrace": null,
      "matches": ["Hello, <b>world</b>"]
    },
    {
      "regex": "></.*?>",
      "exceptionStackTrace": null,
      "matches": [
        "></>>",
        "></<>",
        "><//>",
        "></eVil>",
        "></EVIL>",
        "></ev_il>",
        "></ev il>",
        "></ev4il>",
        "></e>",
        "></ >",
        "></6>",
        "></_>",
        "></>",
        "></evil>"
      ]
    },
    {
      "regex": " \\A      [.](\\d+) \\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    { "regex": "lid$", "exceptionStackTrace": null, "matches": ["lid"] },
    {
      "regex": "<meta itemprop=\"isbn\" content=\"([^\"]+)\"",
      "exceptionStackTrace": null,
      "matches": [
        "<meta itemprop=\"isbn\" content=\"=\"",
        "<meta itemprop=\"isbn\" content=\"<\"",
        "<meta itemprop=\"isbn\" content=\"\"\"",
        "<meta itemprop=\"isbn\" content=\"eVil\"",
        "<meta itemprop=\"isbn\" content=\"EVIL\"",
        "<meta itemprop=\"isbn\" content=\"ev_il\"",
        "<meta itemprop=\"isbn\" content=\"ev il\"",
        "<meta itemprop=\"isbn\" content=\"ev4il\"",
        "<meta itemprop=\"isbn\" content=\"e\"",
        "<meta itemprop=\"isbn\" content=\" \"",
        "<meta itemprop=\"isbn\" content=\"6\"",
        "<meta itemprop=\"isbn\" content=\"_\"",
        "<meta itemprop=\"isbn\" content=\"\"",
        "<meta itemprop=\"isbn\" content=\"evil\""
      ]
    },
    {
      "regex": "media=(http:.*?\\.gif)",
      "exceptionStackTrace": null,
      "matches": [
        "media=http:=.gif",
        "media=http::.gif",
        "media=http:..gif",
        "media=http:eVil.gif",
        "media=http:EVIL.gif",
        "media=http:ev_il.gif",
        "media=http:ev il.gif",
        "media=http:ev4il.gif",
        "media=http:e.gif",
        "media=http: .gif",
        "media=http:6.gif",
        "media=http:_.gif",
        "media=http:.gif",
        "media=http:evil.gif"
      ]
    },
    {
      "regex": "^\\._class_",
      "exceptionStackTrace": null,
      "matches": ["._class_"]
    },
    {
      "regex": "^tests\\s+[0-9]+$",
      "exceptionStackTrace": null,
      "matches": ["tests 00", "tests ", "tests  0", "tests0", "tests 0"]
    },
    {
      "regex": "\\\\?client=ca-someclient",
      "exceptionStackTrace": null,
      "matches": [
        "\\\\client=ca-someclient",
        "client=ca-someclient",
        "\\client=ca-someclient"
      ]
    },
    {
      "regex": "\\[.*?\\]|Y{2,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS",
      "exceptionStackTrace": null,
      "matches": [
        "ZZZ",
        "ZZ",
        "sss",
        "ss",
        "mmm",
        "mm",
        "hhh",
        "hh",
        "HHH",
        "HH",
        "ddddd",
        "dddd",
        "DDD",
        "DD",
        "MMMMM",
        "MMMM",
        "",
        "YYYYY",
        "YYYY",
        "Y",
        "[]]",
        "[[]",
        "[eVil]",
        "[EVIL]",
        "[ev_il]",
        "[ev il]",
        "[ev4il]",
        "[e]",
        "[ ]",
        "[6]",
        "[_]",
        "[]",
        "SSS",
        "Z",
        "s",
        "m",
        "A",
        "a",
        "h",
        "H",
        "d",
        "D",
        "M",
        "YY",
        "[evil]"
      ]
    },
    {
      "regex": "\\A\\w+\\s+\\w+.?\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "-(webkit|moz|ms|o)-.+",
      "exceptionStackTrace": null,
      "matches": [
        "-webkit--",
        "-webkit-eVil",
        "-webkit-EVIL",
        "-webkit-ev_il",
        "-webkit-ev il",
        "-webkit-ev4il",
        "-webkit-e",
        "-webkit- ",
        "-webkit-6",
        "-webkit-_",
        "-webkit-",
        "-o-evil",
        "-ms-evil",
        "-moz-evil",
        "-webkit-evil"
      ]
    },
    { "regex": "#2A2C2B", "exceptionStackTrace": null, "matches": ["#2A2C2B"] },
    { "regex": "zepto", "exceptionStackTrace": null, "matches": ["zepto"] },
    {
      "regex": "Verbose output is being written to .*\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "(\\w+)\\s*(\\S+)\\s*(\\w+)",
      "exceptionStackTrace": null,
      "matches": [
        "evil evil eVil",
        "evil evil EVIL",
        "evil evil ev_il",
        "evil evil ev il",
        "evil evil ev4il",
        "evil evil e",
        "evil evil  ",
        "evil evil 6",
        "evil evil _",
        "evil evil ",
        "evil evil  evil",
        "evil evilevil",
        "evil eVil evil",
        "evil EVIL evil",
        "evil ev_il evil",
        "evil ev il evil",
        "evil ev4il evil",
        "evil e evil",
        "evil   evil",
        "evil 6 evil",
        "evil _ evil",
        "evil  evil",
        "evil  evil evil",
        "evilevil evil",
        "eVil evil evil",
        "EVIL evil evil",
        "ev_il evil evil",
        "ev il evil evil",
        "ev4il evil evil",
        "e evil evil",
        "  evil evil",
        "6 evil evil",
        "_ evil evil",
        " evil evil",
        "evilevilevil",
        "evil evil evil"
      ]
    },
    {
      "regex": "(\\.[0-9]+)$",
      "exceptionStackTrace": null,
      "matches": [".00", ".", ".0"]
    },
    { "regex": "^\\ddeg$", "exceptionStackTrace": null, "matches": ["0deg"] },
    {
      "regex": "^rxjs\\/(\\/?.*)",
      "exceptionStackTrace": null,
      "matches": [
        "rxjs///",
        "rxjs//eVil",
        "rxjs//EVIL",
        "rxjs//ev_il",
        "rxjs//ev il",
        "rxjs//ev4il",
        "rxjs//e",
        "rxjs// ",
        "rxjs//6",
        "rxjs//_",
        "rxjs//",
        "rxjs///evil",
        "rxjs/evil",
        "rxjs/",
        "rxjs//evil"
      ]
    },
    {
      "regex": "0*(([0-9])|([1-9][0-9])|([1-4][0-9][0-9])|500)%",
      "exceptionStackTrace": null,
      "matches": [
        "0000%",
        "000%",
        "500%",
        "100%",
        "10%",
        "0%",
        "0500%",
        "0100%",
        "010%",
        "00%"
      ]
    },
    {
      "regex": "(?x)\n        ^\n            (?:(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun)\\x20)?\n            (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\n            \\x20+\n            (\\d+),?\n            \\x20\n            (\\d{4})\n            \\x20\n            (\\d{2}):(\\d{2}):(\\d{2})\n            [\\t\\x20]\n            (.*)\n        $\n    ",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    { "regex": "userID", "exceptionStackTrace": null, "matches": ["userID"] },
    {
      "regex": "(?:\u00e3\u0082\u0084\u00e3\u0081\u008e|\u00e5\u00b1\u00b1\u00e7\u00be\u008a)\u00e5\u00ba\u00a7",
      "exceptionStackTrace": null,
      "matches": [
        "\u00e5\u00b1\u00b1\u00e7\u00be\u008a\u00e5\u00ba\u00a7",
        "\u00e3\u0082\u0084\u00e3\u0081\u008e\u00e5\u00ba\u00a7"
      ]
    },
    {
      "regex": "^the table should be parsed$",
      "exceptionStackTrace": null,
      "matches": ["the table should be parsed"]
    },
    {
      "regex": "^(s|g|m)$",
      "exceptionStackTrace": null,
      "matches": ["m", "g", "s"]
    },
    {
      "regex": "(?<![<>])(<A pl=\"n\" gnt=\"n\">[Ss]h?\\x{e9}<\\/A> <N pl=\"n\" gnt=\"n\" gnd=\"f\">[Ss]cilling<\\/N>)(?![<>])",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "incomplete escape \\x"
      },
      "matches": []
    },
    {
      "regex": "Set-Cookie: .+\\r\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": "[ \\t\\x0B\\f]+",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "%%REPO_AND_VERSION%%",
      "exceptionStackTrace": null,
      "matches": ["%%REPO_AND_VERSION%%"]
    },
    {
      "regex": "Failed to cancel",
      "exceptionStackTrace": null,
      "matches": ["Failed to cancel"]
    },
    {
      "regex": "; *(T[BM]-\\d{3}[^;/]+) Build/",
      "exceptionStackTrace": null,
      "matches": [
        "; TM-000; Build/",
        "; TM-000/ Build/",
        "; TM-000- Build/",
        "; TM-000eVil Build/",
        "; TM-000EVIL Build/",
        "; TM-000ev_il Build/",
        "; TM-000ev il Build/",
        "; TM-000ev4il Build/",
        "; TM-000e Build/",
        "; TM-000  Build/",
        "; TM-0006 Build/",
        "; TM-000_ Build/",
        "; TM-000 Build/",
        "; TM-0000evil Build/",
        "; TM-00evil Build/",
        "; TB-000evil Build/",
        "; TA-000evil Build/",
        ";  TM-000evil Build/",
        ";TM-000evil Build/",
        "; TM-000evil Build/"
      ]
    },
    {
      "regex": "[\\u00af\\d]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 175"
      },
      "matches": []
    },
    {
      "regex": "foo \"some value\"",
      "exceptionStackTrace": null,
      "matches": ["foo \"some value\""]
    },
    {
      "regex": "hap update Window TargetPosition 0",
      "exceptionStackTrace": null,
      "matches": ["hap update Window TargetPosition 0"]
    },
    {
      "regex": "%23(\\d+)$",
      "exceptionStackTrace": null,
      "matches": ["%2300", "%23", "%230"]
    },
    {
      "regex": " ( (?:\\\\.|[^\\[]*)* ) \\[ \\@ (\\d+ | [a-zA-Z]\\w* ) (?: \\( (.*) \\) )? \\] }\n     ",
      "exceptionStackTrace": null,
      "matches": [
        "  }  [ @ 0   ( evil )  ] }\n     ",
        "  ]  [ @ 0   ( evil )  ] }\n     ",
        "  \\  [ @ 0   ( evil )  ] }\n     ",
        "  [  [ @ 0   ( evil )  ] }\n     ",
        "  @  [ @ 0   ( evil )  ] }\n     ",
        "  )  [ @ 0   ( evil )  ] }\n     ",
        "  (  [ @ 0   ( evil )  ] }\n     ",
        "  eVil  [ @ 0   ( evil )  ] }\n     ",
        "  EVIL  [ @ 0   ( evil )  ] }\n     ",
        "  ev_il  [ @ 0   ( evil )  ] }\n     ",
        "  ev il  [ @ 0   ( evil )  ] }\n     ",
        "  ev4il  [ @ 0   ( evil )  ] }\n     ",
        "  e  [ @ 0   ( evil )  ] }\n     ",
        "     [ @ 0   ( evil )  ] }\n     ",
        "  6  [ @ 0   ( evil )  ] }\n     ",
        "  _  [ @ 0   ( evil )  ] }\n     ",
        "  \\a  [ @  AeVil   ( evil )  ] }\n     ",
        "  \\a  [ @  AEVIL   ( evil )  ] }\n     ",
        "  \\a  [ @  Aev_il   ( evil )  ] }\n     ",
        "  \\a  [ @  Aev il   ( evil )  ] }\n     ",
        "  \\a  [ @  Aev4il   ( evil )  ] }\n     ",
        "  \\a  [ @  Ae   ( evil )  ] }\n     ",
        "  \\a  [ @  A    ( evil )  ] }\n     ",
        "  \\a  [ @  A6   ( evil )  ] }\n     ",
        "  \\a  [ @  A_   ( evil )  ] }\n     ",
        "  \\a  [ @  A   ( evil )  ] }\n     ",
        "  \\a  [ @  aevil   ( evil )  ] }\n     ",
        "  \\a  [ @ 0   ( evil )  ( evil )  ] }\n     ",
        "  \\a  [ @ 0   ] }\n     ",
        "  \\a  [ @ 0   ( } )  ] }\n     ",
        "  \\a  [ @ 0   ( ] )  ] }\n     ",
        "  \\a  [ @ 0   ( \\ )  ] }\n     ",
        "  \\a  [ @ 0   ( [ )  ] }\n     ",
        "  \\a  [ @ 0   ( @ )  ] }\n     ",
        "  \\a  [ @ 0   ( ) )  ] }\n     ",
        "  \\a  [ @ 0   ( ( )  ] }\n     ",
        "  \\a  [ @ 0   ( eVil )  ] }\n     ",
        "  \\a  [ @ 0   ( EVIL )  ] }\n     ",
        "  \\a  [ @ 0   ( ev_il )  ] }\n     ",
        "  \\a  [ @ 0   ( ev il )  ] }\n     ",
        "  \\a  [ @ 0   ( ev4il )  ] }\n     ",
        "  \\a  [ @ 0   ( e )  ] }\n     ",
        "  \\a  [ @ 0   (   )  ] }\n     ",
        "  \\a  [ @ 0   ( 6 )  ] }\n     ",
        "  \\a  [ @ 0   ( _ )  ] }\n     ",
        "  \\a  [ @ 0   (  )  ] }\n     ",
        "  \\a  [ @ 00   ( evil )  ] }\n     ",
        "  \\a  [ @    ( evil )  ] }\n     ",
        "  \\a\\a  [ @ 0   ( evil )  ] }\n     ",
        "    [ @ 0   ( evil )  ] }\n     ",
        "  \\}  [ @ 0   ( evil )  ] }\n     ",
        "  \\]  [ @ 0   ( evil )  ] }\n     ",
        "  \\\\  [ @ 0   ( evil )  ] }\n     ",
        "  \\[  [ @ 0   ( evil )  ] }\n     ",
        "  \\A  [ @ 0   ( evil )  ] }\n     ",
        "  \\@  [ @ 0   ( evil )  ] }\n     ",
        "  \\0  [ @ 0   ( evil )  ] }\n     ",
        "  \\)  [ @ 0   ( evil )  ] }\n     ",
        "  \\(  [ @ 0   ( evil )  ] }\n     ",
        "  \\   [ @ 0   ( evil )  ] }\n     ",
        "    [ @  A   ] }\n     ",
        "    [ @ 0   ] }\n     ",
        "  evil  [ @ 0   ( evil )  ] }\n     ",
        "  \\a  [ @  Aevil   ( evil )  ] }\n     ",
        "  \\a  [ @ 0   ( evil )  ] }\n     "
      ]
    },
    { "regex": "^<<EOF>>", "exceptionStackTrace": null, "matches": ["<<EOF>>"] },
    {
      "regex": "\\/:[a-zA-Z0-9_-]{0,}",
      "exceptionStackTrace": null,
      "matches": [
        "/::",
        "/:/",
        "/:-",
        "/:eVil",
        "/:EVIL",
        "/:ev_il",
        "/:ev il",
        "/:ev4il",
        "/:e",
        "/: ",
        "/:6",
        "/:_",
        "/:",
        "/:evil"
      ]
    },
    {
      "regex": "Tracing.*started",
      "exceptionStackTrace": null,
      "matches": [
        "TracingeVilstarted",
        "TracingEVILstarted",
        "Tracingev_ilstarted",
        "Tracingev ilstarted",
        "Tracingev4ilstarted",
        "Tracingestarted",
        "Tracing started",
        "Tracing6started",
        "Tracing_started",
        "Tracingstarted",
        "Tracingevilstarted"
      ]
    },
    {
      "regex": "[a-zA-Z_]\\w*\\??",
      "exceptionStackTrace": null,
      "matches": [
        "_evil??",
        "_evil",
        "_eVil?",
        "_EVIL?",
        "_ev_il?",
        "_ev il?",
        "_ev4il?",
        "_e?",
        "_ ?",
        "_6?",
        "__?",
        "_?",
        "aevil?",
        "Aevil?",
        "_",
        "_evil?"
      ]
    },
    { "regex": "whatevs", "exceptionStackTrace": null, "matches": ["whatevs"] },
    {
      "regex": "^b(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "beVil",
        "bEVIL",
        "bev_il",
        "bev il",
        "bev4il",
        "be",
        "b ",
        "b6",
        "b_",
        "b",
        "bevil"
      ]
    },
    {
      "regex": "((?P<hostname>[\\w\\.\\-]+))",
      "exceptionStackTrace": null,
      "matches": [
        ".",
        "-",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "^<(?P<tag_name>\\w+)",
      "exceptionStackTrace": null,
      "matches": [
        "<eVil",
        "<EVIL",
        "<ev_il",
        "<ev il",
        "<ev4il",
        "<e",
        "< ",
        "<6",
        "<_",
        "<",
        "<evil"
      ]
    },
    {
      "regex": "erb_start.*erb to widget with widget widget, name Josephine.*erb_end",
      "exceptionStackTrace": null,
      "matches": [
        "erb_startevilerb to widget with widget widget, name Josephine,erb_end",
        "erb_startevilerb to widget with widget widget, name JosephineeVilerb_end",
        "erb_startevilerb to widget with widget widget, name JosephineEVILerb_end",
        "erb_startevilerb to widget with widget widget, name Josephineev_ilerb_end",
        "erb_startevilerb to widget with widget widget, name Josephineev ilerb_end",
        "erb_startevilerb to widget with widget widget, name Josephineev4ilerb_end",
        "erb_startevilerb to widget with widget widget, name Josephineeerb_end",
        "erb_startevilerb to widget with widget widget, name Josephine erb_end",
        "erb_startevilerb to widget with widget widget, name Josephine6erb_end",
        "erb_startevilerb to widget with widget widget, name Josephine_erb_end",
        "erb_startevilerb to widget with widget widget, name Josephineerb_end",
        "erb_start,erb to widget with widget widget, name Josephineevilerb_end",
        "erb_starteVilerb to widget with widget widget, name Josephineevilerb_end",
        "erb_startEVILerb to widget with widget widget, name Josephineevilerb_end",
        "erb_startev_ilerb to widget with widget widget, name Josephineevilerb_end",
        "erb_startev ilerb to widget with widget widget, name Josephineevilerb_end",
        "erb_startev4ilerb to widget with widget widget, name Josephineevilerb_end",
        "erb_starteerb to widget with widget widget, name Josephineevilerb_end",
        "erb_start erb to widget with widget widget, name Josephineevilerb_end",
        "erb_start6erb to widget with widget widget, name Josephineevilerb_end",
        "erb_start_erb to widget with widget widget, name Josephineevilerb_end",
        "erb_starterb to widget with widget widget, name Josephineevilerb_end",
        "erb_starterb to widget with widget widget, name Josephineerb_end",
        "erb_startevilerb to widget with widget widget, name Josephineevilerb_end"
      ]
    },
    {
      "regex": "<loc\\s*>(.*?)</loc>",
      "exceptionStackTrace": null,
      "matches": [
        "<loc >></loc>",
        "<loc ><</loc>",
        "<loc >/</loc>",
        "<loc >eVil</loc>",
        "<loc >EVIL</loc>",
        "<loc >ev_il</loc>",
        "<loc >ev il</loc>",
        "<loc >ev4il</loc>",
        "<loc >e</loc>",
        "<loc > </loc>",
        "<loc >6</loc>",
        "<loc >_</loc>",
        "<loc ></loc>",
        "<loc  >evil</loc>",
        "<loc>evil</loc>",
        "<loc></loc>",
        "<loc >evil</loc>"
      ]
    },
    {
      "regex": "\\s*\u203a\\s*",
      "exceptionStackTrace": null,
      "matches": [
        " \u203a  ",
        " \u203a",
        "  \u203a ",
        "\u203a ",
        "\u203a",
        " \u203a "
      ]
    },
    {
      "regex": "Bio::Structure::IO::(\\S+)",
      "exceptionStackTrace": null,
      "matches": [
        "Bio::Structure::IO:::",
        "Bio::Structure::IO::eVil",
        "Bio::Structure::IO::EVIL",
        "Bio::Structure::IO::ev_il",
        "Bio::Structure::IO::ev il",
        "Bio::Structure::IO::ev4il",
        "Bio::Structure::IO::e",
        "Bio::Structure::IO:: ",
        "Bio::Structure::IO::6",
        "Bio::Structure::IO::_",
        "Bio::Structure::IO::",
        "Bio::Structure::IO::evil"
      ]
    },
    {
      "regex": "^[MG]\\.(\\d+)\\.A(\\.[0-9A-F]+)?$",
      "exceptionStackTrace": null,
      "matches": [
        "G.0.A.A.A",
        "G.0.A.AA",
        "G.0.A.",
        "G.0.A.G",
        "G.0.A.0",
        "G.00.A.A",
        "G..A.A",
        "M.0.A.A",
        "A.0.A.A",
        "G.0.A",
        "G.0.A.A"
      ]
    },
    {
      "regex": "tmp\\/restart.txt$",
      "exceptionStackTrace": null,
      "matches": [
        "tmp/restartAtxt",
        "tmp/restart0txt",
        "tmp/restart/txt",
        "tmp/restart txt",
        "tmp/restartatxt"
      ]
    },
    {
      "regex": "at.*\\.js\\:\\d+\\:\\d+\\)?",
      "exceptionStackTrace": null,
      "matches": [
        "atevil.js:0:0))",
        "atevil.js:0:0",
        "atevil.js:0:00)",
        "atevil.js:0:)",
        "atevil.js:00:0)",
        "atevil.js::0)",
        "at:.js:0:0)",
        "at..js:0:0)",
        "at).js:0:0)",
        "ateVil.js:0:0)",
        "atEVIL.js:0:0)",
        "atev_il.js:0:0)",
        "atev il.js:0:0)",
        "atev4il.js:0:0)",
        "ate.js:0:0)",
        "at .js:0:0)",
        "at6.js:0:0)",
        "at_.js:0:0)",
        "at.js:0:0)",
        "at.js:0:0",
        "atevil.js:0:0)"
      ]
    },
    {
      "regex": "\\n\\ +$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "expected string for property \"minScreenWidth\" of ",
      "exceptionStackTrace": null,
      "matches": ["expected string for property \"minScreenWidth\" of "]
    },
    {
      "regex": "(\\S+)\\s+searches\\s+a\\s+(protein\\s+or\\s+DNA\\s+)?sequence",
      "exceptionStackTrace": null,
      "matches": [
        "evil searches a protein or DNA protein or DNA sequence",
        "evil searches a protein or DNA  sequence",
        "evil searches a protein or DNAsequence",
        "evil searches a protein or  DNA sequence",
        "evil searches a protein orDNA sequence",
        "evil searches a protein  or DNA sequence",
        "evil searches a proteinor DNA sequence",
        "evil searches a  protein or DNA sequence",
        "evil searches aprotein or DNA sequence",
        "evil searches  a protein or DNA sequence",
        "evil searchesa protein or DNA sequence",
        "evil  searches a protein or DNA sequence",
        "evilsearches a protein or DNA sequence",
        "eVil searches a protein or DNA sequence",
        "EVIL searches a protein or DNA sequence",
        "ev_il searches a protein or DNA sequence",
        "ev il searches a protein or DNA sequence",
        "ev4il searches a protein or DNA sequence",
        "e searches a protein or DNA sequence",
        "  searches a protein or DNA sequence",
        "6 searches a protein or DNA sequence",
        "_ searches a protein or DNA sequence",
        " searches a protein or DNA sequence",
        "evil searches a sequence",
        "evil searches a protein or DNA sequence"
      ]
    },
    {
      "regex": "because they disagree on whether the base package should be loaded",
      "exceptionStackTrace": null,
      "matches": [
        "because they disagree on whether the base package should be loaded"
      ]
    },
    {
      "regex": "\\bhttp-equiv=([\"']|)\\s*Content-Type\\s*\\1",
      "exceptionStackTrace": null,
      "matches": [
        "http-equiv=' Content-Type  '",
        "http-equiv=' Content-Type'",
        "http-equiv='  Content-Type '",
        "http-equiv='Content-Type '",
        "http-equiv='' Content-Type '",
        "http-equiv= Content-Type '",
        "http-equiv=\" Content-Type '",
        "http-equiv=Content-Type'",
        "http-equiv=' Content-Type '"
      ]
    },
    {
      "regex": "^===[0-9a-f]{",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (parse error): Input string ended prematurely"
      },
      "matches": []
    },
    {
      "regex": "\\A#?([[:xdigit:]]{3}|[[:xdigit:]]{6})\\Z",
      "exceptionStackTrace": null,
      "matches": [
        "#:]]]]]]]",
        "#:]]]]]",
        "#x]]]]]]",
        "#t]]]]]]",
        "#i]]]]]]",
        "#g]]]]]]",
        "#d]]]]]]",
        "#a]]]]]]",
        "#[]]]]]]",
        "#:]]]]",
        "#:]]",
        "#x]]]",
        "#t]]]",
        "#i]]]",
        "#g]]]",
        "#d]]]",
        "#a]]]",
        "#[]]]",
        "##:]]]",
        ":]]]]]]",
        ":]]]",
        "#:]]]]]]",
        "#:]]]"
      ]
    },
    {
      "regex": "ga\\(\\\"ecommerce:addTransaction\\\",",
      "exceptionStackTrace": null,
      "matches": ["ga(\"ecommerce:addTransaction\","]
    },
    { "regex": "\\b__\\b", "exceptionStackTrace": null, "matches": ["__"] },
    {
      "regex": "Service/redis-external\\s+Doesn't require any endpoint",
      "exceptionStackTrace": null,
      "matches": [
        "Service/redis-external  Doesn't require any endpoint",
        "Service/redis-externalDoesn't require any endpoint",
        "Service/redis-external Doesn't require any endpoint"
      ]
    },
    {
      "regex": "injectStyles",
      "exceptionStackTrace": null,
      "matches": ["injectStyles"]
    },
    { "regex": "rethrow", "exceptionStackTrace": null, "matches": ["rethrow"] },
    {
      "regex": "01(dev|test|live|update)(up)?",
      "exceptionStackTrace": null,
      "matches": [
        "01devupup",
        "01update",
        "01live",
        "01test",
        "01dev",
        "01updateup",
        "01liveup",
        "01testup",
        "01devup"
      ]
    },
    {
      "regex": "\\\\$([^/]+)",
      "exceptionStackTrace": null,
      "matches": [
        "\\\\",
        "\\/",
        "\\eVil",
        "\\EVIL",
        "\\ev_il",
        "\\ev il",
        "\\ev4il",
        "\\e",
        "\\ ",
        "\\6",
        "\\_",
        "\\",
        "\\evil"
      ]
    },
    {
      "regex": "E\\[.+\\] unknown \\s+\\n$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^logout_app_sso(?:\\s+(.*))?$",
      "exceptionStackTrace": null,
      "matches": [
        "logout_app_sso evil evil",
        "logout_app_sso eVil",
        "logout_app_sso EVIL",
        "logout_app_sso ev_il",
        "logout_app_sso ev il",
        "logout_app_sso ev4il",
        "logout_app_sso e",
        "logout_app_sso  ",
        "logout_app_sso 6",
        "logout_app_sso _",
        "logout_app_sso ",
        "logout_app_sso  evil",
        "logout_app_ssoevil",
        "logout_app_sso",
        "logout_app_sso evil"
      ]
    },
    {
      "regex": "\\A@<(\\w+)>\\{(.*?)\\}\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "\\.(?<_1>formatMsg|getLastTime|hide|html2Text|pause|resume|setTitle|show)\\b(?=\\()",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<_"
      },
      "matches": []
    },
    {
      "regex": "HTTP/\\d\\.\\d\\s+(\\d+)\\s+.*",
      "exceptionStackTrace": null,
      "matches": [
        "HTTP/0.0 0 /",
        "HTTP/0.0 0 .",
        "HTTP/0.0 0 eVil",
        "HTTP/0.0 0 EVIL",
        "HTTP/0.0 0 ev_il",
        "HTTP/0.0 0 ev il",
        "HTTP/0.0 0 ev4il",
        "HTTP/0.0 0 e",
        "HTTP/0.0 0  ",
        "HTTP/0.0 0 6",
        "HTTP/0.0 0 _",
        "HTTP/0.0 0  evil",
        "HTTP/0.0 0evil",
        "HTTP/0.0 00 evil",
        "HTTP/0.0  evil",
        "HTTP/0.0  0 evil",
        "HTTP/0.00 evil",
        "HTTP/0.0 0 ",
        "HTTP/0.0 0 evil"
      ]
    },
    {
      "regex": "Unknown mobile command",
      "exceptionStackTrace": null,
      "matches": ["Unknown mobile command"]
    },
    {
      "regex": "\\A\\r?\\n\\Z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    { "regex": "^001", "exceptionStackTrace": null, "matches": ["001"] },
    {
      "regex": "rule_(\\d+)",
      "exceptionStackTrace": null,
      "matches": ["rule_00", "rule_", "rule_0"]
    },
    {
      "regex": "\\({5}",
      "exceptionStackTrace": null,
      "matches": ["((((((", "((((", "((((("]
    },
    {
      "regex": "^[a-z\\-0-9]+\\/[a-z\\-0-9]+$",
      "exceptionStackTrace": null,
      "matches": [
        "evil//",
        "evil/-",
        "evil/eVil",
        "evil/EVIL",
        "evil/ev_il",
        "evil/ev il",
        "evil/ev4il",
        "evil/e",
        "evil/ ",
        "evil/6",
        "evil/_",
        "evil/",
        "//evil",
        "-/evil",
        "eVil/evil",
        "EVIL/evil",
        "ev_il/evil",
        "ev il/evil",
        "ev4il/evil",
        "e/evil",
        " /evil",
        "6/evil",
        "_/evil",
        "/evil",
        "evil/evil"
      ]
    },
    {
      "regex": "##edgecolor##",
      "exceptionStackTrace": null,
      "matches": ["##edgecolor##"]
    },
    {
      "regex": "^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}",
      "exceptionStackTrace": null,
      "matches": [
        "0000-0-000",
        "0000-0-00",
        "0000-0-",
        "0000-0/0",
        "0000-000-0",
        "0000-00-0",
        "0000--0",
        "0000/0-0",
        "00000-0-0",
        "000-0-0",
        "0000-0-0"
      ]
    },
    {
      "regex": "^-?[a-z_]+$",
      "exceptionStackTrace": null,
      "matches": [
        "--",
        "-eVil",
        "-EVIL",
        "-ev_il",
        "-ev il",
        "-ev4il",
        "-e",
        "- ",
        "-6",
        "-_",
        "-",
        "--evil",
        "evil",
        "-evil"
      ]
    },
    {
      "regex": "\\nfoobar_process_open_fds [1-9]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^(?:\\s*.-[x]\\s*)",
      "exceptionStackTrace": null,
      "matches": [
        " a-x  ",
        " a-x",
        " A-x ",
        " 0-x ",
        " --x ",
        "  -x ",
        "  a-x ",
        "a-x ",
        "a-x",
        " a-x "
      ]
    },
    {
      "regex": "console.error.apply\\(console, \\[\"rendered!\",\"foo\"\\]\\);$",
      "exceptionStackTrace": null,
      "matches": [
        "consoleaerror]apply(console, [\"rendered!\",\"foo\"]);",
        "consoleaerror[apply(console, [\"rendered!\",\"foo\"]);",
        "consoleaerrorAapply(console, [\"rendered!\",\"foo\"]);",
        "consoleaerror;apply(console, [\"rendered!\",\"foo\"]);",
        "consoleaerror0apply(console, [\"rendered!\",\"foo\"]);",
        "consoleaerror,apply(console, [\"rendered!\",\"foo\"]);",
        "consoleaerror)apply(console, [\"rendered!\",\"foo\"]);",
        "consoleaerror(apply(console, [\"rendered!\",\"foo\"]);",
        "consoleaerror\"apply(console, [\"rendered!\",\"foo\"]);",
        "consoleaerror!apply(console, [\"rendered!\",\"foo\"]);",
        "consoleaerror apply(console, [\"rendered!\",\"foo\"]);",
        "console]erroraapply(console, [\"rendered!\",\"foo\"]);",
        "console[erroraapply(console, [\"rendered!\",\"foo\"]);",
        "consoleAerroraapply(console, [\"rendered!\",\"foo\"]);",
        "console;erroraapply(console, [\"rendered!\",\"foo\"]);",
        "console0erroraapply(console, [\"rendered!\",\"foo\"]);",
        "console,erroraapply(console, [\"rendered!\",\"foo\"]);",
        "console)erroraapply(console, [\"rendered!\",\"foo\"]);",
        "console(erroraapply(console, [\"rendered!\",\"foo\"]);",
        "console\"erroraapply(console, [\"rendered!\",\"foo\"]);",
        "console!erroraapply(console, [\"rendered!\",\"foo\"]);",
        "console erroraapply(console, [\"rendered!\",\"foo\"]);",
        "consoleaerroraapply(console, [\"rendered!\",\"foo\"]);"
      ]
    },
    { "regex": "Hi HMR", "exceptionStackTrace": null, "matches": ["Hi HMR"] },
    {
      "regex": "Status:\\s+NOT IN SYNC.*to create=3",
      "exceptionStackTrace": null,
      "matches": [
        "Status: NOT IN SYNC=to create=3",
        "Status: NOT IN SYNC:to create=3",
        "Status: NOT IN SYNCeVilto create=3",
        "Status: NOT IN SYNCEVILto create=3",
        "Status: NOT IN SYNCev_ilto create=3",
        "Status: NOT IN SYNCev ilto create=3",
        "Status: NOT IN SYNCev4ilto create=3",
        "Status: NOT IN SYNCeto create=3",
        "Status: NOT IN SYNC to create=3",
        "Status: NOT IN SYNC6to create=3",
        "Status: NOT IN SYNC_to create=3",
        "Status:  NOT IN SYNCevilto create=3",
        "Status:NOT IN SYNCevilto create=3",
        "Status: NOT IN SYNCto create=3",
        "Status: NOT IN SYNCevilto create=3"
      ]
    },
    {
      "regex": "(.*)-([0-9:]+)",
      "exceptionStackTrace": null,
      "matches": [
        "evil-::",
        "evil-",
        "evil-0",
        ":-:",
        "--:",
        "eVil-:",
        "EVIL-:",
        "ev_il-:",
        "ev il-:",
        "ev4il-:",
        "e-:",
        " -:",
        "6-:",
        "_-:",
        "-:",
        "evil-:"
      ]
    },
    { "regex": ";;;|;;", "exceptionStackTrace": null, "matches": [";;", ";;;"] },
    {
      "regex": "^someone else changes the (.+?) '(.+)' of '(.+)' to$",
      "exceptionStackTrace": null,
      "matches": [
        "someone else changes the evil 'evil' of ''' to",
        "someone else changes the evil 'evil' of 'eVil' to",
        "someone else changes the evil 'evil' of 'EVIL' to",
        "someone else changes the evil 'evil' of 'ev_il' to",
        "someone else changes the evil 'evil' of 'ev il' to",
        "someone else changes the evil 'evil' of 'ev4il' to",
        "someone else changes the evil 'evil' of 'e' to",
        "someone else changes the evil 'evil' of ' ' to",
        "someone else changes the evil 'evil' of '6' to",
        "someone else changes the evil 'evil' of '_' to",
        "someone else changes the evil 'evil' of '' to",
        "someone else changes the evil ''' of 'evil' to",
        "someone else changes the evil 'eVil' of 'evil' to",
        "someone else changes the evil 'EVIL' of 'evil' to",
        "someone else changes the evil 'ev_il' of 'evil' to",
        "someone else changes the evil 'ev il' of 'evil' to",
        "someone else changes the evil 'ev4il' of 'evil' to",
        "someone else changes the evil 'e' of 'evil' to",
        "someone else changes the evil ' ' of 'evil' to",
        "someone else changes the evil '6' of 'evil' to",
        "someone else changes the evil '_' of 'evil' to",
        "someone else changes the evil '' of 'evil' to",
        "someone else changes the ' 'evil' of 'evil' to",
        "someone else changes the eVil 'evil' of 'evil' to",
        "someone else changes the EVIL 'evil' of 'evil' to",
        "someone else changes the ev_il 'evil' of 'evil' to",
        "someone else changes the ev il 'evil' of 'evil' to",
        "someone else changes the ev4il 'evil' of 'evil' to",
        "someone else changes the e 'evil' of 'evil' to",
        "someone else changes the   'evil' of 'evil' to",
        "someone else changes the 6 'evil' of 'evil' to",
        "someone else changes the _ 'evil' of 'evil' to",
        "someone else changes the  'evil' of 'evil' to",
        "someone else changes the evil 'evil' of 'evil' to"
      ]
    },
    {
      "regex": "\\=(.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "==",
        "=eVil",
        "=EVIL",
        "=ev_il",
        "=ev il",
        "=ev4il",
        "=e",
        "= ",
        "=6",
        "=_",
        "=",
        "=evil"
      ]
    },
    {
      "regex": "\\/\\*.*?\\*\\/\\s?",
      "exceptionStackTrace": null,
      "matches": [
        "/*evil*/  ",
        "/*evil*/",
        "/*/*/ ",
        "/***/ ",
        "/*eVil*/ ",
        "/*EVIL*/ ",
        "/*ev_il*/ ",
        "/*ev il*/ ",
        "/*ev4il*/ ",
        "/*e*/ ",
        "/* */ ",
        "/*6*/ ",
        "/*_*/ ",
        "/**/ ",
        "/**/",
        "/*evil*/ "
      ]
    },
    {
      "regex": "^(?:ORDER\\b)",
      "exceptionStackTrace": null,
      "matches": ["ORDER"]
    },
    {
      "regex": "citation not found: nosuchkey",
      "exceptionStackTrace": null,
      "matches": ["citation not found: nosuchkey"]
    },
    { "regex": "\\@ARGV", "exceptionStackTrace": null, "matches": ["@ARGV"] },
    {
      "regex": "Expected an int or an iterable of at most 2 items for flag 'f0', received False",
      "exceptionStackTrace": null,
      "matches": [
        "Expected an int or an iterable of at most 2 items for flag 'f0', received False"
      ]
    },
    {
      "regex": "RuntimeError: .*sudo!.*Command failed. false",
      "exceptionStackTrace": null,
      "matches": [
        "RuntimeError: evilsudo!evilCommand failedA false",
        "RuntimeError: evilsudo!evilCommand failed: false",
        "RuntimeError: evilsudo!evilCommand failed0 false",
        "RuntimeError: evilsudo!evilCommand failed! false",
        "RuntimeError: evilsudo!evilCommand failed  false",
        "RuntimeError: evilsudo!:Command faileda false",
        "RuntimeError: evilsudo!!Command faileda false",
        "RuntimeError: evilsudo!eVilCommand faileda false",
        "RuntimeError: evilsudo!EVILCommand faileda false",
        "RuntimeError: evilsudo!ev_ilCommand faileda false",
        "RuntimeError: evilsudo!ev ilCommand faileda false",
        "RuntimeError: evilsudo!ev4ilCommand faileda false",
        "RuntimeError: evilsudo!eCommand faileda false",
        "RuntimeError: evilsudo! Command faileda false",
        "RuntimeError: evilsudo!6Command faileda false",
        "RuntimeError: evilsudo!_Command faileda false",
        "RuntimeError: evilsudo!Command faileda false",
        "RuntimeError: :sudo!evilCommand faileda false",
        "RuntimeError: !sudo!evilCommand faileda false",
        "RuntimeError: eVilsudo!evilCommand faileda false",
        "RuntimeError: EVILsudo!evilCommand faileda false",
        "RuntimeError: ev_ilsudo!evilCommand faileda false",
        "RuntimeError: ev ilsudo!evilCommand faileda false",
        "RuntimeError: ev4ilsudo!evilCommand faileda false",
        "RuntimeError: esudo!evilCommand faileda false",
        "RuntimeError:  sudo!evilCommand faileda false",
        "RuntimeError: 6sudo!evilCommand faileda false",
        "RuntimeError: _sudo!evilCommand faileda false",
        "RuntimeError: sudo!evilCommand faileda false",
        "RuntimeError: sudo!Command faileda false",
        "RuntimeError: evilsudo!evilCommand faileda false"
      ]
    },
    { "regex": "\\<\\/", "exceptionStackTrace": null, "matches": ["</"] },
    {
      "regex": "^bogomips\\s*:\\s+(\\d+(\\.\\d+)?)$",
      "exceptionStackTrace": null,
      "matches": [
        "bogomips : 0.0.0",
        "bogomips : 0",
        "bogomips : 0.00",
        "bogomips : 0.",
        "bogomips : 00.0",
        "bogomips : .0",
        "bogomips :  0.0",
        "bogomips :0.0",
        "bogomips  : 0.0",
        "bogomips: 0.0",
        "bogomips: 0",
        "bogomips : 0.0"
      ]
    },
    {
      "regex": "\\.(go|html|atom|rss|xml)$",
      "exceptionStackTrace": null,
      "matches": [".xml", ".rss", ".atom", ".html", ".go"]
    },
    {
      "regex": "^\\+(\\s*)(([-\\w]+)|(#\\{))",
      "exceptionStackTrace": null,
      "matches": [
        "+ {",
        "+ -",
        "+ +",
        "+ #",
        "+ eVil",
        "+ EVIL",
        "+ ev_il",
        "+ ev il",
        "+ ev4il",
        "+ e",
        "+  ",
        "+ 6",
        "+ _",
        "+ ",
        "+  evil",
        "+#{",
        "+evil",
        "+ #{",
        "+ evil"
      ]
    },
    {
      "regex": "^%(0\\d*)?[dxX]$",
      "exceptionStackTrace": null,
      "matches": [
        "%00x",
        "%00d",
        "%00a",
        "%00A",
        "%0000X",
        "%000X",
        "%0X",
        "%X",
        "%00X"
      ]
    },
    {
      "regex": "%WARP-DIR%",
      "exceptionStackTrace": null,
      "matches": ["%WARP-DIR%"]
    },
    {
      "regex": "The screenshot .* is not a valid image",
      "exceptionStackTrace": null,
      "matches": [
        "The screenshot eVil is not a valid image",
        "The screenshot EVIL is not a valid image",
        "The screenshot ev_il is not a valid image",
        "The screenshot ev il is not a valid image",
        "The screenshot ev4il is not a valid image",
        "The screenshot e is not a valid image",
        "The screenshot   is not a valid image",
        "The screenshot 6 is not a valid image",
        "The screenshot _ is not a valid image",
        "The screenshot  is not a valid image",
        "The screenshot evil is not a valid image"
      ]
    },
    {
      "regex": "gitVersion=\\\"(.*?)\\\"",
      "exceptionStackTrace": null,
      "matches": [
        "gitVersion=\"=\"",
        "gitVersion=\"\"\"",
        "gitVersion=\"eVil\"",
        "gitVersion=\"EVIL\"",
        "gitVersion=\"ev_il\"",
        "gitVersion=\"ev il\"",
        "gitVersion=\"ev4il\"",
        "gitVersion=\"e\"",
        "gitVersion=\" \"",
        "gitVersion=\"6\"",
        "gitVersion=\"_\"",
        "gitVersion=\"\"",
        "gitVersion=\"evil\""
      ]
    },
    {
      "regex": "(\\w+)\\.(visual\\.force|salesforce)\\.com$",
      "exceptionStackTrace": null,
      "matches": [
        "eVil.visual.force.com",
        "EVIL.visual.force.com",
        "ev_il.visual.force.com",
        "ev il.visual.force.com",
        "ev4il.visual.force.com",
        "e.visual.force.com",
        " .visual.force.com",
        "6.visual.force.com",
        "_.visual.force.com",
        ".visual.force.com",
        "evil.salesforce.com",
        "evil.visual.force.com"
      ]
    },
    {
      "regex": "^(?:get|set|changed|splice|delete)$",
      "exceptionStackTrace": null,
      "matches": ["delete", "splice", "changed", "set", "get"]
    },
    {
      "regex": "(?:$ext_string)$",
      "exceptionStackTrace": null,
      "matches": ["ext_string"]
    },
    { "regex": "Job$", "exceptionStackTrace": null, "matches": ["Job"] },
    {
      "regex": ".*\\bWeapon\\b.*Symbol\\(Can shoot\\).*\\btrue\\b",
      "exceptionStackTrace": null,
      "matches": [
        "evilWeaponevilSymbol(Can shoot))true",
        "evilWeaponevilSymbol(Can shoot)(true",
        "evilWeaponevilSymbol(Can shoot)eViltrue",
        "evilWeaponevilSymbol(Can shoot)EVILtrue",
        "evilWeaponevilSymbol(Can shoot)ev_iltrue",
        "evilWeaponevilSymbol(Can shoot)ev iltrue",
        "evilWeaponevilSymbol(Can shoot)ev4iltrue",
        "evilWeaponevilSymbol(Can shoot)etrue",
        "evilWeaponevilSymbol(Can shoot) true",
        "evilWeaponevilSymbol(Can shoot)6true",
        "evilWeaponevilSymbol(Can shoot)_true",
        "evilWeaponevilSymbol(Can shoot)true",
        "evilWeapon)Symbol(Can shoot)eviltrue",
        "evilWeapon(Symbol(Can shoot)eviltrue",
        "evilWeaponeVilSymbol(Can shoot)eviltrue",
        "evilWeaponEVILSymbol(Can shoot)eviltrue",
        "evilWeaponev_ilSymbol(Can shoot)eviltrue",
        "evilWeaponev ilSymbol(Can shoot)eviltrue",
        "evilWeaponev4ilSymbol(Can shoot)eviltrue",
        "evilWeaponeSymbol(Can shoot)eviltrue",
        "evilWeapon Symbol(Can shoot)eviltrue",
        "evilWeapon6Symbol(Can shoot)eviltrue",
        "evilWeapon_Symbol(Can shoot)eviltrue",
        "evilWeaponSymbol(Can shoot)eviltrue",
        ")WeaponevilSymbol(Can shoot)eviltrue",
        "(WeaponevilSymbol(Can shoot)eviltrue",
        "eVilWeaponevilSymbol(Can shoot)eviltrue",
        "EVILWeaponevilSymbol(Can shoot)eviltrue",
        "ev_ilWeaponevilSymbol(Can shoot)eviltrue",
        "ev ilWeaponevilSymbol(Can shoot)eviltrue",
        "ev4ilWeaponevilSymbol(Can shoot)eviltrue",
        "eWeaponevilSymbol(Can shoot)eviltrue",
        " WeaponevilSymbol(Can shoot)eviltrue",
        "6WeaponevilSymbol(Can shoot)eviltrue",
        "_WeaponevilSymbol(Can shoot)eviltrue",
        "WeaponevilSymbol(Can shoot)eviltrue",
        "WeaponSymbol(Can shoot)true",
        "evilWeaponevilSymbol(Can shoot)eviltrue"
      ]
    },
    { "regex": "tgz", "exceptionStackTrace": null, "matches": ["tgz"] },
    {
      "regex": "(us-gaap:)[^s]*(incomeloss)",
      "exceptionStackTrace": null,
      "matches": [
        "us-gaap::incomeloss",
        "us-gaap:-incomeloss",
        "us-gaap:eVilincomeloss",
        "us-gaap:EVILincomeloss",
        "us-gaap:ev_ilincomeloss",
        "us-gaap:ev ilincomeloss",
        "us-gaap:ev4ilincomeloss",
        "us-gaap:eincomeloss",
        "us-gaap: incomeloss",
        "us-gaap:6incomeloss",
        "us-gaap:_incomeloss",
        "us-gaap:incomeloss",
        "us-gaap:evilincomeloss"
      ]
    },
    {
      "regex": "exception",
      "exceptionStackTrace": null,
      "matches": ["exception"]
    },
    {
      "regex": "([^:]|^)(/{2,})",
      "exceptionStackTrace": null,
      "matches": ["a/", "A//", "://", "0//", "///", " //", "//", "a//"]
    },
    {
      "regex": "^\\^([0-9]+|[^\\\\_])",
      "exceptionStackTrace": null,
      "matches": ["^_", "^^", "^\\", "^A", "^ ", "^00", "^", "^a", "^0"]
    },
    {
      "regex": "^(https?)://([^/]+)(/.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "https://evil/:",
        "https://evil//",
        "https://evil/eVil",
        "https://evil/EVIL",
        "https://evil/ev_il",
        "https://evil/ev il",
        "https://evil/ev4il",
        "https://evil/e",
        "https://evil/ ",
        "https://evil/6",
        "https://evil/_",
        "https://evil/",
        "https://:/evil",
        "https:////evil",
        "https://eVil/evil",
        "https://EVIL/evil",
        "https://ev_il/evil",
        "https://ev il/evil",
        "https://ev4il/evil",
        "https://e/evil",
        "https:// /evil",
        "https://6/evil",
        "https://_/evil",
        "https:///evil",
        "httpss://evil/evil",
        "http://evil/evil",
        "http://evil/",
        "https://evil/evil"
      ]
    },
    {
      "regex": "$user.*$",
      "exceptionStackTrace": null,
      "matches": [
        "usereVil",
        "userEVIL",
        "userev_il",
        "userev il",
        "userev4il",
        "usere",
        "user ",
        "user6",
        "user_",
        "user",
        "userevil"
      ]
    },
    {
      "regex": "^//adzone.pub.com/xiby/RAZd/aardvark?",
      "exceptionStackTrace": null,
      "matches": [
        "//adzoneapubacom/xiby/RAZd/aardvarkk",
        "//adzoneapubAcom/xiby/RAZd/aardvark",
        "//adzoneapub0com/xiby/RAZd/aardvark",
        "//adzoneapub/com/xiby/RAZd/aardvark",
        "//adzoneapub com/xiby/RAZd/aardvark",
        "//adzoneApubacom/xiby/RAZd/aardvark",
        "//adzone0pubacom/xiby/RAZd/aardvark",
        "//adzone/pubacom/xiby/RAZd/aardvark",
        "//adzone pubacom/xiby/RAZd/aardvark",
        "//adzoneapubacom/xiby/RAZd/aardvar",
        "//adzoneapubacom/xiby/RAZd/aardvark"
      ]
    },
    {
      "regex": "(?x)https?://(?:www\\.)?filmon\\.(?:tv|com)/(?:\n        (?:\n            index/popout\\?\n            |\n            (?:tv/)channel/(?:export\\?)?\n            |\n            tv/(?!channel)\n            |\n            channel/\n            |\n            (?P<is_group>group/)\n        )(?:channel_id=)?(?P<channel>[-_\\w]+)\n    |\n        vod/view/(?P<vod_id>\\d+)-\n    )",
      "exceptionStackTrace": null,
      "matches": [
        "https://www.filmon.tv/\n        vod/view/00-\n    ",
        "https://www.filmon.tv/\n        vod/view/-\n    ",
        "https://www.filmon.tv/\n        \n            tv/channel/export?export?\n            channel_id=evil\n    ",
        "https://www.filmon.tv/\n        \n            tv/channel/\n            channel_id=evil\n    ",
        "https://www.filmon.tv/\n        \n            index/popout?\n            channel_id=?\n    ",
        "https://www.filmon.tv/\n        \n            index/popout?\n            channel_id==\n    ",
        "https://www.filmon.tv/\n        \n            index/popout?\n            channel_id=:\n    ",
        "https://www.filmon.tv/\n        \n            index/popout?\n            channel_id=/\n    ",
        "https://www.filmon.tv/\n        \n            index/popout?\n            channel_id=.\n    ",
        "https://www.filmon.tv/\n        \n            index/popout?\n            channel_id=-\n    ",
        "https://www.filmon.tv/\n        \n            index/popout?\n            channel_id=eVil\n    ",
        "https://www.filmon.tv/\n        \n            index/popout?\n            channel_id=EVIL\n    ",
        "https://www.filmon.tv/\n        \n            index/popout?\n            channel_id=ev_il\n    ",
        "https://www.filmon.tv/\n        \n            index/popout?\n            channel_id=ev il\n    ",
        "https://www.filmon.tv/\n        \n            index/popout?\n            channel_id=ev4il\n    ",
        "https://www.filmon.tv/\n        \n            index/popout?\n            channel_id=e\n    ",
        "https://www.filmon.tv/\n        \n            index/popout?\n            channel_id= \n    ",
        "https://www.filmon.tv/\n        \n            index/popout?\n            channel_id=6\n    ",
        "https://www.filmon.tv/\n        \n            index/popout?\n            channel_id=_\n    ",
        "https://www.filmon.tv/\n        \n            index/popout?\n            channel_id=\n    ",
        "https://www.filmon.tv/\n        \n            index/popout?\n            channel_id=channel_id=evil\n    ",
        "https://www.filmon.tv/\n        \n            index/popout?\n            evil\n    ",
        "https://www.www.filmon.tv/\n        \n            index/popout?\n            channel_id=evil\n    ",
        "https://filmon.tv/\n        \n            index/popout?\n            channel_id=evil\n    ",
        "httpss://www.filmon.tv/\n        \n            index/popout?\n            channel_id=evil\n    ",
        "http://www.filmon.tv/\n        \n            index/popout?\n            channel_id=evil\n    ",
        "http://filmon.com/\n        \n            index/popout?\n            evil\n    ",
        "http://filmon.tv/\n        vod/view/0-\n    ",
        "http://filmon.tv/\n        \n            group/\n        evil\n    ",
        "http://filmon.tv/\n        \n            channel/\n            evil\n    ",
        "http://filmon.tv/\n        \n            tv/\n            evil\n    ",
        "http://filmon.tv/\n        \n            tv/channel/\n            evil\n    ",
        "http://filmon.tv/\n        \n            index/popout?\n            evil\n    ",
        "https://www.filmon.com/\n        \n            index/popout?\n            channel_id=evil\n    ",
        "https://www.filmon.tv/\n        vod/view/0-\n    ",
        "https://www.filmon.tv/\n        \n            group/\n        channel_id=evil\n    ",
        "https://www.filmon.tv/\n        \n            channel/\n            channel_id=evil\n    ",
        "https://www.filmon.tv/\n        \n            tv/\n            channel_id=evil\n    ",
        "https://www.filmon.tv/\n        \n            tv/channel/export?\n            channel_id=evil\n    ",
        "https://www.filmon.tv/\n        \n            index/popout?\n            channel_id=evil\n    "
      ]
    },
    {
      "regex": "\\A[a-zA-Z_]+[a-zA-Z0-9_]*\\Z",
      "exceptionStackTrace": null,
      "matches": [
        "evileVil",
        "evilEVIL",
        "evilev_il",
        "evilev il",
        "evilev4il",
        "evile",
        "evil ",
        "evil6",
        "evil_",
        "eVilevil",
        "EVILevil",
        "ev_ilevil",
        "ev ilevil",
        "ev4ilevil",
        "eevil",
        " evil",
        "6evil",
        "_evil",
        "evil",
        "evilevil"
      ]
    },
    {
      "regex": "\\:\\d*>",
      "exceptionStackTrace": null,
      "matches": [":00>", ":>", ":0>"]
    },
    {
      "regex": "property :created_at, DateTime",
      "exceptionStackTrace": null,
      "matches": ["property :created_at, DateTime"]
    },
    {
      "regex": "desc-\\w+ desc-row",
      "exceptionStackTrace": null,
      "matches": [
        "desc-eVil desc-row",
        "desc-EVIL desc-row",
        "desc-ev_il desc-row",
        "desc-ev il desc-row",
        "desc-ev4il desc-row",
        "desc-e desc-row",
        "desc-  desc-row",
        "desc-6 desc-row",
        "desc-_ desc-row",
        "desc- desc-row",
        "desc-evil desc-row"
      ]
    },
    {
      "regex": "\\b(define\\(.*)('amdefine',?)",
      "exceptionStackTrace": null,
      "matches": [
        "define(evil'amdefine',,",
        "define(evil'amdefine'",
        "define(,'amdefine',",
        "define(('amdefine',",
        "define(''amdefine',",
        "define(eVil'amdefine',",
        "define(EVIL'amdefine',",
        "define(ev_il'amdefine',",
        "define(ev il'amdefine',",
        "define(ev4il'amdefine',",
        "define(e'amdefine',",
        "define( 'amdefine',",
        "define(6'amdefine',",
        "define(_'amdefine',",
        "define('amdefine',",
        "define('amdefine'",
        "define(evil'amdefine',"
      ]
    },
    {
      "regex": "^(((.* )?~?-?\\d* ~?-?\\d* ~?-?\\d*)|(.+ .+))$",
      "exceptionStackTrace": null,
      "matches": [
        "evil ~",
        "evil -",
        "evil eVil",
        "evil EVIL",
        "evil ev_il",
        "evil ev il",
        "evil ev4il",
        "evil e",
        "evil  ",
        "evil 6",
        "evil _",
        "evil ",
        "~ evil",
        "- evil",
        "eVil evil",
        "EVIL evil",
        "ev_il evil",
        "ev il evil",
        "ev4il evil",
        "e evil",
        "  evil",
        "6 evil",
        "_ evil",
        " evil",
        "evil ~-0 ~-0 ~-00",
        "evil ~-0 ~-0 ~-",
        "evil ~-0 ~-0 ~--0",
        "evil ~-0 ~-0 ~0",
        "evil ~-0 ~-0 ~~-0",
        "evil ~-0 ~-0 -0",
        "evil ~-0 ~-00 ~-0",
        "evil ~-0 ~- ~-0",
        "evil ~-0 ~--0 ~-0",
        "evil ~-0 ~0 ~-0",
        "evil ~-0 ~~-0 ~-0",
        "evil ~-0 -0 ~-0",
        "evil ~-00 ~-0 ~-0",
        "evil ~- ~-0 ~-0",
        "evil ~--0 ~-0 ~-0",
        "evil ~0 ~-0 ~-0",
        "evil ~~-0 ~-0 ~-0",
        "evil -0 ~-0 ~-0",
        "evil evil ~-0 ~-0 ~-0",
        "~-0 ~-0 ~-0",
        "~ ~-0 ~-0 ~-0",
        "- ~-0 ~-0 ~-0",
        "eVil ~-0 ~-0 ~-0",
        "EVIL ~-0 ~-0 ~-0",
        "ev_il ~-0 ~-0 ~-0",
        "ev il ~-0 ~-0 ~-0",
        "ev4il ~-0 ~-0 ~-0",
        "e ~-0 ~-0 ~-0",
        "  ~-0 ~-0 ~-0",
        "6 ~-0 ~-0 ~-0",
        "_ ~-0 ~-0 ~-0",
        " ~-0 ~-0 ~-0",
        "  ",
        "evil evil",
        "evil ~-0 ~-0 ~-0"
      ]
    },
    {
      "regex": "\u04ab\u0443\u043b",
      "exceptionStackTrace": null,
      "matches": ["\u04ab\u0443\u043b"]
    },
    {
      "regex": ".arch=0x[0-9a-z]+:<String: \".+\">",
      "exceptionStackTrace": null,
      "matches": [
        "aarch=0xevil:<String: \">\">",
        "aarch=0xevil:<String: \"=\">",
        "aarch=0xevil:<String: \"<\">",
        "aarch=0xevil:<String: \":\">",
        "aarch=0xevil:<String: \"\"\">",
        "aarch=0xevil:<String: \"eVil\">",
        "aarch=0xevil:<String: \"EVIL\">",
        "aarch=0xevil:<String: \"ev_il\">",
        "aarch=0xevil:<String: \"ev il\">",
        "aarch=0xevil:<String: \"ev4il\">",
        "aarch=0xevil:<String: \"e\">",
        "aarch=0xevil:<String: \" \">",
        "aarch=0xevil:<String: \"6\">",
        "aarch=0xevil:<String: \"_\">",
        "aarch=0xevil:<String: \"\">",
        "aarch=0xeVil:<String: \"evil\">",
        "aarch=0xEVIL:<String: \"evil\">",
        "aarch=0xev_il:<String: \"evil\">",
        "aarch=0xev il:<String: \"evil\">",
        "aarch=0xev4il:<String: \"evil\">",
        "aarch=0xe:<String: \"evil\">",
        "aarch=0x :<String: \"evil\">",
        "aarch=0x6:<String: \"evil\">",
        "aarch=0x_:<String: \"evil\">",
        "aarch=0x:<String: \"evil\">",
        "Aarch=0xevil:<String: \"evil\">",
        ">arch=0xevil:<String: \"evil\">",
        "=arch=0xevil:<String: \"evil\">",
        "<arch=0xevil:<String: \"evil\">",
        ":arch=0xevil:<String: \"evil\">",
        "0arch=0xevil:<String: \"evil\">",
        "\"arch=0xevil:<String: \"evil\">",
        " arch=0xevil:<String: \"evil\">",
        "aarch=0xevil:<String: \"evil\">"
      ]
    },
    {
      "regex": "(^|[^0-9A-Za-z\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u024f\u1e00-\u1eff\u2c60-\u2c7f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua7ff])((?:1[\\s\\xa0]*Corin(?:tios|i))|(?:1[\\s\\xa0]*Corinti)|(?:1[\\s\\xa0]*Corint)|(?:(?:1(?:\\.[o\\xBA]?|[o\\xBA])|I)[\\s\\xa0]*Corintios|1(?:[\\s\\xa0]*Corin|Cor|[\\s\\xa0]*Cor?)|(?:1(?:\\.[o\\xBA]|[o\\xBA])|I)\\.[\\s\\xa0]*Corintios|Primero?[\\s\\xa0]*Corintios))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 160"
      },
      "matches": []
    },
    {
      "regex": "^<([\\w:]+)((?:\\s+[\\w\\-]+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>",
      "exceptionStackTrace": null,
      "matches": [
        "<evil evil = > />",
        "<evil evil = = />",
        "<evil evil = < />",
        "<evil evil = : />",
        "<evil evil = / />",
        "<evil evil = - />",
        "<evil evil = ' />",
        "<evil evil = \" />",
        "<evil evil = eVil />",
        "<evil evil = EVIL />",
        "<evil evil = ev_il />",
        "<evil evil = ev il />",
        "<evil evil = ev4il />",
        "<evil evil = e />",
        "<evil evil =   />",
        "<evil evil = 6 />",
        "<evil evil = _ />",
        "<evil evil =  />",
        "<evil evil = '>' />",
        "<evil evil = '=' />",
        "<evil evil = '<' />",
        "<evil evil = ':' />",
        "<evil evil = '/' />",
        "<evil evil = '-' />",
        "<evil evil = ''' />",
        "<evil evil = '\"' />",
        "<evil evil = 'eVil' />",
        "<evil evil = 'EVIL' />",
        "<evil evil = 'ev_il' />",
        "<evil evil = 'ev il' />",
        "<evil evil = 'ev4il' />",
        "<evil evil = 'e' />",
        "<evil evil = ' ' />",
        "<evil evil = '6' />",
        "<evil evil = '_' />",
        "<evil evil = '' />",
        "<evil evil = \"evil\" //>",
        "<evil evil = \"evil\" >",
        "<evil evil = \"evil\"  />",
        "<evil evil = \"evil\"/>",
        "<evil evil = \"evil\" evil = \"evil\" />",
        "<evil />",
        "<evil evil = \"evil\" = \"evil\" />",
        "<evil evil />",
        "<evil evil = \">\" />",
        "<evil evil = \"=\" />",
        "<evil evil = \"<\" />",
        "<evil evil = \":\" />",
        "<evil evil = \"/\" />",
        "<evil evil = \"-\" />",
        "<evil evil = \"'\" />",
        "<evil evil = \"\"\" />",
        "<evil evil = \"eVil\" />",
        "<evil evil = \"EVIL\" />",
        "<evil evil = \"ev_il\" />",
        "<evil evil = \"ev il\" />",
        "<evil evil = \"ev4il\" />",
        "<evil evil = \"e\" />",
        "<evil evil = \" \" />",
        "<evil evil = \"6\" />",
        "<evil evil = \"_\" />",
        "<evil evil = \"\" />",
        "<evil evil =  \"evil\" />",
        "<evil evil =\"evil\" />",
        "<evil evil  = \"evil\" />",
        "<evil evil= \"evil\" />",
        "<evil > = \"evil\" />",
        "<evil = = \"evil\" />",
        "<evil < = \"evil\" />",
        "<evil : = \"evil\" />",
        "<evil / = \"evil\" />",
        "<evil - = \"evil\" />",
        "<evil ' = \"evil\" />",
        "<evil \" = \"evil\" />",
        "<evil eVil = \"evil\" />",
        "<evil EVIL = \"evil\" />",
        "<evil ev_il = \"evil\" />",
        "<evil ev il = \"evil\" />",
        "<evil ev4il = \"evil\" />",
        "<evil e = \"evil\" />",
        "<evil   = \"evil\" />",
        "<evil 6 = \"evil\" />",
        "<evil _ = \"evil\" />",
        "<evil  = \"evil\" />",
        "<evil  evil = \"evil\" />",
        "<evilevil = \"evil\" />",
        "<> evil = \"evil\" />",
        "<= evil = \"evil\" />",
        "<< evil = \"evil\" />",
        "<: evil = \"evil\" />",
        "</ evil = \"evil\" />",
        "<- evil = \"evil\" />",
        "<' evil = \"evil\" />",
        "<\" evil = \"evil\" />",
        "<eVil evil = \"evil\" />",
        "<EVIL evil = \"evil\" />",
        "<ev_il evil = \"evil\" />",
        "<ev il evil = \"evil\" />",
        "<ev4il evil = \"evil\" />",
        "<e evil = \"evil\" />",
        "<  evil = \"evil\" />",
        "<6 evil = \"evil\" />",
        "<_ evil = \"evil\" />",
        "< evil = \"evil\" />",
        "<evil>",
        "<evil evil = evil />",
        "<evil evil = 'evil' />",
        "<evil evil = \"evil\" />"
      ]
    },
    {
      "regex": "\\{\\{count}},",
      "exceptionStackTrace": null,
      "matches": ["{{count}},"]
    },
    {
      "regex": "(?i)\\b(?<_1>unpack|pack)(?=\\s*\\()",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<_"
      },
      "matches": []
    },
    {
      "regex": "The\\s+person\\s+who\\s+associated\\s+a\\s+work\\s+with\\s+this\\s+deed\\s+has\\s+dedicated\\s+the\\s+work\\s+to\\s+the\\s+public\\s+domain\\s+by\\s+waiving\\s+all\\s+of\\s+his\\s+or\\s+her\\s+rights\\s+to\\s+the\\s+work\\s+worldwide\\s+under\\s+copyright\\s+law,\\s+including\\s+all\\s+related\\s+and\\s+neighboring\\s+rights,\\s+to\\s+the\\s+extent\\s+allowed\\s+by\\s+law.\\s+You\\s+can\\s+copy,\\s+modify,\\s+distribute\\s+and\\s+perform\\s+the\\s+work,\\s+even\\s+for\\s+commercial\\s+purposes,\\s+all\\s+without\\s+asking\\s+permission.",
      "exceptionStackTrace": null,
      "matches": [
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissionA",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permission0",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permission,",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permission ",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking  permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without askingpermissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without  asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all withoutasking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all  without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, allwithout asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes,  all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes,all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial  purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercialpurposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for  commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even forcommercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even  for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, evenfor commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work,  even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work,even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the  work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform thework, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform  the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and performthe work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and  perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute andperform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute  and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distributeand perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify,  distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify,distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy,  modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy,modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can  copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You cancopy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You  can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa Youcan copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa  You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawaYou can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawA You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by law0 You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by law, You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by law  You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by  lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed bylawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed  by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowedby lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent  allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extentallowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the  extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to theextent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to  the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, tothe extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights,  to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights,to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring  rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboringrights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and  neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related andneighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related  and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all relatedand neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all  related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including allrelated and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including  all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, includingall related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law,  including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law,including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright  law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyrightlaw, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under  copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide undercopyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide  under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwideunder copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work  worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the workworldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the  work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to thework worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to  the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights tothe work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights  to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rightsto the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her  rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or herrights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or  her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his orher rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his  or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of hisor her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of  his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all ofhis or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all  of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving allof his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving  all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waivingall of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by  waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain bywaiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain  by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domainby waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public  domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the publicdomain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the  public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to thepublic domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to  the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work tothe public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work  to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the workto the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the  work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated thework to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated  the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicatedthe work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has  dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed hasdedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed  has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deedhas dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this  deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with thisdeed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with  this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work withthis deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work  with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a workwith this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a  work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated awork with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated  a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associateda work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who  associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person whoassociated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person  who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The personwho associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The  person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "Theperson who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona",
        "The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by lawa You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permissiona"
      ]
    },
    {
      "regex": "cycle-plugin-spec\\.(js|ts)",
      "exceptionStackTrace": null,
      "matches": ["cycle-plugin-spec.ts", "cycle-plugin-spec.js"]
    },
    {
      "regex": "\\sREGEXP\\s",
      "exceptionStackTrace": null,
      "matches": [" REGEXP "]
    },
    {
      "regex": "Found Twitter API keys in Jekyll _config.yml, this library does not require these keys anymore",
      "exceptionStackTrace": null,
      "matches": [
        "Found Twitter API keys in Jekyll _config_yml, this library does not require these keys anymore",
        "Found Twitter API keys in Jekyll _configAyml, this library does not require these keys anymore",
        "Found Twitter API keys in Jekyll _config0yml, this library does not require these keys anymore",
        "Found Twitter API keys in Jekyll _config,yml, this library does not require these keys anymore",
        "Found Twitter API keys in Jekyll _config yml, this library does not require these keys anymore",
        "Found Twitter API keys in Jekyll _configayml, this library does not require these keys anymore"
      ]
    },
    {
      "regex": "()<B><Z>(?:<[^>]+>)+<\\/Z>(D\\x{e9})<\\/B>()",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "incomplete escape \\x"
      },
      "matches": []
    },
    {
      "regex": "^\\/\\/\\/?\\s*(@ts-check|@ts-nocheck)\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        "/// @ts-check  ",
        "/// @ts-check",
        "///  @ts-check ",
        "///@ts-check ",
        "//// @ts-check ",
        "// @ts-check ",
        "//@ts-nocheck",
        "//@ts-check",
        "/// @ts-nocheck ",
        "/// @ts-check "
      ]
    },
    {
      "regex": "^git version",
      "exceptionStackTrace": null,
      "matches": ["git version"]
    },
    {
      "regex": "\\b($colmlist)\\s+not\\s+like\\s+",
      "exceptionStackTrace": null,
      "matches": [
        "colmlist not like  ",
        "colmlist not like",
        "colmlist not  like ",
        "colmlist notlike ",
        "colmlist  not like ",
        "colmlistnot like ",
        "colmlist not like "
      ]
    },
    {
      "regex": "^(?:cwl:|https://w3id.org/cwl/cwl#)",
      "exceptionStackTrace": null,
      "matches": [
        "https://w3idAorg/cwl/cwl#",
        "https://w3id:org/cwl/cwl#",
        "https://w3id0org/cwl/cwl#",
        "https://w3id/org/cwl/cwl#",
        "https://w3id#org/cwl/cwl#",
        "https://w3id org/cwl/cwl#",
        "https://w3idaorg/cwl/cwl#",
        "cwl:"
      ]
    },
    {
      "regex": "(konqueror|icab|crios|opera|chrome|safari|firefox|camino|msie|trident(?=\\/))\\/?\\s*(\\.?\\d+(\\.\\d+)*)",
      "exceptionStackTrace": null,
      "matches": [
        "konqueror/ .0.0.0",
        "konqueror/ .0",
        "konqueror/ .0.00",
        "konqueror/ .0.",
        "konqueror/ .00.0",
        "konqueror/ ..0",
        "konqueror/ ..0.0",
        "konqueror/ 0.0",
        "konqueror/  .0.0",
        "konqueror/.0.0",
        "konqueror// .0.0",
        "konqueror .0.0",
        "trident0",
        "msie0",
        "camino0",
        "firefox0",
        "safari0",
        "chrome0",
        "opera0",
        "crios0",
        "icab0",
        "konqueror0",
        "trident/ .0.0",
        "msie/ .0.0",
        "camino/ .0.0",
        "firefox/ .0.0",
        "safari/ .0.0",
        "chrome/ .0.0",
        "opera/ .0.0",
        "crios/ .0.0",
        "icab/ .0.0",
        "konqueror/ .0.0"
      ]
    },
    {
      "regex": ":INDIRECT",
      "exceptionStackTrace": null,
      "matches": [":INDIRECT"]
    },
    {
      "regex": "<([a-z]+)(?: .*)?(?<![/|/ ])>",
      "exceptionStackTrace": null,
      "matches": [
        "<evil evil evil>",
        "<evil |>",
        "<evil >>",
        "<evil <>",
        "<evil />",
        "<evil eVil>",
        "<evil EVIL>",
        "<evil ev_il>",
        "<evil ev il>",
        "<evil ev4il>",
        "<evil e>",
        "<evil  >",
        "<evil 6>",
        "<evil _>",
        "<evil >",
        "<eVil evil>",
        "<EVIL evil>",
        "<ev_il evil>",
        "<ev il evil>",
        "<ev4il evil>",
        "<e evil>",
        "<  evil>",
        "<6 evil>",
        "<_ evil>",
        "< evil>",
        "<evil>",
        "<evil evil>"
      ]
    },
    {
      "regex": "^SunOS 4\\.1",
      "exceptionStackTrace": null,
      "matches": ["SunOS 4.1"]
    },
    {
      "regex": "(\\.(?:min\\.)?js)(\\?.*)?$",
      "exceptionStackTrace": null,
      "matches": [
        ".min.js?evil?evil",
        ".min.js",
        ".min.js??",
        ".min.js?.",
        ".min.js?eVil",
        ".min.js?EVIL",
        ".min.js?ev_il",
        ".min.js?ev il",
        ".min.js?ev4il",
        ".min.js?e",
        ".min.js? ",
        ".min.js?6",
        ".min.js?_",
        ".min.js?",
        ".min.min.js?evil",
        ".js?evil",
        ".js",
        ".min.js?evil"
      ]
    },
    {
      "regex": "^quit|\\\\q|q$",
      "exceptionStackTrace": null,
      "matches": ["q", "\\q", "quit"]
    },
    {
      "regex": "[/trust]?[2005][/usernamemixed]?",
      "exceptionStackTrace": null,
      "matches": [
        "t5dd",
        "t5",
        "t5x",
        "t5u",
        "t5s",
        "t5r",
        "t5n",
        "t5m",
        "t5i",
        "t5e",
        "t5b",
        "t5a",
        "t5/",
        "t2d",
        "t1d",
        "t0d",
        "tt5d",
        "5d",
        "u5d",
        "s5d",
        "r5d",
        "a5d",
        "/5d",
        "5",
        "t5d"
      ]
    },
    {
      "regex": "\\\\\\\\/\\\\*\\\\\\\\/",
      "exceptionStackTrace": null,
      "matches": ["\\\\/\\\\\\\\/", "\\\\/\\\\/", "\\\\/\\\\\\/"]
    },
    {
      "regex": "os (\\d+)[._](\\d+)([._](\\d+))? like mac os x",
      "exceptionStackTrace": null,
      "matches": [
        "os 0_0_0_0 like mac os x",
        "os 0_0_00 like mac os x",
        "os 0_0_ like mac os x",
        "os 0_0.0 like mac os x",
        "os 0_00_0 like mac os x",
        "os 0__0 like mac os x",
        "os 0.0_0 like mac os x",
        "os 00_0_0 like mac os x",
        "os _0_0 like mac os x",
        "os 0_0 like mac os x",
        "os 0_0_0 like mac os x"
      ]
    },
    {
      "regex": "Error: test",
      "exceptionStackTrace": null,
      "matches": ["Error: test"]
    },
    {
      "regex": "[^a-z0-9_$\\s]",
      "exceptionStackTrace": null,
      "matches": ["a", "_", "0", "$", " ", "A"]
    },
    {
      "regex": "^chunk-(\\d+)$",
      "exceptionStackTrace": null,
      "matches": ["chunk-00", "chunk-", "chunk-0"]
    },
    {
      "regex": "^the following indexed records$",
      "exceptionStackTrace": null,
      "matches": ["the following indexed records"]
    },
    {
      "regex": "\\bariatemplates\\/prefix\\/([^\"'\\r\\n,]+|[^'\\r\\n,]+|[^\"\\r\\n,]+)[\"']?\\s*\\)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": "^child \"b\" fails because \\[\"b\" must be larger than or equal to",
      "exceptionStackTrace": null,
      "matches": [
        "child \"b\" fails because [\"b\" must be larger than or equal to"
      ]
    },
    {
      "regex": "(\\w+)\\.*(?:\\t|\\s)*(\\d+)\\w*(?:\\t|\\s)*(?:\\-|to)(?:\\t|\\s)*(\\d+)\\w*,*(?:\\t|\\s)*(\\d*)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "\\/log\\/([0-9]*)\\/([0-9]*)\\/([-0-9]*)\\/(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "/log/0/0/-//",
        "/log/0/0/-/-",
        "/log/0/0/-/eVil",
        "/log/0/0/-/EVIL",
        "/log/0/0/-/ev_il",
        "/log/0/0/-/ev il",
        "/log/0/0/-/ev4il",
        "/log/0/0/-/e",
        "/log/0/0/-/ ",
        "/log/0/0/-/6",
        "/log/0/0/-/_",
        "/log/0/0/-/",
        "/log/0/0/--/evil",
        "/log/0/0//evil",
        "/log/0/0/0/evil",
        "/log/0/00/-/evil",
        "/log/0//-/evil",
        "/log/00/0/-/evil",
        "/log//0/-/evil",
        "/log////",
        "/log/0/0/-/evil"
      ]
    },
    {
      "regex": "^AUTH(\\s+)((LOGIN|PLAIN)(\\s+[A-Z0-9=]+)?|CRAM-MD5)\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        "AUTH LOGIN evil  ",
        "AUTH LOGIN evil",
        "AUTH LOGIN evil evil ",
        "AUTH LOGIN ",
        "AUTH LOGIN = ",
        "AUTH LOGIN - ",
        "AUTH LOGIN eVil ",
        "AUTH LOGIN EVIL ",
        "AUTH LOGIN ev_il ",
        "AUTH LOGIN ev il ",
        "AUTH LOGIN ev4il ",
        "AUTH LOGIN e ",
        "AUTH LOGIN   ",
        "AUTH LOGIN 6 ",
        "AUTH LOGIN _ ",
        "AUTH LOGIN  ",
        "AUTH LOGIN  evil ",
        "AUTH LOGINevil ",
        "AUTH  LOGIN evil ",
        "AUTHLOGIN evil ",
        "AUTH CRAM-MD5",
        "AUTH PLAIN",
        "AUTH LOGIN",
        "AUTH CRAM-MD5 ",
        "AUTH PLAIN evil ",
        "AUTH LOGIN evil "
      ]
    },
    {
      "regex": "Warning:.* Does i18ndemo_type exist\\?",
      "exceptionStackTrace": null,
      "matches": [
        "Warning:? Does i18ndemo_type exist?",
        "Warning:: Does i18ndemo_type exist?",
        "Warning:eVil Does i18ndemo_type exist?",
        "Warning:EVIL Does i18ndemo_type exist?",
        "Warning:ev_il Does i18ndemo_type exist?",
        "Warning:ev il Does i18ndemo_type exist?",
        "Warning:ev4il Does i18ndemo_type exist?",
        "Warning:e Does i18ndemo_type exist?",
        "Warning:  Does i18ndemo_type exist?",
        "Warning:6 Does i18ndemo_type exist?",
        "Warning:_ Does i18ndemo_type exist?",
        "Warning: Does i18ndemo_type exist?",
        "Warning:evil Does i18ndemo_type exist?"
      ]
    },
    {
      "regex": "Pro.+",
      "exceptionStackTrace": null,
      "matches": [
        "ProeVil",
        "ProEVIL",
        "Proev_il",
        "Proev il",
        "Proev4il",
        "Proe",
        "Pro ",
        "Pro6",
        "Pro_",
        "Pro",
        "Proevil"
      ]
    },
    {
      "regex": "^([^\\s/]+)([\\s\\S]*)",
      "exceptionStackTrace": null,
      "matches": [
        "evil/",
        "evileVil",
        "evilEVIL",
        "evilev_il",
        "evilev il",
        "evilev4il",
        "evile",
        "evil ",
        "evil6",
        "evil_",
        "/evil",
        "eVilevil",
        "EVILevil",
        "ev_ilevil",
        "ev ilevil",
        "ev4ilevil",
        "eevil",
        " evil",
        "6evil",
        "_evil",
        "evil",
        "evilevil"
      ]
    },
    {
      "regex": "\\A^\\s*$\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "logging=([A-Za-z0-9\\._\\-]*)",
      "exceptionStackTrace": null,
      "matches": [
        "logging==",
        "logging=.",
        "logging=-",
        "logging=eVil",
        "logging=EVIL",
        "logging=ev_il",
        "logging=ev il",
        "logging=ev4il",
        "logging=e",
        "logging= ",
        "logging=6",
        "logging=_",
        "logging=",
        "logging=evil"
      ]
    },
    {
      "regex": "^(.*)\\s*->\\s*(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil -> >",
        "evil -> -",
        "evil -> eVil",
        "evil -> EVIL",
        "evil -> ev_il",
        "evil -> ev il",
        "evil -> ev4il",
        "evil -> e",
        "evil ->  ",
        "evil -> 6",
        "evil -> _",
        "evil -> ",
        "evil ->  evil",
        "evil ->evil",
        "evil  -> evil",
        "evil-> evil",
        "> -> evil",
        "- -> evil",
        "eVil -> evil",
        "EVIL -> evil",
        "ev_il -> evil",
        "ev il -> evil",
        "ev4il -> evil",
        "e -> evil",
        "  -> evil",
        "6 -> evil",
        "_ -> evil",
        " -> evil",
        "->",
        "evil -> evil"
      ]
    },
    {
      "regex": "^\\-?[\\d\\.]+",
      "exceptionStackTrace": null,
      "matches": ["-..", "-", "-0", "--.", ".", "-."]
    },
    {
      "regex": "(^|[^0-9A-Za-z\u0400-\u0481\u0483-\u0487\u048a-\u0527\u2de0-\u2dff\ua640-\ua66f\ua674-\ua67d\ua67f-\ua697\ua69f])((?:\u0423\u0437\u0430[\u0438\u0439]\u0440|Ezra|\u0415\u0437\u0434\u0440[\u0430\u044b]|1[\\s\\xa0]*\u0415\u0437\u0434|\u0415\u0437\u0434|\u041a\u043d\u0438\u0433\u0430[\\s\\xa0]*\u0415\u0437\u0434\u0440\u044b|\u041f\u0435\u0440\u0432\u0430\u044f[\\s\\xa0]*\u0415\u0437\u0434\u0440\u044b))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 160"
      },
      "matches": []
    },
    {
      "regex": "[\\p{L}0-9]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\p"
      },
      "matches": []
    },
    {
      "regex": "^GRIFTER_",
      "exceptionStackTrace": null,
      "matches": ["GRIFTER_"]
    },
    {
      "regex": "(?P<name>\\w+)\\b",
      "exceptionStackTrace": null,
      "matches": [
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "^\\d\\d/\\d\\d/\\d\\d \\d\\d:\\d\\d:\\d\\d$",
      "exceptionStackTrace": null,
      "matches": ["00/00/00 00:00:00"]
    },
    {
      "regex": "(^|\\\\n)$h:.*?($|\\\\n)",
      "exceptionStackTrace": null,
      "matches": [
        "h:\\",
        "h::",
        "h:eVil",
        "h:EVIL",
        "h:ev_il",
        "h:ev il",
        "h:ev4il",
        "h:e",
        "h: ",
        "h:6",
        "h:_",
        "\\nh:",
        "h:\\n",
        "h:",
        "\\nh:evil",
        "h:evil\\n",
        "h:evil"
      ]
    },
    { "regex": "webkit\\/", "exceptionStackTrace": null, "matches": ["webkit/"] },
    {
      "regex": "[^=]+\\*=[^=]*",
      "exceptionStackTrace": null,
      "matches": [
        "evil*==",
        "evil*=*",
        "evil*=eVil",
        "evil*=EVIL",
        "evil*=ev_il",
        "evil*=ev il",
        "evil*=ev4il",
        "evil*=e",
        "evil*= ",
        "evil*=6",
        "evil*=_",
        "=*=evil",
        "**=evil",
        "eVil*=evil",
        "EVIL*=evil",
        "ev_il*=evil",
        "ev il*=evil",
        "ev4il*=evil",
        "e*=evil",
        " *=evil",
        "6*=evil",
        "_*=evil",
        "*=evil",
        "evil*=",
        "evil*=evil"
      ]
    },
    {
      "regex": "^/api/multi_cloud_images/([^/]+)/commit$",
      "exceptionStackTrace": null,
      "matches": [
        "/api/multi_cloud_images///commit",
        "/api/multi_cloud_images/eVil/commit",
        "/api/multi_cloud_images/EVIL/commit",
        "/api/multi_cloud_images/ev_il/commit",
        "/api/multi_cloud_images/ev il/commit",
        "/api/multi_cloud_images/ev4il/commit",
        "/api/multi_cloud_images/e/commit",
        "/api/multi_cloud_images/ /commit",
        "/api/multi_cloud_images/6/commit",
        "/api/multi_cloud_images/_/commit",
        "/api/multi_cloud_images//commit",
        "/api/multi_cloud_images/evil/commit"
      ]
    },
    {
      "regex": "^from (\\S+) \\((${IP_ADDRESS})\\) by (\\S+) ",
      "exceptionStackTrace": null,
      "matches": [
        "from evil ({IP_ADDRESS}) by } ",
        "from evil ({IP_ADDRESS}) by { ",
        "from evil ({IP_ADDRESS}) by ) ",
        "from evil ({IP_ADDRESS}) by ( ",
        "from evil ({IP_ADDRESS}) by eVil ",
        "from evil ({IP_ADDRESS}) by EVIL ",
        "from evil ({IP_ADDRESS}) by ev_il ",
        "from evil ({IP_ADDRESS}) by ev il ",
        "from evil ({IP_ADDRESS}) by ev4il ",
        "from evil ({IP_ADDRESS}) by e ",
        "from evil ({IP_ADDRESS}) by   ",
        "from evil ({IP_ADDRESS}) by 6 ",
        "from evil ({IP_ADDRESS}) by _ ",
        "from evil ({IP_ADDRESS}) by  ",
        "from } ({IP_ADDRESS}) by evil ",
        "from { ({IP_ADDRESS}) by evil ",
        "from ) ({IP_ADDRESS}) by evil ",
        "from ( ({IP_ADDRESS}) by evil ",
        "from eVil ({IP_ADDRESS}) by evil ",
        "from EVIL ({IP_ADDRESS}) by evil ",
        "from ev_il ({IP_ADDRESS}) by evil ",
        "from ev il ({IP_ADDRESS}) by evil ",
        "from ev4il ({IP_ADDRESS}) by evil ",
        "from e ({IP_ADDRESS}) by evil ",
        "from   ({IP_ADDRESS}) by evil ",
        "from 6 ({IP_ADDRESS}) by evil ",
        "from _ ({IP_ADDRESS}) by evil ",
        "from  ({IP_ADDRESS}) by evil ",
        "from evil ({IP_ADDRESS}) by evil "
      ]
    },
    {
      "regex": "^([#.]?)((?:[\\w-]+|\\*))$",
      "exceptionStackTrace": null,
      "matches": [
        "..",
        ".-",
        ".#",
        ".eVil",
        ".EVIL",
        ".ev_il",
        ".ev il",
        ".ev4il",
        ".e",
        ". ",
        ".6",
        "._",
        ".",
        "..evil",
        "#evil",
        "*",
        "evil",
        ".*",
        ".evil"
      ]
    },
    { "regex": ":$", "exceptionStackTrace": null, "matches": [":"] },
    {
      "regex": "^(\\s?([>\\^])\\s?|\\s|$)",
      "exceptionStackTrace": null,
      "matches": [" ^  ", " ^", " > ", "  ^ ", "^ ", "^", "", " ", " ^ "]
    },
    {
      "regex": "(type)(\\s+)",
      "exceptionStackTrace": null,
      "matches": ["type  ", "type", "type "]
    },
    {
      "regex": "^v?(.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "veVil",
        "vEVIL",
        "vev_il",
        "vev il",
        "vev4il",
        "ve",
        "v ",
        "v6",
        "v_",
        "v",
        "vvevil",
        "evil",
        "vevil"
      ]
    },
    { "regex": "marco", "exceptionStackTrace": null, "matches": ["marco"] },
    { "regex": "[,]{2,}", "exceptionStackTrace": null, "matches": [",", ",,"] },
    {
      "regex": "^\\/precache\\-manifest.+\\.js$",
      "exceptionStackTrace": null,
      "matches": [
        "/precache-manifest/.js",
        "/precache-manifest..js",
        "/precache-manifest-.js",
        "/precache-manifesteVil.js",
        "/precache-manifestEVIL.js",
        "/precache-manifestev_il.js",
        "/precache-manifestev il.js",
        "/precache-manifestev4il.js",
        "/precache-manifeste.js",
        "/precache-manifest .js",
        "/precache-manifest6.js",
        "/precache-manifest_.js",
        "/precache-manifest.js",
        "/precache-manifestevil.js"
      ]
    },
    {
      "regex": "^it should purge cache entries tagged: (.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "it should purge cache entries tagged: :",
        "it should purge cache entries tagged: eVil",
        "it should purge cache entries tagged: EVIL",
        "it should purge cache entries tagged: ev_il",
        "it should purge cache entries tagged: ev il",
        "it should purge cache entries tagged: ev4il",
        "it should purge cache entries tagged: e",
        "it should purge cache entries tagged:  ",
        "it should purge cache entries tagged: 6",
        "it should purge cache entries tagged: _",
        "it should purge cache entries tagged: ",
        "it should purge cache entries tagged: evil"
      ]
    },
    {
      "regex": "\\A^([\\w+-.]+):\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "call_c_function\\(.*\\)",
      "exceptionStackTrace": null,
      "matches": [
        "call_c_function())",
        "call_c_function(()",
        "call_c_function(eVil)",
        "call_c_function(EVIL)",
        "call_c_function(ev_il)",
        "call_c_function(ev il)",
        "call_c_function(ev4il)",
        "call_c_function(e)",
        "call_c_function( )",
        "call_c_function(6)",
        "call_c_function(_)",
        "call_c_function()",
        "call_c_function(evil)"
      ]
    },
    { "regex": "^:empty", "exceptionStackTrace": null, "matches": [":empty"] },
    {
      "regex": "m \\{\\n(.+?)\\}",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    { "regex": "afterAll", "exceptionStackTrace": null, "matches": ["afterAll"] },
    {
      "regex": "(opera\\s[mobiletab]+).+version\\/((\\d+)?[\\w\\.-]+)",
      "exceptionStackTrace": null,
      "matches": [
        "opera bevilversion/0/",
        "opera bevilversion/0.",
        "opera bevilversion/0-",
        "opera bevilversion/0eVil",
        "opera bevilversion/0EVIL",
        "opera bevilversion/0ev_il",
        "opera bevilversion/0ev il",
        "opera bevilversion/0ev4il",
        "opera bevilversion/0e",
        "opera bevilversion/0 ",
        "opera bevilversion/06",
        "opera bevilversion/0_",
        "opera bevilversion/0",
        "opera bevilversion/00evil",
        "opera b/version/0evil",
        "opera b.version/0evil",
        "opera b-version/0evil",
        "opera beVilversion/0evil",
        "opera bEVILversion/0evil",
        "opera bev_ilversion/0evil",
        "opera bev ilversion/0evil",
        "opera bev4ilversion/0evil",
        "opera beversion/0evil",
        "opera b version/0evil",
        "opera b6version/0evil",
        "opera b_version/0evil",
        "opera bversion/0evil",
        "opera bbevilversion/0evil",
        "opera evilversion/0evil",
        "opera tevilversion/0evil",
        "opera oevilversion/0evil",
        "opera mevilversion/0evil",
        "opera levilversion/0evil",
        "opera ievilversion/0evil",
        "opera eevilversion/0evil",
        "opera cevilversion/0evil",
        "opera aevilversion/0evil",
        "opera bevilversion/evil",
        "opera bevilversion/0evil"
      ]
    },
    {
      "regex": "(.+)($forward_designator.*)",
      "exceptionStackTrace": null,
      "matches": [
        "evilforward_designatoreVil",
        "evilforward_designatorEVIL",
        "evilforward_designatorev_il",
        "evilforward_designatorev il",
        "evilforward_designatorev4il",
        "evilforward_designatore",
        "evilforward_designator ",
        "evilforward_designator6",
        "evilforward_designator_",
        "eVilforward_designatorevil",
        "EVILforward_designatorevil",
        "ev_ilforward_designatorevil",
        "ev ilforward_designatorevil",
        "ev4ilforward_designatorevil",
        "eforward_designatorevil",
        " forward_designatorevil",
        "6forward_designatorevil",
        "_forward_designatorevil",
        "forward_designatorevil",
        "evilforward_designator",
        "evilforward_designatorevil"
      ]
    },
    {
      "regex": "table test_table has no column named wrong_column.*code 1.*while compiling: INSERT INTO test_table",
      "exceptionStackTrace": null,
      "matches": [
        "table test_table has no column named wrong_columnevilcode 1:while compiling: INSERT INTO test_table",
        "table test_table has no column named wrong_columnevilcode 1eVilwhile compiling: INSERT INTO test_table",
        "table test_table has no column named wrong_columnevilcode 1EVILwhile compiling: INSERT INTO test_table",
        "table test_table has no column named wrong_columnevilcode 1ev_ilwhile compiling: INSERT INTO test_table",
        "table test_table has no column named wrong_columnevilcode 1ev ilwhile compiling: INSERT INTO test_table",
        "table test_table has no column named wrong_columnevilcode 1ev4ilwhile compiling: INSERT INTO test_table",
        "table test_table has no column named wrong_columnevilcode 1ewhile compiling: INSERT INTO test_table",
        "table test_table has no column named wrong_columnevilcode 1 while compiling: INSERT INTO test_table",
        "table test_table has no column named wrong_columnevilcode 16while compiling: INSERT INTO test_table",
        "table test_table has no column named wrong_columnevilcode 1_while compiling: INSERT INTO test_table",
        "table test_table has no column named wrong_columnevilcode 1while compiling: INSERT INTO test_table",
        "table test_table has no column named wrong_column:code 1evilwhile compiling: INSERT INTO test_table",
        "table test_table has no column named wrong_columneVilcode 1evilwhile compiling: INSERT INTO test_table",
        "table test_table has no column named wrong_columnEVILcode 1evilwhile compiling: INSERT INTO test_table",
        "table test_table has no column named wrong_columnev_ilcode 1evilwhile compiling: INSERT INTO test_table",
        "table test_table has no column named wrong_columnev ilcode 1evilwhile compiling: INSERT INTO test_table",
        "table test_table has no column named wrong_columnev4ilcode 1evilwhile compiling: INSERT INTO test_table",
        "table test_table has no column named wrong_columnecode 1evilwhile compiling: INSERT INTO test_table",
        "table test_table has no column named wrong_column code 1evilwhile compiling: INSERT INTO test_table",
        "table test_table has no column named wrong_column6code 1evilwhile compiling: INSERT INTO test_table",
        "table test_table has no column named wrong_column_code 1evilwhile compiling: INSERT INTO test_table",
        "table test_table has no column named wrong_columncode 1evilwhile compiling: INSERT INTO test_table",
        "table test_table has no column named wrong_columncode 1while compiling: INSERT INTO test_table",
        "table test_table has no column named wrong_columnevilcode 1evilwhile compiling: INSERT INTO test_table"
      ]
    },
    {
      "regex": "_escaped_fragment_",
      "exceptionStackTrace": null,
      "matches": ["_escaped_fragment_"]
    },
    {
      "regex": "(?<twig>{{\\s*[^}},]*\\s*}},)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<t"
      },
      "matches": []
    },
    {
      "regex": "\\\\{3,}",
      "exceptionStackTrace": null,
      "matches": ["\\\\", "\\\\\\"]
    },
    { "regex": "text", "exceptionStackTrace": null, "matches": ["text"] },
    {
      "regex": "{{port}},",
      "exceptionStackTrace": null,
      "matches": ["{{port}},"]
    },
    {
      "regex": "^\\s*?\\/\\/\\s*import\\s+['\"]?([^'\"]+)['\"]?\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        " // import \"evil\"  ",
        " // import \"evil\"",
        " // import \"evil\"\" ",
        " // import \"evil ",
        " // import \"evil' ",
        " // import \"/\" ",
        " // import \"'\" ",
        " // import \"\"\" ",
        " // import \"eVil\" ",
        " // import \"EVIL\" ",
        " // import \"ev_il\" ",
        " // import \"ev il\" ",
        " // import \"ev4il\" ",
        " // import \"e\" ",
        " // import \" \" ",
        " // import \"6\" ",
        " // import \"_\" ",
        " // import \"\" ",
        " // import \"\"evil\" ",
        " // import evil\" ",
        " // import 'evil\" ",
        " // import  \"evil\" ",
        " // import\"evil\" ",
        " //  import \"evil\" ",
        " //import \"evil\" ",
        "  // import \"evil\" ",
        "// import \"evil\" ",
        "//import evil",
        " // import \"evil\" "
      ]
    },
    {
      "regex": "^\\s*(\\d+)\\s+(\\d+)\\s+(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        " 0 0 eVil",
        " 0 0 EVIL",
        " 0 0 ev_il",
        " 0 0 ev il",
        " 0 0 ev4il",
        " 0 0 e",
        " 0 0  ",
        " 0 0 6",
        " 0 0 _",
        " 0 0 ",
        " 0 0  evil",
        " 0 0evil",
        " 0 00 evil",
        " 0  evil",
        " 0  0 evil",
        " 00 evil",
        " 00 0 evil",
        "  0 evil",
        "  0 0 evil",
        "0 0 evil",
        "0 0 ",
        " 0 0 evil"
      ]
    },
    {
      "regex": "alert\\(\"foo\"\\);",
      "exceptionStackTrace": null,
      "matches": ["alert(\"foo\");"]
    },
    {
      "regex": "([/][*])|([/][/][^\\n]*)|('[^'\\\\]*(?:\\.[^'\\\\]*)*')|(\"[^\"\\\\]*(?:\\.[^\"\\\\]*)*\")",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^(?P<bundle>[^:]+):(?P<directory>[^:]*:)?(?P<file>.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil:evil::",
        "evil:evil:eVil",
        "evil:evil:EVIL",
        "evil:evil:ev_il",
        "evil:evil:ev il",
        "evil:evil:ev4il",
        "evil:evil:e",
        "evil:evil: ",
        "evil:evil:6",
        "evil:evil:_",
        "evil:evil:",
        "evil:evil:evil:evil",
        "evil:::evil",
        "evil:eVil:evil",
        "evil:EVIL:evil",
        "evil:ev_il:evil",
        "evil:ev il:evil",
        "evil:ev4il:evil",
        "evil:e:evil",
        "evil: :evil",
        "evil:6:evil",
        "evil:_:evil",
        "evil::evil",
        "::evil:evil",
        "eVil:evil:evil",
        "EVIL:evil:evil",
        "ev_il:evil:evil",
        "ev il:evil:evil",
        "ev4il:evil:evil",
        "e:evil:evil",
        " :evil:evil",
        "6:evil:evil",
        "_:evil:evil",
        ":evil:evil",
        "evil:evil",
        "evil:evil:evil"
      ]
    },
    {
      "regex": "F|N|K|a|u|i|\\~|o",
      "exceptionStackTrace": null,
      "matches": ["o", "~", "i", "u", "a", "K", "N", "F"]
    },
    {
      "regex": "<([a-z]+)( .*)?(?!/)>",
      "exceptionStackTrace": null,
      "matches": [
        "<evil evil evil>",
        "<evil >>",
        "<evil <>",
        "<evil />",
        "<evil eVil>",
        "<evil EVIL>",
        "<evil ev_il>",
        "<evil ev il>",
        "<evil ev4il>",
        "<evil e>",
        "<evil  >",
        "<evil 6>",
        "<evil _>",
        "<evil >",
        "<eVil evil>",
        "<EVIL evil>",
        "<ev_il evil>",
        "<ev il evil>",
        "<ev4il evil>",
        "<e evil>",
        "<  evil>",
        "<6 evil>",
        "<_ evil>",
        "< evil>",
        "<evil>",
        "<evil evil>"
      ]
    },
    {
      "regex": "^vnet(\\d+)",
      "exceptionStackTrace": null,
      "matches": ["vnet00", "vnet", "vnet0"]
    },
    {
      "regex": "http[s]{0,1}\\:\\/\\/",
      "exceptionStackTrace": null,
      "matches": ["httpss://", "http://", "https://"]
    },
    {
      "regex": "[)\\].]",
      "exceptionStackTrace": null,
      "matches": ["]", ")", "."]
    },
    {
      "regex": "\\B@([\\w\\x{4e00}-\\x{9aff}]+)(\\s*)(\\( ( (?>[^()]+) | (?3) )* \\) )? ",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "incomplete escape \\x"
      },
      "matches": []
    },
    {
      "regex": "utf[^8]*8",
      "exceptionStackTrace": null,
      "matches": [
        "utfeVil8",
        "utfEVIL8",
        "utfev_il8",
        "utfev il8",
        "utfev4il8",
        "utfe8",
        "utf 8",
        "utf68",
        "utf_8",
        "utf8",
        "utfevil8"
      ]
    },
    {
      "regex": " $reg{$e}->{$t}->[$p-1] $",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad character range p-1"
      },
      "matches": []
    },
    {
      "regex": "\\A(.+)xed$",
      "exceptionStackTrace": null,
      "matches": [
        "eVilxed",
        "EVILxed",
        "ev_ilxed",
        "ev ilxed",
        "ev4ilxed",
        "exed",
        " xed",
        "6xed",
        "_xed",
        "xed",
        "evilxed"
      ]
    },
    {
      "regex": "my-testmy-test",
      "exceptionStackTrace": null,
      "matches": ["my-testmy-test"]
    },
    {
      "regex": "{\\#([^}]+)\\}",
      "exceptionStackTrace": null,
      "matches": [
        "{#}}",
        "{#{}",
        "{##}",
        "{#eVil}",
        "{#EVIL}",
        "{#ev_il}",
        "{#ev il}",
        "{#ev4il}",
        "{#e}",
        "{# }",
        "{#6}",
        "{#_}",
        "{#}",
        "{#evil}"
      ]
    },
    {
      "regex": "\\&lt;(a href=\\\"find\\?.*?\\\" class=\\\"sym\\\")\\&gt;",
      "exceptionStackTrace": null,
      "matches": [
        "&lt;a href=\"find??\" class=\"sym\"&gt;",
        "&lt;a href=\"find?=\" class=\"sym\"&gt;",
        "&lt;a href=\"find?;\" class=\"sym\"&gt;",
        "&lt;a href=\"find?&\" class=\"sym\"&gt;",
        "&lt;a href=\"find?\"\" class=\"sym\"&gt;",
        "&lt;a href=\"find?eVil\" class=\"sym\"&gt;",
        "&lt;a href=\"find?EVIL\" class=\"sym\"&gt;",
        "&lt;a href=\"find?ev_il\" class=\"sym\"&gt;",
        "&lt;a href=\"find?ev il\" class=\"sym\"&gt;",
        "&lt;a href=\"find?ev4il\" class=\"sym\"&gt;",
        "&lt;a href=\"find?e\" class=\"sym\"&gt;",
        "&lt;a href=\"find? \" class=\"sym\"&gt;",
        "&lt;a href=\"find?6\" class=\"sym\"&gt;",
        "&lt;a href=\"find?_\" class=\"sym\"&gt;",
        "&lt;a href=\"find?\" class=\"sym\"&gt;",
        "&lt;a href=\"find?evil\" class=\"sym\"&gt;"
      ]
    },
    {
      "regex": "\\b(http:\\/\\/[^\\s]+)['\"]>",
      "exceptionStackTrace": null,
      "matches": [
        "http://evil'>",
        "http://>\">",
        "http://:\">",
        "http:///\">",
        "http://'\">",
        "http://\"\">",
        "http://eVil\">",
        "http://EVIL\">",
        "http://ev_il\">",
        "http://ev il\">",
        "http://ev4il\">",
        "http://e\">",
        "http:// \">",
        "http://6\">",
        "http://_\">",
        "http://\">",
        "http://evil\">"
      ]
    },
    {
      "regex": "<tr><td>([a-zA-Z0-9]{1}[a-zA-Z0-9-]{0,61}[a-zA-Z0-9]{1}[.]{1}[a-zA-Z0-9-]+)</td><td>",
      "exceptionStackTrace": null,
      "matches": [
        "<tr><td>0-0.></td><td>",
        "<tr><td>0-0.<</td><td>",
        "<tr><td>0-0./</td><td>",
        "<tr><td>0-0..</td><td>",
        "<tr><td>0-0.-</td><td>",
        "<tr><td>0-0.eVil</td><td>",
        "<tr><td>0-0.EVIL</td><td>",
        "<tr><td>0-0.ev_il</td><td>",
        "<tr><td>0-0.ev il</td><td>",
        "<tr><td>0-0.ev4il</td><td>",
        "<tr><td>0-0.e</td><td>",
        "<tr><td>0-0. </td><td>",
        "<tr><td>0-0.6</td><td>",
        "<tr><td>0-0._</td><td>",
        "<tr><td>0-0.</td><td>",
        "<tr><td>0-0..evil</td><td>",
        "<tr><td>0-0evil</td><td>",
        "<tr><td>0-00.evil</td><td>",
        "<tr><td>0-.evil</td><td>",
        "<tr><td>0-a.evil</td><td>",
        "<tr><td>0-A.evil</td><td>",
        "<tr><td>0--------------------------------------------------------------0.evil</td><td>",
        "<tr><td>0-------------------------------------------------------------0.evil</td><td>",
        "<tr><td>0a0.evil</td><td>",
        "<tr><td>0A0.evil</td><td>",
        "<tr><td>000.evil</td><td>",
        "<tr><td>00-0.evil</td><td>",
        "<tr><td>-0.evil</td><td>",
        "<tr><td>a-0.evil</td><td>",
        "<tr><td>A-0.evil</td><td>",
        "<tr><td>00.evil</td><td>",
        "<tr><td>0-0.evil</td><td>"
      ]
    },
    {
      "regex": "s[ie]r$",
      "exceptionStackTrace": null,
      "matches": ["sir", "sar", "ser"]
    },
    {
      "regex": "\\b(?<_1>m)\\s*(?<!\\\\)\\(",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<_"
      },
      "matches": []
    },
    {
      "regex": "%7Bversion%7D",
      "exceptionStackTrace": null,
      "matches": ["%7Bversion%7D"]
    },
    {
      "regex": "^I trema run \"([^\"]*)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "I trema run \"\"\"",
        "I trema run \"eVil\"",
        "I trema run \"EVIL\"",
        "I trema run \"ev_il\"",
        "I trema run \"ev il\"",
        "I trema run \"ev4il\"",
        "I trema run \"e\"",
        "I trema run \" \"",
        "I trema run \"6\"",
        "I trema run \"_\"",
        "I trema run \"\"",
        "I trema run \"evil\""
      ]
    },
    {
      "regex": "^\\{([\\/@\\\\]?\\w+\\??)(?=[\\s\\}]|\\/[/*])",
      "exceptionStackTrace": null,
      "matches": [
        "{\\evil??",
        "{\\evil",
        "{\\eVil?",
        "{\\EVIL?",
        "{\\ev_il?",
        "{\\ev il?",
        "{\\ev4il?",
        "{\\e?",
        "{\\ ?",
        "{\\6?",
        "{\\_?",
        "{\\?",
        "{\\\\evil?",
        "{evil?",
        "{@evil?",
        "{/evil?",
        "{evil",
        "{\\evil?"
      ]
    },
    {
      "regex": "^\\s*<\\?\\s*(xml|XML)\\b",
      "exceptionStackTrace": null,
      "matches": [
        " <?  xml",
        " <?xml",
        "  <? xml",
        "<? xml",
        "<?XML",
        "<?xml",
        " <? XML",
        " <? xml"
      ]
    },
    {
      "regex": "'204': {",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (parse error): Input string ended prematurely"
      },
      "matches": []
    },
    {
      "regex": "expose :last_name",
      "exceptionStackTrace": null,
      "matches": ["expose :last_name"]
    },
    {
      "regex": "\\smId=(\\S+)\\s",
      "exceptionStackTrace": null,
      "matches": [
        " mId== ",
        " mId=eVil ",
        " mId=EVIL ",
        " mId=ev_il ",
        " mId=ev il ",
        " mId=ev4il ",
        " mId=e ",
        " mId=  ",
        " mId=6 ",
        " mId=_ ",
        " mId= ",
        " mId=evil "
      ]
    },
    {
      "regex": "^[+-]?0b[01]+$",
      "exceptionStackTrace": null,
      "matches": ["-0b11", "-0b", "-0b2", "-0b0", "--0b1", "+0b1", "0b1", "-0b1"]
    },
    {
      "regex": "(?i:\\b(on|((is\\s+)?not\\s+)?null)\\b)",
      "exceptionStackTrace": null,
      "matches": [""]
    },
    { "regex": "-- ", "exceptionStackTrace": null, "matches": ["-- "] },
    {
      "regex": "^---- BEGIN SSH2 PUBLIC KEY ----$",
      "exceptionStackTrace": null,
      "matches": ["---- BEGIN SSH2 PUBLIC KEY ----"]
    },
    {
      "regex": "Disabling profiles...",
      "exceptionStackTrace": null,
      "matches": [
        "Disabling profilesaa_",
        "Disabling profilesaaA",
        "Disabling profilesaa0",
        "Disabling profilesaa ",
        "Disabling profilesa_a",
        "Disabling profilesaAa",
        "Disabling profilesa0a",
        "Disabling profilesa a",
        "Disabling profiles_aa",
        "Disabling profilesAaa",
        "Disabling profiles0aa",
        "Disabling profiles aa",
        "Disabling profilesaaa"
      ]
    },
    {
      "regex": "WARNING: The signing key is not trusted",
      "exceptionStackTrace": null,
      "matches": ["WARNING: The signing key is not trusted"]
    },
    {
      "regex": "^(\\d+)\\.(\\d+)(?:\\.(\\d+)([abc](\\d+)?)?)?$",
      "exceptionStackTrace": null,
      "matches": [
        "0.0.0c0.0c0",
        "0.0.0c0c0",
        "0.0.0",
        "0.0.0c00",
        "0.0.0c",
        "0.0.0d0",
        "0.0.0b0",
        "0.0.0a0",
        "0.0.00c0",
        "0.0.c0",
        "0.00.0c0",
        "0..0c0",
        "00.0.0c0",
        ".0.0c0",
        "0.0",
        "0.0.0c0"
      ]
    },
    {
      "regex": "NMS|USSTARS",
      "exceptionStackTrace": null,
      "matches": ["USSTARS", "NMS"]
    },
    {
      "regex": "^IMAX (\\d{3}) .",
      "exceptionStackTrace": null,
      "matches": [
        "IMAX 000 _",
        "IMAX 000 A",
        "IMAX 000 0",
        "IMAX 000  ",
        "IMAX 0000 a",
        "IMAX 00 a",
        "IMAX 000 a"
      ]
    },
    {
      "regex": "\\[?{\".*:.*}\\]?",
      "exceptionStackTrace": null,
      "matches": [
        "[{\"evil:evil}]]",
        "[{\"evil:evil}",
        "[{\"evil:}}]",
        "[{\"evil:{}]",
        "[{\"evil:]}]",
        "[{\"evil:[}]",
        "[{\"evil::}]",
        "[{\"evil:\"}]",
        "[{\"evil:eVil}]",
        "[{\"evil:EVIL}]",
        "[{\"evil:ev_il}]",
        "[{\"evil:ev il}]",
        "[{\"evil:ev4il}]",
        "[{\"evil:e}]",
        "[{\"evil: }]",
        "[{\"evil:6}]",
        "[{\"evil:_}]",
        "[{\"evil:}]",
        "[{\"}:evil}]",
        "[{\"{:evil}]",
        "[{\"]:evil}]",
        "[{\"[:evil}]",
        "[{\"::evil}]",
        "[{\"\":evil}]",
        "[{\"eVil:evil}]",
        "[{\"EVIL:evil}]",
        "[{\"ev_il:evil}]",
        "[{\"ev il:evil}]",
        "[{\"ev4il:evil}]",
        "[{\"e:evil}]",
        "[{\" :evil}]",
        "[{\"6:evil}]",
        "[{\"_:evil}]",
        "[{\":evil}]",
        "[[{\"evil:evil}]",
        "{\"evil:evil}]",
        "{\":}",
        "[{\"evil:evil}]"
      ]
    },
    {
      "regex": "var *_0x[a-f0-9]{4,6} *= *\\{'foo': *0x1, *'bar': *0x2, *'baz': *0x3\\};",
      "exceptionStackTrace": null,
      "matches": [
        "var _0x0000 = {'foo': 0x1, 'bar': 0x2, 'baz':  0x3};",
        "var _0x0000 = {'foo': 0x1, 'bar': 0x2, 'baz':0x3};",
        "var _0x0000 = {'foo': 0x1, 'bar': 0x2,  'baz': 0x3};",
        "var _0x0000 = {'foo': 0x1, 'bar': 0x2,'baz': 0x3};",
        "var _0x0000 = {'foo': 0x1, 'bar':  0x2, 'baz': 0x3};",
        "var _0x0000 = {'foo': 0x1, 'bar':0x2, 'baz': 0x3};",
        "var _0x0000 = {'foo': 0x1,  'bar': 0x2, 'baz': 0x3};",
        "var _0x0000 = {'foo': 0x1,'bar': 0x2, 'baz': 0x3};",
        "var _0x0000 = {'foo':  0x1, 'bar': 0x2, 'baz': 0x3};",
        "var _0x0000 = {'foo':0x1, 'bar': 0x2, 'baz': 0x3};",
        "var _0x0000 =  {'foo': 0x1, 'bar': 0x2, 'baz': 0x3};",
        "var _0x0000 ={'foo': 0x1, 'bar': 0x2, 'baz': 0x3};",
        "var _0x0000  = {'foo': 0x1, 'bar': 0x2, 'baz': 0x3};",
        "var _0x0000= {'foo': 0x1, 'bar': 0x2, 'baz': 0x3};",
        "var _0x0000000 = {'foo': 0x1, 'bar': 0x2, 'baz': 0x3};",
        "var _0x000000 = {'foo': 0x1, 'bar': 0x2, 'baz': 0x3};",
        "var _0x000 = {'foo': 0x1, 'bar': 0x2, 'baz': 0x3};",
        "var _0xg000 = {'foo': 0x1, 'bar': 0x2, 'baz': 0x3};",
        "var _0xa000 = {'foo': 0x1, 'bar': 0x2, 'baz': 0x3};",
        "var  _0x0000 = {'foo': 0x1, 'bar': 0x2, 'baz': 0x3};",
        "var_0x0000 = {'foo': 0x1, 'bar': 0x2, 'baz': 0x3};",
        "var_0x0000={'foo':0x1,'bar':0x2,'baz':0x3};",
        "var _0x0000 = {'foo': 0x1, 'bar': 0x2, 'baz': 0x3};"
      ]
    },
    {
      "regex": "((?:(?:\"|]|}|\\/[gmiuys]|\\.|(?:\\d|\\.|-)*\\d)\\s*,|{)\\s*)(?:\"([^\":\\n]+?)\"|'([^\":\\n]+?)'|([^\":\\n]+?))(\\s*):",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "cannot specify the same gem twice",
      "exceptionStackTrace": null,
      "matches": ["cannot specify the same gem twice"]
    },
    {
      "regex": "\\.(\\%([0-9]*)d)\\.([0-9\\.]+_[0-9\\.]+\\.)?_(i|t)\\.",
      "exceptionStackTrace": null,
      "matches": [
        ".%0d.._..._.._i.",
        ".%0d._i.",
        ".%0d.._..._i.",
        ".%0d.._._i.",
        ".%0d.._0._i.",
        ".%0d..._.._i.",
        ".%0d._.._i.",
        ".%0d.0_.._i.",
        ".%00d.._.._i.",
        ".%d.._.._i.",
        ".%d._t.",
        ".%d._i.",
        ".%0d.._.._t.",
        ".%0d.._.._i."
      ]
    },
    {
      "regex": "(if|unless|with|each|try)\\b",
      "exceptionStackTrace": null,
      "matches": ["try", "each", "with", "unless", "if"]
    },
    {
      "regex": "https://github.com/.*/linux-app-templates/releases/download/.*/linux-app-template.*.zip",
      "exceptionStackTrace": null,
      "matches": [
        "https://githubacom/evil/linux-app-templates/releases/download/evil/linux-app-templateevilAzip",
        "https://githubacom/evil/linux-app-templates/releases/download/evil/linux-app-templateevil:zip",
        "https://githubacom/evil/linux-app-templates/releases/download/evil/linux-app-templateevil0zip",
        "https://githubacom/evil/linux-app-templates/releases/download/evil/linux-app-templateevil/zip",
        "https://githubacom/evil/linux-app-templates/releases/download/evil/linux-app-templateevil-zip",
        "https://githubacom/evil/linux-app-templates/releases/download/evil/linux-app-templateevil zip",
        "https://githubacom/evil/linux-app-templates/releases/download/evil/linux-app-template:azip",
        "https://githubacom/evil/linux-app-templates/releases/download/evil/linux-app-template/azip",
        "https://githubacom/evil/linux-app-templates/releases/download/evil/linux-app-template-azip",
        "https://githubacom/evil/linux-app-templates/releases/download/evil/linux-app-templateeVilazip",
        "https://githubacom/evil/linux-app-templates/releases/download/evil/linux-app-templateEVILazip",
        "https://githubacom/evil/linux-app-templates/releases/download/evil/linux-app-templateev_ilazip",
        "https://githubacom/evil/linux-app-templates/releases/download/evil/linux-app-templateev ilazip",
        "https://githubacom/evil/linux-app-templates/releases/download/evil/linux-app-templateev4ilazip",
        "https://githubacom/evil/linux-app-templates/releases/download/evil/linux-app-templateeazip",
        "https://githubacom/evil/linux-app-templates/releases/download/evil/linux-app-template azip",
        "https://githubacom/evil/linux-app-templates/releases/download/evil/linux-app-template6azip",
        "https://githubacom/evil/linux-app-templates/releases/download/evil/linux-app-template_azip",
        "https://githubacom/evil/linux-app-templates/releases/download/evil/linux-app-templateazip",
        "https://githubacom/evil/linux-app-templates/releases/download/:/linux-app-templateevilazip",
        "https://githubacom/evil/linux-app-templates/releases/download///linux-app-templateevilazip",
        "https://githubacom/evil/linux-app-templates/releases/download/-/linux-app-templateevilazip",
        "https://githubacom/evil/linux-app-templates/releases/download/eVil/linux-app-templateevilazip",
        "https://githubacom/evil/linux-app-templates/releases/download/EVIL/linux-app-templateevilazip",
        "https://githubacom/evil/linux-app-templates/releases/download/ev_il/linux-app-templateevilazip",
        "https://githubacom/evil/linux-app-templates/releases/download/ev il/linux-app-templateevilazip",
        "https://githubacom/evil/linux-app-templates/releases/download/ev4il/linux-app-templateevilazip",
        "https://githubacom/evil/linux-app-templates/releases/download/e/linux-app-templateevilazip",
        "https://githubacom/evil/linux-app-templates/releases/download/ /linux-app-templateevilazip",
        "https://githubacom/evil/linux-app-templates/releases/download/6/linux-app-templateevilazip",
        "https://githubacom/evil/linux-app-templates/releases/download/_/linux-app-templateevilazip",
        "https://githubacom/evil/linux-app-templates/releases/download//linux-app-templateevilazip",
        "https://githubacom/:/linux-app-templates/releases/download/evil/linux-app-templateevilazip",
        "https://githubacom///linux-app-templates/releases/download/evil/linux-app-templateevilazip",
        "https://githubacom/-/linux-app-templates/releases/download/evil/linux-app-templateevilazip",
        "https://githubacom/eVil/linux-app-templates/releases/download/evil/linux-app-templateevilazip",
        "https://githubacom/EVIL/linux-app-templates/releases/download/evil/linux-app-templateevilazip",
        "https://githubacom/ev_il/linux-app-templates/releases/download/evil/linux-app-templateevilazip",
        "https://githubacom/ev il/linux-app-templates/releases/download/evil/linux-app-templateevilazip",
        "https://githubacom/ev4il/linux-app-templates/releases/download/evil/linux-app-templateevilazip",
        "https://githubacom/e/linux-app-templates/releases/download/evil/linux-app-templateevilazip",
        "https://githubacom/ /linux-app-templates/releases/download/evil/linux-app-templateevilazip",
        "https://githubacom/6/linux-app-templates/releases/download/evil/linux-app-templateevilazip",
        "https://githubacom/_/linux-app-templates/releases/download/evil/linux-app-templateevilazip",
        "https://githubacom//linux-app-templates/releases/download/evil/linux-app-templateevilazip",
        "https://githubAcom/evil/linux-app-templates/releases/download/evil/linux-app-templateevilazip",
        "https://github:com/evil/linux-app-templates/releases/download/evil/linux-app-templateevilazip",
        "https://github0com/evil/linux-app-templates/releases/download/evil/linux-app-templateevilazip",
        "https://github/com/evil/linux-app-templates/releases/download/evil/linux-app-templateevilazip",
        "https://github-com/evil/linux-app-templates/releases/download/evil/linux-app-templateevilazip",
        "https://github com/evil/linux-app-templates/releases/download/evil/linux-app-templateevilazip",
        "https://githubacom//linux-app-templates/releases/download//linux-app-templateazip",
        "https://githubacom/evil/linux-app-templates/releases/download/evil/linux-app-templateevilazip"
      ]
    },
    {
      "regex": "^the redis configuration server should answer http requests$",
      "exceptionStackTrace": null,
      "matches": ["the redis configuration server should answer http requests"]
    },
    { "regex": "^AT_", "exceptionStackTrace": null, "matches": ["AT_"] },
    {
      "regex": "-eq\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "Nan::New<(v8::)*(.+?)>\\(",
      "exceptionStackTrace": null,
      "matches": [
        "Nan::New<v8::>>(",
        "Nan::New<v8::<>(",
        "Nan::New<v8:::>(",
        "Nan::New<v8::(>(",
        "Nan::New<v8::eVil>(",
        "Nan::New<v8::EVIL>(",
        "Nan::New<v8::ev_il>(",
        "Nan::New<v8::ev il>(",
        "Nan::New<v8::ev4il>(",
        "Nan::New<v8::e>(",
        "Nan::New<v8:: >(",
        "Nan::New<v8::6>(",
        "Nan::New<v8::_>(",
        "Nan::New<v8::>(",
        "Nan::New<v8::v8::evil>(",
        "Nan::New<evil>(",
        "Nan::New<v8::evil>("
      ]
    },
    {
      "regex": "^\\s*(notification-level)\\s+(\\S+)",
      "exceptionStackTrace": null,
      "matches": [
        " notification-level -",
        " notification-level eVil",
        " notification-level EVIL",
        " notification-level ev_il",
        " notification-level ev il",
        " notification-level ev4il",
        " notification-level e",
        " notification-level  ",
        " notification-level 6",
        " notification-level _",
        " notification-level ",
        " notification-level  evil",
        " notification-levelevil",
        "  notification-level evil",
        "notification-level evil",
        " notification-level evil"
      ]
    },
    {
      "regex": "ACTION is (.*)",
      "exceptionStackTrace": null,
      "matches": [
        "ACTION is eVil",
        "ACTION is EVIL",
        "ACTION is ev_il",
        "ACTION is ev il",
        "ACTION is ev4il",
        "ACTION is e",
        "ACTION is  ",
        "ACTION is 6",
        "ACTION is _",
        "ACTION is ",
        "ACTION is evil"
      ]
    },
    {
      "regex": "no enforce-first-as",
      "exceptionStackTrace": null,
      "matches": ["no enforce-first-as"]
    },
    {
      "regex": "comment><comment>       \"\\t\" => \"&nbsp;&nbsp;&nbsp;\",<",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "[0-9][A-Za-z0-9.+~:-]*",
      "exceptionStackTrace": null,
      "matches": [
        "0~",
        "0:",
        "0.",
        "0-",
        "0+",
        "0eVil",
        "0EVIL",
        "0ev_il",
        "0ev il",
        "0ev4il",
        "0e",
        "0 ",
        "06",
        "0_",
        "0",
        "0evil"
      ]
    },
    {
      "regex": "v[^V]*$",
      "exceptionStackTrace": null,
      "matches": [
        "veVil",
        "vEVIL",
        "vev_il",
        "vev il",
        "vev4il",
        "ve",
        "v ",
        "v6",
        "v_",
        "v",
        "vevil"
      ]
    },
    {
      "regex": "^( validation | pedantic_parser | line_numbers \n\t\tload_ext_dtd | complete_attributes | expand_xinclude |\n\t\tload_catalog | base_uri | gdome_dom | clean_namespaces )$",
      "exceptionStackTrace": null,
      "matches": [
        " clean_namespaces ",
        " gdome_dom ",
        " base_uri ",
        "\n\t\tload_catalog ",
        " expand_xinclude ",
        " complete_attributes ",
        " line_numbers \n\t\tload_ext_dtd ",
        " pedantic_parser ",
        " validation "
      ]
    },
    {
      "regex": "^[ \\r\\n\\t]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": "^a\\.[a-zA-Z0-9-.]+$",
      "exceptionStackTrace": null,
      "matches": [
        "a..",
        "a.-",
        "a.eVil",
        "a.EVIL",
        "a.ev_il",
        "a.ev il",
        "a.ev4il",
        "a.e",
        "a. ",
        "a.6",
        "a._",
        "a.",
        "a.evil"
      ]
    },
    {
      "regex": ".*\\s+(?P<packets_output>\\d+) packets output.*\\s+(?P<bytes_output>\\d+) bytes.*",
      "exceptionStackTrace": null,
      "matches": [
        "evil 0 packets outputevil 0 byteseVil",
        "evil 0 packets outputevil 0 bytesEVIL",
        "evil 0 packets outputevil 0 bytesev_il",
        "evil 0 packets outputevil 0 bytesev il",
        "evil 0 packets outputevil 0 bytesev4il",
        "evil 0 packets outputevil 0 bytese",
        "evil 0 packets outputevil 0 bytes ",
        "evil 0 packets outputevil 0 bytes6",
        "evil 0 packets outputevil 0 bytes_",
        "evil 0 packets outputevil 0 bytes",
        "evil 0 packets outputevil 00 bytesevil",
        "evil 0 packets outputevil  bytesevil",
        "evil 0 packets outputevil  0 bytesevil",
        "evil 0 packets outputevil0 bytesevil",
        "evil 0 packets outputeVil 0 bytesevil",
        "evil 0 packets outputEVIL 0 bytesevil",
        "evil 0 packets outputev_il 0 bytesevil",
        "evil 0 packets outputev il 0 bytesevil",
        "evil 0 packets outputev4il 0 bytesevil",
        "evil 0 packets outpute 0 bytesevil",
        "evil 0 packets output  0 bytesevil",
        "evil 0 packets output6 0 bytesevil",
        "evil 0 packets output_ 0 bytesevil",
        "evil 0 packets output 0 bytesevil",
        "evil 00 packets outputevil 0 bytesevil",
        "evil  packets outputevil 0 bytesevil",
        "evil  0 packets outputevil 0 bytesevil",
        "evil0 packets outputevil 0 bytesevil",
        "eVil 0 packets outputevil 0 bytesevil",
        "EVIL 0 packets outputevil 0 bytesevil",
        "ev_il 0 packets outputevil 0 bytesevil",
        "ev il 0 packets outputevil 0 bytesevil",
        "ev4il 0 packets outputevil 0 bytesevil",
        "e 0 packets outputevil 0 bytesevil",
        "  0 packets outputevil 0 bytesevil",
        "6 0 packets outputevil 0 bytesevil",
        "_ 0 packets outputevil 0 bytesevil",
        " 0 packets outputevil 0 bytesevil",
        " 0 packets output 0 bytes",
        "evil 0 packets outputevil 0 bytesevil"
      ]
    },
    {
      "regex": "( |>|\\+|~(?!=))\\s*",
      "exceptionStackTrace": null,
      "matches": ["   ", "~", "+", ">", " ", "~ ", "+ ", "> ", "  "]
    },
    { "regex": "KSVG_PUT", "exceptionStackTrace": null, "matches": ["KSVG_PUT"] },
    {
      "regex": "^[\\w.-]*$",
      "exceptionStackTrace": null,
      "matches": [
        ".",
        "-",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    { "regex": "^l10n:", "exceptionStackTrace": null, "matches": ["l10n:"] },
    {
      "regex": "office\\.dtd",
      "exceptionStackTrace": null,
      "matches": ["office.dtd"]
    },
    {
      "regex": "[\\s]+=[\\s]+",
      "exceptionStackTrace": null,
      "matches": [" =  ", " =", "  = ", "= ", " = "]
    },
    {
      "regex": "@yield[(]['](.*?)['][)]",
      "exceptionStackTrace": null,
      "matches": [
        "@yield('@')",
        "@yield(')')",
        "@yield('(')",
        "@yield(''')",
        "@yield('eVil')",
        "@yield('EVIL')",
        "@yield('ev_il')",
        "@yield('ev il')",
        "@yield('ev4il')",
        "@yield('e')",
        "@yield(' ')",
        "@yield('6')",
        "@yield('_')",
        "@yield('')",
        "@yield('evil')"
      ]
    },
    {
      "regex": "([0-9]+)\\\\.([0-9]+)\\\\.?([0-9]+)?",
      "exceptionStackTrace": null,
      "matches": [
        "0\\a0\\a00",
        "0\\a0\\a",
        "0\\a0\\aa0",
        "0\\a0\\0",
        "0\\a0\\\\0",
        "0\\a0\\A0",
        "0\\a0\\00",
        "0\\a0\\ 0",
        "0\\a00\\a0",
        "0\\a\\a0",
        "0\\\\0\\a0",
        "0\\A0\\a0",
        "0\\00\\a0",
        "0\\ 0\\a0",
        "00\\a0\\a0",
        "\\a0\\a0",
        "0\\a0\\",
        "0\\a0\\a0"
      ]
    },
    {
      "regex": "\\.(\\w)+$",
      "exceptionStackTrace": null,
      "matches": [".aa", ".", "._", ".A", ".0", ".a"]
    },
    {
      "regex": "{{[\\s\\S]+?}},",
      "exceptionStackTrace": null,
      "matches": [
        "{{}}},",
        "{{{}},",
        "{{,}},",
        "{{eVil}},",
        "{{EVIL}},",
        "{{ev_il}},",
        "{{ev il}},",
        "{{ev4il}},",
        "{{e}},",
        "{{ }},",
        "{{6}},",
        "{{_}},",
        "{{}},",
        "{{evil}},"
      ]
    },
    {
      "regex": "^adding this map to itself with key \"(.*)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "adding this map to itself with key \"\"\"",
        "adding this map to itself with key \"eVil\"",
        "adding this map to itself with key \"EVIL\"",
        "adding this map to itself with key \"ev_il\"",
        "adding this map to itself with key \"ev il\"",
        "adding this map to itself with key \"ev4il\"",
        "adding this map to itself with key \"e\"",
        "adding this map to itself with key \" \"",
        "adding this map to itself with key \"6\"",
        "adding this map to itself with key \"_\"",
        "adding this map to itself with key \"\"",
        "adding this map to itself with key \"evil\""
      ]
    },
    {
      "regex": "\\bGROUP\\s+BY\\s+(.*)\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        "GROUP BY evil  ",
        "GROUP BY evil",
        "GROUP BY eVil ",
        "GROUP BY EVIL ",
        "GROUP BY ev_il ",
        "GROUP BY ev il ",
        "GROUP BY ev4il ",
        "GROUP BY e ",
        "GROUP BY   ",
        "GROUP BY 6 ",
        "GROUP BY _ ",
        "GROUP BY  ",
        "GROUP BY  evil ",
        "GROUP BYevil ",
        "GROUP  BY evil ",
        "GROUPBY evil ",
        "GROUP BY ",
        "GROUP BY evil "
      ]
    },
    {
      "regex": "[ \t\u000b]*#.*",
      "exceptionStackTrace": null,
      "matches": [
        "\u000b##",
        "\u000b#eVil",
        "\u000b#EVIL",
        "\u000b#ev_il",
        "\u000b#ev il",
        "\u000b#ev4il",
        "\u000b#e",
        "\u000b# ",
        "\u000b#6",
        "\u000b#_",
        "\u000b#",
        "\u000b\u000b#evil",
        "#evil",
        " #evil",
        "\t#evil",
        "#",
        "\u000b#evil"
      ]
    },
    {
      "regex": "like gecko",
      "exceptionStackTrace": null,
      "matches": ["like gecko"]
    },
    {
      "regex": "@(.+)\\-type-text-transform",
      "exceptionStackTrace": null,
      "matches": [
        "@@-type-text-transform",
        "@--type-text-transform",
        "@eVil-type-text-transform",
        "@EVIL-type-text-transform",
        "@ev_il-type-text-transform",
        "@ev il-type-text-transform",
        "@ev4il-type-text-transform",
        "@e-type-text-transform",
        "@ -type-text-transform",
        "@6-type-text-transform",
        "@_-type-text-transform",
        "@-type-text-transform",
        "@evil-type-text-transform"
      ]
    },
    {
      "regex": "GetLegendGraphic",
      "exceptionStackTrace": null,
      "matches": ["GetLegendGraphic"]
    },
    {
      "regex": "([.+*?=^!:()[\\]|\\/\\\\])",
      "exceptionStackTrace": null,
      "matches": [
        "|",
        "^",
        "]",
        "[",
        "?",
        "=",
        ":",
        "/",
        ".",
        "+",
        "*",
        ")",
        "(",
        "!",
        "\\"
      ]
    },
    { "regex": "(?<=\\w)\\/$", "exceptionStackTrace": null, "matches": ["/"] },
    {
      "regex": "^[ \\n\\r\\t\\f\\013]+",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^new_attr_name_\\d+$",
      "exceptionStackTrace": null,
      "matches": ["new_attr_name_00", "new_attr_name_", "new_attr_name_0"]
    },
    {
      "regex": "_\\Q$value\\E$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\Q"
      },
      "matches": []
    },
    {
      "regex": "\\A(.*)create$",
      "exceptionStackTrace": null,
      "matches": [
        "eVilcreate",
        "EVILcreate",
        "ev_ilcreate",
        "ev ilcreate",
        "ev4ilcreate",
        "ecreate",
        " create",
        "6create",
        "_create",
        "create",
        "evilcreate"
      ]
    },
    {
      "regex": "^[ ]{4,7}((\\d+\\.)|[*+-])[ ]+.*",
      "exceptionStackTrace": null,
      "matches": [
        "    + evil",
        "    * evil",
        "    0. .",
        "    0. -",
        "    0. +",
        "    0. *",
        "    0. eVil",
        "    0. EVIL",
        "    0. ev_il",
        "    0. ev il",
        "    0. ev4il",
        "    0. e",
        "    0.  ",
        "    0. 6",
        "    0. _",
        "    0.  evil",
        "    0.evil",
        "    00. evil",
        "    . evil",
        "        0. evil",
        "       0. evil",
        "   0. evil",
        "    - ",
        "    0. ",
        "    - evil",
        "    0. evil"
      ]
    },
    {
      "regex": "($PL_sb_U_man_mans)$",
      "exceptionStackTrace": null,
      "matches": ["PL_sb_U_man_mans"]
    },
    { "regex": "\\.\\.(?=\\.)", "exceptionStackTrace": null, "matches": [".."] },
    {
      "regex": "<geodata>",
      "exceptionStackTrace": null,
      "matches": ["<geodata>"]
    },
    {
      "regex": "^\\p{Mn}",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\p"
      },
      "matches": []
    },
    {
      "regex": "^($re_token)",
      "exceptionStackTrace": null,
      "matches": ["re_token"]
    },
    {
      "regex": "boundary=(\\S+)$",
      "exceptionStackTrace": null,
      "matches": [
        "boundary==",
        "boundary=eVil",
        "boundary=EVIL",
        "boundary=ev_il",
        "boundary=ev il",
        "boundary=ev4il",
        "boundary=e",
        "boundary= ",
        "boundary=6",
        "boundary=_",
        "boundary=",
        "boundary=evil"
      ]
    },
    {
      "regex": "\\\\(\"|\\\\)",
      "exceptionStackTrace": null,
      "matches": ["\\\\", "\\\""]
    },
    {
      "regex": "Android 8",
      "exceptionStackTrace": null,
      "matches": ["Android 8"]
    },
    {
      "regex": "\\bmailer=local\\b",
      "exceptionStackTrace": null,
      "matches": ["mailer=local"]
    },
    {
      "regex": "select hour, minutes from time",
      "exceptionStackTrace": null,
      "matches": ["select hour, minutes from time"]
    },
    {
      "regex": "--dry-run",
      "exceptionStackTrace": null,
      "matches": ["--dry-run"]
    },
    {
      "regex": "password=my_pass",
      "exceptionStackTrace": null,
      "matches": ["password=my_pass"]
    },
    {
      "regex": "Tile not found",
      "exceptionStackTrace": null,
      "matches": ["Tile not found"]
    },
    {
      "regex": "\\n\\s{8}",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "[dwrx-]{7}",
      "exceptionStackTrace": null,
      "matches": [
        "--------",
        "------",
        "x------",
        "w------",
        "r------",
        "d------",
        "a------",
        "-------"
      ]
    },
    {
      "regex": "^I should be successful$",
      "exceptionStackTrace": null,
      "matches": ["I should be successful"]
    },
    {
      "regex": "^use ActionDispatch::ShowExceptions$",
      "exceptionStackTrace": null,
      "matches": ["use ActionDispatch::ShowExceptions"]
    },
    {
      "regex": "\\G(0x[0-9A-Fa-f_]+)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\G"
      },
      "matches": []
    },
    {
      "regex": "^[-+.a-z0-9A-Z]+\\:[^:]",
      "exceptionStackTrace": null,
      "matches": [
        "evil:A",
        "evil::",
        "evil:0",
        "evil:.",
        "evil:-",
        "evil:+",
        "evil: ",
        "::a",
        ".:a",
        "-:a",
        "+:a",
        "eVil:a",
        "EVIL:a",
        "ev_il:a",
        "ev il:a",
        "ev4il:a",
        "e:a",
        " :a",
        "6:a",
        "_:a",
        ":a",
        "evil:a"
      ]
    },
    {
      "regex": "^\\s*(\\w[\\.\\w]*)\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        " aevil  ",
        " aevil",
        " a. ",
        " aeVil ",
        " aEVIL ",
        " aev_il ",
        " aev il ",
        " aev4il ",
        " ae ",
        " a  ",
        " a6 ",
        " a_ ",
        " a ",
        " _evil ",
        " Aevil ",
        " 0evil ",
        "  aevil ",
        "aevil ",
        "a",
        " aevil "
      ]
    },
    {
      "regex": "^\u0444\u0435\u0432",
      "exceptionStackTrace": null,
      "matches": ["\u0444\u0435\u0432"]
    },
    {
      "regex": "\\/en_EN\\/all\\.js",
      "exceptionStackTrace": null,
      "matches": ["/en_EN/all.js"]
    },
    {
      "regex": "id=\"w_value\" value=\"(\\d+)\"",
      "exceptionStackTrace": null,
      "matches": [
        "id=\"w_value\" value=\"00\"",
        "id=\"w_value\" value=\"\"",
        "id=\"w_value\" value=\"0\""
      ]
    },
    {
      "regex": "^Headers: (.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "Headers: :",
        "Headers: eVil",
        "Headers: EVIL",
        "Headers: ev_il",
        "Headers: ev il",
        "Headers: ev4il",
        "Headers: e",
        "Headers:  ",
        "Headers: 6",
        "Headers: _",
        "Headers: ",
        "Headers: evil"
      ]
    },
    {
      "regex": "^previous\\s*(.+)\\s*(year|quarter|month|week|day)s?$",
      "exceptionStackTrace": null,
      "matches": [
        "previous evil yearss",
        "previous evil year",
        "previous evil  years",
        "previous evilyears",
        "previous eVil years",
        "previous EVIL years",
        "previous ev_il years",
        "previous ev il years",
        "previous ev4il years",
        "previous e years",
        "previous   years",
        "previous 6 years",
        "previous _ years",
        "previous  years",
        "previous  evil years",
        "previousevil years",
        "previousevilday",
        "previousevilweek",
        "previousevilmonth",
        "previousevilquarter",
        "previousevilyear",
        "previous evil days",
        "previous evil weeks",
        "previous evil months",
        "previous evil quarters",
        "previous evil years"
      ]
    },
    {
      "regex": "[\\uff01-\\uff5e]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 65281"
      },
      "matches": []
    },
    {
      "regex": "hash:\"([0-9a-z]+)\"",
      "exceptionStackTrace": null,
      "matches": [
        "hash:\"eVil\"",
        "hash:\"EVIL\"",
        "hash:\"ev_il\"",
        "hash:\"ev il\"",
        "hash:\"ev4il\"",
        "hash:\"e\"",
        "hash:\" \"",
        "hash:\"6\"",
        "hash:\"_\"",
        "hash:\"\"",
        "hash:\"evil\""
      ]
    },
    {
      "regex": "^[-]?$p$",
      "exceptionStackTrace": null,
      "matches": ["--p", "p", "-p"]
    },
    {
      "regex": "fixtures\\/example_failing_spec\\.rb&line=3",
      "exceptionStackTrace": null,
      "matches": ["fixtures/example_failing_spec.rb&line=3"]
    },
    {
      "regex": "\"Phone\":\"1115555555\"",
      "exceptionStackTrace": null,
      "matches": ["\"Phone\":\"1115555555\""]
    },
    {
      "regex": "$setvar_str\\-*",
      "exceptionStackTrace": null,
      "matches": ["setvar_str--", "setvar_str", "setvar_str-"]
    },
    { "regex": "ocean", "exceptionStackTrace": null, "matches": ["ocean"] },
    {
      "regex": "^INFO\\s+jepsen\\.util\\s+-\\s+(\\d+)\\s+:ok\\s+:read\\s+(nil|\\d+)$",
      "exceptionStackTrace": null,
      "matches": [
        "INFO jepsen.util - 0 :ok :read 00",
        "INFO jepsen.util - 0 :ok :read ",
        "INFO jepsen.util - 0 :ok :read  nil",
        "INFO jepsen.util - 0 :ok :readnil",
        "INFO jepsen.util - 0 :ok  :read nil",
        "INFO jepsen.util - 0 :ok:read nil",
        "INFO jepsen.util - 0  :ok :read nil",
        "INFO jepsen.util - 0:ok :read nil",
        "INFO jepsen.util - 00 :ok :read nil",
        "INFO jepsen.util -  :ok :read nil",
        "INFO jepsen.util -  0 :ok :read nil",
        "INFO jepsen.util -0 :ok :read nil",
        "INFO jepsen.util  - 0 :ok :read nil",
        "INFO jepsen.util- 0 :ok :read nil",
        "INFO  jepsen.util - 0 :ok :read nil",
        "INFOjepsen.util - 0 :ok :read nil",
        "INFO jepsen.util - 0 :ok :read 0",
        "INFO jepsen.util - 0 :ok :read nil"
      ]
    },
    {
      "regex": "\\A\\s*-?\\d{4}-\\d{2}-\\d{2} # allow minus, anyway\n    (t|\\s)\n    \\d{2}:\\d{2}:\\d{2}(\\.\\d+)?\n    (z|[-+]\\d{2}:\\d{2})\\s*\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "[\\w.%]",
      "exceptionStackTrace": null,
      "matches": ["a", "_", "A", "0", ".", "%"]
    },
    {
      "regex": "^(\\s+at\\s|@)",
      "exceptionStackTrace": null,
      "matches": ["  at ", "at ", "@", " at "]
    },
    {
      "regex": "^\\s*<key id='([^']*)'>",
      "exceptionStackTrace": null,
      "matches": [
        " <key id='>'>",
        " <key id='='>",
        " <key id='<'>",
        " <key id='''>",
        " <key id='eVil'>",
        " <key id='EVIL'>",
        " <key id='ev_il'>",
        " <key id='ev il'>",
        " <key id='ev4il'>",
        " <key id='e'>",
        " <key id=' '>",
        " <key id='6'>",
        " <key id='_'>",
        " <key id=''>",
        "  <key id='evil'>",
        "<key id='evil'>",
        "<key id=''>",
        " <key id='evil'>"
      ]
    },
    {
      "regex": "^\\{(([^\\}]|\\\\\\})+)\\}([i]?)",
      "exceptionStackTrace": null,
      "matches": [
        "{a}ii",
        "{aa}i",
        "{}i",
        "{}}i",
        "{{}i",
        "{\\}i",
        "{A}i",
        "{0}i",
        "{ }i",
        "{\\}}",
        "{a}",
        "{\\}}i",
        "{a}i"
      ]
    },
    {
      "regex": "Can.*t find( instance)? method (java.util.ArrayList\\.)?initialize\\(java.lang.String\\)",
      "exceptionStackTrace": null,
      "matches": [
        "Canevilt find instance method javaautilaArrayList.initialize(javaalangAString)",
        "Canevilt find instance method javaautilaArrayList.initialize(javaalang0String)",
        "Canevilt find instance method javaautilaArrayList.initialize(javaalang.String)",
        "Canevilt find instance method javaautilaArrayList.initialize(javaalang)String)",
        "Canevilt find instance method javaautilaArrayList.initialize(javaalang(String)",
        "Canevilt find instance method javaautilaArrayList.initialize(javaalang String)",
        "Canevilt find instance method javaautilaArrayList.initialize(javaAlangaString)",
        "Canevilt find instance method javaautilaArrayList.initialize(java0langaString)",
        "Canevilt find instance method javaautilaArrayList.initialize(java.langaString)",
        "Canevilt find instance method javaautilaArrayList.initialize(java)langaString)",
        "Canevilt find instance method javaautilaArrayList.initialize(java(langaString)",
        "Canevilt find instance method javaautilaArrayList.initialize(java langaString)",
        "Canevilt find instance method javaautilaArrayList.javaautilaArrayList.initialize(javaalangaString)",
        "Canevilt find instance method initialize(javaalangaString)",
        "Canevilt find instance method javaautilAArrayList.initialize(javaalangaString)",
        "Canevilt find instance method javaautil0ArrayList.initialize(javaalangaString)",
        "Canevilt find instance method javaautil.ArrayList.initialize(javaalangaString)",
        "Canevilt find instance method javaautil)ArrayList.initialize(javaalangaString)",
        "Canevilt find instance method javaautil(ArrayList.initialize(javaalangaString)",
        "Canevilt find instance method javaautil ArrayList.initialize(javaalangaString)",
        "Canevilt find instance method javaAutilaArrayList.initialize(javaalangaString)",
        "Canevilt find instance method java0utilaArrayList.initialize(javaalangaString)",
        "Canevilt find instance method java.utilaArrayList.initialize(javaalangaString)",
        "Canevilt find instance method java)utilaArrayList.initialize(javaalangaString)",
        "Canevilt find instance method java(utilaArrayList.initialize(javaalangaString)",
        "Canevilt find instance method java utilaArrayList.initialize(javaalangaString)",
        "Canevilt find instance instance method javaautilaArrayList.initialize(javaalangaString)",
        "Canevilt find method javaautilaArrayList.initialize(javaalangaString)",
        "Can.t find instance method javaautilaArrayList.initialize(javaalangaString)",
        "Can)t find instance method javaautilaArrayList.initialize(javaalangaString)",
        "Can(t find instance method javaautilaArrayList.initialize(javaalangaString)",
        "CaneVilt find instance method javaautilaArrayList.initialize(javaalangaString)",
        "CanEVILt find instance method javaautilaArrayList.initialize(javaalangaString)",
        "Canev_ilt find instance method javaautilaArrayList.initialize(javaalangaString)",
        "Canev ilt find instance method javaautilaArrayList.initialize(javaalangaString)",
        "Canev4ilt find instance method javaautilaArrayList.initialize(javaalangaString)",
        "Canet find instance method javaautilaArrayList.initialize(javaalangaString)",
        "Can t find instance method javaautilaArrayList.initialize(javaalangaString)",
        "Can6t find instance method javaautilaArrayList.initialize(javaalangaString)",
        "Can_t find instance method javaautilaArrayList.initialize(javaalangaString)",
        "Cant find instance method javaautilaArrayList.initialize(javaalangaString)",
        "Cant find method initialize(javaalangaString)",
        "Canevilt find instance method javaautilaArrayList.initialize(javaalangaString)"
      ]
    },
    {
      "regex": " (\\d+)$",
      "exceptionStackTrace": null,
      "matches": [" 00", " ", " 0"]
    },
    {
      "regex": "\\$[\\+\\'\\`\\&!@\\\"~*$?\\/\\\\:;=.,<>_]",
      "exceptionStackTrace": null,
      "matches": [
        "$~",
        "$`",
        "$\\",
        "$@",
        "$?",
        "$>",
        "$=",
        "$<",
        "$;",
        "$:",
        "$/",
        "$.",
        "$,",
        "$+",
        "$*",
        "$'",
        "$&",
        "$$",
        "$\"",
        "$!",
        "$_"
      ]
    },
    {
      "regex": "([;\\/\\\\])",
      "exceptionStackTrace": null,
      "matches": [";", "/", "\\"]
    },
    {
      "regex": "Width argument passed to \\.windowSize\\(\\) must be a number",
      "exceptionStackTrace": null,
      "matches": ["Width argument passed to .windowSize() must be a number"]
    },
    {
      "regex": "([A-Za-z]+\\(([0-9]+),([0-9]+)\\))",
      "exceptionStackTrace": null,
      "matches": [
        "evil(0,00)",
        "evil(0,)",
        "evil(00,0)",
        "evil(,0)",
        "eVil(0,0)",
        "EVIL(0,0)",
        "ev_il(0,0)",
        "ev il(0,0)",
        "ev4il(0,0)",
        "e(0,0)",
        " (0,0)",
        "6(0,0)",
        "_(0,0)",
        "(0,0)",
        "evil(0,0)"
      ]
    },
    {
      "regex": "^(Monday|Tuesday|Wedsday|Thursday|Friday|Saturday|Sunday), (\\d\\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) GMT$",
      "exceptionStackTrace": null,
      "matches": [
        "Sunday, 00-Jan-00 00:00:00 GMT",
        "Saturday, 00-Jan-00 00:00:00 GMT",
        "Friday, 00-Jan-00 00:00:00 GMT",
        "Thursday, 00-Jan-00 00:00:00 GMT",
        "Wedsday, 00-Jan-00 00:00:00 GMT",
        "Tuesday, 00-Jan-00 00:00:00 GMT",
        "Monday, 00-Dec-00 00:00:00 GMT",
        "Monday, 00-Nov-00 00:00:00 GMT",
        "Monday, 00-Oct-00 00:00:00 GMT",
        "Monday, 00-Sep-00 00:00:00 GMT",
        "Monday, 00-Aug-00 00:00:00 GMT",
        "Monday, 00-Jul-00 00:00:00 GMT",
        "Monday, 00-Jun-00 00:00:00 GMT",
        "Monday, 00-May-00 00:00:00 GMT",
        "Monday, 00-Apr-00 00:00:00 GMT",
        "Monday, 00-Mar-00 00:00:00 GMT",
        "Monday, 00-Feb-00 00:00:00 GMT",
        "Monday, 00-Jan-00 00:00:00 GMT"
      ]
    },
    {
      "regex": "\\bvar (\\w+) = ([^;]+);",
      "exceptionStackTrace": null,
      "matches": [
        "var evil = =;",
        "var evil = ;;",
        "var evil = eVil;",
        "var evil = EVIL;",
        "var evil = ev_il;",
        "var evil = ev il;",
        "var evil = ev4il;",
        "var evil = e;",
        "var evil =  ;",
        "var evil = 6;",
        "var evil = _;",
        "var evil = ;",
        "var eVil = evil;",
        "var EVIL = evil;",
        "var ev_il = evil;",
        "var ev il = evil;",
        "var ev4il = evil;",
        "var e = evil;",
        "var   = evil;",
        "var 6 = evil;",
        "var _ = evil;",
        "var  = evil;",
        "var evil = evil;"
      ]
    },
    {
      "regex": ".*hostname is (\\w*).*",
      "exceptionStackTrace": null,
      "matches": [
        "evilhostname is evileVil",
        "evilhostname is evilEVIL",
        "evilhostname is evilev_il",
        "evilhostname is evilev il",
        "evilhostname is evilev4il",
        "evilhostname is evile",
        "evilhostname is evil ",
        "evilhostname is evil6",
        "evilhostname is evil_",
        "evilhostname is eVilevil",
        "evilhostname is EVILevil",
        "evilhostname is ev_ilevil",
        "evilhostname is ev ilevil",
        "evilhostname is ev4ilevil",
        "evilhostname is eevil",
        "evilhostname is  evil",
        "evilhostname is 6evil",
        "evilhostname is _evil",
        "evilhostname is evil",
        "eVilhostname is evilevil",
        "EVILhostname is evilevil",
        "ev_ilhostname is evilevil",
        "ev ilhostname is evilevil",
        "ev4ilhostname is evilevil",
        "ehostname is evilevil",
        " hostname is evilevil",
        "6hostname is evilevil",
        "_hostname is evilevil",
        "hostname is evilevil",
        "hostname is ",
        "evilhostname is evilevil"
      ]
    },
    { "regex": "\\A - ", "exceptionStackTrace": null, "matches": [" - "] },
    {
      "regex": "^DNS servers could not resolve",
      "exceptionStackTrace": null,
      "matches": ["DNS servers could not resolve"]
    },
    {
      "regex": "^Error\\: Non\\-base58 character$",
      "exceptionStackTrace": null,
      "matches": ["Error: Non-base58 character"]
    },
    {
      "regex": "(\\d)(?=(\\d\\d\\d)+(?!\\d))",
      "exceptionStackTrace": null,
      "matches": ["0"]
    },
    {
      "regex": "^compress\\.zlib://",
      "exceptionStackTrace": null,
      "matches": ["compress.zlib://"]
    },
    {
      "regex": "url\\((['\"]|)(.*?)\\1\\)",
      "exceptionStackTrace": null,
      "matches": [
        "url(\")\")",
        "url(\"(\")",
        "url(\"'\")",
        "url(\"\"\")",
        "url(\"eVil\")",
        "url(\"EVIL\")",
        "url(\"ev_il\")",
        "url(\"ev il\")",
        "url(\"ev4il\")",
        "url(\"e\")",
        "url(\" \")",
        "url(\"6\")",
        "url(\"_\")",
        "url(\"\")",
        "url(\"\"evil\")",
        "url(evil\")",
        "url('evil\")",
        "url(\")",
        "url(\"evil\")"
      ]
    },
    {
      "regex": "^\\s* so(?:urce)? \\s+ (.+) $",
      "exceptionStackTrace": null,
      "matches": [
        "  source   eVil ",
        "  source   EVIL ",
        "  source   ev_il ",
        "  source   ev il ",
        "  source   ev4il ",
        "  source   e ",
        "  source     ",
        "  source   6 ",
        "  source   _ ",
        "  source    ",
        "  source    evil ",
        "  source  evil ",
        "  sourceurce   evil ",
        "  so   evil ",
        "   source   evil ",
        " source   evil ",
        " so   evil ",
        "  source   evil "
      ]
    },
    {
      "regex": "^\\t(.*)\\t(.*)$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "Couldn't find Country with ID=0",
      "exceptionStackTrace": null,
      "matches": ["Couldn't find Country with ID=0"]
    },
    {
      "regex": "^[0-9\\.\\-]+pt$",
      "exceptionStackTrace": null,
      "matches": ["--pt", "pt", "0pt", ".pt", "-pt"]
    },
    {
      "regex": "view_community.pl\\?id=(\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "view_communityapl?id=00",
        "view_communityapl?id=",
        "view_community_pl?id=0",
        "view_communityApl?id=0",
        "view_community?pl?id=0",
        "view_community=pl?id=0",
        "view_community0pl?id=0",
        "view_community pl?id=0",
        "view_communityapl?id=0"
      ]
    },
    {
      "regex": "javascript|flash|application\\/json|text\\/xml|application\\/xml",
      "exceptionStackTrace": null,
      "matches": [
        "application/xml",
        "text/xml",
        "application/json",
        "flash",
        "javascript"
      ]
    },
    {
      "regex": "^\\s+Normal\\s+termination\\s+of\\s+$log->{PROGRAM}",
      "exceptionStackTrace": null,
      "matches": [
        " Normal termination of  log->{PROGRAM}",
        " Normal termination oflog->{PROGRAM}",
        " Normal termination  of log->{PROGRAM}",
        " Normal terminationof log->{PROGRAM}",
        " Normal  termination of log->{PROGRAM}",
        " Normaltermination of log->{PROGRAM}",
        "  Normal termination of log->{PROGRAM}",
        "Normal termination of log->{PROGRAM}",
        " Normal termination of log->{PROGRAM}"
      ]
    },
    {
      "regex": ":(\\w+)(\\/?)",
      "exceptionStackTrace": null,
      "matches": [
        ":evil//",
        ":eVil/",
        ":EVIL/",
        ":ev_il/",
        ":ev il/",
        ":ev4il/",
        ":e/",
        ": /",
        ":6/",
        ":_/",
        ":/",
        ":evil",
        ":evil/"
      ]
    },
    {
      "regex": "^((_[a-zA-Z0-9]{12})|([\\d\\-]{20,}))$",
      "exceptionStackTrace": null,
      "matches": [
        "-------------------",
        "0-------------------",
        "_0000000000000",
        "_00000000000",
        "_a00000000000",
        "_A00000000000",
        "--------------------",
        "_000000000000"
      ]
    },
    {
      "regex": "Vector<(int|long)>",
      "exceptionStackTrace": null,
      "matches": ["Vector<long>", "Vector<int>"]
    },
    {
      "regex": ".*assertEqual\\(True, .*\\)",
      "exceptionStackTrace": null,
      "matches": [
        "evilassertEqual(True, ,)",
        "evilassertEqual(True, ))",
        "evilassertEqual(True, ()",
        "evilassertEqual(True, eVil)",
        "evilassertEqual(True, EVIL)",
        "evilassertEqual(True, ev_il)",
        "evilassertEqual(True, ev il)",
        "evilassertEqual(True, ev4il)",
        "evilassertEqual(True, e)",
        "evilassertEqual(True,  )",
        "evilassertEqual(True, 6)",
        "evilassertEqual(True, _)",
        "evilassertEqual(True, )",
        ",assertEqual(True, evil)",
        ")assertEqual(True, evil)",
        "(assertEqual(True, evil)",
        "eVilassertEqual(True, evil)",
        "EVILassertEqual(True, evil)",
        "ev_ilassertEqual(True, evil)",
        "ev ilassertEqual(True, evil)",
        "ev4ilassertEqual(True, evil)",
        "eassertEqual(True, evil)",
        " assertEqual(True, evil)",
        "6assertEqual(True, evil)",
        "_assertEqual(True, evil)",
        "assertEqual(True, evil)",
        "assertEqual(True, )",
        "evilassertEqual(True, evil)"
      ]
    },
    {
      "regex": "^(?:SECTION\\b)",
      "exceptionStackTrace": null,
      "matches": ["SECTION"]
    },
    {
      "regex": "^\\w+:\\/\\/[\\w\\.\\-]+(:\\d+)?$",
      "exceptionStackTrace": null,
      "matches": [
        "evil://evil:0:0",
        "evil://evil:00",
        "evil://evil:",
        "evil://::0",
        "evil:///:0",
        "evil://.:0",
        "evil://-:0",
        "evil://eVil:0",
        "evil://EVIL:0",
        "evil://ev_il:0",
        "evil://ev il:0",
        "evil://ev4il:0",
        "evil://e:0",
        "evil:// :0",
        "evil://6:0",
        "evil://_:0",
        "evil://:0",
        "eVil://evil:0",
        "EVIL://evil:0",
        "ev_il://evil:0",
        "ev il://evil:0",
        "ev4il://evil:0",
        "e://evil:0",
        " ://evil:0",
        "6://evil:0",
        "_://evil:0",
        "://evil:0",
        "evil://evil",
        "evil://evil:0"
      ]
    },
    {
      "regex": "^I should see segment \"([^\"]*)\" in segmented control \"([^\"]*)\" (is|is not) selected$",
      "exceptionStackTrace": null,
      "matches": [
        "I should see segment \"evil\" in segmented control \"\"\" is selected",
        "I should see segment \"evil\" in segmented control \"eVil\" is selected",
        "I should see segment \"evil\" in segmented control \"EVIL\" is selected",
        "I should see segment \"evil\" in segmented control \"ev_il\" is selected",
        "I should see segment \"evil\" in segmented control \"ev il\" is selected",
        "I should see segment \"evil\" in segmented control \"ev4il\" is selected",
        "I should see segment \"evil\" in segmented control \"e\" is selected",
        "I should see segment \"evil\" in segmented control \" \" is selected",
        "I should see segment \"evil\" in segmented control \"6\" is selected",
        "I should see segment \"evil\" in segmented control \"_\" is selected",
        "I should see segment \"evil\" in segmented control \"\" is selected",
        "I should see segment \"\"\" in segmented control \"evil\" is selected",
        "I should see segment \"eVil\" in segmented control \"evil\" is selected",
        "I should see segment \"EVIL\" in segmented control \"evil\" is selected",
        "I should see segment \"ev_il\" in segmented control \"evil\" is selected",
        "I should see segment \"ev il\" in segmented control \"evil\" is selected",
        "I should see segment \"ev4il\" in segmented control \"evil\" is selected",
        "I should see segment \"e\" in segmented control \"evil\" is selected",
        "I should see segment \" \" in segmented control \"evil\" is selected",
        "I should see segment \"6\" in segmented control \"evil\" is selected",
        "I should see segment \"_\" in segmented control \"evil\" is selected",
        "I should see segment \"\" in segmented control \"evil\" is selected",
        "I should see segment \"\" in segmented control \"\" is not selected",
        "I should see segment \"\" in segmented control \"\" is selected",
        "I should see segment \"evil\" in segmented control \"evil\" is not selected",
        "I should see segment \"evil\" in segmented control \"evil\" is selected"
      ]
    },
    { "regex": "6N", "exceptionStackTrace": null, "matches": ["6N"] },
    {
      "regex": "\\d|e|E",
      "exceptionStackTrace": null,
      "matches": ["E", "e", "0"]
    },
    {
      "regex": "\\[\\d*\\]",
      "exceptionStackTrace": null,
      "matches": ["[00]", "[]", "[0]"]
    },
    {
      "regex": "parse error \\[6:4]",
      "exceptionStackTrace": null,
      "matches": ["parse error [6:4]"]
    },
    {
      "regex": "\n        <payment>\n          .*<shipping>\n            .*<address>\n                .*<city>Somewhere.City</city>\n        ",
      "exceptionStackTrace": null,
      "matches": [
        "\n        <payment>\n          evil<shipping>\n            evil<address>\n                evil<city>SomewhereACity</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            evil<address>\n                evil<city>Somewhere>City</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            evil<address>\n                evil<city>Somewhere<City</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            evil<address>\n                evil<city>Somewhere0City</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            evil<address>\n                evil<city>Somewhere/City</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            evil<address>\n                evil<city>Somewhere City</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            evil<address>\n                ><city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            evil<address>\n                <<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            evil<address>\n                /<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            evil<address>\n                eVil<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            evil<address>\n                EVIL<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            evil<address>\n                ev_il<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            evil<address>\n                ev il<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            evil<address>\n                ev4il<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            evil<address>\n                e<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            evil<address>\n                 <city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            evil<address>\n                6<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            evil<address>\n                _<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            evil<address>\n                <city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            ><address>\n                evil<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            <<address>\n                evil<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            /<address>\n                evil<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            eVil<address>\n                evil<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            EVIL<address>\n                evil<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            ev_il<address>\n                evil<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            ev il<address>\n                evil<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            ev4il<address>\n                evil<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            e<address>\n                evil<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n             <address>\n                evil<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            6<address>\n                evil<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            _<address>\n                evil<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            <address>\n                evil<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          ><shipping>\n            evil<address>\n                evil<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          <<shipping>\n            evil<address>\n                evil<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          /<shipping>\n            evil<address>\n                evil<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          eVil<shipping>\n            evil<address>\n                evil<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          EVIL<shipping>\n            evil<address>\n                evil<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          ev_il<shipping>\n            evil<address>\n                evil<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          ev il<shipping>\n            evil<address>\n                evil<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          ev4il<shipping>\n            evil<address>\n                evil<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          e<shipping>\n            evil<address>\n                evil<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n           <shipping>\n            evil<address>\n                evil<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          6<shipping>\n            evil<address>\n                evil<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          _<shipping>\n            evil<address>\n                evil<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          <shipping>\n            evil<address>\n                evil<city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          <shipping>\n            <address>\n                <city>SomewhereaCity</city>\n        ",
        "\n        <payment>\n          evil<shipping>\n            evil<address>\n                evil<city>SomewhereaCity</city>\n        "
      ]
    },
    {
      "regex": "^(SPAN|A|CODE|EM|I|STRONG|B|S|ABBR|ACRONYM|CITE|DFN|KBD|SAMP|VAR|BDO|Q|SUB|SUP)$",
      "exceptionStackTrace": null,
      "matches": [
        "SUP",
        "SUB",
        "Q",
        "BDO",
        "VAR",
        "SAMP",
        "KBD",
        "DFN",
        "CITE",
        "ACRONYM",
        "ABBR",
        "S",
        "B",
        "STRONG",
        "I",
        "EM",
        "CODE",
        "A",
        "SPAN"
      ]
    },
    {
      "regex": "fun1|fun2",
      "exceptionStackTrace": null,
      "matches": ["fun2", "fun1"]
    },
    {
      "regex": "DEFINER=`[^`]*`@`[^`]*` ",
      "exceptionStackTrace": null,
      "matches": [
        "DEFINER=`evil`@``` ",
        "DEFINER=`evil`@`@` ",
        "DEFINER=`evil`@`=` ",
        "DEFINER=`evil`@`eVil` ",
        "DEFINER=`evil`@`EVIL` ",
        "DEFINER=`evil`@`ev_il` ",
        "DEFINER=`evil`@`ev il` ",
        "DEFINER=`evil`@`ev4il` ",
        "DEFINER=`evil`@`e` ",
        "DEFINER=`evil`@` ` ",
        "DEFINER=`evil`@`6` ",
        "DEFINER=`evil`@`_` ",
        "DEFINER=`evil`@`` ",
        "DEFINER=```@`evil` ",
        "DEFINER=`@`@`evil` ",
        "DEFINER=`=`@`evil` ",
        "DEFINER=`eVil`@`evil` ",
        "DEFINER=`EVIL`@`evil` ",
        "DEFINER=`ev_il`@`evil` ",
        "DEFINER=`ev il`@`evil` ",
        "DEFINER=`ev4il`@`evil` ",
        "DEFINER=`e`@`evil` ",
        "DEFINER=` `@`evil` ",
        "DEFINER=`6`@`evil` ",
        "DEFINER=`_`@`evil` ",
        "DEFINER=``@`evil` ",
        "DEFINER=``@`` ",
        "DEFINER=`evil`@`evil` "
      ]
    },
    {
      "regex": "\\A(?i-mx:[a-f\\d]{2})",
      "exceptionStackTrace": null,
      "matches": [""]
    },
    {
      "regex": "^i\\d+",
      "exceptionStackTrace": null,
      "matches": ["i00", "i", "i0"]
    },
    {
      "regex": "^choice\\s*$",
      "exceptionStackTrace": null,
      "matches": ["choice  ", "choice", "choice "]
    },
    {
      "regex": "^[,a-zA-Z]+$",
      "exceptionStackTrace": null,
      "matches": [
        ",",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "[+-]?\\d[\\d_]*(?:(?:\\.[\\d_]*)?(?:[eE][+-]?[\\d_]+)?)?[LlSsDdFfYy]?\\b",
      "exceptionStackTrace": null,
      "matches": [
        "-0_._E-_yy",
        "-0_._E-_",
        "-0_._E-_s",
        "-0_._E-_l",
        "-0_._E-_f",
        "-0_._E-_d",
        "-0_._E-_a",
        "-0_._E-_Y",
        "-0_._E-_S",
        "-0_._E-_L",
        "-0_._E-_F",
        "-0_._E-_D",
        "-0_._E-_A",
        "-0_._E-_._E-_y",
        "-0_y",
        "-0_._E-_E-_y",
        "-0_._y",
        "-0_._E-__y",
        "-0_._E-y",
        "-0_._E-0y",
        "-0_._E--_y",
        "-0_._E_y",
        "-0_._E+_y",
        "-0_._e-_y",
        "-0_._a-_y",
        "-0_._A-_y",
        "-0_._._E-_y",
        "-0_E-_y",
        "-0_.__E-_y",
        "-0_.E-_y",
        "-0_.0E-_y",
        "-0__._E-_y",
        "-0._E-_y",
        "-00._E-_y",
        "--0_._E-_y",
        "0_._E-_y",
        "+0_._E-_y",
        "0",
        "-0_._E-_y"
      ]
    },
    { "regex": "cpan$", "exceptionStackTrace": null, "matches": ["cpan"] },
    {
      "regex": "^(?:Intel-ACPI)",
      "exceptionStackTrace": null,
      "matches": ["Intel-ACPI"]
    },
    {
      "regex": "\\b(clone|call|init|method|list|vector|block|(\\w+(?=\\s*\\()))\\b",
      "exceptionStackTrace": null,
      "matches": [
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil",
        "block",
        "vector",
        "list",
        "method",
        "init",
        "call",
        "clone"
      ]
    },
    {
      "regex": "^\\/settings",
      "exceptionStackTrace": null,
      "matches": ["/settings"]
    },
    {
      "regex": "[(](?:expanded|generated)[ ]from:?[ ]([^@]+[@][^@]+)[)]",
      "exceptionStackTrace": null,
      "matches": [
        "(expanded from: evil@@)",
        "(expanded from: evil@:)",
        "(expanded from: evil@))",
        "(expanded from: evil@()",
        "(expanded from: evil@eVil)",
        "(expanded from: evil@EVIL)",
        "(expanded from: evil@ev_il)",
        "(expanded from: evil@ev il)",
        "(expanded from: evil@ev4il)",
        "(expanded from: evil@e)",
        "(expanded from: evil@ )",
        "(expanded from: evil@6)",
        "(expanded from: evil@_)",
        "(expanded from: evil@)",
        "(expanded from: @@evil)",
        "(expanded from: :@evil)",
        "(expanded from: )@evil)",
        "(expanded from: (@evil)",
        "(expanded from: eVil@evil)",
        "(expanded from: EVIL@evil)",
        "(expanded from: ev_il@evil)",
        "(expanded from: ev il@evil)",
        "(expanded from: ev4il@evil)",
        "(expanded from: e@evil)",
        "(expanded from:  @evil)",
        "(expanded from: 6@evil)",
        "(expanded from: _@evil)",
        "(expanded from: @evil)",
        "(expanded from:: evil@evil)",
        "(generated from evil@evil)",
        "(expanded from evil@evil)",
        "(generated from: evil@evil)",
        "(expanded from: evil@evil)"
      ]
    },
    {
      "regex": "(^|\\.)(get|my)somethingD\\.com$",
      "exceptionStackTrace": null,
      "matches": [".getsomethingD.com", "mysomethingD.com", "getsomethingD.com"]
    },
    { "regex": "c(?=ch[aiueo])", "exceptionStackTrace": null, "matches": ["c"] },
    {
      "regex": "\\,\\s*\\,",
      "exceptionStackTrace": null,
      "matches": [",  ,", ",,", ", ,"]
    },
    {
      "regex": "skipped: 2",
      "exceptionStackTrace": null,
      "matches": ["skipped: 2"]
    },
    {
      "regex": "import.*Foo.*from '.\\/foo.pipe'",
      "exceptionStackTrace": null,
      "matches": [
        "importevilFooevilfrom 'a/fooApipe'",
        "importevilFooevilfrom 'a/foo0pipe'",
        "importevilFooevilfrom 'a/foo/pipe'",
        "importevilFooevilfrom 'a/foo'pipe'",
        "importevilFooevilfrom 'a/foo pipe'",
        "importevilFooevilfrom 'A/fooapipe'",
        "importevilFooevilfrom '0/fooapipe'",
        "importevilFooevilfrom '//fooapipe'",
        "importevilFooevilfrom ''/fooapipe'",
        "importevilFooevilfrom ' /fooapipe'",
        "importevilFoo/from 'a/fooapipe'",
        "importevilFoo'from 'a/fooapipe'",
        "importevilFooeVilfrom 'a/fooapipe'",
        "importevilFooEVILfrom 'a/fooapipe'",
        "importevilFooev_ilfrom 'a/fooapipe'",
        "importevilFooev ilfrom 'a/fooapipe'",
        "importevilFooev4ilfrom 'a/fooapipe'",
        "importevilFooefrom 'a/fooapipe'",
        "importevilFoo from 'a/fooapipe'",
        "importevilFoo6from 'a/fooapipe'",
        "importevilFoo_from 'a/fooapipe'",
        "importevilFoofrom 'a/fooapipe'",
        "import/Fooevilfrom 'a/fooapipe'",
        "import'Fooevilfrom 'a/fooapipe'",
        "importeVilFooevilfrom 'a/fooapipe'",
        "importEVILFooevilfrom 'a/fooapipe'",
        "importev_ilFooevilfrom 'a/fooapipe'",
        "importev ilFooevilfrom 'a/fooapipe'",
        "importev4ilFooevilfrom 'a/fooapipe'",
        "importeFooevilfrom 'a/fooapipe'",
        "import Fooevilfrom 'a/fooapipe'",
        "import6Fooevilfrom 'a/fooapipe'",
        "import_Fooevilfrom 'a/fooapipe'",
        "importFooevilfrom 'a/fooapipe'",
        "importFoofrom 'a/fooapipe'",
        "importevilFooevilfrom 'a/fooapipe'"
      ]
    },
    {
      "regex": "^I run Jekyll$",
      "exceptionStackTrace": null,
      "matches": ["I run Jekyll"]
    },
    {
      "regex": "(?<=\\w)::[Pp]atch::\\w+$",
      "exceptionStackTrace": null,
      "matches": [
        "::patch::eVil",
        "::patch::EVIL",
        "::patch::ev_il",
        "::patch::ev il",
        "::patch::ev4il",
        "::patch::e",
        "::patch:: ",
        "::patch::6",
        "::patch::_",
        "::patch::",
        "::aatch::evil",
        "::Patch::evil",
        "::Aatch::evil",
        "::patch::evil"
      ]
    },
    {
      "regex": "status:\\s+OK-UNTIL (\\d{4})(\\d{2})(\\d{2})\\d{6}",
      "exceptionStackTrace": null,
      "matches": [
        "status: OK-UNTIL 000000000000000",
        "status: OK-UNTIL 0000000000000",
        "status:  OK-UNTIL 00000000000000",
        "status:OK-UNTIL 00000000000000",
        "status: OK-UNTIL 00000000000000"
      ]
    },
    {
      "regex": "\\.[^.]+$",
      "exceptionStackTrace": null,
      "matches": [
        "..",
        ".eVil",
        ".EVIL",
        ".ev_il",
        ".ev il",
        ".ev4il",
        ".e",
        ". ",
        ".6",
        "._",
        ".",
        ".evil"
      ]
    },
    {
      "regex": "(.*)@(.*?)(?: -> (file\\:\\/\\/\\/\\S*))?\\:(\\d*)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil@evil -> file:///evil:00",
        "evil@evil -> file:///evil:",
        "evil@evil -> file:///evil -> file:///evil:0",
        "evil@evil:0",
        "evil@evil -> file:///@:0",
        "evil@evil -> file:///>:0",
        "evil@evil -> file:///::0",
        "evil@evil -> file:////:0",
        "evil@evil -> file:///-:0",
        "evil@evil -> file:///eVil:0",
        "evil@evil -> file:///EVIL:0",
        "evil@evil -> file:///ev_il:0",
        "evil@evil -> file:///ev il:0",
        "evil@evil -> file:///ev4il:0",
        "evil@evil -> file:///e:0",
        "evil@evil -> file:/// :0",
        "evil@evil -> file:///6:0",
        "evil@evil -> file:///_:0",
        "evil@evil -> file:///:0",
        "evil@@ -> file:///evil:0",
        "evil@> -> file:///evil:0",
        "evil@: -> file:///evil:0",
        "evil@/ -> file:///evil:0",
        "evil@- -> file:///evil:0",
        "evil@eVil -> file:///evil:0",
        "evil@EVIL -> file:///evil:0",
        "evil@ev_il -> file:///evil:0",
        "evil@ev il -> file:///evil:0",
        "evil@ev4il -> file:///evil:0",
        "evil@e -> file:///evil:0",
        "evil@  -> file:///evil:0",
        "evil@6 -> file:///evil:0",
        "evil@_ -> file:///evil:0",
        "evil@ -> file:///evil:0",
        "@@evil -> file:///evil:0",
        ">@evil -> file:///evil:0",
        ":@evil -> file:///evil:0",
        "/@evil -> file:///evil:0",
        "-@evil -> file:///evil:0",
        "eVil@evil -> file:///evil:0",
        "EVIL@evil -> file:///evil:0",
        "ev_il@evil -> file:///evil:0",
        "ev il@evil -> file:///evil:0",
        "ev4il@evil -> file:///evil:0",
        "e@evil -> file:///evil:0",
        " @evil -> file:///evil:0",
        "6@evil -> file:///evil:0",
        "_@evil -> file:///evil:0",
        "@evil -> file:///evil:0",
        "@:",
        "evil@evil -> file:///evil:0"
      ]
    },
    {
      "regex": "<(exif:|\\?xpacket)",
      "exceptionStackTrace": null,
      "matches": ["<?xpacket", "<exif:"]
    },
    { "regex": "x\\s#2", "exceptionStackTrace": null, "matches": ["x #2"] },
    {
      "regex": "^whistle\\.[a-z\\d_\\-]+",
      "exceptionStackTrace": null,
      "matches": [
        "whistle..",
        "whistle.-",
        "whistle.eVil",
        "whistle.EVIL",
        "whistle.ev_il",
        "whistle.ev il",
        "whistle.ev4il",
        "whistle.e",
        "whistle. ",
        "whistle.6",
        "whistle._",
        "whistle.",
        "whistle.evil"
      ]
    },
    {
      "regex": "^([\\d]+):",
      "exceptionStackTrace": null,
      "matches": ["00:", ":", "0:"]
    },
    {
      "regex": "<table.*</TABLE>",
      "exceptionStackTrace": null,
      "matches": [
        "<table></TABLE>",
        "<table<</TABLE>",
        "<table/</TABLE>",
        "<tableeVil</TABLE>",
        "<tableEVIL</TABLE>",
        "<tableev_il</TABLE>",
        "<tableev il</TABLE>",
        "<tableev4il</TABLE>",
        "<tablee</TABLE>",
        "<table </TABLE>",
        "<table6</TABLE>",
        "<table_</TABLE>",
        "<table</TABLE>",
        "<tableevil</TABLE>"
      ]
    },
    {
      "regex": "\\d+\\.$",
      "exceptionStackTrace": null,
      "matches": ["00.", ".", "0."]
    },
    {
      "regex": "(^|[^0-9A-Za-z\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u024f\u0400-\u0481\u0483-\u0487\u048a-\u0527\u1e00-\u1eff\u2c60-\u2c7f\u2de0-\u2dff\ua640-\ua66f\ua674-\ua67d\ua67f-\ua697\ua69f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua7ff])((?:[1I][\\s\\xa0]*(?:\u043a\u043d\u0438\u0433\u0430[\\s\\xa0]*\u0421\u0430\u043c\u043e\u0438\u043b\u043e\u0432\u0430|\u0421\u0430\u043c\u0443\u0438\u043b)|1Sam|[1I]\\.[\\s\\xa0]*(?:\u043a\u043d\u0438\u0433\u0430[\\s\\xa0]*\u0421\u0430\u043c\u043e\u0438\u043b\u043e\u0432\u0430|\u0421\u0430\u043c\u0443\u0438\u043b)|\u041f\u0440\u0432[\u0430\u043e][\\s\\xa0]*(?:\u043a\u043d\u0438\u0433\u0430[\\s\\xa0]*\u0421\u0430\u043c\u043e\u0438\u043b\u043e\u0432\u0430|\u0421\u0430\u043c\u0443\u0438\u043b)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 160"
      },
      "matches": []
    },
    {
      "regex": "coverage: (.*)\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^\\[.*\\]|\\{.*\\}$",
      "exceptionStackTrace": null,
      "matches": [
        "{}}",
        "{{}",
        "{]}",
        "{[}",
        "{eVil}",
        "{EVIL}",
        "{ev_il}",
        "{ev il}",
        "{ev4il}",
        "{e}",
        "{ }",
        "{6}",
        "{_}",
        "[}]",
        "[{]",
        "[]]",
        "[[]",
        "[eVil]",
        "[EVIL]",
        "[ev_il]",
        "[ev il]",
        "[ev4il]",
        "[e]",
        "[ ]",
        "[6]",
        "[_]",
        "{}",
        "[]",
        "{evil}",
        "[evil]"
      ]
    },
    {
      "regex": "0\\n|0.0\\n|0.68007237|3.7269595\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": ",w,h|,h,w",
      "exceptionStackTrace": null,
      "matches": [",h,w", ",w,h"]
    },
    {
      "regex": "[^-a-z ]",
      "exceptionStackTrace": null,
      "matches": ["a", "0", "-", " ", "A"]
    },
    {
      "regex": "[^\\s\"]+|(?<!\\\\)\".*?(?<!\\\\)\"",
      "exceptionStackTrace": null,
      "matches": [
        "\"\\\"",
        "\"\"\"",
        "\"eVil\"",
        "\"EVIL\"",
        "\"ev_il\"",
        "\"ev il\"",
        "\"ev4il\"",
        "\"e\"",
        "\" \"",
        "\"6\"",
        "\"_\"",
        "\\",
        "\"",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "\"\"",
        "\"evil\"",
        "evil"
      ]
    },
    {
      "regex": "(?-u)[\\xFF]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad inline flags: cannot turn off flags 'a', 'u' and 'L'"
      },
      "matches": []
    },
    { "regex": "$/(?!\\Z)", "exceptionStackTrace": null, "matches": ["/"] },
    {
      "regex": "^(?:SGI-B-1.0)",
      "exceptionStackTrace": null,
      "matches": ["SGI-B-1A0", "SGI-B-100", "SGI-B-1-0", "SGI-B-1 0", "SGI-B-1a0"]
    },
    {
      "regex": "\\s+#.*$",
      "exceptionStackTrace": null,
      "matches": [
        " ##",
        " #eVil",
        " #EVIL",
        " #ev_il",
        " #ev il",
        " #ev4il",
        " #e",
        " # ",
        " #6",
        " #_",
        "  #evil",
        "#evil",
        " #",
        " #evil"
      ]
    },
    {
      "regex": "^:BLN[0-9]     :(.*)",
      "exceptionStackTrace": null,
      "matches": [
        ":BLN0     ::",
        ":BLN0     :eVil",
        ":BLN0     :EVIL",
        ":BLN0     :ev_il",
        ":BLN0     :ev il",
        ":BLN0     :ev4il",
        ":BLN0     :e",
        ":BLN0     : ",
        ":BLN0     :6",
        ":BLN0     :_",
        ":BLN0     :",
        ":BLN0     :evil"
      ]
    },
    {
      "regex": "(-?[\\.0-9]+)([a-z]*)",
      "exceptionStackTrace": null,
      "matches": [
        "-.eVil",
        "-.EVIL",
        "-.ev_il",
        "-.ev il",
        "-.ev4il",
        "-.e",
        "-. ",
        "-.6",
        "-._",
        "-.",
        "-..evil",
        "-evil",
        "-0evil",
        "--.evil",
        ".evil",
        ".",
        "-.evil"
      ]
    },
    { "regex": "triple", "exceptionStackTrace": null, "matches": ["triple"] },
    {
      "regex": "\\x{200B}",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "incomplete escape \\x"
      },
      "matches": []
    },
    {
      "regex": "<script(\\s)*>(\\S|\\s)+<\\/script>",
      "exceptionStackTrace": null,
      "matches": [
        "<script >aa</script>",
        "<script ></script>",
        "<script >_</script>",
        "<script >A</script>",
        "<script >></script>",
        "<script ><</script>",
        "<script >0</script>",
        "<script >/</script>",
        "<script  >a</script>",
        "<script> </script>",
        "<script>a</script>",
        "<script > </script>",
        "<script >a</script>"
      ]
    },
    {
      "regex": "^#(REQUIRED|IMPLIED)$",
      "exceptionStackTrace": null,
      "matches": ["#IMPLIED", "#REQUIRED"]
    },
    {
      "regex": "<ContactList ",
      "exceptionStackTrace": null,
      "matches": ["<ContactList "]
    },
    {
      "regex": "^(\\w+): ",
      "exceptionStackTrace": null,
      "matches": [
        "eVil: ",
        "EVIL: ",
        "ev_il: ",
        "ev il: ",
        "ev4il: ",
        "e: ",
        " : ",
        "6: ",
        "_: ",
        ": ",
        "evil: "
      ]
    },
    {
      "regex": "\\$([a-z_][a-z0-9_]+)",
      "exceptionStackTrace": null,
      "matches": [
        "$_$",
        "$_eVil",
        "$_EVIL",
        "$_ev_il",
        "$_ev il",
        "$_ev4il",
        "$_e",
        "$_ ",
        "$_6",
        "$__",
        "$_",
        "$aevil",
        "$_evil"
      ]
    },
    {
      "regex": "([^\\$\\w\\d])WwWWWwW([^\\w\\d])",
      "exceptionStackTrace": null,
      "matches": [
        " WwWWWwWa",
        " WwWWWwW_",
        " WwWWWwWA",
        " WwWWWwW0",
        " WwWWWwW$",
        "aWwWWWwW ",
        "_WwWWWwW ",
        "AWwWWWwW ",
        "0WwWWWwW ",
        "$WwWWWwW ",
        " WwWWWwW "
      ]
    },
    {
      "regex": "\\((.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "((",
        "(eVil",
        "(EVIL",
        "(ev_il",
        "(ev il",
        "(ev4il",
        "(e",
        "( ",
        "(6",
        "(_",
        "(",
        "(evil"
      ]
    },
    {
      "regex": "^[a-zA-Z0-9$].*",
      "exceptionStackTrace": null,
      "matches": [
        "$$",
        "$eVil",
        "$EVIL",
        "$ev_il",
        "$ev il",
        "$ev4il",
        "$e",
        "$ ",
        "$6",
        "$_",
        "aevil",
        "Aevil",
        "0evil",
        "$",
        "$evil"
      ]
    },
    {
      "regex": "^=head1\\s*NAME",
      "exceptionStackTrace": null,
      "matches": ["=head1  NAME", "=head1NAME", "=head1 NAME"]
    },
    {
      "regex": "maxBuffer exceeded",
      "exceptionStackTrace": null,
      "matches": ["maxBuffer exceeded"]
    },
    {
      "regex": "--+",
      "exceptionStackTrace": null,
      "matches": ["---", "-", "--"]
    },
    {
      "regex": "^[{]\\d+[}]$",
      "exceptionStackTrace": null,
      "matches": ["{00}", "{}", "{0}"]
    },
    {
      "regex": "Missing translation file",
      "exceptionStackTrace": null,
      "matches": ["Missing translation file"]
    },
    {
      "regex": "\\{@link (.*?)\\}",
      "exceptionStackTrace": null,
      "matches": [
        "{@link }}",
        "{@link {}",
        "{@link @}",
        "{@link eVil}",
        "{@link EVIL}",
        "{@link ev_il}",
        "{@link ev il}",
        "{@link ev4il}",
        "{@link e}",
        "{@link  }",
        "{@link 6}",
        "{@link _}",
        "{@link }",
        "{@link evil}"
      ]
    },
    {
      "regex": "class\\s+([a-zA-Z0-9_]+)\\s+extends\\s+[\\\\A-Za-z0-9_]*Facade",
      "exceptionStackTrace": null,
      "matches": [
        "class evil extends \\Facade",
        "class evil extends eVilFacade",
        "class evil extends EVILFacade",
        "class evil extends ev_ilFacade",
        "class evil extends ev ilFacade",
        "class evil extends ev4ilFacade",
        "class evil extends eFacade",
        "class evil extends  Facade",
        "class evil extends 6Facade",
        "class evil extends _Facade",
        "class evil extends  evilFacade",
        "class evil extendsevilFacade",
        "class evil  extends evilFacade",
        "class evilextends evilFacade",
        "class \\ extends evilFacade",
        "class eVil extends evilFacade",
        "class EVIL extends evilFacade",
        "class ev_il extends evilFacade",
        "class ev il extends evilFacade",
        "class ev4il extends evilFacade",
        "class e extends evilFacade",
        "class   extends evilFacade",
        "class 6 extends evilFacade",
        "class _ extends evilFacade",
        "class  extends evilFacade",
        "class  evil extends evilFacade",
        "classevil extends evilFacade",
        "class evil extends Facade",
        "class evil extends evilFacade"
      ]
    },
    { "regex": "parent\\.", "exceptionStackTrace": null, "matches": ["parent."] },
    {
      "regex": "unit_duration",
      "exceptionStackTrace": null,
      "matches": ["unit_duration"]
    },
    {
      "regex": "\\[\\[IF (.*?)\\]\\](.*?)\\[\\[ENDIF\\]\\]",
      "exceptionStackTrace": null,
      "matches": [
        "[[IF evil]]][[ENDIF]]",
        "[[IF evil]][[[ENDIF]]",
        "[[IF evil]]eVil[[ENDIF]]",
        "[[IF evil]]EVIL[[ENDIF]]",
        "[[IF evil]]ev_il[[ENDIF]]",
        "[[IF evil]]ev il[[ENDIF]]",
        "[[IF evil]]ev4il[[ENDIF]]",
        "[[IF evil]]e[[ENDIF]]",
        "[[IF evil]] [[ENDIF]]",
        "[[IF evil]]6[[ENDIF]]",
        "[[IF evil]]_[[ENDIF]]",
        "[[IF evil]][[ENDIF]]",
        "[[IF ]]]evil[[ENDIF]]",
        "[[IF []]evil[[ENDIF]]",
        "[[IF eVil]]evil[[ENDIF]]",
        "[[IF EVIL]]evil[[ENDIF]]",
        "[[IF ev_il]]evil[[ENDIF]]",
        "[[IF ev il]]evil[[ENDIF]]",
        "[[IF ev4il]]evil[[ENDIF]]",
        "[[IF e]]evil[[ENDIF]]",
        "[[IF  ]]evil[[ENDIF]]",
        "[[IF 6]]evil[[ENDIF]]",
        "[[IF _]]evil[[ENDIF]]",
        "[[IF ]]evil[[ENDIF]]",
        "[[IF ]][[ENDIF]]",
        "[[IF evil]]evil[[ENDIF]]"
      ]
    },
    {
      "regex": "any(\\s)?time|whenever",
      "exceptionStackTrace": null,
      "matches": ["any  time", "anytime", "whenever", "any time"]
    },
    {
      "regex": "import sys",
      "exceptionStackTrace": null,
      "matches": ["import sys"]
    },
    {
      "regex": "^TeaPart::GlobalFunc$",
      "exceptionStackTrace": null,
      "matches": ["TeaPart::GlobalFunc"]
    },
    { "regex": "^$tmp$", "exceptionStackTrace": null, "matches": ["tmp"] },
    {
      "regex": "\\A--chdir-first\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "([^\\s=]+)=\\\"?(.+?)\\\"?$",
      "exceptionStackTrace": null,
      "matches": [
        "evil=\"evil\"\"",
        "evil=\"evil",
        "evil=\"=\"",
        "evil=\"\"\"",
        "evil=\"eVil\"",
        "evil=\"EVIL\"",
        "evil=\"ev_il\"",
        "evil=\"ev il\"",
        "evil=\"ev4il\"",
        "evil=\"e\"",
        "evil=\" \"",
        "evil=\"6\"",
        "evil=\"_\"",
        "evil=\"\"",
        "evil=\"\"evil\"",
        "evil=evil\"",
        "==\"evil\"",
        "\"=\"evil\"",
        "eVil=\"evil\"",
        "EVIL=\"evil\"",
        "ev_il=\"evil\"",
        "ev il=\"evil\"",
        "ev4il=\"evil\"",
        "e=\"evil\"",
        " =\"evil\"",
        "6=\"evil\"",
        "_=\"evil\"",
        "=\"evil\"",
        "evil=evil",
        "evil=\"evil\""
      ]
    },
    {
      "regex": "^'.*;[^']*$",
      "exceptionStackTrace": null,
      "matches": [
        "'evil;;",
        "'evil;'",
        "'evil;eVil",
        "'evil;EVIL",
        "'evil;ev_il",
        "'evil;ev il",
        "'evil;ev4il",
        "'evil;e",
        "'evil; ",
        "'evil;6",
        "'evil;_",
        "'evil;",
        "';;evil",
        "'';evil",
        "'eVil;evil",
        "'EVIL;evil",
        "'ev_il;evil",
        "'ev il;evil",
        "'ev4il;evil",
        "'e;evil",
        "' ;evil",
        "'6;evil",
        "'_;evil",
        "';evil",
        "';",
        "'evil;evil"
      ]
    },
    { "regex": "GPL", "exceptionStackTrace": null, "matches": ["GPL"] },
    {
      "regex": "instance\\('(.*)'\\)",
      "exceptionStackTrace": null,
      "matches": [
        "instance(')')",
        "instance('(')",
        "instance(''')",
        "instance('eVil')",
        "instance('EVIL')",
        "instance('ev_il')",
        "instance('ev il')",
        "instance('ev4il')",
        "instance('e')",
        "instance(' ')",
        "instance('6')",
        "instance('_')",
        "instance('')",
        "instance('evil')"
      ]
    },
    {
      "regex": "gem ('|\")graphiql-rails('|\"), :?group(:| =>) :development",
      "exceptionStackTrace": null,
      "matches": [
        "gem 'graphiql-rails', ::group: :development",
        "gem \"graphiql-rails', group: :development",
        "gem 'graphiql-rails\", group: :development",
        "gem 'graphiql-rails', group => :development",
        "gem 'graphiql-rails', group: :development",
        "gem \"graphiql-rails', :group: :development",
        "gem 'graphiql-rails\", :group: :development",
        "gem 'graphiql-rails', :group => :development",
        "gem 'graphiql-rails', :group: :development"
      ]
    },
    {
      "regex": "((?:\\$|)[^=]+)=([^=]+)",
      "exceptionStackTrace": null,
      "matches": [
        "$evil==",
        "$evil=$",
        "$evil=eVil",
        "$evil=EVIL",
        "$evil=ev_il",
        "$evil=ev il",
        "$evil=ev4il",
        "$evil=e",
        "$evil= ",
        "$evil=6",
        "$evil=_",
        "$evil=",
        "$==evil",
        "$$=evil",
        "$eVil=evil",
        "$EVIL=evil",
        "$ev_il=evil",
        "$ev il=evil",
        "$ev4il=evil",
        "$e=evil",
        "$ =evil",
        "$6=evil",
        "$_=evil",
        "$=evil",
        "$$evil=evil",
        "evil=evil",
        "$evil=evil"
      ]
    },
    {
      "regex": "^(.*?)\\]\\]>",
      "exceptionStackTrace": null,
      "matches": [
        "]]]>",
        ">]]>",
        "eVil]]>",
        "EVIL]]>",
        "ev_il]]>",
        "ev il]]>",
        "ev4il]]>",
        "e]]>",
        " ]]>",
        "6]]>",
        "_]]>",
        "]]>",
        "evil]]>"
      ]
    },
    {
      "regex": "<alexbooker@fastmail.im>",
      "exceptionStackTrace": null,
      "matches": [
        "<alexbooker@fastmailAim>",
        "<alexbooker@fastmail@im>",
        "<alexbooker@fastmail>im>",
        "<alexbooker@fastmail<im>",
        "<alexbooker@fastmail0im>",
        "<alexbooker@fastmail im>",
        "<alexbooker@fastmailaim>"
      ]
    },
    {
      "regex": "\\A0x\\S{16}\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "^\\s+\\|-+\\|\\s*$",
      "exceptionStackTrace": null,
      "matches": [" |-|  ", " |--| ", " || ", "  |-| ", "|-| ", " |-|", " |-| "]
    },
    {
      "regex": "^I should be able to see the selftext$",
      "exceptionStackTrace": null,
      "matches": ["I should be able to see the selftext"]
    },
    {
      "regex": "\\?id=(\\d+)",
      "exceptionStackTrace": null,
      "matches": ["?id=00", "?id=", "?id=0"]
    },
    {
      "regex": "^@_parameter_",
      "exceptionStackTrace": null,
      "matches": ["@_parameter_"]
    },
    { "regex": "(?:^d|E)", "exceptionStackTrace": null, "matches": ["E", "d"] },
    {
      "regex": "needs to be a number",
      "exceptionStackTrace": null,
      "matches": ["needs to be a number"]
    },
    {
      "regex": "Nan::Persistent<Object>",
      "exceptionStackTrace": null,
      "matches": ["Nan::Persistent<Object>"]
    },
    {
      "regex": "facade(\\\\|\\/)lang",
      "exceptionStackTrace": null,
      "matches": ["facade/lang", "facade\\lang"]
    },
    {
      "regex": "(\\w+) \\s* \"&\\# ([^\"]+) \"",
      "exceptionStackTrace": null,
      "matches": [
        "evil   \"&# & \"",
        "evil   \"&# # \"",
        "evil   \"&# \" \"",
        "evil   \"&# eVil \"",
        "evil   \"&# EVIL \"",
        "evil   \"&# ev_il \"",
        "evil   \"&# ev il \"",
        "evil   \"&# ev4il \"",
        "evil   \"&# e \"",
        "evil   \"&#   \"",
        "evil   \"&# 6 \"",
        "evil   \"&# _ \"",
        "evil   \"&#  \"",
        "evil    \"&# evil \"",
        "eVil   \"&# evil \"",
        "EVIL   \"&# evil \"",
        "ev_il   \"&# evil \"",
        "ev il   \"&# evil \"",
        "ev4il   \"&# evil \"",
        "e   \"&# evil \"",
        "    \"&# evil \"",
        "6   \"&# evil \"",
        "_   \"&# evil \"",
        "   \"&# evil \"",
        "evil  \"&# evil \"",
        "evil   \"&# evil \""
      ]
    },
    {
      "regex": "^\\[NodeUtil #1\\] The command '.*shutdown' was rejected with error:",
      "exceptionStackTrace": null,
      "matches": [
        "[NodeUtil #1] The command ']shutdown' was rejected with error:",
        "[NodeUtil #1] The command '[shutdown' was rejected with error:",
        "[NodeUtil #1] The command ':shutdown' was rejected with error:",
        "[NodeUtil #1] The command ''shutdown' was rejected with error:",
        "[NodeUtil #1] The command '#shutdown' was rejected with error:",
        "[NodeUtil #1] The command 'eVilshutdown' was rejected with error:",
        "[NodeUtil #1] The command 'EVILshutdown' was rejected with error:",
        "[NodeUtil #1] The command 'ev_ilshutdown' was rejected with error:",
        "[NodeUtil #1] The command 'ev ilshutdown' was rejected with error:",
        "[NodeUtil #1] The command 'ev4ilshutdown' was rejected with error:",
        "[NodeUtil #1] The command 'eshutdown' was rejected with error:",
        "[NodeUtil #1] The command ' shutdown' was rejected with error:",
        "[NodeUtil #1] The command '6shutdown' was rejected with error:",
        "[NodeUtil #1] The command '_shutdown' was rejected with error:",
        "[NodeUtil #1] The command 'shutdown' was rejected with error:",
        "[NodeUtil #1] The command 'evilshutdown' was rejected with error:"
      ]
    },
    {
      "regex": "[.+*?|^$[\\]{}()\\\\]",
      "exceptionStackTrace": null,
      "matches": [
        "}",
        "|",
        "{",
        "^",
        "]",
        "[",
        "?",
        ".",
        "+",
        "*",
        ")",
        "(",
        "$",
        "\\"
      ]
    },
    {
      "regex": "Stable tag:(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "Stable tag::",
        "Stable tag:eVil",
        "Stable tag:EVIL",
        "Stable tag:ev_il",
        "Stable tag:ev il",
        "Stable tag:ev4il",
        "Stable tag:e",
        "Stable tag: ",
        "Stable tag:6",
        "Stable tag:_",
        "Stable tag:",
        "Stable tag:evil"
      ]
    },
    {
      "regex": "^(.).{6}\\s?(.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "aaaaaaa eVil",
        "aaaaaaa EVIL",
        "aaaaaaa ev_il",
        "aaaaaaa ev il",
        "aaaaaaa ev4il",
        "aaaaaaa e",
        "aaaaaaa  ",
        "aaaaaaa 6",
        "aaaaaaa _",
        "aaaaaaa ",
        "aaaaaaa  evil",
        "aaaaaaaa evil",
        "aaaaaa evil",
        "a_aaaaa evil",
        "aAaaaaa evil",
        "a0aaaaa evil",
        "a aaaaa evil",
        "_aaaaaa evil",
        "Aaaaaaa evil",
        "0aaaaaa evil",
        " aaaaaa evil",
        "aaaaaaaevil",
        "aaaaaaa evil"
      ]
    },
    {
      "regex": "RawSerializedDatabase\\{p: \\w+, len: \\d+\\}",
      "exceptionStackTrace": null,
      "matches": [
        "RawSerializedDatabase{p: evil, len: 00}",
        "RawSerializedDatabase{p: evil, len: }",
        "RawSerializedDatabase{p: eVil, len: 0}",
        "RawSerializedDatabase{p: EVIL, len: 0}",
        "RawSerializedDatabase{p: ev_il, len: 0}",
        "RawSerializedDatabase{p: ev il, len: 0}",
        "RawSerializedDatabase{p: ev4il, len: 0}",
        "RawSerializedDatabase{p: e, len: 0}",
        "RawSerializedDatabase{p:  , len: 0}",
        "RawSerializedDatabase{p: 6, len: 0}",
        "RawSerializedDatabase{p: _, len: 0}",
        "RawSerializedDatabase{p: , len: 0}",
        "RawSerializedDatabase{p: evil, len: 0}"
      ]
    },
    { "regex": "cdb=true", "exceptionStackTrace": null, "matches": ["cdb=true"] },
    {
      "regex": "\\(.*\\)\\/",
      "exceptionStackTrace": null,
      "matches": [
        "(/)/",
        "())/",
        "(()/",
        "(eVil)/",
        "(EVIL)/",
        "(ev_il)/",
        "(ev il)/",
        "(ev4il)/",
        "(e)/",
        "( )/",
        "(6)/",
        "(_)/",
        "()/",
        "(evil)/"
      ]
    },
    {
      "regex": "^I want know if this element exists$",
      "exceptionStackTrace": null,
      "matches": ["I want know if this element exists"]
    },
    {
      "regex": "\n            postfix \\/ ([^\\[]+)   # cleanup, bounce, ..\n            \\[\\d+\\]:\\s+           # some process id\n            ([A-Z0-9]+):\\s+       # the queue id\n            (.+)                  # rest of the message\n        ",
      "exceptionStackTrace": null,
      "matches": [
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            ]                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            [                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            :                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            /                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            ,                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            #                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            eVil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            EVIL                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            ev_il                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            ev il                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            ev4il                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            e                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n                               # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            6                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            _                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n                              # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:         # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:       # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:            # some process id\n            eVil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:            # some process id\n            EVIL:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:            # some process id\n            ev_il:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:            # some process id\n            ev il:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:            # some process id\n            ev4il:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:            # some process id\n            e:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:            # some process id\n             :        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:            # some process id\n            6:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:            # some process id\n            _:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:            # some process id\n            :        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:             # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:           # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [00]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            []:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, a]\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, a[\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aA\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, a:\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, a0\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, a/\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, a,\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, a#\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, a \n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, ]a\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, [a\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, Aa\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, :a\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, 0a\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, /a\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, ,a\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, #a\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce,  a\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / ]   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / [   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / :   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / /   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / ,   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / #   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / eVil   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / EVIL   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / ev_il   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / ev il   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / ev4il   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / e   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix /     # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / 6   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / _   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix /    # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        ",
        "\n            postfix / evil   # cleanup, bounce, aa\n            [0]:            # some process id\n            evil:        # the queue id\n            evil                  # rest of the message\n        "
      ]
    },
    {
      "regex": "\\[\\d*]$",
      "exceptionStackTrace": null,
      "matches": ["[00]", "[]", "[0]"]
    },
    {
      "regex": "^(columns|database|drop_col|dump|indexes|descidx|move_col|sql|status|table|trigger|variables|view|view_trigger)$",
      "exceptionStackTrace": null,
      "matches": [
        "view_trigger",
        "view",
        "variables",
        "trigger",
        "table",
        "status",
        "sql",
        "move_col",
        "descidx",
        "indexes",
        "dump",
        "drop_col",
        "database",
        "columns"
      ]
    },
    {
      "regex": "[^/]lib/file.rb",
      "exceptionStackTrace": null,
      "matches": [
        "alib/fileArb",
        "alib/file0rb",
        "alib/file/rb",
        "alib/file rb",
        "Alib/filearb",
        "0lib/filearb",
        "/lib/filearb",
        " lib/filearb",
        "alib/filearb"
      ]
    },
    {
      "regex": "element\\sbrowser",
      "exceptionStackTrace": null,
      "matches": ["element browser"]
    },
    {
      "regex": "(FH.)(WH.)(OH.)(MH.)(SH.)(LH.)",
      "exceptionStackTrace": null,
      "matches": [
        "FHaWHaOHaMHaSHaLH_",
        "FHaWHaOHaMHaSHaLHA",
        "FHaWHaOHaMHaSHaLH0",
        "FHaWHaOHaMHaSHaLH ",
        "FHaWHaOHaMHaSH_LHa",
        "FHaWHaOHaMHaSHALHa",
        "FHaWHaOHaMHaSH0LHa",
        "FHaWHaOHaMHaSH LHa",
        "FHaWHaOHaMH_SHaLHa",
        "FHaWHaOHaMHASHaLHa",
        "FHaWHaOHaMH0SHaLHa",
        "FHaWHaOHaMH SHaLHa",
        "FHaWHaOH_MHaSHaLHa",
        "FHaWHaOHAMHaSHaLHa",
        "FHaWHaOH0MHaSHaLHa",
        "FHaWHaOH MHaSHaLHa",
        "FHaWH_OHaMHaSHaLHa",
        "FHaWHAOHaMHaSHaLHa",
        "FHaWH0OHaMHaSHaLHa",
        "FHaWH OHaMHaSHaLHa",
        "FH_WHaOHaMHaSHaLHa",
        "FHAWHaOHaMHaSHaLHa",
        "FH0WHaOHaMHaSHaLHa",
        "FH WHaOHaMHaSHaLHa",
        "FHaWHaOHaMHaSHaLHa"
      ]
    },
    {
      "regex": "decode\\(\\$params{(.*?)}\\)",
      "exceptionStackTrace": null,
      "matches": [
        "decode($params{}})",
        "decode($params{{})",
        "decode($params{)})",
        "decode($params{(})",
        "decode($params{$})",
        "decode($params{eVil})",
        "decode($params{EVIL})",
        "decode($params{ev_il})",
        "decode($params{ev il})",
        "decode($params{ev4il})",
        "decode($params{e})",
        "decode($params{ })",
        "decode($params{6})",
        "decode($params{_})",
        "decode($params{})",
        "decode($params{evil})"
      ]
    },
    {
      "regex": "(dei:entityregistrantname)",
      "exceptionStackTrace": null,
      "matches": ["dei:entityregistrantname"]
    },
    {
      "regex": "provide a package_version",
      "exceptionStackTrace": null,
      "matches": ["provide a package_version"]
    },
    {
      "regex": "\\ASubObjectPropertyOf",
      "exceptionStackTrace": null,
      "matches": ["SubObjectPropertyOf"]
    },
    {
      "regex": "^Today is: \\w\\w\\w \\d\\d, \\d\\d\\d\\d \\d\\d\\:\\d\\d:\\d\\d$",
      "exceptionStackTrace": null,
      "matches": [
        "Today is: aa_ 00, 0000 00:00:00",
        "Today is: aaA 00, 0000 00:00:00",
        "Today is: aa0 00, 0000 00:00:00",
        "Today is: a_a 00, 0000 00:00:00",
        "Today is: aAa 00, 0000 00:00:00",
        "Today is: a0a 00, 0000 00:00:00",
        "Today is: _aa 00, 0000 00:00:00",
        "Today is: Aaa 00, 0000 00:00:00",
        "Today is: 0aa 00, 0000 00:00:00",
        "Today is: aaa 00, 0000 00:00:00"
      ]
    },
    {
      "regex": "#.begin\nblah\n#.end",
      "exceptionStackTrace": null,
      "matches": [
        "#abegin\nblah\n#Aend",
        "#abegin\nblah\n#0end",
        "#abegin\nblah\n##end",
        "#abegin\nblah\n# end",
        "#Abegin\nblah\n#aend",
        "#0begin\nblah\n#aend",
        "##begin\nblah\n#aend",
        "# begin\nblah\n#aend",
        "#abegin\nblah\n#aend"
      ]
    },
    {
      "regex": "^:(.*?)=(.*$)",
      "exceptionStackTrace": null,
      "matches": [
        ":evil==",
        ":evil=:",
        ":evil=eVil",
        ":evil=EVIL",
        ":evil=ev_il",
        ":evil=ev il",
        ":evil=ev4il",
        ":evil=e",
        ":evil= ",
        ":evil=6",
        ":evil=_",
        ":evil=",
        ":==evil",
        "::=evil",
        ":eVil=evil",
        ":EVIL=evil",
        ":ev_il=evil",
        ":ev il=evil",
        ":ev4il=evil",
        ":e=evil",
        ": =evil",
        ":6=evil",
        ":_=evil",
        ":=evil",
        ":=",
        ":evil=evil"
      ]
    },
    { "regex": "\\.text", "exceptionStackTrace": null, "matches": [".text"] },
    {
      "regex": "^path-to-alias",
      "exceptionStackTrace": null,
      "matches": ["path-to-alias"]
    },
    {
      "regex": "\\.|_|\\/|\\+|\\-",
      "exceptionStackTrace": null,
      "matches": ["-", "+", "/", "_", "."]
    },
    {
      "regex": "\\.(dnd|newick|nh)$",
      "exceptionStackTrace": null,
      "matches": [".nh", ".newick", ".dnd"]
    },
    {
      "regex": "^async\\s+\\(\\)",
      "exceptionStackTrace": null,
      "matches": ["async  ()", "async()", "async ()"]
    },
    {
      "regex": "Received an EOF on transport socket",
      "exceptionStackTrace": null,
      "matches": ["Received an EOF on transport socket"]
    },
    { "regex": "^xls$", "exceptionStackTrace": null, "matches": ["xls"] },
    {
      "regex": "<[=>]?|>=?|\\|\\||&&|[+\\-*\\/=|&^~!]|\\b(?:AND|NOT|OR)\\b",
      "exceptionStackTrace": null,
      "matches": [
        "~",
        "|",
        "^",
        "=",
        "/",
        "-",
        "+",
        "*",
        "&",
        ">==",
        "<>>",
        "<=",
        ">",
        "<",
        "OR",
        "NOT",
        "AND",
        "!",
        "&&",
        "||",
        ">=",
        "<>"
      ]
    },
    {
      "regex": "(?<![<>])(<S>[^<]+<\\/S> (?:<A[^>]*>[^<]+<\\/A>))(?![<>])",
      "exceptionStackTrace": null,
      "matches": [
        "<S>evil</S> <Aevil>></A>",
        "<S>evil</S> <Aevil><</A>",
        "<S>evil</S> <Aevil>/</A>",
        "<S>evil</S> <Aevil>eVil</A>",
        "<S>evil</S> <Aevil>EVIL</A>",
        "<S>evil</S> <Aevil>ev_il</A>",
        "<S>evil</S> <Aevil>ev il</A>",
        "<S>evil</S> <Aevil>ev4il</A>",
        "<S>evil</S> <Aevil>e</A>",
        "<S>evil</S> <Aevil> </A>",
        "<S>evil</S> <Aevil>6</A>",
        "<S>evil</S> <Aevil>_</A>",
        "<S>evil</S> <Aevil></A>",
        "<S>evil</S> <A>>evil</A>",
        "<S>evil</S> <A<>evil</A>",
        "<S>evil</S> <A/>evil</A>",
        "<S>evil</S> <AeVil>evil</A>",
        "<S>evil</S> <AEVIL>evil</A>",
        "<S>evil</S> <Aev_il>evil</A>",
        "<S>evil</S> <Aev il>evil</A>",
        "<S>evil</S> <Aev4il>evil</A>",
        "<S>evil</S> <Ae>evil</A>",
        "<S>evil</S> <A >evil</A>",
        "<S>evil</S> <A6>evil</A>",
        "<S>evil</S> <A_>evil</A>",
        "<S>></S> <Aevil>evil</A>",
        "<S><</S> <Aevil>evil</A>",
        "<S>/</S> <Aevil>evil</A>",
        "<S>eVil</S> <Aevil>evil</A>",
        "<S>EVIL</S> <Aevil>evil</A>",
        "<S>ev_il</S> <Aevil>evil</A>",
        "<S>ev il</S> <Aevil>evil</A>",
        "<S>ev4il</S> <Aevil>evil</A>",
        "<S>e</S> <Aevil>evil</A>",
        "<S> </S> <Aevil>evil</A>",
        "<S>6</S> <Aevil>evil</A>",
        "<S>_</S> <Aevil>evil</A>",
        "<S></S> <Aevil>evil</A>",
        "<S>evil</S> <A>evil</A>",
        "<S>evil</S> <Aevil>evil</A>"
      ]
    },
    {
      "regex": "^(.+?)\\s+(\\d+)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil 00",
        "evil ",
        "evil  0",
        "evil0",
        "eVil 0",
        "EVIL 0",
        "ev_il 0",
        "ev il 0",
        "ev4il 0",
        "e 0",
        "  0",
        "6 0",
        "_ 0",
        " 0",
        "evil 0"
      ]
    },
    {
      "regex": "^(select|option)$",
      "exceptionStackTrace": null,
      "matches": ["option", "select"]
    },
    {
      "regex": "require\\s*(['\"])",
      "exceptionStackTrace": null,
      "matches": ["require '", "require  \"", "require\"", "require \""]
    },
    {
      "regex": "\\s*content-type\\s*:[^;]+;\\s*charset\\s*=\\s*(.*)",
      "exceptionStackTrace": null,
      "matches": [
        " content-type :evil; charset = =",
        " content-type :evil; charset = ;",
        " content-type :evil; charset = :",
        " content-type :evil; charset = -",
        " content-type :evil; charset = eVil",
        " content-type :evil; charset = EVIL",
        " content-type :evil; charset = ev_il",
        " content-type :evil; charset = ev il",
        " content-type :evil; charset = ev4il",
        " content-type :evil; charset = e",
        " content-type :evil; charset =  ",
        " content-type :evil; charset = 6",
        " content-type :evil; charset = _",
        " content-type :evil; charset = ",
        " content-type :evil; charset =  evil",
        " content-type :evil; charset =evil",
        " content-type :evil; charset  = evil",
        " content-type :evil; charset= evil",
        " content-type :evil;  charset = evil",
        " content-type :evil;charset = evil",
        " content-type :=; charset = evil",
        " content-type :;; charset = evil",
        " content-type ::; charset = evil",
        " content-type :-; charset = evil",
        " content-type :eVil; charset = evil",
        " content-type :EVIL; charset = evil",
        " content-type :ev_il; charset = evil",
        " content-type :ev il; charset = evil",
        " content-type :ev4il; charset = evil",
        " content-type :e; charset = evil",
        " content-type : ; charset = evil",
        " content-type :6; charset = evil",
        " content-type :_; charset = evil",
        " content-type :; charset = evil",
        " content-type  :evil; charset = evil",
        " content-type:evil; charset = evil",
        "  content-type :evil; charset = evil",
        "content-type :evil; charset = evil",
        "content-type:evil;charset=",
        " content-type :evil; charset = evil"
      ]
    },
    { "regex": "^-pm", "exceptionStackTrace": null, "matches": ["-pm"] },
    {
      "regex": "render ('|\")(?<template>\\S*)('|\")",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<t"
      },
      "matches": []
    },
    {
      "regex": "media=\"print\"",
      "exceptionStackTrace": null,
      "matches": ["media=\"print\""]
    },
    { "regex": "^dot-", "exceptionStackTrace": null, "matches": ["dot-"] },
    {
      "regex": "(DISTVNAME.*)",
      "exceptionStackTrace": null,
      "matches": [
        "DISTVNAMEeVil",
        "DISTVNAMEEVIL",
        "DISTVNAMEev_il",
        "DISTVNAMEev il",
        "DISTVNAMEev4il",
        "DISTVNAMEe",
        "DISTVNAME ",
        "DISTVNAME6",
        "DISTVNAME_",
        "DISTVNAME",
        "DISTVNAMEevil"
      ]
    },
    {
      "regex": "Bad response status",
      "exceptionStackTrace": null,
      "matches": ["Bad response status"]
    },
    {
      "regex": "\\d+-\\d+",
      "exceptionStackTrace": null,
      "matches": ["0-00", "0-", "00-0", "-0", "0-0"]
    },
    { "regex": "^IFMATCH", "exceptionStackTrace": null, "matches": ["IFMATCH"] },
    {
      "regex": "(?:Map|ListMultimap)<(\\w+),\\s*(\\w+)>",
      "exceptionStackTrace": null,
      "matches": [
        "Map<evil, eVil>",
        "Map<evil, EVIL>",
        "Map<evil, ev_il>",
        "Map<evil, ev il>",
        "Map<evil, ev4il>",
        "Map<evil, e>",
        "Map<evil,  >",
        "Map<evil, 6>",
        "Map<evil, _>",
        "Map<evil, >",
        "Map<evil,  evil>",
        "Map<eVil, evil>",
        "Map<EVIL, evil>",
        "Map<ev_il, evil>",
        "Map<ev il, evil>",
        "Map<ev4il, evil>",
        "Map<e, evil>",
        "Map< , evil>",
        "Map<6, evil>",
        "Map<_, evil>",
        "Map<, evil>",
        "ListMultimap<evil,evil>",
        "Map<evil,evil>",
        "ListMultimap<evil, evil>",
        "Map<evil, evil>"
      ]
    },
    {
      "regex": "(?:^|\\s)(\\d{4})$",
      "exceptionStackTrace": null,
      "matches": ["00000", "000", " 0000", "0000"]
    },
    {
      "regex": "([a-z0-9]{8})\\.(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "00000000..",
        "00000000.eVil",
        "00000000.EVIL",
        "00000000.ev_il",
        "00000000.ev il",
        "00000000.ev4il",
        "00000000.e",
        "00000000. ",
        "00000000.6",
        "00000000._",
        "000000000.evil",
        "0000000.evil",
        "a0000000.evil",
        "00000000.",
        "00000000.evil"
      ]
    },
    {
      "regex": "\\b(?i)(end method|method|define|return|exit|self|import|require|global|throw)\\b",
      "exceptionStackTrace": null,
      "matches": [
        "throw",
        "global",
        "require",
        "import",
        "self",
        "exit",
        "return",
        "define",
        "method",
        "end method"
      ]
    },
    {
      "regex": "A0001|A2005|A3000|E1003|One [A-Z]\\d{4}",
      "exceptionStackTrace": null,
      "matches": [
        "One A00000",
        "One A000",
        "One A0000",
        "E1003",
        "A3000",
        "A2005",
        "A0001"
      ]
    },
    {
      "regex": "[()\\s]",
      "exceptionStackTrace": null,
      "matches": ["(", " ", ")"]
    },
    {
      "regex": "[\\d][\\d_]*(@intSuffixes?)?",
      "exceptionStackTrace": null,
      "matches": [
        "0_@intSuffixes@intSuffixes",
        "0_",
        "0_@intSuffixess",
        "0_@intSuffixe",
        "0__@intSuffixes",
        "0@intSuffixes",
        "00@intSuffixes",
        "0",
        "0_@intSuffixes"
      ]
    },
    { "regex": "clone ", "exceptionStackTrace": null, "matches": ["clone "] },
    {
      "regex": ".*love.*",
      "exceptionStackTrace": null,
      "matches": [
        "evilloveeVil",
        "evilloveEVIL",
        "evilloveev_il",
        "evilloveev il",
        "evilloveev4il",
        "evillovee",
        "evillove ",
        "evillove6",
        "evillove_",
        "evillove",
        "eVilloveevil",
        "EVILloveevil",
        "ev_illoveevil",
        "ev illoveevil",
        "ev4illoveevil",
        "eloveevil",
        " loveevil",
        "6loveevil",
        "_loveevil",
        "loveevil",
        "love",
        "evilloveevil"
      ]
    },
    {
      "regex": "$self->{newline}",
      "exceptionStackTrace": null,
      "matches": ["self->{newline}"]
    },
    {
      "regex": "\\A(?:0b)?[01_]+\\Z",
      "exceptionStackTrace": null,
      "matches": ["0b__", "0b", "0b2", "0b1", "0b0", "0b0b_", "_", "0b_"]
    },
    {
      "regex": "t2.medium",
      "exceptionStackTrace": null,
      "matches": ["t2_medium", "t2Amedium", "t20medium", "t2 medium", "t2amedium"]
    },
    {
      "regex": "^[\\w, ]+$",
      "exceptionStackTrace": null,
      "matches": [
        ",",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "The item attribute is required for",
      "exceptionStackTrace": null,
      "matches": ["The item attribute is required for"]
    },
    {
      "regex": "\\.\\w+\\.gz$",
      "exceptionStackTrace": null,
      "matches": [
        ".eVil.gz",
        ".EVIL.gz",
        ".ev_il.gz",
        ".ev il.gz",
        ".ev4il.gz",
        ".e.gz",
        ". .gz",
        ".6.gz",
        "._.gz",
        "..gz",
        ".evil.gz"
      ]
    },
    {
      "regex": "\\\"\\\"\\\"\\s*\\+\\s*\\\"\\\"\\\"",
      "exceptionStackTrace": null,
      "matches": [
        "\"\"\" +  \"\"\"",
        "\"\"\" +\"\"\"",
        "\"\"\"  + \"\"\"",
        "\"\"\"+ \"\"\"",
        "\"\"\"+\"\"\"",
        "\"\"\" + \"\"\""
      ]
    },
    {
      "regex": "^\\s*\\d{4}-\\d\\d-\\d\\d(T(\\d\\d(:\\d\\d(:\\d\\d(\\.\\d\\d?\\d?)?)?)?)?([\\+\\-]\\d\\d:?\\d\\d)?)?",
      "exceptionStackTrace": null,
      "matches": [
        " 0000-00-00T00:00:00.000-00:00T00:00:00.000-00:00",
        " 0000-00-00",
        " 0000-00-00T00:00:00.000-00:00-00:00",
        " 0000-00-00T00:00:00.000",
        " 0000-00-00T00:00:00.000-00::00",
        " 0000-00-00T00:00:00.000-0000",
        " 0000-00-00T00:00:00.000+00:00",
        " 0000-00-00T00:00:00.00000:00:00.000-00:00",
        " 0000-00-00T-00:00",
        " 0000-00-00T00:00:00.000:00:00.000-00:00",
        " 0000-00-00T00-00:00",
        " 0000-00-00T00:00:00.000:00.000-00:00",
        " 0000-00-00T00:00-00:00",
        " 0000-00-00T00:00:00.000.000-00:00",
        " 0000-00-00T00:00:00-00:00",
        " 0000-00-00T00:00:00.0000-00:00",
        " 0000-00-00T00:00:00.00-00:00",
        " 00000-00-00T00:00:00.000-00:00",
        " 000-00-00T00:00:00.000-00:00",
        "  0000-00-00T00:00:00.000-00:00",
        "0000-00-00T00:00:00.000-00:00",
        "0000-00-00",
        " 0000-00-00T00:00:00.000-00:00"
      ]
    },
    {
      "regex": "^([0-9]+)\\. ",
      "exceptionStackTrace": null,
      "matches": ["00. ", ". ", "0. "]
    },
    { "regex": "PS", "exceptionStackTrace": null, "matches": ["PS"] },
    { "regex": "\\$IFACE", "exceptionStackTrace": null, "matches": ["$IFACE"] },
    {
      "regex": "\n\\-+ Forwarded message \\-+\n",
      "exceptionStackTrace": null,
      "matches": [
        "\n- Forwarded message --\n",
        "\n- Forwarded message \n",
        "\n-- Forwarded message -\n",
        "\n Forwarded message -\n",
        "\n- Forwarded message -\n"
      ]
    },
    {
      "regex": "^(\\s)*\\<\\?(.+)\\?\\>\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        " <?evil?>  ",
        " <?evil?>",
        " <???> ",
        " <?>?> ",
        " <?<?> ",
        " <?eVil?> ",
        " <?EVIL?> ",
        " <?ev_il?> ",
        " <?ev il?> ",
        " <?ev4il?> ",
        " <?e?> ",
        " <? ?> ",
        " <?6?> ",
        " <?_?> ",
        " <??> ",
        "  <?evil?> ",
        "<?evil?> ",
        "<?evil?>",
        " <?evil?> "
      ]
    },
    {
      "regex": "(get|post|is|has|set|update|delete|remove)([A-Z].+)",
      "exceptionStackTrace": null,
      "matches": [
        "getAeVil",
        "getAEVIL",
        "getAev_il",
        "getAev il",
        "getAev4il",
        "getAe",
        "getA ",
        "getA6",
        "getA_",
        "getA",
        "removeAevil",
        "deleteAevil",
        "updateAevil",
        "setAevil",
        "hasAevil",
        "isAevil",
        "postAevil",
        "getAevil"
      ]
    },
    {
      "regex": "^(?P<residence>\\d{10})(?P<origin>\\w{1,3})[-\\ ]?(?P<birthday>\\d{7})[-\\ ]?(?P<validity>\\d{7})[-\\ ]?(?P<checksum>\\d{1})$",
      "exceptionStackTrace": null,
      "matches": [
        "0000000000a 0000000 0000000 00",
        "0000000000a 0000000 0000000 ",
        "0000000000a 0000000 0000000  0",
        "0000000000a 0000000 00000000",
        "0000000000a 0000000 0000000-0",
        "0000000000a 0000000 00000000 0",
        "0000000000a 0000000 000000 0",
        "0000000000a 0000000  0000000 0",
        "0000000000a 00000000000000 0",
        "0000000000a 0000000-0000000 0",
        "0000000000a 00000000 0000000 0",
        "0000000000a 000000 0000000 0",
        "0000000000a  0000000 0000000 0",
        "0000000000a0000000 0000000 0",
        "0000000000a-0000000 0000000 0",
        "0000000000aaaa 0000000 0000000 0",
        "0000000000aaa 0000000 0000000 0",
        "0000000000 0000000 0000000 0",
        "0000000000_ 0000000 0000000 0",
        "0000000000A 0000000 0000000 0",
        "00000000000 0000000 0000000 0",
        "00000000000a 0000000 0000000 0",
        "000000000a 0000000 0000000 0",
        "0000000000a000000000000000",
        "0000000000a 0000000 0000000 0"
      ]
    },
    {
      "regex": "^(?P<vis>(?P<dist>(M|P)?\\d\\d\\d\\d|////)\n                                        (?P<dir>[NSEW][EW]? | NDV)? |\n                                        (?P<distu>(M|P)?(\\d+|\\d\\d?/\\d\\d?|\\d+\\s+\\d/\\d))\n                                        (?P<units>SM|KM|M|U) |\n                                        CAVOK )\\s+",
      "exceptionStackTrace": null,
      "matches": [
        "\n                                        M0  0/0\n                                        SM  ",
        "\n                                        M00 0/0\n                                        SM  ",
        "\n                                        M 0/0\n                                        SM  ",
        "\n                                        M00/000\n                                        SM  ",
        "\n                                        M00/0\n                                        SM  ",
        "\n                                        M000/00\n                                        SM  ",
        "\n                                        M0/00\n                                        SM  ",
        "\n                                        M00\n                                        SM  ",
        "\n                                        M\n                                        SM  ",
        "\n                                        MM0\n                                        SM  ",
        "M0000\n                                        WW    ",
        "M0000\n                                        WW  ",
        "M0000\n                                        WW WW   ",
        "M0000\n                                          ",
        "M0000\n                                        WWW   ",
        "M0000\n                                        W   ",
        "M0000\n                                        WE   ",
        "M0000\n                                        WA   ",
        "M0000\n                                        SW   ",
        "M0000\n                                        NW   ",
        "M0000\n                                        EW   ",
        "M0000\n                                        AW   ",
        "MM0000\n                                        WW   ",
        "0000\n                                        WW   ",
        "\n                                        0 0/0\n                                        SM  ",
        "\n                                        0/0\n                                        SM  ",
        "\n                                        0\n                                        U  ",
        "\n                                        0\n                                        M  ",
        "\n                                        0\n                                        KM  ",
        "\n                                        0\n                                        SM  ",
        "////\n                                          ",
        "0000\n                                          ",
        "\n                                        CAVOK  ",
        "\n                                        P0\n                                        SM  ",
        "\n                                        M0 0/0\n                                        SM  ",
        "\n                                        M00/00\n                                        SM  ",
        "\n                                        M0\n                                        U  ",
        "\n                                        M0\n                                        M  ",
        "\n                                        M0\n                                        KM  ",
        "\n                                        M0\n                                        SM  ",
        "////\n                                        WW   ",
        "P0000\n                                        WW   ",
        "M0000\n                                         NDV  ",
        "M0000\n                                        WW   "
      ]
    },
    {
      "regex": "Incorrect POS",
      "exceptionStackTrace": null,
      "matches": ["Incorrect POS"]
    },
    {
      "regex": "(left|right):\\-?\\d+(\\.\\d+)?(%|px)?",
      "exceptionStackTrace": null,
      "matches": [
        "left:-0.0%%",
        "left:-0.0",
        "left:-0.0.0%",
        "left:-0%",
        "left:-0.00%",
        "left:-0.%",
        "left:-00.0%",
        "left:-.0%",
        "left:--0.0%",
        "left:0.0%",
        "right:0",
        "left:0",
        "right:-0.0%",
        "left:-0.0px",
        "left:-0.0%"
      ]
    },
    {
      "regex": "Failed to execute solr healthcheck: collection parameter is required!",
      "exceptionStackTrace": null,
      "matches": [
        "Failed to execute solr healthcheck: collection parameter is required!"
      ]
    },
    {
      "regex": "video-source\\s*=\\s*['\"](http[^\"']*?)['\"]",
      "exceptionStackTrace": null,
      "matches": [
        "video-source = \"httpevil'",
        "video-source = \"http=\"",
        "video-source = \"http-\"",
        "video-source = \"http'\"",
        "video-source = \"http\"\"",
        "video-source = \"httpeVil\"",
        "video-source = \"httpEVIL\"",
        "video-source = \"httpev_il\"",
        "video-source = \"httpev il\"",
        "video-source = \"httpev4il\"",
        "video-source = \"httpe\"",
        "video-source = \"http \"",
        "video-source = \"http6\"",
        "video-source = \"http_\"",
        "video-source = \"http\"",
        "video-source = 'httpevil\"",
        "video-source =  \"httpevil\"",
        "video-source =\"httpevil\"",
        "video-source  = \"httpevil\"",
        "video-source= \"httpevil\"",
        "video-source=\"http\"",
        "video-source = \"httpevil\""
      ]
    },
    {
      "regex": "^(H1|H2|H3|H4|H5|H6)$",
      "exceptionStackTrace": null,
      "matches": ["H6", "H5", "H4", "H3", "H2", "H1"]
    },
    {
      "regex": "\\[\\[niem\\.\\]\\]",
      "exceptionStackTrace": null,
      "matches": ["[[niem.]]"]
    },
    {
      "regex": ".*[yYMwWDdFEu].*",
      "exceptionStackTrace": null,
      "matches": [
        "evilueVil",
        "eviluEVIL",
        "eviluev_il",
        "eviluev il",
        "eviluev4il",
        "evilue",
        "evilu ",
        "evilu6",
        "evilu_",
        "evilu",
        "evilyevil",
        "evilwevil",
        "evildevil",
        "evilaevil",
        "evilYevil",
        "evilWevil",
        "evilMevil",
        "evilFevil",
        "evilEevil",
        "evilDevil",
        "evilAevil",
        "eViluevil",
        "EVILuevil",
        "ev_iluevil",
        "ev iluevil",
        "ev4iluevil",
        "euevil",
        " uevil",
        "6uevil",
        "_uevil",
        "uevil",
        "u",
        "eviluevil"
      ]
    },
    {
      "regex": "\\bseparator=(\\S+)",
      "exceptionStackTrace": null,
      "matches": [
        "separator==",
        "separator=eVil",
        "separator=EVIL",
        "separator=ev_il",
        "separator=ev il",
        "separator=ev4il",
        "separator=e",
        "separator= ",
        "separator=6",
        "separator=_",
        "separator=",
        "separator=evil"
      ]
    },
    {
      "regex": "$MAIL_PRIVATE_ERROR",
      "exceptionStackTrace": null,
      "matches": ["MAIL_PRIVATE_ERROR"]
    },
    {
      "regex": "KaprekarNumbers",
      "exceptionStackTrace": null,
      "matches": ["KaprekarNumbers"]
    },
    {
      "regex": "^the body\\#read method should return \"(.*?)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "the body#read method should return \"#\"",
        "the body#read method should return \"\"\"",
        "the body#read method should return \"eVil\"",
        "the body#read method should return \"EVIL\"",
        "the body#read method should return \"ev_il\"",
        "the body#read method should return \"ev il\"",
        "the body#read method should return \"ev4il\"",
        "the body#read method should return \"e\"",
        "the body#read method should return \" \"",
        "the body#read method should return \"6\"",
        "the body#read method should return \"_\"",
        "the body#read method should return \"\"",
        "the body#read method should return \"evil\""
      ]
    },
    {
      "regex": "^auto\\/POSIX\\/[^\\/]+\\.al$",
      "exceptionStackTrace": null,
      "matches": [
        "auto/POSIX//.al",
        "auto/POSIX/..al",
        "auto/POSIX/eVil.al",
        "auto/POSIX/EVIL.al",
        "auto/POSIX/ev_il.al",
        "auto/POSIX/ev il.al",
        "auto/POSIX/ev4il.al",
        "auto/POSIX/e.al",
        "auto/POSIX/ .al",
        "auto/POSIX/6.al",
        "auto/POSIX/_.al",
        "auto/POSIX/.al",
        "auto/POSIX/evil.al"
      ]
    },
    {
      "regex": "^[a-z0-9]{8}-[a-z0-9]{4}-[1-5][a-z0-9]{3}-[a-z0-9]{4}-[a-z0-9]{12}$",
      "exceptionStackTrace": null,
      "matches": [
        "00000000-0000-1000-0000-0000000000000",
        "00000000-0000-1000-0000-00000000000",
        "00000000-0000-1000-0000-a00000000000",
        "00000000-0000-1000-00000-000000000000",
        "00000000-0000-1000-000-000000000000",
        "00000000-0000-1000-a000-000000000000",
        "00000000-0000-10000-0000-000000000000",
        "00000000-0000-100-0000-000000000000",
        "00000000-0000-1a00-0000-000000000000",
        "00000000-0000-0000-0000-000000000000",
        "00000000-00000-1000-0000-000000000000",
        "00000000-000-1000-0000-000000000000",
        "00000000-a000-1000-0000-000000000000",
        "000000000-0000-1000-0000-000000000000",
        "0000000-0000-1000-0000-000000000000",
        "a0000000-0000-1000-0000-000000000000",
        "00000000-0000-1000-0000-000000000000"
      ]
    },
    {
      "regex": "\\[([\\S\\s]+?)\\]\\((.+?)\\)",
      "exceptionStackTrace": null,
      "matches": [
        "[evil](])",
        "[evil]([)",
        "[evil]())",
        "[evil](()",
        "[evil](eVil)",
        "[evil](EVIL)",
        "[evil](ev_il)",
        "[evil](ev il)",
        "[evil](ev4il)",
        "[evil](e)",
        "[evil]( )",
        "[evil](6)",
        "[evil](_)",
        "[evil]()",
        "[]](evil)",
        "[[](evil)",
        "[)](evil)",
        "[(](evil)",
        "[eVil](evil)",
        "[EVIL](evil)",
        "[ev_il](evil)",
        "[ev il](evil)",
        "[ev4il](evil)",
        "[e](evil)",
        "[ ](evil)",
        "[6](evil)",
        "[_](evil)",
        "[](evil)",
        "[evil](evil)"
      ]
    },
    {
      "regex": "<\\[1\\]> expected to be empty\\.?$",
      "exceptionStackTrace": null,
      "matches": [
        "<[1]> expected to be empty..",
        "<[1]> expected to be empty",
        "<[1]> expected to be empty."
      ]
    },
    {
      "regex": "^(\\+|00)33\\s?([1-5]|[8-9])(\\s?\\d{2}){4}$",
      "exceptionStackTrace": null,
      "matches": [
        "+33 1 00 00 00 00 00",
        "+33 1 00 00 00",
        "+33 1 000 00 00 00",
        "+33 1 0 00 00 00",
        "+33 1  00 00 00 00",
        "+33 100 00 00 00",
        "+33 0 00 00 00 00",
        "+33  1 00 00 00 00",
        "+331 00 00 00 00",
        "0033100 00 00 00",
        "+33800 00 00 00",
        "+33100 00 00 00",
        "0033 1 00 00 00 00",
        "+33 8 00 00 00 00",
        "+33 1 00 00 00 00"
      ]
    },
    {
      "regex": "ST_intersects\\(ST_SetSRID\\('",
      "exceptionStackTrace": null,
      "matches": ["ST_intersects(ST_SetSRID('"]
    },
    {
      "regex": "attribute[ \\t]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": ".*libnvinfer.so\\.?([0-9.]*).* => (.*)",
      "exceptionStackTrace": null,
      "matches": [
        "evillibnvinferaso..evil => >",
        "evillibnvinferaso..evil => =",
        "evillibnvinferaso..evil => .",
        "evillibnvinferaso..evil => eVil",
        "evillibnvinferaso..evil => EVIL",
        "evillibnvinferaso..evil => ev_il",
        "evillibnvinferaso..evil => ev il",
        "evillibnvinferaso..evil => ev4il",
        "evillibnvinferaso..evil => e",
        "evillibnvinferaso..evil =>  ",
        "evillibnvinferaso..evil => 6",
        "evillibnvinferaso..evil => _",
        "evillibnvinferaso..evil => ",
        "evillibnvinferaso..> => evil",
        "evillibnvinferaso..= => evil",
        "evillibnvinferaso... => evil",
        "evillibnvinferaso..eVil => evil",
        "evillibnvinferaso..EVIL => evil",
        "evillibnvinferaso..ev_il => evil",
        "evillibnvinferaso..ev il => evil",
        "evillibnvinferaso..ev4il => evil",
        "evillibnvinferaso..e => evil",
        "evillibnvinferaso..  => evil",
        "evillibnvinferaso..6 => evil",
        "evillibnvinferaso.._ => evil",
        "evillibnvinferaso.. => evil",
        "evillibnvinferaso.0evil => evil",
        "evillibnvinferaso...evil => evil",
        "evillibnvinferaso.evil => evil",
        "evillibnvinferAso..evil => evil",
        "evillibnvinfer>so..evil => evil",
        "evillibnvinfer=so..evil => evil",
        "evillibnvinfer0so..evil => evil",
        "evillibnvinfer.so..evil => evil",
        "evillibnvinfer so..evil => evil",
        ">libnvinferaso..evil => evil",
        "=libnvinferaso..evil => evil",
        ".libnvinferaso..evil => evil",
        "eVillibnvinferaso..evil => evil",
        "EVILlibnvinferaso..evil => evil",
        "ev_illibnvinferaso..evil => evil",
        "ev illibnvinferaso..evil => evil",
        "ev4illibnvinferaso..evil => evil",
        "elibnvinferaso..evil => evil",
        " libnvinferaso..evil => evil",
        "6libnvinferaso..evil => evil",
        "_libnvinferaso..evil => evil",
        "libnvinferaso..evil => evil",
        "libnvinferaso => ",
        "evillibnvinferaso..evil => evil"
      ]
    },
    {
      "regex": "^url\\s*\\(#(.+)\\)",
      "exceptionStackTrace": null,
      "matches": [
        "url (#))",
        "url (#()",
        "url (##)",
        "url (#eVil)",
        "url (#EVIL)",
        "url (#ev_il)",
        "url (#ev il)",
        "url (#ev4il)",
        "url (#e)",
        "url (# )",
        "url (#6)",
        "url (#_)",
        "url (#)",
        "url  (#evil)",
        "url(#evil)",
        "url (#evil)"
      ]
    },
    {
      "regex": "# noqa(?:: (?P<codes>([A-Z][0-9]+(?:[,\\s]+)?)+))?",
      "exceptionStackTrace": null,
      "matches": [
        "# noqa: A0,: A0,",
        "# noqa: A0,A0,",
        "# noqa: ",
        "# noqa: A0,,",
        "# noqa: A0",
        "# noqa: A0 ",
        "# noqa: A00,",
        "# noqa: A,",
        "# noqa",
        "# noqa: A0,"
      ]
    },
    {
      "regex": "I can break rules, too. Goodbye",
      "exceptionStackTrace": null,
      "matches": [
        "I can break rules, tooA Goodbye",
        "I can break rules, too0 Goodbye",
        "I can break rules, too, Goodbye",
        "I can break rules, too  Goodbye",
        "I can break rules, tooa Goodbye"
      ]
    },
    { "regex": ", |\\)$", "exceptionStackTrace": null, "matches": [")", ", "] },
    {
      "regex": "^$match_attribs{$key}$",
      "exceptionStackTrace": null,
      "matches": ["match_attribs{key}"]
    },
    {
      "regex": "^I '(.+)' the '(.+)' to the path '(.+)' using a wrong private key$",
      "exceptionStackTrace": null,
      "matches": [
        "I 'evil' the 'evil' to the path ''' using a wrong private key",
        "I 'evil' the 'evil' to the path 'eVil' using a wrong private key",
        "I 'evil' the 'evil' to the path 'EVIL' using a wrong private key",
        "I 'evil' the 'evil' to the path 'ev_il' using a wrong private key",
        "I 'evil' the 'evil' to the path 'ev il' using a wrong private key",
        "I 'evil' the 'evil' to the path 'ev4il' using a wrong private key",
        "I 'evil' the 'evil' to the path 'e' using a wrong private key",
        "I 'evil' the 'evil' to the path ' ' using a wrong private key",
        "I 'evil' the 'evil' to the path '6' using a wrong private key",
        "I 'evil' the 'evil' to the path '_' using a wrong private key",
        "I 'evil' the 'evil' to the path '' using a wrong private key",
        "I 'evil' the ''' to the path 'evil' using a wrong private key",
        "I 'evil' the 'eVil' to the path 'evil' using a wrong private key",
        "I 'evil' the 'EVIL' to the path 'evil' using a wrong private key",
        "I 'evil' the 'ev_il' to the path 'evil' using a wrong private key",
        "I 'evil' the 'ev il' to the path 'evil' using a wrong private key",
        "I 'evil' the 'ev4il' to the path 'evil' using a wrong private key",
        "I 'evil' the 'e' to the path 'evil' using a wrong private key",
        "I 'evil' the ' ' to the path 'evil' using a wrong private key",
        "I 'evil' the '6' to the path 'evil' using a wrong private key",
        "I 'evil' the '_' to the path 'evil' using a wrong private key",
        "I 'evil' the '' to the path 'evil' using a wrong private key",
        "I ''' the 'evil' to the path 'evil' using a wrong private key",
        "I 'eVil' the 'evil' to the path 'evil' using a wrong private key",
        "I 'EVIL' the 'evil' to the path 'evil' using a wrong private key",
        "I 'ev_il' the 'evil' to the path 'evil' using a wrong private key",
        "I 'ev il' the 'evil' to the path 'evil' using a wrong private key",
        "I 'ev4il' the 'evil' to the path 'evil' using a wrong private key",
        "I 'e' the 'evil' to the path 'evil' using a wrong private key",
        "I ' ' the 'evil' to the path 'evil' using a wrong private key",
        "I '6' the 'evil' to the path 'evil' using a wrong private key",
        "I '_' the 'evil' to the path 'evil' using a wrong private key",
        "I '' the 'evil' to the path 'evil' using a wrong private key",
        "I 'evil' the 'evil' to the path 'evil' using a wrong private key"
      ]
    },
    {
      "regex": "^text:table-of-content$",
      "exceptionStackTrace": null,
      "matches": ["text:table-of-content"]
    },
    {
      "regex": "unknown code state:",
      "exceptionStackTrace": null,
      "matches": ["unknown code state:"]
    },
    {
      "regex": "Error: That port is already in use",
      "exceptionStackTrace": null,
      "matches": ["Error: That port is already in use"]
    },
    {
      "regex": "https://help.ably.io/error/40400",
      "exceptionStackTrace": null,
      "matches": [
        "https://helpaablyAio/error/40400",
        "https://helpaably:io/error/40400",
        "https://helpaably0io/error/40400",
        "https://helpaably/io/error/40400",
        "https://helpaably io/error/40400",
        "https://helpAablyaio/error/40400",
        "https://help:ablyaio/error/40400",
        "https://help0ablyaio/error/40400",
        "https://help/ablyaio/error/40400",
        "https://help ablyaio/error/40400",
        "https://helpaablyaio/error/40400"
      ]
    },
    {
      "regex": "MSIE\\s+(\\d+\\.\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "MSIE 0.00",
        "MSIE 0.",
        "MSIE 00.0",
        "MSIE .0",
        "MSIE  0.0",
        "MSIE0.0",
        "MSIE 0.0"
      ]
    },
    {
      "regex": "&(\\w)tilde[;,]",
      "exceptionStackTrace": null,
      "matches": ["&atilde;", "&_tilde,", "&Atilde,", "&0tilde,", "&atilde,"]
    },
    { "regex": "(end)$", "exceptionStackTrace": null, "matches": ["end"] },
    {
      "regex": "^test\\/fixtureIncorrectSource.sol:1:1: SyntaxError: Invalid pragma \"contract\"",
      "exceptionStackTrace": null,
      "matches": [
        "test/fixtureIncorrectSourceAsol:1:1: SyntaxError: Invalid pragma \"contract\"",
        "test/fixtureIncorrectSource:sol:1:1: SyntaxError: Invalid pragma \"contract\"",
        "test/fixtureIncorrectSource0sol:1:1: SyntaxError: Invalid pragma \"contract\"",
        "test/fixtureIncorrectSource/sol:1:1: SyntaxError: Invalid pragma \"contract\"",
        "test/fixtureIncorrectSource\"sol:1:1: SyntaxError: Invalid pragma \"contract\"",
        "test/fixtureIncorrectSource sol:1:1: SyntaxError: Invalid pragma \"contract\"",
        "test/fixtureIncorrectSourceasol:1:1: SyntaxError: Invalid pragma \"contract\""
      ]
    },
    {
      "regex": "(\\/\\/)?([^/]+)(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "//evil/",
        "//evileVil",
        "//evilEVIL",
        "//evilev_il",
        "//evilev il",
        "//evilev4il",
        "//evile",
        "//evil ",
        "//evil6",
        "//evil_",
        "///evil",
        "//eVilevil",
        "//EVILevil",
        "//ev_ilevil",
        "//ev ilevil",
        "//ev4ilevil",
        "//eevil",
        "// evil",
        "//6evil",
        "//_evil",
        "//evil",
        "////evilevil",
        "evilevil",
        "evil",
        "//evilevil"
      ]
    },
    {
      "regex": "^https?:\\/\\/twitter\\.com\\/\\w+\\/(?:timelines?|moments?|likes?|lists?)\\/",
      "exceptionStackTrace": null,
      "matches": [
        "https://twitter.com/evil/listss/",
        "https://twitter.com/evil/list/",
        "https://twitter.com/evil/likess/",
        "https://twitter.com/evil/like/",
        "https://twitter.com/evil/momentss/",
        "https://twitter.com/evil/moment/",
        "https://twitter.com/evil/timeliness/",
        "https://twitter.com/evil/timeline/",
        "https://twitter.com/eVil/timelines/",
        "https://twitter.com/EVIL/timelines/",
        "https://twitter.com/ev_il/timelines/",
        "https://twitter.com/ev il/timelines/",
        "https://twitter.com/ev4il/timelines/",
        "https://twitter.com/e/timelines/",
        "https://twitter.com/ /timelines/",
        "https://twitter.com/6/timelines/",
        "https://twitter.com/_/timelines/",
        "https://twitter.com//timelines/",
        "httpss://twitter.com/evil/timelines/",
        "http://twitter.com/evil/timelines/",
        "http://twitter.com/evil/list/",
        "http://twitter.com/evil/like/",
        "http://twitter.com/evil/moment/",
        "http://twitter.com/evil/timeline/",
        "https://twitter.com/evil/lists/",
        "https://twitter.com/evil/likes/",
        "https://twitter.com/evil/moments/",
        "https://twitter.com/evil/timelines/"
      ]
    },
    { "regex": "NOTESTS", "exceptionStackTrace": null, "matches": ["NOTESTS"] },
    {
      "regex": "^I search for the canvas by \"([^\\\"]*)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "I search for the canvas by \"\"\"",
        "I search for the canvas by \"eVil\"",
        "I search for the canvas by \"EVIL\"",
        "I search for the canvas by \"ev_il\"",
        "I search for the canvas by \"ev il\"",
        "I search for the canvas by \"ev4il\"",
        "I search for the canvas by \"e\"",
        "I search for the canvas by \" \"",
        "I search for the canvas by \"6\"",
        "I search for the canvas by \"_\"",
        "I search for the canvas by \"\"",
        "I search for the canvas by \"evil\""
      ]
    },
    {
      "regex": "%(\\w*)(\\[.\\])?(\\[.\\])?%",
      "exceptionStackTrace": null,
      "matches": [
        "%evil[a][]]%",
        "%evil[a][[]%",
        "%evil[a][A]%",
        "%evil[a][0]%",
        "%evil[a][%]%",
        "%evil[a][ ]%",
        "%evil[a][a][a]%",
        "%evil[a]%",
        "%evil[]][a]%",
        "%evil[[][a]%",
        "%evil[A][a]%",
        "%evil[0][a]%",
        "%evil[%][a]%",
        "%evil[ ][a]%",
        "%eVil[a][a]%",
        "%EVIL[a][a]%",
        "%ev_il[a][a]%",
        "%ev il[a][a]%",
        "%ev4il[a][a]%",
        "%e[a][a]%",
        "% [a][a]%",
        "%6[a][a]%",
        "%_[a][a]%",
        "%[a][a]%",
        "%%",
        "%evil[a][a]%"
      ]
    },
    {
      "regex": "^(__?)",
      "exceptionStackTrace": null,
      "matches": ["___", "_", "__"]
    },
    {
      "regex": "\\b$abbr(\\W*)$pbm",
      "exceptionStackTrace": null,
      "matches": [
        "abbr;;pbm",
        "abbrapbm",
        "abbr_pbm",
        "abbrApbm",
        "abbr0pbm",
        "abbr pbm",
        "abbrpbm",
        "abbr;pbm"
      ]
    },
    {
      "regex": "<\\s*link[^>]*(rel=([\"'])[^>\\2]*icon[^>\\2]*\\2)[^>]*>",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (parse error): expected character type but received BACKREFERENCE"
      },
      "matches": []
    },
    {
      "regex": "(?i)^((?P<scheme>http[s]?)://)?(?P<host>[0-9a-z-_.]+)(:(?P<port>\\d+))?(?P<path>(/)?(wsman)?)?",
      "exceptionStackTrace": null,
      "matches": [
        "https://evil:0/wsman/wsman",
        "https://evil:0",
        "https://evil:0/wsmanwsman",
        "https://evil:0/",
        "https://evil:0//wsman",
        "https://evil:0wsman",
        "https://evil:0:0/wsman",
        "https://evil/wsman",
        "https://evil:00/wsman",
        "https://evil:/wsman",
        "https://::0/wsman",
        "https:///:0/wsman",
        "https://.:0/wsman",
        "https://-:0/wsman",
        "https://eVil:0/wsman",
        "https://EVIL:0/wsman",
        "https://ev_il:0/wsman",
        "https://ev il:0/wsman",
        "https://ev4il:0/wsman",
        "https://e:0/wsman",
        "https:// :0/wsman",
        "https://6:0/wsman",
        "https://_:0/wsman",
        "https://:0/wsman",
        "https://https://evil:0/wsman",
        "evil:0/wsman",
        "httpss://evil:0/wsman",
        "http://evil:0/wsman",
        "evil",
        "https://evil:0/wsman"
      ]
    },
    {
      "regex": "<p\\s+class=\"before_cache\">\\s*\n          <span>before_cache:\\s*a=a1,b=b2</span>\\s*\n          <p\\s+class=\"in_cache\">\\s*\n            <span>in_cache:\\s*a=a1,b=b1</span>\\s*\n          </p>\\s*\n          <span>after_cache:\\s*a=a1,b=b2</span>\\s*\n         </p>\\s*\n\n         <p\\s+class=\"after_cache_2\">\\s*\n           <span>after_cache_2:\\s*a=a1,b=b2</span>\\s*\n         </p>",
      "exceptionStackTrace": null,
      "matches": [
        "<p class=\"before_cache\"> \n          <span>before_cache: a=a1,b=b2</span> \n          <p class=\"in_cache\"> \n            <span>in_cache: a=a1,b=b1</span> \n          </p> \n          <span>after_cache: a=a1,b=b2</span> \n         </p> \n\n         <p class=\"after_cache_2\"> \n           <span>after_cache_2: a=a1,b=b2</span>  \n         </p>",
        "<p class=\"before_cache\"> \n          <span>before_cache: a=a1,b=b2</span> \n          <p class=\"in_cache\"> \n            <span>in_cache: a=a1,b=b1</span> \n          </p> \n          <span>after_cache: a=a1,b=b2</span> \n         </p> \n\n         <p class=\"after_cache_2\"> \n           <span>after_cache_2: a=a1,b=b2</span>\n         </p>",
        "<p class=\"before_cache\"> \n          <span>before_cache: a=a1,b=b2</span> \n          <p class=\"in_cache\"> \n            <span>in_cache: a=a1,b=b1</span> \n          </p> \n          <span>after_cache: a=a1,b=b2</span> \n         </p> \n\n         <p class=\"after_cache_2\"> \n           <span>after_cache_2:  a=a1,b=b2</span> \n         </p>",
        "<p class=\"before_cache\"> \n          <span>before_cache: a=a1,b=b2</span> \n          <p class=\"in_cache\"> \n            <span>in_cache: a=a1,b=b1</span> \n          </p> \n          <span>after_cache: a=a1,b=b2</span> \n         </p> \n\n         <p class=\"after_cache_2\"> \n           <span>after_cache_2:a=a1,b=b2</span> \n         </p>",
        "<p class=\"before_cache\"> \n          <span>before_cache: a=a1,b=b2</span> \n          <p class=\"in_cache\"> \n            <span>in_cache: a=a1,b=b1</span> \n          </p> \n          <span>after_cache: a=a1,b=b2</span> \n         </p> \n\n         <p class=\"after_cache_2\">  \n           <span>after_cache_2: a=a1,b=b2</span> \n         </p>",
        "<p class=\"before_cache\"> \n          <span>before_cache: a=a1,b=b2</span> \n          <p class=\"in_cache\"> \n            <span>in_cache: a=a1,b=b1</span> \n          </p> \n          <span>after_cache: a=a1,b=b2</span> \n         </p> \n\n         <p class=\"after_cache_2\">\n           <span>after_cache_2: a=a1,b=b2</span> \n         </p>",
        "<p class=\"before_cache\"> \n          <span>before_cache: a=a1,b=b2</span> \n          <p class=\"in_cache\"> \n            <span>in_cache: a=a1,b=b1</span> \n          </p> \n          <span>after_cache: a=a1,b=b2</span> \n         </p> \n\n         <p  class=\"after_cache_2\"> \n           <span>after_cache_2: a=a1,b=b2</span> \n         </p>",
        "<p class=\"before_cache\"> \n          <span>before_cache: a=a1,b=b2</span> \n          <p class=\"in_cache\"> \n            <span>in_cache: a=a1,b=b1</span> \n          </p> \n          <span>after_cache: a=a1,b=b2</span> \n         </p> \n\n         <pclass=\"after_cache_2\"> \n           <span>after_cache_2: a=a1,b=b2</span> \n         </p>",
        "<p class=\"before_cache\"> \n          <span>before_cache: a=a1,b=b2</span> \n          <p class=\"in_cache\"> \n            <span>in_cache: a=a1,b=b1</span> \n          </p> \n          <span>after_cache: a=a1,b=b2</span> \n         </p>  \n\n         <p class=\"after_cache_2\"> \n           <span>after_cache_2: a=a1,b=b2</span> \n         </p>",
        "<p class=\"before_cache\"> \n          <span>before_cache: a=a1,b=b2</span> \n          <p class=\"in_cache\"> \n            <span>in_cache: a=a1,b=b1</span> \n          </p> \n          <span>after_cache: a=a1,b=b2</span> \n         </p>\n\n         <p class=\"after_cache_2\"> \n           <span>after_cache_2: a=a1,b=b2</span> \n         </p>",
        "<p class=\"before_cache\"> \n          <span>before_cache: a=a1,b=b2</span> \n          <p class=\"in_cache\"> \n            <span>in_cache: a=a1,b=b1</span> \n          </p> \n          <span>after_cache: a=a1,b=b2</span>  \n         </p> \n\n         <p class=\"after_cache_2\"> \n           <span>after_cache_2: a=a1,b=b2</span> \n         </p>",
        "<p class=\"before_cache\"> \n          <span>before_cache: a=a1,b=b2</span> \n          <p class=\"in_cache\"> \n            <span>in_cache: a=a1,b=b1</span> \n          </p> \n          <span>after_cache: a=a1,b=b2</span>\n         </p> \n\n         <p class=\"after_cache_2\"> \n           <span>after_cache_2: a=a1,b=b2</span> \n         </p>",
        "<p class=\"before_cache\"> \n          <span>before_cache: a=a1,b=b2</span> \n          <p class=\"in_cache\"> \n            <span>in_cache: a=a1,b=b1</span> \n          </p> \n          <span>after_cache:  a=a1,b=b2</span> \n         </p> \n\n         <p class=\"after_cache_2\"> \n           <span>after_cache_2: a=a1,b=b2</span> \n         </p>",
        "<p class=\"before_cache\"> \n          <span>before_cache: a=a1,b=b2</span> \n          <p class=\"in_cache\"> \n            <span>in_cache: a=a1,b=b1</span> \n          </p> \n          <span>after_cache:a=a1,b=b2</span> \n         </p> \n\n         <p class=\"after_cache_2\"> \n           <span>after_cache_2: a=a1,b=b2</span> \n         </p>",
        "<p class=\"before_cache\"> \n          <span>before_cache: a=a1,b=b2</span> \n          <p class=\"in_cache\"> \n            <span>in_cache: a=a1,b=b1</span> \n          </p>  \n          <span>after_cache: a=a1,b=b2</span> \n         </p> \n\n         <p class=\"after_cache_2\"> \n           <span>after_cache_2: a=a1,b=b2</span> \n         </p>",
        "<p class=\"before_cache\"> \n          <span>before_cache: a=a1,b=b2</span> \n          <p class=\"in_cache\"> \n            <span>in_cache: a=a1,b=b1</span> \n          </p>\n          <span>after_cache: a=a1,b=b2</span> \n         </p> \n\n         <p class=\"after_cache_2\"> \n           <span>after_cache_2: a=a1,b=b2</span> \n         </p>",
        "<p class=\"before_cache\"> \n          <span>before_cache: a=a1,b=b2</span> \n          <p class=\"in_cache\"> \n            <span>in_cache: a=a1,b=b1</span>  \n          </p> \n          <span>after_cache: a=a1,b=b2</span> \n         </p> \n\n         <p class=\"after_cache_2\"> \n           <span>after_cache_2: a=a1,b=b2</span> \n         </p>",
        "<p class=\"before_cache\"> \n          <span>before_cache: a=a1,b=b2</span> \n          <p class=\"in_cache\"> \n            <span>in_cache: a=a1,b=b1</span>\n          </p> \n          <span>after_cache: a=a1,b=b2</span> \n         </p> \n\n         <p class=\"after_cache_2\"> \n           <span>after_cache_2: a=a1,b=b2</span> \n         </p>",
        "<p class=\"before_cache\"> \n          <span>before_cache: a=a1,b=b2</span> \n          <p class=\"in_cache\"> \n            <span>in_cache:  a=a1,b=b1</span> \n          </p> \n          <span>after_cache: a=a1,b=b2</span> \n         </p> \n\n         <p class=\"after_cache_2\"> \n           <span>after_cache_2: a=a1,b=b2</span> \n         </p>",
        "<p class=\"before_cache\"> \n          <span>before_cache: a=a1,b=b2</span> \n          <p class=\"in_cache\"> \n            <span>in_cache:a=a1,b=b1</span> \n          </p> \n          <span>after_cache: a=a1,b=b2</span> \n         </p> \n\n         <p class=\"after_cache_2\"> \n           <span>after_cache_2: a=a1,b=b2</span> \n         </p>",
        "<p class=\"before_cache\"> \n          <span>before_cache: a=a1,b=b2</span> \n          <p class=\"in_cache\">  \n            <span>in_cache: a=a1,b=b1</span> \n          </p> \n          <span>after_cache: a=a1,b=b2</span> \n         </p> \n\n         <p class=\"after_cache_2\"> \n           <span>after_cache_2: a=a1,b=b2</span> \n         </p>",
        "<p class=\"before_cache\"> \n          <span>before_cache: a=a1,b=b2</span> \n          <p class=\"in_cache\">\n            <span>in_cache: a=a1,b=b1</span> \n          </p> \n          <span>after_cache: a=a1,b=b2</span> \n         </p> \n\n         <p class=\"after_cache_2\"> \n           <span>after_cache_2: a=a1,b=b2</span> \n         </p>",
        "<p class=\"before_cache\"> \n          <span>before_cache: a=a1,b=b2</span> \n          <p  class=\"in_cache\"> \n            <span>in_cache: a=a1,b=b1</span> \n          </p> \n          <span>after_cache: a=a1,b=b2</span> \n         </p> \n\n         <p class=\"after_cache_2\"> \n           <span>after_cache_2: a=a1,b=b2</span> \n         </p>",
        "<p class=\"before_cache\"> \n          <span>before_cache: a=a1,b=b2</span> \n          <pclass=\"in_cache\"> \n            <span>in_cache: a=a1,b=b1</span> \n          </p> \n          <span>after_cache: a=a1,b=b2</span> \n         </p> \n\n         <p class=\"after_cache_2\"> \n           <span>after_cache_2: a=a1,b=b2</span> \n         </p>",
        "<p class=\"before_cache\"> \n          <span>before_cache: a=a1,b=b2</span>  \n          <p class=\"in_cache\"> \n            <span>in_cache: a=a1,b=b1</span> \n          </p> \n          <span>after_cache: a=a1,b=b2</span> \n         </p> \n\n         <p class=\"after_cache_2\"> \n           <span>after_cache_2: a=a1,b=b2</span> \n         </p>",
        "<p class=\"before_cache\"> \n          <span>before_cache: a=a1,b=b2</span>\n          <p class=\"in_cache\"> \n            <span>in_cache: a=a1,b=b1</span> \n          </p> \n          <span>after_cache: a=a1,b=b2</span> \n         </p> \n\n         <p class=\"after_cache_2\"> \n           <span>after_cache_2: a=a1,b=b2</span> \n         </p>",
        "<p class=\"before_cache\"> \n          <span>before_cache:  a=a1,b=b2</span> \n          <p class=\"in_cache\"> \n            <span>in_cache: a=a1,b=b1</span> \n          </p> \n          <span>after_cache: a=a1,b=b2</span> \n         </p> \n\n         <p class=\"after_cache_2\"> \n           <span>after_cache_2: a=a1,b=b2</span> \n         </p>",
        "<p class=\"before_cache\"> \n          <span>before_cache:a=a1,b=b2</span> \n          <p class=\"in_cache\"> \n            <span>in_cache: a=a1,b=b1</span> \n          </p> \n          <span>after_cache: a=a1,b=b2</span> \n         </p> \n\n         <p class=\"after_cache_2\"> \n           <span>after_cache_2: a=a1,b=b2</span> \n         </p>",
        "<p class=\"before_cache\">  \n          <span>before_cache: a=a1,b=b2</span> \n          <p class=\"in_cache\"> \n            <span>in_cache: a=a1,b=b1</span> \n          </p> \n          <span>after_cache: a=a1,b=b2</span> \n         </p> \n\n         <p class=\"after_cache_2\"> \n           <span>after_cache_2: a=a1,b=b2</span> \n         </p>",
        "<p class=\"before_cache\">\n          <span>before_cache: a=a1,b=b2</span> \n          <p class=\"in_cache\"> \n            <span>in_cache: a=a1,b=b1</span> \n          </p> \n          <span>after_cache: a=a1,b=b2</span> \n         </p> \n\n         <p class=\"after_cache_2\"> \n           <span>after_cache_2: a=a1,b=b2</span> \n         </p>",
        "<p  class=\"before_cache\"> \n          <span>before_cache: a=a1,b=b2</span> \n          <p class=\"in_cache\"> \n            <span>in_cache: a=a1,b=b1</span> \n          </p> \n          <span>after_cache: a=a1,b=b2</span> \n         </p> \n\n         <p class=\"after_cache_2\"> \n           <span>after_cache_2: a=a1,b=b2</span> \n         </p>",
        "<pclass=\"before_cache\"> \n          <span>before_cache: a=a1,b=b2</span> \n          <p class=\"in_cache\"> \n            <span>in_cache: a=a1,b=b1</span> \n          </p> \n          <span>after_cache: a=a1,b=b2</span> \n         </p> \n\n         <p class=\"after_cache_2\"> \n           <span>after_cache_2: a=a1,b=b2</span> \n         </p>",
        "<p class=\"before_cache\">\n          <span>before_cache:a=a1,b=b2</span>\n          <p class=\"in_cache\">\n            <span>in_cache:a=a1,b=b1</span>\n          </p>\n          <span>after_cache:a=a1,b=b2</span>\n         </p>\n\n         <p class=\"after_cache_2\">\n           <span>after_cache_2:a=a1,b=b2</span>\n         </p>",
        "<p class=\"before_cache\"> \n          <span>before_cache: a=a1,b=b2</span> \n          <p class=\"in_cache\"> \n            <span>in_cache: a=a1,b=b1</span> \n          </p> \n          <span>after_cache: a=a1,b=b2</span> \n         </p> \n\n         <p class=\"after_cache_2\"> \n           <span>after_cache_2: a=a1,b=b2</span> \n         </p>"
      ]
    },
    {
      "regex": "select .* from time",
      "exceptionStackTrace": null,
      "matches": [
        "select eVil from time",
        "select EVIL from time",
        "select ev_il from time",
        "select ev il from time",
        "select ev4il from time",
        "select e from time",
        "select   from time",
        "select 6 from time",
        "select _ from time",
        "select  from time",
        "select evil from time"
      ]
    },
    {
      "regex": "DVDRIP_JOB_PID=(\\d+)",
      "exceptionStackTrace": null,
      "matches": ["DVDRIP_JOB_PID=00", "DVDRIP_JOB_PID=", "DVDRIP_JOB_PID=0"]
    },
    {
      "regex": "\\G(\\s*[^<\\s]+\\s*)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\G"
      },
      "matches": []
    },
    { "regex": "dom wor", "exceptionStackTrace": null, "matches": ["dom wor"] },
    {
      "regex": "accountancy_report",
      "exceptionStackTrace": null,
      "matches": ["accountancy_report"]
    },
    {
      "regex": "[A-Z]?[a-z]+|[A-Z]+|[-+\\d]+|[!\"",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unterminated character set"
      },
      "matches": []
    },
    {
      "regex": "^https?\\:\\/\\/(?:(?:(([^:@\\/]*)(?::([^@\\/]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?).*$",
      "exceptionStackTrace": null,
      "matches": [
        "https://evil:evil@evil:0@",
        "https://evil:evil@evil:0?",
        "https://evil:evil@evil:0:",
        "https://evil:evil@evil:0/",
        "https://evil:evil@evil:0#",
        "https://evil:evil@evil:0eVil",
        "https://evil:evil@evil:0EVIL",
        "https://evil:evil@evil:0ev_il",
        "https://evil:evil@evil:0ev il",
        "https://evil:evil@evil:0ev4il",
        "https://evil:evil@evil:0e",
        "https://evil:evil@evil:0 ",
        "https://evil:evil@evil:06",
        "https://evil:evil@evil:0_",
        "https://evil:evil@evil:0",
        "https://evil:evil@evil:0:0evil",
        "https://evil:evil@evilevil",
        "https://evil:evil@evil:00evil",
        "https://evil:evil@evil:evil",
        "https://evil:evil@@:0evil",
        "https://evil:evil@?:0evil",
        "https://evil:evil@::0evil",
        "https://evil:evil@/:0evil",
        "https://evil:evil@#:0evil",
        "https://evil:evil@eVil:0evil",
        "https://evil:evil@EVIL:0evil",
        "https://evil:evil@ev_il:0evil",
        "https://evil:evil@ev il:0evil",
        "https://evil:evil@ev4il:0evil",
        "https://evil:evil@e:0evil",
        "https://evil:evil@ :0evil",
        "https://evil:evil@6:0evil",
        "https://evil:evil@_:0evil",
        "https://evil:evil@:0evil",
        "https://evil:evil@evil:evil@evil:0evil",
        "https://evil:0evil",
        "https://evil:evilevil:evil@evil:0evil",
        "https://@evil:0evil",
        "https://evil:evil:evil@evil:0evil",
        "https://evil@evil:0evil",
        "https://evil:@@evil:0evil",
        "https://evil:?@evil:0evil",
        "https://evil::@evil:0evil",
        "https://evil:/@evil:0evil",
        "https://evil:#@evil:0evil",
        "https://evil:eVil@evil:0evil",
        "https://evil:EVIL@evil:0evil",
        "https://evil:ev_il@evil:0evil",
        "https://evil:ev il@evil:0evil",
        "https://evil:ev4il@evil:0evil",
        "https://evil:e@evil:0evil",
        "https://evil: @evil:0evil",
        "https://evil:6@evil:0evil",
        "https://evil:_@evil:0evil",
        "https://evil:@evil:0evil",
        "https://@:evil@evil:0evil",
        "https://?:evil@evil:0evil",
        "https://::evil@evil:0evil",
        "https:///:evil@evil:0evil",
        "https://#:evil@evil:0evil",
        "https://eVil:evil@evil:0evil",
        "https://EVIL:evil@evil:0evil",
        "https://ev_il:evil@evil:0evil",
        "https://ev il:evil@evil:0evil",
        "https://ev4il:evil@evil:0evil",
        "https://e:evil@evil:0evil",
        "https:// :evil@evil:0evil",
        "https://6:evil@evil:0evil",
        "https://_:evil@evil:0evil",
        "https://:evil@evil:0evil",
        "httpss://evil:evil@evil:0evil",
        "http://evil:evil@evil:0evil",
        "http://",
        "https://evil:evil@evil:0evil"
      ]
    },
    {
      "regex": ".*(#.+\\sAS\\s[^\\s]*).*",
      "exceptionStackTrace": null,
      "matches": [
        "evil#evil AS evil#",
        "evil#evil AS evileVil",
        "evil#evil AS evilEVIL",
        "evil#evil AS evilev_il",
        "evil#evil AS evilev il",
        "evil#evil AS evilev4il",
        "evil#evil AS evile",
        "evil#evil AS evil ",
        "evil#evil AS evil6",
        "evil#evil AS evil_",
        "evil#evil AS #evil",
        "evil#evil AS eVilevil",
        "evil#evil AS EVILevil",
        "evil#evil AS ev_ilevil",
        "evil#evil AS ev ilevil",
        "evil#evil AS ev4ilevil",
        "evil#evil AS eevil",
        "evil#evil AS  evil",
        "evil#evil AS 6evil",
        "evil#evil AS _evil",
        "evil#evil AS evil",
        "evil## AS evilevil",
        "evil#eVil AS evilevil",
        "evil#EVIL AS evilevil",
        "evil#ev_il AS evilevil",
        "evil#ev il AS evilevil",
        "evil#ev4il AS evilevil",
        "evil#e AS evilevil",
        "evil#  AS evilevil",
        "evil#6 AS evilevil",
        "evil#_ AS evilevil",
        "evil# AS evilevil",
        "##evil AS evilevil",
        "eVil#evil AS evilevil",
        "EVIL#evil AS evilevil",
        "ev_il#evil AS evilevil",
        "ev il#evil AS evilevil",
        "ev4il#evil AS evilevil",
        "e#evil AS evilevil",
        " #evil AS evilevil",
        "6#evil AS evilevil",
        "_#evil AS evilevil",
        "#evil AS evilevil",
        "#evil AS ",
        "evil#evil AS evilevil"
      ]
    },
    {
      "regex": "\\[(img)\\](.*?)\\[\\/\\1\\]",
      "exceptionStackTrace": null,
      "matches": [
        "[img]][/img]",
        "[img][[/img]",
        "[img]/[/img]",
        "[img]eVil[/img]",
        "[img]EVIL[/img]",
        "[img]ev_il[/img]",
        "[img]ev il[/img]",
        "[img]ev4il[/img]",
        "[img]e[/img]",
        "[img] [/img]",
        "[img]6[/img]",
        "[img]_[/img]",
        "[img][/img]",
        "[img]evil[/img]"
      ]
    },
    { "regex": "^(?=\\D)", "exceptionStackTrace": null, "matches": [""] },
    {
      "regex": "carmen:addressnumber\\[i\\] array must be equal to geometry.geometries\\[i\\] array",
      "exceptionStackTrace": null,
      "matches": [
        "carmen:addressnumber[i] array must be equal to geometry]geometries[i] array",
        "carmen:addressnumber[i] array must be equal to geometry[geometries[i] array",
        "carmen:addressnumber[i] array must be equal to geometryAgeometries[i] array",
        "carmen:addressnumber[i] array must be equal to geometry:geometries[i] array",
        "carmen:addressnumber[i] array must be equal to geometry0geometries[i] array",
        "carmen:addressnumber[i] array must be equal to geometry geometries[i] array",
        "carmen:addressnumber[i] array must be equal to geometryageometries[i] array"
      ]
    },
    {
      "regex": "\\'(.*?)\\' is not a mount point",
      "exceptionStackTrace": null,
      "matches": [
        "''' is not a mount point",
        "'eVil' is not a mount point",
        "'EVIL' is not a mount point",
        "'ev_il' is not a mount point",
        "'ev il' is not a mount point",
        "'ev4il' is not a mount point",
        "'e' is not a mount point",
        "' ' is not a mount point",
        "'6' is not a mount point",
        "'_' is not a mount point",
        "'' is not a mount point",
        "'evil' is not a mount point"
      ]
    },
    {
      "regex": "^GIST_TOKEN$",
      "exceptionStackTrace": null,
      "matches": ["GIST_TOKEN"]
    },
    {
      "regex": "^(.+):.*",
      "exceptionStackTrace": null,
      "matches": [
        "evil::",
        "evil:eVil",
        "evil:EVIL",
        "evil:ev_il",
        "evil:ev il",
        "evil:ev4il",
        "evil:e",
        "evil: ",
        "evil:6",
        "evil:_",
        "::evil",
        "eVil:evil",
        "EVIL:evil",
        "ev_il:evil",
        "ev il:evil",
        "ev4il:evil",
        "e:evil",
        " :evil",
        "6:evil",
        "_:evil",
        ":evil",
        "evil:",
        "evil:evil"
      ]
    },
    {
      "regex": "^$ENV{HOME}|^[^\\/]",
      "exceptionStackTrace": null,
      "matches": ["}", "{", "A", "0", "/", " ", "a", "ENV{HOME}"]
    },
    {
      "regex": "^(?:[a-zA-Z])",
      "exceptionStackTrace": null,
      "matches": ["a", "A"]
    },
    {
      "regex": "<!--\\s*google_ad_section_start[^>]*-->",
      "exceptionStackTrace": null,
      "matches": [
        "<!-- google_ad_section_start>-->",
        "<!-- google_ad_section_start<-->",
        "<!-- google_ad_section_start--->",
        "<!-- google_ad_section_start!-->",
        "<!-- google_ad_section_starteVil-->",
        "<!-- google_ad_section_startEVIL-->",
        "<!-- google_ad_section_startev_il-->",
        "<!-- google_ad_section_startev il-->",
        "<!-- google_ad_section_startev4il-->",
        "<!-- google_ad_section_starte-->",
        "<!-- google_ad_section_start -->",
        "<!-- google_ad_section_start6-->",
        "<!-- google_ad_section_start_-->",
        "<!-- google_ad_section_start-->",
        "<!--  google_ad_section_startevil-->",
        "<!--google_ad_section_startevil-->",
        "<!--google_ad_section_start-->",
        "<!-- google_ad_section_startevil-->"
      ]
    },
    {
      "regex": "(.*)$keys[-1](.*)",
      "exceptionStackTrace": null,
      "matches": [
        "evilkeys1-",
        "evilkeys1eVil",
        "evilkeys1EVIL",
        "evilkeys1ev_il",
        "evilkeys1ev il",
        "evilkeys1ev4il",
        "evilkeys1e",
        "evilkeys1 ",
        "evilkeys16",
        "evilkeys1_",
        "evilkeys1",
        "evilkeys0evil",
        "evilkeys-evil",
        "-keys1evil",
        "eVilkeys1evil",
        "EVILkeys1evil",
        "ev_ilkeys1evil",
        "ev ilkeys1evil",
        "ev4ilkeys1evil",
        "ekeys1evil",
        " keys1evil",
        "6keys1evil",
        "_keys1evil",
        "keys1evil",
        "keys1",
        "evilkeys1evil"
      ]
    },
    {
      "regex": "http://lorempixel.com/100/100/cats",
      "exceptionStackTrace": null,
      "matches": [
        "http://lorempixelAcom/100/100/cats",
        "http://lorempixel:com/100/100/cats",
        "http://lorempixel0com/100/100/cats",
        "http://lorempixel/com/100/100/cats",
        "http://lorempixel com/100/100/cats",
        "http://lorempixelacom/100/100/cats"
      ]
    },
    {
      "regex": "<!percent!>",
      "exceptionStackTrace": null,
      "matches": ["<!percent!>"]
    },
    {
      "regex": "^<a[>\\s]",
      "exceptionStackTrace": null,
      "matches": ["<a ", "<a>"]
    },
    {
      "regex": "^nav-left",
      "exceptionStackTrace": null,
      "matches": ["nav-left"]
    },
    {
      "regex": "($vowel_re|\\b)ux([iue])",
      "exceptionStackTrace": null,
      "matches": [
        "vowel_reuxu",
        "vowel_reuxi",
        "vowel_reuxa",
        "uxe",
        "vowel_reuxe"
      ]
    },
    {
      "regex": "(@[a-z_]+)",
      "exceptionStackTrace": null,
      "matches": [
        "@@",
        "@eVil",
        "@EVIL",
        "@ev_il",
        "@ev il",
        "@ev4il",
        "@e",
        "@ ",
        "@6",
        "@_",
        "@",
        "@evil"
      ]
    },
    {
      "regex": "/lib/perl$",
      "exceptionStackTrace": null,
      "matches": ["/lib/perl"]
    },
    {
      "regex": "Failed to find a model file loader",
      "exceptionStackTrace": null,
      "matches": ["Failed to find a model file loader"]
    },
    {
      "regex": "tea_tim\\?",
      "exceptionStackTrace": null,
      "matches": ["tea_tim?"]
    },
    {
      "regex": ":enqueue(\"PART $channnel\") }\n  method quit(Str $reason)  { .",
      "exceptionStackTrace": null,
      "matches": [
        ":enqueue\"PART channnel\" }\n  method quitStr reason  { }",
        ":enqueue\"PART channnel\" }\n  method quitStr reason  { {",
        ":enqueue\"PART channnel\" }\n  method quitStr reason  { A",
        ":enqueue\"PART channnel\" }\n  method quitStr reason  { :",
        ":enqueue\"PART channnel\" }\n  method quitStr reason  { 0",
        ":enqueue\"PART channnel\" }\n  method quitStr reason  { \"",
        ":enqueue\"PART channnel\" }\n  method quitStr reason  {  ",
        ":enqueue\"PART channnel\" }\n  method quitStr reason  { a"
      ]
    },
    {
      "regex": "^-?[fF]",
      "exceptionStackTrace": null,
      "matches": ["-f", "-a", "-A", "--F", "F", "-F"]
    },
    {
      "regex": "WARC-Block-Digest:[^\r\n]+\r\n",
      "exceptionStackTrace": null,
      "matches": [
        "WARC-Block-Digest::\r\n",
        "WARC-Block-Digest:-\r\n",
        "WARC-Block-Digest:eVil\r\n",
        "WARC-Block-Digest:EVIL\r\n",
        "WARC-Block-Digest:ev_il\r\n",
        "WARC-Block-Digest:ev il\r\n",
        "WARC-Block-Digest:ev4il\r\n",
        "WARC-Block-Digest:e\r\n",
        "WARC-Block-Digest: \r\n",
        "WARC-Block-Digest:6\r\n",
        "WARC-Block-Digest:_\r\n",
        "WARC-Block-Digest:\r\n",
        "WARC-Block-Digest:evil\r\n"
      ]
    },
    {
      "regex": "(\\w+|\\(|\\)|\\&\\&|\\|\\|)",
      "exceptionStackTrace": null,
      "matches": [
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "||",
        "&&",
        ")",
        "(",
        "evil"
      ]
    },
    {
      "regex": "PlayBook.*?RIM Tablet",
      "exceptionStackTrace": null,
      "matches": [
        "PlayBookeVilRIM Tablet",
        "PlayBookEVILRIM Tablet",
        "PlayBookev_ilRIM Tablet",
        "PlayBookev ilRIM Tablet",
        "PlayBookev4ilRIM Tablet",
        "PlayBookeRIM Tablet",
        "PlayBook RIM Tablet",
        "PlayBook6RIM Tablet",
        "PlayBook_RIM Tablet",
        "PlayBookRIM Tablet",
        "PlayBookevilRIM Tablet"
      ]
    },
    {
      "regex": "^I go to \"([^\\\"]*)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "I go to \"\"\"",
        "I go to \"eVil\"",
        "I go to \"EVIL\"",
        "I go to \"ev_il\"",
        "I go to \"ev il\"",
        "I go to \"ev4il\"",
        "I go to \"e\"",
        "I go to \" \"",
        "I go to \"6\"",
        "I go to \"_\"",
        "I go to \"\"",
        "I go to \"evil\""
      ]
    },
    {
      "regex": "\\{|\\[|data\\-start",
      "exceptionStackTrace": null,
      "matches": ["data-start", "[", "{"]
    },
    { "regex": "ORDER\\b", "exceptionStackTrace": null, "matches": ["ORDER"] },
    {
      "regex": "berkshelf gem",
      "exceptionStackTrace": null,
      "matches": ["berkshelf gem"]
    },
    {
      "regex": "\\benable:[^:\\s]+",
      "exceptionStackTrace": null,
      "matches": [
        "enable::",
        "enable:eVil",
        "enable:EVIL",
        "enable:ev_il",
        "enable:ev il",
        "enable:ev4il",
        "enable:e",
        "enable: ",
        "enable:6",
        "enable:_",
        "enable:",
        "enable:evil"
      ]
    },
    {
      "regex": "\\ACONNECT ([_a-zA-Z0-9\\.\\-]+:[\\d]+) .*$",
      "exceptionStackTrace": null,
      "matches": [
        "CONNECT evil:0 :",
        "CONNECT evil:0 .",
        "CONNECT evil:0 -",
        "CONNECT evil:0 eVil",
        "CONNECT evil:0 EVIL",
        "CONNECT evil:0 ev_il",
        "CONNECT evil:0 ev il",
        "CONNECT evil:0 ev4il",
        "CONNECT evil:0 e",
        "CONNECT evil:0  ",
        "CONNECT evil:0 6",
        "CONNECT evil:0 _",
        "CONNECT evil:00 evil",
        "CONNECT evil: evil",
        "CONNECT ::0 evil",
        "CONNECT .:0 evil",
        "CONNECT -:0 evil",
        "CONNECT eVil:0 evil",
        "CONNECT EVIL:0 evil",
        "CONNECT ev_il:0 evil",
        "CONNECT ev il:0 evil",
        "CONNECT ev4il:0 evil",
        "CONNECT e:0 evil",
        "CONNECT  :0 evil",
        "CONNECT 6:0 evil",
        "CONNECT _:0 evil",
        "CONNECT :0 evil",
        "CONNECT evil:0 ",
        "CONNECT evil:0 evil"
      ]
    },
    {
      "regex": "\\\\begin{verbatim}[\\s]*?<matplotlib\\.[\\S ]*?>[\\s]*?\\\\end{verbatim}",
      "exceptionStackTrace": null,
      "matches": [
        "\\begin{verbatim} <matplotlib.evil>  \\end{verbatim}",
        "\\begin{verbatim} <matplotlib.evil>\\end{verbatim}",
        "\\begin{verbatim} <matplotlib.}> \\end{verbatim}",
        "\\begin{verbatim} <matplotlib.{> \\end{verbatim}",
        "\\begin{verbatim} <matplotlib.\\> \\end{verbatim}",
        "\\begin{verbatim} <matplotlib.>> \\end{verbatim}",
        "\\begin{verbatim} <matplotlib.<> \\end{verbatim}",
        "\\begin{verbatim} <matplotlib..> \\end{verbatim}",
        "\\begin{verbatim} <matplotlib.eVil> \\end{verbatim}",
        "\\begin{verbatim} <matplotlib.EVIL> \\end{verbatim}",
        "\\begin{verbatim} <matplotlib.ev_il> \\end{verbatim}",
        "\\begin{verbatim} <matplotlib.ev il> \\end{verbatim}",
        "\\begin{verbatim} <matplotlib.ev4il> \\end{verbatim}",
        "\\begin{verbatim} <matplotlib.e> \\end{verbatim}",
        "\\begin{verbatim} <matplotlib. > \\end{verbatim}",
        "\\begin{verbatim} <matplotlib.6> \\end{verbatim}",
        "\\begin{verbatim} <matplotlib._> \\end{verbatim}",
        "\\begin{verbatim} <matplotlib.> \\end{verbatim}",
        "\\begin{verbatim}  <matplotlib.evil> \\end{verbatim}",
        "\\begin{verbatim}<matplotlib.evil> \\end{verbatim}",
        "\\begin{verbatim}<matplotlib.>\\end{verbatim}",
        "\\begin{verbatim} <matplotlib.evil> \\end{verbatim}"
      ]
    },
    { "regex": "^\\{\\{\\^", "exceptionStackTrace": null, "matches": ["{{^"] },
    { "regex": "ebs", "exceptionStackTrace": null, "matches": ["ebs"] },
    { "regex": "^otu", "exceptionStackTrace": null, "matches": ["otu"] },
    {
      "regex": "^RspecUniqueName_[\\dA-Za-z]+$",
      "exceptionStackTrace": null,
      "matches": [
        "RspecUniqueName_eVil",
        "RspecUniqueName_EVIL",
        "RspecUniqueName_ev_il",
        "RspecUniqueName_ev il",
        "RspecUniqueName_ev4il",
        "RspecUniqueName_e",
        "RspecUniqueName_ ",
        "RspecUniqueName_6",
        "RspecUniqueName__",
        "RspecUniqueName_",
        "RspecUniqueName_evil"
      ]
    },
    {
      "regex": "\\\\cyrchar\\\\cyrdzhe ",
      "exceptionStackTrace": null,
      "matches": ["\\cyrchar\\cyrdzhe "]
    },
    {
      "regex": "oauth_token=([^\\&]+)\\&oauth_token_secret=([^\\&]+)\\&oauth_expires_in=(\\d+)\\&xero_org_muid=(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "oauth_token=evil&oauth_token_secret=evil&oauth_expires_in=0&xero_org_muid==",
        "oauth_token=evil&oauth_token_secret=evil&oauth_expires_in=0&xero_org_muid=&",
        "oauth_token=evil&oauth_token_secret=evil&oauth_expires_in=0&xero_org_muid=eVil",
        "oauth_token=evil&oauth_token_secret=evil&oauth_expires_in=0&xero_org_muid=EVIL",
        "oauth_token=evil&oauth_token_secret=evil&oauth_expires_in=0&xero_org_muid=ev_il",
        "oauth_token=evil&oauth_token_secret=evil&oauth_expires_in=0&xero_org_muid=ev il",
        "oauth_token=evil&oauth_token_secret=evil&oauth_expires_in=0&xero_org_muid=ev4il",
        "oauth_token=evil&oauth_token_secret=evil&oauth_expires_in=0&xero_org_muid=e",
        "oauth_token=evil&oauth_token_secret=evil&oauth_expires_in=0&xero_org_muid= ",
        "oauth_token=evil&oauth_token_secret=evil&oauth_expires_in=0&xero_org_muid=6",
        "oauth_token=evil&oauth_token_secret=evil&oauth_expires_in=0&xero_org_muid=_",
        "oauth_token=evil&oauth_token_secret=evil&oauth_expires_in=00&xero_org_muid=evil",
        "oauth_token=evil&oauth_token_secret=evil&oauth_expires_in=&xero_org_muid=evil",
        "oauth_token=evil&oauth_token_secret==&oauth_expires_in=0&xero_org_muid=evil",
        "oauth_token=evil&oauth_token_secret=&&oauth_expires_in=0&xero_org_muid=evil",
        "oauth_token=evil&oauth_token_secret=eVil&oauth_expires_in=0&xero_org_muid=evil",
        "oauth_token=evil&oauth_token_secret=EVIL&oauth_expires_in=0&xero_org_muid=evil",
        "oauth_token=evil&oauth_token_secret=ev_il&oauth_expires_in=0&xero_org_muid=evil",
        "oauth_token=evil&oauth_token_secret=ev il&oauth_expires_in=0&xero_org_muid=evil",
        "oauth_token=evil&oauth_token_secret=ev4il&oauth_expires_in=0&xero_org_muid=evil",
        "oauth_token=evil&oauth_token_secret=e&oauth_expires_in=0&xero_org_muid=evil",
        "oauth_token=evil&oauth_token_secret= &oauth_expires_in=0&xero_org_muid=evil",
        "oauth_token=evil&oauth_token_secret=6&oauth_expires_in=0&xero_org_muid=evil",
        "oauth_token=evil&oauth_token_secret=_&oauth_expires_in=0&xero_org_muid=evil",
        "oauth_token=evil&oauth_token_secret=&oauth_expires_in=0&xero_org_muid=evil",
        "oauth_token==&oauth_token_secret=evil&oauth_expires_in=0&xero_org_muid=evil",
        "oauth_token=&&oauth_token_secret=evil&oauth_expires_in=0&xero_org_muid=evil",
        "oauth_token=eVil&oauth_token_secret=evil&oauth_expires_in=0&xero_org_muid=evil",
        "oauth_token=EVIL&oauth_token_secret=evil&oauth_expires_in=0&xero_org_muid=evil",
        "oauth_token=ev_il&oauth_token_secret=evil&oauth_expires_in=0&xero_org_muid=evil",
        "oauth_token=ev il&oauth_token_secret=evil&oauth_expires_in=0&xero_org_muid=evil",
        "oauth_token=ev4il&oauth_token_secret=evil&oauth_expires_in=0&xero_org_muid=evil",
        "oauth_token=e&oauth_token_secret=evil&oauth_expires_in=0&xero_org_muid=evil",
        "oauth_token= &oauth_token_secret=evil&oauth_expires_in=0&xero_org_muid=evil",
        "oauth_token=6&oauth_token_secret=evil&oauth_expires_in=0&xero_org_muid=evil",
        "oauth_token=_&oauth_token_secret=evil&oauth_expires_in=0&xero_org_muid=evil",
        "oauth_token=&oauth_token_secret=evil&oauth_expires_in=0&xero_org_muid=evil",
        "oauth_token=evil&oauth_token_secret=evil&oauth_expires_in=0&xero_org_muid=",
        "oauth_token=evil&oauth_token_secret=evil&oauth_expires_in=0&xero_org_muid=evil"
      ]
    },
    { "regex": "&piv;", "exceptionStackTrace": null, "matches": ["&piv;"] },
    {
      "regex": "visual recognition",
      "exceptionStackTrace": null,
      "matches": ["visual recognition"]
    },
    {
      "regex": "lager-[14]",
      "exceptionStackTrace": null,
      "matches": ["lager-1", "lager-0", "lager-4"]
    },
    {
      "regex": "^the page header should be \"([^\"]*)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "the page header should be \"\"\"",
        "the page header should be \"eVil\"",
        "the page header should be \"EVIL\"",
        "the page header should be \"ev_il\"",
        "the page header should be \"ev il\"",
        "the page header should be \"ev4il\"",
        "the page header should be \"e\"",
        "the page header should be \" \"",
        "the page header should be \"6\"",
        "the page header should be \"_\"",
        "the page header should be \"\"",
        "the page header should be \"evil\""
      ]
    },
    {
      "regex": "contains no requests",
      "exceptionStackTrace": null,
      "matches": ["contains no requests"]
    },
    {
      "regex": "[\\\"';,:]",
      "exceptionStackTrace": null,
      "matches": [";", ",", "'", "\"", ":"]
    },
    { "regex": "roman", "exceptionStackTrace": null, "matches": ["roman"] },
    {
      "regex": "\u6ce8\u6587\u53d6\u6d88\u53d7\u4ed8\u5b8c\u4e86",
      "exceptionStackTrace": null,
      "matches": ["\u6ce8\u6587\u53d6\u6d88\u53d7\u4ed8\u5b8c\u4e86"]
    },
    {
      "regex": "^\\s*b\\s+(\\d+)\\s+(\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        " b 0 00",
        " b 0 ",
        " b 0  0",
        " b 00",
        " b 00 0",
        " b  0",
        " b  0 0",
        " b0 0",
        "  b 0 0",
        "b 0 0",
        " b 0 0"
      ]
    },
    {
      "regex": "^\\d{5}\\-\\w{3,7}$",
      "exceptionStackTrace": null,
      "matches": [
        "00000-aaaaaaaa",
        "00000-aaaaaaa",
        "00000-aa",
        "00000-_aa",
        "00000-Aaa",
        "00000-0aa",
        "000000-aaa",
        "0000-aaa",
        "00000-aaa"
      ]
    },
    {
      "regex": "^SRC: (\\d+)\\/(\\d+)$",
      "exceptionStackTrace": null,
      "matches": ["SRC: 0/00", "SRC: 0/", "SRC: 00/0", "SRC: /0", "SRC: 0/0"]
    },
    {
      "regex": "/$base_filename[.]xs$",
      "exceptionStackTrace": null,
      "matches": ["/base_filename.xs"]
    },
    {
      "regex": "^[a-z]+-lib",
      "exceptionStackTrace": null,
      "matches": [
        "eVil-lib",
        "EVIL-lib",
        "ev_il-lib",
        "ev il-lib",
        "ev4il-lib",
        "e-lib",
        " -lib",
        "6-lib",
        "_-lib",
        "-lib",
        "evil-lib"
      ]
    },
    {
      "regex": "bind|connect",
      "exceptionStackTrace": null,
      "matches": ["connect", "bind"]
    },
    {
      "regex": "-o.*--option=VALUE.*Message about option",
      "exceptionStackTrace": null,
      "matches": [
        "-oevil--option=VALUE=Message about option",
        "-oevil--option=VALUE-Message about option",
        "-oevil--option=VALUEeVilMessage about option",
        "-oevil--option=VALUEEVILMessage about option",
        "-oevil--option=VALUEev_ilMessage about option",
        "-oevil--option=VALUEev ilMessage about option",
        "-oevil--option=VALUEev4ilMessage about option",
        "-oevil--option=VALUEeMessage about option",
        "-oevil--option=VALUE Message about option",
        "-oevil--option=VALUE6Message about option",
        "-oevil--option=VALUE_Message about option",
        "-oevil--option=VALUEMessage about option",
        "-o=--option=VALUEevilMessage about option",
        "-o---option=VALUEevilMessage about option",
        "-oeVil--option=VALUEevilMessage about option",
        "-oEVIL--option=VALUEevilMessage about option",
        "-oev_il--option=VALUEevilMessage about option",
        "-oev il--option=VALUEevilMessage about option",
        "-oev4il--option=VALUEevilMessage about option",
        "-oe--option=VALUEevilMessage about option",
        "-o --option=VALUEevilMessage about option",
        "-o6--option=VALUEevilMessage about option",
        "-o_--option=VALUEevilMessage about option",
        "-o--option=VALUEevilMessage about option",
        "-o--option=VALUEMessage about option",
        "-oevil--option=VALUEevilMessage about option"
      ]
    },
    { "regex": "^(475)", "exceptionStackTrace": null, "matches": ["475"] },
    {
      "regex": "[ML]S$",
      "exceptionStackTrace": null,
      "matches": ["MS", "AS", "LS"]
    },
    { "regex": "$dir_sep$", "exceptionStackTrace": null, "matches": ["dir_sep"] },
    { "regex": "[\\*\\!]$", "exceptionStackTrace": null, "matches": ["*", "!"] },
    {
      "regex": "[a-z_][\\w.-]*",
      "exceptionStackTrace": null,
      "matches": [
        "_.",
        "_-",
        "_eVil",
        "_EVIL",
        "_ev_il",
        "_ev il",
        "_ev4il",
        "_e",
        "_ ",
        "_6",
        "__",
        "aevil",
        "_",
        "_evil"
      ]
    },
    {
      "regex": "^\\.implements (L[^;]+;)",
      "exceptionStackTrace": null,
      "matches": [
        ".implements L;;",
        ".implements L.;",
        ".implements LeVil;",
        ".implements LEVIL;",
        ".implements Lev_il;",
        ".implements Lev il;",
        ".implements Lev4il;",
        ".implements Le;",
        ".implements L ;",
        ".implements L6;",
        ".implements L_;",
        ".implements L;",
        ".implements Levil;"
      ]
    },
    {
      "regex": "\\A[!\"\\u0024-\\u007e]+",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (bad range): Invalid range: $-~"
      },
      "matches": []
    },
    {
      "regex": "\\\"(\\w+)\\\"",
      "exceptionStackTrace": null,
      "matches": [
        "\"eVil\"",
        "\"EVIL\"",
        "\"ev_il\"",
        "\"ev il\"",
        "\"ev4il\"",
        "\"e\"",
        "\" \"",
        "\"6\"",
        "\"_\"",
        "\"\"",
        "\"evil\""
      ]
    },
    {
      "regex": "\\s*({|}|,|;|>)\\s*",
      "exceptionStackTrace": null,
      "matches": [
        " {  ",
        " {",
        "  { ",
        "{ ",
        ">",
        ";",
        ",",
        "}",
        "{",
        " > ",
        " ; ",
        " , ",
        " } ",
        " { "
      ]
    },
    {
      "regex": "alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex",
      "exceptionStackTrace": null,
      "matches": [
        "yandex",
        "yahoo!",
        "spider",
        "slurp",
        "pingdom",
        "postrank",
        "nagios",
        "google web preview",
        "feedburner",
        "facebookexternalhit",
        "crawling",
        "crawler",
        "bot",
        "alexa"
      ]
    },
    {
      "regex": "(Expression)?$",
      "exceptionStackTrace": null,
      "matches": ["ExpressionExpression", "", "Expression"]
    },
    {
      "regex": "\\+\"date\": \".*?\\.\\d*\"",
      "exceptionStackTrace": null,
      "matches": [
        "+\"date\": \"evil.00\"",
        "+\"date\": \"evil.\"",
        "+\"date\": \":.0\"",
        "+\"date\": \"..0\"",
        "+\"date\": \"+.0\"",
        "+\"date\": \"\".0\"",
        "+\"date\": \"eVil.0\"",
        "+\"date\": \"EVIL.0\"",
        "+\"date\": \"ev_il.0\"",
        "+\"date\": \"ev il.0\"",
        "+\"date\": \"ev4il.0\"",
        "+\"date\": \"e.0\"",
        "+\"date\": \" .0\"",
        "+\"date\": \"6.0\"",
        "+\"date\": \"_.0\"",
        "+\"date\": \".0\"",
        "+\"date\": \".\"",
        "+\"date\": \"evil.0\""
      ]
    },
    {
      "regex": "\\s+->\\s+",
      "exceptionStackTrace": null,
      "matches": [" ->  ", " ->", "  -> ", "-> ", " -> "]
    },
    {
      "regex": "^create_(",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "missing ), unterminated subpattern"
      },
      "matches": []
    },
    {
      "regex": "\\/|\\.pm",
      "exceptionStackTrace": null,
      "matches": [".pm", "/"]
    },
    {
      "regex": "^:IMAGE:(.*)",
      "exceptionStackTrace": null,
      "matches": [
        ":IMAGE::",
        ":IMAGE:eVil",
        ":IMAGE:EVIL",
        ":IMAGE:ev_il",
        ":IMAGE:ev il",
        ":IMAGE:ev4il",
        ":IMAGE:e",
        ":IMAGE: ",
        ":IMAGE:6",
        ":IMAGE:_",
        ":IMAGE:",
        ":IMAGE:evil"
      ]
    },
    {
      "regex": "<Response>",
      "exceptionStackTrace": null,
      "matches": ["<Response>"]
    },
    {
      "regex": "^branches:\\s+(.*);$",
      "exceptionStackTrace": null,
      "matches": [
        "branches: ;;",
        "branches: :;",
        "branches: eVil;",
        "branches: EVIL;",
        "branches: ev_il;",
        "branches: ev il;",
        "branches: ev4il;",
        "branches: e;",
        "branches:  ;",
        "branches: 6;",
        "branches: _;",
        "branches:  evil;",
        "branches:evil;",
        "branches: ;",
        "branches: evil;"
      ]
    },
    { "regex": "#ts", "exceptionStackTrace": null, "matches": ["#ts"] },
    {
      "regex": "translate\\([^)]*\\)\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        "translate(evil)  ",
        "translate(evil)",
        "translate()) ",
        "translate(() ",
        "translate(eVil) ",
        "translate(EVIL) ",
        "translate(ev_il) ",
        "translate(ev il) ",
        "translate(ev4il) ",
        "translate(e) ",
        "translate( ) ",
        "translate(6) ",
        "translate(_) ",
        "translate() ",
        "translate()",
        "translate(evil) "
      ]
    },
    {
      "regex": "\\\\\\}|\\\\\\\\",
      "exceptionStackTrace": null,
      "matches": ["\\\\", "\\}"]
    },
    {
      "regex": "Can't exec",
      "exceptionStackTrace": null,
      "matches": ["Can't exec"]
    },
    {
      "regex": "^(?:Wpt|Trk|Rte)_(?:data|hdr)$",
      "exceptionStackTrace": null,
      "matches": ["Rte_data", "Trk_data", "Wpt_hdr", "Wpt_data"]
    },
    {
      "regex": "/org/pantsbuild/consumer:consumer\\)[^[]*\\[compile\\][^[]*\\[zinc\\]\\W*\\[info\\] Compile success",
      "exceptionStackTrace": null,
      "matches": [
        "/org/pantsbuild/consumer:consumer)evil[compile]evil[zinc];;[info] Compile success",
        "/org/pantsbuild/consumer:consumer)evil[compile]evil[zinc][info] Compile success",
        "/org/pantsbuild/consumer:consumer)evil[compile]evil[zinc]a[info] Compile success",
        "/org/pantsbuild/consumer:consumer)evil[compile]evil[zinc]_[info] Compile success",
        "/org/pantsbuild/consumer:consumer)evil[compile]evil[zinc]][info] Compile success",
        "/org/pantsbuild/consumer:consumer)evil[compile]evil[zinc][[info] Compile success",
        "/org/pantsbuild/consumer:consumer)evil[compile]evil[zinc]A[info] Compile success",
        "/org/pantsbuild/consumer:consumer)evil[compile]evil[zinc]:[info] Compile success",
        "/org/pantsbuild/consumer:consumer)evil[compile]evil[zinc]0[info] Compile success",
        "/org/pantsbuild/consumer:consumer)evil[compile]evil[zinc]/[info] Compile success",
        "/org/pantsbuild/consumer:consumer)evil[compile]evil[zinc])[info] Compile success",
        "/org/pantsbuild/consumer:consumer)evil[compile]evil[zinc] [info] Compile success",
        "/org/pantsbuild/consumer:consumer)evil[compile]][zinc];[info] Compile success",
        "/org/pantsbuild/consumer:consumer)evil[compile][[zinc];[info] Compile success",
        "/org/pantsbuild/consumer:consumer)evil[compile]:[zinc];[info] Compile success",
        "/org/pantsbuild/consumer:consumer)evil[compile]/[zinc];[info] Compile success",
        "/org/pantsbuild/consumer:consumer)evil[compile])[zinc];[info] Compile success",
        "/org/pantsbuild/consumer:consumer)evil[compile]eVil[zinc];[info] Compile success",
        "/org/pantsbuild/consumer:consumer)evil[compile]EVIL[zinc];[info] Compile success",
        "/org/pantsbuild/consumer:consumer)evil[compile]ev_il[zinc];[info] Compile success",
        "/org/pantsbuild/consumer:consumer)evil[compile]ev il[zinc];[info] Compile success",
        "/org/pantsbuild/consumer:consumer)evil[compile]ev4il[zinc];[info] Compile success",
        "/org/pantsbuild/consumer:consumer)evil[compile]e[zinc];[info] Compile success",
        "/org/pantsbuild/consumer:consumer)evil[compile] [zinc];[info] Compile success",
        "/org/pantsbuild/consumer:consumer)evil[compile]6[zinc];[info] Compile success",
        "/org/pantsbuild/consumer:consumer)evil[compile]_[zinc];[info] Compile success",
        "/org/pantsbuild/consumer:consumer)evil[compile][zinc];[info] Compile success",
        "/org/pantsbuild/consumer:consumer)][compile]evil[zinc];[info] Compile success",
        "/org/pantsbuild/consumer:consumer)[[compile]evil[zinc];[info] Compile success",
        "/org/pantsbuild/consumer:consumer):[compile]evil[zinc];[info] Compile success",
        "/org/pantsbuild/consumer:consumer)/[compile]evil[zinc];[info] Compile success",
        "/org/pantsbuild/consumer:consumer))[compile]evil[zinc];[info] Compile success",
        "/org/pantsbuild/consumer:consumer)eVil[compile]evil[zinc];[info] Compile success",
        "/org/pantsbuild/consumer:consumer)EVIL[compile]evil[zinc];[info] Compile success",
        "/org/pantsbuild/consumer:consumer)ev_il[compile]evil[zinc];[info] Compile success",
        "/org/pantsbuild/consumer:consumer)ev il[compile]evil[zinc];[info] Compile success",
        "/org/pantsbuild/consumer:consumer)ev4il[compile]evil[zinc];[info] Compile success",
        "/org/pantsbuild/consumer:consumer)e[compile]evil[zinc];[info] Compile success",
        "/org/pantsbuild/consumer:consumer) [compile]evil[zinc];[info] Compile success",
        "/org/pantsbuild/consumer:consumer)6[compile]evil[zinc];[info] Compile success",
        "/org/pantsbuild/consumer:consumer)_[compile]evil[zinc];[info] Compile success",
        "/org/pantsbuild/consumer:consumer)[compile]evil[zinc];[info] Compile success",
        "/org/pantsbuild/consumer:consumer)[compile][zinc][info] Compile success",
        "/org/pantsbuild/consumer:consumer)evil[compile]evil[zinc];[info] Compile success"
      ]
    },
    {
      "regex": "\n        ^\n        package \\s*\n        (\\w+(::(?:\\w+))*)\n        \\s* ;\n    ",
      "exceptionStackTrace": null,
      "matches": [
        "\n        \n        package  \n        evil::evil\n           ;\n    ",
        "\n        \n        package  \n        evil::evil\n         ;\n    ",
        "\n        \n        package  \n        evil::evil::evil\n          ;\n    ",
        "\n        \n        package  \n        evil\n          ;\n    ",
        "\n        \n        package  \n        evil::eVil\n          ;\n    ",
        "\n        \n        package  \n        evil::EVIL\n          ;\n    ",
        "\n        \n        package  \n        evil::ev_il\n          ;\n    ",
        "\n        \n        package  \n        evil::ev il\n          ;\n    ",
        "\n        \n        package  \n        evil::ev4il\n          ;\n    ",
        "\n        \n        package  \n        evil::e\n          ;\n    ",
        "\n        \n        package  \n        evil:: \n          ;\n    ",
        "\n        \n        package  \n        evil::6\n          ;\n    ",
        "\n        \n        package  \n        evil::_\n          ;\n    ",
        "\n        \n        package  \n        evil::\n          ;\n    ",
        "\n        \n        package  \n        eVil::evil\n          ;\n    ",
        "\n        \n        package  \n        EVIL::evil\n          ;\n    ",
        "\n        \n        package  \n        ev_il::evil\n          ;\n    ",
        "\n        \n        package  \n        ev il::evil\n          ;\n    ",
        "\n        \n        package  \n        ev4il::evil\n          ;\n    ",
        "\n        \n        package  \n        e::evil\n          ;\n    ",
        "\n        \n        package  \n         ::evil\n          ;\n    ",
        "\n        \n        package  \n        6::evil\n          ;\n    ",
        "\n        \n        package  \n        _::evil\n          ;\n    ",
        "\n        \n        package  \n        ::evil\n          ;\n    ",
        "\n        \n        package   \n        evil::evil\n          ;\n    ",
        "\n        \n        package \n        evil::evil\n          ;\n    ",
        "\n        \n        package \n        evil\n         ;\n    ",
        "\n        \n        package  \n        evil::evil\n          ;\n    "
      ]
    },
    {
      "regex": "^[^'\"']",
      "exceptionStackTrace": null,
      "matches": ["A", "0", "'", "\"", " ", "a"]
    },
    {
      "regex": "(?:bs.table.)(\\w*)",
      "exceptionStackTrace": null,
      "matches": [
        "bsatableaeVil",
        "bsatableaEVIL",
        "bsatableaev_il",
        "bsatableaev il",
        "bsatableaev4il",
        "bsatableae",
        "bsatablea ",
        "bsatablea6",
        "bsatablea_",
        "bsatable_evil",
        "bsatableAevil",
        "bsatable0evil",
        "bsatable evil",
        "bs_tableaevil",
        "bsAtableaevil",
        "bs0tableaevil",
        "bs tableaevil",
        "bsatablea",
        "bsatableaevil"
      ]
    },
    {
      "regex": "(^\\+358|\\D)",
      "exceptionStackTrace": null,
      "matches": ["_", "A", "0", "+", " ", "a", "+358"]
    },
    {
      "regex": "<\\/script>",
      "exceptionStackTrace": null,
      "matches": ["</script>"]
    },
    {
      "regex": "image has no src or srcset attribute",
      "exceptionStackTrace": null,
      "matches": ["image has no src or srcset attribute"]
    },
    {
      "regex": "^r?[\\\"]{3}[\\s|\\S]*?[^\\\\][\\\"]{3}",
      "exceptionStackTrace": null,
      "matches": [
        "r\"\"\"evila\"\"\"\"",
        "r\"\"\"evila\"\"",
        "r\"\"\"evil|\"\"\"",
        "r\"\"\"evil\\\"\"\"",
        "r\"\"\"evilA\"\"\"",
        "r\"\"\"evil0\"\"\"",
        "r\"\"\"evil\"\"\"\"",
        "r\"\"\"evil \"\"\"",
        "r\"\"\"|a\"\"\"",
        "r\"\"\"\\a\"\"\"",
        "r\"\"\"\"a\"\"\"",
        "r\"\"\"eVila\"\"\"",
        "r\"\"\"EVILa\"\"\"",
        "r\"\"\"ev_ila\"\"\"",
        "r\"\"\"ev ila\"\"\"",
        "r\"\"\"ev4ila\"\"\"",
        "r\"\"\"ea\"\"\"",
        "r\"\"\" a\"\"\"",
        "r\"\"\"6a\"\"\"",
        "r\"\"\"_a\"\"\"",
        "r\"\"\"a\"\"\"",
        "r\"\"\"\"evila\"\"\"",
        "r\"\"evila\"\"\"",
        "rr\"\"\"evila\"\"\"",
        "\"\"\"evila\"\"\"",
        "\"\"\"a\"\"\"",
        "r\"\"\"evila\"\"\""
      ]
    },
    {
      "regex": "\\.FromJust\\(\\)",
      "exceptionStackTrace": null,
      "matches": [".FromJust()"]
    },
    {
      "regex": "([^\\\\])(['\"])(.*?)([^\\\\])\\2",
      "exceptionStackTrace": null,
      "matches": [
        "a\"evil\\\"",
        "a\"evilA\"",
        "a\"evil0\"",
        "a\"evil'\"",
        "a\"evil\"\"",
        "a\"evil \"",
        "a\"\\a\"",
        "a\"'a\"",
        "a\"\"a\"",
        "a\"eVila\"",
        "a\"EVILa\"",
        "a\"ev_ila\"",
        "a\"ev ila\"",
        "a\"ev4ila\"",
        "a\"ea\"",
        "a\" a\"",
        "a\"6a\"",
        "a\"_a\"",
        "a'evila\"",
        "\\\"evila\"",
        "A\"evila\"",
        "0\"evila\"",
        "'\"evila\"",
        "\"\"evila\"",
        " \"evila\"",
        "a\"a\"",
        "a\"evila\""
      ]
    },
    {
      "regex": "^(.+?) (Linux )?(release |version )?(.+?)( |$)",
      "exceptionStackTrace": null,
      "matches": [
        "evil Linux release eVil ",
        "evil Linux release EVIL ",
        "evil Linux release ev_il ",
        "evil Linux release ev il ",
        "evil Linux release ev4il ",
        "evil Linux release e ",
        "evil Linux release   ",
        "evil Linux release 6 ",
        "evil Linux release _ ",
        "evil Linux release  ",
        "evil Linux release release evil ",
        "evil Linux evil ",
        "evil Linux Linux release evil ",
        "evil release evil ",
        "eVil Linux release evil ",
        "EVIL Linux release evil ",
        "ev_il Linux release evil ",
        "ev il Linux release evil ",
        "ev4il Linux release evil ",
        "e Linux release evil ",
        "  Linux release evil ",
        "6 Linux release evil ",
        "_ Linux release evil ",
        " Linux release evil ",
        "evil evil",
        "evil evil ",
        "evil Linux version evil ",
        "evil Linux release evil",
        "evil Linux release evil "
      ]
    },
    { "regex": "($KEYS)", "exceptionStackTrace": null, "matches": ["KEYS"] },
    { "regex": "^ROLE", "exceptionStackTrace": null, "matches": ["ROLE"] },
    {
      "regex": "^(?:on update)\\s([\\_\\-\\s\\w\\d]+)",
      "exceptionStackTrace": null,
      "matches": [
        "on update -",
        "on update eVil",
        "on update EVIL",
        "on update ev_il",
        "on update ev il",
        "on update ev4il",
        "on update e",
        "on update  ",
        "on update 6",
        "on update _",
        "on update ",
        "on update evil"
      ]
    },
    {
      "regex": "run_exports_subpkg\\ 1\\.0\\ 0",
      "exceptionStackTrace": null,
      "matches": ["run_exports_subpkg 1.0 0"]
    },
    {
      "regex": "^#x([0-9a-f]+)",
      "exceptionStackTrace": null,
      "matches": ["#xaa", "#x", "#xg", "#x0", "#xa"]
    },
    {
      "regex": "\"([^\\\\\\\"\\n]|\\\\[\\\\\"\\'nrbtfav\\?]|\\\\[0-7]{1,3}|\\\\x[0-9a-fA-F]+|\\\\[uU]([0-9a-fA-F]{4})([0-9a-fA-F]{4})?)*\"",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^I should( not)? see the (?:number|amount) ([\\-\\d,\\.]+)(?: (.*?))?$",
      "exceptionStackTrace": null,
      "matches": [
        "I should not see the number . evil evil",
        "I should not see the number .",
        "I should not see the number . .",
        "I should not see the number . -",
        "I should not see the number . ,",
        "I should not see the number . eVil",
        "I should not see the number . EVIL",
        "I should not see the number . ev_il",
        "I should not see the number . ev il",
        "I should not see the number . ev4il",
        "I should not see the number . e",
        "I should not see the number .  ",
        "I should not see the number . 6",
        "I should not see the number . _",
        "I should not see the number . ",
        "I should not see the number .. evil",
        "I should not see the number  evil",
        "I should not see the number 0 evil",
        "I should not see the number - evil",
        "I should not see the number , evil",
        "I should not not see the number . evil",
        "I should see the number . evil",
        "I should see the amount .",
        "I should see the number .",
        "I should not see the amount . evil",
        "I should not see the number . evil"
      ]
    },
    {
      "regex": "all|approved|unapproved",
      "exceptionStackTrace": null,
      "matches": ["unapproved", "approved", "all"]
    },
    {
      "regex": "(?<![<>])(<[A-DF-Z][^>]*>[Aa]<\\/[A-DF-Z]> (?:<[AN][^>]*>[Bb]'[^<]+<\\/[AN]>))(?![<>])",
      "exceptionStackTrace": null,
      "matches": [
        "<Fevil>a</F> <Nevil>b'evil</B>",
        "<Fevil>a</F> <Nevil>b'evil</A>",
        "<Fevil>a</F> <Nevil>b'></N>",
        "<Fevil>a</F> <Nevil>b'<</N>",
        "<Fevil>a</F> <Nevil>b'/</N>",
        "<Fevil>a</F> <Nevil>b''</N>",
        "<Fevil>a</F> <Nevil>b'eVil</N>",
        "<Fevil>a</F> <Nevil>b'EVIL</N>",
        "<Fevil>a</F> <Nevil>b'ev_il</N>",
        "<Fevil>a</F> <Nevil>b'ev il</N>",
        "<Fevil>a</F> <Nevil>b'ev4il</N>",
        "<Fevil>a</F> <Nevil>b'e</N>",
        "<Fevil>a</F> <Nevil>b' </N>",
        "<Fevil>a</F> <Nevil>b'6</N>",
        "<Fevil>a</F> <Nevil>b'_</N>",
        "<Fevil>a</F> <Nevil>b'</N>",
        "<Fevil>a</F> <Nevil>a'evil</N>",
        "<Fevil>a</F> <Nevil>B'evil</N>",
        "<Fevil>a</F> <Nevil>A'evil</N>",
        "<Fevil>a</F> <N>>b'evil</N>",
        "<Fevil>a</F> <N<>b'evil</N>",
        "<Fevil>a</F> <N/>b'evil</N>",
        "<Fevil>a</F> <N'>b'evil</N>",
        "<Fevil>a</F> <NeVil>b'evil</N>",
        "<Fevil>a</F> <NEVIL>b'evil</N>",
        "<Fevil>a</F> <Nev_il>b'evil</N>",
        "<Fevil>a</F> <Nev il>b'evil</N>",
        "<Fevil>a</F> <Nev4il>b'evil</N>",
        "<Fevil>a</F> <Ne>b'evil</N>",
        "<Fevil>a</F> <N >b'evil</N>",
        "<Fevil>a</F> <N6>b'evil</N>",
        "<Fevil>a</F> <N_>b'evil</N>",
        "<Fevil>a</F> <N>b'evil</N>",
        "<Fevil>a</F> <Bevil>b'evil</N>",
        "<Fevil>a</F> <Aevil>b'evil</N>",
        "<Fevil>a</E> <Nevil>b'evil</N>",
        "<Fevil>a</A> <Nevil>b'evil</N>",
        "<Fevil>b</F> <Nevil>b'evil</N>",
        "<Fevil>B</F> <Nevil>b'evil</N>",
        "<Fevil>A</F> <Nevil>b'evil</N>",
        "<F>>a</F> <Nevil>b'evil</N>",
        "<F<>a</F> <Nevil>b'evil</N>",
        "<F/>a</F> <Nevil>b'evil</N>",
        "<F'>a</F> <Nevil>b'evil</N>",
        "<FeVil>a</F> <Nevil>b'evil</N>",
        "<FEVIL>a</F> <Nevil>b'evil</N>",
        "<Fev_il>a</F> <Nevil>b'evil</N>",
        "<Fev il>a</F> <Nevil>b'evil</N>",
        "<Fev4il>a</F> <Nevil>b'evil</N>",
        "<Fe>a</F> <Nevil>b'evil</N>",
        "<F >a</F> <Nevil>b'evil</N>",
        "<F6>a</F> <Nevil>b'evil</N>",
        "<F_>a</F> <Nevil>b'evil</N>",
        "<F>a</F> <Nevil>b'evil</N>",
        "<Eevil>a</F> <Nevil>b'evil</N>",
        "<Aevil>a</F> <Nevil>b'evil</N>",
        "<F>a</F> <N>b'evil</N>",
        "<Fevil>a</F> <Nevil>b'evil</N>"
      ]
    },
    {
      "regex": "^([^-]+-[^-]+)(-[^-]+)?$",
      "exceptionStackTrace": null,
      "matches": [
        "evil-evil-evil-evil",
        "evil-evil--",
        "evil-evil-eVil",
        "evil-evil-EVIL",
        "evil-evil-ev_il",
        "evil-evil-ev il",
        "evil-evil-ev4il",
        "evil-evil-e",
        "evil-evil- ",
        "evil-evil-6",
        "evil-evil-_",
        "evil-evil-",
        "evil---evil",
        "evil-eVil-evil",
        "evil-EVIL-evil",
        "evil-ev_il-evil",
        "evil-ev il-evil",
        "evil-ev4il-evil",
        "evil-e-evil",
        "evil- -evil",
        "evil-6-evil",
        "evil-_-evil",
        "evil--evil",
        "--evil-evil",
        "eVil-evil-evil",
        "EVIL-evil-evil",
        "ev_il-evil-evil",
        "ev il-evil-evil",
        "ev4il-evil-evil",
        "e-evil-evil",
        " -evil-evil",
        "6-evil-evil",
        "_-evil-evil",
        "-evil-evil",
        "evil-evil",
        "evil-evil-evil"
      ]
    },
    {
      "regex": "^(.*)\\.(.*)\\((.*)\\)(.*)  ::  (.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil.evil(evil)evil  ::  :",
        "evil.evil(evil)evil  ::  .",
        "evil.evil(evil)evil  ::  )",
        "evil.evil(evil)evil  ::  (",
        "evil.evil(evil)evil  ::  eVil",
        "evil.evil(evil)evil  ::  EVIL",
        "evil.evil(evil)evil  ::  ev_il",
        "evil.evil(evil)evil  ::  ev il",
        "evil.evil(evil)evil  ::  ev4il",
        "evil.evil(evil)evil  ::  e",
        "evil.evil(evil)evil  ::   ",
        "evil.evil(evil)evil  ::  6",
        "evil.evil(evil)evil  ::  _",
        "evil.evil(evil)evil  ::  ",
        "evil.evil(evil):  ::  evil",
        "evil.evil(evil).  ::  evil",
        "evil.evil(evil))  ::  evil",
        "evil.evil(evil)(  ::  evil",
        "evil.evil(evil)eVil  ::  evil",
        "evil.evil(evil)EVIL  ::  evil",
        "evil.evil(evil)ev_il  ::  evil",
        "evil.evil(evil)ev il  ::  evil",
        "evil.evil(evil)ev4il  ::  evil",
        "evil.evil(evil)e  ::  evil",
        "evil.evil(evil)   ::  evil",
        "evil.evil(evil)6  ::  evil",
        "evil.evil(evil)_  ::  evil",
        "evil.evil(evil)  ::  evil",
        "evil.evil(:)evil  ::  evil",
        "evil.evil(.)evil  ::  evil",
        "evil.evil())evil  ::  evil",
        "evil.evil(()evil  ::  evil",
        "evil.evil(eVil)evil  ::  evil",
        "evil.evil(EVIL)evil  ::  evil",
        "evil.evil(ev_il)evil  ::  evil",
        "evil.evil(ev il)evil  ::  evil",
        "evil.evil(ev4il)evil  ::  evil",
        "evil.evil(e)evil  ::  evil",
        "evil.evil( )evil  ::  evil",
        "evil.evil(6)evil  ::  evil",
        "evil.evil(_)evil  ::  evil",
        "evil.evil()evil  ::  evil",
        "evil.:(evil)evil  ::  evil",
        "evil..(evil)evil  ::  evil",
        "evil.)(evil)evil  ::  evil",
        "evil.((evil)evil  ::  evil",
        "evil.eVil(evil)evil  ::  evil",
        "evil.EVIL(evil)evil  ::  evil",
        "evil.ev_il(evil)evil  ::  evil",
        "evil.ev il(evil)evil  ::  evil",
        "evil.ev4il(evil)evil  ::  evil",
        "evil.e(evil)evil  ::  evil",
        "evil. (evil)evil  ::  evil",
        "evil.6(evil)evil  ::  evil",
        "evil._(evil)evil  ::  evil",
        "evil.(evil)evil  ::  evil",
        ":.evil(evil)evil  ::  evil",
        "..evil(evil)evil  ::  evil",
        ").evil(evil)evil  ::  evil",
        "(.evil(evil)evil  ::  evil",
        "eVil.evil(evil)evil  ::  evil",
        "EVIL.evil(evil)evil  ::  evil",
        "ev_il.evil(evil)evil  ::  evil",
        "ev il.evil(evil)evil  ::  evil",
        "ev4il.evil(evil)evil  ::  evil",
        "e.evil(evil)evil  ::  evil",
        " .evil(evil)evil  ::  evil",
        "6.evil(evil)evil  ::  evil",
        "_.evil(evil)evil  ::  evil",
        ".evil(evil)evil  ::  evil",
        ".()  ::  ",
        "evil.evil(evil)evil  ::  evil"
      ]
    },
    {
      "regex": "^([0-2]?\\d)[:.,]([0-5]?\\d)(?:[:.,][0-5]?\\d)?(?:\\s*([ap]m))?\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "^(?:def|with)",
      "exceptionStackTrace": null,
      "matches": ["with", "def"]
    },
    { "regex": "\\:\\: ", "exceptionStackTrace": null, "matches": [":: "] },
    {
      "regex": "\\G%(tree((?:\\s+(?:bypass|alias)){0,2}))",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\G"
      },
      "matches": []
    },
    {
      "regex": "100[2-5]",
      "exceptionStackTrace": null,
      "matches": ["1000", "1002"]
    },
    {
      "regex": "(\\=)[\\s\\w :.\\?']*(\\=)",
      "exceptionStackTrace": null,
      "matches": [
        "=?=",
        "===",
        "=:=",
        "=.=",
        "='=",
        "=eVil=",
        "=EVIL=",
        "=ev_il=",
        "=ev il=",
        "=ev4il=",
        "=e=",
        "= =",
        "=6=",
        "=_=",
        "==",
        "=evil="
      ]
    },
    {
      "regex": "\\A(mentioner_.+)\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "\\A(?:^\\* THREAD )",
      "exceptionStackTrace": null,
      "matches": ["* THREAD "]
    },
    {
      "regex": "^\"([^\"]*)\" should( not)? be checked in the speedbar$",
      "exceptionStackTrace": null,
      "matches": [
        "\"evil\" should not not be checked in the speedbar",
        "\"evil\" should be checked in the speedbar",
        "\"\"\" should not be checked in the speedbar",
        "\"eVil\" should not be checked in the speedbar",
        "\"EVIL\" should not be checked in the speedbar",
        "\"ev_il\" should not be checked in the speedbar",
        "\"ev il\" should not be checked in the speedbar",
        "\"ev4il\" should not be checked in the speedbar",
        "\"e\" should not be checked in the speedbar",
        "\" \" should not be checked in the speedbar",
        "\"6\" should not be checked in the speedbar",
        "\"_\" should not be checked in the speedbar",
        "\"\" should not be checked in the speedbar",
        "\"\" should be checked in the speedbar",
        "\"evil\" should not be checked in the speedbar"
      ]
    },
    {
      "regex": "(.*)\\.(\\d+)\\.",
      "exceptionStackTrace": null,
      "matches": [
        "evil.00.",
        "evil..",
        "..0.",
        "eVil.0.",
        "EVIL.0.",
        "ev_il.0.",
        "ev il.0.",
        "ev4il.0.",
        "e.0.",
        " .0.",
        "6.0.",
        "_.0.",
        ".0.",
        "evil.0."
      ]
    },
    {
      "regex": "\\u00A2",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 162"
      },
      "matches": []
    },
    {
      "regex": "pager_number|pager",
      "exceptionStackTrace": null,
      "matches": ["pager", "pager_number"]
    },
    {
      "regex": "\\A/[/*]!",
      "exceptionStackTrace": null,
      "matches": ["//!", "/*!"]
    },
    {
      "regex": "^massfilesarea",
      "exceptionStackTrace": null,
      "matches": ["massfilesarea"]
    },
    {
      "regex": "(\\<\\/?)([^<>]+?)(\\>)",
      "exceptionStackTrace": null,
      "matches": [
        "</>>",
        "</<>",
        "<//>",
        "</eVil>",
        "</EVIL>",
        "</ev_il>",
        "</ev il>",
        "</ev4il>",
        "</e>",
        "</ >",
        "</6>",
        "</_>",
        "</>",
        "<//evil>",
        "<evil>",
        "</evil>"
      ]
    },
    {
      "regex": "\\Acore(?:\\.[0-9]+)*\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "[o0]",
      "exceptionStackTrace": null,
      "matches": ["o", "a", "1", "0"]
    },
    {
      "regex": "[\\s\\S]+\\.xls(x)?$",
      "exceptionStackTrace": null,
      "matches": [
        "evil.xlsxx",
        "..xlsx",
        "eVil.xlsx",
        "EVIL.xlsx",
        "ev_il.xlsx",
        "ev il.xlsx",
        "ev4il.xlsx",
        "e.xlsx",
        " .xlsx",
        "6.xlsx",
        "_.xlsx",
        ".xlsx",
        "evil.xls",
        "evil.xlsx"
      ]
    },
    {
      "regex": "--instances crazy-ass-amazon-1243324321.domain localhost simpler.domain",
      "exceptionStackTrace": null,
      "matches": [
        "--instances crazy-ass-amazon-1243324321adomain localhost simplerAdomain",
        "--instances crazy-ass-amazon-1243324321adomain localhost simpler0domain",
        "--instances crazy-ass-amazon-1243324321adomain localhost simpler-domain",
        "--instances crazy-ass-amazon-1243324321adomain localhost simpler domain",
        "--instances crazy-ass-amazon-1243324321Adomain localhost simpleradomain",
        "--instances crazy-ass-amazon-12433243210domain localhost simpleradomain",
        "--instances crazy-ass-amazon-1243324321-domain localhost simpleradomain",
        "--instances crazy-ass-amazon-1243324321 domain localhost simpleradomain",
        "--instances crazy-ass-amazon-1243324321adomain localhost simpleradomain"
      ]
    },
    {
      "regex": "(\\D{1,3})(\\d{3,4})",
      "exceptionStackTrace": null,
      "matches": [
        "a00000",
        "a0000",
        "a00",
        "aaaa000",
        "aaa000",
        "000",
        "_000",
        "A000",
        "0000",
        " 000",
        "a000"
      ]
    },
    { "regex": "[BJ]", "exceptionStackTrace": null, "matches": ["B", "A", "J"] },
    {
      "regex": "^[\\t ]*//",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": " \"two apples\" ",
      "exceptionStackTrace": null,
      "matches": [" \"two apples\" "]
    },
    { "regex": "^EFI$", "exceptionStackTrace": null, "matches": ["EFI"] },
    {
      "regex": "(\\?|&)responseType=json",
      "exceptionStackTrace": null,
      "matches": ["&responseType=json", "?responseType=json"]
    },
    {
      "regex": "^undo\\s*$",
      "exceptionStackTrace": null,
      "matches": ["undo  ", "undo", "undo "]
    },
    {
      "regex": "Rick Deckard",
      "exceptionStackTrace": null,
      "matches": ["Rick Deckard"]
    },
    {
      "regex": "^(>=|<=|!=)",
      "exceptionStackTrace": null,
      "matches": ["!=", "<=", ">="]
    },
    {
      "regex": "^[^:]+:[^:]+:[^:]+(:[^:]+)*$",
      "exceptionStackTrace": null,
      "matches": [
        "evil:evil:evil:evil:evil",
        "evil:evil:evil::",
        "evil:evil:evil:eVil",
        "evil:evil:evil:EVIL",
        "evil:evil:evil:ev_il",
        "evil:evil:evil:ev il",
        "evil:evil:evil:ev4il",
        "evil:evil:evil:e",
        "evil:evil:evil: ",
        "evil:evil:evil:6",
        "evil:evil:evil:_",
        "evil:evil:evil:",
        "evil:evil:::evil",
        "evil:evil:eVil:evil",
        "evil:evil:EVIL:evil",
        "evil:evil:ev_il:evil",
        "evil:evil:ev il:evil",
        "evil:evil:ev4il:evil",
        "evil:evil:e:evil",
        "evil:evil: :evil",
        "evil:evil:6:evil",
        "evil:evil:_:evil",
        "evil:evil::evil",
        "evil:::evil:evil",
        "evil:eVil:evil:evil",
        "evil:EVIL:evil:evil",
        "evil:ev_il:evil:evil",
        "evil:ev il:evil:evil",
        "evil:ev4il:evil:evil",
        "evil:e:evil:evil",
        "evil: :evil:evil",
        "evil:6:evil:evil",
        "evil:_:evil:evil",
        "evil::evil:evil",
        "::evil:evil:evil",
        "eVil:evil:evil:evil",
        "EVIL:evil:evil:evil",
        "ev_il:evil:evil:evil",
        "ev il:evil:evil:evil",
        "ev4il:evil:evil:evil",
        "e:evil:evil:evil",
        " :evil:evil:evil",
        "6:evil:evil:evil",
        "_:evil:evil:evil",
        ":evil:evil:evil",
        "evil:evil:evil",
        "evil:evil:evil:evil"
      ]
    },
    {
      "regex": "\\/style\\/?'",
      "exceptionStackTrace": null,
      "matches": ["/style//'", "/style'", "/style/'"]
    },
    {
      "regex": "&darr;?",
      "exceptionStackTrace": null,
      "matches": ["&darr;;", "&darr", "&darr;"]
    },
    {
      "regex": "^[A-Z]{3}[0-9]{5}\\.\\d",
      "exceptionStackTrace": null,
      "matches": [
        "AAA000000.0",
        "AAA0000.0",
        "AAAA00000.0",
        "AA00000.0",
        "AAA00000.0"
      ]
    },
    {
      "regex": "^=\\w",
      "exceptionStackTrace": null,
      "matches": ["=_", "=A", "=0", "=a"]
    },
    {
      "regex": "^\\\\s*--\\\\s*id:\\\\s*(\\\\S+)",
      "exceptionStackTrace": null,
      "matches": [
        "\\s--\\sid:\\s\\SS",
        "\\s--\\sid:\\s\\",
        "\\s--\\sid:\\ss\\S",
        "\\s--\\sid:\\\\S",
        "\\s--\\ssid:\\s\\S",
        "\\s--\\id:\\s\\S",
        "\\ss--\\sid:\\s\\S",
        "\\--\\sid:\\s\\S",
        "\\--\\id:\\\\S",
        "\\s--\\sid:\\s\\S"
      ]
    },
    {
      "regex": "^sequenceflow-end-white-black-[A-Za-z0-9]+$",
      "exceptionStackTrace": null,
      "matches": [
        "sequenceflow-end-white-black-eVil",
        "sequenceflow-end-white-black-EVIL",
        "sequenceflow-end-white-black-ev_il",
        "sequenceflow-end-white-black-ev il",
        "sequenceflow-end-white-black-ev4il",
        "sequenceflow-end-white-black-e",
        "sequenceflow-end-white-black- ",
        "sequenceflow-end-white-black-6",
        "sequenceflow-end-white-black-_",
        "sequenceflow-end-white-black-",
        "sequenceflow-end-white-black-evil"
      ]
    },
    {
      "regex": "-firsthop$",
      "exceptionStackTrace": null,
      "matches": ["-firsthop"]
    },
    {
      "regex": "^%%Feature:\\s*\\*Resolution\\s*(\\d+)dpi",
      "exceptionStackTrace": null,
      "matches": [
        "%%Feature: *Resolution 00dpi",
        "%%Feature: *Resolution dpi",
        "%%Feature: *Resolution  0dpi",
        "%%Feature: *Resolution0dpi",
        "%%Feature:  *Resolution 0dpi",
        "%%Feature:*Resolution 0dpi",
        "%%Feature:*Resolution0dpi",
        "%%Feature: *Resolution 0dpi"
      ]
    },
    {
      "regex": "([$v])\\1                $ ",
      "exceptionStackTrace": null,
      "matches": [
        "av                 ",
        "$v                 ",
        "vv                 "
      ]
    },
    { "regex": "\\.(?=e|$)", "exceptionStackTrace": null, "matches": ["."] },
    {
      "regex": "(\\w{3,9})\\s+(\\d{1,2}),\\s+(\\d{4})",
      "exceptionStackTrace": null,
      "matches": [
        "aaa 0, 00000",
        "aaa 0, 000",
        "aaa 0,  0000",
        "aaa 0,0000",
        "aaa 000, 0000",
        "aaa 00, 0000",
        "aaa , 0000",
        "aaa  0, 0000",
        "aaa0, 0000",
        "aaaaaaaaaa 0, 0000",
        "aaaaaaaaa 0, 0000",
        "aa 0, 0000",
        "_aa 0, 0000",
        "Aaa 0, 0000",
        "0aa 0, 0000",
        "aaa 0, 0000"
      ]
    },
    {
      "regex": "^([A-Za-z-]+:)?\\/",
      "exceptionStackTrace": null,
      "matches": [
        "evil:evil:/",
        "::/",
        "/:/",
        "-:/",
        "eVil:/",
        "EVIL:/",
        "ev_il:/",
        "ev il:/",
        "ev4il:/",
        "e:/",
        " :/",
        "6:/",
        "_:/",
        ":/",
        "/",
        "evil:/"
      ]
    },
    { "regex": "\\bUSER\\b", "exceptionStackTrace": null, "matches": ["USER"] },
    {
      "regex": "vmrun version (\\\\d+\\\\.\\\\d+\\\\.\\\\d+) build-(\\\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "vmrun version \\d\\a\\d\\a\\d build-\\dd",
        "vmrun version \\d\\a\\d\\a\\d build-\\",
        "vmrun version \\d\\a\\d\\a\\dd build-\\d",
        "vmrun version \\d\\a\\d\\a\\ build-\\d",
        "vmrun version \\d\\a\\d\\\\\\d build-\\d",
        "vmrun version \\d\\a\\d\\A\\d build-\\d",
        "vmrun version \\d\\a\\d\\0\\d build-\\d",
        "vmrun version \\d\\a\\d\\-\\d build-\\d",
        "vmrun version \\d\\a\\d\\ \\d build-\\d",
        "vmrun version \\d\\a\\dd\\a\\d build-\\d",
        "vmrun version \\d\\a\\\\a\\d build-\\d",
        "vmrun version \\d\\\\\\d\\a\\d build-\\d",
        "vmrun version \\d\\A\\d\\a\\d build-\\d",
        "vmrun version \\d\\0\\d\\a\\d build-\\d",
        "vmrun version \\d\\-\\d\\a\\d build-\\d",
        "vmrun version \\d\\ \\d\\a\\d build-\\d",
        "vmrun version \\dd\\a\\d\\a\\d build-\\d",
        "vmrun version \\\\a\\d\\a\\d build-\\d",
        "vmrun version \\d\\a\\d\\a\\d build-\\d"
      ]
    },
    {
      "regex": "\\b(@|System)\\b",
      "exceptionStackTrace": null,
      "matches": ["System", "@"]
    },
    {
      "regex": "a is {\"b\":{\"a\":\"...\"}},",
      "exceptionStackTrace": null,
      "matches": [
        "a is {\"b\":{\"a\":\"aa}\"}},",
        "a is {\"b\":{\"a\":\"aa{\"}},",
        "a is {\"b\":{\"a\":\"aaA\"}},",
        "a is {\"b\":{\"a\":\"aa:\"}},",
        "a is {\"b\":{\"a\":\"aa0\"}},",
        "a is {\"b\":{\"a\":\"aa,\"}},",
        "a is {\"b\":{\"a\":\"aa\"\"}},",
        "a is {\"b\":{\"a\":\"aa \"}},",
        "a is {\"b\":{\"a\":\"a}a\"}},",
        "a is {\"b\":{\"a\":\"a{a\"}},",
        "a is {\"b\":{\"a\":\"aAa\"}},",
        "a is {\"b\":{\"a\":\"a:a\"}},",
        "a is {\"b\":{\"a\":\"a0a\"}},",
        "a is {\"b\":{\"a\":\"a,a\"}},",
        "a is {\"b\":{\"a\":\"a\"a\"}},",
        "a is {\"b\":{\"a\":\"a a\"}},",
        "a is {\"b\":{\"a\":\"}aa\"}},",
        "a is {\"b\":{\"a\":\"{aa\"}},",
        "a is {\"b\":{\"a\":\"Aaa\"}},",
        "a is {\"b\":{\"a\":\":aa\"}},",
        "a is {\"b\":{\"a\":\"0aa\"}},",
        "a is {\"b\":{\"a\":\",aa\"}},",
        "a is {\"b\":{\"a\":\"\"aa\"}},",
        "a is {\"b\":{\"a\":\" aa\"}},",
        "a is {\"b\":{\"a\":\"aaa\"}},"
      ]
    },
    {
      "regex": "^x_.*[^!=]$",
      "exceptionStackTrace": null,
      "matches": [
        "x_evil_",
        "x_evilA",
        "x_evil=",
        "x_evil0",
        "x_evil!",
        "x_evil ",
        "x_=a",
        "x_!a",
        "x_eVila",
        "x_EVILa",
        "x_ev_ila",
        "x_ev ila",
        "x_ev4ila",
        "x_ea",
        "x_ a",
        "x_6a",
        "x__a",
        "x_a",
        "x_evila"
      ]
    },
    {
      "regex": "(\\s+|\\?|\\:|\\\\|/)",
      "exceptionStackTrace": null,
      "matches": ["  ", "", "/", "\\", ":", "?", " "]
    },
    {
      "regex": "([+-])?(?:0([0-7]+))",
      "exceptionStackTrace": null,
      "matches": ["-000", "-0", "-08", "--00", "+00", "00", "-00"]
    },
    { "regex": "\\b(and)\\b", "exceptionStackTrace": null, "matches": ["and"] },
    {
      "regex": "\\{\\$caret\\}",
      "exceptionStackTrace": null,
      "matches": ["{$caret}"]
    },
    {
      "regex": "^test.(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "testaeVil",
        "testaEVIL",
        "testaev_il",
        "testaev il",
        "testaev4il",
        "testae",
        "testa ",
        "testa6",
        "testa_",
        "test_evil",
        "testAevil",
        "test0evil",
        "test evil",
        "testa",
        "testaevil"
      ]
    },
    {
      "regex": "Power Usage \\(Watts\\):",
      "exceptionStackTrace": null,
      "matches": ["Power Usage (Watts):"]
    },
    {
      "regex": "^[ ]{0,3}",
      "exceptionStackTrace": null,
      "matches": ["    ", "   ", "", " "]
    },
    {
      "regex": "code); }\n    method is_error    () { HTTP::Status::is_error    (.",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unbalanced parenthesis"
      },
      "matches": []
    },
    {
      "regex": "^demo\\..+\\.php$",
      "exceptionStackTrace": null,
      "matches": [
        "demo...php",
        "demo.eVil.php",
        "demo.EVIL.php",
        "demo.ev_il.php",
        "demo.ev il.php",
        "demo.ev4il.php",
        "demo.e.php",
        "demo. .php",
        "demo.6.php",
        "demo._.php",
        "demo..php",
        "demo.evil.php"
      ]
    },
    {
      "regex": "^lastError(Dump)?$",
      "exceptionStackTrace": null,
      "matches": ["lastErrorDumpDump", "lastError", "lastErrorDump"]
    },
    {
      "regex": "^(\\s*org:\\s*)",
      "exceptionStackTrace": null,
      "matches": [" org:  ", " org:", "  org: ", "org: ", "org:", " org: "]
    },
    {
      "regex": "photo_id=[^&]*",
      "exceptionStackTrace": null,
      "matches": [
        "photo_id==",
        "photo_id=&",
        "photo_id=eVil",
        "photo_id=EVIL",
        "photo_id=ev_il",
        "photo_id=ev il",
        "photo_id=ev4il",
        "photo_id=e",
        "photo_id= ",
        "photo_id=6",
        "photo_id=_",
        "photo_id=",
        "photo_id=evil"
      ]
    },
    {
      "regex": "Can't locate object method \"(.*?)\" via package",
      "exceptionStackTrace": null,
      "matches": [
        "Can't locate object method \"'\" via package",
        "Can't locate object method \"\"\" via package",
        "Can't locate object method \"eVil\" via package",
        "Can't locate object method \"EVIL\" via package",
        "Can't locate object method \"ev_il\" via package",
        "Can't locate object method \"ev il\" via package",
        "Can't locate object method \"ev4il\" via package",
        "Can't locate object method \"e\" via package",
        "Can't locate object method \" \" via package",
        "Can't locate object method \"6\" via package",
        "Can't locate object method \"_\" via package",
        "Can't locate object method \"\" via package",
        "Can't locate object method \"evil\" via package"
      ]
    },
    {
      "regex": "XRefDef\\s+`(.+)'\\>",
      "exceptionStackTrace": null,
      "matches": [
        "XRefDef ``'>",
        "XRefDef `>'>",
        "XRefDef `''>",
        "XRefDef `eVil'>",
        "XRefDef `EVIL'>",
        "XRefDef `ev_il'>",
        "XRefDef `ev il'>",
        "XRefDef `ev4il'>",
        "XRefDef `e'>",
        "XRefDef ` '>",
        "XRefDef `6'>",
        "XRefDef `_'>",
        "XRefDef `'>",
        "XRefDef  `evil'>",
        "XRefDef`evil'>",
        "XRefDef `evil'>"
      ]
    },
    {
      "regex": "mysql|postgresql",
      "exceptionStackTrace": null,
      "matches": ["postgresql", "mysql"]
    },
    {
      "regex": "var\\s*\\(\\s*--[a-zA-Z0-9_-]+\\s*,\\s*(--[a-zA-Z0-9_-]+)\\s*\\)",
      "exceptionStackTrace": null,
      "matches": [
        "var ( --evil , --evil  )",
        "var ( --evil , --evil)",
        "var ( --evil , --- )",
        "var ( --evil , --, )",
        "var ( --evil , --) )",
        "var ( --evil , --( )",
        "var ( --evil , --eVil )",
        "var ( --evil , --EVIL )",
        "var ( --evil , --ev_il )",
        "var ( --evil , --ev il )",
        "var ( --evil , --ev4il )",
        "var ( --evil , --e )",
        "var ( --evil , --  )",
        "var ( --evil , --6 )",
        "var ( --evil , --_ )",
        "var ( --evil , -- )",
        "var ( --evil ,  --evil )",
        "var ( --evil ,--evil )",
        "var ( --evil  , --evil )",
        "var ( --evil, --evil )",
        "var ( --- , --evil )",
        "var ( --, , --evil )",
        "var ( --) , --evil )",
        "var ( --( , --evil )",
        "var ( --eVil , --evil )",
        "var ( --EVIL , --evil )",
        "var ( --ev_il , --evil )",
        "var ( --ev il , --evil )",
        "var ( --ev4il , --evil )",
        "var ( --e , --evil )",
        "var ( --  , --evil )",
        "var ( --6 , --evil )",
        "var ( --_ , --evil )",
        "var ( -- , --evil )",
        "var (  --evil , --evil )",
        "var (--evil , --evil )",
        "var  ( --evil , --evil )",
        "var( --evil , --evil )",
        "var(--evil,--evil)",
        "var ( --evil , --evil )"
      ]
    },
    {
      "regex": "\">\\u001e<\\/span>",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 30"
      },
      "matches": []
    },
    {
      "regex": "\\.\\.\\.(RESENT|RETRANSMITTED|CORRECTED)",
      "exceptionStackTrace": null,
      "matches": ["...CORRECTED", "...RETRANSMITTED", "...RESENT"]
    },
    {
      "regex": "\\bfilename=(\"(.*?)\"|([^\\(\\)<>@,;:\\\\\"\\/\\[\\]\\?=\\{\\}\\s\\t/]+))($|;\\s)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "^http:[\\/]+",
      "exceptionStackTrace": null,
      "matches": ["http://", "http:", "http:/"]
    },
    {
      "regex": "^(Everything in a single cell\\s{13}Everything in a single cell\\n){2}Everything in a single cell$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "n([bp])",
      "exceptionStackTrace": null,
      "matches": ["nb", "na", "np"]
    },
    {
      "regex": "^graph_([\\w]+)\\s(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "graph_evil eVil",
        "graph_evil EVIL",
        "graph_evil ev_il",
        "graph_evil ev il",
        "graph_evil ev4il",
        "graph_evil e",
        "graph_evil  ",
        "graph_evil 6",
        "graph_evil _",
        "graph_eVil evil",
        "graph_EVIL evil",
        "graph_ev_il evil",
        "graph_ev il evil",
        "graph_ev4il evil",
        "graph_e evil",
        "graph_  evil",
        "graph_6 evil",
        "graph__ evil",
        "graph_ evil",
        "graph_evil ",
        "graph_evil evil"
      ]
    },
    {
      "regex": "url\\(\\'http:\\/\\/base\\.url\\/deploy\\/assets\\/component-img-absolute\\.svg\\'\\)",
      "exceptionStackTrace": null,
      "matches": [
        "url('http://base.url/deploy/assets/component-img-absolute.svg')"
      ]
    },
    {
      "regex": "^[a-z0-9_$()+-/]+$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (bad range): Invalid range: +-/"
      },
      "matches": []
    },
    {
      "regex": "c[ei]r$",
      "exceptionStackTrace": null,
      "matches": ["cer", "car", "cir"]
    },
    {
      "regex": "((Plat|Scintilla)WX|scintilla)\\.o",
      "exceptionStackTrace": null,
      "matches": ["scintilla.o", "ScintillaWX.o", "PlatWX.o"]
    },
    {
      "regex": "(([^,\\s].[^\\s]+)\\s+(\\d+)w)",
      "exceptionStackTrace": null,
      "matches": [
        "aaevil 00w",
        "aaevil w",
        "aaevil  0w",
        "aaevil0w",
        "aa, 0w",
        "aaeVil 0w",
        "aaEVIL 0w",
        "aaev_il 0w",
        "aaev il 0w",
        "aaev4il 0w",
        "aae 0w",
        "aa  0w",
        "aa6 0w",
        "aa_ 0w",
        "aa 0w",
        "aAevil 0w",
        "a0evil 0w",
        "a,evil 0w",
        "a evil 0w",
        "Aaevil 0w",
        "0aevil 0w",
        ",aevil 0w",
        " aevil 0w",
        "aaevil 0w"
      ]
    },
    {
      "regex": "^the contents of the edit tab should be \"(.*)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "the contents of the edit tab should be \"\"\"",
        "the contents of the edit tab should be \"eVil\"",
        "the contents of the edit tab should be \"EVIL\"",
        "the contents of the edit tab should be \"ev_il\"",
        "the contents of the edit tab should be \"ev il\"",
        "the contents of the edit tab should be \"ev4il\"",
        "the contents of the edit tab should be \"e\"",
        "the contents of the edit tab should be \" \"",
        "the contents of the edit tab should be \"6\"",
        "the contents of the edit tab should be \"_\"",
        "the contents of the edit tab should be \"\"",
        "the contents of the edit tab should be \"evil\""
      ]
    },
    {
      "regex": "^the attachment should have the same file name as the fixture \"([^\"]*)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "the attachment should have the same file name as the fixture \"\"\"",
        "the attachment should have the same file name as the fixture \"eVil\"",
        "the attachment should have the same file name as the fixture \"EVIL\"",
        "the attachment should have the same file name as the fixture \"ev_il\"",
        "the attachment should have the same file name as the fixture \"ev il\"",
        "the attachment should have the same file name as the fixture \"ev4il\"",
        "the attachment should have the same file name as the fixture \"e\"",
        "the attachment should have the same file name as the fixture \" \"",
        "the attachment should have the same file name as the fixture \"6\"",
        "the attachment should have the same file name as the fixture \"_\"",
        "the attachment should have the same file name as the fixture \"\"",
        "the attachment should have the same file name as the fixture \"evil\""
      ]
    },
    {
      "regex": "=|\\0",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\0"
      },
      "matches": []
    },
    {
      "regex": "^[\\w\\-_\\.]+(?:\\:[\\w\\-_\\.]+){0,1}$",
      "exceptionStackTrace": null,
      "matches": [
        "evil:evil:evil",
        "evil::",
        "evil:.",
        "evil:-",
        "evil:eVil",
        "evil:EVIL",
        "evil:ev_il",
        "evil:ev il",
        "evil:ev4il",
        "evil:e",
        "evil: ",
        "evil:6",
        "evil:_",
        "evil:",
        "::evil",
        ".:evil",
        "-:evil",
        "eVil:evil",
        "EVIL:evil",
        "ev_il:evil",
        "ev il:evil",
        "ev4il:evil",
        "e:evil",
        " :evil",
        "6:evil",
        "_:evil",
        ":evil",
        "evil",
        "evil:evil"
      ]
    },
    {
      "regex": "^[\\w-]{0,20}$",
      "exceptionStackTrace": null,
      "matches": [
        "---------------------",
        "--------------------",
        "a",
        "_",
        "A",
        "0",
        "",
        "-"
      ]
    },
    {
      "regex": "\\[[^\\]]+\\] PHP (?:Warning|Error|Notice):",
      "exceptionStackTrace": null,
      "matches": [
        "[]] PHP Warning:",
        "[[] PHP Warning:",
        "[:] PHP Warning:",
        "[eVil] PHP Warning:",
        "[EVIL] PHP Warning:",
        "[ev_il] PHP Warning:",
        "[ev il] PHP Warning:",
        "[ev4il] PHP Warning:",
        "[e] PHP Warning:",
        "[ ] PHP Warning:",
        "[6] PHP Warning:",
        "[_] PHP Warning:",
        "[] PHP Warning:",
        "[evil] PHP Notice:",
        "[evil] PHP Error:",
        "[evil] PHP Warning:"
      ]
    },
    {
      "regex": "(word)([ \\t]+\\S+[ \\t]*)(\\S+)?([ \\t]+.*)?",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "(\\S+)[,:]\\s+(\\d+)\\s+(aa|nt)",
      "exceptionStackTrace": null,
      "matches": [
        "evil: 0  aa",
        "evil: 0aa",
        "evil: 00 aa",
        "evil:  aa",
        "evil:  0 aa",
        "evil:0 aa",
        "evil, 0 aa",
        ":: 0 aa",
        ",: 0 aa",
        "eVil: 0 aa",
        "EVIL: 0 aa",
        "ev_il: 0 aa",
        "ev il: 0 aa",
        "ev4il: 0 aa",
        "e: 0 aa",
        " : 0 aa",
        "6: 0 aa",
        "_: 0 aa",
        ": 0 aa",
        "evil: 0 nt",
        "evil: 0 aa"
      ]
    },
    {
      "regex": "^I should see \"([^\\\"]*)\" when running \"([^\\\"]*)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "I should see \"evil\" when running \"\"\"",
        "I should see \"evil\" when running \"eVil\"",
        "I should see \"evil\" when running \"EVIL\"",
        "I should see \"evil\" when running \"ev_il\"",
        "I should see \"evil\" when running \"ev il\"",
        "I should see \"evil\" when running \"ev4il\"",
        "I should see \"evil\" when running \"e\"",
        "I should see \"evil\" when running \" \"",
        "I should see \"evil\" when running \"6\"",
        "I should see \"evil\" when running \"_\"",
        "I should see \"evil\" when running \"\"",
        "I should see \"\"\" when running \"evil\"",
        "I should see \"eVil\" when running \"evil\"",
        "I should see \"EVIL\" when running \"evil\"",
        "I should see \"ev_il\" when running \"evil\"",
        "I should see \"ev il\" when running \"evil\"",
        "I should see \"ev4il\" when running \"evil\"",
        "I should see \"e\" when running \"evil\"",
        "I should see \" \" when running \"evil\"",
        "I should see \"6\" when running \"evil\"",
        "I should see \"_\" when running \"evil\"",
        "I should see \"\" when running \"evil\"",
        "I should see \"\" when running \"\"",
        "I should see \"evil\" when running \"evil\""
      ]
    },
    {
      "regex": "^(\\-|\\+)\\d{4}$",
      "exceptionStackTrace": null,
      "matches": ["-00000", "-000", "+0000", "-0000"]
    },
    {
      "regex": "list-children",
      "exceptionStackTrace": null,
      "matches": ["list-children"]
    },
    { "regex": " CSEWY ", "exceptionStackTrace": null, "matches": [" CSEWY "] },
    {
      "regex": "$sys_binlinet_new(.*?)$sys_einlinet_new",
      "exceptionStackTrace": null,
      "matches": [
        "sys_binlinet_neweVilsys_einlinet_new",
        "sys_binlinet_newEVILsys_einlinet_new",
        "sys_binlinet_newev_ilsys_einlinet_new",
        "sys_binlinet_newev ilsys_einlinet_new",
        "sys_binlinet_newev4ilsys_einlinet_new",
        "sys_binlinet_newesys_einlinet_new",
        "sys_binlinet_new sys_einlinet_new",
        "sys_binlinet_new6sys_einlinet_new",
        "sys_binlinet_new_sys_einlinet_new",
        "sys_binlinet_newsys_einlinet_new",
        "sys_binlinet_newevilsys_einlinet_new"
      ]
    },
    {
      "regex": "<[/]*body>",
      "exceptionStackTrace": null,
      "matches": ["<//body>", "<body>", "</body>"]
    },
    {
      "regex": "<#([0-9]{1,19})>",
      "exceptionStackTrace": null,
      "matches": [
        "<#00000000000000000000>",
        "<#0000000000000000000>",
        "<#>",
        "<#0>"
      ]
    },
    {
      "regex": "Invalid \"w-bind\" attribute",
      "exceptionStackTrace": null,
      "matches": ["Invalid \"w-bind\" attribute"]
    },
    {
      "regex": "^xsl:apply-templates",
      "exceptionStackTrace": null,
      "matches": ["xsl:apply-templates"]
    },
    {
      "regex": "translateY\\(([-+]?[\\d]*\\.?[\\d]+)(px)?\\)",
      "exceptionStackTrace": null,
      "matches": [
        "translateY(+0.0pxpx)",
        "translateY(+0.0)",
        "translateY(+0.00px)",
        "translateY(+0.px)",
        "translateY(+0..0px)",
        "translateY(+00px)",
        "translateY(+00.0px)",
        "translateY(+.0px)",
        "translateY(++0.0px)",
        "translateY(0.0px)",
        "translateY(-0.0px)",
        "translateY(0)",
        "translateY(+0.0px)"
      ]
    },
    {
      "regex": "ActiveRecord::Migration\\[4\\.2\\]$",
      "exceptionStackTrace": null,
      "matches": ["ActiveRecord::Migration[4.2]"]
    },
    {
      "regex": "(.*)aux$",
      "exceptionStackTrace": null,
      "matches": [
        "eVilaux",
        "EVILaux",
        "ev_ilaux",
        "ev ilaux",
        "ev4ilaux",
        "eaux",
        " aux",
        "6aux",
        "_aux",
        "aux",
        "evilaux"
      ]
    },
    {
      "regex": "[\\w-]+(?=\\()",
      "exceptionStackTrace": null,
      "matches": [
        "-",
        "(",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "/locales/.*\\.yml$",
      "exceptionStackTrace": null,
      "matches": [
        "/locales//.yml",
        "/locales/..yml",
        "/locales/eVil.yml",
        "/locales/EVIL.yml",
        "/locales/ev_il.yml",
        "/locales/ev il.yml",
        "/locales/ev4il.yml",
        "/locales/e.yml",
        "/locales/ .yml",
        "/locales/6.yml",
        "/locales/_.yml",
        "/locales/.yml",
        "/locales/evil.yml"
      ]
    },
    {
      "regex": "\\s*[+=~-]?$",
      "exceptionStackTrace": null,
      "matches": [" --", " ", " ~", " =", " +", "  -", "-", "", " -"]
    },
    {
      "regex": ".+\\.spec\\.js?$",
      "exceptionStackTrace": null,
      "matches": [
        "evil.spec.jss",
        "..spec.js",
        "eVil.spec.js",
        "EVIL.spec.js",
        "ev_il.spec.js",
        "ev il.spec.js",
        "ev4il.spec.js",
        "e.spec.js",
        " .spec.js",
        "6.spec.js",
        "_.spec.js",
        ".spec.js",
        "evil.spec.j",
        "evil.spec.js"
      ]
    },
    {
      "regex": "((?:^|[&(])[ \\t]*)if(?: ?\\/[a-z?](?:[ :](?:\"[^\"]*\"|\\S+))?)* (?:not )?(?:cmdextversion \\d+|defined \\w+|errorlevel \\d+|exist \\S+|(?:\"[^\"]*\"|\\S+)?(?:==| (?:equ|neq|lss|leq|gtr|geq) )(?:\"[^\"]*\"|\\S+))",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "^(?i)(proptest|quickcheck|suppositions).*",
      "exceptionStackTrace": null,
      "matches": [
        "proptesteVil",
        "proptestEVIL",
        "proptestev_il",
        "proptestev il",
        "proptestev4il",
        "propteste",
        "proptest ",
        "proptest6",
        "proptest_",
        "suppositions",
        "quickcheck",
        "proptest",
        "suppositionsevil",
        "quickcheckevil",
        "proptestevil"
      ]
    },
    {
      "regex": "\u00ca\u00cf",
      "exceptionStackTrace": null,
      "matches": ["\u00ca\u00cf"]
    },
    { "regex": "^rdbms_", "exceptionStackTrace": null, "matches": ["rdbms_"] },
    {
      "regex": "<\\/h[1-9]>",
      "exceptionStackTrace": null,
      "matches": ["</h0>", "</h1>"]
    },
    {
      "regex": "^\\d\\d?[\\.\\/\\-]\\d\\d?[\\.\\/\\-]\\d\\d\\d?\\d?$",
      "exceptionStackTrace": null,
      "matches": [
        "00-00-00000",
        "00-00-000",
        "00-00/0000",
        "00-00.0000",
        "00-000-0000",
        "00-0-0000",
        "00/00-0000",
        "00.00-0000",
        "000-00-0000",
        "0-00-0000",
        "0-0-00",
        "00-00-0000"
      ]
    },
    { "regex": "YMid$", "exceptionStackTrace": null, "matches": ["YMid"] },
    {
      "regex": "(?:<[\\/A-DF-Z][^>]*>)+([Ii])<\\/[A-DF-Z]> (?:<[\\/A-DF-Z][^>]*>)+(gcaitheamh)<\\/[A-DF-Z]>",
      "exceptionStackTrace": null,
      "matches": [
        "</evil>i</F> </evil>gcaitheamh</E>",
        "</evil>i</F> </evil>gcaitheamh</A>",
        "</evil>i</F> </evil></evil>gcaitheamh</F>",
        "</evil>i</F> gcaitheamh</F>",
        "</evil>i</F> </>>gcaitheamh</F>",
        "</evil>i</F> </<>gcaitheamh</F>",
        "</evil>i</F> <//>gcaitheamh</F>",
        "</evil>i</F> </eVil>gcaitheamh</F>",
        "</evil>i</F> </EVIL>gcaitheamh</F>",
        "</evil>i</F> </ev_il>gcaitheamh</F>",
        "</evil>i</F> </ev il>gcaitheamh</F>",
        "</evil>i</F> </ev4il>gcaitheamh</F>",
        "</evil>i</F> </e>gcaitheamh</F>",
        "</evil>i</F> </ >gcaitheamh</F>",
        "</evil>i</F> </6>gcaitheamh</F>",
        "</evil>i</F> </_>gcaitheamh</F>",
        "</evil>i</F> </>gcaitheamh</F>",
        "</evil>i</F> <Fevil>gcaitheamh</F>",
        "</evil>i</F> <Eevil>gcaitheamh</F>",
        "</evil>i</F> <Aevil>gcaitheamh</F>",
        "</evil>i</E> </evil>gcaitheamh</F>",
        "</evil>i</A> </evil>gcaitheamh</F>",
        "</evil>a</F> </evil>gcaitheamh</F>",
        "</evil>I</F> </evil>gcaitheamh</F>",
        "</evil>A</F> </evil>gcaitheamh</F>",
        "</evil></evil>i</F> </evil>gcaitheamh</F>",
        "i</F> </evil>gcaitheamh</F>",
        "</>>i</F> </evil>gcaitheamh</F>",
        "</<>i</F> </evil>gcaitheamh</F>",
        "<//>i</F> </evil>gcaitheamh</F>",
        "</eVil>i</F> </evil>gcaitheamh</F>",
        "</EVIL>i</F> </evil>gcaitheamh</F>",
        "</ev_il>i</F> </evil>gcaitheamh</F>",
        "</ev il>i</F> </evil>gcaitheamh</F>",
        "</ev4il>i</F> </evil>gcaitheamh</F>",
        "</e>i</F> </evil>gcaitheamh</F>",
        "</ >i</F> </evil>gcaitheamh</F>",
        "</6>i</F> </evil>gcaitheamh</F>",
        "</_>i</F> </evil>gcaitheamh</F>",
        "</>i</F> </evil>gcaitheamh</F>",
        "<Fevil>i</F> </evil>gcaitheamh</F>",
        "<Eevil>i</F> </evil>gcaitheamh</F>",
        "<Aevil>i</F> </evil>gcaitheamh</F>",
        "</>i</F> </>gcaitheamh</F>",
        "</evil>i</F> </evil>gcaitheamh</F>"
      ]
    },
    {
      "regex": "^get([\\p{Upper}]{1}.*)$|^is([\\p{Upper}]{1}.*)$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\p"
      },
      "matches": []
    },
    { "regex": "R720", "exceptionStackTrace": null, "matches": ["R720"] },
    {
      "regex": "II 9\\.1\\.0",
      "exceptionStackTrace": null,
      "matches": ["II 9.1.0"]
    },
    {
      "regex": "(certain(e)? \\\\\")(le |la |l')(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "certaine \\\"le \\",
        "certaine \\\"le '",
        "certaine \\\"le \"",
        "certaine \\\"le eVil",
        "certaine \\\"le EVIL",
        "certaine \\\"le ev_il",
        "certaine \\\"le ev il",
        "certaine \\\"le ev4il",
        "certaine \\\"le e",
        "certaine \\\"le  ",
        "certaine \\\"le 6",
        "certaine \\\"le _",
        "certaine \\\"le ",
        "certainee \\\"le evil",
        "certain \\\"le evil",
        "certain \\\"l'",
        "certain \\\"la ",
        "certain \\\"le ",
        "certaine \\\"l'evil",
        "certaine \\\"la evil",
        "certaine \\\"le evil"
      ]
    },
    {
      "regex": "^\\*\\/([0-9]+)$",
      "exceptionStackTrace": null,
      "matches": ["*/00", "*/", "*/0"]
    },
    {
      "regex": "\\/categories\\/20",
      "exceptionStackTrace": null,
      "matches": ["/categories/20"]
    },
    {
      "regex": "^  <\\/head>\\n\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^ *rgb\\( *\\d{1,3} *, *\\d{1,3} *, *\\d{1,3} *\\) *$",
      "exceptionStackTrace": null,
      "matches": [
        " rgb( 0 , 0 , 0 )  ",
        " rgb( 0 , 0 , 0 )",
        " rgb( 0 , 0 , 0  ) ",
        " rgb( 0 , 0 , 0) ",
        " rgb( 0 , 0 , 0000 ) ",
        " rgb( 0 , 0 , 000 ) ",
        " rgb( 0 , 0 ,  ) ",
        " rgb( 0 , 0 ,  0 ) ",
        " rgb( 0 , 0 ,0 ) ",
        " rgb( 0 , 0  , 0 ) ",
        " rgb( 0 , 0, 0 ) ",
        " rgb( 0 , 0000 , 0 ) ",
        " rgb( 0 , 000 , 0 ) ",
        " rgb( 0 ,  , 0 ) ",
        " rgb( 0 ,  0 , 0 ) ",
        " rgb( 0 ,0 , 0 ) ",
        " rgb( 0  , 0 , 0 ) ",
        " rgb( 0, 0 , 0 ) ",
        " rgb( 0000 , 0 , 0 ) ",
        " rgb( 000 , 0 , 0 ) ",
        " rgb(  , 0 , 0 ) ",
        " rgb(  0 , 0 , 0 ) ",
        " rgb(0 , 0 , 0 ) ",
        "  rgb( 0 , 0 , 0 ) ",
        "rgb( 0 , 0 , 0 ) ",
        "rgb(0,0,0)",
        " rgb( 0 , 0 , 0 ) "
      ]
    },
    {
      "regex": "(?:^|[^@])([@|\\$](?:\\w+|{[^{}]+}))(?:{[^{}]+})?",
      "exceptionStackTrace": null,
      "matches": [
        "}$evil{evil}",
        "|$evil{evil}",
        "{$evil{evil}",
        "A$evil{evil}",
        "@$evil{evil}",
        "0$evil{evil}",
        "$$evil{evil}",
        " $evil{evil}",
        "${}}{evil}",
        "${|}{evil}",
        "${{}{evil}",
        "${@}{evil}",
        "${$}{evil}",
        "${eVil}{evil}",
        "${EVIL}{evil}",
        "${ev_il}{evil}",
        "${ev il}{evil}",
        "${ev4il}{evil}",
        "${e}{evil}",
        "${ }{evil}",
        "${6}{evil}",
        "${_}{evil}",
        "${}{evil}",
        "$evil{evil}{evil}",
        "$evil{}}",
        "$evil{|}",
        "$evil{{}",
        "$evil{@}",
        "$evil{$}",
        "$evil{eVil}",
        "$evil{EVIL}",
        "$evil{ev_il}",
        "$evil{ev il}",
        "$evil{ev4il}",
        "$evil{e}",
        "$evil{ }",
        "$evil{6}",
        "$evil{_}",
        "$evil{}",
        "$eVil{evil}",
        "$EVIL{evil}",
        "$ev_il{evil}",
        "$ev il{evil}",
        "$ev4il{evil}",
        "$e{evil}",
        "$ {evil}",
        "$6{evil}",
        "$_{evil}",
        "|evil{evil}",
        "@evil{evil}",
        "a$evil",
        "${evil}",
        "$evil",
        "a$evil{evil}",
        "${evil}{evil}",
        "$evil{evil}"
      ]
    },
    {
      "regex": "\\A(?:[^\\/#]\\S+\\.scen)",
      "exceptionStackTrace": null,
      "matches": [
        "a/.scen",
        "a..scen",
        "a#.scen",
        "aeVil.scen",
        "aEVIL.scen",
        "aev_il.scen",
        "aev il.scen",
        "aev4il.scen",
        "ae.scen",
        "a .scen",
        "a6.scen",
        "a_.scen",
        "a.scen",
        "Aevil.scen",
        "0evil.scen",
        "/evil.scen",
        ".evil.scen",
        "#evil.scen",
        " evil.scen",
        "aevil.scen"
      ]
    },
    {
      "regex": "^\\s*(?:end|\\})\\s*$",
      "exceptionStackTrace": null,
      "matches": [" end  ", " end", "  end ", "end ", "}", "end", " } ", " end "]
    },
    {
      "regex": "can not read ",
      "exceptionStackTrace": null,
      "matches": ["can not read "]
    },
    {
      "regex": "^(?:\\{\\{(~)?)",
      "exceptionStackTrace": null,
      "matches": ["{{~~", "{{", "{{~"]
    },
    {
      "regex": "<strong>description</strong>",
      "exceptionStackTrace": null,
      "matches": ["<strong>description</strong>"]
    },
    {
      "regex": ".*([0-9]+[.]){2}[0-9]+$",
      "exceptionStackTrace": null,
      "matches": [
        "evil0.0.00",
        "evil0.0.",
        "evil0.0.0.0",
        "evil0.0",
        "evil00.0.0",
        "evil.0.0",
        ".0.0.0",
        "eVil0.0.0",
        "EVIL0.0.0",
        "ev_il0.0.0",
        "ev il0.0.0",
        "ev4il0.0.0",
        "e0.0.0",
        " 0.0.0",
        "60.0.0",
        "_0.0.0",
        "0.0.0",
        "evil0.0.0"
      ]
    },
    {
      "regex": "^([^\\\\]|\\\\[^0-7])*\\\\([0-3][0-7]{1,2}|[4-7][0-7]|[0-7])",
      "exceptionStackTrace": null,
      "matches": [
        "\\\\\\00",
        "\\A\\00",
        "\\8\\00",
        "\\0\\00",
        "\\ \\00",
        "a\\8",
        "a\\48",
        "a\\0000",
        "a\\000",
        "a\\08",
        "aa\\00",
        "\\\\00",
        "A\\00",
        "0\\00",
        " \\00",
        "\\0",
        "\\40",
        "\\00",
        "\\a\\00",
        "a\\0",
        "a\\40",
        "a\\00"
      ]
    },
    { "regex": "a: 1", "exceptionStackTrace": null, "matches": ["a: 1"] },
    {
      "regex": "^Subject: Email violation detected in an email you sent",
      "exceptionStackTrace": null,
      "matches": ["Subject: Email violation detected in an email you sent"]
    },
    { "regex": "k:0", "exceptionStackTrace": null, "matches": ["k:0"] },
    {
      "regex": "; *(ISW11K) Build",
      "exceptionStackTrace": null,
      "matches": [";  ISW11K Build", ";ISW11K Build", "; ISW11K Build"]
    },
    { "regex": "^[fb]", "exceptionStackTrace": null, "matches": ["f", "a", "b"] },
    {
      "regex": "\\Q$method\\E",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\Q"
      },
      "matches": []
    },
    {
      "regex": "^[%\\n\\r\\f\\s]$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "step must be an Array with more than 1 items",
      "exceptionStackTrace": null,
      "matches": ["step must be an Array with more than 1 items"]
    },
    {
      "regex": "^(?P<name>(?:\"?([^\"]*)\"?\\s)?)(?:\\s+)?(?:(?P<open><?)((?P<local>.+)@(?P<domain>[^>]+))(?P<close>>?))$",
      "exceptionStackTrace": null,
      "matches": [
        "\"evil\"  <evil@evil>>",
        "\"evil\"  <evil@evil",
        "\"evil\"  <evil@@>",
        "\"evil\"  <evil@>>",
        "\"evil\"  <evil@<>",
        "\"evil\"  <evil@\">",
        "\"evil\"  <evil@eVil>",
        "\"evil\"  <evil@EVIL>",
        "\"evil\"  <evil@ev_il>",
        "\"evil\"  <evil@ev il>",
        "\"evil\"  <evil@ev4il>",
        "\"evil\"  <evil@e>",
        "\"evil\"  <evil@ >",
        "\"evil\"  <evil@6>",
        "\"evil\"  <evil@_>",
        "\"evil\"  <evil@>",
        "\"evil\"  <@@evil>",
        "\"evil\"  <>@evil>",
        "\"evil\"  <<@evil>",
        "\"evil\"  <\"@evil>",
        "\"evil\"  <eVil@evil>",
        "\"evil\"  <EVIL@evil>",
        "\"evil\"  <ev_il@evil>",
        "\"evil\"  <ev il@evil>",
        "\"evil\"  <ev4il@evil>",
        "\"evil\"  <e@evil>",
        "\"evil\"  < @evil>",
        "\"evil\"  <6@evil>",
        "\"evil\"  <_@evil>",
        "\"evil\"  <@evil>",
        "\"evil\"  <<evil@evil>",
        "\"evil\"  evil@evil>",
        "\"evil\"   <evil@evil>",
        "\"evil\" <evil@evil>",
        "\"evil\" \"evil\"  <evil@evil>",
        " <evil@evil>",
        "\"evil\"\"  <evil@evil>",
        "\"evil  <evil@evil>",
        "\"@\"  <evil@evil>",
        "\">\"  <evil@evil>",
        "\"<\"  <evil@evil>",
        "\"\"\"  <evil@evil>",
        "\"eVil\"  <evil@evil>",
        "\"EVIL\"  <evil@evil>",
        "\"ev_il\"  <evil@evil>",
        "\"ev il\"  <evil@evil>",
        "\"ev4il\"  <evil@evil>",
        "\"e\"  <evil@evil>",
        "\" \"  <evil@evil>",
        "\"6\"  <evil@evil>",
        "\"_\"  <evil@evil>",
        "\"\"  <evil@evil>",
        "\"\"evil\"  <evil@evil>",
        "evil\"  <evil@evil>",
        "evil@evil",
        "\"evil\"  <evil@evil>"
      ]
    },
    {
      "regex": "https?:\\/\\/youtu.be\\/(?P<id>[\\w-]+)(?P<timestamp>\\?t=\\d*m?\\d*s?)?",
      "exceptionStackTrace": null,
      "matches": [
        "https://youtuabe/evil?t=0m0s?t=0m0s",
        "https://youtuabe/evil",
        "https://youtuabe/evil?t=0m0ss",
        "https://youtuabe/evil?t=0m0",
        "https://youtuabe/evil?t=0m00s",
        "https://youtuabe/evil?t=0ms",
        "https://youtuabe/evil?t=0mm0s",
        "https://youtuabe/evil?t=00s",
        "https://youtuabe/evil?t=00m0s",
        "https://youtuabe/evil?t=m0s",
        "https://youtuabe/??t=0m0s",
        "https://youtuabe/=?t=0m0s",
        "https://youtuabe/:?t=0m0s",
        "https://youtuabe//?t=0m0s",
        "https://youtuabe/-?t=0m0s",
        "https://youtuabe/eVil?t=0m0s",
        "https://youtuabe/EVIL?t=0m0s",
        "https://youtuabe/ev_il?t=0m0s",
        "https://youtuabe/ev il?t=0m0s",
        "https://youtuabe/ev4il?t=0m0s",
        "https://youtuabe/e?t=0m0s",
        "https://youtuabe/ ?t=0m0s",
        "https://youtuabe/6?t=0m0s",
        "https://youtuabe/_?t=0m0s",
        "https://youtuabe/?t=0m0s",
        "https://youtuAbe/evil?t=0m0s",
        "https://youtu?be/evil?t=0m0s",
        "https://youtu=be/evil?t=0m0s",
        "https://youtu:be/evil?t=0m0s",
        "https://youtu0be/evil?t=0m0s",
        "https://youtu/be/evil?t=0m0s",
        "https://youtu-be/evil?t=0m0s",
        "https://youtu be/evil?t=0m0s",
        "httpss://youtuabe/evil?t=0m0s",
        "http://youtuabe/evil?t=0m0s",
        "http://youtuabe/evil",
        "https://youtuabe/evil?t=0m0s"
      ]
    },
    {
      "regex": "database is closed",
      "exceptionStackTrace": null,
      "matches": ["database is closed"]
    },
    {
      "regex": "(>)(\\S)",
      "exceptionStackTrace": null,
      "matches": [">_", ">A", ">>", ">0", "> ", ">a"]
    },
    {
      "regex": "^testdb_\\d{8}_\\d{6}_[0-9a-f]{8}$",
      "exceptionStackTrace": null,
      "matches": [
        "testdb_00000000_000000_aaaaaaaaa",
        "testdb_00000000_000000_aaaaaaa",
        "testdb_00000000_000000_gaaaaaaa",
        "testdb_00000000_000000_0aaaaaaa",
        "testdb_00000000_0000000_aaaaaaaa",
        "testdb_00000000_00000_aaaaaaaa",
        "testdb_000000000_000000_aaaaaaaa",
        "testdb_0000000_000000_aaaaaaaa",
        "testdb_00000000_000000_aaaaaaaa"
      ]
    },
    { "regex": "\\.hdr$", "exceptionStackTrace": null, "matches": [".hdr"] },
    {
      "regex": "^isa check .*?failed: ",
      "exceptionStackTrace": null,
      "matches": [
        "isa check :failed: ",
        "isa check eVilfailed: ",
        "isa check EVILfailed: ",
        "isa check ev_ilfailed: ",
        "isa check ev ilfailed: ",
        "isa check ev4ilfailed: ",
        "isa check efailed: ",
        "isa check  failed: ",
        "isa check 6failed: ",
        "isa check _failed: ",
        "isa check failed: ",
        "isa check evilfailed: "
      ]
    },
    {
      "regex": "!(.*)!([a-z]*)",
      "exceptionStackTrace": null,
      "matches": [
        "!evil!eVil",
        "!evil!EVIL",
        "!evil!ev_il",
        "!evil!ev il",
        "!evil!ev4il",
        "!evil!e",
        "!evil! ",
        "!evil!6",
        "!evil!_",
        "!evil!",
        "!!!evil",
        "!eVil!evil",
        "!EVIL!evil",
        "!ev_il!evil",
        "!ev il!evil",
        "!ev4il!evil",
        "!e!evil",
        "! !evil",
        "!6!evil",
        "!_!evil",
        "!!evil",
        "!!",
        "!evil!evil"
      ]
    },
    {
      "regex": "\\s*\\\\\\s*\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "^\u0441\u0435",
      "exceptionStackTrace": null,
      "matches": ["\u0441\u0435"]
    },
    {
      "regex": "([A-Za-z0-9-]+)",
      "exceptionStackTrace": null,
      "matches": [
        "-",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "\\[new_section\\]",
      "exceptionStackTrace": null,
      "matches": ["[new_section]"]
    },
    { "regex": "^(?:XSkat)", "exceptionStackTrace": null, "matches": ["XSkat"] },
    {
      "regex": " Round (\\d+) Games$",
      "exceptionStackTrace": null,
      "matches": [" Round 00 Games", " Round  Games", " Round 0 Games"]
    },
    {
      "regex": "<[a-z]{1,}:",
      "exceptionStackTrace": null,
      "matches": [
        "<eVil:",
        "<EVIL:",
        "<ev_il:",
        "<ev il:",
        "<ev4il:",
        "<e:",
        "< :",
        "<6:",
        "<_:",
        "<:",
        "<evil:"
      ]
    },
    { "regex": "prismjs", "exceptionStackTrace": null, "matches": ["prismjs"] },
    {
      "regex": "^a backuped file named \"(.*?)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "a backuped file named \"\"\"",
        "a backuped file named \"eVil\"",
        "a backuped file named \"EVIL\"",
        "a backuped file named \"ev_il\"",
        "a backuped file named \"ev il\"",
        "a backuped file named \"ev4il\"",
        "a backuped file named \"e\"",
        "a backuped file named \" \"",
        "a backuped file named \"6\"",
        "a backuped file named \"_\"",
        "a backuped file named \"\"",
        "a backuped file named \"evil\""
      ]
    },
    {
      "regex": "\\d+(@integersuffix)",
      "exceptionStackTrace": null,
      "matches": ["00@integersuffix", "@integersuffix", "0@integersuffix"]
    },
    {
      "regex": "^taggroup:(\\d+)$",
      "exceptionStackTrace": null,
      "matches": ["taggroup:00", "taggroup:", "taggroup:0"]
    },
    {
      "regex": "\\s*<p>test",
      "exceptionStackTrace": null,
      "matches": ["  <p>test", "<p>test", " <p>test"]
    },
    {
      "regex": "/nifi-api/process-groups/(?:(?:root)|(?:[a-f0-9\\-]{36}))/snippet-instance",
      "exceptionStackTrace": null,
      "matches": [
        "/nifi-api/process-groups/-------------------------------------/snippet-instance",
        "/nifi-api/process-groups/-----------------------------------/snippet-instance",
        "/nifi-api/process-groups/g-----------------------------------/snippet-instance",
        "/nifi-api/process-groups/a-----------------------------------/snippet-instance",
        "/nifi-api/process-groups/0-----------------------------------/snippet-instance",
        "/nifi-api/process-groups/------------------------------------/snippet-instance",
        "/nifi-api/process-groups/root/snippet-instance"
      ]
    },
    {
      "regex": "(^|[^0-9A-Za-z\u0900-\u0902\u0904-\u093a\u093c-\u093d\u0941-\u0948\u094d\u0950-\u0963\u0971-\u0977\u0979-\u097f\ua8e0-\ua8f7\ua8fb])((?:2Macc))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 160"
      },
      "matches": []
    },
    {
      "regex": "Matz - \u307e\u3064\u3082\u3068 \u3086\u304d\u3072\u308d",
      "exceptionStackTrace": null,
      "matches": ["Matz - \u307e\u3064\u3082\u3068 \u3086\u304d\u3072\u308d"]
    },
    {
      "regex": "\\.[^.]{1,3}$",
      "exceptionStackTrace": null,
      "matches": [".aaaa", ".aaa", ".", ".A", ".0", "..", ". ", ".a"]
    },
    {
      "regex": "\\n\\sRMS\\sDISPLAC.(.+?)\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    { "regex": "colour", "exceptionStackTrace": null, "matches": ["colour"] },
    {
      "regex": "\\G(?=__)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\G"
      },
      "matches": []
    },
    {
      "regex": "\\x1a\\d+\\x1a",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 26"
      },
      "matches": []
    },
    {
      "regex": "api.example.com:85\\/v2\\/clouds\\/cloud2.json",
      "exceptionStackTrace": null,
      "matches": [
        "apiaexampleacom:85/v2/clouds/cloud2Ajson",
        "apiaexampleacom:85/v2/clouds/cloud2:json",
        "apiaexampleacom:85/v2/clouds/cloud20json",
        "apiaexampleacom:85/v2/clouds/cloud2/json",
        "apiaexampleacom:85/v2/clouds/cloud2 json",
        "apiaexampleAcom:85/v2/clouds/cloud2ajson",
        "apiaexample:com:85/v2/clouds/cloud2ajson",
        "apiaexample0com:85/v2/clouds/cloud2ajson",
        "apiaexample/com:85/v2/clouds/cloud2ajson",
        "apiaexample com:85/v2/clouds/cloud2ajson",
        "apiAexampleacom:85/v2/clouds/cloud2ajson",
        "api:exampleacom:85/v2/clouds/cloud2ajson",
        "api0exampleacom:85/v2/clouds/cloud2ajson",
        "api/exampleacom:85/v2/clouds/cloud2ajson",
        "api exampleacom:85/v2/clouds/cloud2ajson",
        "apiaexampleacom:85/v2/clouds/cloud2ajson"
      ]
    },
    {
      "regex": "\\n +\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    { "regex": "[*]\\\\o", "exceptionStackTrace": null, "matches": ["*\\o"] },
    {
      "regex": "^I\\'m on the buttons screen$",
      "exceptionStackTrace": null,
      "matches": ["I'm on the buttons screen"]
    },
    {
      "regex": "Parameter loginId of security.createPasswordResetToken is required",
      "exceptionStackTrace": null,
      "matches": [
        "Parameter loginId of security_createPasswordResetToken is required",
        "Parameter loginId of securityAcreatePasswordResetToken is required",
        "Parameter loginId of security0createPasswordResetToken is required",
        "Parameter loginId of security createPasswordResetToken is required",
        "Parameter loginId of securityacreatePasswordResetToken is required"
      ]
    },
    {
      "regex": "^Read (.*) Online$",
      "exceptionStackTrace": null,
      "matches": [
        "Read eVil Online",
        "Read EVIL Online",
        "Read ev_il Online",
        "Read ev il Online",
        "Read ev4il Online",
        "Read e Online",
        "Read   Online",
        "Read 6 Online",
        "Read _ Online",
        "Read  Online",
        "Read evil Online"
      ]
    },
    {
      "regex": "^creating sessions should fail$",
      "exceptionStackTrace": null,
      "matches": ["creating sessions should fail"]
    },
    {
      "regex": "\\__END__(\\n|$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^fhqwhgads$",
      "exceptionStackTrace": null,
      "matches": ["fhqwhgads"]
    },
    {
      "regex": "Signal level(:|=)(-?\\d+)[^\\d]",
      "exceptionStackTrace": null,
      "matches": [
        "Signal level:-0A",
        "Signal level:-0=",
        "Signal level:-0:",
        "Signal level:-00",
        "Signal level:-0-",
        "Signal level:-0 ",
        "Signal level:-00a",
        "Signal level:-a",
        "Signal level:--0a",
        "Signal level=0a",
        "Signal level:0a",
        "Signal level=-0a",
        "Signal level:-0a"
      ]
    },
    {
      "regex": "([0-9]*)(day|days|d|hours|hour|h|minutes|minutes|m)\\s?((ago)?)",
      "exceptionStackTrace": null,
      "matches": [
        "0day agoago",
        "0day ",
        "0day  ago",
        "0dayago",
        "00day ago",
        "day ago",
        "m",
        "minutes",
        "h",
        "hour",
        "hours",
        "d",
        "days",
        "day",
        "0m ago",
        "0minutes ago",
        "0h ago",
        "0hour ago",
        "0hours ago",
        "0d ago",
        "0days ago",
        "0day ago"
      ]
    },
    {
      "regex": "warning days must be provided as a number",
      "exceptionStackTrace": null,
      "matches": ["warning days must be provided as a number"]
    },
    { "regex": "hotfix/", "exceptionStackTrace": null, "matches": ["hotfix/"] },
    {
      "regex": "\\\\u([[:xdigit:]]{4})",
      "exceptionStackTrace": null,
      "matches": [
        "\\u:]]]]]",
        "\\u:]]]",
        "\\ux]]]]",
        "\\ut]]]]",
        "\\ui]]]]",
        "\\ug]]]]",
        "\\ud]]]]",
        "\\ua]]]]",
        "\\u[]]]]",
        "\\u:]]]]"
      ]
    },
    { "regex": "[h]", "exceptionStackTrace": null, "matches": ["h"] },
    {
      "regex": "^[^\\\\s].+[^\\\\s]$",
      "exceptionStackTrace": null,
      "matches": [
        "aevils",
        "aevil\\",
        "aevilA",
        "aevil0",
        "aevil ",
        "a\\a",
        "aeVila",
        "aEVILa",
        "aev_ila",
        "aev ila",
        "aev4ila",
        "aea",
        "a a",
        "a6a",
        "a_a",
        "aa",
        "sevila",
        "\\evila",
        "Aevila",
        "0evila",
        " evila",
        "aevila"
      ]
    },
    {
      "regex": "^(password|pass|passwd|passcode)$",
      "exceptionStackTrace": null,
      "matches": ["passcode", "passwd", "pass", "password"]
    },
    {
      "regex": "^\\/assets.*\\/",
      "exceptionStackTrace": null,
      "matches": [
        "/assets//",
        "/assetseVil/",
        "/assetsEVIL/",
        "/assetsev_il/",
        "/assetsev il/",
        "/assetsev4il/",
        "/assetse/",
        "/assets /",
        "/assets6/",
        "/assets_/",
        "/assets/",
        "/assetsevil/"
      ]
    },
    {
      "regex": "<!DOCTYPE svg[^>]*>",
      "exceptionStackTrace": null,
      "matches": [
        "<!DOCTYPE svg>>",
        "<!DOCTYPE svg<>",
        "<!DOCTYPE svg!>",
        "<!DOCTYPE svgeVil>",
        "<!DOCTYPE svgEVIL>",
        "<!DOCTYPE svgev_il>",
        "<!DOCTYPE svgev il>",
        "<!DOCTYPE svgev4il>",
        "<!DOCTYPE svge>",
        "<!DOCTYPE svg >",
        "<!DOCTYPE svg6>",
        "<!DOCTYPE svg_>",
        "<!DOCTYPE svg>",
        "<!DOCTYPE svgevil>"
      ]
    },
    {
      "regex": "\\#{.*}",
      "exceptionStackTrace": null,
      "matches": [
        "#{}}",
        "#{{}",
        "#{#}",
        "#{eVil}",
        "#{EVIL}",
        "#{ev_il}",
        "#{ev il}",
        "#{ev4il}",
        "#{e}",
        "#{ }",
        "#{6}",
        "#{_}",
        "#{}",
        "#{evil}"
      ]
    },
    {
      "regex": ".*(compare).*\\.combined\\.gtf",
      "exceptionStackTrace": null,
      "matches": [
        "evilcompare..combined.gtf",
        "evilcompareeVil.combined.gtf",
        "evilcompareEVIL.combined.gtf",
        "evilcompareev_il.combined.gtf",
        "evilcompareev il.combined.gtf",
        "evilcompareev4il.combined.gtf",
        "evilcomparee.combined.gtf",
        "evilcompare .combined.gtf",
        "evilcompare6.combined.gtf",
        "evilcompare_.combined.gtf",
        "evilcompare.combined.gtf",
        ".compareevil.combined.gtf",
        "eVilcompareevil.combined.gtf",
        "EVILcompareevil.combined.gtf",
        "ev_ilcompareevil.combined.gtf",
        "ev ilcompareevil.combined.gtf",
        "ev4ilcompareevil.combined.gtf",
        "ecompareevil.combined.gtf",
        " compareevil.combined.gtf",
        "6compareevil.combined.gtf",
        "_compareevil.combined.gtf",
        "compareevil.combined.gtf",
        "compare.combined.gtf",
        "evilcompareevil.combined.gtf"
      ]
    },
    {
      "regex": "[?|&]page=\\d+",
      "exceptionStackTrace": null,
      "matches": ["&page=00", "&page=", "|page=0", "?page=0", "&page=0"]
    },
    {
      "regex": "(.*):(\\$[a-zA-Z0-9_\\.-]+)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil:$:",
        "evil:$.",
        "evil:$-",
        "evil:$$",
        "evil:$eVil",
        "evil:$EVIL",
        "evil:$ev_il",
        "evil:$ev il",
        "evil:$ev4il",
        "evil:$e",
        "evil:$ ",
        "evil:$6",
        "evil:$_",
        "evil:$",
        "::$evil",
        ".:$evil",
        "-:$evil",
        "$:$evil",
        "eVil:$evil",
        "EVIL:$evil",
        "ev_il:$evil",
        "ev il:$evil",
        "ev4il:$evil",
        "e:$evil",
        " :$evil",
        "6:$evil",
        "_:$evil",
        ":$evil",
        "evil:$evil"
      ]
    },
    {
      "regex": ".*/(?P<basefile>[LVHSF\\-]+FS_ ?\\d{4}[_\\-]\\d+)\\.pdf$",
      "exceptionStackTrace": null,
      "matches": [
        "evil/-FS_ 0000-00.pdf",
        "evil/-FS_ 0000-.pdf",
        "evil/-FS_ 0000_0.pdf",
        "evil/-FS_ 00000-0.pdf",
        "evil/-FS_ 000-0.pdf",
        "evil/-FS_  0000-0.pdf",
        "evil/-FS_0000-0.pdf",
        "evil/--FS_ 0000-0.pdf",
        "evil/FS_ 0000-0.pdf",
        "evil/VFS_ 0000-0.pdf",
        "evil/SFS_ 0000-0.pdf",
        "evil/LFS_ 0000-0.pdf",
        "evil/HFS_ 0000-0.pdf",
        "evil/FFS_ 0000-0.pdf",
        "evil/AFS_ 0000-0.pdf",
        "//-FS_ 0000-0.pdf",
        "./-FS_ 0000-0.pdf",
        "-/-FS_ 0000-0.pdf",
        "eVil/-FS_ 0000-0.pdf",
        "EVIL/-FS_ 0000-0.pdf",
        "ev_il/-FS_ 0000-0.pdf",
        "ev il/-FS_ 0000-0.pdf",
        "ev4il/-FS_ 0000-0.pdf",
        "e/-FS_ 0000-0.pdf",
        " /-FS_ 0000-0.pdf",
        "6/-FS_ 0000-0.pdf",
        "_/-FS_ 0000-0.pdf",
        "/-FS_ 0000-0.pdf",
        "/-FS_0000-0.pdf",
        "evil/-FS_ 0000-0.pdf"
      ]
    },
    {
      "regex": "(?:\\s+|\\d+\\.\\s*)+",
      "exceptionStackTrace": null,
      "matches": ["0.  ", "00. ", ". ", "  ", "", "0.", "0. ", " "]
    },
    {
      "regex": "^I am on the hover page$",
      "exceptionStackTrace": null,
      "matches": ["I am on the hover page"]
    },
    {
      "regex": "^I have (not )?suppressed syntax checking message dialogs$",
      "exceptionStackTrace": null,
      "matches": [
        "I have not not suppressed syntax checking message dialogs",
        "I have suppressed syntax checking message dialogs",
        "I have not suppressed syntax checking message dialogs"
      ]
    },
    {
      "regex": "(?m)^([IWEF])(\\d{6} \\d{2}:\\d{2}:\\d{2}.\\d{6}) (?:(\\d+) )?([^:]+):(\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "F000000 00:00:00a000000 0 evil:00",
        "F000000 00:00:00a000000 0 evil:",
        "F000000 00:00:00a000000 0 ::0",
        "F000000 00:00:00a000000 0 eVil:0",
        "F000000 00:00:00a000000 0 EVIL:0",
        "F000000 00:00:00a000000 0 ev_il:0",
        "F000000 00:00:00a000000 0 ev il:0",
        "F000000 00:00:00a000000 0 ev4il:0",
        "F000000 00:00:00a000000 0 e:0",
        "F000000 00:00:00a000000 0  :0",
        "F000000 00:00:00a000000 0 6:0",
        "F000000 00:00:00a000000 0 _:0",
        "F000000 00:00:00a000000 0 :0",
        "F000000 00:00:00a000000 0 0 evil:0",
        "F000000 00:00:00a000000 00 evil:0",
        "F000000 00:00:00a000000  evil:0",
        "F000000 00:00:00a0000000 0 evil:0",
        "F000000 00:00:00a00000 0 evil:0",
        "F000000 00:00:00A000000 0 evil:0",
        "F000000 00:00:00:000000 0 evil:0",
        "F000000 00:00:000000000 0 evil:0",
        "F000000 00:00:00 000000 0 evil:0",
        "F000000 00:00:000a000000 0 evil:0",
        "F000000 00:00:0a000000 0 evil:0",
        "F000000 00:000:00a000000 0 evil:0",
        "F000000 00:0:00a000000 0 evil:0",
        "F000000 000:00:00a000000 0 evil:0",
        "F000000 0:00:00a000000 0 evil:0",
        "F0000000 00:00:00a000000 0 evil:0",
        "F00000 00:00:00a000000 0 evil:0",
        "W000000 00:00:00a000000 0 evil:0",
        "I000000 00:00:00a000000 0 evil:0",
        "E000000 00:00:00a000000 0 evil:0",
        "A000000 00:00:00a000000 0 evil:0",
        "F000000 00:00:00a000000 evil:0",
        "F000000 00:00:00a000000 0 evil:0"
      ]
    },
    {
      "regex": "grade_item_(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "grade_item_eVil",
        "grade_item_EVIL",
        "grade_item_ev_il",
        "grade_item_ev il",
        "grade_item_ev4il",
        "grade_item_e",
        "grade_item_ ",
        "grade_item_6",
        "grade_item__",
        "grade_item_",
        "grade_item_evil"
      ]
    },
    {
      "regex": "\n\n|\r\n\r\n",
      "exceptionStackTrace": null,
      "matches": ["\r\n\r\n", "\n\n"]
    },
    {
      "regex": "\\A[\\s\\v]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\v"
      },
      "matches": []
    },
    {
      "regex": "\\n\\n *primary_key \\[",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^(\\s+):(.+): (.*)$",
      "exceptionStackTrace": null,
      "matches": [
        " :evil: :",
        " :evil: eVil",
        " :evil: EVIL",
        " :evil: ev_il",
        " :evil: ev il",
        " :evil: ev4il",
        " :evil: e",
        " :evil:  ",
        " :evil: 6",
        " :evil: _",
        " ::: evil",
        " :eVil: evil",
        " :EVIL: evil",
        " :ev_il: evil",
        " :ev il: evil",
        " :ev4il: evil",
        " :e: evil",
        " : : evil",
        " :6: evil",
        " :_: evil",
        " :: evil",
        "  :evil: evil",
        ":evil: evil",
        " :evil: ",
        " :evil: evil"
      ]
    },
    {
      "regex": "[^-.:_\\w]",
      "exceptionStackTrace": null,
      "matches": ["a", "_", "A", ":", "0", ".", "-", " "]
    },
    {
      "regex": "^(([a-z0-9]+_)+[a-z0-9]+_?|([a-z0-9]+-)+[a-z0-9]+-?)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil-evil--",
        "evil-eVil-",
        "evil-EVIL-",
        "evil-ev_il-",
        "evil-ev il-",
        "evil-ev4il-",
        "evil-e-",
        "evil- -",
        "evil-6-",
        "evil-_-",
        "evil--",
        "evil-evil-evil-",
        "evil-",
        "eVil-evil-",
        "EVIL-evil-",
        "ev_il-evil-",
        "ev il-evil-",
        "ev4il-evil-",
        "e-evil-",
        " -evil-",
        "6-evil-",
        "_-evil-",
        "-evil-",
        "evil_evil__",
        "evil_eVil_",
        "evil_EVIL_",
        "evil_ev_il_",
        "evil_ev il_",
        "evil_ev4il_",
        "evil_e_",
        "evil_ _",
        "evil_6_",
        "evil___",
        "evil__",
        "evil_evil_evil_",
        "evil_",
        "eVil_evil_",
        "EVIL_evil_",
        "ev_il_evil_",
        "ev il_evil_",
        "ev4il_evil_",
        "e_evil_",
        " _evil_",
        "6_evil_",
        "__evil_",
        "_evil_",
        "evil-evil",
        "evil_evil",
        "evil-evil-",
        "evil_evil_"
      ]
    },
    {
      "regex": "^the file \"([^\\\"]*)\" should not have been updated$",
      "exceptionStackTrace": null,
      "matches": [
        "the file \"\"\" should not have been updated",
        "the file \"eVil\" should not have been updated",
        "the file \"EVIL\" should not have been updated",
        "the file \"ev_il\" should not have been updated",
        "the file \"ev il\" should not have been updated",
        "the file \"ev4il\" should not have been updated",
        "the file \"e\" should not have been updated",
        "the file \" \" should not have been updated",
        "the file \"6\" should not have been updated",
        "the file \"_\" should not have been updated",
        "the file \"\" should not have been updated",
        "the file \"evil\" should not have been updated"
      ]
    },
    {
      "regex": "[^\\.!\\?]+[\\.!\\?]+",
      "exceptionStackTrace": null,
      "matches": [
        "evil??",
        "evil",
        "evil.",
        "evil!",
        "??",
        ".?",
        "!?",
        "eVil?",
        "EVIL?",
        "ev_il?",
        "ev il?",
        "ev4il?",
        "e?",
        " ?",
        "6?",
        "_?",
        "?",
        "evil?"
      ]
    },
    {
      "regex": "Sputnik\\/([0-9.]*)",
      "exceptionStackTrace": null,
      "matches": ["Sputnik/..", "Sputnik/0", "Sputnik/", "Sputnik/."]
    },
    {
      "regex": "^  Mr Bones is a handy tool that builds",
      "exceptionStackTrace": null,
      "matches": ["  Mr Bones is a handy tool that builds"]
    },
    { "regex": "\\A\\^\\^", "exceptionStackTrace": null, "matches": ["^^"] },
    {
      "regex": "<h(\\d)(.*?)>([\\s\\S]+?)<\\/h\\1>",
      "exceptionStackTrace": null,
      "matches": [
        "<h0evil>></h0>",
        "<h0evil><</h0>",
        "<h0evil>/</h0>",
        "<h0evil>eVil</h0>",
        "<h0evil>EVIL</h0>",
        "<h0evil>ev_il</h0>",
        "<h0evil>ev il</h0>",
        "<h0evil>ev4il</h0>",
        "<h0evil>e</h0>",
        "<h0evil> </h0>",
        "<h0evil>6</h0>",
        "<h0evil>_</h0>",
        "<h0evil></h0>",
        "<h0>>evil</h0>",
        "<h0<>evil</h0>",
        "<h0/>evil</h0>",
        "<h0eVil>evil</h0>",
        "<h0EVIL>evil</h0>",
        "<h0ev_il>evil</h0>",
        "<h0ev il>evil</h0>",
        "<h0ev4il>evil</h0>",
        "<h0e>evil</h0>",
        "<h0 >evil</h0>",
        "<h06>evil</h0>",
        "<h0_>evil</h0>",
        "<h0>evil</h0>",
        "<h0evil>evil</h0>"
      ]
    },
    {
      "regex": "^(\\d+):(\\d+):([lm]):(\\d+):$",
      "exceptionStackTrace": null,
      "matches": [
        "0:0:m:00:",
        "0:0:m::",
        "0:0:l:0:",
        "0:0:a:0:",
        "0:00:m:0:",
        "0::m:0:",
        "00:0:m:0:",
        ":0:m:0:",
        "0:0:m:0:"
      ]
    },
    {
      "regex": "authorization\\: Bearer t0k3n",
      "exceptionStackTrace": null,
      "matches": ["authorization: Bearer t0k3n"]
    },
    {
      "regex": "^\\+(?:[0-9]\\x20?){6,14}[0-9]$",
      "exceptionStackTrace": null,
      "matches": [
        "+0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
        "+0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
        "+0 0 0 0 0 0",
        "+0  0 0 0 0 0 0",
        "+00 0 0 0 0 0",
        "+0 0 0 0 0 0 0"
      ]
    },
    {
      "regex": "^\\/github\\/size\\/([^/]+)\\/([^/]+)\\/(.*)\\.(svg|png|gif|jpg|json)$",
      "exceptionStackTrace": null,
      "matches": [
        "/github/size/evil/evil//.svg",
        "/github/size/evil/evil/..svg",
        "/github/size/evil/evil/eVil.svg",
        "/github/size/evil/evil/EVIL.svg",
        "/github/size/evil/evil/ev_il.svg",
        "/github/size/evil/evil/ev il.svg",
        "/github/size/evil/evil/ev4il.svg",
        "/github/size/evil/evil/e.svg",
        "/github/size/evil/evil/ .svg",
        "/github/size/evil/evil/6.svg",
        "/github/size/evil/evil/_.svg",
        "/github/size/evil///evil.svg",
        "/github/size/evil/./evil.svg",
        "/github/size/evil/eVil/evil.svg",
        "/github/size/evil/EVIL/evil.svg",
        "/github/size/evil/ev_il/evil.svg",
        "/github/size/evil/ev il/evil.svg",
        "/github/size/evil/ev4il/evil.svg",
        "/github/size/evil/e/evil.svg",
        "/github/size/evil/ /evil.svg",
        "/github/size/evil/6/evil.svg",
        "/github/size/evil/_/evil.svg",
        "/github/size/evil//evil.svg",
        "/github/size///evil/evil.svg",
        "/github/size/./evil/evil.svg",
        "/github/size/eVil/evil/evil.svg",
        "/github/size/EVIL/evil/evil.svg",
        "/github/size/ev_il/evil/evil.svg",
        "/github/size/ev il/evil/evil.svg",
        "/github/size/ev4il/evil/evil.svg",
        "/github/size/e/evil/evil.svg",
        "/github/size/ /evil/evil.svg",
        "/github/size/6/evil/evil.svg",
        "/github/size/_/evil/evil.svg",
        "/github/size//evil/evil.svg",
        "/github/size/evil/evil/.json",
        "/github/size/evil/evil/.jpg",
        "/github/size/evil/evil/.gif",
        "/github/size/evil/evil/.png",
        "/github/size/evil/evil/.svg",
        "/github/size/evil/evil/evil.json",
        "/github/size/evil/evil/evil.jpg",
        "/github/size/evil/evil/evil.gif",
        "/github/size/evil/evil/evil.png",
        "/github/size/evil/evil/evil.svg"
      ]
    },
    { "regex": "\\.idea", "exceptionStackTrace": null, "matches": [".idea"] },
    {
      "regex": "(\\d+?)[:=]",
      "exceptionStackTrace": null,
      "matches": ["0:", "00=", "=", "0="]
    },
    {
      "regex": "^(<p[^>]*>(&nbsp;|&#160;|\\s|\\u00a0|<br \\/>|)<\\/p>[\\r\\n]*|<br \\/>[\\r\\n]*)$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 160"
      },
      "matches": []
    },
    {
      "regex": "/issues/(\\d+)$",
      "exceptionStackTrace": null,
      "matches": ["/issues/00", "/issues/", "/issues/0"]
    },
    {
      "regex": "$uni_notation",
      "exceptionStackTrace": null,
      "matches": ["uni_notation"]
    },
    {
      "regex": "^multipart\\/form-data; boundary=--------------------------\\d{24}$",
      "exceptionStackTrace": null,
      "matches": [
        "multipart/form-data; boundary=--------------------------0000000000000000000000000",
        "multipart/form-data; boundary=--------------------------00000000000000000000000",
        "multipart/form-data; boundary=--------------------------000000000000000000000000"
      ]
    },
    {
      "regex": ".*::(.*)::.*",
      "exceptionStackTrace": null,
      "matches": [
        "evil::evil:::",
        "evil::evil::eVil",
        "evil::evil::EVIL",
        "evil::evil::ev_il",
        "evil::evil::ev il",
        "evil::evil::ev4il",
        "evil::evil::e",
        "evil::evil:: ",
        "evil::evil::6",
        "evil::evil::_",
        "evil::evil::",
        "evil:::::evil",
        "evil::eVil::evil",
        "evil::EVIL::evil",
        "evil::ev_il::evil",
        "evil::ev il::evil",
        "evil::ev4il::evil",
        "evil::e::evil",
        "evil:: ::evil",
        "evil::6::evil",
        "evil::_::evil",
        "evil::::evil",
        ":::evil::evil",
        "eVil::evil::evil",
        "EVIL::evil::evil",
        "ev_il::evil::evil",
        "ev il::evil::evil",
        "ev4il::evil::evil",
        "e::evil::evil",
        " ::evil::evil",
        "6::evil::evil",
        "_::evil::evil",
        "::evil::evil",
        "::::",
        "evil::evil::evil"
      ]
    },
    {
      "regex": "-lnssckbi ?",
      "exceptionStackTrace": null,
      "matches": ["-lnssckbi  ", "-lnssckbi", "-lnssckbi "]
    },
    {
      "regex": "contramap: Function or Contavariant Functor of the same type required for second argument",
      "exceptionStackTrace": null,
      "matches": [
        "contramap: Function or Contavariant Functor of the same type required for second argument"
      ]
    },
    {
      "regex": "^\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"",
      "exceptionStackTrace": null,
      "matches": [
        "\"evil\\aevil\\aevil\"",
        "\"evil\"",
        "\"evil\\a\\\"",
        "\"evil\\a\"\"",
        "\"evil\\aeVil\"",
        "\"evil\\aEVIL\"",
        "\"evil\\aev_il\"",
        "\"evil\\aev il\"",
        "\"evil\\aev4il\"",
        "\"evil\\ae\"",
        "\"evil\\a \"",
        "\"evil\\a6\"",
        "\"evil\\a_\"",
        "\"evil\\a\"",
        "\"evil\\\\evil\"",
        "\"evil\\Aevil\"",
        "\"evil\\0evil\"",
        "\"evil\\\"evil\"",
        "\"evil\\ evil\"",
        "\"\\\\aevil\"",
        "\"\"\\aevil\"",
        "\"eVil\\aevil\"",
        "\"EVIL\\aevil\"",
        "\"ev_il\\aevil\"",
        "\"ev il\\aevil\"",
        "\"ev4il\\aevil\"",
        "\"e\\aevil\"",
        "\" \\aevil\"",
        "\"6\\aevil\"",
        "\"_\\aevil\"",
        "\"\\aevil\"",
        "\"\"",
        "\"evil\\aevil\""
      ]
    },
    {
      "regex": "(.*?) (.*)",
      "exceptionStackTrace": null,
      "matches": [
        "evil eVil",
        "evil EVIL",
        "evil ev_il",
        "evil ev il",
        "evil ev4il",
        "evil e",
        "evil  ",
        "evil 6",
        "evil _",
        "evil ",
        "eVil evil",
        "EVIL evil",
        "ev_il evil",
        "ev il evil",
        "ev4il evil",
        "e evil",
        "  evil",
        "6 evil",
        "_ evil",
        " evil",
        " ",
        "evil evil"
      ]
    },
    {
      "regex": "\\bNS(NotFound|Ordered(Ascending|Descending|Same))\\b",
      "exceptionStackTrace": null,
      "matches": [
        "NSOrderedSame",
        "NSOrderedDescending",
        "NSOrderedAscending",
        "NSNotFound"
      ]
    },
    {
      "regex": "#(([A-Za-z0-9])\\2){3}",
      "exceptionStackTrace": null,
      "matches": ["#00000000", "#0000", "#a00000", "#A00000", "#000000"]
    },
    {
      "regex": "Cannot add new files: already uploading\\.",
      "exceptionStackTrace": null,
      "matches": ["Cannot add new files: already uploading."]
    },
    {
      "regex": "\\/[^\\/]*$",
      "exceptionStackTrace": null,
      "matches": [
        "//",
        "/eVil",
        "/EVIL",
        "/ev_il",
        "/ev il",
        "/ev4il",
        "/e",
        "/ ",
        "/6",
        "/_",
        "/",
        "/evil"
      ]
    },
    {
      "regex": "^(\\.\\/)?app\\/",
      "exceptionStackTrace": null,
      "matches": ["././app/", "app/", "./app/"]
    },
    {
      "regex": "^\\d{4}[\\W_]\\d{1,2}[\\W_]\\d{1,2}",
      "exceptionStackTrace": null,
      "matches": [
        "0000_0_000",
        "0000_0_00",
        "0000_0_",
        "0000_0a0",
        "0000_0A0",
        "0000_000",
        "0000_0 0",
        "0000_000_0",
        "0000_00_0",
        "0000__0",
        "0000a0_0",
        "0000A0_0",
        "000000_0",
        "0000 0_0",
        "00000_0_0",
        "000_0_0",
        "0000_0_0"
      ]
    },
    {
      "regex": "^I should see that the element doesn't exist$",
      "exceptionStackTrace": null,
      "matches": ["I should see that the element doesn't exist"]
    },
    {
      "regex": "^(\n                class|module|end|self|true|false|nil|def|  \n                __FILE__|__LINE__|(\\})\\)\n              )$",
      "exceptionStackTrace": null,
      "matches": [
        "})\n              ",
        "__LINE__",
        "  \n                __FILE__",
        "def",
        "nil",
        "false",
        "true",
        "self",
        "end",
        "module",
        "\n                class"
      ]
    },
    {
      "regex": "^:import\\((.+)\\)$",
      "exceptionStackTrace": null,
      "matches": [
        ":import(:)",
        ":import())",
        ":import(()",
        ":import(eVil)",
        ":import(EVIL)",
        ":import(ev_il)",
        ":import(ev il)",
        ":import(ev4il)",
        ":import(e)",
        ":import( )",
        ":import(6)",
        ":import(_)",
        ":import()",
        ":import(evil)"
      ]
    },
    {
      "regex": "^\\*\\s*@(format|prettier)\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        "* @format  ",
        "* @format",
        "*  @format ",
        "*@format ",
        "*@prettier",
        "*@format",
        "* @prettier ",
        "* @format "
      ]
    },
    {
      "regex": "\\*\\/\\/\\*\\*",
      "exceptionStackTrace": null,
      "matches": ["*//**"]
    },
    {
      "regex": "\\u2032",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 8242"
      },
      "matches": []
    },
    {
      "regex": "\\|(\\d+-\\d+|\\+\\d+)",
      "exceptionStackTrace": null,
      "matches": ["|+00", "|+", "|0-00", "|0-", "|00-0", "|-0", "|+0", "|0-0"]
    },
    {
      "regex": "\\s*mx-diff(?:\\s*=\\s*(['\"])[^'\"]+\\1)?",
      "exceptionStackTrace": null,
      "matches": [
        " mx-diff = \"evil\" = \"evil\"",
        " mx-diff",
        " mx-diff = \"=\"",
        " mx-diff = \"-\"",
        " mx-diff = \"'\"",
        " mx-diff = \"\"\"",
        " mx-diff = \"eVil\"",
        " mx-diff = \"EVIL\"",
        " mx-diff = \"ev_il\"",
        " mx-diff = \"ev il\"",
        " mx-diff = \"ev4il\"",
        " mx-diff = \"e\"",
        " mx-diff = \" \"",
        " mx-diff = \"6\"",
        " mx-diff = \"_\"",
        " mx-diff = \"\"",
        " mx-diff = 'evil\"",
        " mx-diff =  \"evil\"",
        " mx-diff =\"evil\"",
        " mx-diff  = \"evil\"",
        " mx-diff= \"evil\"",
        "  mx-diff = \"evil\"",
        "mx-diff = \"evil\"",
        "mx-diff",
        " mx-diff = \"evil\""
      ]
    },
    {
      "regex": "^\\{(.+)\\}$",
      "exceptionStackTrace": null,
      "matches": [
        "{}}",
        "{{}",
        "{eVil}",
        "{EVIL}",
        "{ev_il}",
        "{ev il}",
        "{ev4il}",
        "{e}",
        "{ }",
        "{6}",
        "{_}",
        "{}",
        "{evil}"
      ]
    },
    {
      "regex": "(.+):.+",
      "exceptionStackTrace": null,
      "matches": [
        "evil::",
        "evil:eVil",
        "evil:EVIL",
        "evil:ev_il",
        "evil:ev il",
        "evil:ev4il",
        "evil:e",
        "evil: ",
        "evil:6",
        "evil:_",
        "evil:",
        "::evil",
        "eVil:evil",
        "EVIL:evil",
        "ev_il:evil",
        "ev il:evil",
        "ev4il:evil",
        "e:evil",
        " :evil",
        "6:evil",
        "_:evil",
        ":evil",
        "evil:evil"
      ]
    },
    {
      "regex": "\\bWindows NT 6.2\\b",
      "exceptionStackTrace": null,
      "matches": [
        "Windows NT 6_2",
        "Windows NT 6A2",
        "Windows NT 602",
        "Windows NT 6 2",
        "Windows NT 6a2"
      ]
    },
    {
      "regex": "Chinese|Mandarin|\\bc[hn]\\b",
      "exceptionStackTrace": null,
      "matches": ["ch", "ca", "cn", "Mandarin", "Chinese"]
    },
    {
      "regex": "^[a-z0-9]{64}",
      "exceptionStackTrace": null,
      "matches": [
        "00000000000000000000000000000000000000000000000000000000000000000",
        "000000000000000000000000000000000000000000000000000000000000000",
        "a000000000000000000000000000000000000000000000000000000000000000",
        "0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    {
      "regex": "^Exception summary for: cascading\\.jruby wrapper exception",
      "exceptionStackTrace": null,
      "matches": ["Exception summary for: cascading.jruby wrapper exception"]
    },
    {
      "regex": "<(\\w+:)?RDF",
      "exceptionStackTrace": null,
      "matches": [
        "<evil:evil:RDF",
        "<eVil:RDF",
        "<EVIL:RDF",
        "<ev_il:RDF",
        "<ev il:RDF",
        "<ev4il:RDF",
        "<e:RDF",
        "< :RDF",
        "<6:RDF",
        "<_:RDF",
        "<:RDF",
        "<RDF",
        "<evil:RDF"
      ]
    },
    {
      "regex": "dnsbl\\.spam-champuru\\.livedoor\\.com",
      "exceptionStackTrace": null,
      "matches": ["dnsbl.spam-champuru.livedoor.com"]
    },
    {
      "regex": "-templates$",
      "exceptionStackTrace": null,
      "matches": ["-templates"]
    },
    { "regex": "^dbi\\:", "exceptionStackTrace": null, "matches": ["dbi:"] },
    {
      "regex": "_([A-Z][A-Z0-9]*)_}\n                        ",
      "exceptionStackTrace": null,
      "matches": [
        "_AeVil_}\n                        ",
        "_AEVIL_}\n                        ",
        "_Aev_il_}\n                        ",
        "_Aev il_}\n                        ",
        "_Aev4il_}\n                        ",
        "_Ae_}\n                        ",
        "_A _}\n                        ",
        "_A6_}\n                        ",
        "_A__}\n                        ",
        "_A_}\n                        ",
        "_Aevil_}\n                        "
      ]
    },
    {
      "regex": "$self->{scalar_re}",
      "exceptionStackTrace": null,
      "matches": ["self->{scalar_re}"]
    },
    {
      "regex": "^chunks\\s+(\\d+)$",
      "exceptionStackTrace": null,
      "matches": ["chunks 00", "chunks ", "chunks  0", "chunks0", "chunks 0"]
    },
    {
      "regex": "^([\\w\\-]+) ([\\w\\-\\\"\\./@:]+) \\{$",
      "exceptionStackTrace": null,
      "matches": [
        "evil { {",
        "evil @ {",
        "evil : {",
        "evil / {",
        "evil . {",
        "evil - {",
        "evil \" {",
        "evil eVil {",
        "evil EVIL {",
        "evil ev_il {",
        "evil ev il {",
        "evil ev4il {",
        "evil e {",
        "evil   {",
        "evil 6 {",
        "evil _ {",
        "evil  {",
        "{ evil {",
        "@ evil {",
        ": evil {",
        "/ evil {",
        ". evil {",
        "- evil {",
        "\" evil {",
        "eVil evil {",
        "EVIL evil {",
        "ev_il evil {",
        "ev il evil {",
        "ev4il evil {",
        "e evil {",
        "  evil {",
        "6 evil {",
        "_ evil {",
        " evil {",
        "evil evil {"
      ]
    },
    {
      "regex": "(([^\\{])?\\{\\{([ %!\\\"\\$\\&\\'\\(\\)\\*,\\-\\.\\/0-9:;=\\?\\@A-Z\\\\\\^_\\`a-z\\~\\x80-\\xFF\\n]*)(\\|[^\\{]*?)?\\}\\})",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 128"
      },
      "matches": []
    },
    {
      "regex": "^(\\d+)(\\s*px)?$",
      "exceptionStackTrace": null,
      "matches": ["0 px px", "0  px", "0px", "00 px", " px", "0", "0 px"]
    },
    {
      "regex": "([^\\pL\\pN]|^)(\\pL|\\pN)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\p"
      },
      "matches": []
    },
    { "regex": "dbi:", "exceptionStackTrace": null, "matches": ["dbi:"] },
    {
      "regex": "Selected puppet server: ",
      "exceptionStackTrace": null,
      "matches": ["Selected puppet server: "]
    },
    {
      "regex": "^[0-9][0-9][0-9][0-9]-[0-9][0-9].*",
      "exceptionStackTrace": null,
      "matches": [
        "0000-00-",
        "0000-00eVil",
        "0000-00EVIL",
        "0000-00ev_il",
        "0000-00ev il",
        "0000-00ev4il",
        "0000-00e",
        "0000-00 ",
        "0000-006",
        "0000-00_",
        "0000-00",
        "0000-00evil"
      ]
    },
    {
      "regex": "window.__NEXT_REGISTER_PAGE\\(\\'",
      "exceptionStackTrace": null,
      "matches": [
        "window___NEXT_REGISTER_PAGE('",
        "windowA__NEXT_REGISTER_PAGE('",
        "window0__NEXT_REGISTER_PAGE('",
        "window(__NEXT_REGISTER_PAGE('",
        "window'__NEXT_REGISTER_PAGE('",
        "window __NEXT_REGISTER_PAGE('",
        "windowa__NEXT_REGISTER_PAGE('"
      ]
    },
    {
      "regex": "^/?calico/felix/v1/host/([^/]+)/status$",
      "exceptionStackTrace": null,
      "matches": [
        "/calico/felix/v1/host///status",
        "/calico/felix/v1/host/eVil/status",
        "/calico/felix/v1/host/EVIL/status",
        "/calico/felix/v1/host/ev_il/status",
        "/calico/felix/v1/host/ev il/status",
        "/calico/felix/v1/host/ev4il/status",
        "/calico/felix/v1/host/e/status",
        "/calico/felix/v1/host/ /status",
        "/calico/felix/v1/host/6/status",
        "/calico/felix/v1/host/_/status",
        "/calico/felix/v1/host//status",
        "//calico/felix/v1/host/evil/status",
        "calico/felix/v1/host/evil/status",
        "/calico/felix/v1/host/evil/status"
      ]
    },
    {
      "regex": "^(\\@|\\*|[\\w\\.\\-]+)?\\s+(\\d+)?\\s*(?:IN)?\\s+(A|A6|AAAA|AFSDB|CNAME|DNAME|HINFO|ISDN|MB|MG|MINFO|MR|MX|NS|NSAP|PTR|RP|RT|SRV|TXT|X25)\\s+(.*?)\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        ". 0 IN A evil ",
        "- 0 IN A evil ",
        "eVil 0 IN A evil ",
        "EVIL 0 IN A evil ",
        "ev_il 0 IN A evil ",
        "ev il 0 IN A evil ",
        "ev4il 0 IN A evil ",
        "e 0 IN A evil ",
        "  0 IN A evil ",
        "6 0 IN A evil ",
        "_ 0 IN A evil ",
        "@ 0 IN A evil  ",
        "@ 0 IN A evil",
        "@ 0 IN A @ ",
        "@ 0 IN A . ",
        "@ 0 IN A - ",
        "@ 0 IN A * ",
        "@ 0 IN A eVil ",
        "@ 0 IN A EVIL ",
        "@ 0 IN A ev_il ",
        "@ 0 IN A ev il ",
        "@ 0 IN A ev4il ",
        "@ 0 IN A e ",
        "@ 0 IN A   ",
        "@ 0 IN A 6 ",
        "@ 0 IN A _ ",
        "@ 0 IN A  ",
        "@ 0 IN A  evil ",
        "@ 0 IN Aevil ",
        "@ 0 IN  A evil ",
        "@ 0 INA evil ",
        "@ 0 ININ A evil ",
        "@ 0  A evil ",
        "@ 0  IN A evil ",
        "@ 0IN A evil ",
        "@ 00 IN A evil ",
        "@  IN A evil ",
        "@  0 IN A evil ",
        "@0 IN A evil ",
        "@@ 0 IN A evil ",
        " 0 IN A evil ",
        "  X25 ",
        "  TXT ",
        "  SRV ",
        "  RT ",
        "  RP ",
        "  PTR ",
        "  NSAP ",
        "  NS ",
        "  MX ",
        "  MR ",
        "  MINFO ",
        "  MG ",
        "  MB ",
        "  ISDN ",
        "  HINFO ",
        "  DNAME ",
        "  CNAME ",
        "  AFSDB ",
        "  AAAA ",
        "  A6 ",
        "  A ",
        "evil 0 IN A evil ",
        "* 0 IN A evil ",
        "@ 0 IN X25 evil ",
        "@ 0 IN TXT evil ",
        "@ 0 IN SRV evil ",
        "@ 0 IN RT evil ",
        "@ 0 IN RP evil ",
        "@ 0 IN PTR evil ",
        "@ 0 IN NSAP evil ",
        "@ 0 IN NS evil ",
        "@ 0 IN MX evil ",
        "@ 0 IN MR evil ",
        "@ 0 IN MINFO evil ",
        "@ 0 IN MG evil ",
        "@ 0 IN MB evil ",
        "@ 0 IN ISDN evil ",
        "@ 0 IN HINFO evil ",
        "@ 0 IN DNAME evil ",
        "@ 0 IN CNAME evil ",
        "@ 0 IN AFSDB evil ",
        "@ 0 IN AAAA evil ",
        "@ 0 IN A6 evil ",
        "@ 0 IN A evil "
      ]
    },
    {
      "regex": "\\A(.*)frozen$",
      "exceptionStackTrace": null,
      "matches": [
        "eVilfrozen",
        "EVILfrozen",
        "ev_ilfrozen",
        "ev ilfrozen",
        "ev4ilfrozen",
        "efrozen",
        " frozen",
        "6frozen",
        "_frozen",
        "frozen",
        "evilfrozen"
      ]
    },
    {
      "regex": "^(\u0434\u043e \u043d\u0430\u0448\u043e\u0457 \u0435\u0440\u0438|\u043d\u0430\u0448\u043e\u0457 \u0435\u0440\u0438|\u043d\u0430\u0448\u0430 \u0435\u0440\u0430)",
      "exceptionStackTrace": null,
      "matches": [
        "\u043d\u0430\u0448\u0430 \u0435\u0440\u0430",
        "\u043d\u0430\u0448\u043e\u0457 \u0435\u0440\u0438",
        "\u0434\u043e \u043d\u0430\u0448\u043e\u0457 \u0435\u0440\u0438"
      ]
    },
    {
      "regex": "^U(\\h{,8})$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\h"
      },
      "matches": []
    },
    {
      "regex": "(?:[a-zA-Z][-_a-zA-Z0-9]*)?:(?:[_a-zA-Z][-_a-zA-Z0-9]*)?",
      "exceptionStackTrace": null,
      "matches": [
        "Aevil:_evil_evil",
        "Aevil:",
        "Aevil:_:",
        "Aevil:_-",
        "Aevil:_eVil",
        "Aevil:_EVIL",
        "Aevil:_ev_il",
        "Aevil:_ev il",
        "Aevil:_ev4il",
        "Aevil:_e",
        "Aevil:_ ",
        "Aevil:_6",
        "Aevil:__",
        "Aevil:_",
        "Aevil:aevil",
        "Aevil:Aevil",
        "AevilAevil:_evil",
        ":_evil",
        "A::_evil",
        "A-:_evil",
        "AeVil:_evil",
        "AEVIL:_evil",
        "Aev_il:_evil",
        "Aev il:_evil",
        "Aev4il:_evil",
        "Ae:_evil",
        "A :_evil",
        "A6:_evil",
        "A_:_evil",
        "A:_evil",
        "aevil:_evil",
        ":",
        "Aevil:_evil"
      ]
    },
    {
      "regex": "{% code-tabs-item title=\".+?\" %}",
      "exceptionStackTrace": null,
      "matches": [
        "{% code-tabs-item title=\"}\" %}",
        "{% code-tabs-item title=\"{\" %}",
        "{% code-tabs-item title=\"=\" %}",
        "{% code-tabs-item title=\"-\" %}",
        "{% code-tabs-item title=\"%\" %}",
        "{% code-tabs-item title=\"\"\" %}",
        "{% code-tabs-item title=\"eVil\" %}",
        "{% code-tabs-item title=\"EVIL\" %}",
        "{% code-tabs-item title=\"ev_il\" %}",
        "{% code-tabs-item title=\"ev il\" %}",
        "{% code-tabs-item title=\"ev4il\" %}",
        "{% code-tabs-item title=\"e\" %}",
        "{% code-tabs-item title=\" \" %}",
        "{% code-tabs-item title=\"6\" %}",
        "{% code-tabs-item title=\"_\" %}",
        "{% code-tabs-item title=\"\" %}",
        "{% code-tabs-item title=\"evil\" %}"
      ]
    },
    {
      "regex": "^(\\d{1,3})x(\\d{1,3})$",
      "exceptionStackTrace": null,
      "matches": ["0x0000", "0x000", "0x", "0000x0", "000x0", "x0", "0x0"]
    },
    {
      "regex": "^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$",
      "exceptionStackTrace": null,
      "matches": [
        "0000-10-00T00:00:00.0-00:60",
        "0000-10-00T00:00:00.0-30:00",
        "0000-10-00T00:00:00.0+00:00",
        "0000-10-00T00:00:00.00-00:00",
        "0000-10-00T00:00:00.-00:00",
        "0000-10-00T00:00:60.0-00:00",
        "0000-10-00T00:60:00.0-00:00",
        "0000-10-00T30:00:00.0-00:00",
        "0000-10-40T00:00:00.0-00:00",
        "0000-20-00T00:00:00.0-00:00",
        "0000-00-00T00:00:00.0-00:00",
        "000-10-00T00:00:00.0-00:00",
        "0000-10-00T00:00:00.0Z",
        "0000-10-00T00:00:00.0-00:00"
      ]
    },
    {
      "regex": "(?:\".*?\"|'.*?'|[^'\"=<>`\\s]+)",
      "exceptionStackTrace": null,
      "matches": [
        "`",
        ">",
        "=",
        "<",
        "'",
        "\"",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "'`'",
        "'>'",
        "'='",
        "'<'",
        "'''",
        "'\"'",
        "'eVil'",
        "'EVIL'",
        "'ev_il'",
        "'ev il'",
        "'ev4il'",
        "'e'",
        "' '",
        "'6'",
        "'_'",
        "\"`\"",
        "\">\"",
        "\"=\"",
        "\"<\"",
        "\"'\"",
        "\"\"\"",
        "\"eVil\"",
        "\"EVIL\"",
        "\"ev_il\"",
        "\"ev il\"",
        "\"ev4il\"",
        "\"e\"",
        "\" \"",
        "\"6\"",
        "\"_\"",
        "''",
        "\"\"",
        "evil",
        "'evil'",
        "\"evil\""
      ]
    },
    {
      "regex": "\\[([0-9.]+)/[0-9.]+\\]$",
      "exceptionStackTrace": null,
      "matches": ["[./..]", "[./]", "[./0]", "[../.]", "[/.]", "[0/.]", "[./.]"]
    },
    {
      "regex": "^(?:[1-9][0-9]{0,2}|1[0-9]{3}|20[0-3][0-9]|204[0-8])$",
      "exceptionStackTrace": null,
      "matches": ["2049", "10000", "100", "00", "1", "2040", "2000", "1000", "10"]
    },
    {
      "regex": "\\A\\/[^\\/]",
      "exceptionStackTrace": null,
      "matches": ["/A", "/0", "//", "/ ", "/a"]
    },
    {
      "regex": "\\.(php[0-9.]*|inc)$",
      "exceptionStackTrace": null,
      "matches": [".php..", ".php0", ".php", ".inc", ".php."]
    },
    {
      "regex": "^1.8\\.",
      "exceptionStackTrace": null,
      "matches": ["1A8.", "108.", "1.8.", "1 8.", "1a8."]
    },
    {
      "regex": "^(((\\d+)/(\\d+))|(\\d+))$",
      "exceptionStackTrace": null,
      "matches": ["00", "", "0/00", "0/", "00/0", "/0", "0", "0/0"]
    },
    {
      "regex": "$opts->{rpattern}",
      "exceptionStackTrace": null,
      "matches": ["opts->{rpattern}"]
    },
    {
      "regex": "^([^a-zA-Z|^_|^:])",
      "exceptionStackTrace": null,
      "matches": ["|", "a", "_", "^", "A", ":", " ", "0"]
    },
    {
      "regex": "flask\\.ext\\.(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "flask.ext..",
        "flask.ext.eVil",
        "flask.ext.EVIL",
        "flask.ext.ev_il",
        "flask.ext.ev il",
        "flask.ext.ev4il",
        "flask.ext.e",
        "flask.ext. ",
        "flask.ext.6",
        "flask.ext._",
        "flask.ext.",
        "flask.ext.evil"
      ]
    },
    {
      "regex": "\\)|\\/wiki\\/",
      "exceptionStackTrace": null,
      "matches": ["/wiki/", ")"]
    },
    {
      "regex": "%VAR_(",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "missing ), unterminated subpattern"
      },
      "matches": []
    },
    {
      "regex": "^Table structure for `(.*)`$",
      "exceptionStackTrace": null,
      "matches": [
        "Table structure for ```",
        "Table structure for `eVil`",
        "Table structure for `EVIL`",
        "Table structure for `ev_il`",
        "Table structure for `ev il`",
        "Table structure for `ev4il`",
        "Table structure for `e`",
        "Table structure for ` `",
        "Table structure for `6`",
        "Table structure for `_`",
        "Table structure for ``",
        "Table structure for `evil`"
      ]
    },
    {
      "regex": "^[0-9a-zA-Z]{8}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{12}$",
      "exceptionStackTrace": null,
      "matches": [
        "AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAAA",
        "AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAA",
        "AAAAAAAA-AAAA-AAAA-AAAA-aAAAAAAAAAAA",
        "AAAAAAAA-AAAA-AAAA-AAAA-0AAAAAAAAAAA",
        "AAAAAAAA-AAAA-AAAA-AAAAA-AAAAAAAAAAAA",
        "AAAAAAAA-AAAA-AAAA-AAA-AAAAAAAAAAAA",
        "AAAAAAAA-AAAA-AAAA-aAAA-AAAAAAAAAAAA",
        "AAAAAAAA-AAAA-AAAA-0AAA-AAAAAAAAAAAA",
        "AAAAAAAA-AAAA-AAAAA-AAAA-AAAAAAAAAAAA",
        "AAAAAAAA-AAAA-AAA-AAAA-AAAAAAAAAAAA",
        "AAAAAAAA-AAAA-aAAA-AAAA-AAAAAAAAAAAA",
        "AAAAAAAA-AAAA-0AAA-AAAA-AAAAAAAAAAAA",
        "AAAAAAAA-AAAAA-AAAA-AAAA-AAAAAAAAAAAA",
        "AAAAAAAA-AAA-AAAA-AAAA-AAAAAAAAAAAA",
        "AAAAAAAA-aAAA-AAAA-AAAA-AAAAAAAAAAAA",
        "AAAAAAAA-0AAA-AAAA-AAAA-AAAAAAAAAAAA",
        "AAAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA",
        "AAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA",
        "aAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA",
        "0AAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA",
        "AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA"
      ]
    },
    {
      "regex": "^[\\t\\r ]*\\n?",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "; *(?:Blade|BLADE|ZTE-BLADE)([^;/]*) Build",
      "exceptionStackTrace": null,
      "matches": [
        "; Blade; Build",
        "; Blade/ Build",
        "; Blade- Build",
        "; BladeeVil Build",
        "; BladeEVIL Build",
        "; Bladeev_il Build",
        "; Bladeev il Build",
        "; Bladeev4il Build",
        "; Bladee Build",
        "; Blade  Build",
        "; Blade6 Build",
        "; Blade_ Build",
        "; Blade Build",
        ";  Bladeevil Build",
        ";Bladeevil Build",
        ";ZTE-BLADE Build",
        ";BLADE Build",
        ";Blade Build",
        "; ZTE-BLADEevil Build",
        "; BLADEevil Build",
        "; Bladeevil Build"
      ]
    },
    {
      "regex": "^  &code\\s+(\\d+)",
      "exceptionStackTrace": null,
      "matches": ["  &code 00", "  &code ", "  &code  0", "  &code0", "  &code 0"]
    },
    {
      "regex": "EI not found",
      "exceptionStackTrace": null,
      "matches": ["EI not found"]
    },
    {
      "regex": "<span[^>]*(font-style: italic; font-weight: bold|font-weight: bold; font-style: italic)[^>]*>([\\w\\W]*?)<\\/span>",
      "exceptionStackTrace": null,
      "matches": [
        "<spanevilfont-style: italic; font-weight: boldevil>eVil</span>",
        "<spanevilfont-style: italic; font-weight: boldevil>EVIL</span>",
        "<spanevilfont-style: italic; font-weight: boldevil>ev_il</span>",
        "<spanevilfont-style: italic; font-weight: boldevil>ev il</span>",
        "<spanevilfont-style: italic; font-weight: boldevil>ev4il</span>",
        "<spanevilfont-style: italic; font-weight: boldevil>e</span>",
        "<spanevilfont-style: italic; font-weight: boldevil> </span>",
        "<spanevilfont-style: italic; font-weight: boldevil>6</span>",
        "<spanevilfont-style: italic; font-weight: boldevil>_</span>",
        "<spanevilfont-style: italic; font-weight: boldevil></span>",
        "<spanevilfont-style: italic; font-weight: bold>>evil</span>",
        "<spanevilfont-style: italic; font-weight: bold<>evil</span>",
        "<spanevilfont-style: italic; font-weight: bold;>evil</span>",
        "<spanevilfont-style: italic; font-weight: bold:>evil</span>",
        "<spanevilfont-style: italic; font-weight: bold/>evil</span>",
        "<spanevilfont-style: italic; font-weight: bold->evil</span>",
        "<spanevilfont-style: italic; font-weight: boldeVil>evil</span>",
        "<spanevilfont-style: italic; font-weight: boldEVIL>evil</span>",
        "<spanevilfont-style: italic; font-weight: boldev_il>evil</span>",
        "<spanevilfont-style: italic; font-weight: boldev il>evil</span>",
        "<spanevilfont-style: italic; font-weight: boldev4il>evil</span>",
        "<spanevilfont-style: italic; font-weight: bolde>evil</span>",
        "<spanevilfont-style: italic; font-weight: bold >evil</span>",
        "<spanevilfont-style: italic; font-weight: bold6>evil</span>",
        "<spanevilfont-style: italic; font-weight: bold_>evil</span>",
        "<spanevilfont-style: italic; font-weight: bold>evil</span>",
        "<span>font-style: italic; font-weight: boldevil>evil</span>",
        "<span<font-style: italic; font-weight: boldevil>evil</span>",
        "<span;font-style: italic; font-weight: boldevil>evil</span>",
        "<span:font-style: italic; font-weight: boldevil>evil</span>",
        "<span/font-style: italic; font-weight: boldevil>evil</span>",
        "<span-font-style: italic; font-weight: boldevil>evil</span>",
        "<spaneVilfont-style: italic; font-weight: boldevil>evil</span>",
        "<spanEVILfont-style: italic; font-weight: boldevil>evil</span>",
        "<spanev_ilfont-style: italic; font-weight: boldevil>evil</span>",
        "<spanev ilfont-style: italic; font-weight: boldevil>evil</span>",
        "<spanev4ilfont-style: italic; font-weight: boldevil>evil</span>",
        "<spanefont-style: italic; font-weight: boldevil>evil</span>",
        "<span font-style: italic; font-weight: boldevil>evil</span>",
        "<span6font-style: italic; font-weight: boldevil>evil</span>",
        "<span_font-style: italic; font-weight: boldevil>evil</span>",
        "<spanfont-style: italic; font-weight: boldevil>evil</span>",
        "<spanfont-weight: bold; font-style: italic></span>",
        "<spanfont-style: italic; font-weight: bold></span>",
        "<spanevilfont-weight: bold; font-style: italicevil>evil</span>",
        "<spanevilfont-style: italic; font-weight: boldevil>evil</span>"
      ]
    },
    {
      "regex": "(?:default|0\\.0\\.0\\.0|::/0)\\s+([\\w\\.:]+)\\s+.*UG",
      "exceptionStackTrace": null,
      "matches": [
        "default evil :UG",
        "default evil /UG",
        "default evil .UG",
        "default evil eVilUG",
        "default evil EVILUG",
        "default evil ev_ilUG",
        "default evil ev ilUG",
        "default evil ev4ilUG",
        "default evil eUG",
        "default evil  UG",
        "default evil 6UG",
        "default evil _UG",
        "default evil  evilUG",
        "default evilevilUG",
        "default : evilUG",
        "default / evilUG",
        "default . evilUG",
        "default eVil evilUG",
        "default EVIL evilUG",
        "default ev_il evilUG",
        "default ev il evilUG",
        "default ev4il evilUG",
        "default e evilUG",
        "default   evilUG",
        "default 6 evilUG",
        "default _ evilUG",
        "default  evilUG",
        "default  evil evilUG",
        "defaultevil evilUG",
        "::/0 evil UG",
        "0.0.0.0 evil UG",
        "default evil UG",
        "::/0 evil evilUG",
        "0.0.0.0 evil evilUG",
        "default evil evilUG"
      ]
    },
    {
      "regex": "^/dev/nvidia[0-9]*$",
      "exceptionStackTrace": null,
      "matches": ["/dev/nvidia00", "/dev/nvidia", "/dev/nvidia0"]
    },
    {
      "regex": "(.+)\u00e6\u0089\u0093(.+)\u00e6\u008a\u0095",
      "exceptionStackTrace": null,
      "matches": [
        "evil\u00e6\u0089\u0093eVil\u00e6\u008a\u0095",
        "evil\u00e6\u0089\u0093EVIL\u00e6\u008a\u0095",
        "evil\u00e6\u0089\u0093ev_il\u00e6\u008a\u0095",
        "evil\u00e6\u0089\u0093ev il\u00e6\u008a\u0095",
        "evil\u00e6\u0089\u0093ev4il\u00e6\u008a\u0095",
        "evil\u00e6\u0089\u0093e\u00e6\u008a\u0095",
        "evil\u00e6\u0089\u0093 \u00e6\u008a\u0095",
        "evil\u00e6\u0089\u00936\u00e6\u008a\u0095",
        "evil\u00e6\u0089\u0093_\u00e6\u008a\u0095",
        "evil\u00e6\u0089\u0093\u00e6\u008a\u0095",
        "eVil\u00e6\u0089\u0093evil\u00e6\u008a\u0095",
        "EVIL\u00e6\u0089\u0093evil\u00e6\u008a\u0095",
        "ev_il\u00e6\u0089\u0093evil\u00e6\u008a\u0095",
        "ev il\u00e6\u0089\u0093evil\u00e6\u008a\u0095",
        "ev4il\u00e6\u0089\u0093evil\u00e6\u008a\u0095",
        "e\u00e6\u0089\u0093evil\u00e6\u008a\u0095",
        " \u00e6\u0089\u0093evil\u00e6\u008a\u0095",
        "6\u00e6\u0089\u0093evil\u00e6\u008a\u0095",
        "_\u00e6\u0089\u0093evil\u00e6\u008a\u0095",
        "\u00e6\u0089\u0093evil\u00e6\u008a\u0095",
        "evil\u00e6\u0089\u0093evil\u00e6\u008a\u0095"
      ]
    },
    {
      "regex": "(<.*>|\\[.*\\])",
      "exceptionStackTrace": null,
      "matches": [
        "[]]",
        "[[]",
        "[>]",
        "[<]",
        "[eVil]",
        "[EVIL]",
        "[ev_il]",
        "[ev il]",
        "[ev4il]",
        "[e]",
        "[ ]",
        "[6]",
        "[_]",
        "<]>",
        "<[>",
        "<>>",
        "<<>",
        "<eVil>",
        "<EVIL>",
        "<ev_il>",
        "<ev il>",
        "<ev4il>",
        "<e>",
        "< >",
        "<6>",
        "<_>",
        "[]",
        "<>",
        "[evil]",
        "<evil>"
      ]
    },
    {
      "regex": "-o PasswordAuthentication='no'",
      "exceptionStackTrace": null,
      "matches": ["-o PasswordAuthentication='no'"]
    },
    {
      "regex": "src(\\s*)=(\\s*)\"?([^\"]+)\"?",
      "exceptionStackTrace": null,
      "matches": [
        "src = \"evil\"\"",
        "src = \"evil",
        "src = \"=\"",
        "src = \"\"\"",
        "src = \"eVil\"",
        "src = \"EVIL\"",
        "src = \"ev_il\"",
        "src = \"ev il\"",
        "src = \"ev4il\"",
        "src = \"e\"",
        "src = \" \"",
        "src = \"6\"",
        "src = \"_\"",
        "src = \"\"",
        "src = \"\"evil\"",
        "src = evil\"",
        "src =  \"evil\"",
        "src =\"evil\"",
        "src  = \"evil\"",
        "src= \"evil\"",
        "src=evil",
        "src = \"evil\""
      ]
    },
    {
      "regex": "expected \\\"action_with_template\\\", got \\\"controller_spec\\/action_with_template(\\.html\\.erb)?\\\"",
      "exceptionStackTrace": null,
      "matches": [
        "expected \"action_with_template\", got \"controller_spec/action_with_template.html.erb.html.erb\"",
        "expected \"action_with_template\", got \"controller_spec/action_with_template\"",
        "expected \"action_with_template\", got \"controller_spec/action_with_template.html.erb\""
      ]
    },
    {
      "regex": "^\\S*magick[^\\+]\\S*?\\.dll$",
      "exceptionStackTrace": null,
      "matches": [
        "evilmagicka..dll",
        "evilmagicka+.dll",
        "evilmagickaeVil.dll",
        "evilmagickaEVIL.dll",
        "evilmagickaev_il.dll",
        "evilmagickaev il.dll",
        "evilmagickaev4il.dll",
        "evilmagickae.dll",
        "evilmagicka .dll",
        "evilmagicka6.dll",
        "evilmagicka_.dll",
        "evilmagicka.dll",
        "evilmagickAevil.dll",
        "evilmagick0evil.dll",
        "evilmagick.evil.dll",
        "evilmagick+evil.dll",
        "evilmagick evil.dll",
        ".magickaevil.dll",
        "+magickaevil.dll",
        "eVilmagickaevil.dll",
        "EVILmagickaevil.dll",
        "ev_ilmagickaevil.dll",
        "ev ilmagickaevil.dll",
        "ev4ilmagickaevil.dll",
        "emagickaevil.dll",
        " magickaevil.dll",
        "6magickaevil.dll",
        "_magickaevil.dll",
        "magickaevil.dll",
        "magicka.dll",
        "evilmagickaevil.dll"
      ]
    },
    { "regex": "coding:", "exceptionStackTrace": null, "matches": ["coding:"] },
    {
      "regex": "^-*(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "--",
        "-eVil",
        "-EVIL",
        "-ev_il",
        "-ev il",
        "-ev4il",
        "-e",
        "- ",
        "-6",
        "-_",
        "-",
        "--evil",
        "evil",
        "",
        "-evil"
      ]
    },
    { "regex": "boundary", "exceptionStackTrace": null, "matches": ["boundary"] },
    {
      "regex": "^(?:float64)|(?:double)",
      "exceptionStackTrace": null,
      "matches": ["double", "float64"]
    },
    {
      "regex": "disable_per_environment_manifest.*true.*environment.conf.*does not match the default_manifest",
      "exceptionStackTrace": null,
      "matches": [
        "disable_per_environment_manifesteviltrueevilenvironmentaconfeVildoes not match the default_manifest",
        "disable_per_environment_manifesteviltrueevilenvironmentaconfEVILdoes not match the default_manifest",
        "disable_per_environment_manifesteviltrueevilenvironmentaconfev_ildoes not match the default_manifest",
        "disable_per_environment_manifesteviltrueevilenvironmentaconfev ildoes not match the default_manifest",
        "disable_per_environment_manifesteviltrueevilenvironmentaconfev4ildoes not match the default_manifest",
        "disable_per_environment_manifesteviltrueevilenvironmentaconfedoes not match the default_manifest",
        "disable_per_environment_manifesteviltrueevilenvironmentaconf does not match the default_manifest",
        "disable_per_environment_manifesteviltrueevilenvironmentaconf6does not match the default_manifest",
        "disable_per_environment_manifesteviltrueevilenvironmentaconf_does not match the default_manifest",
        "disable_per_environment_manifesteviltrueevilenvironmentaconfdoes not match the default_manifest",
        "disable_per_environment_manifesteviltrueevilenvironment_confevildoes not match the default_manifest",
        "disable_per_environment_manifesteviltrueevilenvironmentAconfevildoes not match the default_manifest",
        "disable_per_environment_manifesteviltrueevilenvironment0confevildoes not match the default_manifest",
        "disable_per_environment_manifesteviltrueevilenvironment confevildoes not match the default_manifest",
        "disable_per_environment_manifesteviltrueeVilenvironmentaconfevildoes not match the default_manifest",
        "disable_per_environment_manifesteviltrueEVILenvironmentaconfevildoes not match the default_manifest",
        "disable_per_environment_manifesteviltrueev_ilenvironmentaconfevildoes not match the default_manifest",
        "disable_per_environment_manifesteviltrueev ilenvironmentaconfevildoes not match the default_manifest",
        "disable_per_environment_manifesteviltrueev4ilenvironmentaconfevildoes not match the default_manifest",
        "disable_per_environment_manifesteviltrueeenvironmentaconfevildoes not match the default_manifest",
        "disable_per_environment_manifesteviltrue environmentaconfevildoes not match the default_manifest",
        "disable_per_environment_manifesteviltrue6environmentaconfevildoes not match the default_manifest",
        "disable_per_environment_manifesteviltrue_environmentaconfevildoes not match the default_manifest",
        "disable_per_environment_manifesteviltrueenvironmentaconfevildoes not match the default_manifest",
        "disable_per_environment_manifesteViltrueevilenvironmentaconfevildoes not match the default_manifest",
        "disable_per_environment_manifestEVILtrueevilenvironmentaconfevildoes not match the default_manifest",
        "disable_per_environment_manifestev_iltrueevilenvironmentaconfevildoes not match the default_manifest",
        "disable_per_environment_manifestev iltrueevilenvironmentaconfevildoes not match the default_manifest",
        "disable_per_environment_manifestev4iltrueevilenvironmentaconfevildoes not match the default_manifest",
        "disable_per_environment_manifestetrueevilenvironmentaconfevildoes not match the default_manifest",
        "disable_per_environment_manifest trueevilenvironmentaconfevildoes not match the default_manifest",
        "disable_per_environment_manifest6trueevilenvironmentaconfevildoes not match the default_manifest",
        "disable_per_environment_manifest_trueevilenvironmentaconfevildoes not match the default_manifest",
        "disable_per_environment_manifesttrueevilenvironmentaconfevildoes not match the default_manifest",
        "disable_per_environment_manifesttrueenvironmentaconfdoes not match the default_manifest",
        "disable_per_environment_manifesteviltrueevilenvironmentaconfevildoes not match the default_manifest"
      ]
    },
    { "regex": "^ii ", "exceptionStackTrace": null, "matches": ["ii "] },
    { "regex": "^MAC ", "exceptionStackTrace": null, "matches": ["MAC "] },
    {
      "regex": "^I should have JSON compilation databases in two custom paths$",
      "exceptionStackTrace": null,
      "matches": ["I should have JSON compilation databases in two custom paths"]
    },
    {
      "regex": "^((http|https):\\/\\/|\\/\\/)",
      "exceptionStackTrace": null,
      "matches": ["//", "https://", "http://"]
    },
    {
      "regex": "^(http|https):",
      "exceptionStackTrace": null,
      "matches": ["https:", "http:"]
    },
    {
      "regex": "^(?i)http(?:s)?://[\\s\\S]*$",
      "exceptionStackTrace": null,
      "matches": [
        "https://:",
        "https:///",
        "https://eVil",
        "https://EVIL",
        "https://ev_il",
        "https://ev il",
        "https://ev4il",
        "https://e",
        "https:// ",
        "https://6",
        "https://_",
        "https://",
        "httpss://evil",
        "http://evil",
        "http://",
        "https://evil"
      ]
    },
    {
      "regex": "\\S+ \\(?(start|stop)?\\)? ?[\\/ ](\\w+)",
      "exceptionStackTrace": null,
      "matches": [
        "evil (start)  eVil",
        "evil (start)  EVIL",
        "evil (start)  ev_il",
        "evil (start)  ev il",
        "evil (start)  ev4il",
        "evil (start)  e",
        "evil (start)   ",
        "evil (start)  6",
        "evil (start)  _",
        "evil (start)  ",
        "evil (start) /evil",
        "evil (start)   evil",
        "evil (start) evil",
        "evil (start))  evil",
        "evil (start  evil",
        "evil (startstart)  evil",
        "evil ()  evil",
        "evil ((start)  evil",
        "evil start)  evil",
        "/ (start)  evil",
        ") (start)  evil",
        "( (start)  evil",
        "eVil (start)  evil",
        "EVIL (start)  evil",
        "ev_il (start)  evil",
        "ev il (start)  evil",
        "ev4il (start)  evil",
        "e (start)  evil",
        "  (start)  evil",
        "6 (start)  evil",
        "_ (start)  evil",
        " (start)  evil",
        "evil  evil",
        "evil (stop)  evil",
        "evil (start)  evil"
      ]
    },
    {
      "regex": "^\\ *[A-Z]{3}\\ +[0-9]+\\ +([0-9]+)\n\t\t\t   \\ +(-|[-+]?[0-9]+(?:\\.[0-9]+)?)\\ +[0-9]+\n\t\t\t   \\ +(-|[-+]?[0-9]+(?:\\.[0-9]+)?)\\ +[0-9]+\n\t\t\t   \\ *[\\r\\n]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": "^(.*)\\*$",
      "exceptionStackTrace": null,
      "matches": [
        "**",
        "eVil*",
        "EVIL*",
        "ev_il*",
        "ev il*",
        "ev4il*",
        "e*",
        " *",
        "6*",
        "_*",
        "*",
        "evil*"
      ]
    },
    {
      "regex": "[\\x00\\x7f-\\xff]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 0"
      },
      "matches": []
    },
    {
      "regex": "[\\000-\\010\\013-\\014\\016-\\037\\200-\\377]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported octal value 0"
      },
      "matches": []
    },
    {
      "regex": "\\/artists\\/mbid_1234567890abcd",
      "exceptionStackTrace": null,
      "matches": ["/artists/mbid_1234567890abcd"]
    },
    {
      "regex": "\\._(\\w+)",
      "exceptionStackTrace": null,
      "matches": [
        "._eVil",
        "._EVIL",
        "._ev_il",
        "._ev il",
        "._ev4il",
        "._e",
        "._ ",
        "._6",
        ".__",
        "._",
        "._evil"
      ]
    },
    {
      "regex": "^file not found",
      "exceptionStackTrace": null,
      "matches": ["file not found"]
    },
    {
      "regex": "^[0-9,a-z,A-Z_.]*$",
      "exceptionStackTrace": null,
      "matches": [
        ".",
        ",",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "END HEADER\\n(.+)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "(?:\\A\\s*at.*\\n|^\\s*)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "Host: default",
      "exceptionStackTrace": null,
      "matches": ["Host: default"]
    },
    {
      "regex": "Sequel::DatabaseConnectionError -\\> Mysql::Error: (.*)",
      "exceptionStackTrace": null,
      "matches": [
        "Sequel::DatabaseConnectionError -> Mysql::Error: >",
        "Sequel::DatabaseConnectionError -> Mysql::Error: :",
        "Sequel::DatabaseConnectionError -> Mysql::Error: -",
        "Sequel::DatabaseConnectionError -> Mysql::Error: eVil",
        "Sequel::DatabaseConnectionError -> Mysql::Error: EVIL",
        "Sequel::DatabaseConnectionError -> Mysql::Error: ev_il",
        "Sequel::DatabaseConnectionError -> Mysql::Error: ev il",
        "Sequel::DatabaseConnectionError -> Mysql::Error: ev4il",
        "Sequel::DatabaseConnectionError -> Mysql::Error: e",
        "Sequel::DatabaseConnectionError -> Mysql::Error:  ",
        "Sequel::DatabaseConnectionError -> Mysql::Error: 6",
        "Sequel::DatabaseConnectionError -> Mysql::Error: _",
        "Sequel::DatabaseConnectionError -> Mysql::Error: ",
        "Sequel::DatabaseConnectionError -> Mysql::Error: evil"
      ]
    },
    {
      "regex": "\\B`\\w+\\b",
      "exceptionStackTrace": null,
      "matches": [
        "`eVil",
        "`EVIL",
        "`ev_il",
        "`ev il",
        "`ev4il",
        "`e",
        "` ",
        "`6",
        "`_",
        "`",
        "`evil"
      ]
    },
    {
      "regex": "\\d{1,3},\\d{1,3},\\d{1,3}",
      "exceptionStackTrace": null,
      "matches": [
        "0,0,0000",
        "0,0,000",
        "0,0,",
        "0,0000,0",
        "0,000,0",
        "0,,0",
        "0000,0,0",
        "000,0,0",
        ",0,0",
        "0,0,0"
      ]
    },
    {
      "regex": "^.*?[/:]([^/]+)/([^/]+)\\.git$",
      "exceptionStackTrace": null,
      "matches": [
        "evil:evil/:.git",
        "evil:evil//.git",
        "evil:evil/..git",
        "evil:evil/eVil.git",
        "evil:evil/EVIL.git",
        "evil:evil/ev_il.git",
        "evil:evil/ev il.git",
        "evil:evil/ev4il.git",
        "evil:evil/e.git",
        "evil:evil/ .git",
        "evil:evil/6.git",
        "evil:evil/_.git",
        "evil:evil/.git",
        "evil::/evil.git",
        "evil://evil.git",
        "evil:./evil.git",
        "evil:eVil/evil.git",
        "evil:EVIL/evil.git",
        "evil:ev_il/evil.git",
        "evil:ev il/evil.git",
        "evil:ev4il/evil.git",
        "evil:e/evil.git",
        "evil: /evil.git",
        "evil:6/evil.git",
        "evil:_/evil.git",
        "evil:/evil.git",
        "evil/evil/evil.git",
        "::evil/evil.git",
        "/:evil/evil.git",
        ".:evil/evil.git",
        "eVil:evil/evil.git",
        "EVIL:evil/evil.git",
        "ev_il:evil/evil.git",
        "ev il:evil/evil.git",
        "ev4il:evil/evil.git",
        "e:evil/evil.git",
        " :evil/evil.git",
        "6:evil/evil.git",
        "_:evil/evil.git",
        ":evil/evil.git",
        "evil:evil/evil.git"
      ]
    },
    {
      "regex": "^\\#line\\s+---(?=\\s)",
      "exceptionStackTrace": null,
      "matches": ["#line  ---", "#line---", "#line ---"]
    },
    { "regex": "\\.x$", "exceptionStackTrace": null, "matches": [".x"] },
    {
      "regex": "ERROR: perl \\(.*?\\) is installed, but we need version",
      "exceptionStackTrace": null,
      "matches": [
        "ERROR: perl (:) is installed, but we need version",
        "ERROR: perl (,) is installed, but we need version",
        "ERROR: perl ()) is installed, but we need version",
        "ERROR: perl (() is installed, but we need version",
        "ERROR: perl (eVil) is installed, but we need version",
        "ERROR: perl (EVIL) is installed, but we need version",
        "ERROR: perl (ev_il) is installed, but we need version",
        "ERROR: perl (ev il) is installed, but we need version",
        "ERROR: perl (ev4il) is installed, but we need version",
        "ERROR: perl (e) is installed, but we need version",
        "ERROR: perl ( ) is installed, but we need version",
        "ERROR: perl (6) is installed, but we need version",
        "ERROR: perl (_) is installed, but we need version",
        "ERROR: perl () is installed, but we need version",
        "ERROR: perl (evil) is installed, but we need version"
      ]
    },
    {
      "regex": "custom eslint called",
      "exceptionStackTrace": null,
      "matches": ["custom eslint called"]
    },
    {
      "regex": "[\\u004D\\u24C2\\uFF2D\\u1E3E\\u1E40\\u1E42\\u2C6E\\u019C]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 9410"
      },
      "matches": []
    },
    {
      "regex": "^windows|osx",
      "exceptionStackTrace": null,
      "matches": ["osx", "windows"]
    },
    {
      "regex": "((([+-](\\d{2})):?(\\d{2}))|Z)",
      "exceptionStackTrace": null,
      "matches": [
        "-00:000",
        "-00:0",
        "-00::00",
        "-000:00",
        "-0:00",
        "+00:00",
        "-0000",
        "Z",
        "-00:00"
      ]
    },
    {
      "regex": "(^|\\s)@(\\S*)",
      "exceptionStackTrace": null,
      "matches": [
        "@@",
        "@eVil",
        "@EVIL",
        "@ev_il",
        "@ev il",
        "@ev4il",
        "@e",
        "@ ",
        "@6",
        "@_",
        " @",
        "@",
        " @evil",
        "@evil"
      ]
    },
    {
      "regex": "\\w('s|s')(\\s|$)",
      "exceptionStackTrace": null,
      "matches": ["_'s ", "A's ", "0's ", "as' ", "a's", "a's "]
    },
    {
      "regex": "/api/designer/collections/([^/]+)/templates/actions/compile",
      "exceptionStackTrace": null,
      "matches": [
        "/api/designer/collections///templates/actions/compile",
        "/api/designer/collections/eVil/templates/actions/compile",
        "/api/designer/collections/EVIL/templates/actions/compile",
        "/api/designer/collections/ev_il/templates/actions/compile",
        "/api/designer/collections/ev il/templates/actions/compile",
        "/api/designer/collections/ev4il/templates/actions/compile",
        "/api/designer/collections/e/templates/actions/compile",
        "/api/designer/collections/ /templates/actions/compile",
        "/api/designer/collections/6/templates/actions/compile",
        "/api/designer/collections/_/templates/actions/compile",
        "/api/designer/collections//templates/actions/compile",
        "/api/designer/collections/evil/templates/actions/compile"
      ]
    },
    {
      "regex": "\\s*\\+\\s",
      "exceptionStackTrace": null,
      "matches": ["  + ", "+ ", " + "]
    },
    {
      "regex": "^[-0123456789]+$",
      "exceptionStackTrace": null,
      "matches": ["99", "", "8", "7", "6", "5", "4", "3", "2", "1", "0", "-", "9"]
    },
    {
      "regex": "file|local|wmapp",
      "exceptionStackTrace": null,
      "matches": ["wmapp", "local", "file"]
    },
    {
      "regex": "(A[0-9]+)",
      "exceptionStackTrace": null,
      "matches": ["A00", "A", "A0"]
    },
    {
      "regex": "\\W\\.\\.\\/Definitions\\/Europe\\/London\\b",
      "exceptionStackTrace": null,
      "matches": [
        "a../Definitions/Europe/London",
        "_../Definitions/Europe/London",
        "A../Definitions/Europe/London",
        "0../Definitions/Europe/London",
        "/../Definitions/Europe/London",
        ".../Definitions/Europe/London",
        " ../Definitions/Europe/London",
        ";../Definitions/Europe/London"
      ]
    },
    {
      "regex": "\\.3gp|\\.avi|\\.m4v|\\.mov|\\.mp4|\\.mpg|\\.mpeg|\\.qt",
      "exceptionStackTrace": null,
      "matches": [".qt", ".mpeg", ".mpg", ".mp4", ".mov", ".m4v", ".avi", ".3gp"]
    },
    {
      "regex": "[\\xc0-\\xff][\\x80-\\xbf]+",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 192"
      },
      "matches": []
    },
    {
      "regex": "(\\[\\%([^\\>\\]]*)\\:([^\\]]*)\\])",
      "exceptionStackTrace": null,
      "matches": [
        "[%evil:]]",
        "[%evil:[]",
        "[%evil:>]",
        "[%evil::]",
        "[%evil:%]",
        "[%evil:eVil]",
        "[%evil:EVIL]",
        "[%evil:ev_il]",
        "[%evil:ev il]",
        "[%evil:ev4il]",
        "[%evil:e]",
        "[%evil: ]",
        "[%evil:6]",
        "[%evil:_]",
        "[%evil:]",
        "[%]:evil]",
        "[%[:evil]",
        "[%>:evil]",
        "[%::evil]",
        "[%%:evil]",
        "[%eVil:evil]",
        "[%EVIL:evil]",
        "[%ev_il:evil]",
        "[%ev il:evil]",
        "[%ev4il:evil]",
        "[%e:evil]",
        "[% :evil]",
        "[%6:evil]",
        "[%_:evil]",
        "[%:evil]",
        "[%:]",
        "[%evil:evil]"
      ]
    },
    {
      "regex": "\\A-[ar]\\Z",
      "exceptionStackTrace": null,
      "matches": ["-b", "-a", "-r"]
    },
    {
      "regex": "^(?:\\.or singular\\?\\})",
      "exceptionStackTrace": null,
      "matches": [".or singular?}"]
    },
    {
      "regex": "^\\s*(\\/\\/)",
      "exceptionStackTrace": null,
      "matches": ["  //", "//", " //"]
    },
    {
      "regex": "^Standard",
      "exceptionStackTrace": null,
      "matches": ["Standard"]
    },
    {
      "regex": "^cabal\\.config$|.*\\/cabal\\.config$",
      "exceptionStackTrace": null,
      "matches": [
        "//cabal.config",
        "./cabal.config",
        "eVil/cabal.config",
        "EVIL/cabal.config",
        "ev_il/cabal.config",
        "ev il/cabal.config",
        "ev4il/cabal.config",
        "e/cabal.config",
        " /cabal.config",
        "6/cabal.config",
        "_/cabal.config",
        "/cabal.config",
        "evil/cabal.config",
        "cabal.config"
      ]
    },
    {
      "regex": "^ \\@? ( [*a-z0-9._-]+ )\n                         (?: \\s+ (nxdomain|unknown|all|discardable|\n                                  custom_low|custom_med|custom_high) )?$",
      "exceptionStackTrace": null,
      "matches": [
        " @  evil \n                            nxdomain    nxdomain ",
        " @  evil \n                         ",
        " @  evil \n                             nxdomain ",
        " @  evil \n                           nxdomain ",
        " @  @ \n                            nxdomain ",
        " @  . \n                            nxdomain ",
        " @  - \n                            nxdomain ",
        " @  * \n                            nxdomain ",
        " @  eVil \n                            nxdomain ",
        " @  EVIL \n                            nxdomain ",
        " @  ev_il \n                            nxdomain ",
        " @  ev il \n                            nxdomain ",
        " @  ev4il \n                            nxdomain ",
        " @  e \n                            nxdomain ",
        " @    \n                            nxdomain ",
        " @  6 \n                            nxdomain ",
        " @  _ \n                            nxdomain ",
        " @   \n                            nxdomain ",
        " @@  evil \n                            nxdomain ",
        "   evil \n                            nxdomain ",
        "   evil \n                         ",
        " @  evil \n                            custom_high ",
        " @  evil \n                            custom_med ",
        " @  evil \n                            \n                                  custom_low ",
        " @  evil \n                            discardable ",
        " @  evil \n                            all ",
        " @  evil \n                            unknown ",
        " @  evil \n                            nxdomain "
      ]
    },
    {
      "regex": "^r?alphabetic$",
      "exceptionStackTrace": null,
      "matches": ["rralphabetic", "alphabetic", "ralphabetic"]
    },
    {
      "regex": "(\\'(?:[^\\']+|\\'\\')*\\')",
      "exceptionStackTrace": null,
      "matches": [
        "'evilevil'",
        "'''",
        "'eVil'",
        "'EVIL'",
        "'ev_il'",
        "'ev il'",
        "'ev4il'",
        "'e'",
        "' '",
        "'6'",
        "'_'",
        "''",
        "''''",
        "'evil'"
      ]
    },
    {
      "regex": "^the version should be \"(.*?)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "the version should be \"\"\"",
        "the version should be \"eVil\"",
        "the version should be \"EVIL\"",
        "the version should be \"ev_il\"",
        "the version should be \"ev il\"",
        "the version should be \"ev4il\"",
        "the version should be \"e\"",
        "the version should be \" \"",
        "the version should be \"6\"",
        "the version should be \"_\"",
        "the version should be \"\"",
        "the version should be \"evil\""
      ]
    },
    {
      "regex": "datatype><normal> = [] };<",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unterminated character set"
      },
      "matches": []
    },
    {
      "regex": "^ \\s* (\\w+) \\s* = \\s* (\\S+)",
      "exceptionStackTrace": null,
      "matches": [
        "   evil   =   =",
        "   evil   =   eVil",
        "   evil   =   EVIL",
        "   evil   =   ev_il",
        "   evil   =   ev il",
        "   evil   =   ev4il",
        "   evil   =   e",
        "   evil   =    ",
        "   evil   =   6",
        "   evil   =   _",
        "   evil   =   ",
        "   evil   =    evil",
        "   evil   =  evil",
        "   evil    =   evil",
        "   evil  =   evil",
        "   eVil   =   evil",
        "   EVIL   =   evil",
        "   ev_il   =   evil",
        "   ev il   =   evil",
        "   ev4il   =   evil",
        "   e   =   evil",
        "       =   evil",
        "   6   =   evil",
        "   _   =   evil",
        "      =   evil",
        "    evil   =   evil",
        "  evil   =   evil",
        "  evil  =  evil",
        "   evil   =   evil"
      ]
    },
    {
      "regex": "([^\\n]*)\\n.*",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "(test/test_apps/(\\d\\.\\d))/gemfiles/(.*ruby(\\d\\.\\d\\.\\d)\\.gemfile)",
      "exceptionStackTrace": null,
      "matches": [
        "test/test_apps/0.0/gemfiles//ruby0.0.0.gemfile",
        "test/test_apps/0.0/gemfiles/.ruby0.0.0.gemfile",
        "test/test_apps/0.0/gemfiles/eVilruby0.0.0.gemfile",
        "test/test_apps/0.0/gemfiles/EVILruby0.0.0.gemfile",
        "test/test_apps/0.0/gemfiles/ev_ilruby0.0.0.gemfile",
        "test/test_apps/0.0/gemfiles/ev ilruby0.0.0.gemfile",
        "test/test_apps/0.0/gemfiles/ev4ilruby0.0.0.gemfile",
        "test/test_apps/0.0/gemfiles/eruby0.0.0.gemfile",
        "test/test_apps/0.0/gemfiles/ ruby0.0.0.gemfile",
        "test/test_apps/0.0/gemfiles/6ruby0.0.0.gemfile",
        "test/test_apps/0.0/gemfiles/_ruby0.0.0.gemfile",
        "test/test_apps/0.0/gemfiles/ruby0.0.0.gemfile",
        "test/test_apps/0.0/gemfiles/evilruby0.0.0.gemfile"
      ]
    },
    {
      "regex": "\\v|\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\v"
      },
      "matches": []
    },
    {
      "regex": "\\\\[.-]",
      "exceptionStackTrace": null,
      "matches": ["\\.", "\\-"]
    },
    {
      "regex": "\\/([ve]|embed)\\/([^#?]+)",
      "exceptionStackTrace": null,
      "matches": [
        "/e/?",
        "/e//",
        "/e/#",
        "/e/eVil",
        "/e/EVIL",
        "/e/ev_il",
        "/e/ev il",
        "/e/ev4il",
        "/e/e",
        "/e/ ",
        "/e/6",
        "/e/_",
        "/e/",
        "/v/evil",
        "/a/evil",
        "/embed/evil",
        "/e/evil"
      ]
    },
    { "regex": "MainForm", "exceptionStackTrace": null, "matches": ["MainForm"] },
    {
      "regex": "[fai]load_(\\d)",
      "exceptionStackTrace": null,
      "matches": ["fload_0", "bload_0", "aload_0", "iload_0"]
    },
    {
      "regex": "\\}\\(this, function \\(numeral\\) \\{\\s([\\s\\S]+)(?:\\s\\}\\)\\);)",
      "exceptionStackTrace": null,
      "matches": [
        "}(this, function (numeral) { } }));",
        "}(this, function (numeral) { { }));",
        "}(this, function (numeral) { ; }));",
        "}(this, function (numeral) { , }));",
        "}(this, function (numeral) { ) }));",
        "}(this, function (numeral) { ( }));",
        "}(this, function (numeral) { eVil }));",
        "}(this, function (numeral) { EVIL }));",
        "}(this, function (numeral) { ev_il }));",
        "}(this, function (numeral) { ev il }));",
        "}(this, function (numeral) { ev4il }));",
        "}(this, function (numeral) { e }));",
        "}(this, function (numeral) {   }));",
        "}(this, function (numeral) { 6 }));",
        "}(this, function (numeral) { _ }));",
        "}(this, function (numeral) {  }));",
        "}(this, function (numeral) { evil }));"
      ]
    },
    {
      "regex": "^\\s*::",
      "exceptionStackTrace": null,
      "matches": ["  ::", "::", " ::"]
    },
    {
      "regex": "(\\w+)s(\\b)",
      "exceptionStackTrace": null,
      "matches": [
        "eVils",
        "EVILs",
        "ev_ils",
        "ev ils",
        "ev4ils",
        "es",
        " s",
        "6s",
        "_s",
        "s",
        "evils"
      ]
    },
    { "regex": "{refby}", "exceptionStackTrace": null, "matches": ["{refby}"] },
    {
      "regex": "([^\\\\])(\\\\\\\\)*\\.",
      "exceptionStackTrace": null,
      "matches": [
        "a\\\\\\\\.",
        "\\\\\\.",
        "A\\\\.",
        "0\\\\.",
        ".\\\\.",
        " \\\\.",
        "a.",
        "a\\\\."
      ]
    },
    {
      "regex": "(?<![<>])(<A pl=\"n\" gnt=\"n\">(?:[Dd]h\\x{e1}|[Tt]h?r\\x{ed}|[Cc]h?eithre|[Cc]h?\\x{fa}ig|[Ss]h?\\x{e9}|[Ss]h?eacht|[Oo]cht|[Nn]aoi)<\\/A> (?:<N[^>]*pl=\"n\"[^>]*>[^<]+<\\/N>) <N pl=\"n\" gnt=\"n\">[Dd]h?\\x{e9}ag<\\/N> (?:<A[^>]*pl=\"n\"[^>]*>[^<]+<\\/A>))(?![<>])",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "incomplete escape \\x"
      },
      "matches": []
    },
    {
      "regex": "<<-'\\w+'$",
      "exceptionStackTrace": null,
      "matches": [
        "<<-'eVil'",
        "<<-'EVIL'",
        "<<-'ev_il'",
        "<<-'ev il'",
        "<<-'ev4il'",
        "<<-'e'",
        "<<-' '",
        "<<-'6'",
        "<<-'_'",
        "<<-''",
        "<<-'evil'"
      ]
    },
    { "regex": "ifted$", "exceptionStackTrace": null, "matches": ["ifted"] },
    {
      "regex": "^\\s+<delete><query>",
      "exceptionStackTrace": null,
      "matches": ["  <delete><query>", "<delete><query>", " <delete><query>"]
    },
    {
      "regex": "\\/\\xd6\\/t",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 214"
      },
      "matches": []
    },
    {
      "regex": "^(?:0x|\\\\u|U[+]?)([\\da-f]+)$",
      "exceptionStackTrace": null,
      "matches": ["U++a", "0xaa", "0x", "0xg", "0x0", "Ua", "U+a", "\\ua", "0xa"]
    },
    {
      "regex": "^https?://([^\\.]*\\.)?foo.com/(show/)?\\d+",
      "exceptionStackTrace": null,
      "matches": [
        "https://evil.fooacom/show/00",
        "https://evil.fooacom/show/",
        "https://evil.fooacom/show/show/0",
        "https://evil.fooacom/0",
        "https://evil.fooAcom/show/0",
        "https://evil.foo:com/show/0",
        "https://evil.foo0com/show/0",
        "https://evil.foo/com/show/0",
        "https://evil.foo.com/show/0",
        "https://evil.foo com/show/0",
        "https://evil.evil.fooacom/show/0",
        "https://fooacom/show/0",
        "https://:.fooacom/show/0",
        "https:///.fooacom/show/0",
        "https://..fooacom/show/0",
        "https://eVil.fooacom/show/0",
        "https://EVIL.fooacom/show/0",
        "https://ev_il.fooacom/show/0",
        "https://ev il.fooacom/show/0",
        "https://ev4il.fooacom/show/0",
        "https://e.fooacom/show/0",
        "https:// .fooacom/show/0",
        "https://6.fooacom/show/0",
        "https://_.fooacom/show/0",
        "https://.fooacom/show/0",
        "httpss://evil.fooacom/show/0",
        "http://evil.fooacom/show/0",
        "http://fooacom/0",
        "https://evil.fooacom/show/0"
      ]
    },
    {
      "regex": "^rails generate foobar:foobar",
      "exceptionStackTrace": null,
      "matches": ["rails generate foobar:foobar"]
    },
    {
      "regex": "^([0-9]{0}|[0-9]{8}|[0-9]{12,14}|SEM GTIN)$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (pointless repeat): pointless repeat quantifier {0}"
      },
      "matches": []
    },
    {
      "regex": "##contig.*length=(.*?)>",
      "exceptionStackTrace": null,
      "matches": [
        "##contigevillength=>>",
        "##contigevillength==>",
        "##contigevillength=#>",
        "##contigevillength=eVil>",
        "##contigevillength=EVIL>",
        "##contigevillength=ev_il>",
        "##contigevillength=ev il>",
        "##contigevillength=ev4il>",
        "##contigevillength=e>",
        "##contigevillength= >",
        "##contigevillength=6>",
        "##contigevillength=_>",
        "##contigevillength=>",
        "##contig>length=evil>",
        "##contig=length=evil>",
        "##contig#length=evil>",
        "##contigeVillength=evil>",
        "##contigEVILlength=evil>",
        "##contigev_illength=evil>",
        "##contigev illength=evil>",
        "##contigev4illength=evil>",
        "##contigelength=evil>",
        "##contig length=evil>",
        "##contig6length=evil>",
        "##contig_length=evil>",
        "##contiglength=evil>",
        "##contiglength=>",
        "##contigevillength=evil>"
      ]
    },
    {
      "regex": "([A-Za-z][A-Za-z0-9])( *-> *)(?:([-+*\\/]=)( *)((?:-)?)([0-9]+)|(=)( *)(?:((?:-)?)([0-9]+)|(\"[^\"]*\")|('[^']*')))",
      "exceptionStackTrace": null,
      "matches": [
        "a0 -> = '>'",
        "a0 -> = '='",
        "a0 -> = '/'",
        "a0 -> = '-'",
        "a0 -> = '+'",
        "a0 -> = '*'",
        "a0 -> = '''",
        "a0 -> = '\"'",
        "a0 -> = 'eVil'",
        "a0 -> = 'EVIL'",
        "a0 -> = 'ev_il'",
        "a0 -> = 'ev il'",
        "a0 -> = 'ev4il'",
        "a0 -> = 'e'",
        "a0 -> = ' '",
        "a0 -> = '6'",
        "a0 -> = '_'",
        "a0 -> = ''",
        "a0 -> = \">\"",
        "a0 -> = \"=\"",
        "a0 -> = \"/\"",
        "a0 -> = \"-\"",
        "a0 -> = \"+\"",
        "a0 -> = \"*\"",
        "a0 -> = \"'\"",
        "a0 -> = \"\"\"",
        "a0 -> = \"eVil\"",
        "a0 -> = \"EVIL\"",
        "a0 -> = \"ev_il\"",
        "a0 -> = \"ev il\"",
        "a0 -> = \"ev4il\"",
        "a0 -> = \"e\"",
        "a0 -> = \" \"",
        "a0 -> = \"6\"",
        "a0 -> = \"_\"",
        "a0 -> = \"\"",
        "a0 -> = -00",
        "a0 -> = -",
        "a0 -> = --0",
        "a0 -> = 0",
        "a0 -> =  -0",
        "a0 -> =-0",
        "a0 -> /= -00",
        "a0 -> /= -",
        "a0 -> /= --0",
        "a0 -> /= 0",
        "a0 -> /=  -0",
        "a0 -> /=-0",
        "a0 -> -= -0",
        "a0 -> += -0",
        "a0 -> *= -0",
        "a0 ->  /= -0",
        "a0 ->/= -0",
        "a0  -> /= -0",
        "a0-> /= -0",
        "aa -> /= -0",
        "aA -> /= -0",
        "A0 -> /= -0",
        "a0->=''",
        "a0->=\"\"",
        "a0->=0",
        "a0->/=0",
        "a0 -> = 'evil'",
        "a0 -> = \"evil\"",
        "a0 -> = -0",
        "a0 -> /= -0"
      ]
    },
    { "regex": "\\Atable", "exceptionStackTrace": null, "matches": ["table"] },
    {
      "regex": "^\\s*(#\\s*(if(n?def)?)\\b.*?(?:(?=(?://|/\\*))|$))",
      "exceptionStackTrace": null,
      "matches": [
        " # ifndef/",
        " # ifndef*",
        " # ifndef#",
        " # ifndefeVil",
        " # ifndefEVIL",
        " # ifndefev_il",
        " # ifndefev il",
        " # ifndefev4il",
        " # ifndefe",
        " # ifndef ",
        " # ifndef6",
        " # ifndef_",
        " # ifndef",
        " # ifndefndefevil",
        " # ifevil",
        " # ifnndefevil",
        " # ifdefevil",
        " #  ifndefevil",
        " #ifndefevil",
        "  # ifndefevil",
        "# ifndefevil",
        "#if",
        " # ifndefevil"
      ]
    },
    {
      "regex": "\\s*python\\s*module\\s*(?P<name>[\\w_]*?__user__[\\w_]*)",
      "exceptionStackTrace": null,
      "matches": [
        " python module evil__user__eVil",
        " python module evil__user__EVIL",
        " python module evil__user__ev_il",
        " python module evil__user__ev il",
        " python module evil__user__ev4il",
        " python module evil__user__e",
        " python module evil__user__ ",
        " python module evil__user__6",
        " python module evil__user___",
        " python module evil__user__",
        " python module eVil__user__evil",
        " python module EVIL__user__evil",
        " python module ev_il__user__evil",
        " python module ev il__user__evil",
        " python module ev4il__user__evil",
        " python module e__user__evil",
        " python module  __user__evil",
        " python module 6__user__evil",
        " python module ___user__evil",
        " python module __user__evil",
        " python module  evil__user__evil",
        " python moduleevil__user__evil",
        " python  module evil__user__evil",
        " pythonmodule evil__user__evil",
        "  python module evil__user__evil",
        "python module evil__user__evil",
        "pythonmodule__user__",
        " python module evil__user__evil"
      ]
    },
    { "regex": "^OPTIONS$", "exceptionStackTrace": null, "matches": ["OPTIONS"] },
    {
      "regex": "(?:please|sorry|thank(?:s| you))",
      "exceptionStackTrace": null,
      "matches": ["thank you", "thanks", "sorry", "please"]
    },
    {
      "regex": "^\\d+\\s+\\d+\\s+\\d+\\s+(\\d+)\\s+--",
      "exceptionStackTrace": null,
      "matches": [
        "0 0 0 0  --",
        "0 0 0 0--",
        "0 0 0 00 --",
        "0 0 0  --",
        "0 0 0  0 --",
        "0 0 00 --",
        "0 0 00 0 --",
        "0 0  0 --",
        "0 0  0 0 --",
        "0 00 0 --",
        "0 00 0 0 --",
        "0  0 0 --",
        "0  0 0 0 --",
        "00 0 0 --",
        "00 0 0 0 --",
        " 0 0 0 --",
        "0 0 0 0 --"
      ]
    },
    {
      "regex": "my state (.*) at ($DATE);",
      "exceptionStackTrace": null,
      "matches": [
        "my state ; at DATE;",
        "my state eVil at DATE;",
        "my state EVIL at DATE;",
        "my state ev_il at DATE;",
        "my state ev il at DATE;",
        "my state ev4il at DATE;",
        "my state e at DATE;",
        "my state   at DATE;",
        "my state 6 at DATE;",
        "my state _ at DATE;",
        "my state  at DATE;",
        "my state evil at DATE;"
      ]
    },
    {
      "regex": "(#)(\\s+)(\\d+)(\\s+)(hosts)(\n)",
      "exceptionStackTrace": null,
      "matches": [
        "# 0  hosts\n",
        "# 0hosts\n",
        "# 00 hosts\n",
        "#  hosts\n",
        "#  0 hosts\n",
        "#0 hosts\n",
        "# 0 hosts\n"
      ]
    },
    {
      "regex": "(-?)(.+:)?(.+)",
      "exceptionStackTrace": null,
      "matches": [
        "-evil::",
        "-evil:-",
        "-evil:eVil",
        "-evil:EVIL",
        "-evil:ev_il",
        "-evil:ev il",
        "-evil:ev4il",
        "-evil:e",
        "-evil: ",
        "-evil:6",
        "-evil:_",
        "-evil:",
        "-evil:evil:evil",
        "-evil",
        "-::evil",
        "--:evil",
        "-eVil:evil",
        "-EVIL:evil",
        "-ev_il:evil",
        "-ev il:evil",
        "-ev4il:evil",
        "-e:evil",
        "- :evil",
        "-6:evil",
        "-_:evil",
        "-:evil",
        "--evil:evil",
        "evil:evil",
        "evil",
        "-evil:evil"
      ]
    },
    {
      "regex": "firefox/(.+)",
      "exceptionStackTrace": null,
      "matches": [
        "firefox//",
        "firefox/eVil",
        "firefox/EVIL",
        "firefox/ev_il",
        "firefox/ev il",
        "firefox/ev4il",
        "firefox/e",
        "firefox/ ",
        "firefox/6",
        "firefox/_",
        "firefox/",
        "firefox/evil"
      ]
    },
    {
      "regex": "interix|win",
      "exceptionStackTrace": null,
      "matches": ["win", "interix"]
    },
    {
      "regex": "@mixin make-grid-columns",
      "exceptionStackTrace": null,
      "matches": ["@mixin make-grid-columns"]
    },
    {
      "regex": "\\Q$subprefix\\E",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\Q"
      },
      "matches": []
    },
    {
      "regex": "<link\\s+rel=[\\'\\\"]alternate[\\'\\\"].*?type=[\\'\\\"](application.*?)[\\'\\\"].*?title=[\\\"\\'](.*?)[\\\"\\'].*?href=[\\\"\\'](.*?)[\\\"\\'].*?\\/>",
      "exceptionStackTrace": null,
      "matches": [
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='evil'>/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='evil'=/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='evil'</>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='evil'//>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='evil''/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='evil'\"/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='evil'eVil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='evil'EVIL/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='evil'ev_il/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='evil'ev il/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='evil'ev4il/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='evil'e/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='evil' />",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='evil'6/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='evil'_/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='evil'/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='evil\"evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='>'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='='evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='<'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='/'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='''evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='\"'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='eVil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='EVIL'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='ev_il'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='ev il'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='ev4il'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='e'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref=' 'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='6'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='_'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref=''evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref=\"evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'>href='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'=href='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'<href='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'/href='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil''href='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'\"href='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'eVilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'EVILhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'ev_ilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'ev ilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'ev4ilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'ehref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil' href='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'6href='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'_href='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'href='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil\"evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='>'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='='evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='<'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='/'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='''evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='\"'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='eVil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='EVIL'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='ev_il'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='ev il'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='ev4il'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='e'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle=' 'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='6'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='_'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle=''evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle=\"evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\">title='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"=title='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"<title='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"/title='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"'title='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"\"title='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eViltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"EVILtitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"ev_iltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"ev iltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"ev4iltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"etitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\" title='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"6title='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"_title='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"title='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil'eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"application>\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"application=\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"application<\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"application/\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"application'\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"application\"\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationeVil\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationEVIL\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationev_il\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationev il\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicationev4il\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"applicatione\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"application \"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"application6\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"application_\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype=\"application\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eviltype='applicationevil\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\">type=\"applicationevil\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"=type=\"applicationevil\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"<type=\"applicationevil\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"/type=\"applicationevil\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"'type=\"applicationevil\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"\"type=\"applicationevil\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"eViltype=\"applicationevil\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"EVILtype=\"applicationevil\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"ev_iltype=\"applicationevil\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"ev iltype=\"applicationevil\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"ev4iltype=\"applicationevil\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"etype=\"applicationevil\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\" type=\"applicationevil\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"6type=\"applicationevil\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"_type=\"applicationevil\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"type=\"applicationevil\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate'eviltype=\"applicationevil\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel='alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='evil'evil/>",
        "<link  rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='evil'evil/>",
        "<linkrel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='evil'evil/>",
        "<link rel=\"alternate\"type=\"application\"title=''href=''/>",
        "<link rel=\"alternate\"eviltype=\"applicationevil\"eviltitle='evil'evilhref='evil'evil/>"
      ]
    },
    {
      "regex": "^(find_all_by_|find_by_|select_all_by_|select_by_)",
      "exceptionStackTrace": null,
      "matches": ["select_by_", "select_all_by_", "find_by_", "find_all_by_"]
    },
    {
      "regex": "\\s(src|data)\\s*=\\s*($S)",
      "exceptionStackTrace": null,
      "matches": [
        " src =  S",
        " src =S",
        " src  = S",
        " src= S",
        " data=S",
        " src=S",
        " data = S",
        " src = S"
      ]
    },
    { "regex": "dp", "exceptionStackTrace": null, "matches": ["dp"] },
    {
      "regex": "^describe_",
      "exceptionStackTrace": null,
      "matches": ["describe_"]
    },
    {
      "regex": "\\A\\s*\\|\\+\\s*(.+?)\\s*\\+\\|\\s*\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "github.com\\/trending\\?l=(.+)",
      "exceptionStackTrace": null,
      "matches": [
        "githubacom/trending?l=?",
        "githubacom/trending?l==",
        "githubacom/trending?l=/",
        "githubacom/trending?l=eVil",
        "githubacom/trending?l=EVIL",
        "githubacom/trending?l=ev_il",
        "githubacom/trending?l=ev il",
        "githubacom/trending?l=ev4il",
        "githubacom/trending?l=e",
        "githubacom/trending?l= ",
        "githubacom/trending?l=6",
        "githubacom/trending?l=_",
        "githubacom/trending?l=",
        "githubAcom/trending?l=evil",
        "github?com/trending?l=evil",
        "github=com/trending?l=evil",
        "github0com/trending?l=evil",
        "github/com/trending?l=evil",
        "github com/trending?l=evil",
        "githubacom/trending?l=evil"
      ]
    },
    {
      "regex": "[\\u00c2]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 194"
      },
      "matches": []
    },
    {
      "regex": "[a-z]\\.submit\\s?['](.*?)['].*$",
      "exceptionStackTrace": null,
      "matches": [
        "a.submit 'evil'.",
        "a.submit 'evil''",
        "a.submit 'evil'eVil",
        "a.submit 'evil'EVIL",
        "a.submit 'evil'ev_il",
        "a.submit 'evil'ev il",
        "a.submit 'evil'ev4il",
        "a.submit 'evil'e",
        "a.submit 'evil' ",
        "a.submit 'evil'6",
        "a.submit 'evil'_",
        "a.submit 'evil'",
        "a.submit '.'evil",
        "a.submit '''evil",
        "a.submit 'eVil'evil",
        "a.submit 'EVIL'evil",
        "a.submit 'ev_il'evil",
        "a.submit 'ev il'evil",
        "a.submit 'ev4il'evil",
        "a.submit 'e'evil",
        "a.submit ' 'evil",
        "a.submit '6'evil",
        "a.submit '_'evil",
        "a.submit ''evil",
        "a.submit  'evil'evil",
        "a.submit'evil'evil",
        "a.submit''",
        "a.submit 'evil'evil"
      ]
    },
    {
      "regex": "^content\\-length:\\s*(\\d+)$",
      "exceptionStackTrace": null,
      "matches": [
        "content-length: 00",
        "content-length: ",
        "content-length:  0",
        "content-length:0",
        "content-length: 0"
      ]
    },
    {
      "regex": "^L\\(\\p{Space}*\\p{Alnum}+\\p{Space}*\\)$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\p"
      },
      "matches": []
    },
    {
      "regex": "(create|update|destroy)",
      "exceptionStackTrace": null,
      "matches": ["destroy", "update", "create"]
    },
    {
      "regex": "^(\\.{1}[\\w\\-]+)+(:{1,2}[\\w\\-()]+)?$",
      "exceptionStackTrace": null,
      "matches": [
        ".evil:evil:evil",
        ".evil::",
        ".evil:.",
        ".evil:-",
        ".evil:)",
        ".evil:(",
        ".evil:eVil",
        ".evil:EVIL",
        ".evil:ev_il",
        ".evil:ev il",
        ".evil:ev4il",
        ".evil:e",
        ".evil: ",
        ".evil:6",
        ".evil:_",
        ".evil:",
        ".evil:::evil",
        ".evil::evil",
        ".evilevil",
        ".evil.evil:evil",
        ":evil",
        ".::evil",
        "..:evil",
        ".-:evil",
        ".):evil",
        ".(:evil",
        ".eVil:evil",
        ".EVIL:evil",
        ".ev_il:evil",
        ".ev il:evil",
        ".ev4il:evil",
        ".e:evil",
        ". :evil",
        ".6:evil",
        "._:evil",
        ".:evil",
        "..evil:evil",
        "evil:evil",
        ".evil",
        ".evil:evil"
      ]
    },
    { "regex": "bart", "exceptionStackTrace": null, "matches": ["bart"] },
    {
      "regex": "1 runs, 6 assertions",
      "exceptionStackTrace": null,
      "matches": ["1 runs, 6 assertions"]
    },
    { "regex": "Python 2", "exceptionStackTrace": null, "matches": ["Python 2"] },
    {
      "regex": "\\\"\\\"([^,])",
      "exceptionStackTrace": null,
      "matches": ["\"\"A", "\"\"0", "\"\",", "\"\"\"", "\"\" ", "\"\"a"]
    },
    {
      "regex": "^fx_template_theme",
      "exceptionStackTrace": null,
      "matches": ["fx_template_theme"]
    },
    {
      "regex": "htm(l)?$",
      "exceptionStackTrace": null,
      "matches": ["htmll", "htm", "html"]
    },
    { "regex": "^\u0430", "exceptionStackTrace": null, "matches": ["\u0430"] },
    {
      "regex": "youdaobot",
      "exceptionStackTrace": null,
      "matches": ["youdaobot"]
    },
    {
      "regex": "FOREACH \\w+ \\{\\s+(\\w+) = \\$0\\;\\s+(\\w+) = \\$1\\;\\s+(\\w+) = \\$2\\;\\s+GENERATE \\1, \\2, \\3\\;\\s+\\}",
      "exceptionStackTrace": null,
      "matches": [
        "FOREACH evil { evil = $0; evil = $1; evil = $2; GENERATE evil, evil, evil;  }",
        "FOREACH evil { evil = $0; evil = $1; evil = $2; GENERATE evil, evil, evil;}",
        "FOREACH evil { evil = $0; evil = $1; evil = $2;  GENERATE evil, evil, evil; }",
        "FOREACH evil { evil = $0; evil = $1; evil = $2;GENERATE evil, evil, evil; }",
        "FOREACH evil { evil = $0; evil = $1; eVil = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { evil = $0; evil = $1; EVIL = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { evil = $0; evil = $1; ev_il = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { evil = $0; evil = $1; ev il = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { evil = $0; evil = $1; ev4il = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { evil = $0; evil = $1; e = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { evil = $0; evil = $1;   = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { evil = $0; evil = $1; 6 = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { evil = $0; evil = $1; _ = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { evil = $0; evil = $1;  = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { evil = $0; evil = $1;  evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { evil = $0; evil = $1;evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { evil = $0; eVil = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { evil = $0; EVIL = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { evil = $0; ev_il = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { evil = $0; ev il = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { evil = $0; ev4il = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { evil = $0; e = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { evil = $0;   = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { evil = $0; 6 = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { evil = $0; _ = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { evil = $0;  = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { evil = $0;  evil = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { evil = $0;evil = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { eVil = $0; evil = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { EVIL = $0; evil = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { ev_il = $0; evil = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { ev il = $0; evil = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { ev4il = $0; evil = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { e = $0; evil = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil {   = $0; evil = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { 6 = $0; evil = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { _ = $0; evil = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil {  = $0; evil = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil {  evil = $0; evil = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil {evil = $0; evil = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH eVil { evil = $0; evil = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH EVIL { evil = $0; evil = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH ev_il { evil = $0; evil = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH ev il { evil = $0; evil = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH ev4il { evil = $0; evil = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH e { evil = $0; evil = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH   { evil = $0; evil = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH 6 { evil = $0; evil = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH _ { evil = $0; evil = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH  { evil = $0; evil = $1; evil = $2; GENERATE evil, evil, evil; }",
        "FOREACH evil { evil = $0; evil = $1; evil = $2; GENERATE evil, evil, evil; }"
      ]
    },
    {
      "regex": "\\.spec\\.jsx?$",
      "exceptionStackTrace": null,
      "matches": [".spec.jsxx", ".spec.js", ".spec.jsx"]
    },
    {
      "regex": "<a href=\"(.+?)\" class=searchResultTopLinkA .+? title=\".+? / .+?\">(.+?) / (.+?)</a></td>",
      "exceptionStackTrace": null,
      "matches": [
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\">evil / ></a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\">evil / =</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\">evil / <</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\">evil / /</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\">evil / \"</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\">evil / eVil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\">evil / EVIL</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\">evil / ev_il</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\">evil / ev il</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\">evil / ev4il</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\">evil / e</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\">evil /  </a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\">evil / 6</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\">evil / _</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\">evil / </a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\">> / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\">= / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\">< / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\">/ / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\">\" / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\">eVil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\">EVIL / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\">ev_il / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\">ev il / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\">ev4il / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\">e / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\">  / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\">6 / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\">_ / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\"> / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / >\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / =\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / <\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / /\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / \"\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / eVil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / EVIL\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / ev_il\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / ev il\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / ev4il\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / e\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil /  \">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / 6\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / _\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / \">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"> / evil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"= / evil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"< / evil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"/ / evil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"\" / evil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"eVil / evil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"EVIL / evil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"ev_il / evil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"ev il / evil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"ev4il / evil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"e / evil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"  / evil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"6 / evil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"_ / evil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\" / evil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA > title=\"evil / evil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA = title=\"evil / evil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA < title=\"evil / evil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA / title=\"evil / evil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA \" title=\"evil / evil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA eVil title=\"evil / evil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA EVIL title=\"evil / evil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA ev_il title=\"evil / evil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA ev il title=\"evil / evil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA ev4il title=\"evil / evil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA e title=\"evil / evil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA   title=\"evil / evil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA 6 title=\"evil / evil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA _ title=\"evil / evil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA  title=\"evil / evil\">evil / evil</a></td>",
        "<a href=\">\" class=searchResultTopLinkA evil title=\"evil / evil\">evil / evil</a></td>",
        "<a href=\"=\" class=searchResultTopLinkA evil title=\"evil / evil\">evil / evil</a></td>",
        "<a href=\"<\" class=searchResultTopLinkA evil title=\"evil / evil\">evil / evil</a></td>",
        "<a href=\"/\" class=searchResultTopLinkA evil title=\"evil / evil\">evil / evil</a></td>",
        "<a href=\"\"\" class=searchResultTopLinkA evil title=\"evil / evil\">evil / evil</a></td>",
        "<a href=\"eVil\" class=searchResultTopLinkA evil title=\"evil / evil\">evil / evil</a></td>",
        "<a href=\"EVIL\" class=searchResultTopLinkA evil title=\"evil / evil\">evil / evil</a></td>",
        "<a href=\"ev_il\" class=searchResultTopLinkA evil title=\"evil / evil\">evil / evil</a></td>",
        "<a href=\"ev il\" class=searchResultTopLinkA evil title=\"evil / evil\">evil / evil</a></td>",
        "<a href=\"ev4il\" class=searchResultTopLinkA evil title=\"evil / evil\">evil / evil</a></td>",
        "<a href=\"e\" class=searchResultTopLinkA evil title=\"evil / evil\">evil / evil</a></td>",
        "<a href=\" \" class=searchResultTopLinkA evil title=\"evil / evil\">evil / evil</a></td>",
        "<a href=\"6\" class=searchResultTopLinkA evil title=\"evil / evil\">evil / evil</a></td>",
        "<a href=\"_\" class=searchResultTopLinkA evil title=\"evil / evil\">evil / evil</a></td>",
        "<a href=\"\" class=searchResultTopLinkA evil title=\"evil / evil\">evil / evil</a></td>",
        "<a href=\"evil\" class=searchResultTopLinkA evil title=\"evil / evil\">evil / evil</a></td>"
      ]
    },
    {
      "regex": "^Configured Capacity: *(\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "Configured Capacity: 00",
        "Configured Capacity: ",
        "Configured Capacity:  0",
        "Configured Capacity:0",
        "Configured Capacity: 0"
      ]
    },
    {
      "regex": "^(vcg|gdl|graphviz|txt)\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "^text[\\s]*=.*$",
      "exceptionStackTrace": null,
      "matches": [
        "text ==",
        "text =eVil",
        "text =EVIL",
        "text =ev_il",
        "text =ev il",
        "text =ev4il",
        "text =e",
        "text = ",
        "text =6",
        "text =_",
        "text =",
        "text  =evil",
        "text=evil",
        "text=",
        "text =evil"
      ]
    },
    {
      "regex": "\r*\n+",
      "exceptionStackTrace": null,
      "matches": ["\r\n\n", "\r", "\r\r\n", "\n", "\r\n"]
    },
    {
      "regex": "eval [{']",
      "exceptionStackTrace": null,
      "matches": ["eval {", "eval '"]
    },
    {
      "regex": "next export is nice",
      "exceptionStackTrace": null,
      "matches": ["next export is nice"]
    },
    {
      "regex": "\\?\\((?<valid_json>.+)\\)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<v"
      },
      "matches": []
    },
    {
      "regex": "\u00c3\u00b3ri([oa])$",
      "exceptionStackTrace": null,
      "matches": ["\u00c3\u00b3rio", "\u00c3\u00b3rib", "\u00c3\u00b3ria"]
    },
    {
      "regex": "($re_cjk_class+)|\n                                   ($re_cjk_negclass+)",
      "exceptionStackTrace": null,
      "matches": [
        "\n                                   re_cjk_negclasss",
        "\n                                   re_cjk_negclas",
        "re_cjk_classs",
        "re_cjk_clas",
        "\n                                   re_cjk_negclass",
        "re_cjk_class"
      ]
    },
    {
      "regex": "response code 0",
      "exceptionStackTrace": null,
      "matches": ["response code 0"]
    },
    {
      "regex": "^:\\d+$",
      "exceptionStackTrace": null,
      "matches": [":00", ":", ":0"]
    },
    { "regex": "final", "exceptionStackTrace": null, "matches": ["final"] },
    {
      "regex": "\\s\\/\\s?\\d?$",
      "exceptionStackTrace": null,
      "matches": [" / 00", " / ", " /  0", " /0", " /", " / 0"]
    },
    {
      "regex": "[^a-zA-Z0-9\\[\\]\\|_]",
      "exceptionStackTrace": null,
      "matches": ["|", "a", "_", "]", "[", "A", "0", " "]
    },
    {
      "regex": "^Perfil (?<type>[\\s\\S]+) caduca: (?<date>[0-9]{2}-[0-9]{2}-[0-9]{4})$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<t"
      },
      "matches": []
    },
    {
      "regex": "(^|[^a-zA-Z0-9])(ad|banner|social)(?![a-zA-Z0-9])",
      "exceptionStackTrace": null,
      "matches": ["aad", "_ad", "Aad", "0ad", " ad", "social", "banner", "ad"]
    },
    {
      "regex": "Table 'mysql\\.proc' doesn't exist",
      "exceptionStackTrace": null,
      "matches": ["Table 'mysql.proc' doesn't exist"]
    },
    {
      "regex": "\\s\\[(\\w+)\\]\\s",
      "exceptionStackTrace": null,
      "matches": [
        " [eVil] ",
        " [EVIL] ",
        " [ev_il] ",
        " [ev il] ",
        " [ev4il] ",
        " [e] ",
        " [ ] ",
        " [6] ",
        " [_] ",
        " [] ",
        " [evil] "
      ]
    },
    {
      "regex": "^\\Q$srchval\\E$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\Q"
      },
      "matches": []
    },
    {
      "regex": "(/\\S+|https?:\\S+)(\\s+(/\\S+|https?:\\S+))?(\\s+(/\\S+|https?:\\S+))?(\\s+(\\d+\\%?)\\s(\\d+\\%?))?(\\s+(/\\S+|https?:\\S+))?",
      "exceptionStackTrace": null,
      "matches": [
        "https:: /evil /evil 0% 0% /evil",
        "https:/ /evil /evil 0% 0% /evil",
        "https:% /evil /evil 0% 0% /evil",
        "https:eVil /evil /evil 0% 0% /evil",
        "https:EVIL /evil /evil 0% 0% /evil",
        "https:ev_il /evil /evil 0% 0% /evil",
        "https:ev il /evil /evil 0% 0% /evil",
        "https:ev4il /evil /evil 0% 0% /evil",
        "https:e /evil /evil 0% 0% /evil",
        "https:  /evil /evil 0% 0% /evil",
        "https:6 /evil /evil 0% 0% /evil",
        "https:_ /evil /evil 0% 0% /evil",
        "https: /evil /evil 0% 0% /evil",
        "httpss:evil /evil /evil 0% 0% /evil",
        "http:evil /evil /evil 0% 0% /evil",
        "/evil https:: /evil 0% 0% /evil",
        "/evil https:/ /evil 0% 0% /evil",
        "/evil https:% /evil 0% 0% /evil",
        "/evil https:eVil /evil 0% 0% /evil",
        "/evil https:EVIL /evil 0% 0% /evil",
        "/evil https:ev_il /evil 0% 0% /evil",
        "/evil https:ev il /evil 0% 0% /evil",
        "/evil https:ev4il /evil 0% 0% /evil",
        "/evil https:e /evil 0% 0% /evil",
        "/evil https:  /evil 0% 0% /evil",
        "/evil https:6 /evil 0% 0% /evil",
        "/evil https:_ /evil 0% 0% /evil",
        "/evil https: /evil 0% 0% /evil",
        "/evil httpss:evil /evil 0% 0% /evil",
        "/evil http:evil /evil 0% 0% /evil",
        "/evil /evil https:: 0% 0% /evil",
        "/evil /evil https:/ 0% 0% /evil",
        "/evil /evil https:% 0% 0% /evil",
        "/evil /evil https:eVil 0% 0% /evil",
        "/evil /evil https:EVIL 0% 0% /evil",
        "/evil /evil https:ev_il 0% 0% /evil",
        "/evil /evil https:ev il 0% 0% /evil",
        "/evil /evil https:ev4il 0% 0% /evil",
        "/evil /evil https:e 0% 0% /evil",
        "/evil /evil https:  0% 0% /evil",
        "/evil /evil https:6 0% 0% /evil",
        "/evil /evil https:_ 0% 0% /evil",
        "/evil /evil https: 0% 0% /evil",
        "/evil /evil httpss:evil 0% 0% /evil",
        "/evil /evil http:evil 0% 0% /evil",
        "/evil /evil /evil 0% 0% https::",
        "/evil /evil /evil 0% 0% https:/",
        "/evil /evil /evil 0% 0% https:%",
        "/evil /evil /evil 0% 0% https:eVil",
        "/evil /evil /evil 0% 0% https:EVIL",
        "/evil /evil /evil 0% 0% https:ev_il",
        "/evil /evil /evil 0% 0% https:ev il",
        "/evil /evil /evil 0% 0% https:ev4il",
        "/evil /evil /evil 0% 0% https:e",
        "/evil /evil /evil 0% 0% https: ",
        "/evil /evil /evil 0% 0% https:6",
        "/evil /evil /evil 0% 0% https:_",
        "/evil /evil /evil 0% 0% https:",
        "/evil /evil /evil 0% 0% httpss:evil",
        "/evil /evil /evil 0% 0% http:evil",
        "/evil /evil /evil 0% 0% /evil /evil",
        "/evil /evil /evil 0% 0%",
        "/evil /evil /evil 0% 0% /:",
        "/evil /evil /evil 0% 0% //",
        "/evil /evil /evil 0% 0% /%",
        "/evil /evil /evil 0% 0% /eVil",
        "/evil /evil /evil 0% 0% /EVIL",
        "/evil /evil /evil 0% 0% /ev_il",
        "/evil /evil /evil 0% 0% /ev il",
        "/evil /evil /evil 0% 0% /ev4il",
        "/evil /evil /evil 0% 0% /e",
        "/evil /evil /evil 0% 0% / ",
        "/evil /evil /evil 0% 0% /6",
        "/evil /evil /evil 0% 0% /_",
        "/evil /evil /evil 0% 0% /",
        "/evil /evil /evil 0% 0%  /evil",
        "/evil /evil /evil 0% 0%/evil",
        "/evil /evil /evil 0% 0% 0% 0% /evil",
        "/evil /evil /evil /evil",
        "/evil /evil /evil 0% 0%% /evil",
        "/evil /evil /evil 0% 0 /evil",
        "/evil /evil /evil 0% 00% /evil",
        "/evil /evil /evil 0% % /evil",
        "/evil /evil /evil 0%% 0% /evil",
        "/evil /evil /evil 0 0% /evil",
        "/evil /evil /evil 00% 0% /evil",
        "/evil /evil /evil % 0% /evil",
        "/evil /evil /evil  0% 0% /evil",
        "/evil /evil /evil0% 0% /evil",
        "/evil /evil /: 0% 0% /evil",
        "/evil /evil // 0% 0% /evil",
        "/evil /evil /% 0% 0% /evil",
        "/evil /evil /eVil 0% 0% /evil",
        "/evil /evil /EVIL 0% 0% /evil",
        "/evil /evil /ev_il 0% 0% /evil",
        "/evil /evil /ev il 0% 0% /evil",
        "/evil /evil /ev4il 0% 0% /evil",
        "/evil /evil /e 0% 0% /evil",
        "/evil /evil /  0% 0% /evil",
        "/evil /evil /6 0% 0% /evil",
        "/evil /evil /_ 0% 0% /evil",
        "/evil /evil / 0% 0% /evil",
        "/evil /evil  /evil 0% 0% /evil",
        "/evil /evil/evil 0% 0% /evil",
        "/evil /evil /evil /evil 0% 0% /evil",
        "/evil /evil 0% 0% /evil",
        "/evil /: /evil 0% 0% /evil",
        "/evil // /evil 0% 0% /evil",
        "/evil /% /evil 0% 0% /evil",
        "/evil /eVil /evil 0% 0% /evil",
        "/evil /EVIL /evil 0% 0% /evil",
        "/evil /ev_il /evil 0% 0% /evil",
        "/evil /ev il /evil 0% 0% /evil",
        "/evil /ev4il /evil 0% 0% /evil",
        "/evil /e /evil 0% 0% /evil",
        "/evil /  /evil 0% 0% /evil",
        "/evil /6 /evil 0% 0% /evil",
        "/evil /_ /evil 0% 0% /evil",
        "/evil / /evil 0% 0% /evil",
        "/evil  /evil /evil 0% 0% /evil",
        "/evil/evil /evil 0% 0% /evil",
        "/: /evil /evil 0% 0% /evil",
        "// /evil /evil 0% 0% /evil",
        "/% /evil /evil 0% 0% /evil",
        "/eVil /evil /evil 0% 0% /evil",
        "/EVIL /evil /evil 0% 0% /evil",
        "/ev_il /evil /evil 0% 0% /evil",
        "/ev il /evil /evil 0% 0% /evil",
        "/ev4il /evil /evil 0% 0% /evil",
        "/e /evil /evil 0% 0% /evil",
        "/  /evil /evil 0% 0% /evil",
        "/6 /evil /evil 0% 0% /evil",
        "/_ /evil /evil 0% 0% /evil",
        "/ /evil /evil 0% 0% /evil",
        "http:evil",
        "/evil",
        "https:evil /evil /evil 0% 0% /evil",
        "/evil https:evil /evil 0% 0% /evil",
        "/evil /evil https:evil 0% 0% /evil",
        "/evil /evil /evil 0% 0% https:evil",
        "/evil /evil /evil 0% 0% /evil"
      ]
    },
    {
      "regex": "^EE[0-9]{9}$",
      "exceptionStackTrace": null,
      "matches": ["EE0000000000", "EE00000000", "EE000000000"]
    },
    {
      "regex": "^/([^.]*)[^/]$",
      "exceptionStackTrace": null,
      "matches": [
        "/evilA",
        "/evil0",
        "/evil/",
        "/evil.",
        "/evil ",
        "//a",
        "/.a",
        "/eVila",
        "/EVILa",
        "/ev_ila",
        "/ev ila",
        "/ev4ila",
        "/ea",
        "/ a",
        "/6a",
        "/_a",
        "/a",
        "/evila"
      ]
    },
    {
      "regex": "\\A--(\\w+)(?:=(.*))?\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "([^\\]])(\\[br\\ \\/\\]){3}([^\\[])",
      "exceptionStackTrace": null,
      "matches": [
        "a[br /][br /][br /]]",
        "a[br /][br /][br /][",
        "a[br /][br /][br /]A",
        "a[br /][br /][br /]0",
        "a[br /][br /][br /]/",
        "a[br /][br /][br /] ",
        "a[br /][br /][br /][br /]a",
        "a[br /][br /]a",
        "][br /][br /][br /]a",
        "[[br /][br /][br /]a",
        "A[br /][br /][br /]a",
        "0[br /][br /][br /]a",
        "/[br /][br /][br /]a",
        " [br /][br /][br /]a",
        "a[br /][br /][br /]a"
      ]
    },
    {
      "regex": "# (.+) (\\(#|<\\d)",
      "exceptionStackTrace": null,
      "matches": [
        "# < (#",
        "# ( (#",
        "# # (#",
        "# eVil (#",
        "# EVIL (#",
        "# ev_il (#",
        "# ev il (#",
        "# ev4il (#",
        "# e (#",
        "#   (#",
        "# 6 (#",
        "# _ (#",
        "#  (#",
        "# evil <0",
        "# evil (#"
      ]
    },
    {
      "regex": "unknown option \"should-not-exist\"",
      "exceptionStackTrace": null,
      "matches": ["unknown option \"should-not-exist\""]
    },
    { "regex": "no5", "exceptionStackTrace": null, "matches": ["no5"] },
    {
      "regex": "^\\s*(?<_1>repeat)\\s+(?<_2>until)\\b",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<_"
      },
      "matches": []
    },
    {
      "regex": "styled-components\\/native",
      "exceptionStackTrace": null,
      "matches": ["styled-components/native"]
    },
    {
      "regex": "<link rel=\"stylesheet\" type=\"text\\/css\" href=\"css\\/app.css\" \\/>",
      "exceptionStackTrace": null,
      "matches": [
        "<link rel=\"stylesheet\" type=\"text/css\" href=\"css/appAcss\" />",
        "<link rel=\"stylesheet\" type=\"text/css\" href=\"css/app>css\" />",
        "<link rel=\"stylesheet\" type=\"text/css\" href=\"css/app=css\" />",
        "<link rel=\"stylesheet\" type=\"text/css\" href=\"css/app<css\" />",
        "<link rel=\"stylesheet\" type=\"text/css\" href=\"css/app0css\" />",
        "<link rel=\"stylesheet\" type=\"text/css\" href=\"css/app/css\" />",
        "<link rel=\"stylesheet\" type=\"text/css\" href=\"css/app\"css\" />",
        "<link rel=\"stylesheet\" type=\"text/css\" href=\"css/app css\" />",
        "<link rel=\"stylesheet\" type=\"text/css\" href=\"css/appacss\" />"
      ]
    },
    {
      "regex": "\\\\u\\h{4}",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\h"
      },
      "matches": []
    },
    {
      "regex": "unix_utils",
      "exceptionStackTrace": null,
      "matches": ["unix_utils"]
    },
    {
      "regex": "^[a-z]+\\:[^\\s]+$",
      "exceptionStackTrace": null,
      "matches": [
        "evil::",
        "evil:eVil",
        "evil:EVIL",
        "evil:ev_il",
        "evil:ev il",
        "evil:ev4il",
        "evil:e",
        "evil: ",
        "evil:6",
        "evil:_",
        "evil:",
        "eVil:evil",
        "EVIL:evil",
        "ev_il:evil",
        "ev il:evil",
        "ev4il:evil",
        "e:evil",
        " :evil",
        "6:evil",
        "_:evil",
        ":evil",
        "evil:evil"
      ]
    },
    {
      "regex": "^Error: This key implementation only supports keys generated by jsrsasign.KEYUTIL. It must have a \"pubKeyHex\" property",
      "exceptionStackTrace": null,
      "matches": [
        "Error: This key implementation only supports keys generated by jsrsasignaKEYUTILA It must have a \"pubKeyHex\" property",
        "Error: This key implementation only supports keys generated by jsrsasignaKEYUTIL: It must have a \"pubKeyHex\" property",
        "Error: This key implementation only supports keys generated by jsrsasignaKEYUTIL0 It must have a \"pubKeyHex\" property",
        "Error: This key implementation only supports keys generated by jsrsasignaKEYUTIL\" It must have a \"pubKeyHex\" property",
        "Error: This key implementation only supports keys generated by jsrsasignaKEYUTIL  It must have a \"pubKeyHex\" property",
        "Error: This key implementation only supports keys generated by jsrsasignAKEYUTILa It must have a \"pubKeyHex\" property",
        "Error: This key implementation only supports keys generated by jsrsasign:KEYUTILa It must have a \"pubKeyHex\" property",
        "Error: This key implementation only supports keys generated by jsrsasign0KEYUTILa It must have a \"pubKeyHex\" property",
        "Error: This key implementation only supports keys generated by jsrsasign\"KEYUTILa It must have a \"pubKeyHex\" property",
        "Error: This key implementation only supports keys generated by jsrsasign KEYUTILa It must have a \"pubKeyHex\" property",
        "Error: This key implementation only supports keys generated by jsrsasignaKEYUTILa It must have a \"pubKeyHex\" property"
      ]
    },
    {
      "regex": "^dateonly",
      "exceptionStackTrace": null,
      "matches": ["dateonly"]
    },
    { "regex": "^(?:ITEM\\b)", "exceptionStackTrace": null, "matches": ["ITEM"] },
    {
      "regex": "function[^\\(]*\\(([^\\)]*)[\\w\\W]*",
      "exceptionStackTrace": null,
      "matches": [
        "functionevil(evileVil",
        "functionevil(evilEVIL",
        "functionevil(evilev_il",
        "functionevil(evilev il",
        "functionevil(evilev4il",
        "functionevil(evile",
        "functionevil(evil ",
        "functionevil(evil6",
        "functionevil(evil_",
        "functionevil()evil",
        "functionevil((evil",
        "functionevil(eVilevil",
        "functionevil(EVILevil",
        "functionevil(ev_ilevil",
        "functionevil(ev ilevil",
        "functionevil(ev4ilevil",
        "functionevil(eevil",
        "functionevil( evil",
        "functionevil(6evil",
        "functionevil(_evil",
        "functionevil(evil",
        "function)(evilevil",
        "function((evilevil",
        "functioneVil(evilevil",
        "functionEVIL(evilevil",
        "functionev_il(evilevil",
        "functionev il(evilevil",
        "functionev4il(evilevil",
        "functione(evilevil",
        "function (evilevil",
        "function6(evilevil",
        "function_(evilevil",
        "function(evilevil",
        "function(",
        "functionevil(evilevil"
      ]
    },
    {
      "regex": "\\A\\d[0-3]?\\Z",
      "exceptionStackTrace": null,
      "matches": ["000", "04", "0", "00"]
    },
    {
      "regex": "^http(s?)://.+\\\\.console\\\\.aws\\\\.amazon\\\\.com/codecommit/home#/repository/([^/]+)/.+$",
      "exceptionStackTrace": null,
      "matches": [
        "https://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/\\",
        "https://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/:",
        "https://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil//",
        "https://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/#",
        "https://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/eVil",
        "https://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/EVIL",
        "https://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/ev_il",
        "https://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/ev il",
        "https://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/ev4il",
        "https://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/e",
        "https://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/ ",
        "https://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/6",
        "https://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/_",
        "https://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/",
        "https://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/\\/evil",
        "https://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/:/evil",
        "https://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository///evil",
        "https://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/#/evil",
        "https://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/eVil/evil",
        "https://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/EVIL/evil",
        "https://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/ev_il/evil",
        "https://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/ev il/evil",
        "https://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/ev4il/evil",
        "https://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/e/evil",
        "https://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/ /evil",
        "https://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/6/evil",
        "https://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/_/evil",
        "https://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository//evil",
        "https://evil\\aconsole\\aaws\\aamazon\\\\com/codecommit/home#/repository/evil/evil",
        "https://evil\\aconsole\\aaws\\aamazon\\Acom/codecommit/home#/repository/evil/evil",
        "https://evil\\aconsole\\aaws\\aamazon\\:com/codecommit/home#/repository/evil/evil",
        "https://evil\\aconsole\\aaws\\aamazon\\0com/codecommit/home#/repository/evil/evil",
        "https://evil\\aconsole\\aaws\\aamazon\\/com/codecommit/home#/repository/evil/evil",
        "https://evil\\aconsole\\aaws\\aamazon\\#com/codecommit/home#/repository/evil/evil",
        "https://evil\\aconsole\\aaws\\aamazon\\ com/codecommit/home#/repository/evil/evil",
        "https://evil\\aconsole\\aaws\\\\amazon\\acom/codecommit/home#/repository/evil/evil",
        "https://evil\\aconsole\\aaws\\Aamazon\\acom/codecommit/home#/repository/evil/evil",
        "https://evil\\aconsole\\aaws\\:amazon\\acom/codecommit/home#/repository/evil/evil",
        "https://evil\\aconsole\\aaws\\0amazon\\acom/codecommit/home#/repository/evil/evil",
        "https://evil\\aconsole\\aaws\\/amazon\\acom/codecommit/home#/repository/evil/evil",
        "https://evil\\aconsole\\aaws\\#amazon\\acom/codecommit/home#/repository/evil/evil",
        "https://evil\\aconsole\\aaws\\ amazon\\acom/codecommit/home#/repository/evil/evil",
        "https://evil\\aconsole\\\\aws\\aamazon\\acom/codecommit/home#/repository/evil/evil",
        "https://evil\\aconsole\\Aaws\\aamazon\\acom/codecommit/home#/repository/evil/evil",
        "https://evil\\aconsole\\:aws\\aamazon\\acom/codecommit/home#/repository/evil/evil",
        "https://evil\\aconsole\\0aws\\aamazon\\acom/codecommit/home#/repository/evil/evil",
        "https://evil\\aconsole\\/aws\\aamazon\\acom/codecommit/home#/repository/evil/evil",
        "https://evil\\aconsole\\#aws\\aamazon\\acom/codecommit/home#/repository/evil/evil",
        "https://evil\\aconsole\\ aws\\aamazon\\acom/codecommit/home#/repository/evil/evil",
        "https://evil\\\\console\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/evil",
        "https://evil\\Aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/evil",
        "https://evil\\:console\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/evil",
        "https://evil\\0console\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/evil",
        "https://evil\\/console\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/evil",
        "https://evil\\#console\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/evil",
        "https://evil\\ console\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/evil",
        "https://\\\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/evil",
        "https://:\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/evil",
        "https:///\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/evil",
        "https://#\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/evil",
        "https://eVil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/evil",
        "https://EVIL\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/evil",
        "https://ev_il\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/evil",
        "https://ev il\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/evil",
        "https://ev4il\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/evil",
        "https://e\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/evil",
        "https:// \\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/evil",
        "https://6\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/evil",
        "https://_\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/evil",
        "https://\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/evil",
        "httpss://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/evil",
        "http://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/evil",
        "https://evil\\aconsole\\aaws\\aamazon\\acom/codecommit/home#/repository/evil/evil"
      ]
    },
    {
      "regex": "^fa[srlb]-",
      "exceptionStackTrace": null,
      "matches": ["fas-", "far-", "fal-", "faa-", "fab-"]
    },
    {
      "regex": "^[A-Za-z0-9_.:;@\\ \\[\\]]+\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "(?:repeats\\s+)?(?:(?:each|every|all)\\s+)3r?d?\\s+month(?:s|ly)?\\s+(?:on\\s+)?(?:the\\s+)?((?:",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "missing ), unterminated subpattern"
      },
      "matches": []
    },
    {
      "regex": "in\\s*\\(\\s*:(\\w+)((\\.\\w+)*)(\\@\\w+)?\\s*\\)",
      "exceptionStackTrace": null,
      "matches": [
        "in ( :evil.evil@evil  )",
        "in ( :evil.evil@evil)",
        "in ( :evil.evil@evil@evil )",
        "in ( :evil.evil )",
        "in ( :evil.evil@eVil )",
        "in ( :evil.evil@EVIL )",
        "in ( :evil.evil@ev_il )",
        "in ( :evil.evil@ev il )",
        "in ( :evil.evil@ev4il )",
        "in ( :evil.evil@e )",
        "in ( :evil.evil@  )",
        "in ( :evil.evil@6 )",
        "in ( :evil.evil@_ )",
        "in ( :evil.evil@ )",
        "in ( :evil.evil.evil@evil )",
        "in ( :evil@evil )",
        "in ( :evil.eVil@evil )",
        "in ( :evil.EVIL@evil )",
        "in ( :evil.ev_il@evil )",
        "in ( :evil.ev il@evil )",
        "in ( :evil.ev4il@evil )",
        "in ( :evil.e@evil )",
        "in ( :evil. @evil )",
        "in ( :evil.6@evil )",
        "in ( :evil._@evil )",
        "in ( :evil.@evil )",
        "in ( :eVil.evil@evil )",
        "in ( :EVIL.evil@evil )",
        "in ( :ev_il.evil@evil )",
        "in ( :ev il.evil@evil )",
        "in ( :ev4il.evil@evil )",
        "in ( :e.evil@evil )",
        "in ( : .evil@evil )",
        "in ( :6.evil@evil )",
        "in ( :_.evil@evil )",
        "in ( :.evil@evil )",
        "in (  :evil.evil@evil )",
        "in (:evil.evil@evil )",
        "in  ( :evil.evil@evil )",
        "in( :evil.evil@evil )",
        "in(:evil)",
        "in ( :evil.evil@evil )"
      ]
    },
    {
      "regex": "Hint: non-WAV files are no longer supported, convert to WAV first using something like ffmpeg",
      "exceptionStackTrace": null,
      "matches": [
        "Hint: non-WAV files are no longer supported, convert to WAV first using something like ffmpeg"
      ]
    },
    {
      "regex": "Translated title:",
      "exceptionStackTrace": null,
      "matches": ["Translated title:"]
    },
    {
      "regex": "slow_requests_osd{cluster=\"ceph\",osd=\"131\"} 413",
      "exceptionStackTrace": null,
      "matches": ["slow_requests_osd{cluster=\"ceph\",osd=\"131\"} 413"]
    },
    {
      "regex": "missing \"test\" decorator plugin",
      "exceptionStackTrace": null,
      "matches": ["missing \"test\" decorator plugin"]
    },
    {
      "regex": "^( |\\t)*private [^ ]+ [^ ]+;",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "Your Request Id is (\\d+).",
      "exceptionStackTrace": null,
      "matches": [
        "Your Request Id is 0_",
        "Your Request Id is 0A",
        "Your Request Id is 00",
        "Your Request Id is 0 ",
        "Your Request Id is 00a",
        "Your Request Id is a",
        "Your Request Id is 0a"
      ]
    },
    {
      "regex": "Mozilla\\/5.0 \\((?:iPhone|iPad|iPod(?: Touch)?);(.*)AppleWebKit\\/((\\d+)?[\\w\\.]+).+?(mobile)\\/\\w?",
      "exceptionStackTrace": null,
      "matches": [
        "Mozilla/5a0 (iPod Touch Touch;evilAppleWebKit/0evilevilmobile/a",
        "Mozilla/5a0 (iPod;evilAppleWebKit/0evilevilmobile/a",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0evilevilmobile/aa",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0evilevilmobile/",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0evilevilmobile/_",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0evilevilmobile/A",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0evilevilmobile/0",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0evil;mobile/a",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0evil/mobile/a",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0evil.mobile/a",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0evil(mobile/a",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0evileVilmobile/a",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0evilEVILmobile/a",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0evilev_ilmobile/a",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0evilev ilmobile/a",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0evilev4ilmobile/a",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0evilemobile/a",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0evil mobile/a",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0evil6mobile/a",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0evil_mobile/a",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0;evilmobile/a",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0/evilmobile/a",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0.evilmobile/a",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0(evilmobile/a",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0eVilevilmobile/a",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0EVILevilmobile/a",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0ev_ilevilmobile/a",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0ev ilevilmobile/a",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0ev4ilevilmobile/a",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0eevilmobile/a",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0 evilmobile/a",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/06evilmobile/a",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0_evilmobile/a",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0evilmobile/a",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/00evilevilmobile/a",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/evilevilmobile/a",
        "Mozilla/5a0 (iPhone;;AppleWebKit/0evilevilmobile/a",
        "Mozilla/5a0 (iPhone;/AppleWebKit/0evilevilmobile/a",
        "Mozilla/5a0 (iPhone;.AppleWebKit/0evilevilmobile/a",
        "Mozilla/5a0 (iPhone;(AppleWebKit/0evilevilmobile/a",
        "Mozilla/5a0 (iPhone;eVilAppleWebKit/0evilevilmobile/a",
        "Mozilla/5a0 (iPhone;EVILAppleWebKit/0evilevilmobile/a",
        "Mozilla/5a0 (iPhone;ev_ilAppleWebKit/0evilevilmobile/a",
        "Mozilla/5a0 (iPhone;ev ilAppleWebKit/0evilevilmobile/a",
        "Mozilla/5a0 (iPhone;ev4ilAppleWebKit/0evilevilmobile/a",
        "Mozilla/5a0 (iPhone;eAppleWebKit/0evilevilmobile/a",
        "Mozilla/5a0 (iPhone; AppleWebKit/0evilevilmobile/a",
        "Mozilla/5a0 (iPhone;6AppleWebKit/0evilevilmobile/a",
        "Mozilla/5a0 (iPhone;_AppleWebKit/0evilevilmobile/a",
        "Mozilla/5a0 (iPhone;AppleWebKit/0evilevilmobile/a",
        "Mozilla/5A0 (iPhone;evilAppleWebKit/0evilevilmobile/a",
        "Mozilla/5;0 (iPhone;evilAppleWebKit/0evilevilmobile/a",
        "Mozilla/500 (iPhone;evilAppleWebKit/0evilevilmobile/a",
        "Mozilla/5/0 (iPhone;evilAppleWebKit/0evilevilmobile/a",
        "Mozilla/5.0 (iPhone;evilAppleWebKit/0evilevilmobile/a",
        "Mozilla/5(0 (iPhone;evilAppleWebKit/0evilevilmobile/a",
        "Mozilla/5 0 (iPhone;evilAppleWebKit/0evilevilmobile/a",
        "Mozilla/5a0 (iPod;AppleWebKit/evilevilmobile/",
        "Mozilla/5a0 (iPad;AppleWebKit/evilevilmobile/",
        "Mozilla/5a0 (iPhone;AppleWebKit/evilevilmobile/",
        "Mozilla/5a0 (iPod Touch;evilAppleWebKit/0evilevilmobile/a",
        "Mozilla/5a0 (iPad;evilAppleWebKit/0evilevilmobile/a",
        "Mozilla/5a0 (iPhone;evilAppleWebKit/0evilevilmobile/a"
      ]
    },
    {
      "regex": "<script src=\"[/\\\\]{1}html-css-js\\.[a-f0-9]+\\.js\">",
      "exceptionStackTrace": null,
      "matches": [
        "<script src=\"\\html-css-js.00.js\">",
        "<script src=\"\\html-css-js..js\">",
        "<script src=\"\\html-css-js.g.js\">",
        "<script src=\"\\html-css-js.a.js\">",
        "<script src=\"\\\\html-css-js.0.js\">",
        "<script src=\"html-css-js.0.js\">",
        "<script src=\"/html-css-js.0.js\">",
        "<script src=\"\\html-css-js.0.js\">"
      ]
    },
    {
      "regex": "U\u017eivatel byl odhl\u00e1\u0161en",
      "exceptionStackTrace": null,
      "matches": ["U\u017eivatel byl odhl\u00e1\u0161en"]
    },
    {
      "regex": "Unexpected logic \"\\!\" on line 1\\.",
      "exceptionStackTrace": null,
      "matches": ["Unexpected logic \"!\" on line 1."]
    },
    {
      "regex": "^((Invalid input)|(Type \\?)).*$",
      "exceptionStackTrace": null,
      "matches": [
        "Invalid input?",
        "Invalid inputeVil",
        "Invalid inputEVIL",
        "Invalid inputev_il",
        "Invalid inputev il",
        "Invalid inputev4il",
        "Invalid inpute",
        "Invalid input ",
        "Invalid input6",
        "Invalid input_",
        "Type ?",
        "Invalid input",
        "Type ?evil",
        "Invalid inputevil"
      ]
    },
    {
      "regex": "^(?:DELETE\\b)",
      "exceptionStackTrace": null,
      "matches": ["DELETE"]
    },
    {
      "regex": "(\\$|%)\\{?(\\w\\.?(\\+|\\-|:)?)+\\}?",
      "exceptionStackTrace": null,
      "matches": [
        "${a.+}}",
        "${a.+",
        "${a.+a.+}",
        "${}",
        "${a.++}",
        "${a.}",
        "${a..+}",
        "${a+}",
        "${_.+}",
        "${A.+}",
        "${0.+}",
        "${{a.+}",
        "$a.+}",
        "%a",
        "$a",
        "%{a.+}",
        "${a.:}",
        "${a.-}",
        "${a.+}"
      ]
    },
    {
      "regex": "The default value is\\s+\"(.*)\"",
      "exceptionStackTrace": null,
      "matches": [
        "The default value is \"\"\"",
        "The default value is \"eVil\"",
        "The default value is \"EVIL\"",
        "The default value is \"ev_il\"",
        "The default value is \"ev il\"",
        "The default value is \"ev4il\"",
        "The default value is \"e\"",
        "The default value is \" \"",
        "The default value is \"6\"",
        "The default value is \"_\"",
        "The default value is  \"evil\"",
        "The default value is\"evil\"",
        "The default value is \"\"",
        "The default value is \"evil\""
      ]
    },
    {
      "regex": "\\[Redacted\\]",
      "exceptionStackTrace": null,
      "matches": ["[Redacted]"]
    },
    {
      "regex": "(typeof)\\s([^\\$].*?)(\\)|;)",
      "exceptionStackTrace": null,
      "matches": [
        "typeof a;)",
        "typeof a))",
        "typeof a$)",
        "typeof aeVil)",
        "typeof aEVIL)",
        "typeof aev_il)",
        "typeof aev il)",
        "typeof aev4il)",
        "typeof ae)",
        "typeof a )",
        "typeof a6)",
        "typeof a_)",
        "typeof Aevil)",
        "typeof ;evil)",
        "typeof 0evil)",
        "typeof )evil)",
        "typeof $evil)",
        "typeof  evil)",
        "typeof a;",
        "typeof a)",
        "typeof aevil;",
        "typeof aevil)"
      ]
    },
    {
      "regex": "\\nvar ([A-z]*) = require\\(['\"]..\\/([A-z_\\/]*)['\"]\\)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "href=\"#\" onclick=\"",
      "exceptionStackTrace": null,
      "matches": ["href=\"#\" onclick=\""]
    },
    {
      "regex": "^var __decorate",
      "exceptionStackTrace": null,
      "matches": ["var __decorate"]
    },
    { "regex": "\\bAAA\\b", "exceptionStackTrace": null, "matches": ["AAA"] },
    {
      "regex": "((\\d+)[/\\. ])?\\s*((\\d+)[/\\.])?\\s*(\\d+)\\.?$",
      "exceptionStackTrace": null,
      "matches": [
        "0  0. 0..",
        "0  0. 0",
        "0  0. 00.",
        "0  0. .",
        "0  0.  0.",
        "0  0.0.",
        "0  0.0. 0.",
        "0   0.",
        "0  0/ 0.",
        "0  00. 0.",
        "0  . 0.",
        "0   0. 0.",
        "0 0. 0.",
        "0 0  0. 0.",
        " 0. 0.",
        "0/ 0. 0.",
        "0. 0. 0.",
        "00  0. 0.",
        "  0. 0.",
        "0",
        "0  0. 0."
      ]
    },
    {
      "regex": "-monthly$",
      "exceptionStackTrace": null,
      "matches": ["-monthly"]
    },
    {
      "regex": "must be boolean",
      "exceptionStackTrace": null,
      "matches": ["must be boolean"]
    },
    {
      "regex": "Circular dep for",
      "exceptionStackTrace": null,
      "matches": ["Circular dep for"]
    },
    { "regex": "^refs_", "exceptionStackTrace": null, "matches": ["refs_"] },
    {
      "regex": "datetime$",
      "exceptionStackTrace": null,
      "matches": ["datetime"]
    },
    {
      "regex": "(\\bAS\\b\\s*)`([^`]++)`(\\s*)$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "multiple repeat"
      },
      "matches": []
    },
    {
      "regex": "[^\\p{L}\\[\\]]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\p"
      },
      "matches": []
    },
    {
      "regex": "^I have configured Wallet$",
      "exceptionStackTrace": null,
      "matches": ["I have configured Wallet"]
    },
    { "regex": "^\u0001$", "exceptionStackTrace": null, "matches": ["\u0001"] },
    {
      "regex": "^[\\?\\&]+",
      "exceptionStackTrace": null,
      "matches": ["&&", "", "?", "&"]
    },
    {
      "regex": "^(XOR|Exclusive)$",
      "exceptionStackTrace": null,
      "matches": ["Exclusive", "XOR"]
    },
    { "regex": "<|\\u003C", "exceptionStackTrace": null, "matches": ["<"] },
    {
      "regex": "^\\s*(?:\\/\\*.*?\\*\\/\\s*)?ANALYZE\\s+TABLE\\s+\\S+\\s+(COMPUTE|ESTIMATE|DELETE)\\s+\\S*$",
      "exceptionStackTrace": null,
      "matches": [
        " /*evil*/ ANALYZE TABLE evil COMPUTE /",
        " /*evil*/ ANALYZE TABLE evil COMPUTE *",
        " /*evil*/ ANALYZE TABLE evil COMPUTE eVil",
        " /*evil*/ ANALYZE TABLE evil COMPUTE EVIL",
        " /*evil*/ ANALYZE TABLE evil COMPUTE ev_il",
        " /*evil*/ ANALYZE TABLE evil COMPUTE ev il",
        " /*evil*/ ANALYZE TABLE evil COMPUTE ev4il",
        " /*evil*/ ANALYZE TABLE evil COMPUTE e",
        " /*evil*/ ANALYZE TABLE evil COMPUTE  ",
        " /*evil*/ ANALYZE TABLE evil COMPUTE 6",
        " /*evil*/ ANALYZE TABLE evil COMPUTE _",
        " /*evil*/ ANALYZE TABLE evil COMPUTE ",
        " /*evil*/ ANALYZE TABLE evil COMPUTE  evil",
        " /*evil*/ ANALYZE TABLE evil COMPUTEevil",
        " /*evil*/ ANALYZE TABLE evil  COMPUTE evil",
        " /*evil*/ ANALYZE TABLE evilCOMPUTE evil",
        " /*evil*/ ANALYZE TABLE / COMPUTE evil",
        " /*evil*/ ANALYZE TABLE * COMPUTE evil",
        " /*evil*/ ANALYZE TABLE eVil COMPUTE evil",
        " /*evil*/ ANALYZE TABLE EVIL COMPUTE evil",
        " /*evil*/ ANALYZE TABLE ev_il COMPUTE evil",
        " /*evil*/ ANALYZE TABLE ev il COMPUTE evil",
        " /*evil*/ ANALYZE TABLE ev4il COMPUTE evil",
        " /*evil*/ ANALYZE TABLE e COMPUTE evil",
        " /*evil*/ ANALYZE TABLE   COMPUTE evil",
        " /*evil*/ ANALYZE TABLE 6 COMPUTE evil",
        " /*evil*/ ANALYZE TABLE _ COMPUTE evil",
        " /*evil*/ ANALYZE TABLE  COMPUTE evil",
        " /*evil*/ ANALYZE TABLE  evil COMPUTE evil",
        " /*evil*/ ANALYZE TABLEevil COMPUTE evil",
        " /*evil*/ ANALYZE  TABLE evil COMPUTE evil",
        " /*evil*/ ANALYZETABLE evil COMPUTE evil",
        " /*evil*/ /*evil*/ ANALYZE TABLE evil COMPUTE evil",
        " ANALYZE TABLE evil COMPUTE evil",
        " /*evil*/  ANALYZE TABLE evil COMPUTE evil",
        " /*evil*/ANALYZE TABLE evil COMPUTE evil",
        " /*/*/ ANALYZE TABLE evil COMPUTE evil",
        " /***/ ANALYZE TABLE evil COMPUTE evil",
        " /*eVil*/ ANALYZE TABLE evil COMPUTE evil",
        " /*EVIL*/ ANALYZE TABLE evil COMPUTE evil",
        " /*ev_il*/ ANALYZE TABLE evil COMPUTE evil",
        " /*ev il*/ ANALYZE TABLE evil COMPUTE evil",
        " /*ev4il*/ ANALYZE TABLE evil COMPUTE evil",
        " /*e*/ ANALYZE TABLE evil COMPUTE evil",
        " /* */ ANALYZE TABLE evil COMPUTE evil",
        " /*6*/ ANALYZE TABLE evil COMPUTE evil",
        " /*_*/ ANALYZE TABLE evil COMPUTE evil",
        " /**/ ANALYZE TABLE evil COMPUTE evil",
        "  /*evil*/ ANALYZE TABLE evil COMPUTE evil",
        "/*evil*/ ANALYZE TABLE evil COMPUTE evil",
        "ANALYZE TABLE evil DELETE ",
        "ANALYZE TABLE evil ESTIMATE ",
        "ANALYZE TABLE evil COMPUTE ",
        " /*evil*/ ANALYZE TABLE evil DELETE evil",
        " /*evil*/ ANALYZE TABLE evil ESTIMATE evil",
        " /*evil*/ ANALYZE TABLE evil COMPUTE evil"
      ]
    },
    {
      "regex": "\u00f5htu",
      "exceptionStackTrace": null,
      "matches": ["\u00f5htu"]
    },
    { "regex": "\\((?!\\?:)", "exceptionStackTrace": null, "matches": ["("] },
    {
      "regex": "[.](html?|yml)",
      "exceptionStackTrace": null,
      "matches": [".htmll", ".htm", ".yml", ".html"]
    },
    {
      "regex": "^(.*)\\.(.*)\\.",
      "exceptionStackTrace": null,
      "matches": [
        "evil...",
        "evil.eVil.",
        "evil.EVIL.",
        "evil.ev_il.",
        "evil.ev il.",
        "evil.ev4il.",
        "evil.e.",
        "evil. .",
        "evil.6.",
        "evil._.",
        "evil..",
        "..evil.",
        "eVil.evil.",
        "EVIL.evil.",
        "ev_il.evil.",
        "ev il.evil.",
        "ev4il.evil.",
        "e.evil.",
        " .evil.",
        "6.evil.",
        "_.evil.",
        ".evil.",
        "..",
        "evil.evil."
      ]
    },
    {
      "regex": "\\s*|t*|r*|n*",
      "exceptionStackTrace": null,
      "matches": ["nn", "rr", "tt", "  ", "", "n", "r", "t", " "]
    },
    {
      "regex": "; *(?:Axioo[ _\\-]([^;/]+)|(picopad)[ _\\-]([^;/]+)) Build",
      "exceptionStackTrace": null,
      "matches": [
        "; picopad-; Build",
        "; picopad-/ Build",
        "; picopad-- Build",
        "; picopad-eVil Build",
        "; picopad-EVIL Build",
        "; picopad-ev_il Build",
        "; picopad-ev il Build",
        "; picopad-ev4il Build",
        "; picopad-e Build",
        "; picopad-  Build",
        "; picopad-6 Build",
        "; picopad-_ Build",
        "; picopad- Build",
        "; picopad_evil Build",
        "; picopad evil Build",
        "; Axioo-; Build",
        "; Axioo-/ Build",
        "; Axioo-- Build",
        "; Axioo-eVil Build",
        "; Axioo-EVIL Build",
        "; Axioo-ev_il Build",
        "; Axioo-ev il Build",
        "; Axioo-ev4il Build",
        "; Axioo-e Build",
        "; Axioo-  Build",
        "; Axioo-6 Build",
        "; Axioo-_ Build",
        "; Axioo- Build",
        "; Axioo_evil Build",
        "; Axioo evil Build",
        ";  Axioo-evil Build",
        ";picopad-evil Build",
        ";Axioo-evil Build",
        "; picopad-evil Build",
        "; Axioo-evil Build"
      ]
    },
    { "regex": "(?i:limit)", "exceptionStackTrace": null, "matches": [""] },
    {
      "regex": "(\\,|.|\\)|\\n|=>|[ ])",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": ".[.\\d]+",
      "exceptionStackTrace": null,
      "matches": ["a..", "a", "a0", "A.", "0.", "..", " .", "a."]
    },
    { "regex": "\\A AND ", "exceptionStackTrace": null, "matches": [" AND "] },
    {
      "regex": "\"CurrencyCode\":\"INR\"",
      "exceptionStackTrace": null,
      "matches": ["\"CurrencyCode\":\"INR\""]
    },
    { "regex": "no way", "exceptionStackTrace": null, "matches": ["no way"] },
    {
      "regex": "favicon.ico$",
      "exceptionStackTrace": null,
      "matches": [
        "favicon_ico",
        "faviconAico",
        "favicon0ico",
        "favicon ico",
        "faviconaico"
      ]
    },
    {
      "regex": "[^a-zA-Z0-1-_]",
      "exceptionStackTrace": null,
      "matches": ["a", "_", "A", "0", "-", " ", "2"]
    },
    {
      "regex": "[\"#%<>\\[\\\\\\]^{|}]",
      "exceptionStackTrace": null,
      "matches": ["|", "{", "^", "]", "\\", "[", ">", "<", "%", "#", "\"", "}"]
    },
    {
      "regex": "(^|,)[A-Za-z$_][\\w$_]*(,|$)",
      "exceptionStackTrace": null,
      "matches": [
        "_,,",
        "_$,",
        "_eVil,",
        "_EVIL,",
        "_ev_il,",
        "_ev il,",
        "_ev4il,",
        "_e,",
        "_ ,",
        "_6,",
        "__,",
        "aevil,",
        "Aevil,",
        "$evil,",
        ",_,",
        "_",
        "_,",
        ",_evil,",
        "_evil",
        "_evil,"
      ]
    },
    {
      "regex": ",\\s*email\\s*:\\s*([^,]*),?",
      "exceptionStackTrace": null,
      "matches": [
        ", email : evil,,",
        ", email : evil",
        ", email : :,",
        ", email : ,,",
        ", email : eVil,",
        ", email : EVIL,",
        ", email : ev_il,",
        ", email : ev il,",
        ", email : ev4il,",
        ", email : e,",
        ", email :  ,",
        ", email : 6,",
        ", email : _,",
        ", email : ,",
        ", email :  evil,",
        ", email :evil,",
        ", email  : evil,",
        ", email: evil,",
        ",  email : evil,",
        ",email : evil,",
        ",email:",
        ", email : evil,"
      ]
    },
    {
      "regex": "^testRepoDir:.*",
      "exceptionStackTrace": null,
      "matches": [
        "testRepoDir::",
        "testRepoDir:eVil",
        "testRepoDir:EVIL",
        "testRepoDir:ev_il",
        "testRepoDir:ev il",
        "testRepoDir:ev4il",
        "testRepoDir:e",
        "testRepoDir: ",
        "testRepoDir:6",
        "testRepoDir:_",
        "testRepoDir:",
        "testRepoDir:evil"
      ]
    },
    { "regex": "line$", "exceptionStackTrace": null, "matches": ["line"] },
    {
      "regex": "\\w+\\.php",
      "exceptionStackTrace": null,
      "matches": [
        "eVil.php",
        "EVIL.php",
        "ev_il.php",
        "ev il.php",
        "ev4il.php",
        "e.php",
        " .php",
        "6.php",
        "_.php",
        ".php",
        "evil.php"
      ]
    },
    {
      "regex": "^I should see the following output:$",
      "exceptionStackTrace": null,
      "matches": ["I should see the following output:"]
    },
    {
      "regex": "^\\[\\w*\\s*\\w*\\]",
      "exceptionStackTrace": null,
      "matches": [
        "[evil eVil]",
        "[evil EVIL]",
        "[evil ev_il]",
        "[evil ev il]",
        "[evil ev4il]",
        "[evil e]",
        "[evil  ]",
        "[evil 6]",
        "[evil _]",
        "[evil ]",
        "[evil  evil]",
        "[evilevil]",
        "[eVil evil]",
        "[EVIL evil]",
        "[ev_il evil]",
        "[ev il evil]",
        "[ev4il evil]",
        "[e evil]",
        "[  evil]",
        "[6 evil]",
        "[_ evil]",
        "[ evil]",
        "[]",
        "[evil evil]"
      ]
    },
    {
      "regex": "Cannot connect to insecure federation server",
      "exceptionStackTrace": null,
      "matches": ["Cannot connect to insecure federation server"]
    },
    {
      "regex": "$n\\/(.*?\\.(\\w+))$",
      "exceptionStackTrace": null,
      "matches": [
        "n/evil.eVil",
        "n/evil.EVIL",
        "n/evil.ev_il",
        "n/evil.ev il",
        "n/evil.ev4il",
        "n/evil.e",
        "n/evil. ",
        "n/evil.6",
        "n/evil._",
        "n/evil.",
        "n//.evil",
        "n/..evil",
        "n/eVil.evil",
        "n/EVIL.evil",
        "n/ev_il.evil",
        "n/ev il.evil",
        "n/ev4il.evil",
        "n/e.evil",
        "n/ .evil",
        "n/6.evil",
        "n/_.evil",
        "n/.evil",
        "n/evil.evil"
      ]
    },
    {
      "regex": "@\\d+ = (.*)",
      "exceptionStackTrace": null,
      "matches": [
        "@0 = @",
        "@0 = =",
        "@0 = eVil",
        "@0 = EVIL",
        "@0 = ev_il",
        "@0 = ev il",
        "@0 = ev4il",
        "@0 = e",
        "@0 =  ",
        "@0 = 6",
        "@0 = _",
        "@00 = evil",
        "@ = evil",
        "@0 = ",
        "@0 = evil"
      ]
    },
    {
      "regex": "(^|[^0-9A-Za-z\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u024f\u0610-\u061a\u0620-\u065f\u066e-\u06d3\u06d5-\u06dc\u06df-\u06e8\u06ea-\u06ef\u06fa-\u06fc\u06ff\u0750-\u077f\u08a0\u08a2-\u08ac\u08e4-\u08fe\u1e00-\u1eff\u2c60-\u2c7f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua7ff\ufb50-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc])((?:1Macc))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 160"
      },
      "matches": []
    },
    {
      "regex": "\\A[- a-z\u00e0\u00e2]+\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    { "regex": "^stack-", "exceptionStackTrace": null, "matches": ["stack-"] },
    {
      "regex": "s\\.version\\s*= SomeGem::Version",
      "exceptionStackTrace": null,
      "matches": [
        "s.version  = SomeGem::Version",
        "s.version= SomeGem::Version",
        "s.version = SomeGem::Version"
      ]
    },
    {
      "regex": "<(u)>(.*?)<(\\/(u))>",
      "exceptionStackTrace": null,
      "matches": [
        "<u>></u>",
        "<u><</u>",
        "<u>/</u>",
        "<u>eVil</u>",
        "<u>EVIL</u>",
        "<u>ev_il</u>",
        "<u>ev il</u>",
        "<u>ev4il</u>",
        "<u>e</u>",
        "<u> </u>",
        "<u>6</u>",
        "<u>_</u>",
        "<u></u>",
        "<u>evil</u>"
      ]
    },
    { "regex": "$oldpair", "exceptionStackTrace": null, "matches": ["oldpair"] },
    {
      "regex": "Triangle\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "Triangle 0 0 00",
        "Triangle 0 0 ",
        "Triangle 0 0  0",
        "Triangle 0 00",
        "Triangle 0 00 0",
        "Triangle 0  0",
        "Triangle 0  0 0",
        "Triangle 00 0",
        "Triangle 00 0 0",
        "Triangle  0 0",
        "Triangle  0 0 0",
        "Triangle0 0 0",
        "Triangle 0 0 0"
      ]
    },
    {
      "regex": "Mt[0-9]+\\.[0-9]+[\\.[0-9]+]{0,}_([a-z]+[0-9]+)",
      "exceptionStackTrace": null,
      "matches": [
        "Mt0.0[]_evil00",
        "Mt0.0[]_evil",
        "Mt0.0[]_eVil0",
        "Mt0.0[]_EVIL0",
        "Mt0.0[]_ev_il0",
        "Mt0.0[]_ev il0",
        "Mt0.0[]_ev4il0",
        "Mt0.0[]_e0",
        "Mt0.0[]_ 0",
        "Mt0.0[]_60",
        "Mt0.0[]__0",
        "Mt0.0[]_0",
        "Mt0.0[]]_evil0",
        "Mt0.0[[]_evil0",
        "Mt0.0]_evil0",
        "Mt0.00]_evil0",
        "Mt0.0.]_evil0",
        "Mt0.00[]_evil0",
        "Mt0.[]_evil0",
        "Mt00.0[]_evil0",
        "Mt.0[]_evil0",
        "Mt0.0[_evil0",
        "Mt0.0[]_evil0"
      ]
    },
    {
      "regex": "(\\{\\{)(%?[\\w\\-\\. ]+%?)(\\}\\})",
      "exceptionStackTrace": null,
      "matches": [
        "{{%evil%%}}",
        "{{%evil}}",
        "{{%}%}}",
        "{{%{%}}",
        "{{%.%}}",
        "{{%-%}}",
        "{{%%%}}",
        "{{%eVil%}}",
        "{{%EVIL%}}",
        "{{%ev_il%}}",
        "{{%ev il%}}",
        "{{%ev4il%}}",
        "{{%e%}}",
        "{{% %}}",
        "{{%6%}}",
        "{{%_%}}",
        "{{%%}}",
        "{{%%evil%}}",
        "{{evil%}}",
        "{{evil}}",
        "{{%evil%}}"
      ]
    },
    {
      "regex": "not sorted",
      "exceptionStackTrace": null,
      "matches": ["not sorted"]
    },
    {
      "regex": "[^\\w\\s]|\\d",
      "exceptionStackTrace": null,
      "matches": ["a", "_", "A", " ", "0", "!"]
    },
    {
      "regex": "xhrPlugin\\.html$",
      "exceptionStackTrace": null,
      "matches": ["xhrPlugin.html"]
    },
    {
      "regex": "(\\n)+(.{0,80}(\\n)){4,}",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "(\\()\\s*|\\s*(\\))",
      "exceptionStackTrace": null,
      "matches": ["  )", "(  ", ")", "(", " )", "( "]
    },
    {
      "regex": "^\\d+-\\d+",
      "exceptionStackTrace": null,
      "matches": ["0-00", "0-", "00-0", "-0", "0-0"]
    },
    {
      "regex": "^[0-9A-F]{2}[- ][0-9A-F]{6}[- ][0-9A-F]{6}[- ][0-9A-F]$",
      "exceptionStackTrace": null,
      "matches": [
        "AA AAAAAA AAAAAA G",
        "AA AAAAAA AAAAAA 0",
        "AA AAAAAA AAAAAA-A",
        "AA AAAAAA AAAAAAA A",
        "AA AAAAAA AAAAA A",
        "AA AAAAAA GAAAAA A",
        "AA AAAAAA 0AAAAA A",
        "AA AAAAAA-AAAAAA A",
        "AA AAAAAAA AAAAAA A",
        "AA AAAAA AAAAAA A",
        "AA GAAAAA AAAAAA A",
        "AA 0AAAAA AAAAAA A",
        "AA-AAAAAA AAAAAA A",
        "AAA AAAAAA AAAAAA A",
        "A AAAAAA AAAAAA A",
        "GA AAAAAA AAAAAA A",
        "0A AAAAAA AAAAAA A",
        "AA AAAAAA AAAAAA A"
      ]
    },
    {
      "regex": "is not assignable to type",
      "exceptionStackTrace": null,
      "matches": ["is not assignable to type"]
    },
    {
      "regex": "\\s+\\S{36}\\s+",
      "exceptionStackTrace": null,
      "matches": [
        " aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa  ",
        " aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        " aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ",
        " _aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ",
        " Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ",
        " 0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ",
        "  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ",
        "  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa "
      ]
    },
    {
      "regex": "^-timeout",
      "exceptionStackTrace": null,
      "matches": ["-timeout"]
    },
    {
      "regex": "<script([^>]+|)>([\\s\\S]*?)<\\/script>",
      "exceptionStackTrace": null,
      "matches": [
        "<scriptevil>></script>",
        "<scriptevil><</script>",
        "<scriptevil>/</script>",
        "<scriptevil>eVil</script>",
        "<scriptevil>EVIL</script>",
        "<scriptevil>ev_il</script>",
        "<scriptevil>ev il</script>",
        "<scriptevil>ev4il</script>",
        "<scriptevil>e</script>",
        "<scriptevil> </script>",
        "<scriptevil>6</script>",
        "<scriptevil>_</script>",
        "<scriptevil></script>",
        "<scriptevilevil>evil</script>",
        "<script>>evil</script>",
        "<script<>evil</script>",
        "<script/>evil</script>",
        "<scripteVil>evil</script>",
        "<scriptEVIL>evil</script>",
        "<scriptev_il>evil</script>",
        "<scriptev il>evil</script>",
        "<scriptev4il>evil</script>",
        "<scripte>evil</script>",
        "<script >evil</script>",
        "<script6>evil</script>",
        "<script_>evil</script>",
        "<script>evil</script>",
        "<script></script>",
        "<scriptevil>evil</script>"
      ]
    },
    {
      "regex": "([a-z][a-zA-Z\\d@_]*+)\\s*+(,)?",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "multiple repeat"
      },
      "matches": []
    },
    {
      "regex": "\\=\\?([^?\\s]*)\\?([^?\\s]*)\\?([^?]*)\\?\\=",
      "exceptionStackTrace": null,
      "matches": [
        "=?evil?evil???=",
        "=?evil?evil?=?=",
        "=?evil?evil?eVil?=",
        "=?evil?evil?EVIL?=",
        "=?evil?evil?ev_il?=",
        "=?evil?evil?ev il?=",
        "=?evil?evil?ev4il?=",
        "=?evil?evil?e?=",
        "=?evil?evil? ?=",
        "=?evil?evil?6?=",
        "=?evil?evil?_?=",
        "=?evil?evil??=",
        "=?evil???evil?=",
        "=?evil?=?evil?=",
        "=?evil?eVil?evil?=",
        "=?evil?EVIL?evil?=",
        "=?evil?ev_il?evil?=",
        "=?evil?ev il?evil?=",
        "=?evil?ev4il?evil?=",
        "=?evil?e?evil?=",
        "=?evil? ?evil?=",
        "=?evil?6?evil?=",
        "=?evil?_?evil?=",
        "=?evil??evil?=",
        "=???evil?evil?=",
        "=?=?evil?evil?=",
        "=?eVil?evil?evil?=",
        "=?EVIL?evil?evil?=",
        "=?ev_il?evil?evil?=",
        "=?ev il?evil?evil?=",
        "=?ev4il?evil?evil?=",
        "=?e?evil?evil?=",
        "=? ?evil?evil?=",
        "=?6?evil?evil?=",
        "=?_?evil?evil?=",
        "=??evil?evil?=",
        "=????=",
        "=?evil?evil?evil?="
      ]
    },
    {
      "regex": "^application\\/vnd.vmware.vcloud.(\\w+)\\+xml$",
      "exceptionStackTrace": null,
      "matches": [
        "application/vndavmwareavcloudaeVil+xml",
        "application/vndavmwareavcloudaEVIL+xml",
        "application/vndavmwareavcloudaev_il+xml",
        "application/vndavmwareavcloudaev il+xml",
        "application/vndavmwareavcloudaev4il+xml",
        "application/vndavmwareavcloudae+xml",
        "application/vndavmwareavclouda +xml",
        "application/vndavmwareavclouda6+xml",
        "application/vndavmwareavclouda_+xml",
        "application/vndavmwareavclouda+xml",
        "application/vndavmwareavcloudAevil+xml",
        "application/vndavmwareavcloud0evil+xml",
        "application/vndavmwareavcloud/evil+xml",
        "application/vndavmwareavcloud+evil+xml",
        "application/vndavmwareavcloud evil+xml",
        "application/vndavmwareAvcloudaevil+xml",
        "application/vndavmware0vcloudaevil+xml",
        "application/vndavmware/vcloudaevil+xml",
        "application/vndavmware+vcloudaevil+xml",
        "application/vndavmware vcloudaevil+xml",
        "application/vndAvmwareavcloudaevil+xml",
        "application/vnd0vmwareavcloudaevil+xml",
        "application/vnd/vmwareavcloudaevil+xml",
        "application/vnd+vmwareavcloudaevil+xml",
        "application/vnd vmwareavcloudaevil+xml",
        "application/vndavmwareavcloudaevil+xml"
      ]
    },
    { "regex": "Asn", "exceptionStackTrace": null, "matches": ["Asn"] },
    {
      "regex": "^ +# (.*\\.rb)\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "\\.git.*$",
      "exceptionStackTrace": null,
      "matches": [
        ".git.",
        ".giteVil",
        ".gitEVIL",
        ".gitev_il",
        ".gitev il",
        ".gitev4il",
        ".gite",
        ".git ",
        ".git6",
        ".git_",
        ".git",
        ".gitevil"
      ]
    },
    {
      "regex": "^[A-Za-z]\\w*(?:\\.[A-Za-z]\\w*)*",
      "exceptionStackTrace": null,
      "matches": [
        "aevil.aevil.aevil",
        "aevil",
        "aevil.aeVil",
        "aevil.aEVIL",
        "aevil.aev_il",
        "aevil.aev il",
        "aevil.aev4il",
        "aevil.ae",
        "aevil.a ",
        "aevil.a6",
        "aevil.a_",
        "aevil.a",
        "aevil.Aevil",
        "aeVil.aevil",
        "aEVIL.aevil",
        "aev_il.aevil",
        "aev il.aevil",
        "aev4il.aevil",
        "ae.aevil",
        "a .aevil",
        "a6.aevil",
        "a_.aevil",
        "a.aevil",
        "Aevil.aevil",
        "a",
        "aevil.aevil"
      ]
    },
    { "regex": "\\b(VRP)\\b", "exceptionStackTrace": null, "matches": ["VRP"] },
    {
      "regex": "image-35c3af8134\\.gif",
      "exceptionStackTrace": null,
      "matches": ["image-35c3af8134.gif"]
    },
    {
      "regex": "SSL connection failed",
      "exceptionStackTrace": null,
      "matches": ["SSL connection failed"]
    },
    {
      "regex": "[McCx0-9]",
      "exceptionStackTrace": null,
      "matches": ["c", "a", "M", "C", "A", "0", "x"]
    },
    {
      "regex": "\n\t\t\t(?<sigil>\n\t\t\t\t[\\$*]\n\t\t\t)\n\t\t\t(?<var>\n\t\t\t\t(?<package>\n\t\t\t\t\t[\\w\\:\\']*\n\t\t\t\t)\n\t\t\t\t\\b\n\t\t\t\tVERSION\n\t\t\t)\n\t\t\t\\b\n\t\t\t.*?\n\t\t\t\\=\n\t\t\t(?<rhs>\n\t\t\t\t.*\n\t\t\t)\n\t\t\t",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<s"
      },
      "matches": []
    },
    {
      "regex": "%(\\d+\\$)?s",
      "exceptionStackTrace": null,
      "matches": ["%0$0$s", "%00$s", "%$s", "%s", "%0$s"]
    },
    {
      "regex": "^(?:cordova-)?",
      "exceptionStackTrace": null,
      "matches": ["cordova-cordova-", "", "cordova-"]
    },
    {
      "regex": "^https?://([\\w.-]+)[/:].*$",
      "exceptionStackTrace": null,
      "matches": [
        "https://evil::",
        "https://evil:/",
        "https://evil:.",
        "https://evil:-",
        "https://evil:eVil",
        "https://evil:EVIL",
        "https://evil:ev_il",
        "https://evil:ev il",
        "https://evil:ev4il",
        "https://evil:e",
        "https://evil: ",
        "https://evil:6",
        "https://evil:_",
        "https://evil:",
        "https://evil/evil",
        "https://::evil",
        "https:///:evil",
        "https://.:evil",
        "https://-:evil",
        "https://eVil:evil",
        "https://EVIL:evil",
        "https://ev_il:evil",
        "https://ev il:evil",
        "https://ev4il:evil",
        "https://e:evil",
        "https:// :evil",
        "https://6:evil",
        "https://_:evil",
        "https://:evil",
        "httpss://evil:evil",
        "http://evil:evil",
        "http://evil:",
        "https://evil:evil"
      ]
    },
    {
      "regex": "(105|11[05]0|12[05])",
      "exceptionStackTrace": null,
      "matches": ["121", "120", "1110", "1100", "125", "1150", "105"]
    },
    {
      "regex": "&nbsp;&nbsp;&nbsp;&nbsp;",
      "exceptionStackTrace": null,
      "matches": ["&nbsp;&nbsp;&nbsp;&nbsp;"]
    },
    {
      "regex": " application/x-binary-rdf-results-table ",
      "exceptionStackTrace": null,
      "matches": [" application/x-binary-rdf-results-table "]
    },
    {
      "regex": "^inicio|comienzo$",
      "exceptionStackTrace": null,
      "matches": ["comienzo", "inicio"]
    },
    {
      "regex": "throttled_time",
      "exceptionStackTrace": null,
      "matches": ["throttled_time"]
    },
    {
      "regex": "\\G,$s",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\G"
      },
      "matches": []
    },
    {
      "regex": "\\b(?<_1>select)\\s+(?<_2>(?:[^\\s\\\\]|\\\\.)+)\\b",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<_"
      },
      "matches": []
    },
    {
      "regex": "^([aogu]+)([\\-\\+\\=])([rwx]+)$",
      "exceptionStackTrace": null,
      "matches": [
        "u=xx",
        "u=",
        "u=w",
        "u=r",
        "u=a",
        "u-x",
        "u+x",
        "uu=x",
        "=x",
        "o=x",
        "g=x",
        "b=x",
        "a=x",
        "u=x"
      ]
    },
    {
      "regex": "^millisec(|ond)s?$",
      "exceptionStackTrace": null,
      "matches": [
        "millisecondss",
        "millisecond",
        "millisecondonds",
        "millisecs",
        "millisec",
        "milliseconds"
      ]
    },
    { "regex": "%money%", "exceptionStackTrace": null, "matches": ["%money%"] },
    {
      "regex": "Orderer bad not assigned to the channel",
      "exceptionStackTrace": null,
      "matches": ["Orderer bad not assigned to the channel"]
    },
    {
      "regex": ".*\\bShuriken\\b.*\\btagged\\b.*\\bcanThrow\\b.*\\btrue\\b",
      "exceptionStackTrace": null,
      "matches": [
        "evilShurikeneviltaggedevilcanThroweViltrue",
        "evilShurikeneviltaggedevilcanThrowEVILtrue",
        "evilShurikeneviltaggedevilcanThrowev_iltrue",
        "evilShurikeneviltaggedevilcanThrowev iltrue",
        "evilShurikeneviltaggedevilcanThrowev4iltrue",
        "evilShurikeneviltaggedevilcanThrowetrue",
        "evilShurikeneviltaggedevilcanThrow true",
        "evilShurikeneviltaggedevilcanThrow6true",
        "evilShurikeneviltaggedevilcanThrow_true",
        "evilShurikeneviltaggedevilcanThrowtrue",
        "evilShurikeneviltaggedeVilcanThroweviltrue",
        "evilShurikeneviltaggedEVILcanThroweviltrue",
        "evilShurikeneviltaggedev_ilcanThroweviltrue",
        "evilShurikeneviltaggedev ilcanThroweviltrue",
        "evilShurikeneviltaggedev4ilcanThroweviltrue",
        "evilShurikeneviltaggedecanThroweviltrue",
        "evilShurikeneviltagged canThroweviltrue",
        "evilShurikeneviltagged6canThroweviltrue",
        "evilShurikeneviltagged_canThroweviltrue",
        "evilShurikeneviltaggedcanThroweviltrue",
        "evilShurikeneViltaggedevilcanThroweviltrue",
        "evilShurikenEVILtaggedevilcanThroweviltrue",
        "evilShurikenev_iltaggedevilcanThroweviltrue",
        "evilShurikenev iltaggedevilcanThroweviltrue",
        "evilShurikenev4iltaggedevilcanThroweviltrue",
        "evilShurikenetaggedevilcanThroweviltrue",
        "evilShuriken taggedevilcanThroweviltrue",
        "evilShuriken6taggedevilcanThroweviltrue",
        "evilShuriken_taggedevilcanThroweviltrue",
        "evilShurikentaggedevilcanThroweviltrue",
        "eVilShurikeneviltaggedevilcanThroweviltrue",
        "EVILShurikeneviltaggedevilcanThroweviltrue",
        "ev_ilShurikeneviltaggedevilcanThroweviltrue",
        "ev ilShurikeneviltaggedevilcanThroweviltrue",
        "ev4ilShurikeneviltaggedevilcanThroweviltrue",
        "eShurikeneviltaggedevilcanThroweviltrue",
        " ShurikeneviltaggedevilcanThroweviltrue",
        "6ShurikeneviltaggedevilcanThroweviltrue",
        "_ShurikeneviltaggedevilcanThroweviltrue",
        "ShurikeneviltaggedevilcanThroweviltrue",
        "ShurikentaggedcanThrowtrue",
        "evilShurikeneviltaggedevilcanThroweviltrue"
      ]
    },
    { "regex": "^subsub1", "exceptionStackTrace": null, "matches": ["subsub1"] },
    {
      "regex": "SELECT \\\"employees\\\".\\\"id\\\" FROM \\\"employees\\\"  WHERE \\\"employees\\\".\\\"group_id\\\" = ",
      "exceptionStackTrace": null,
      "matches": [
        "SELECT \"employees\"a\"id\" FROM \"employees\"  WHERE \"employees\"_\"group_id\" = ",
        "SELECT \"employees\"a\"id\" FROM \"employees\"  WHERE \"employees\"A\"group_id\" = ",
        "SELECT \"employees\"a\"id\" FROM \"employees\"  WHERE \"employees\"=\"group_id\" = ",
        "SELECT \"employees\"a\"id\" FROM \"employees\"  WHERE \"employees\"0\"group_id\" = ",
        "SELECT \"employees\"a\"id\" FROM \"employees\"  WHERE \"employees\"\"\"group_id\" = ",
        "SELECT \"employees\"a\"id\" FROM \"employees\"  WHERE \"employees\" \"group_id\" = ",
        "SELECT \"employees\"_\"id\" FROM \"employees\"  WHERE \"employees\"a\"group_id\" = ",
        "SELECT \"employees\"A\"id\" FROM \"employees\"  WHERE \"employees\"a\"group_id\" = ",
        "SELECT \"employees\"=\"id\" FROM \"employees\"  WHERE \"employees\"a\"group_id\" = ",
        "SELECT \"employees\"0\"id\" FROM \"employees\"  WHERE \"employees\"a\"group_id\" = ",
        "SELECT \"employees\"\"\"id\" FROM \"employees\"  WHERE \"employees\"a\"group_id\" = ",
        "SELECT \"employees\" \"id\" FROM \"employees\"  WHERE \"employees\"a\"group_id\" = ",
        "SELECT \"employees\"a\"id\" FROM \"employees\"  WHERE \"employees\"a\"group_id\" = "
      ]
    },
    {
      "regex": "\\<(\\d+)\\>(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "<0>>",
        "<0><",
        "<0>eVil",
        "<0>EVIL",
        "<0>ev_il",
        "<0>ev il",
        "<0>ev4il",
        "<0>e",
        "<0> ",
        "<0>6",
        "<0>_",
        "<00>evil",
        "<>evil",
        "<0>",
        "<0>evil"
      ]
    },
    { "regex": "^$leading", "exceptionStackTrace": null, "matches": ["leading"] },
    {
      "regex": "\"\\\\\\\\Inbox\"",
      "exceptionStackTrace": null,
      "matches": ["\"\\\\Inbox\""]
    },
    {
      "regex": "\\A\\d{4}\\-\\d{2}\\-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{6}Z\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    { "regex": "[T ]", "exceptionStackTrace": null, "matches": ["T", "A", " "] },
    {
      "regex": "(^[\\s\\n]+)|(\\s\\n]+$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^\\s*\\[([^][]+)\\]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (parse error): expected character type but received RIGHT_BRACKET"
      },
      "matches": []
    },
    {
      "regex": "\\.(eot|otf|ttf|woff|woff2)(\\?.*)?$",
      "exceptionStackTrace": null,
      "matches": [
        ".eot?evil?evil",
        ".eot??",
        ".eot?.",
        ".eot?eVil",
        ".eot?EVIL",
        ".eot?ev_il",
        ".eot?ev il",
        ".eot?ev4il",
        ".eot?e",
        ".eot? ",
        ".eot?6",
        ".eot?_",
        ".eot?",
        ".woff2",
        ".woff",
        ".ttf",
        ".otf",
        ".eot",
        ".woff2?evil",
        ".woff?evil",
        ".ttf?evil",
        ".otf?evil",
        ".eot?evil"
      ]
    },
    {
      "regex": "^(^#!\\/.*)",
      "exceptionStackTrace": null,
      "matches": [
        "#!//",
        "#!/#",
        "#!/!",
        "#!/eVil",
        "#!/EVIL",
        "#!/ev_il",
        "#!/ev il",
        "#!/ev4il",
        "#!/e",
        "#!/ ",
        "#!/6",
        "#!/_",
        "#!/",
        "#!/evil"
      ]
    },
    {
      "regex": "^\\s*[^#].*?\\s*:\\s*([a-f0-9.:]+?)\\s*-\\s*([a-f0-9.:]+?)\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        " aevil : : - :  ",
        " aevil : : - :",
        " aevil : : - :: ",
        " aevil : : -  ",
        " aevil : : - g ",
        " aevil : : - a ",
        " aevil : : - 0 ",
        " aevil : : - . ",
        " aevil : : -  : ",
        " aevil : : -: ",
        " aevil : :  - : ",
        " aevil : :- : ",
        " aevil : :: - : ",
        " aevil :  - : ",
        " aevil : g - : ",
        " aevil : a - : ",
        " aevil : 0 - : ",
        " aevil : . - : ",
        " aevil :  : - : ",
        " aevil :: - : ",
        " aevil  : : - : ",
        " aevil: : - : ",
        " a: : : - : ",
        " a. : : - : ",
        " a- : : - : ",
        " a# : : - : ",
        " aeVil : : - : ",
        " aEVIL : : - : ",
        " aev_il : : - : ",
        " aev il : : - : ",
        " aev4il : : - : ",
        " ae : : - : ",
        " a  : : - : ",
        " a6 : : - : ",
        " a_ : : - : ",
        " a : : - : ",
        " Aevil : : - : ",
        " :evil : : - : ",
        " 0evil : : - : ",
        " .evil : : - : ",
        " -evil : : - : ",
        " #evil : : - : ",
        "  evil : : - : ",
        "  aevil : : - : ",
        "aevil : : - : ",
        "a::-:",
        " aevil : : - : "
      ]
    },
    {
      "regex": "node_modules|~",
      "exceptionStackTrace": null,
      "matches": ["~", "node_modules"]
    },
    {
      "regex": "No hosts served",
      "exceptionStackTrace": null,
      "matches": ["No hosts served"]
    },
    {
      "regex": ".*(.{8})$",
      "exceptionStackTrace": null,
      "matches": [
        "evilaaaaaaaaa",
        "evilaaaaaaa",
        "evil_aaaaaaa",
        "evilAaaaaaaa",
        "evil0aaaaaaa",
        "evil aaaaaaa",
        "eVilaaaaaaaa",
        "EVILaaaaaaaa",
        "ev_ilaaaaaaaa",
        "ev ilaaaaaaaa",
        "ev4ilaaaaaaaa",
        "eaaaaaaaa",
        " aaaaaaaa",
        "6aaaaaaaa",
        "_aaaaaaaa",
        "aaaaaaaa",
        "evilaaaaaaaa"
      ]
    },
    {
      "regex": "^(.*?)(%[a-z0-9]+)?:(\\\\*|[0-9]+)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil%evil:00",
        "evil%evil:\\\\",
        "evil%evil:",
        "evil%evil%evil:\\",
        "evil:\\",
        "evil%eVil:\\",
        "evil%EVIL:\\",
        "evil%ev_il:\\",
        "evil%ev il:\\",
        "evil%ev4il:\\",
        "evil%e:\\",
        "evil% :\\",
        "evil%6:\\",
        "evil%_:\\",
        "evil%:\\",
        "\\%evil:\\",
        ":%evil:\\",
        "%%evil:\\",
        "eVil%evil:\\",
        "EVIL%evil:\\",
        "ev_il%evil:\\",
        "ev il%evil:\\",
        "ev4il%evil:\\",
        "e%evil:\\",
        " %evil:\\",
        "6%evil:\\",
        "_%evil:\\",
        "%evil:\\",
        ":0",
        ":",
        "evil%evil:0",
        "evil%evil:\\"
      ]
    },
    {
      "regex": "$barrier_str",
      "exceptionStackTrace": null,
      "matches": ["barrier_str"]
    },
    {
      "regex": "(?x)\n        declare_clippy_lint!\\s*[\\{(]\\s*\n        pub\\s+(?P<name>[A-Z_][A-Z_0-9]*)\\s*,\\s*\n        (?P<cat>[a-z_]+)\\s*,\\s*\n        \"(?P<desc>(?:[^\"\\\\]+|\\\\(?s).(?-s))*)\"\\s*[})]\n    ",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "missing :"
      },
      "matches": []
    },
    {
      "regex": "^\\#CONTINUE_QUOTE=y$",
      "exceptionStackTrace": null,
      "matches": ["#CONTINUE_QUOTE=y"]
    },
    {
      "regex": ".el([.0-9a-zA-Z]+).centos",
      "exceptionStackTrace": null,
      "matches": [
        "aelevilAcentos",
        "aelevil0centos",
        "aelevil.centos",
        "aelevil centos",
        "ael.acentos",
        "aeleVilacentos",
        "aelEVILacentos",
        "aelev_ilacentos",
        "aelev ilacentos",
        "aelev4ilacentos",
        "aeleacentos",
        "ael acentos",
        "ael6acentos",
        "ael_acentos",
        "aelacentos",
        "Aelevilacentos",
        "0elevilacentos",
        ".elevilacentos",
        " elevilacentos",
        "aelevilacentos"
      ]
    },
    {
      "regex": "angularjs\\/angular.d.ts",
      "exceptionStackTrace": null,
      "matches": [
        "angularjs/angularadAts",
        "angularjs/angularad0ts",
        "angularjs/angularad/ts",
        "angularjs/angularad ts",
        "angularjs/angularAdats",
        "angularjs/angular0dats",
        "angularjs/angular/dats",
        "angularjs/angular dats",
        "angularjs/angularadats"
      ]
    },
    { "regex": "<\\/c>", "exceptionStackTrace": null, "matches": ["</c>"] },
    {
      "regex": "$criteria{$fld}",
      "exceptionStackTrace": null,
      "matches": ["criteria{fld}"]
    },
    {
      "regex": "(?:<[\\/A-DF-Z][^>]*>)+([Cc]eannann)<\\/[A-DF-Z]> (?:<[\\/A-DF-Z][^>]*>)+(c\\x{e9}anna)<\\/[A-DF-Z]>",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "incomplete escape \\x"
      },
      "matches": []
    },
    {
      "regex": "(?m)([a-z0-9_/-]+)\\\\.c$",
      "exceptionStackTrace": null,
      "matches": [
        "evil\\_c",
        "evil\\\\c",
        "evil\\Ac",
        "evil\\0c",
        "evil\\/c",
        "evil\\-c",
        "evil\\ c",
        "\\\\ac",
        "/\\ac",
        "-\\ac",
        "eVil\\ac",
        "EVIL\\ac",
        "ev_il\\ac",
        "ev il\\ac",
        "ev4il\\ac",
        "e\\ac",
        " \\ac",
        "6\\ac",
        "_\\ac",
        "\\ac",
        "evil\\ac"
      ]
    },
    {
      "regex": "^#([a-fA-F0-9]{6,6}|[a-fA-F0-9]{8,8})$",
      "exceptionStackTrace": null,
      "matches": [
        "#000000000",
        "#g0000000",
        "#a0000000",
        "#G0000000",
        "#A0000000",
        "#0000000",
        "#00000",
        "#g00000",
        "#a00000",
        "#G00000",
        "#A00000",
        "#00000000",
        "#000000"
      ]
    },
    {
      "regex": "var._qevents.=._qevents.\\|\\|.\\[\\];",
      "exceptionStackTrace": null,
      "matches": [
        "vara_qeventsa=a_qeventsa|||[];",
        "vara_qeventsa=a_qeventsa||_[];",
        "vara_qeventsa=a_qeventsa||][];",
        "vara_qeventsa=a_qeventsa||[[];",
        "vara_qeventsa=a_qeventsa||A[];",
        "vara_qeventsa=a_qeventsa||=[];",
        "vara_qeventsa=a_qeventsa||;[];",
        "vara_qeventsa=a_qeventsa||0[];",
        "vara_qeventsa=a_qeventsa|| [];",
        "vara_qeventsa=a_qevents|||a[];",
        "vara_qeventsa=a_qevents_||a[];",
        "vara_qeventsa=a_qevents]||a[];",
        "vara_qeventsa=a_qevents[||a[];",
        "vara_qeventsa=a_qeventsA||a[];",
        "vara_qeventsa=a_qevents=||a[];",
        "vara_qeventsa=a_qevents;||a[];",
        "vara_qeventsa=a_qevents0||a[];",
        "vara_qeventsa=a_qevents ||a[];",
        "vara_qeventsa=|_qeventsa||a[];",
        "vara_qeventsa=__qeventsa||a[];",
        "vara_qeventsa=]_qeventsa||a[];",
        "vara_qeventsa=[_qeventsa||a[];",
        "vara_qeventsa=A_qeventsa||a[];",
        "vara_qeventsa==_qeventsa||a[];",
        "vara_qeventsa=;_qeventsa||a[];",
        "vara_qeventsa=0_qeventsa||a[];",
        "vara_qeventsa= _qeventsa||a[];",
        "vara_qevents|=a_qeventsa||a[];",
        "vara_qevents_=a_qeventsa||a[];",
        "vara_qevents]=a_qeventsa||a[];",
        "vara_qevents[=a_qeventsa||a[];",
        "vara_qeventsA=a_qeventsa||a[];",
        "vara_qevents==a_qeventsa||a[];",
        "vara_qevents;=a_qeventsa||a[];",
        "vara_qevents0=a_qeventsa||a[];",
        "vara_qevents =a_qeventsa||a[];",
        "var|_qeventsa=a_qeventsa||a[];",
        "var__qeventsa=a_qeventsa||a[];",
        "var]_qeventsa=a_qeventsa||a[];",
        "var[_qeventsa=a_qeventsa||a[];",
        "varA_qeventsa=a_qeventsa||a[];",
        "var=_qeventsa=a_qeventsa||a[];",
        "var;_qeventsa=a_qeventsa||a[];",
        "var0_qeventsa=a_qeventsa||a[];",
        "var _qeventsa=a_qeventsa||a[];",
        "vara_qeventsa=a_qeventsa||a[];"
      ]
    },
    {
      "regex": "\\A $regex \\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "Hello i18n!",
      "exceptionStackTrace": null,
      "matches": ["Hello i18n!"]
    },
    {
      "regex": "\\w+\\.\\w+$",
      "exceptionStackTrace": null,
      "matches": [
        "evil.eVil",
        "evil.EVIL",
        "evil.ev_il",
        "evil.ev il",
        "evil.ev4il",
        "evil.e",
        "evil. ",
        "evil.6",
        "evil._",
        "evil.",
        "eVil.evil",
        "EVIL.evil",
        "ev_il.evil",
        "ev il.evil",
        "ev4il.evil",
        "e.evil",
        " .evil",
        "6.evil",
        "_.evil",
        ".evil",
        "evil.evil"
      ]
    },
    {
      "regex": "^Illegal assignment to a variable specified as constant.$",
      "exceptionStackTrace": null,
      "matches": [
        "Illegal assignment to a variable specified as constant_",
        "Illegal assignment to a variable specified as constantA",
        "Illegal assignment to a variable specified as constant0",
        "Illegal assignment to a variable specified as constant ",
        "Illegal assignment to a variable specified as constanta"
      ]
    },
    { "regex": "kml", "exceptionStackTrace": null, "matches": ["kml"] },
    {
      "regex": "^(?:function\\*? )?([^(\\s]+)\\(",
      "exceptionStackTrace": null,
      "matches": [
        "function* *(",
        "function* ((",
        "function* eVil(",
        "function* EVIL(",
        "function* ev_il(",
        "function* ev il(",
        "function* ev4il(",
        "function* e(",
        "function*  (",
        "function* 6(",
        "function* _(",
        "function* (",
        "function* function* evil(",
        "function** evil(",
        "function evil(",
        "evil(",
        "function* evil("
      ]
    },
    {
      "regex": "^\\s*_?list_last(.+)",
      "exceptionStackTrace": null,
      "matches": [
        " _list_lasteVil",
        " _list_lastEVIL",
        " _list_lastev_il",
        " _list_lastev il",
        " _list_lastev4il",
        " _list_laste",
        " _list_last ",
        " _list_last6",
        " _list_last_",
        " _list_last",
        " __list_lastevil",
        " list_lastevil",
        "  _list_lastevil",
        "_list_lastevil",
        "list_lastevil",
        " _list_lastevil"
      ]
    },
    {
      "regex": "media\\/([^\\/.]+)",
      "exceptionStackTrace": null,
      "matches": [
        "media//",
        "media/.",
        "media/eVil",
        "media/EVIL",
        "media/ev_il",
        "media/ev il",
        "media/ev4il",
        "media/e",
        "media/ ",
        "media/6",
        "media/_",
        "media/",
        "media/evil"
      ]
    },
    {
      "regex": "unsupported delimiter",
      "exceptionStackTrace": null,
      "matches": ["unsupported delimiter"]
    },
    { "regex": "sulfuras", "exceptionStackTrace": null, "matches": ["sulfuras"] },
    {
      "regex": "(?<=^#define GEOHEX3_PATCH_VERSION)(\\s+)[0-9]",
      "exceptionStackTrace": null,
      "matches": ["  0", "0", " 0"]
    },
    {
      "regex": "^1\\.\\.(\\d+)\\s*(# .*)?",
      "exceptionStackTrace": null,
      "matches": [
        "1..0 # evil# evil",
        "1..0 ",
        "1..0 # .",
        "1..0 # #",
        "1..0 # eVil",
        "1..0 # EVIL",
        "1..0 # ev_il",
        "1..0 # ev il",
        "1..0 # ev4il",
        "1..0 # e",
        "1..0 #  ",
        "1..0 # 6",
        "1..0 # _",
        "1..0 # ",
        "1..0  # evil",
        "1..0# evil",
        "1..00 # evil",
        "1.. # evil",
        "1..0",
        "1..0 # evil"
      ]
    },
    {
      "regex": "^([0-9\\.\\-]*)x([0-9\\.\\-]*)(@[LCR])?$",
      "exceptionStackTrace": null,
      "matches": [
        "-x-@R@R",
        "-x-",
        "-x-@L",
        "-x-@C",
        "-x-@A",
        "-x--@R",
        "-x@R",
        "-x0@R",
        "-x.@R",
        "--x-@R",
        "x-@R",
        "0x-@R",
        ".x-@R",
        "x",
        "-x-@R"
      ]
    },
    {
      "regex": "(.jpg|.png|.gif|.ps|.jpeg)$",
      "exceptionStackTrace": null,
      "matches": [
        "_jpeg",
        "Ajpeg",
        "0jpeg",
        " jpeg",
        "_ps",
        "Aps",
        "0ps",
        " ps",
        "_gif",
        "Agif",
        "0gif",
        " gif",
        "_png",
        "Apng",
        "0png",
        " png",
        "_jpg",
        "Ajpg",
        "0jpg",
        " jpg",
        "ajpeg",
        "aps",
        "agif",
        "apng",
        "ajpg"
      ]
    },
    {
      "regex": "^\\u0444\\u0435\\u0432",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 1092"
      },
      "matches": []
    },
    {
      "regex": "\\A\n      (?:[0-9A-Fa-f]{1,4}:){7}\n         [0-9A-Fa-f]{1,4}\n      \\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "(\\s-p|\\s-P|\\s--password)(\\s*\\S+)",
      "exceptionStackTrace": null,
      "matches": [
        " -p -",
        " -p eVil",
        " -p EVIL",
        " -p ev_il",
        " -p ev il",
        " -p ev4il",
        " -p e",
        " -p  ",
        " -p 6",
        " -p _",
        " -p ",
        " -p  evil",
        " --passwordevil",
        " -Pevil",
        " -pevil",
        " --password evil",
        " -P evil",
        " -p evil"
      ]
    },
    {
      "regex": "(\n                   (?:\n                     \\d+\\s*:\\s*\\d+\n                     (?:\n                       \\s*:\\s*\\d+(?:[,.]\\d*)?\n                     )?\n                   |\n                     \\d+\\s*h(?:\\s*\\d+m?(?:\\s*\\d+s?)?)?\n                   )\n                   (?:\n                     \\s*\n                     [ap](?:m\\b|\\.m\\.)\n                   )?\n                 |\n                   \\d+\\s*[ap](?:m\\b|\\.m\\.)\n                 )\n                 (?:\n                   \\s*\n                   (\n                     (?:gmt|utc?)?[-+]\\d+(?:[,.:]\\d+(?::\\d+)?)?\n                   |\n                     (?-i:[[:alpha:].\\s]+)(?:standard|daylight)\\stime\\b\n                   |\n                     (?-i:[[:alpha:]]+)(?:\\sdst)?\\b\n                   )\n                 )?\n                ",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (internal): Unexpected extension ?-"
      },
      "matches": []
    },
    {
      "regex": "password 8 ([0-9A-Za-z]{13})",
      "exceptionStackTrace": null,
      "matches": [
        "password 8 aaaaaaaaaaaaaa",
        "password 8 aaaaaaaaaaaa",
        "password 8 Aaaaaaaaaaaaa",
        "password 8 0aaaaaaaaaaaa",
        "password 8 aaaaaaaaaaaaa"
      ]
    },
    {
      "regex": ".*\\.appxupload$",
      "exceptionStackTrace": null,
      "matches": [
        "..appxupload",
        "eVil.appxupload",
        "EVIL.appxupload",
        "ev_il.appxupload",
        "ev il.appxupload",
        "ev4il.appxupload",
        "e.appxupload",
        " .appxupload",
        "6.appxupload",
        "_.appxupload",
        ".appxupload",
        "evil.appxupload"
      ]
    },
    {
      "regex": "<head id=\\\"(d[0-9]+)\\.(s[0-9]+)\\.(t[0-9]+)\\\"",
      "exceptionStackTrace": null,
      "matches": [
        "<head id=\"d0.s0.t00\"",
        "<head id=\"d0.s0.t\"",
        "<head id=\"d0.s00.t0\"",
        "<head id=\"d0.s.t0\"",
        "<head id=\"d00.s0.t0\"",
        "<head id=\"d.s0.t0\"",
        "<head id=\"d0.s0.t0\""
      ]
    },
    {
      "regex": "^https?:\\/\\/www\\.newschoolers\\.com\\/videos?\\/watch\\/(\\d+)\\/",
      "exceptionStackTrace": null,
      "matches": [
        "https://www.newschoolers.com/videos/watch/00/",
        "https://www.newschoolers.com/videos/watch//",
        "https://www.newschoolers.com/videoss/watch/0/",
        "https://www.newschoolers.com/video/watch/0/",
        "httpss://www.newschoolers.com/videos/watch/0/",
        "http://www.newschoolers.com/videos/watch/0/",
        "http://www.newschoolers.com/video/watch/0/",
        "https://www.newschoolers.com/videos/watch/0/"
      ]
    },
    {
      "regex": "^NULL:?",
      "exceptionStackTrace": null,
      "matches": ["NULL::", "NULL", "NULL:"]
    },
    {
      "regex": "\\W(LPPL-1.2|LaTeX\\WProject\\WPublic\\WLicense\\Wv1.2)\\W",
      "exceptionStackTrace": null,
      "matches": [
        ";LaTeX;Project;Public;License;v1A2;",
        ";LaTeX;Project;Public;License;v102;",
        ";LaTeX;Project;Public;License;v1-2;",
        ";LaTeX;Project;Public;License;v1 2;",
        ";LaTeX;Project;Public;Licenseav1a2;",
        ";LaTeX;Project;Public;License_v1a2;",
        ";LaTeX;Project;Public;LicenseAv1a2;",
        ";LaTeX;Project;Public;License0v1a2;",
        ";LaTeX;Project;Public;License-v1a2;",
        ";LaTeX;Project;Public;License v1a2;",
        ";LaTeX;Project;PublicaLicense;v1a2;",
        ";LaTeX;Project;Public_License;v1a2;",
        ";LaTeX;Project;PublicALicense;v1a2;",
        ";LaTeX;Project;Public0License;v1a2;",
        ";LaTeX;Project;Public-License;v1a2;",
        ";LaTeX;Project;Public License;v1a2;",
        ";LaTeX;ProjectaPublic;License;v1a2;",
        ";LaTeX;Project_Public;License;v1a2;",
        ";LaTeX;ProjectAPublic;License;v1a2;",
        ";LaTeX;Project0Public;License;v1a2;",
        ";LaTeX;Project-Public;License;v1a2;",
        ";LaTeX;Project Public;License;v1a2;",
        ";LaTeXaProject;Public;License;v1a2;",
        ";LaTeX_Project;Public;License;v1a2;",
        ";LaTeXAProject;Public;License;v1a2;",
        ";LaTeX0Project;Public;License;v1a2;",
        ";LaTeX-Project;Public;License;v1a2;",
        ";LaTeX Project;Public;License;v1a2;",
        ";LPPL-1a2a",
        ";LPPL-1a2_",
        ";LPPL-1a2A",
        ";LPPL-1a20",
        ";LPPL-1a2-",
        ";LPPL-1a2 ",
        ";LPPL-1A2;",
        ";LPPL-102;",
        ";LPPL-1-2;",
        ";LPPL-1 2;",
        "aLPPL-1a2;",
        "_LPPL-1a2;",
        "ALPPL-1a2;",
        "0LPPL-1a2;",
        "-LPPL-1a2;",
        " LPPL-1a2;",
        ";LaTeX;Project;Public;License;v1a2;",
        ";LPPL-1a2;"
      ]
    },
    {
      "regex": "^command=\\\"\\/bin\\/bash\\\",no-X11-forwarding ssh-rsa \\w+ \\w+",
      "exceptionStackTrace": null,
      "matches": [
        "command=\"/bin/bash\",no-X11-forwarding ssh-rsa evil eVil",
        "command=\"/bin/bash\",no-X11-forwarding ssh-rsa evil EVIL",
        "command=\"/bin/bash\",no-X11-forwarding ssh-rsa evil ev_il",
        "command=\"/bin/bash\",no-X11-forwarding ssh-rsa evil ev il",
        "command=\"/bin/bash\",no-X11-forwarding ssh-rsa evil ev4il",
        "command=\"/bin/bash\",no-X11-forwarding ssh-rsa evil e",
        "command=\"/bin/bash\",no-X11-forwarding ssh-rsa evil  ",
        "command=\"/bin/bash\",no-X11-forwarding ssh-rsa evil 6",
        "command=\"/bin/bash\",no-X11-forwarding ssh-rsa evil _",
        "command=\"/bin/bash\",no-X11-forwarding ssh-rsa evil ",
        "command=\"/bin/bash\",no-X11-forwarding ssh-rsa eVil evil",
        "command=\"/bin/bash\",no-X11-forwarding ssh-rsa EVIL evil",
        "command=\"/bin/bash\",no-X11-forwarding ssh-rsa ev_il evil",
        "command=\"/bin/bash\",no-X11-forwarding ssh-rsa ev il evil",
        "command=\"/bin/bash\",no-X11-forwarding ssh-rsa ev4il evil",
        "command=\"/bin/bash\",no-X11-forwarding ssh-rsa e evil",
        "command=\"/bin/bash\",no-X11-forwarding ssh-rsa   evil",
        "command=\"/bin/bash\",no-X11-forwarding ssh-rsa 6 evil",
        "command=\"/bin/bash\",no-X11-forwarding ssh-rsa _ evil",
        "command=\"/bin/bash\",no-X11-forwarding ssh-rsa  evil",
        "command=\"/bin/bash\",no-X11-forwarding ssh-rsa evil evil"
      ]
    },
    {
      "regex": "Est(r*)\\.",
      "exceptionStackTrace": null,
      "matches": ["Estrr.", "Est.", "Estr."]
    },
    {
      "regex": "<br\\/?>",
      "exceptionStackTrace": null,
      "matches": ["<br//>", "<br>", "<br/>"]
    },
    {
      "regex": "(?i)^ti\\\\w*\\\\s*(\\\\d+)?",
      "exceptionStackTrace": null,
      "matches": [
        "ti\\w\\s\\d\\d",
        "ti\\w\\s",
        "ti\\w\\s\\dd",
        "ti\\w\\s\\",
        "ti\\w\\ss\\d",
        "ti\\w\\\\d",
        "ti\\ww\\s\\d",
        "ti\\\\s\\d",
        "ti\\\\",
        "ti\\w\\s\\d"
      ]
    },
    {
      "regex": "Either.either: Requires both left and right functions",
      "exceptionStackTrace": null,
      "matches": [
        "EitherAeither: Requires both left and right functions",
        "Either:either: Requires both left and right functions",
        "Either0either: Requires both left and right functions",
        "Either either: Requires both left and right functions",
        "Eitheraeither: Requires both left and right functions"
      ]
    },
    {
      "regex": "\n        \\{              # The exact character \"{\"\n        (\\w+)           # The variable name (restricted to a-z, 0-9, _)\n        (?::([^}]+))?   # The optional :regex part\n        \\}              # The exact character \"}\"\n        ",
      "exceptionStackTrace": null,
      "matches": [
        "\n        {              # The exact character \"{\"\n        evil           # The variable name restricted to a-z, 0-9, _\n        :evil:evil   # The optional :regex part\n        }              # The exact character \"}\"\n        ",
        "\n        {              # The exact character \"{\"\n        evil           # The variable name restricted to a-z, 0-9, _\n        :}   # The optional :regex part\n        }              # The exact character \"}\"\n        ",
        "\n        {              # The exact character \"{\"\n        evil           # The variable name restricted to a-z, 0-9, _\n        :{   # The optional :regex part\n        }              # The exact character \"}\"\n        ",
        "\n        {              # The exact character \"{\"\n        evil           # The variable name restricted to a-z, 0-9, _\n        ::   # The optional :regex part\n        }              # The exact character \"}\"\n        ",
        "\n        {              # The exact character \"{\"\n        evil           # The variable name restricted to a-z, 0-9, _\n        :-   # The optional :regex part\n        }              # The exact character \"}\"\n        ",
        "\n        {              # The exact character \"{\"\n        evil           # The variable name restricted to a-z, 0-9, _\n        :,   # The optional :regex part\n        }              # The exact character \"}\"\n        ",
        "\n        {              # The exact character \"{\"\n        evil           # The variable name restricted to a-z, 0-9, _\n        :#   # The optional :regex part\n        }              # The exact character \"}\"\n        ",
        "\n        {              # The exact character \"{\"\n        evil           # The variable name restricted to a-z, 0-9, _\n        :\"   # The optional :regex part\n        }              # The exact character \"}\"\n        ",
        "\n        {              # The exact character \"{\"\n        evil           # The variable name restricted to a-z, 0-9, _\n        :eVil   # The optional :regex part\n        }              # The exact character \"}\"\n        ",
        "\n        {              # The exact character \"{\"\n        evil           # The variable name restricted to a-z, 0-9, _\n        :EVIL   # The optional :regex part\n        }              # The exact character \"}\"\n        ",
        "\n        {              # The exact character \"{\"\n        evil           # The variable name restricted to a-z, 0-9, _\n        :ev_il   # The optional :regex part\n        }              # The exact character \"}\"\n        ",
        "\n        {              # The exact character \"{\"\n        evil           # The variable name restricted to a-z, 0-9, _\n        :ev il   # The optional :regex part\n        }              # The exact character \"}\"\n        ",
        "\n        {              # The exact character \"{\"\n        evil           # The variable name restricted to a-z, 0-9, _\n        :ev4il   # The optional :regex part\n        }              # The exact character \"}\"\n        ",
        "\n        {              # The exact character \"{\"\n        evil           # The variable name restricted to a-z, 0-9, _\n        :e   # The optional :regex part\n        }              # The exact character \"}\"\n        ",
        "\n        {              # The exact character \"{\"\n        evil           # The variable name restricted to a-z, 0-9, _\n        :    # The optional :regex part\n        }              # The exact character \"}\"\n        ",
        "\n        {              # The exact character \"{\"\n        evil           # The variable name restricted to a-z, 0-9, _\n        :6   # The optional :regex part\n        }              # The exact character \"}\"\n        ",
        "\n        {              # The exact character \"{\"\n        evil           # The variable name restricted to a-z, 0-9, _\n        :_   # The optional :regex part\n        }              # The exact character \"}\"\n        ",
        "\n        {              # The exact character \"{\"\n        evil           # The variable name restricted to a-z, 0-9, _\n        :   # The optional :regex part\n        }              # The exact character \"}\"\n        ",
        "\n        {              # The exact character \"{\"\n        eVil           # The variable name restricted to a-z, 0-9, _\n        :evil   # The optional :regex part\n        }              # The exact character \"}\"\n        ",
        "\n        {              # The exact character \"{\"\n        EVIL           # The variable name restricted to a-z, 0-9, _\n        :evil   # The optional :regex part\n        }              # The exact character \"}\"\n        ",
        "\n        {              # The exact character \"{\"\n        ev_il           # The variable name restricted to a-z, 0-9, _\n        :evil   # The optional :regex part\n        }              # The exact character \"}\"\n        ",
        "\n        {              # The exact character \"{\"\n        ev il           # The variable name restricted to a-z, 0-9, _\n        :evil   # The optional :regex part\n        }              # The exact character \"}\"\n        ",
        "\n        {              # The exact character \"{\"\n        ev4il           # The variable name restricted to a-z, 0-9, _\n        :evil   # The optional :regex part\n        }              # The exact character \"}\"\n        ",
        "\n        {              # The exact character \"{\"\n        e           # The variable name restricted to a-z, 0-9, _\n        :evil   # The optional :regex part\n        }              # The exact character \"}\"\n        ",
        "\n        {              # The exact character \"{\"\n                    # The variable name restricted to a-z, 0-9, _\n        :evil   # The optional :regex part\n        }              # The exact character \"}\"\n        ",
        "\n        {              # The exact character \"{\"\n        6           # The variable name restricted to a-z, 0-9, _\n        :evil   # The optional :regex part\n        }              # The exact character \"}\"\n        ",
        "\n        {              # The exact character \"{\"\n        _           # The variable name restricted to a-z, 0-9, _\n        :evil   # The optional :regex part\n        }              # The exact character \"}\"\n        ",
        "\n        {              # The exact character \"{\"\n                   # The variable name restricted to a-z, 0-9, _\n        :evil   # The optional :regex part\n        }              # The exact character \"}\"\n        ",
        "\n        {              # The exact character \"{\"\n        evil           # The variable name restricted to a-z, 0-9, _\n           # The optional :regex part\n        }              # The exact character \"}\"\n        ",
        "\n        {              # The exact character \"{\"\n        evil           # The variable name restricted to a-z, 0-9, _\n        :evil   # The optional :regex part\n        }              # The exact character \"}\"\n        "
      ]
    },
    {
      "regex": "--run-command-statement\\b",
      "exceptionStackTrace": null,
      "matches": ["--run-command-statement"]
    },
    {
      "regex": "^[\\w$]$",
      "exceptionStackTrace": null,
      "matches": ["a", "_", "A", "0", "$"]
    },
    {
      "regex": "[^-+*/\\\\=%[\\]()^]",
      "exceptionStackTrace": null,
      "matches": [
        "^",
        "]",
        "\\",
        "[",
        "A",
        "=",
        "0",
        "/",
        "-",
        "+",
        "*",
        ")",
        "(",
        "%",
        " ",
        "a"
      ]
    },
    {
      "regex": "^\\s*(?:normal|italic|oblique|inherit)\\s+$",
      "exceptionStackTrace": null,
      "matches": [
        " normal  ",
        " normal",
        "  normal ",
        "inherit ",
        "oblique ",
        "italic ",
        "normal ",
        " inherit ",
        " oblique ",
        " italic ",
        " normal "
      ]
    },
    {
      "regex": "[^#\\^]",
      "exceptionStackTrace": null,
      "matches": ["^", "A", "0", "#", " ", "a"]
    },
    {
      "regex": "function([^\\(]*)\\(([^\\(\\)]*?)\\)[^\\{]*\\{([^]*)\\}",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unterminated character set"
      },
      "matches": []
    },
    {
      "regex": "ERRbadshare",
      "exceptionStackTrace": null,
      "matches": ["ERRbadshare"]
    },
    {
      "regex": "ongoing-request=\\\"(.*?)\\\"",
      "exceptionStackTrace": null,
      "matches": [
        "ongoing-request=\"=\"",
        "ongoing-request=\"-\"",
        "ongoing-request=\"\"\"",
        "ongoing-request=\"eVil\"",
        "ongoing-request=\"EVIL\"",
        "ongoing-request=\"ev_il\"",
        "ongoing-request=\"ev il\"",
        "ongoing-request=\"ev4il\"",
        "ongoing-request=\"e\"",
        "ongoing-request=\" \"",
        "ongoing-request=\"6\"",
        "ongoing-request=\"_\"",
        "ongoing-request=\"\"",
        "ongoing-request=\"evil\""
      ]
    },
    {
      "regex": "(?:^|[^0-9a-f])([0-9a-f]{64})(?:[^0-9a-f]|$)",
      "exceptionStackTrace": null,
      "matches": [
        "_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag",
        "Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag",
        "0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag",
        " aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaA",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag",
        "gaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag",
        "0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag",
        "gaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag"
      ]
    },
    { "regex": "<br />$", "exceptionStackTrace": null, "matches": ["<br />"] },
    { "regex": "(b)$", "exceptionStackTrace": null, "matches": ["b"] },
    {
      "regex": "^I send (POST|PUT) to '(.*)' with request entity$",
      "exceptionStackTrace": null,
      "matches": [
        "I send POST to ''' with request entity",
        "I send POST to 'eVil' with request entity",
        "I send POST to 'EVIL' with request entity",
        "I send POST to 'ev_il' with request entity",
        "I send POST to 'ev il' with request entity",
        "I send POST to 'ev4il' with request entity",
        "I send POST to 'e' with request entity",
        "I send POST to ' ' with request entity",
        "I send POST to '6' with request entity",
        "I send POST to '_' with request entity",
        "I send PUT to '' with request entity",
        "I send POST to '' with request entity",
        "I send PUT to 'evil' with request entity",
        "I send POST to 'evil' with request entity"
      ]
    },
    {
      "regex": "DBI connect\\(.+\\) failed:",
      "exceptionStackTrace": null,
      "matches": [
        "DBI connect(:) failed:",
        "DBI connect()) failed:",
        "DBI connect(() failed:",
        "DBI connect(eVil) failed:",
        "DBI connect(EVIL) failed:",
        "DBI connect(ev_il) failed:",
        "DBI connect(ev il) failed:",
        "DBI connect(ev4il) failed:",
        "DBI connect(e) failed:",
        "DBI connect( ) failed:",
        "DBI connect(6) failed:",
        "DBI connect(_) failed:",
        "DBI connect() failed:",
        "DBI connect(evil) failed:"
      ]
    },
    {
      "regex": "^the descriptor file is parsed as a cartridge$",
      "exceptionStackTrace": null,
      "matches": ["the descriptor file is parsed as a cartridge"]
    },
    {
      "regex": "\\.md$|\\.pug$",
      "exceptionStackTrace": null,
      "matches": [".pug", ".md"]
    },
    {
      "regex": "^\\#\\:\\s+Author\\:\\s+",
      "exceptionStackTrace": null,
      "matches": [
        "#: Author:  ",
        "#: Author:",
        "#:  Author: ",
        "#:Author: ",
        "#: Author: "
      ]
    },
    {
      "regex": "^(\\t*)(.*)$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    { "regex": "specdmm", "exceptionStackTrace": null, "matches": ["specdmm"] },
    {
      "regex": "'class' keyword not allowed at this location",
      "exceptionStackTrace": null,
      "matches": ["'class' keyword not allowed at this location"]
    },
    {
      "regex": "Torndado websocket_max_message_size set to 12345",
      "exceptionStackTrace": null,
      "matches": ["Torndado websocket_max_message_size set to 12345"]
    },
    {
      "regex": "^(\\w{2,})\\@",
      "exceptionStackTrace": null,
      "matches": ["a@", "_a@", "Aa@", "0a@", "aa@"]
    },
    {
      "regex": "(?:\\(|\\s*)(\\w+)=['\"][^'\"]*",
      "exceptionStackTrace": null,
      "matches": [
        "  evil=\"evil",
        "evil=\"evil",
        "(evil=\"=",
        "(evil=\"(",
        "(evil=\"'",
        "(evil=\"\"",
        "(evil=\"eVil",
        "(evil=\"EVIL",
        "(evil=\"ev_il",
        "(evil=\"ev il",
        "(evil=\"ev4il",
        "(evil=\"e",
        "(evil=\" ",
        "(evil=\"6",
        "(evil=\"_",
        "(evil='evil",
        "(eVil=\"evil",
        "(EVIL=\"evil",
        "(ev_il=\"evil",
        "(ev il=\"evil",
        "(ev4il=\"evil",
        "(e=\"evil",
        "( =\"evil",
        "(6=\"evil",
        "(_=\"evil",
        "(=\"evil",
        "evil=\"",
        "(evil=\"",
        " evil=\"evil",
        "(evil=\"evil"
      ]
    },
    {
      "regex": "^[\\*\\-]*",
      "exceptionStackTrace": null,
      "matches": ["--", "*", "", "-"]
    },
    {
      "regex": "Token not yet active",
      "exceptionStackTrace": null,
      "matches": ["Token not yet active"]
    },
    {
      "regex": "kernel:(\\s\\[\\d+\\.\\d+\\])?\\s(\\S*)\\sIN=(\\S*)\\sOUT=(\\S*)\\s(MAC=)?(\\S+)?\\s*SRC=(\\d+\\.\\d+\\.\\d+\\.\\d+|\\S+)\\sDST=(\\d+\\.\\d+\\.\\d+\\.\\d+|\\S+)\\sLEN=(\\d+).+TTL=(\\d+).+ID=(\\d+)\\s(DF)*\\s*PROTO=(\\S+)",
      "exceptionStackTrace": null,
      "matches": [
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=] DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=[ DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC== DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=: DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=. DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=eVil DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=EVIL DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=ev_il DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=ev il DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=ev4il DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=e DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=  DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=6 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=_ DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC= DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=] LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=[ LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST== LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=: LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=. LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=eVil LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=EVIL LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=ev_il LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=ev il LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=ev4il LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=e LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=  LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=6 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=_ LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST= LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=]",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=[",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO==",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=:",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=.",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=eVil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=EVIL",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=ev_il",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=ev il",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=ev4il",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=e",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO= ",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=6",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=_",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF  PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DFPROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DFDF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0  PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=00 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID= DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0]ID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0[ID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0=ID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0:ID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0.ID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0eVilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0EVILID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0ev_ilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0ev ilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0ev4ilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0eID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0 ID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=06ID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0_ID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0ID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=00evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0]TTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0[TTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0=TTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0:TTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0.TTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0eVilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0EVILTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0ev_ilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0ev ilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0ev4ilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0eTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0 TTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=06TTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0_TTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0TTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=00evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.00 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0. LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.00.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0..0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.00.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0..0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=00.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.00 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0. DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.00.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0..0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.00.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0..0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=00.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil  SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evilSRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evilevil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=] SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=[ SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC== SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=: SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=. SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=eVil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=EVIL SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=ev_il SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=ev il SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=ev4il SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=e SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=  SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=6 SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=_ SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC= SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=] MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=[ MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT== MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=: MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=. MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=eVil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=EVIL MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=ev_il MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=ev il MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=ev4il MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=e MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=  MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=6 MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=_ MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT= MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=] OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=[ OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN== OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=: OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=. OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=eVil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=EVIL OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=ev_il OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=ev il OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=ev4il OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=e OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=  OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=6 OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=_ OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN= OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] ] IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] [ IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] = IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] : IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] . IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] eVil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] EVIL IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] ev_il IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] ev il IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] ev4il IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] e IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0]   IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] 6 IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] _ IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0]  IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.00] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [00.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel:  IN= OUT= SRC=evil DST=0.0.0.0 LEN=0evilTTL=0evilID=0 PROTO=evil",
        "kernel:  IN= OUT= SRC=0.0.0.0 DST=evil LEN=0evilTTL=0evilID=0 PROTO=evil",
        "kernel:  IN= OUT= SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=evil DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=evil LEN=0evilTTL=0evilID=0 DF PROTO=evil",
        "kernel: [0.0] evil IN=evil OUT=evil MAC=evil SRC=0.0.0.0 DST=0.0.0.0 LEN=0evilTTL=0evilID=0 DF PROTO=evil"
      ]
    },
    {
      "regex": "^\\s*([\\u2022\\u00b7\\u00a7\\u25CF]|\\w+\\.)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 8226"
      },
      "matches": []
    },
    {
      "regex": "attachment;filename=\\\"([\\w\\-]+)\\\"",
      "exceptionStackTrace": null,
      "matches": [
        "attachment;filename=\"=\"",
        "attachment;filename=\";\"",
        "attachment;filename=\"-\"",
        "attachment;filename=\"\"\"",
        "attachment;filename=\"eVil\"",
        "attachment;filename=\"EVIL\"",
        "attachment;filename=\"ev_il\"",
        "attachment;filename=\"ev il\"",
        "attachment;filename=\"ev4il\"",
        "attachment;filename=\"e\"",
        "attachment;filename=\" \"",
        "attachment;filename=\"6\"",
        "attachment;filename=\"_\"",
        "attachment;filename=\"\"",
        "attachment;filename=\"evil\""
      ]
    },
    {
      "regex": "A policy named \"Foo\" is already attached",
      "exceptionStackTrace": null,
      "matches": ["A policy named \"Foo\" is already attached"]
    },
    {
      "regex": "<tt>([\\w]{3,3})<\\/tt>",
      "exceptionStackTrace": null,
      "matches": [
        "<tt>aaaa</tt>",
        "<tt>aa</tt>",
        "<tt>_aa</tt>",
        "<tt>Aaa</tt>",
        "<tt>0aa</tt>",
        "<tt>aaa</tt>"
      ]
    },
    {
      "regex": "^evenings?$",
      "exceptionStackTrace": null,
      "matches": ["eveningss", "evening", "evenings"]
    },
    {
      "regex": "^I wait (\\d+) seconds for element having (.+) \"(.*?)\" to display$",
      "exceptionStackTrace": null,
      "matches": [
        "I wait 0 seconds for element having evil \"\"\" to display",
        "I wait 0 seconds for element having evil \"eVil\" to display",
        "I wait 0 seconds for element having evil \"EVIL\" to display",
        "I wait 0 seconds for element having evil \"ev_il\" to display",
        "I wait 0 seconds for element having evil \"ev il\" to display",
        "I wait 0 seconds for element having evil \"ev4il\" to display",
        "I wait 0 seconds for element having evil \"e\" to display",
        "I wait 0 seconds for element having evil \" \" to display",
        "I wait 0 seconds for element having evil \"6\" to display",
        "I wait 0 seconds for element having evil \"_\" to display",
        "I wait 0 seconds for element having \" \"evil\" to display",
        "I wait 0 seconds for element having eVil \"evil\" to display",
        "I wait 0 seconds for element having EVIL \"evil\" to display",
        "I wait 0 seconds for element having ev_il \"evil\" to display",
        "I wait 0 seconds for element having ev il \"evil\" to display",
        "I wait 0 seconds for element having ev4il \"evil\" to display",
        "I wait 0 seconds for element having e \"evil\" to display",
        "I wait 0 seconds for element having   \"evil\" to display",
        "I wait 0 seconds for element having 6 \"evil\" to display",
        "I wait 0 seconds for element having _ \"evil\" to display",
        "I wait 0 seconds for element having  \"evil\" to display",
        "I wait 00 seconds for element having evil \"evil\" to display",
        "I wait  seconds for element having evil \"evil\" to display",
        "I wait 0 seconds for element having evil \"\" to display",
        "I wait 0 seconds for element having evil \"evil\" to display"
      ]
    },
    {
      "regex": "[,.?!]$",
      "exceptionStackTrace": null,
      "matches": ["?", ".", ",", "!"]
    },
    {
      "regex": "ANDROID_BINDINGS([^;`])+`(([^;])*)`;",
      "exceptionStackTrace": null,
      "matches": [
        "ANDROID_BINDINGSa`aa`;",
        "ANDROID_BINDINGSa```;",
        "ANDROID_BINDINGSa`_`;",
        "ANDROID_BINDINGSa`A`;",
        "ANDROID_BINDINGSa`;`;",
        "ANDROID_BINDINGSa`0`;",
        "ANDROID_BINDINGSa` `;",
        "ANDROID_BINDINGSaa`a`;",
        "ANDROID_BINDINGS`a`;",
        "ANDROID_BINDINGS``a`;",
        "ANDROID_BINDINGS_`a`;",
        "ANDROID_BINDINGSA`a`;",
        "ANDROID_BINDINGS;`a`;",
        "ANDROID_BINDINGS0`a`;",
        "ANDROID_BINDINGS `a`;",
        "ANDROID_BINDINGSa``;",
        "ANDROID_BINDINGSa`a`;"
      ]
    },
    {
      "regex": "(cats)\\1",
      "exceptionStackTrace": null,
      "matches": ["catscats"]
    },
    {
      "regex": "\"secret\":\"(\\w*)\"",
      "exceptionStackTrace": null,
      "matches": [
        "\"secret\":\"eVil\"",
        "\"secret\":\"EVIL\"",
        "\"secret\":\"ev_il\"",
        "\"secret\":\"ev il\"",
        "\"secret\":\"ev4il\"",
        "\"secret\":\"e\"",
        "\"secret\":\" \"",
        "\"secret\":\"6\"",
        "\"secret\":\"_\"",
        "\"secret\":\"\"",
        "\"secret\":\"evil\""
      ]
    },
    {
      "regex": "^I pause the pipeline$",
      "exceptionStackTrace": null,
      "matches": ["I pause the pipeline"]
    },
    {
      "regex": "^the(?: feature \"([^\"]*)\")? background has the following description:",
      "exceptionStackTrace": null,
      "matches": [
        "the feature \"evil\" feature \"evil\" background has the following description:",
        "the feature \":\" background has the following description:",
        "the feature \"\"\" background has the following description:",
        "the feature \"eVil\" background has the following description:",
        "the feature \"EVIL\" background has the following description:",
        "the feature \"ev_il\" background has the following description:",
        "the feature \"ev il\" background has the following description:",
        "the feature \"ev4il\" background has the following description:",
        "the feature \"e\" background has the following description:",
        "the feature \" \" background has the following description:",
        "the feature \"6\" background has the following description:",
        "the feature \"_\" background has the following description:",
        "the feature \"\" background has the following description:",
        "the background has the following description:",
        "the feature \"evil\" background has the following description:"
      ]
    },
    { "regex": "CKEDITOR", "exceptionStackTrace": null, "matches": ["CKEDITOR"] },
    {
      "regex": "^SC[a-z0-9]{32}$",
      "exceptionStackTrace": null,
      "matches": [
        "SC000000000000000000000000000000000",
        "SC0000000000000000000000000000000",
        "SCa0000000000000000000000000000000",
        "SC00000000000000000000000000000000"
      ]
    },
    {
      "regex": "^mer(coledi)?$",
      "exceptionStackTrace": null,
      "matches": ["mercoledicoledi", "mer", "mercoledi"]
    },
    {
      "regex": "^offset=([^=]+)$",
      "exceptionStackTrace": null,
      "matches": [
        "offset==",
        "offset=eVil",
        "offset=EVIL",
        "offset=ev_il",
        "offset=ev il",
        "offset=ev4il",
        "offset=e",
        "offset= ",
        "offset=6",
        "offset=_",
        "offset=",
        "offset=evil"
      ]
    },
    {
      "regex": "\\A'(.*)'::(?:cidr|inet|macaddr)\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": ";?mx_id=$mx_id;?",
      "exceptionStackTrace": null,
      "matches": [
        ";mx_id=mx_id;;",
        ";mx_id=mx_id",
        ";;mx_id=mx_id;",
        "mx_id=mx_id;",
        "mx_id=mx_id",
        ";mx_id=mx_id;"
      ]
    },
    {
      "regex": "\\smanifest\\s*=",
      "exceptionStackTrace": null,
      "matches": [" manifest  =", " manifest=", " manifest ="]
    },
    {
      "regex": "There is no report available for this selection",
      "exceptionStackTrace": null,
      "matches": ["There is no report available for this selection"]
    },
    {
      "regex": "\\s*(\\{)",
      "exceptionStackTrace": null,
      "matches": ["  {", "{", " {"]
    },
    { "regex": "-x64-", "exceptionStackTrace": null, "matches": ["-x64-"] },
    {
      "regex": "factory :car",
      "exceptionStackTrace": null,
      "matches": ["factory :car"]
    },
    {
      "regex": "--Output from (.+?)--$\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": ".*point",
      "exceptionStackTrace": null,
      "matches": [
        "eVilpoint",
        "EVILpoint",
        "ev_ilpoint",
        "ev ilpoint",
        "ev4ilpoint",
        "epoint",
        " point",
        "6point",
        "_point",
        "point",
        "evilpoint"
      ]
    },
    {
      "regex": "CPU(?: iPhone)? OS ([\\d\\.]+) like",
      "exceptionStackTrace": null,
      "matches": [
        "CPU iPhone OS .. like",
        "CPU iPhone OS  like",
        "CPU iPhone OS 0 like",
        "CPU iPhone iPhone OS . like",
        "CPU OS . like",
        "CPU iPhone OS . like"
      ]
    },
    {
      "regex": "^[-+]?\\d*(?:[\\.\\,]\\d+)?$",
      "exceptionStackTrace": null,
      "matches": [
        "+0,0,0",
        "+0",
        "+0,00",
        "+0,",
        "+0.0",
        "+00,0",
        "+,0",
        "++0,0",
        "0,0",
        "-0,0",
        "",
        "+0,0"
      ]
    },
    {
      "regex": " ^ \\s+  ",
      "exceptionStackTrace": null,
      "matches": ["      ", "    ", "     "]
    },
    {
      "regex": "^[4|5]",
      "exceptionStackTrace": null,
      "matches": ["|", "4", "0", "5"]
    },
    {
      "regex": "struct (\\S*?)( storage ref| storage pointer| memory| calldata)?$",
      "exceptionStackTrace": null,
      "matches": [
        "struct evil storage ref storage ref",
        "struct evil",
        "struct eVil storage ref",
        "struct EVIL storage ref",
        "struct ev_il storage ref",
        "struct ev il storage ref",
        "struct ev4il storage ref",
        "struct e storage ref",
        "struct   storage ref",
        "struct 6 storage ref",
        "struct _ storage ref",
        "struct  storage ref",
        "struct ",
        "struct evil calldata",
        "struct evil memory",
        "struct evil storage pointer",
        "struct evil storage ref"
      ]
    },
    {
      "regex": "\\(\\?[:=!]|\\)|\\{\\d+\\b,?\\d*\\}|[+*]\\?|[()$^+*?.]",
      "exceptionStackTrace": null,
      "matches": [
        "^",
        "?",
        "+",
        "*",
        "(",
        "$",
        "+?",
        "{0,00}",
        "{0,}",
        "{0,,0}",
        "{00}",
        "{00,0}",
        "{,0}",
        "(?=",
        "(?:",
        "{0}",
        ".",
        "*?",
        "{0,0}",
        ")",
        "(?!"
      ]
    },
    {
      "regex": "^[0-9]{1,3}(?!\\d|,000)",
      "exceptionStackTrace": null,
      "matches": ["0000", "000", "", "0"]
    },
    {
      "regex": "^(((?:[-\\+]?\\d+)?\\.\\d+)(\\S+)?) *",
      "exceptionStackTrace": null,
      "matches": [
        "+0.0evil  ",
        "+0.0evil",
        "+0.0evilevil ",
        "+0.0. ",
        "+0.0- ",
        "+0.0+ ",
        "+0.0eVil ",
        "+0.0EVIL ",
        "+0.0ev_il ",
        "+0.0ev il ",
        "+0.0ev4il ",
        "+0.0e ",
        "+0.0  ",
        "+0.06 ",
        "+0.0_ ",
        "+0.0 ",
        "+0.00evil ",
        "+0.evil ",
        "+0+0.0evil ",
        ".0evil ",
        "+00.0evil ",
        "+.0evil ",
        "++0.0evil ",
        "0.0evil ",
        "-0.0evil ",
        ".0",
        "+0.0evil "
      ]
    },
    {
      "regex": "var ACCESS_TOKEN *= *'(.+)'",
      "exceptionStackTrace": null,
      "matches": [
        "var ACCESS_TOKEN = '='",
        "var ACCESS_TOKEN = '''",
        "var ACCESS_TOKEN = 'eVil'",
        "var ACCESS_TOKEN = 'EVIL'",
        "var ACCESS_TOKEN = 'ev_il'",
        "var ACCESS_TOKEN = 'ev il'",
        "var ACCESS_TOKEN = 'ev4il'",
        "var ACCESS_TOKEN = 'e'",
        "var ACCESS_TOKEN = ' '",
        "var ACCESS_TOKEN = '6'",
        "var ACCESS_TOKEN = '_'",
        "var ACCESS_TOKEN = ''",
        "var ACCESS_TOKEN =  'evil'",
        "var ACCESS_TOKEN ='evil'",
        "var ACCESS_TOKEN  = 'evil'",
        "var ACCESS_TOKEN= 'evil'",
        "var ACCESS_TOKEN='evil'",
        "var ACCESS_TOKEN = 'evil'"
      ]
    },
    {
      "regex": "{([^{}]|",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "missing ), unterminated subpattern"
      },
      "matches": []
    },
    {
      "regex": "Warning: Task \"nonexistentTask\" not found.",
      "exceptionStackTrace": null,
      "matches": [
        "Warning: Task \"nonexistentTask\" not foundA",
        "Warning: Task \"nonexistentTask\" not found:",
        "Warning: Task \"nonexistentTask\" not found0",
        "Warning: Task \"nonexistentTask\" not found\"",
        "Warning: Task \"nonexistentTask\" not found ",
        "Warning: Task \"nonexistentTask\" not founda"
      ]
    },
    {
      "regex": ".+\\.java$",
      "exceptionStackTrace": null,
      "matches": [
        "..java",
        "eVil.java",
        "EVIL.java",
        "ev_il.java",
        "ev il.java",
        "ev4il.java",
        "e.java",
        " .java",
        "6.java",
        "_.java",
        ".java",
        "evil.java"
      ]
    },
    {
      "regex": "level of log file:.* must be one of: debug, info, notice, warn, error, fatal, any; received foo",
      "exceptionStackTrace": null,
      "matches": [
        "level of log file:; must be one of: debug, info, notice, warn, error, fatal, any; received foo",
        "level of log file:: must be one of: debug, info, notice, warn, error, fatal, any; received foo",
        "level of log file:, must be one of: debug, info, notice, warn, error, fatal, any; received foo",
        "level of log file:eVil must be one of: debug, info, notice, warn, error, fatal, any; received foo",
        "level of log file:EVIL must be one of: debug, info, notice, warn, error, fatal, any; received foo",
        "level of log file:ev_il must be one of: debug, info, notice, warn, error, fatal, any; received foo",
        "level of log file:ev il must be one of: debug, info, notice, warn, error, fatal, any; received foo",
        "level of log file:ev4il must be one of: debug, info, notice, warn, error, fatal, any; received foo",
        "level of log file:e must be one of: debug, info, notice, warn, error, fatal, any; received foo",
        "level of log file:  must be one of: debug, info, notice, warn, error, fatal, any; received foo",
        "level of log file:6 must be one of: debug, info, notice, warn, error, fatal, any; received foo",
        "level of log file:_ must be one of: debug, info, notice, warn, error, fatal, any; received foo",
        "level of log file: must be one of: debug, info, notice, warn, error, fatal, any; received foo",
        "level of log file:evil must be one of: debug, info, notice, warn, error, fatal, any; received foo"
      ]
    },
    {
      "regex": "^gff3?$",
      "exceptionStackTrace": null,
      "matches": ["gff33", "gff", "gff3"]
    },
    {
      "regex": "{{previousMonthButtonDateNumber}},",
      "exceptionStackTrace": null,
      "matches": ["{{previousMonthButtonDateNumber}},"]
    },
    {
      "regex": "^(\\d{2})(\\d{2})(\\d{2})Z$",
      "exceptionStackTrace": null,
      "matches": ["0000000Z", "00000Z", "000000Z"]
    },
    {
      "regex": "Transaction not approved",
      "exceptionStackTrace": null,
      "matches": ["Transaction not approved"]
    },
    {
      "regex": "^\\/[a-z]+\\/",
      "exceptionStackTrace": null,
      "matches": [
        "/eVil/",
        "/EVIL/",
        "/ev_il/",
        "/ev il/",
        "/ev4il/",
        "/e/",
        "/ /",
        "/6/",
        "/_/",
        "//",
        "/evil/"
      ]
    },
    {
      "regex": "<a[^>]*href=\"(?P<URL>[^\"]*)\"[^>]*>(?P<LinkText>[^<]*)</a>",
      "exceptionStackTrace": null,
      "matches": [
        "<aevilhref=\"evil\"evil>></a>",
        "<aevilhref=\"evil\"evil>=</a>",
        "<aevilhref=\"evil\"evil><</a>",
        "<aevilhref=\"evil\"evil>/</a>",
        "<aevilhref=\"evil\"evil>\"</a>",
        "<aevilhref=\"evil\"evil>eVil</a>",
        "<aevilhref=\"evil\"evil>EVIL</a>",
        "<aevilhref=\"evil\"evil>ev_il</a>",
        "<aevilhref=\"evil\"evil>ev il</a>",
        "<aevilhref=\"evil\"evil>ev4il</a>",
        "<aevilhref=\"evil\"evil>e</a>",
        "<aevilhref=\"evil\"evil> </a>",
        "<aevilhref=\"evil\"evil>6</a>",
        "<aevilhref=\"evil\"evil>_</a>",
        "<aevilhref=\"evil\"evil></a>",
        "<aevilhref=\"evil\">>evil</a>",
        "<aevilhref=\"evil\"=>evil</a>",
        "<aevilhref=\"evil\"<>evil</a>",
        "<aevilhref=\"evil\"/>evil</a>",
        "<aevilhref=\"evil\"\">evil</a>",
        "<aevilhref=\"evil\"eVil>evil</a>",
        "<aevilhref=\"evil\"EVIL>evil</a>",
        "<aevilhref=\"evil\"ev_il>evil</a>",
        "<aevilhref=\"evil\"ev il>evil</a>",
        "<aevilhref=\"evil\"ev4il>evil</a>",
        "<aevilhref=\"evil\"e>evil</a>",
        "<aevilhref=\"evil\" >evil</a>",
        "<aevilhref=\"evil\"6>evil</a>",
        "<aevilhref=\"evil\"_>evil</a>",
        "<aevilhref=\"evil\">evil</a>",
        "<aevilhref=\">\"evil>evil</a>",
        "<aevilhref=\"=\"evil>evil</a>",
        "<aevilhref=\"<\"evil>evil</a>",
        "<aevilhref=\"/\"evil>evil</a>",
        "<aevilhref=\"\"\"evil>evil</a>",
        "<aevilhref=\"eVil\"evil>evil</a>",
        "<aevilhref=\"EVIL\"evil>evil</a>",
        "<aevilhref=\"ev_il\"evil>evil</a>",
        "<aevilhref=\"ev il\"evil>evil</a>",
        "<aevilhref=\"ev4il\"evil>evil</a>",
        "<aevilhref=\"e\"evil>evil</a>",
        "<aevilhref=\" \"evil>evil</a>",
        "<aevilhref=\"6\"evil>evil</a>",
        "<aevilhref=\"_\"evil>evil</a>",
        "<aevilhref=\"\"evil>evil</a>",
        "<a>href=\"evil\"evil>evil</a>",
        "<a=href=\"evil\"evil>evil</a>",
        "<a<href=\"evil\"evil>evil</a>",
        "<a/href=\"evil\"evil>evil</a>",
        "<a\"href=\"evil\"evil>evil</a>",
        "<aeVilhref=\"evil\"evil>evil</a>",
        "<aEVILhref=\"evil\"evil>evil</a>",
        "<aev_ilhref=\"evil\"evil>evil</a>",
        "<aev ilhref=\"evil\"evil>evil</a>",
        "<aev4ilhref=\"evil\"evil>evil</a>",
        "<aehref=\"evil\"evil>evil</a>",
        "<a href=\"evil\"evil>evil</a>",
        "<a6href=\"evil\"evil>evil</a>",
        "<a_href=\"evil\"evil>evil</a>",
        "<ahref=\"evil\"evil>evil</a>",
        "<ahref=\"\"></a>",
        "<aevilhref=\"evil\"evil>evil</a>"
      ]
    },
    {
      "regex": "/\\*\\*(?!\\*)|\\{\\s*($|/\\*(?!.*?\\*/.*\\S))",
      "exceptionStackTrace": null,
      "matches": ["{  ", "{/*", "{", "{ /*", "{ ", "/**"]
    },
    { "regex": "x|X", "exceptionStackTrace": null, "matches": ["X", "x"] },
    {
      "regex": "@product_line = ProductLine\\.find\\(params\\[:id\\]\\)",
      "exceptionStackTrace": null,
      "matches": ["@product_line = ProductLine.find(params[:id])"]
    },
    {
      "regex": " ^\\s* <($obj_types) ",
      "exceptionStackTrace": null,
      "matches": ["    <obj_types ", "  <obj_types ", "   <obj_types "]
    },
    {
      "regex": "(id=[^> ]+) (size=[^> ]+)",
      "exceptionStackTrace": null,
      "matches": [
        "id=evil size=>",
        "id=evil size==",
        "id=evil size=eVil",
        "id=evil size=EVIL",
        "id=evil size=ev_il",
        "id=evil size=ev il",
        "id=evil size=ev4il",
        "id=evil size=e",
        "id=evil size= ",
        "id=evil size=6",
        "id=evil size=_",
        "id=evil size=",
        "id=> size=evil",
        "id== size=evil",
        "id=eVil size=evil",
        "id=EVIL size=evil",
        "id=ev_il size=evil",
        "id=ev il size=evil",
        "id=ev4il size=evil",
        "id=e size=evil",
        "id=  size=evil",
        "id=6 size=evil",
        "id=_ size=evil",
        "id= size=evil",
        "id=evil size=evil"
      ]
    },
    {
      "regex": "^Invalid response port",
      "exceptionStackTrace": null,
      "matches": ["Invalid response port"]
    },
    { "regex": "Z?$", "exceptionStackTrace": null, "matches": ["ZZ", "", "Z"] },
    {
      "regex": "xmlns:(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "xmlns::",
        "xmlns:eVil",
        "xmlns:EVIL",
        "xmlns:ev_il",
        "xmlns:ev il",
        "xmlns:ev4il",
        "xmlns:e",
        "xmlns: ",
        "xmlns:6",
        "xmlns:_",
        "xmlns:",
        "xmlns:evil"
      ]
    },
    { "regex": "(iPad)", "exceptionStackTrace": null, "matches": ["iPad"] },
    { "regex": "Zoidberg", "exceptionStackTrace": null, "matches": ["Zoidberg"] },
    {
      "regex": "\\A(.*)(?<!\\\\)\\\\",
      "exceptionStackTrace": null,
      "matches": [
        "\\\\",
        "eVil\\",
        "EVIL\\",
        "ev_il\\",
        "ev il\\",
        "ev4il\\",
        "e\\",
        " \\",
        "6\\",
        "_\\",
        "\\",
        "evil\\"
      ]
    },
    {
      "regex": "([^:]*:)\\/\\/([^:]*:?[^@]*@)?([^:\\/\\?]*):?([^\\/\\?]*)",
      "exceptionStackTrace": null,
      "matches": [
        "evil://evil:evil@evil:@",
        "evil://evil:evil@evil:?",
        "evil://evil:evil@evil::",
        "evil://evil:evil@evil:/",
        "evil://evil:evil@evil:eVil",
        "evil://evil:evil@evil:EVIL",
        "evil://evil:evil@evil:ev_il",
        "evil://evil:evil@evil:ev il",
        "evil://evil:evil@evil:ev4il",
        "evil://evil:evil@evil:e",
        "evil://evil:evil@evil: ",
        "evil://evil:evil@evil:6",
        "evil://evil:evil@evil:_",
        "evil://evil:evil@evil:",
        "evil://evil:evil@evil::evil",
        "evil://evil:evil@evilevil",
        "evil://evil:evil@@:evil",
        "evil://evil:evil@?:evil",
        "evil://evil:evil@::evil",
        "evil://evil:evil@/:evil",
        "evil://evil:evil@eVil:evil",
        "evil://evil:evil@EVIL:evil",
        "evil://evil:evil@ev_il:evil",
        "evil://evil:evil@ev il:evil",
        "evil://evil:evil@ev4il:evil",
        "evil://evil:evil@e:evil",
        "evil://evil:evil@ :evil",
        "evil://evil:evil@6:evil",
        "evil://evil:evil@_:evil",
        "evil://evil:evil@:evil",
        "evil://evil:evil@evil:evil@evil:evil",
        "evil://evil:evil",
        "evil://evil:@@evil:evil",
        "evil://evil:?@evil:evil",
        "evil://evil::@evil:evil",
        "evil://evil:/@evil:evil",
        "evil://evil:eVil@evil:evil",
        "evil://evil:EVIL@evil:evil",
        "evil://evil:ev_il@evil:evil",
        "evil://evil:ev il@evil:evil",
        "evil://evil:ev4il@evil:evil",
        "evil://evil:e@evil:evil",
        "evil://evil: @evil:evil",
        "evil://evil:6@evil:evil",
        "evil://evil:_@evil:evil",
        "evil://evil:@evil:evil",
        "evil://evil::evil@evil:evil",
        "evil://evilevil@evil:evil",
        "evil://@:evil@evil:evil",
        "evil://?:evil@evil:evil",
        "evil://::evil@evil:evil",
        "evil:///:evil@evil:evil",
        "evil://eVil:evil@evil:evil",
        "evil://EVIL:evil@evil:evil",
        "evil://ev_il:evil@evil:evil",
        "evil://ev il:evil@evil:evil",
        "evil://ev4il:evil@evil:evil",
        "evil://e:evil@evil:evil",
        "evil:// :evil@evil:evil",
        "evil://6:evil@evil:evil",
        "evil://_:evil@evil:evil",
        "evil://:evil@evil:evil",
        "@://evil:evil@evil:evil",
        "?://evil:evil@evil:evil",
        ":://evil:evil@evil:evil",
        "/://evil:evil@evil:evil",
        "eVil://evil:evil@evil:evil",
        "EVIL://evil:evil@evil:evil",
        "ev_il://evil:evil@evil:evil",
        "ev il://evil:evil@evil:evil",
        "ev4il://evil:evil@evil:evil",
        "e://evil:evil@evil:evil",
        " ://evil:evil@evil:evil",
        "6://evil:evil@evil:evil",
        "_://evil:evil@evil:evil",
        "://evil:evil@evil:evil",
        "://",
        "evil://evil:evil@evil:evil"
      ]
    },
    {
      "regex": "jdk1\\.[7-8]\\.0",
      "exceptionStackTrace": null,
      "matches": ["jdk1.0.0", "jdk1.7.0"]
    },
    {
      "regex": "<\\/body><\\/html>",
      "exceptionStackTrace": null,
      "matches": ["</body></html>"]
    },
    {
      "regex": "^\u65e5\u4ed8\u3068\u3057\u3066\"([^\\\"]*)\"\u3092\u9078\u629e\u3059\u308b$",
      "exceptionStackTrace": null,
      "matches": [
        "\u65e5\u4ed8\u3068\u3057\u3066\"\"\"\u3092\u9078\u629e\u3059\u308b",
        "\u65e5\u4ed8\u3068\u3057\u3066\"eVil\"\u3092\u9078\u629e\u3059\u308b",
        "\u65e5\u4ed8\u3068\u3057\u3066\"EVIL\"\u3092\u9078\u629e\u3059\u308b",
        "\u65e5\u4ed8\u3068\u3057\u3066\"ev_il\"\u3092\u9078\u629e\u3059\u308b",
        "\u65e5\u4ed8\u3068\u3057\u3066\"ev il\"\u3092\u9078\u629e\u3059\u308b",
        "\u65e5\u4ed8\u3068\u3057\u3066\"ev4il\"\u3092\u9078\u629e\u3059\u308b",
        "\u65e5\u4ed8\u3068\u3057\u3066\"e\"\u3092\u9078\u629e\u3059\u308b",
        "\u65e5\u4ed8\u3068\u3057\u3066\" \"\u3092\u9078\u629e\u3059\u308b",
        "\u65e5\u4ed8\u3068\u3057\u3066\"6\"\u3092\u9078\u629e\u3059\u308b",
        "\u65e5\u4ed8\u3068\u3057\u3066\"_\"\u3092\u9078\u629e\u3059\u308b",
        "\u65e5\u4ed8\u3068\u3057\u3066\"\"\u3092\u9078\u629e\u3059\u308b",
        "\u65e5\u4ed8\u3068\u3057\u3066\"evil\"\u3092\u9078\u629e\u3059\u308b"
      ]
    },
    {
      "regex": "^test(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "testeVil",
        "testEVIL",
        "testev_il",
        "testev il",
        "testev4il",
        "teste",
        "test ",
        "test6",
        "test_",
        "test",
        "testevil"
      ]
    },
    { "regex": "regex:", "exceptionStackTrace": null, "matches": ["regex:"] },
    {
      "regex": ".*_count",
      "exceptionStackTrace": null,
      "matches": [
        "eVil_count",
        "EVIL_count",
        "ev_il_count",
        "ev il_count",
        "ev4il_count",
        "e_count",
        " _count",
        "6_count",
        "__count",
        "_count",
        "evil_count"
      ]
    },
    { "regex": "moo", "exceptionStackTrace": null, "matches": ["moo"] },
    { "regex": "eta", "exceptionStackTrace": null, "matches": ["eta"] },
    {
      "regex": "can only be set once",
      "exceptionStackTrace": null,
      "matches": ["can only be set once"]
    },
    {
      "regex": "\\(constructor\\)",
      "exceptionStackTrace": null,
      "matches": ["(constructor)"]
    },
    {
      "regex": "@?[_a-z]\\w*",
      "exceptionStackTrace": null,
      "matches": [
        "@_eVil",
        "@_EVIL",
        "@_ev_il",
        "@_ev il",
        "@_ev4il",
        "@_e",
        "@_ ",
        "@_6",
        "@__",
        "@_",
        "@aevil",
        "@@_evil",
        "_evil",
        "_",
        "@_evil"
      ]
    },
    {
      "regex": "^Unknown assertion 'to foo'",
      "exceptionStackTrace": null,
      "matches": ["Unknown assertion 'to foo'"]
    },
    {
      "regex": "underscore.*?\\.js\"><\\/script>",
      "exceptionStackTrace": null,
      "matches": [
        "underscore>.js\"></script>",
        "underscore<.js\"></script>",
        "underscore/.js\"></script>",
        "underscore..js\"></script>",
        "underscore\".js\"></script>",
        "underscoreeVil.js\"></script>",
        "underscoreEVIL.js\"></script>",
        "underscoreev_il.js\"></script>",
        "underscoreev il.js\"></script>",
        "underscoreev4il.js\"></script>",
        "underscoree.js\"></script>",
        "underscore .js\"></script>",
        "underscore6.js\"></script>",
        "underscore_.js\"></script>",
        "underscore.js\"></script>",
        "underscoreevil.js\"></script>"
      ]
    },
    {
      "regex": "\\[url(=((https?|ftp|gopher|news|telnet|rtsp|mms|callto|bctp|thunder|qqdl|synacast){1}:\\/\\/|www\\.|mailto:)?([^\r\n\\[\"']+?))?\\](.+?)\\[\\/url\\]",
      "exceptionStackTrace": null,
      "matches": [
        "[url=https://evil]][/url]",
        "[url=https://evil][[/url]",
        "[url=https://evil]=[/url]",
        "[url=https://evil]:[/url]",
        "[url=https://evil]/[/url]",
        "[url=https://evil].[/url]",
        "[url=https://evil]'[/url]",
        "[url=https://evil]\"[/url]",
        "[url=https://evil]eVil[/url]",
        "[url=https://evil]EVIL[/url]",
        "[url=https://evil]ev_il[/url]",
        "[url=https://evil]ev il[/url]",
        "[url=https://evil]ev4il[/url]",
        "[url=https://evil]e[/url]",
        "[url=https://evil] [/url]",
        "[url=https://evil]6[/url]",
        "[url=https://evil]_[/url]",
        "[url=https://evil][/url]",
        "[url=https://evil=https://evil]evil[/url]",
        "[url=https://]]evil[/url]",
        "[url=https://[]evil[/url]",
        "[url=https://=]evil[/url]",
        "[url=https://:]evil[/url]",
        "[url=https:///]evil[/url]",
        "[url=https://.]evil[/url]",
        "[url=https://']evil[/url]",
        "[url=https://\"]evil[/url]",
        "[url=https://eVil]evil[/url]",
        "[url=https://EVIL]evil[/url]",
        "[url=https://ev_il]evil[/url]",
        "[url=https://ev il]evil[/url]",
        "[url=https://ev4il]evil[/url]",
        "[url=https://e]evil[/url]",
        "[url=https:// ]evil[/url]",
        "[url=https://6]evil[/url]",
        "[url=https://_]evil[/url]",
        "[url=https://]evil[/url]",
        "[url=https://https://evil]evil[/url]",
        "[url=evil]evil[/url]",
        "[url=httpshttps://evil]evil[/url]",
        "[url=://evil]evil[/url]",
        "[url=httpss://evil]evil[/url]",
        "[url=http://evil]evil[/url]",
        "[url]evil[/url]",
        "[url=mailto:evil]evil[/url]",
        "[url=www.evil]evil[/url]",
        "[url=synacast://evil]evil[/url]",
        "[url=qqdl://evil]evil[/url]",
        "[url=thunder://evil]evil[/url]",
        "[url=bctp://evil]evil[/url]",
        "[url=callto://evil]evil[/url]",
        "[url=mms://evil]evil[/url]",
        "[url=rtsp://evil]evil[/url]",
        "[url=telnet://evil]evil[/url]",
        "[url=news://evil]evil[/url]",
        "[url=gopher://evil]evil[/url]",
        "[url=ftp://evil]evil[/url]",
        "[url=https://evil]evil[/url]"
      ]
    },
    {
      "regex": "\\bcopy:([a-zA-Z0-9]+)\\b",
      "exceptionStackTrace": null,
      "matches": [
        "copy:eVil",
        "copy:EVIL",
        "copy:ev_il",
        "copy:ev il",
        "copy:ev4il",
        "copy:e",
        "copy: ",
        "copy:6",
        "copy:_",
        "copy:",
        "copy:evil"
      ]
    },
    {
      "regex": "\\{\\{stemmerFunction\\}\\}",
      "exceptionStackTrace": null,
      "matches": ["{{stemmerFunction}}"]
    },
    {
      "regex": ":((?:[\\w\\u00c0-\\uFFFF_-]|\\\\.)+)(?:\\((['\"]*)((?:\\([^\\)]+\\)|[^\\2\\(\\)]*)+)\\2\\))?",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 192"
      },
      "matches": []
    },
    {
      "regex": "(</)(plugin)\\s*(>)(?!<\\s*/\\2\\s*>)",
      "exceptionStackTrace": null,
      "matches": ["</plugin  >", "</plugin>", "</plugin >"]
    },
    {
      "regex": "^\\s+Database",
      "exceptionStackTrace": null,
      "matches": ["  Database", "Database", " Database"]
    },
    { "regex": "^(?:over\\b)", "exceptionStackTrace": null, "matches": ["over"] },
    {
      "regex": "\\@.*$dom",
      "exceptionStackTrace": null,
      "matches": [
        "@@dom",
        "@eVildom",
        "@EVILdom",
        "@ev_ildom",
        "@ev ildom",
        "@ev4ildom",
        "@edom",
        "@ dom",
        "@6dom",
        "@_dom",
        "@dom",
        "@evildom"
      ]
    },
    {
      "regex": "\\b(before_filter|skip_before_filter|skip_after_filter|after_filter|around_filter|filter|filter_parameter_logging|layout|require_dependency|render|render_action|render_text|render_file|render_template|render_nothing|render_component|render_without_layout|rescue_from|url_for|redirect_to|redirect_to_path|redirect_to_url|respond_to|helper|helper_method|model|service|observer|serialize|scaffold|verify|hide_action)\\b",
      "exceptionStackTrace": null,
      "matches": [
        "hide_action",
        "verify",
        "scaffold",
        "serialize",
        "observer",
        "service",
        "model",
        "helper_method",
        "helper",
        "respond_to",
        "redirect_to_url",
        "redirect_to_path",
        "redirect_to",
        "url_for",
        "rescue_from",
        "render_without_layout",
        "render_component",
        "render_nothing",
        "render_template",
        "render_file",
        "render_text",
        "render_action",
        "render",
        "require_dependency",
        "layout",
        "filter_parameter_logging",
        "filter",
        "around_filter",
        "after_filter",
        "skip_after_filter",
        "skip_before_filter",
        "before_filter"
      ]
    },
    {
      "regex": "^VW[0-9]+$",
      "exceptionStackTrace": null,
      "matches": ["VW00", "VW", "VW0"]
    },
    {
      "regex": "Each LinearRing of a Polygon must have 4 or more Positions",
      "exceptionStackTrace": null,
      "matches": ["Each LinearRing of a Polygon must have 4 or more Positions"]
    },
    {
      "regex": "/\\* INSERT CONSTANTS HERE \\*/",
      "exceptionStackTrace": null,
      "matches": ["/* INSERT CONSTANTS HERE */"]
    },
    {
      "regex": "Try a different username\\/password?",
      "exceptionStackTrace": null,
      "matches": [
        "Try a different username/passwordd",
        "Try a different username/passwor",
        "Try a different username/password"
      ]
    },
    {
      "regex": ".*.[mM][pP]3$",
      "exceptionStackTrace": null,
      "matches": [
        "evilaMp3",
        "evilaMa3",
        "evilaMA3",
        "evilamP3",
        "evilaaP3",
        "evilaAP3",
        "evil_MP3",
        "evilAMP3",
        "evil0MP3",
        "evil MP3",
        "eVilaMP3",
        "EVILaMP3",
        "ev_ilaMP3",
        "ev ilaMP3",
        "ev4ilaMP3",
        "eaMP3",
        " aMP3",
        "6aMP3",
        "_aMP3",
        "aMP3",
        "evilaMP3"
      ]
    },
    {
      "regex": "^\\s+------\\s+",
      "exceptionStackTrace": null,
      "matches": [" ------  ", " ------", "  ------ ", "------ ", " ------ "]
    },
    { "regex": "(?=\\[\\d+\\])", "exceptionStackTrace": null, "matches": [""] },
    {
      "regex": "\\b \\Q$Waft::JS::Name\\E \\. ",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\Q"
      },
      "matches": []
    },
    {
      "regex": "MSIE ([0-9.]+);",
      "exceptionStackTrace": null,
      "matches": ["MSIE ..;", "MSIE ;", "MSIE 0;", "MSIE .;"]
    },
    {
      "regex": "\\S\\s*\\n\\s*$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^CPANPLUS::inc",
      "exceptionStackTrace": null,
      "matches": ["CPANPLUS::inc"]
    },
    {
      "regex": "\\[charsets]",
      "exceptionStackTrace": null,
      "matches": ["[charsets]"]
    },
    {
      "regex": "^\"([^\"]*)\" should exist at \"([^\"]*)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "\"evil\" should exist at \"\"\"",
        "\"evil\" should exist at \"eVil\"",
        "\"evil\" should exist at \"EVIL\"",
        "\"evil\" should exist at \"ev_il\"",
        "\"evil\" should exist at \"ev il\"",
        "\"evil\" should exist at \"ev4il\"",
        "\"evil\" should exist at \"e\"",
        "\"evil\" should exist at \" \"",
        "\"evil\" should exist at \"6\"",
        "\"evil\" should exist at \"_\"",
        "\"evil\" should exist at \"\"",
        "\"\"\" should exist at \"evil\"",
        "\"eVil\" should exist at \"evil\"",
        "\"EVIL\" should exist at \"evil\"",
        "\"ev_il\" should exist at \"evil\"",
        "\"ev il\" should exist at \"evil\"",
        "\"ev4il\" should exist at \"evil\"",
        "\"e\" should exist at \"evil\"",
        "\" \" should exist at \"evil\"",
        "\"6\" should exist at \"evil\"",
        "\"_\" should exist at \"evil\"",
        "\"\" should exist at \"evil\"",
        "\"\" should exist at \"\"",
        "\"evil\" should exist at \"evil\""
      ]
    },
    {
      "regex": "__f\\[(\\d+)\\]",
      "exceptionStackTrace": null,
      "matches": ["__f[00]", "__f[]", "__f[0]"]
    },
    {
      "regex": "ress RETURN to get started",
      "exceptionStackTrace": null,
      "matches": ["ress RETURN to get started"]
    },
    {
      "regex": "^_TEST_INVALID_CONSTANT$",
      "exceptionStackTrace": null,
      "matches": ["_TEST_INVALID_CONSTANT"]
    },
    {
      "regex": "(Brought to you by BibleGateway.*$)",
      "exceptionStackTrace": null,
      "matches": [
        "Brought to you by BibleGatewayeVil",
        "Brought to you by BibleGatewayEVIL",
        "Brought to you by BibleGatewayev_il",
        "Brought to you by BibleGatewayev il",
        "Brought to you by BibleGatewayev4il",
        "Brought to you by BibleGatewaye",
        "Brought to you by BibleGateway ",
        "Brought to you by BibleGateway6",
        "Brought to you by BibleGateway_",
        "Brought to you by BibleGateway",
        "Brought to you by BibleGatewayevil"
      ]
    },
    {
      "regex": "--?c(olou?r)?",
      "exceptionStackTrace": null,
      "matches": [
        "--colourolour",
        "--c",
        "--colouur",
        "--color",
        "---colour",
        "-colour",
        "-c",
        "--colour"
      ]
    },
    {
      "regex": "Servo ([0-9\\.]+-[a-f0-9]+)?(-dirty)?$",
      "exceptionStackTrace": null,
      "matches": [
        "Servo .-0-dirty-dirty",
        "Servo .-0",
        "Servo .-0.-0-dirty",
        "Servo -dirty",
        "Servo .-00-dirty",
        "Servo .--dirty",
        "Servo .-g-dirty",
        "Servo .-a-dirty",
        "Servo ..-0-dirty",
        "Servo -0-dirty",
        "Servo 0-0-dirty",
        "Servo ",
        "Servo .-0-dirty"
      ]
    },
    {
      "regex": ";(\\d+;?[1-9]?)$",
      "exceptionStackTrace": null,
      "matches": [
        ";0;11",
        ";0;",
        ";0;0",
        ";0;;1",
        ";01",
        ";00;1",
        ";;1",
        ";0",
        ";0;1"
      ]
    },
    {
      "regex": "$patremov",
      "exceptionStackTrace": null,
      "matches": ["patremov"]
    },
    { "regex": "\\bRe:", "exceptionStackTrace": null, "matches": ["Re:"] },
    {
      "regex": "^(\\S+) (\\S+) (\\w+) (\\d+)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil evil evil 00",
        "evil evil evil ",
        "evil evil eVil 0",
        "evil evil EVIL 0",
        "evil evil ev_il 0",
        "evil evil ev il 0",
        "evil evil ev4il 0",
        "evil evil e 0",
        "evil evil   0",
        "evil evil 6 0",
        "evil evil _ 0",
        "evil evil  0",
        "evil eVil evil 0",
        "evil EVIL evil 0",
        "evil ev_il evil 0",
        "evil ev il evil 0",
        "evil ev4il evil 0",
        "evil e evil 0",
        "evil   evil 0",
        "evil 6 evil 0",
        "evil _ evil 0",
        "evil  evil 0",
        "eVil evil evil 0",
        "EVIL evil evil 0",
        "ev_il evil evil 0",
        "ev il evil evil 0",
        "ev4il evil evil 0",
        "e evil evil 0",
        "  evil evil 0",
        "6 evil evil 0",
        "_ evil evil 0",
        " evil evil 0",
        "evil evil evil 0"
      ]
    },
    {
      "regex": "((((__))[\\s\\w :.\\?']*((__))))",
      "exceptionStackTrace": null,
      "matches": [
        "__?__",
        "__:__",
        "__.__",
        "__'__",
        "__eVil__",
        "__EVIL__",
        "__ev_il__",
        "__ev il__",
        "__ev4il__",
        "__e__",
        "__ __",
        "__6__",
        "_____",
        "____",
        "__evil__"
      ]
    },
    {
      "regex": "^\\S+ \\S+ by \\S+ with local-e?smtp ",
      "exceptionStackTrace": null,
      "matches": [
        "evil evil by evil with local-eesmtp ",
        "evil evil by - with local-esmtp ",
        "evil evil by eVil with local-esmtp ",
        "evil evil by EVIL with local-esmtp ",
        "evil evil by ev_il with local-esmtp ",
        "evil evil by ev il with local-esmtp ",
        "evil evil by ev4il with local-esmtp ",
        "evil evil by e with local-esmtp ",
        "evil evil by   with local-esmtp ",
        "evil evil by 6 with local-esmtp ",
        "evil evil by _ with local-esmtp ",
        "evil evil by  with local-esmtp ",
        "evil - by evil with local-esmtp ",
        "evil eVil by evil with local-esmtp ",
        "evil EVIL by evil with local-esmtp ",
        "evil ev_il by evil with local-esmtp ",
        "evil ev il by evil with local-esmtp ",
        "evil ev4il by evil with local-esmtp ",
        "evil e by evil with local-esmtp ",
        "evil   by evil with local-esmtp ",
        "evil 6 by evil with local-esmtp ",
        "evil _ by evil with local-esmtp ",
        "evil  by evil with local-esmtp ",
        "- evil by evil with local-esmtp ",
        "eVil evil by evil with local-esmtp ",
        "EVIL evil by evil with local-esmtp ",
        "ev_il evil by evil with local-esmtp ",
        "ev il evil by evil with local-esmtp ",
        "ev4il evil by evil with local-esmtp ",
        "e evil by evil with local-esmtp ",
        "  evil by evil with local-esmtp ",
        "6 evil by evil with local-esmtp ",
        "_ evil by evil with local-esmtp ",
        " evil by evil with local-esmtp ",
        "evil evil by evil with local-smtp ",
        "evil evil by evil with local-esmtp "
      ]
    },
    {
      "regex": "=> Imported CloudFormation template",
      "exceptionStackTrace": null,
      "matches": ["=> Imported CloudFormation template"]
    },
    {
      "regex": "\\A\\s*\\$LOAD_PATH",
      "exceptionStackTrace": null,
      "matches": ["  $LOAD_PATH", "$LOAD_PATH", " $LOAD_PATH"]
    },
    {
      "regex": "--[A-Za-z0-9_\\-]+",
      "exceptionStackTrace": null,
      "matches": [
        "---",
        "--eVil",
        "--EVIL",
        "--ev_il",
        "--ev il",
        "--ev4il",
        "--e",
        "-- ",
        "--6",
        "--_",
        "--",
        "--evil"
      ]
    },
    {
      "regex": "export type",
      "exceptionStackTrace": null,
      "matches": ["export type"]
    },
    {
      "regex": "^Generated, 1 => 10, 2 => 20, 3 => 30$",
      "exceptionStackTrace": null,
      "matches": ["Generated, 1 => 10, 2 => 20, 3 => 30"]
    },
    {
      "regex": "Error: MyLog",
      "exceptionStackTrace": null,
      "matches": ["Error: MyLog"]
    },
    {
      "regex": "[A-Za-z0-9!\\/#%&\"=\\-'<>\\?\\(\\)\\*\\+\\,\\.;:]",
      "exceptionStackTrace": null,
      "matches": [
        "a",
        "A",
        "?",
        ">",
        "=",
        "<",
        ";",
        "0",
        "/",
        ".",
        "-",
        ",",
        "+",
        "*",
        ")",
        "(",
        "'",
        "&",
        "%",
        "#",
        "\"",
        "!",
        ":"
      ]
    },
    {
      "regex": "^the user can create a ci\\-disabled suite named \"(.*?)\" on branch \"(.*?)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "the user can create a ci-disabled suite named \"evil\" on branch \"-\"",
        "the user can create a ci-disabled suite named \"evil\" on branch \"\"\"",
        "the user can create a ci-disabled suite named \"evil\" on branch \"eVil\"",
        "the user can create a ci-disabled suite named \"evil\" on branch \"EVIL\"",
        "the user can create a ci-disabled suite named \"evil\" on branch \"ev_il\"",
        "the user can create a ci-disabled suite named \"evil\" on branch \"ev il\"",
        "the user can create a ci-disabled suite named \"evil\" on branch \"ev4il\"",
        "the user can create a ci-disabled suite named \"evil\" on branch \"e\"",
        "the user can create a ci-disabled suite named \"evil\" on branch \" \"",
        "the user can create a ci-disabled suite named \"evil\" on branch \"6\"",
        "the user can create a ci-disabled suite named \"evil\" on branch \"_\"",
        "the user can create a ci-disabled suite named \"evil\" on branch \"\"",
        "the user can create a ci-disabled suite named \"-\" on branch \"evil\"",
        "the user can create a ci-disabled suite named \"\"\" on branch \"evil\"",
        "the user can create a ci-disabled suite named \"eVil\" on branch \"evil\"",
        "the user can create a ci-disabled suite named \"EVIL\" on branch \"evil\"",
        "the user can create a ci-disabled suite named \"ev_il\" on branch \"evil\"",
        "the user can create a ci-disabled suite named \"ev il\" on branch \"evil\"",
        "the user can create a ci-disabled suite named \"ev4il\" on branch \"evil\"",
        "the user can create a ci-disabled suite named \"e\" on branch \"evil\"",
        "the user can create a ci-disabled suite named \" \" on branch \"evil\"",
        "the user can create a ci-disabled suite named \"6\" on branch \"evil\"",
        "the user can create a ci-disabled suite named \"_\" on branch \"evil\"",
        "the user can create a ci-disabled suite named \"\" on branch \"evil\"",
        "the user can create a ci-disabled suite named \"\" on branch \"\"",
        "the user can create a ci-disabled suite named \"evil\" on branch \"evil\""
      ]
    },
    {
      "regex": "^HERE_IS_.*?EXIT$",
      "exceptionStackTrace": null,
      "matches": [
        "HERE_IS_eVilEXIT",
        "HERE_IS_EVILEXIT",
        "HERE_IS_ev_ilEXIT",
        "HERE_IS_ev ilEXIT",
        "HERE_IS_ev4ilEXIT",
        "HERE_IS_eEXIT",
        "HERE_IS_ EXIT",
        "HERE_IS_6EXIT",
        "HERE_IS__EXIT",
        "HERE_IS_EXIT",
        "HERE_IS_evilEXIT"
      ]
    },
    {
      "regex": "^I start the \"([^\"]*)\" survey$",
      "exceptionStackTrace": null,
      "matches": [
        "I start the \"\"\" survey",
        "I start the \"eVil\" survey",
        "I start the \"EVIL\" survey",
        "I start the \"ev_il\" survey",
        "I start the \"ev il\" survey",
        "I start the \"ev4il\" survey",
        "I start the \"e\" survey",
        "I start the \" \" survey",
        "I start the \"6\" survey",
        "I start the \"_\" survey",
        "I start the \"\" survey",
        "I start the \"evil\" survey"
      ]
    },
    {
      "regex": "[+\\uFF0B\\\\p{Nd}]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 65291"
      },
      "matches": []
    },
    {
      "regex": "{username}",
      "exceptionStackTrace": null,
      "matches": ["{username}"]
    },
    {
      "regex": "\\$\\{[^()]*\\}",
      "exceptionStackTrace": null,
      "matches": [
        "${}}",
        "${{}",
        "${)}",
        "${(}",
        "${$}",
        "${eVil}",
        "${EVIL}",
        "${ev_il}",
        "${ev il}",
        "${ev4il}",
        "${e}",
        "${ }",
        "${6}",
        "${_}",
        "${}",
        "${evil}"
      ]
    },
    {
      "regex": "a.rb:1.*b.rb:2",
      "exceptionStackTrace": null,
      "matches": [
        "aarb:1evilbArb:2",
        "aarb:1evilb:rb:2",
        "aarb:1evilb0rb:2",
        "aarb:1evilb rb:2",
        "aarb:1:barb:2",
        "aarb:1eVilbarb:2",
        "aarb:1EVILbarb:2",
        "aarb:1ev_ilbarb:2",
        "aarb:1ev ilbarb:2",
        "aarb:1ev4ilbarb:2",
        "aarb:1ebarb:2",
        "aarb:1 barb:2",
        "aarb:16barb:2",
        "aarb:1_barb:2",
        "aArb:1evilbarb:2",
        "a:rb:1evilbarb:2",
        "a0rb:1evilbarb:2",
        "a rb:1evilbarb:2",
        "aarb:1barb:2",
        "aarb:1evilbarb:2"
      ]
    },
    {
      "regex": "\\\\(\\d{3}|.)",
      "exceptionStackTrace": null,
      "matches": ["\\\\", "\\A", "\\0", "\\ ", "\\0000", "\\00", "\\a", "\\000"]
    },
    {
      "regex": "\\s+for\\s+([A-Z\\d]+|[A-Z\\d&]{2,})\\s+([A-Z\\d&]+)",
      "exceptionStackTrace": null,
      "matches": [
        " for & evil",
        " for A& evil",
        " for 0& evil",
        " for evil &",
        " for evil eVil",
        " for evil EVIL",
        " for evil ev_il",
        " for evil ev il",
        " for evil ev4il",
        " for evil e",
        " for evil  ",
        " for evil 6",
        " for evil _",
        " for evil ",
        " for evil  evil",
        " for evilevil",
        " for eVil evil",
        " for EVIL evil",
        " for ev_il evil",
        " for ev il evil",
        " for ev4il evil",
        " for e evil",
        " for   evil",
        " for 6 evil",
        " for _ evil",
        " for  evil",
        " for  evil evil",
        " forevil evil",
        "  for evil evil",
        "for evil evil",
        " for && evil",
        " for evil evil"
      ]
    },
    {
      "regex": "^([0-9a-f]+)(?:;.*)?$",
      "exceptionStackTrace": null,
      "matches": [
        "a;evil;evil",
        "a;;",
        "a;eVil",
        "a;EVIL",
        "a;ev_il",
        "a;ev il",
        "a;ev4il",
        "a;e",
        "a; ",
        "a;6",
        "a;_",
        "a;",
        "aa;evil",
        ";evil",
        "g;evil",
        "0;evil",
        "a",
        "a;evil"
      ]
    },
    {
      "regex": "[\\^\\[\\]\\$\\(\\)\\{\\}\\?\\*\\.\\+\\\\]",
      "exceptionStackTrace": null,
      "matches": [
        "}",
        "{",
        "^",
        "]",
        "[",
        "?",
        ".",
        "+",
        "*",
        ")",
        "(",
        "$",
        "\\"
      ]
    },
    {
      "regex": "^(@|commit \\w+$)",
      "exceptionStackTrace": null,
      "matches": [
        "commit eVil",
        "commit EVIL",
        "commit ev_il",
        "commit ev il",
        "commit ev4il",
        "commit e",
        "commit  ",
        "commit 6",
        "commit _",
        "commit ",
        "commit evil",
        "@"
      ]
    },
    {
      "regex": "\\b(OUT|TOKEN|QUOTED)\\b",
      "exceptionStackTrace": null,
      "matches": ["QUOTED", "TOKEN", "OUT"]
    },
    {
      "regex": "npm install sample --global",
      "exceptionStackTrace": null,
      "matches": ["npm install sample --global"]
    },
    {
      "regex": "[\\u2026\\u201C\\u201D]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 8230"
      },
      "matches": []
    },
    {
      "regex": "<%=\\s([^%]+)\\s%>",
      "exceptionStackTrace": null,
      "matches": [
        "<%= > %>",
        "<%= = %>",
        "<%= < %>",
        "<%= % %>",
        "<%= eVil %>",
        "<%= EVIL %>",
        "<%= ev_il %>",
        "<%= ev il %>",
        "<%= ev4il %>",
        "<%= e %>",
        "<%=   %>",
        "<%= 6 %>",
        "<%= _ %>",
        "<%=  %>",
        "<%= evil %>"
      ]
    },
    {
      "regex": "mkdir -p \\/guest\\/path",
      "exceptionStackTrace": null,
      "matches": ["mkdir -p /guest/path"]
    },
    {
      "regex": "^(closest|above|below)$",
      "exceptionStackTrace": null,
      "matches": ["below", "above", "closest"]
    },
    {
      "regex": "\\;|\\:|\\,|\\.|\\?|\\!|\\\"",
      "exceptionStackTrace": null,
      "matches": ["\"", "!", "?", ".", ",", ":", ";"]
    },
    {
      "regex": "\\/invite$",
      "exceptionStackTrace": null,
      "matches": ["/invite"]
    },
    {
      "regex": "^a step that passes with a promise interface$",
      "exceptionStackTrace": null,
      "matches": ["a step that passes with a promise interface"]
    },
    {
      "regex": "^[A-Za-z][A-Za-z0-9]*_[A-Za-z_][A-Za-z0-9_]*$",
      "exceptionStackTrace": null,
      "matches": [
        "aevil__eVil",
        "aevil__EVIL",
        "aevil__ev_il",
        "aevil__ev il",
        "aevil__ev4il",
        "aevil__e",
        "aevil__ ",
        "aevil__6",
        "aevil___",
        "aevil__",
        "aevil_aevil",
        "aevil_Aevil",
        "aeVil__evil",
        "aEVIL__evil",
        "aev_il__evil",
        "aev il__evil",
        "aev4il__evil",
        "ae__evil",
        "a __evil",
        "a6__evil",
        "a___evil",
        "a__evil",
        "Aevil__evil",
        "a__",
        "aevil__evil"
      ]
    },
    {
      "regex": "must not be equal to container",
      "exceptionStackTrace": null,
      "matches": ["must not be equal to container"]
    },
    {
      "regex": "bbox[^{]+{([^}]+)}",
      "exceptionStackTrace": null,
      "matches": [
        "bboxevil{}}",
        "bboxevil{{}",
        "bboxevil{eVil}",
        "bboxevil{EVIL}",
        "bboxevil{ev_il}",
        "bboxevil{ev il}",
        "bboxevil{ev4il}",
        "bboxevil{e}",
        "bboxevil{ }",
        "bboxevil{6}",
        "bboxevil{_}",
        "bboxevil{}",
        "bbox}{evil}",
        "bbox{{evil}",
        "bboxeVil{evil}",
        "bboxEVIL{evil}",
        "bboxev_il{evil}",
        "bboxev il{evil}",
        "bboxev4il{evil}",
        "bboxe{evil}",
        "bbox {evil}",
        "bbox6{evil}",
        "bbox_{evil}",
        "bbox{evil}",
        "bboxevil{evil}"
      ]
    },
    {
      "regex": "\\$\\{environment\\}",
      "exceptionStackTrace": null,
      "matches": ["${environment}"]
    },
    { "regex": "\\AJT_", "exceptionStackTrace": null, "matches": ["JT_"] },
    {
      "regex": "http://local\\.com",
      "exceptionStackTrace": null,
      "matches": ["http://local.com"]
    },
    {
      "regex": "^test\\/unit warning: method TestForTestRedefinition#test_redefinition is redefined$",
      "exceptionStackTrace": null,
      "matches": [
        "test/unit warning: method TestForTestRedefinition#test_redefinition is redefined"
      ]
    },
    { "regex": "^29$", "exceptionStackTrace": null, "matches": ["29"] },
    {
      "regex": "[^a-zA-Z?\\d\\s:]",
      "exceptionStackTrace": null,
      "matches": ["a", "A", "?", ":", "0", " ", "!"]
    },
    {
      "regex": "^I submit a valid form with (.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "I submit a valid form with eVil",
        "I submit a valid form with EVIL",
        "I submit a valid form with ev_il",
        "I submit a valid form with ev il",
        "I submit a valid form with ev4il",
        "I submit a valid form with e",
        "I submit a valid form with  ",
        "I submit a valid form with 6",
        "I submit a valid form with _",
        "I submit a valid form with ",
        "I submit a valid form with evil"
      ]
    },
    {
      "regex": "^Charge\\s+I\\s+(-*\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "Charge I -00",
        "Charge I -",
        "Charge I --0",
        "Charge I  -0",
        "Charge I-0",
        "Charge  I -0",
        "ChargeI -0",
        "Charge I 0",
        "Charge I -0"
      ]
    },
    {
      "regex": "^\\\\unioncopy\\s+",
      "exceptionStackTrace": null,
      "matches": ["\\unioncopy  ", "\\unioncopy", "\\unioncopy "]
    },
    {
      "regex": "\\.js|jsx$",
      "exceptionStackTrace": null,
      "matches": ["jsx", ".js"]
    },
    {
      "regex": "\\(\\s*([A-Z][A-Za-z]*)\\s+([a-z][A-Za-z_']*)\\)\\s*(=>)",
      "exceptionStackTrace": null,
      "matches": [
        "( Aevil aevil)  =>",
        "( Aevil aevil)=>",
        "( Aevil a>) =>",
        "( Aevil a=) =>",
        "( Aevil a)) =>",
        "( Aevil a() =>",
        "( Aevil a') =>",
        "( Aevil aeVil) =>",
        "( Aevil aEVIL) =>",
        "( Aevil aev_il) =>",
        "( Aevil aev il) =>",
        "( Aevil aev4il) =>",
        "( Aevil ae) =>",
        "( Aevil a ) =>",
        "( Aevil a6) =>",
        "( Aevil a_) =>",
        "( Aevil a) =>",
        "( Aevil  aevil) =>",
        "( Aevilaevil) =>",
        "( AeVil aevil) =>",
        "( AEVIL aevil) =>",
        "( Aev_il aevil) =>",
        "( Aev il aevil) =>",
        "( Aev4il aevil) =>",
        "( Ae aevil) =>",
        "( A  aevil) =>",
        "( A6 aevil) =>",
        "( A_ aevil) =>",
        "( A aevil) =>",
        "(  Aevil aevil) =>",
        "(Aevil aevil) =>",
        "(A a)=>",
        "( Aevil aevil) =>"
      ]
    },
    {
      "regex": "(?: *pipe *)?\\n$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^([ADM])  (.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "M  eVil",
        "M  EVIL",
        "M  ev_il",
        "M  ev il",
        "M  ev4il",
        "M  e",
        "M   ",
        "M  6",
        "M  _",
        "D  evil",
        "B  evil",
        "A  evil",
        "M  ",
        "M  evil"
      ]
    },
    {
      "regex": "^I call the (.*?) method of the memory storage with arguments$",
      "exceptionStackTrace": null,
      "matches": [
        "I call the eVil method of the memory storage with arguments",
        "I call the EVIL method of the memory storage with arguments",
        "I call the ev_il method of the memory storage with arguments",
        "I call the ev il method of the memory storage with arguments",
        "I call the ev4il method of the memory storage with arguments",
        "I call the e method of the memory storage with arguments",
        "I call the   method of the memory storage with arguments",
        "I call the 6 method of the memory storage with arguments",
        "I call the _ method of the memory storage with arguments",
        "I call the  method of the memory storage with arguments",
        "I call the evil method of the memory storage with arguments"
      ]
    },
    {
      "regex": "(?m)^Digest: (.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "Digest: :",
        "Digest: eVil",
        "Digest: EVIL",
        "Digest: ev_il",
        "Digest: ev il",
        "Digest: ev4il",
        "Digest: e",
        "Digest:  ",
        "Digest: 6",
        "Digest: _",
        "Digest: ",
        "Digest: evil"
      ]
    },
    {
      "regex": "^outer loop",
      "exceptionStackTrace": null,
      "matches": ["outer loop"]
    },
    { "regex": "\\bEY\\b", "exceptionStackTrace": null, "matches": ["EY"] },
    {
      "regex": "GMP|Pari",
      "exceptionStackTrace": null,
      "matches": ["Pari", "GMP"]
    },
    {
      "regex": "^[\\p{Zs}\\t/\\*-]*\\|?",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\p"
      },
      "matches": []
    },
    {
      "regex": "HAZARDOUS expected as third parameter",
      "exceptionStackTrace": null,
      "matches": ["HAZARDOUS expected as third parameter"]
    },
    {
      "regex": "(?<=\\<\\/align>)\\s*<br \\/>\\s*",
      "exceptionStackTrace": null,
      "matches": [
        " <br />  ",
        " <br />",
        "  <br /> ",
        "<br /> ",
        "<br />",
        " <br /> "
      ]
    },
    { "regex": "^$port", "exceptionStackTrace": null, "matches": ["port"] },
    {
      "regex": "&amp;(#?[a-z0-9]+);",
      "exceptionStackTrace": null,
      "matches": [
        "&amp;#eVil;",
        "&amp;#EVIL;",
        "&amp;#ev_il;",
        "&amp;#ev il;",
        "&amp;#ev4il;",
        "&amp;#e;",
        "&amp;# ;",
        "&amp;#6;",
        "&amp;#_;",
        "&amp;#;",
        "&amp;##evil;",
        "&amp;evil;",
        "&amp;#evil;"
      ]
    },
    {
      "regex": "^\\.{1,2}$|[:\"<>|]",
      "exceptionStackTrace": null,
      "matches": [">", "<", ":", "\"", "...", "..", "", "|", "."]
    },
    {
      "regex": "font\\.(\\w+)\\.tt",
      "exceptionStackTrace": null,
      "matches": [
        "font.eVil.tt",
        "font.EVIL.tt",
        "font.ev_il.tt",
        "font.ev il.tt",
        "font.ev4il.tt",
        "font.e.tt",
        "font. .tt",
        "font.6.tt",
        "font._.tt",
        "font..tt",
        "font.evil.tt"
      ]
    },
    {
      "regex": "ns([1-3]{1})[0-9]+\\.ispapi\\.net",
      "exceptionStackTrace": null,
      "matches": [
        "ns100.ispapi.net",
        "ns1.ispapi.net",
        "ns110.ispapi.net",
        "ns0.ispapi.net",
        "ns00.ispapi.net",
        "ns10.ispapi.net"
      ]
    },
    {
      "regex": "min|max|step",
      "exceptionStackTrace": null,
      "matches": ["step", "max", "min"]
    },
    {
      "regex": "\\b(?:[AL]?GPL)-\\d\\K\\.0(?![.\\d])",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\K"
      },
      "matches": []
    },
    {
      "regex": ".(?s:.)(?i:.a)a",
      "exceptionStackTrace": null,
      "matches": ["Aa", ":a", "0a", " a", "aa"]
    },
    {
      "regex": "More than one realm is defined as the default one: All,Realm1,Realm2,Realm4. I set All as the default realm.",
      "exceptionStackTrace": null,
      "matches": [
        "More than one realm is defined as the default one: All,Realm1,Realm2,Realm4a I set All as the default realmA",
        "More than one realm is defined as the default one: All,Realm1,Realm2,Realm4a I set All as the default realm:",
        "More than one realm is defined as the default one: All,Realm1,Realm2,Realm4a I set All as the default realm0",
        "More than one realm is defined as the default one: All,Realm1,Realm2,Realm4a I set All as the default realm,",
        "More than one realm is defined as the default one: All,Realm1,Realm2,Realm4a I set All as the default realm ",
        "More than one realm is defined as the default one: All,Realm1,Realm2,Realm4A I set All as the default realma",
        "More than one realm is defined as the default one: All,Realm1,Realm2,Realm4: I set All as the default realma",
        "More than one realm is defined as the default one: All,Realm1,Realm2,Realm40 I set All as the default realma",
        "More than one realm is defined as the default one: All,Realm1,Realm2,Realm4, I set All as the default realma",
        "More than one realm is defined as the default one: All,Realm1,Realm2,Realm4  I set All as the default realma",
        "More than one realm is defined as the default one: All,Realm1,Realm2,Realm4a I set All as the default realma"
      ]
    },
    {
      "regex": "^https?:\\/\\/www\\.t\\-online\\.de\\/.+\\/id_\\d+\\/",
      "exceptionStackTrace": null,
      "matches": [
        "https://www.t-online.de/evil/id_00/",
        "https://www.t-online.de/evil/id_/",
        "https://www.t-online.de/:/id_0/",
        "https://www.t-online.de///id_0/",
        "https://www.t-online.de/./id_0/",
        "https://www.t-online.de/-/id_0/",
        "https://www.t-online.de/eVil/id_0/",
        "https://www.t-online.de/EVIL/id_0/",
        "https://www.t-online.de/ev_il/id_0/",
        "https://www.t-online.de/ev il/id_0/",
        "https://www.t-online.de/ev4il/id_0/",
        "https://www.t-online.de/e/id_0/",
        "https://www.t-online.de/ /id_0/",
        "https://www.t-online.de/6/id_0/",
        "https://www.t-online.de/_/id_0/",
        "https://www.t-online.de//id_0/",
        "httpss://www.t-online.de/evil/id_0/",
        "http://www.t-online.de/evil/id_0/",
        "https://www.t-online.de/evil/id_0/"
      ]
    },
    {
      "regex": "\\ASearching\\..+ done\\s*\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "\\| \\| \\| \\|",
      "exceptionStackTrace": null,
      "matches": ["| | | |"]
    },
    {
      "regex": "^(?:jan|januar[iy])$",
      "exceptionStackTrace": null,
      "matches": ["januari", "januara", "january", "jan"]
    },
    {
      "regex": "^(?P<text> *)$",
      "exceptionStackTrace": null,
      "matches": ["  ", "", " "]
    },
    { "regex": "%<(\\d)>", "exceptionStackTrace": null, "matches": ["%<0>"] },
    {
      "regex": "^979-0-\\d{4}-\\d{4}-\\d{1}$",
      "exceptionStackTrace": null,
      "matches": [
        "979-0-0000-0000-00",
        "979-0-0000-0000-",
        "979-0-0000-00000-0",
        "979-0-0000-000-0",
        "979-0-00000-0000-0",
        "979-0-000-0000-0",
        "979-0-0000-0000-0"
      ]
    },
    {
      "regex": "reporter_ip",
      "exceptionStackTrace": null,
      "matches": ["reporter_ip"]
    },
    {
      "regex": "((From:|To:|Cc:|Bcc:|Subject:|Content-type:) ([\\S]+))",
      "exceptionStackTrace": null,
      "matches": [
        "From: :",
        "From: -",
        "From: eVil",
        "From: EVIL",
        "From: ev_il",
        "From: ev il",
        "From: ev4il",
        "From: e",
        "From:  ",
        "From: 6",
        "From: _",
        "From: ",
        "Content-type: evil",
        "Subject: evil",
        "Bcc: evil",
        "Cc: evil",
        "To: evil",
        "From: evil"
      ]
    },
    {
      "regex": "^ {2}- ",
      "exceptionStackTrace": null,
      "matches": ["   - ", " - ", "  - "]
    },
    {
      "regex": "\\{calendar_grid_template\\}",
      "exceptionStackTrace": null,
      "matches": ["{calendar_grid_template}"]
    },
    {
      "regex": "^(?:This message|Este mensaje)",
      "exceptionStackTrace": null,
      "matches": ["Este mensaje", "This message"]
    },
    {
      "regex": "(para|code)",
      "exceptionStackTrace": null,
      "matches": ["code", "para"]
    },
    {
      "regex": "RAID bus controller: LSI Logic / Symbios Logic Unknown",
      "exceptionStackTrace": null,
      "matches": ["RAID bus controller: LSI Logic / Symbios Logic Unknown"]
    },
    { "regex": "^CORE::", "exceptionStackTrace": null, "matches": ["CORE::"] },
    {
      "regex": "AUTHTOK_EXPIRED$",
      "exceptionStackTrace": null,
      "matches": ["AUTHTOK_EXPIRED"]
    },
    {
      "regex": "__SUPERUSERPASSWORD__",
      "exceptionStackTrace": null,
      "matches": ["__SUPERUSERPASSWORD__"]
    },
    { "regex": "^za", "exceptionStackTrace": null, "matches": ["za"] },
    {
      "regex": "google*",
      "exceptionStackTrace": null,
      "matches": ["googlee", "googl", "google"]
    },
    {
      "regex": "^I attempt to call the \"(.*?)\" API with:$",
      "exceptionStackTrace": null,
      "matches": [
        "I attempt to call the \":\" API with:",
        "I attempt to call the \"\"\" API with:",
        "I attempt to call the \"eVil\" API with:",
        "I attempt to call the \"EVIL\" API with:",
        "I attempt to call the \"ev_il\" API with:",
        "I attempt to call the \"ev il\" API with:",
        "I attempt to call the \"ev4il\" API with:",
        "I attempt to call the \"e\" API with:",
        "I attempt to call the \" \" API with:",
        "I attempt to call the \"6\" API with:",
        "I attempt to call the \"_\" API with:",
        "I attempt to call the \"\" API with:",
        "I attempt to call the \"evil\" API with:"
      ]
    },
    {
      "regex": "\\[\\[ ofdmIndex ]]",
      "exceptionStackTrace": null,
      "matches": ["[[ ofdmIndex ]]"]
    },
    {
      "regex": "^\\[ [^\\]]*\n\t\t  ip=132\\.151\\.1\\.\\S+\\s+ rdns=\\S*ietf\\.org ",
      "exceptionStackTrace": null,
      "matches": [
        "[ evil\n\t\t  ip=132.151.1.evil  rdns=]ietf.org ",
        "[ evil\n\t\t  ip=132.151.1.evil  rdns=[ietf.org ",
        "[ evil\n\t\t  ip=132.151.1.evil  rdns==ietf.org ",
        "[ evil\n\t\t  ip=132.151.1.evil  rdns=.ietf.org ",
        "[ evil\n\t\t  ip=132.151.1.evil  rdns=eVilietf.org ",
        "[ evil\n\t\t  ip=132.151.1.evil  rdns=EVILietf.org ",
        "[ evil\n\t\t  ip=132.151.1.evil  rdns=ev_ilietf.org ",
        "[ evil\n\t\t  ip=132.151.1.evil  rdns=ev ilietf.org ",
        "[ evil\n\t\t  ip=132.151.1.evil  rdns=ev4ilietf.org ",
        "[ evil\n\t\t  ip=132.151.1.evil  rdns=eietf.org ",
        "[ evil\n\t\t  ip=132.151.1.evil  rdns= ietf.org ",
        "[ evil\n\t\t  ip=132.151.1.evil  rdns=6ietf.org ",
        "[ evil\n\t\t  ip=132.151.1.evil  rdns=_ietf.org ",
        "[ evil\n\t\t  ip=132.151.1.evil  rdns=ietf.org ",
        "[ evil\n\t\t  ip=132.151.1.evil   rdns=evilietf.org ",
        "[ evil\n\t\t  ip=132.151.1.evil rdns=evilietf.org ",
        "[ evil\n\t\t  ip=132.151.1.]  rdns=evilietf.org ",
        "[ evil\n\t\t  ip=132.151.1.[  rdns=evilietf.org ",
        "[ evil\n\t\t  ip=132.151.1.=  rdns=evilietf.org ",
        "[ evil\n\t\t  ip=132.151.1..  rdns=evilietf.org ",
        "[ evil\n\t\t  ip=132.151.1.eVil  rdns=evilietf.org ",
        "[ evil\n\t\t  ip=132.151.1.EVIL  rdns=evilietf.org ",
        "[ evil\n\t\t  ip=132.151.1.ev_il  rdns=evilietf.org ",
        "[ evil\n\t\t  ip=132.151.1.ev il  rdns=evilietf.org ",
        "[ evil\n\t\t  ip=132.151.1.ev4il  rdns=evilietf.org ",
        "[ evil\n\t\t  ip=132.151.1.e  rdns=evilietf.org ",
        "[ evil\n\t\t  ip=132.151.1.   rdns=evilietf.org ",
        "[ evil\n\t\t  ip=132.151.1.6  rdns=evilietf.org ",
        "[ evil\n\t\t  ip=132.151.1._  rdns=evilietf.org ",
        "[ evil\n\t\t  ip=132.151.1.  rdns=evilietf.org ",
        "[ ]\n\t\t  ip=132.151.1.evil  rdns=evilietf.org ",
        "[ [\n\t\t  ip=132.151.1.evil  rdns=evilietf.org ",
        "[ =\n\t\t  ip=132.151.1.evil  rdns=evilietf.org ",
        "[ .\n\t\t  ip=132.151.1.evil  rdns=evilietf.org ",
        "[ eVil\n\t\t  ip=132.151.1.evil  rdns=evilietf.org ",
        "[ EVIL\n\t\t  ip=132.151.1.evil  rdns=evilietf.org ",
        "[ ev_il\n\t\t  ip=132.151.1.evil  rdns=evilietf.org ",
        "[ ev il\n\t\t  ip=132.151.1.evil  rdns=evilietf.org ",
        "[ ev4il\n\t\t  ip=132.151.1.evil  rdns=evilietf.org ",
        "[ e\n\t\t  ip=132.151.1.evil  rdns=evilietf.org ",
        "[  \n\t\t  ip=132.151.1.evil  rdns=evilietf.org ",
        "[ 6\n\t\t  ip=132.151.1.evil  rdns=evilietf.org ",
        "[ _\n\t\t  ip=132.151.1.evil  rdns=evilietf.org ",
        "[ \n\t\t  ip=132.151.1.evil  rdns=evilietf.org ",
        "[ \n\t\t  ip=132.151.1.evil  rdns=ietf.org ",
        "[ evil\n\t\t  ip=132.151.1.evil  rdns=evilietf.org "
      ]
    },
    {
      "regex": "\\bPR\\.PR_SOURCE\\b",
      "exceptionStackTrace": null,
      "matches": ["PR.PR_SOURCE"]
    },
    {
      "regex": "Sphinx (\\d\\.\\d\\.\\d\\d?)",
      "exceptionStackTrace": null,
      "matches": ["Sphinx 0.0.000", "Sphinx 0.0.0", "Sphinx 0.0.00"]
    },
    {
      "regex": "(\\<\\!DOCTYPE|\\<\\!ENTITY)",
      "exceptionStackTrace": null,
      "matches": ["<!ENTITY", "<!DOCTYPE"]
    },
    {
      "regex": "^\\s*([\\d.]+)\\s*,\\s*([\\d.]+)",
      "exceptionStackTrace": null,
      "matches": [
        " . , ..",
        " . , ",
        " . , 0",
        " . ,  .",
        " . ,.",
        " .  , .",
        " ., .",
        " .. , .",
        "  , .",
        " 0 , .",
        "  . , .",
        ". , .",
        ".,.",
        " . , ."
      ]
    },
    {
      "regex": "(require\\(['\"])(string_decoder)(['\"]\\))",
      "exceptionStackTrace": null,
      "matches": [
        "require(\"string_decoder')",
        "require('string_decoder\")",
        "require(\"string_decoder\")"
      ]
    },
    {
      "regex": "^(expire_(at|next|in)|action|key|value|memory_cache|cache_file|tie_class)$",
      "exceptionStackTrace": null,
      "matches": [
        "tie_class",
        "cache_file",
        "memory_cache",
        "value",
        "key",
        "action",
        "expire_in",
        "expire_next",
        "expire_at"
      ]
    },
    {
      "regex": "(RC|TRIAL)",
      "exceptionStackTrace": null,
      "matches": ["TRIAL", "RC"]
    },
    {
      "regex": "^forwards|backwards$",
      "exceptionStackTrace": null,
      "matches": ["backwards", "forwards"]
    },
    {
      "regex": "Can't connect to .* MySQL server",
      "exceptionStackTrace": null,
      "matches": [
        "Can't connect to ' MySQL server",
        "Can't connect to eVil MySQL server",
        "Can't connect to EVIL MySQL server",
        "Can't connect to ev_il MySQL server",
        "Can't connect to ev il MySQL server",
        "Can't connect to ev4il MySQL server",
        "Can't connect to e MySQL server",
        "Can't connect to   MySQL server",
        "Can't connect to 6 MySQL server",
        "Can't connect to _ MySQL server",
        "Can't connect to  MySQL server",
        "Can't connect to evil MySQL server"
      ]
    },
    {
      "regex": "\\A#<Object:0x\\w+>\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "^(.*)r360-include\\.js$",
      "exceptionStackTrace": null,
      "matches": [
        ".r360-include.js",
        "-r360-include.js",
        "eVilr360-include.js",
        "EVILr360-include.js",
        "ev_ilr360-include.js",
        "ev ilr360-include.js",
        "ev4ilr360-include.js",
        "er360-include.js",
        " r360-include.js",
        "6r360-include.js",
        "_r360-include.js",
        "r360-include.js",
        "evilr360-include.js"
      ]
    },
    {
      "regex": "oauth: PLAINTEXT signature_method not supported with body_hash signing",
      "exceptionStackTrace": null,
      "matches": [
        "oauth: PLAINTEXT signature_method not supported with body_hash signing"
      ]
    },
    {
      "regex": "base58Prefixes.SECRET_KEY.*list_of.(\\d+)\\)",
      "exceptionStackTrace": null,
      "matches": [
        "base58PrefixesaSECRET_KEYevillist_ofa00)",
        "base58PrefixesaSECRET_KEYevillist_ofa)",
        "base58PrefixesaSECRET_KEYevillist_of_0)",
        "base58PrefixesaSECRET_KEYevillist_ofA0)",
        "base58PrefixesaSECRET_KEYevillist_of00)",
        "base58PrefixesaSECRET_KEYevillist_of)0)",
        "base58PrefixesaSECRET_KEYevillist_of 0)",
        "base58PrefixesaSECRET_KEY)list_ofa0)",
        "base58PrefixesaSECRET_KEYeVillist_ofa0)",
        "base58PrefixesaSECRET_KEYEVILlist_ofa0)",
        "base58PrefixesaSECRET_KEYev_illist_ofa0)",
        "base58PrefixesaSECRET_KEYev illist_ofa0)",
        "base58PrefixesaSECRET_KEYev4illist_ofa0)",
        "base58PrefixesaSECRET_KEYelist_ofa0)",
        "base58PrefixesaSECRET_KEY list_ofa0)",
        "base58PrefixesaSECRET_KEY6list_ofa0)",
        "base58PrefixesaSECRET_KEY_list_ofa0)",
        "base58Prefixes_SECRET_KEYevillist_ofa0)",
        "base58PrefixesASECRET_KEYevillist_ofa0)",
        "base58Prefixes0SECRET_KEYevillist_ofa0)",
        "base58Prefixes)SECRET_KEYevillist_ofa0)",
        "base58Prefixes SECRET_KEYevillist_ofa0)",
        "base58PrefixesaSECRET_KEYlist_ofa0)",
        "base58PrefixesaSECRET_KEYevillist_ofa0)"
      ]
    },
    { "regex": "F|f", "exceptionStackTrace": null, "matches": ["f", "F"] },
    {
      "regex": "[Ww]",
      "exceptionStackTrace": null,
      "matches": ["a", "W", "A", "w"]
    },
    {
      "regex": "$freeze_type",
      "exceptionStackTrace": null,
      "matches": ["freeze_type"]
    },
    {
      "regex": "^I should have (\\d+) list items$",
      "exceptionStackTrace": null,
      "matches": [
        "I should have 00 list items",
        "I should have  list items",
        "I should have 0 list items"
      ]
    },
    {
      "regex": "([\\r\\n][ \\t]*<%\\s*html\\w+[ \\t]*(?:\\(.*?\\))?[ \\t]*[^\\r\\n]*(?:\\r\\n|[\\r\\n]).*?(?:\\r\\n|[\\r\\n])?%>)((?:\\r\\n|[\\r\\n])?)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": "(?P<ip_address>\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}) - (-|(\\w+)) \\[(?P<day>\\d{2})/(?P<month>[a-z]{3})/(?P<year>\\d{4}):(?P<hour>\\d{2}):(?P<minute>\\d{2}):(?P<second>\\d{2}) (?P<timezone>([+-])\\d{4})\\] \"(?P<request>[^\"]*?)\" (?P<status_code>\\d{3}) (?P<bytes_sent>\\d+) \"(?P<referrer>(-)|(.+))?\" \"(?P<user_agent>.+)?\"",
      "exceptionStackTrace": null,
      "matches": [
        "0.0.0.0 - eVil [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - EVIL [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - ev_il [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - ev il [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - ev4il [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - e [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 -   [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - 6 [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - _ [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 -  [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"]\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"[\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \":\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"/\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \".\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"+\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"\"\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"eVil\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"EVIL\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"ev_il\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"ev il\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"ev4il\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"e\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \" \" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"6\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"_\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evilevil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"]\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"[\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \":\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"/\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \".\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"-\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"+\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"\"\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"eVil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"EVIL\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"ev_il\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"ev il\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"ev4il\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"e\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \" \"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"6\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"_\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"--\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 00 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000  \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 0000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 00 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"]\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"[\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \":\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"/\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \".\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"-\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"+\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"\"\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"eVil\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"EVIL\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"ev_il\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"ev il\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"ev4il\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"e\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \" \" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"6\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"_\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -00000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 +0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:000 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:0 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:000:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:0:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:000:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:0:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/00000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [000/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [0/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.0.0000 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.0.000 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.0. - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.0000.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.000.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0..0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0000.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.000.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0..0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0000.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "000.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        ".0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - evil [00/aaa/0000:00:00:00 -0000] \"\" 000 0 \"\" \"\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"\" 000 0 \"\" \"\"",
        "0.0.0.0 - evil [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"evil\" \"evil\"",
        "0.0.0.0 - - [00/aaa/0000:00:00:00 -0000] \"evil\" 000 0 \"-\" \"evil\""
      ]
    },
    {
      "regex": "^Message:\\s*(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "Message: :",
        "Message: eVil",
        "Message: EVIL",
        "Message: ev_il",
        "Message: ev il",
        "Message: ev4il",
        "Message: e",
        "Message:  ",
        "Message: 6",
        "Message: _",
        "Message: ",
        "Message:  evil",
        "Message:evil",
        "Message:",
        "Message: evil"
      ]
    },
    {
      "regex": "^\\s*<([^\\s>]+)",
      "exceptionStackTrace": null,
      "matches": [
        " <>",
        " <<",
        " <eVil",
        " <EVIL",
        " <ev_il",
        " <ev il",
        " <ev4il",
        " <e",
        " < ",
        " <6",
        " <_",
        " <",
        "  <evil",
        "<evil",
        " <evil"
      ]
    },
    {
      "regex": "\\e\\[([\\d;]*)m",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\e"
      },
      "matches": []
    },
    {
      "regex": "lctables_spec_users",
      "exceptionStackTrace": null,
      "matches": ["lctables_spec_users"]
    },
    {
      "regex": "(.)i$",
      "exceptionStackTrace": null,
      "matches": ["_i", "Ai", "0i", " i", "ai"]
    },
    {
      "regex": "@method ([\\w\\[\\]]+)\\((.*)\\)$",
      "exceptionStackTrace": null,
      "matches": [
        "@method evil(])",
        "@method evil([)",
        "@method evil(@)",
        "@method evil())",
        "@method evil(()",
        "@method evil(eVil)",
        "@method evil(EVIL)",
        "@method evil(ev_il)",
        "@method evil(ev il)",
        "@method evil(ev4il)",
        "@method evil(e)",
        "@method evil( )",
        "@method evil(6)",
        "@method evil(_)",
        "@method ](evil)",
        "@method [(evil)",
        "@method @(evil)",
        "@method )(evil)",
        "@method ((evil)",
        "@method eVil(evil)",
        "@method EVIL(evil)",
        "@method ev_il(evil)",
        "@method ev il(evil)",
        "@method ev4il(evil)",
        "@method e(evil)",
        "@method  (evil)",
        "@method 6(evil)",
        "@method _(evil)",
        "@method (evil)",
        "@method evil()",
        "@method evil(evil)"
      ]
    },
    {
      "regex": "\\bimport\\b",
      "exceptionStackTrace": null,
      "matches": ["import"]
    },
    {
      "regex": "https?://[^\\s]+",
      "exceptionStackTrace": null,
      "matches": [
        "https://:",
        "https:///",
        "https://eVil",
        "https://EVIL",
        "https://ev_il",
        "https://ev il",
        "https://ev4il",
        "https://e",
        "https:// ",
        "https://6",
        "https://_",
        "https://",
        "httpss://evil",
        "http://evil",
        "https://evil"
      ]
    },
    {
      "regex": "(?<=[\\w\\)\\]])\\s*((?<!\\*)\\*(?!\\*)|(?<!/)/(?!/))(?=[\\s\\w\\(])",
      "exceptionStackTrace": null,
      "matches": ["  *", "/", "*", " /", " *"]
    },
    {
      "regex": "; *(A28|A32|A43|A70(?:BHT|CHT|HB|S|X)|A101(?:B|C|IT)|A7EB|A7EB-WK|101G9|80G9) Build",
      "exceptionStackTrace": null,
      "matches": [
        ";  A28 Build",
        ";80G9 Build",
        ";101G9 Build",
        ";A7EB-WK Build",
        ";A7EB Build",
        ";A101IT Build",
        ";A101C Build",
        ";A101B Build",
        ";A70X Build",
        ";A70S Build",
        ";A70HB Build",
        ";A70CHT Build",
        ";A70BHT Build",
        ";A43 Build",
        ";A32 Build",
        ";A28 Build",
        "; 80G9 Build",
        "; 101G9 Build",
        "; A7EB-WK Build",
        "; A7EB Build",
        "; A101IT Build",
        "; A101C Build",
        "; A101B Build",
        "; A70X Build",
        "; A70S Build",
        "; A70HB Build",
        "; A70CHT Build",
        "; A70BHT Build",
        "; A43 Build",
        "; A32 Build",
        "; A28 Build"
      ]
    },
    {
      "regex": "^gpg:\\s+aka\\s+\"(.*?)\"",
      "exceptionStackTrace": null,
      "matches": [
        "gpg: aka \":\"",
        "gpg: aka \"\"\"",
        "gpg: aka \"eVil\"",
        "gpg: aka \"EVIL\"",
        "gpg: aka \"ev_il\"",
        "gpg: aka \"ev il\"",
        "gpg: aka \"ev4il\"",
        "gpg: aka \"e\"",
        "gpg: aka \" \"",
        "gpg: aka \"6\"",
        "gpg: aka \"_\"",
        "gpg: aka  \"evil\"",
        "gpg: aka\"evil\"",
        "gpg:  aka \"evil\"",
        "gpg:aka \"evil\"",
        "gpg: aka \"\"",
        "gpg: aka \"evil\""
      ]
    },
    {
      "regex": "^[^\\[.#:]",
      "exceptionStackTrace": null,
      "matches": ["[", "A", ":", "0", ".", "#", " ", "a"]
    },
    {
      "regex": "NOFEATURE",
      "exceptionStackTrace": null,
      "matches": ["NOFEATURE"]
    },
    {
      "regex": "^([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])$",
      "exceptionStackTrace": null,
      "matches": [
        "aaag",
        "aaa0",
        "aaga",
        "aa0a",
        "agaa",
        "a0aa",
        "gaaa",
        "0aaa",
        "aaaa"
      ]
    },
    {
      "regex": "^\\s*(\\(|\\)|[0-9])",
      "exceptionStackTrace": null,
      "matches": ["  (", "0", ")", "(", " 0", " )", " ("]
    },
    {
      "regex": "^#if XSubPPtmp",
      "exceptionStackTrace": null,
      "matches": ["#if XSubPPtmp"]
    },
    {
      "regex": "Gear Size: .*default",
      "exceptionStackTrace": null,
      "matches": [
        "Gear Size: :default",
        "Gear Size: eVildefault",
        "Gear Size: EVILdefault",
        "Gear Size: ev_ildefault",
        "Gear Size: ev ildefault",
        "Gear Size: ev4ildefault",
        "Gear Size: edefault",
        "Gear Size:  default",
        "Gear Size: 6default",
        "Gear Size: _default",
        "Gear Size: default",
        "Gear Size: evildefault"
      ]
    },
    {
      "regex": "^(\\.\\.\\/)*common(\\.js)?$",
      "exceptionStackTrace": null,
      "matches": [
        "../common.js.js",
        "../common",
        "../../common.js",
        "common.js",
        "common",
        "../common.js"
      ]
    },
    {
      "regex": "REPOSITORY",
      "exceptionStackTrace": null,
      "matches": ["REPOSITORY"]
    },
    {
      "regex": "(.*?)<!--\\s*more\\s*-->",
      "exceptionStackTrace": null,
      "matches": [
        "evil<!-- more  -->",
        "evil<!-- more-->",
        "evil<!--  more -->",
        "evil<!--more -->",
        "><!-- more -->",
        "<<!-- more -->",
        "-<!-- more -->",
        "!<!-- more -->",
        "eVil<!-- more -->",
        "EVIL<!-- more -->",
        "ev_il<!-- more -->",
        "ev il<!-- more -->",
        "ev4il<!-- more -->",
        "e<!-- more -->",
        " <!-- more -->",
        "6<!-- more -->",
        "_<!-- more -->",
        "<!-- more -->",
        "<!--more-->",
        "evil<!-- more -->"
      ]
    },
    {
      "regex": "^(exon|intron|cds)$",
      "exceptionStackTrace": null,
      "matches": ["cds", "intron", "exon"]
    },
    {
      "regex": "(@\\!method|@\\!attribute|@\\!domain|@\\!macro)",
      "exceptionStackTrace": null,
      "matches": ["@!macro", "@!domain", "@!attribute", "@!method"]
    },
    {
      "regex": "^(![=~]|\\.\\.\\.?|=>)$",
      "exceptionStackTrace": null,
      "matches": ["....", "!=", "..", "=>", "...", "!~"]
    },
    {
      "regex": "\\s+(-?\\d+)=(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        " -0==",
        " -0=-",
        " -0=eVil",
        " -0=EVIL",
        " -0=ev_il",
        " -0=ev il",
        " -0=ev4il",
        " -0=e",
        " -0= ",
        " -0=6",
        " -0=_",
        " -0=",
        " -00=evil",
        " -=evil",
        " --0=evil",
        " 0=evil",
        "  -0=evil",
        "-0=evil",
        " 0=",
        " -0=evil"
      ]
    },
    {
      "regex": "\\s+[^\\s]*$",
      "exceptionStackTrace": null,
      "matches": [
        " eVil",
        " EVIL",
        " ev_il",
        " ev il",
        " ev4il",
        " e",
        "  ",
        " 6",
        " _",
        "  evil",
        "evil",
        " ",
        " evil"
      ]
    },
    {
      "regex": "($wordpat)@($wordpat)",
      "exceptionStackTrace": null,
      "matches": ["wordpat@wordpat"]
    },
    {
      "regex": "Server: default",
      "exceptionStackTrace": null,
      "matches": ["Server: default"]
    },
    {
      "regex": "Phantom|Electron",
      "exceptionStackTrace": null,
      "matches": ["Electron", "Phantom"]
    },
    { "regex": "^$style$", "exceptionStackTrace": null, "matches": ["style"] },
    {
      "regex": "(?P<val_1>\\S+)\\s+(?P<val_2>\\S+)\\s+(?P<val_3>\\S+)\\s+(?P<val_4>\\S+)\\s+(?P<val_5>\\S+)\\s+(?P<val_6>\\S+)\\s+(?P<val_7>\\S+)\\s+(?P<val_8>\\S+)",
      "exceptionStackTrace": null,
      "matches": [
        "evil evil evil evil evil evil evil eVil",
        "evil evil evil evil evil evil evil EVIL",
        "evil evil evil evil evil evil evil ev_il",
        "evil evil evil evil evil evil evil ev il",
        "evil evil evil evil evil evil evil ev4il",
        "evil evil evil evil evil evil evil e",
        "evil evil evil evil evil evil evil  ",
        "evil evil evil evil evil evil evil 6",
        "evil evil evil evil evil evil evil _",
        "evil evil evil evil evil evil evil ",
        "evil evil evil evil evil evil evil  evil",
        "evil evil evil evil evil evil evilevil",
        "evil evil evil evil evil evil eVil evil",
        "evil evil evil evil evil evil EVIL evil",
        "evil evil evil evil evil evil ev_il evil",
        "evil evil evil evil evil evil ev il evil",
        "evil evil evil evil evil evil ev4il evil",
        "evil evil evil evil evil evil e evil",
        "evil evil evil evil evil evil   evil",
        "evil evil evil evil evil evil 6 evil",
        "evil evil evil evil evil evil _ evil",
        "evil evil evil evil evil evil  evil",
        "evil evil evil evil evil evil  evil evil",
        "evil evil evil evil evil evilevil evil",
        "evil evil evil evil evil eVil evil evil",
        "evil evil evil evil evil EVIL evil evil",
        "evil evil evil evil evil ev_il evil evil",
        "evil evil evil evil evil ev il evil evil",
        "evil evil evil evil evil ev4il evil evil",
        "evil evil evil evil evil e evil evil",
        "evil evil evil evil evil   evil evil",
        "evil evil evil evil evil 6 evil evil",
        "evil evil evil evil evil _ evil evil",
        "evil evil evil evil evil  evil evil",
        "evil evil evil evil evil  evil evil evil",
        "evil evil evil evil evilevil evil evil",
        "evil evil evil evil eVil evil evil evil",
        "evil evil evil evil EVIL evil evil evil",
        "evil evil evil evil ev_il evil evil evil",
        "evil evil evil evil ev il evil evil evil",
        "evil evil evil evil ev4il evil evil evil",
        "evil evil evil evil e evil evil evil",
        "evil evil evil evil   evil evil evil",
        "evil evil evil evil 6 evil evil evil",
        "evil evil evil evil _ evil evil evil",
        "evil evil evil evil  evil evil evil",
        "evil evil evil evil  evil evil evil evil",
        "evil evil evil evilevil evil evil evil",
        "evil evil evil eVil evil evil evil evil",
        "evil evil evil EVIL evil evil evil evil",
        "evil evil evil ev_il evil evil evil evil",
        "evil evil evil ev il evil evil evil evil",
        "evil evil evil ev4il evil evil evil evil",
        "evil evil evil e evil evil evil evil",
        "evil evil evil   evil evil evil evil",
        "evil evil evil 6 evil evil evil evil",
        "evil evil evil _ evil evil evil evil",
        "evil evil evil  evil evil evil evil",
        "evil evil evil  evil evil evil evil evil",
        "evil evil evilevil evil evil evil evil",
        "evil evil eVil evil evil evil evil evil",
        "evil evil EVIL evil evil evil evil evil",
        "evil evil ev_il evil evil evil evil evil",
        "evil evil ev il evil evil evil evil evil",
        "evil evil ev4il evil evil evil evil evil",
        "evil evil e evil evil evil evil evil",
        "evil evil   evil evil evil evil evil",
        "evil evil 6 evil evil evil evil evil",
        "evil evil _ evil evil evil evil evil",
        "evil evil  evil evil evil evil evil",
        "evil evil  evil evil evil evil evil evil",
        "evil evilevil evil evil evil evil evil",
        "evil eVil evil evil evil evil evil evil",
        "evil EVIL evil evil evil evil evil evil",
        "evil ev_il evil evil evil evil evil evil",
        "evil ev il evil evil evil evil evil evil",
        "evil ev4il evil evil evil evil evil evil",
        "evil e evil evil evil evil evil evil",
        "evil   evil evil evil evil evil evil",
        "evil 6 evil evil evil evil evil evil",
        "evil _ evil evil evil evil evil evil",
        "evil  evil evil evil evil evil evil",
        "evil  evil evil evil evil evil evil evil",
        "evilevil evil evil evil evil evil evil",
        "eVil evil evil evil evil evil evil evil",
        "EVIL evil evil evil evil evil evil evil",
        "ev_il evil evil evil evil evil evil evil",
        "ev il evil evil evil evil evil evil evil",
        "ev4il evil evil evil evil evil evil evil",
        "e evil evil evil evil evil evil evil",
        "  evil evil evil evil evil evil evil",
        "6 evil evil evil evil evil evil evil",
        "_ evil evil evil evil evil evil evil",
        " evil evil evil evil evil evil evil",
        "evil evil evil evil evil evil evil evil"
      ]
    },
    {
      "regex": "^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d$",
      "exceptionStackTrace": null,
      "matches": [
        "00000-00-00T00:00:00",
        "000-00-00T00:00:00",
        "0000-00-00T00:00:00"
      ]
    },
    {
      "regex": "^(\\d[\\w:]*)\\s*(?:-|to|and)\\s*(\\d[\\w:]*)(?=\\s*(daily|every day)?)",
      "exceptionStackTrace": null,
      "matches": [
        "0evil - 0:",
        "0evil - 0-",
        "0evil - 0eVil",
        "0evil - 0EVIL",
        "0evil - 0ev_il",
        "0evil - 0ev il",
        "0evil - 0ev4il",
        "0evil - 0e",
        "0evil - 0 ",
        "0evil - 06",
        "0evil - 0_",
        "0evil - 0",
        "0evil -  0evil",
        "0evil -0evil",
        "0evil  - 0evil",
        "0evil- 0evil",
        "0: - 0evil",
        "0- - 0evil",
        "0eVil - 0evil",
        "0EVIL - 0evil",
        "0ev_il - 0evil",
        "0ev il - 0evil",
        "0ev4il - 0evil",
        "0e - 0evil",
        "0  - 0evil",
        "06 - 0evil",
        "0_ - 0evil",
        "0 - 0evil",
        "0and0",
        "0to0",
        "0-0",
        "0evil and 0evil",
        "0evil to 0evil",
        "0evil - 0evil"
      ]
    },
    {
      "regex": "^test.*[$]$",
      "exceptionStackTrace": null,
      "matches": [
        "test$$",
        "testeVil$",
        "testEVIL$",
        "testev_il$",
        "testev il$",
        "testev4il$",
        "teste$",
        "test $",
        "test6$",
        "test_$",
        "test$",
        "testevil$"
      ]
    },
    {
      "regex": "^([:A-Za-z0-9]+)\\s*(.+)?",
      "exceptionStackTrace": null,
      "matches": [
        "evil evilevil",
        "evil :",
        "evil eVil",
        "evil EVIL",
        "evil ev_il",
        "evil ev il",
        "evil ev4il",
        "evil e",
        "evil  ",
        "evil 6",
        "evil _",
        "evil ",
        "evil  evil",
        "evilevil",
        ": evil",
        "eVil evil",
        "EVIL evil",
        "ev_il evil",
        "ev il evil",
        "ev4il evil",
        "e evil",
        "  evil",
        "6 evil",
        "_ evil",
        " evil",
        "evil",
        "evil evil"
      ]
    },
    {
      "regex": "\\{[^/]*\\}",
      "exceptionStackTrace": null,
      "matches": [
        "{}}",
        "{{}",
        "{/}",
        "{eVil}",
        "{EVIL}",
        "{ev_il}",
        "{ev il}",
        "{ev4il}",
        "{e}",
        "{ }",
        "{6}",
        "{_}",
        "{}",
        "{evil}"
      ]
    },
    {
      "regex": "\\[(\\d+)m",
      "exceptionStackTrace": null,
      "matches": ["[00m", "[m", "[0m"]
    },
    {
      "regex": "^<#(C[[:alnum:]]+)(?:(?:|\\S+)?>)",
      "exceptionStackTrace": null,
      "matches": [
        "<#C:]evilevil>",
        "<#C:]]>",
        "<#C:][>",
        "<#C:]>>",
        "<#C:]<>",
        "<#C:]:>",
        "<#C:]#>",
        "<#C:]eVil>",
        "<#C:]EVIL>",
        "<#C:]ev_il>",
        "<#C:]ev il>",
        "<#C:]ev4il>",
        "<#C:]e>",
        "<#C:] >",
        "<#C:]6>",
        "<#C:]_>",
        "<#C:]]evil>",
        "<#C:evil>",
        "<#Cu]evil>",
        "<#Cn]evil>",
        "<#Cm]evil>",
        "<#Cl]evil>",
        "<#Cb]evil>",
        "<#Ca]evil>",
        "<#C[]evil>",
        "<#C:]>",
        "<#C:]evil>"
      ]
    },
    {
      "regex": "(?:^|\\r\\n?|\\n)[ \\t]*#[ \\t#]*lib:*http[ \\t]*=>[ \\t]*hidden_?file\\s",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": "^(-)?0+(?=\\d)",
      "exceptionStackTrace": null,
      "matches": ["-00", "-", "--0", "0", "-0"]
    },
    {
      "regex": "\\d[A-Z\\d]{3}",
      "exceptionStackTrace": null,
      "matches": ["00000", "000", "0A00", "0000"]
    },
    {
      "regex": "\\A(logdie|error_die)\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    { "regex": "crit", "exceptionStackTrace": null, "matches": ["crit"] },
    {
      "regex": "\\[.*\\]\\(([^\\)]+)\\)",
      "exceptionStackTrace": null,
      "matches": [
        "[evil](])",
        "[evil]([)",
        "[evil]())",
        "[evil](()",
        "[evil](eVil)",
        "[evil](EVIL)",
        "[evil](ev_il)",
        "[evil](ev il)",
        "[evil](ev4il)",
        "[evil](e)",
        "[evil]( )",
        "[evil](6)",
        "[evil](_)",
        "[evil]()",
        "[]](evil)",
        "[[](evil)",
        "[)](evil)",
        "[(](evil)",
        "[eVil](evil)",
        "[EVIL](evil)",
        "[ev_il](evil)",
        "[ev il](evil)",
        "[ev4il](evil)",
        "[e](evil)",
        "[ ](evil)",
        "[6](evil)",
        "[_](evil)",
        "[](evil)",
        "[evil](evil)"
      ]
    },
    { "regex": "^\\.kep$", "exceptionStackTrace": null, "matches": [".kep"] },
    {
      "regex": "[^A-Za-z]",
      "exceptionStackTrace": null,
      "matches": ["a", "_", "A", " ", "0"]
    },
    {
      "regex": "\\\"[^\"]*?\\\"",
      "exceptionStackTrace": null,
      "matches": [
        "\"\"\"",
        "\"eVil\"",
        "\"EVIL\"",
        "\"ev_il\"",
        "\"ev il\"",
        "\"ev4il\"",
        "\"e\"",
        "\" \"",
        "\"6\"",
        "\"_\"",
        "\"\"",
        "\"evil\""
      ]
    },
    {
      "regex": "[Yy][^auo]",
      "exceptionStackTrace": null,
      "matches": [
        "yu",
        "yo",
        "ya",
        "y_",
        "yA",
        "y0",
        "y ",
        "ab",
        "Yb",
        "Ab",
        "yb"
      ]
    },
    {
      "regex": "flex\\s?:\\s?((?:[0-9 ]*)\\s?(?:px|em|auto|%)?(?:calc\\(.*\\))?)",
      "exceptionStackTrace": null,
      "matches": [
        "flex :   pxcalc(evil)calc(evil)",
        "flex :   px",
        "flex :   pxcalc(:)",
        "flex :   pxcalc())",
        "flex :   pxcalc(()",
        "flex :   pxcalc(%)",
        "flex :   pxcalc(eVil)",
        "flex :   pxcalc(EVIL)",
        "flex :   pxcalc(ev_il)",
        "flex :   pxcalc(ev il)",
        "flex :   pxcalc(ev4il)",
        "flex :   pxcalc(e)",
        "flex :   pxcalc( )",
        "flex :   pxcalc(6)",
        "flex :   pxcalc(_)",
        "flex :   pxcalc()",
        "flex :   pxpxcalc(evil)",
        "flex :   calc(evil)",
        "flex : 0 pxcalc(evil)",
        "flex :    pxcalc(evil)",
        "flex :  pxcalc(evil)",
        "flex  :   pxcalc(evil)",
        "flex:   pxcalc(evil)",
        "flex:",
        "flex :   %calc(evil)",
        "flex :   autocalc(evil)",
        "flex :   emcalc(evil)",
        "flex :   pxcalc(evil)"
      ]
    },
    {
      "regex": "(?m)^shape +stepcut, ",
      "exceptionStackTrace": null,
      "matches": ["shape  stepcut, ", "shapestepcut, ", "shape stepcut, "]
    },
    {
      "regex": "mailto: contains no email address",
      "exceptionStackTrace": null,
      "matches": ["mailto: contains no email address"]
    },
    {
      "regex": "[\\/\\\\]\\.\\.([\\/\\\\]|$)",
      "exceptionStackTrace": null,
      "matches": ["\\../", "/..\\", "\\..", "\\..\\"]
    },
    {
      "regex": "\\d+(_+\\d+)*",
      "exceptionStackTrace": null,
      "matches": ["0_0_0", "0_00", "0_", "0__0", "00", "00_0", "_0", "0", "0_0"]
    },
    {
      "regex": "?(?|?|?)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "nothing to repeat"
      },
      "matches": []
    },
    {
      "regex": "^I handle the confirm that reloads the page$",
      "exceptionStackTrace": null,
      "matches": ["I handle the confirm that reloads the page"]
    },
    {
      "regex": "^([^:]+)(?::([^{}/]+))?(?:{([^,]+)?,?([^}]+)?})?(?:\\/(.+)\\/(\\w+)?)?$",
      "exceptionStackTrace": null,
      "matches": [
        "evil:evil{evil,evil}/evil/evil/evil/evil",
        "evil:evil{evil,evil}",
        "evil:evil{evil,evil}/evil/evilevil",
        "evil:evil{evil,evil}/evil/eVil",
        "evil:evil{evil,evil}/evil/EVIL",
        "evil:evil{evil,evil}/evil/ev_il",
        "evil:evil{evil,evil}/evil/ev il",
        "evil:evil{evil,evil}/evil/ev4il",
        "evil:evil{evil,evil}/evil/e",
        "evil:evil{evil,evil}/evil/ ",
        "evil:evil{evil,evil}/evil/6",
        "evil:evil{evil,evil}/evil/_",
        "evil:evil{evil,evil}/evil/",
        "evil:evil{evil,evil}/}/evil",
        "evil:evil{evil,evil}/{/evil",
        "evil:evil{evil,evil}/:/evil",
        "evil:evil{evil,evil}///evil",
        "evil:evil{evil,evil}/,/evil",
        "evil:evil{evil,evil}/eVil/evil",
        "evil:evil{evil,evil}/EVIL/evil",
        "evil:evil{evil,evil}/ev_il/evil",
        "evil:evil{evil,evil}/ev il/evil",
        "evil:evil{evil,evil}/ev4il/evil",
        "evil:evil{evil,evil}/e/evil",
        "evil:evil{evil,evil}/ /evil",
        "evil:evil{evil,evil}/6/evil",
        "evil:evil{evil,evil}/_/evil",
        "evil:evil{evil,evil}//evil",
        "evil:evil{evil,evil}{evil,evil}/evil/evil",
        "evil:evil/evil/evil",
        "evil:evil{evil,evilevil}/evil/evil",
        "evil:evil{evil,}}/evil/evil",
        "evil:evil{evil,{}/evil/evil",
        "evil:evil{evil,:}/evil/evil",
        "evil:evil{evil,/}/evil/evil",
        "evil:evil{evil,,}/evil/evil",
        "evil:evil{evil,eVil}/evil/evil",
        "evil:evil{evil,EVIL}/evil/evil",
        "evil:evil{evil,ev_il}/evil/evil",
        "evil:evil{evil,ev il}/evil/evil",
        "evil:evil{evil,ev4il}/evil/evil",
        "evil:evil{evil,e}/evil/evil",
        "evil:evil{evil, }/evil/evil",
        "evil:evil{evil,6}/evil/evil",
        "evil:evil{evil,_}/evil/evil",
        "evil:evil{evil,}/evil/evil",
        "evil:evil{evil,,evil}/evil/evil",
        "evil:evil{evilevil}/evil/evil",
        "evil:evil{evilevil,evil}/evil/evil",
        "evil:evil{},evil}/evil/evil",
        "evil:evil{{,evil}/evil/evil",
        "evil:evil{:,evil}/evil/evil",
        "evil:evil{/,evil}/evil/evil",
        "evil:evil{,,evil}/evil/evil",
        "evil:evil{eVil,evil}/evil/evil",
        "evil:evil{EVIL,evil}/evil/evil",
        "evil:evil{ev_il,evil}/evil/evil",
        "evil:evil{ev il,evil}/evil/evil",
        "evil:evil{ev4il,evil}/evil/evil",
        "evil:evil{e,evil}/evil/evil",
        "evil:evil{ ,evil}/evil/evil",
        "evil:evil{6,evil}/evil/evil",
        "evil:evil{_,evil}/evil/evil",
        "evil:evil{,evil}/evil/evil",
        "evil:evil:evil{evil,evil}/evil/evil",
        "evil{evil,evil}/evil/evil",
        "evil:}{evil,evil}/evil/evil",
        "evil:{{evil,evil}/evil/evil",
        "evil::{evil,evil}/evil/evil",
        "evil:/{evil,evil}/evil/evil",
        "evil:,{evil,evil}/evil/evil",
        "evil:eVil{evil,evil}/evil/evil",
        "evil:EVIL{evil,evil}/evil/evil",
        "evil:ev_il{evil,evil}/evil/evil",
        "evil:ev il{evil,evil}/evil/evil",
        "evil:ev4il{evil,evil}/evil/evil",
        "evil:e{evil,evil}/evil/evil",
        "evil: {evil,evil}/evil/evil",
        "evil:6{evil,evil}/evil/evil",
        "evil:_{evil,evil}/evil/evil",
        "evil:{evil,evil}/evil/evil",
        "}:evil{evil,evil}/evil/evil",
        "{:evil{evil,evil}/evil/evil",
        "::evil{evil,evil}/evil/evil",
        "/:evil{evil,evil}/evil/evil",
        ",:evil{evil,evil}/evil/evil",
        "eVil:evil{evil,evil}/evil/evil",
        "EVIL:evil{evil,evil}/evil/evil",
        "ev_il:evil{evil,evil}/evil/evil",
        "ev il:evil{evil,evil}/evil/evil",
        "ev4il:evil{evil,evil}/evil/evil",
        "e:evil{evil,evil}/evil/evil",
        " :evil{evil,evil}/evil/evil",
        "6:evil{evil,evil}/evil/evil",
        "_:evil{evil,evil}/evil/evil",
        ":evil{evil,evil}/evil/evil",
        "evil",
        "evil:evil{evil,evil}/evil/evil"
      ]
    },
    {
      "regex": "<object(.*)src=\"(http:\\/\\/www.youtube.com)?\\/(v\\/([-|~_0-9A-Za-z]+)|watch\\?v\\=([-|~_0-9A-Za-z]+)&?.*?).*<\\/object>",
      "exceptionStackTrace": null,
      "matches": [
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=evil&~evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=evil&|evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=evil&?evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=evil&>evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=evil&=evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=evil&<evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=evil&:evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=evil&/evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=evil&-evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=evil&&evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=evil&\"evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=evil&eVilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=evil&EVILevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=evil&ev_ilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=evil&ev ilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=evil&ev4ilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=evil&eevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=evil& evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=evil&6evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=evil&_evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=evil&evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=evil&&evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=evilevilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=~&evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=|&evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=?&evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=>&evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v==&evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=<&evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=:&evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=/&evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=-&evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=&&evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=\"&evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=eVil&evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=EVIL&evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=ev_il&evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=ev il&evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=ev4il&evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=e&evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v= &evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=6&evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=_&evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=&evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/evil~</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/evil|</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/evil?</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/evil></object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/evil=</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/evil<</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/evil:</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/evil/</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/evil-</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/evil&</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/evil\"</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/evileVil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/evilEVIL</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/evilev_il</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/evilev il</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/evilev4il</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/evile</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/evil </object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/evil6</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/evil_</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/~evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/|evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/?evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/>evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/=evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/<evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/:evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v//evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/-evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/&evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/\"evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/eVilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/EVILevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/ev_ilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/ev ilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/ev4ilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/eevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/ evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/6evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/_evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacomhttp://wwwayoutubeacom/v/evilevil</object>",
        "<objectevilsrc=\"/v/evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutube~com/v/evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutube|com/v/evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutube_com/v/evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeAcom/v/evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutube?com/v/evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutube>com/v/evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutube=com/v/evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutube<com/v/evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutube:com/v/evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutube0com/v/evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutube/com/v/evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutube-com/v/evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutube&com/v/evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutube\"com/v/evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutube com/v/evilevil</object>",
        "<objectevilsrc=\"http://www~youtubeacom/v/evilevil</object>",
        "<objectevilsrc=\"http://www|youtubeacom/v/evilevil</object>",
        "<objectevilsrc=\"http://www_youtubeacom/v/evilevil</object>",
        "<objectevilsrc=\"http://wwwAyoutubeacom/v/evilevil</object>",
        "<objectevilsrc=\"http://www?youtubeacom/v/evilevil</object>",
        "<objectevilsrc=\"http://www>youtubeacom/v/evilevil</object>",
        "<objectevilsrc=\"http://www=youtubeacom/v/evilevil</object>",
        "<objectevilsrc=\"http://www<youtubeacom/v/evilevil</object>",
        "<objectevilsrc=\"http://www:youtubeacom/v/evilevil</object>",
        "<objectevilsrc=\"http://www0youtubeacom/v/evilevil</object>",
        "<objectevilsrc=\"http://www/youtubeacom/v/evilevil</object>",
        "<objectevilsrc=\"http://www-youtubeacom/v/evilevil</object>",
        "<objectevilsrc=\"http://www&youtubeacom/v/evilevil</object>",
        "<objectevilsrc=\"http://www\"youtubeacom/v/evilevil</object>",
        "<objectevilsrc=\"http://www youtubeacom/v/evilevil</object>",
        "<object~src=\"http://wwwayoutubeacom/v/evilevil</object>",
        "<object|src=\"http://wwwayoutubeacom/v/evilevil</object>",
        "<object?src=\"http://wwwayoutubeacom/v/evilevil</object>",
        "<object>src=\"http://wwwayoutubeacom/v/evilevil</object>",
        "<object=src=\"http://wwwayoutubeacom/v/evilevil</object>",
        "<object<src=\"http://wwwayoutubeacom/v/evilevil</object>",
        "<object:src=\"http://wwwayoutubeacom/v/evilevil</object>",
        "<object/src=\"http://wwwayoutubeacom/v/evilevil</object>",
        "<object-src=\"http://wwwayoutubeacom/v/evilevil</object>",
        "<object&src=\"http://wwwayoutubeacom/v/evilevil</object>",
        "<object\"src=\"http://wwwayoutubeacom/v/evilevil</object>",
        "<objecteVilsrc=\"http://wwwayoutubeacom/v/evilevil</object>",
        "<objectEVILsrc=\"http://wwwayoutubeacom/v/evilevil</object>",
        "<objectev_ilsrc=\"http://wwwayoutubeacom/v/evilevil</object>",
        "<objectev ilsrc=\"http://wwwayoutubeacom/v/evilevil</object>",
        "<objectev4ilsrc=\"http://wwwayoutubeacom/v/evilevil</object>",
        "<objectesrc=\"http://wwwayoutubeacom/v/evilevil</object>",
        "<object src=\"http://wwwayoutubeacom/v/evilevil</object>",
        "<object6src=\"http://wwwayoutubeacom/v/evilevil</object>",
        "<object_src=\"http://wwwayoutubeacom/v/evilevil</object>",
        "<objectsrc=\"http://wwwayoutubeacom/v/evilevil</object>",
        "<objectsrc=\"/watch?v=evil</object>",
        "<objectsrc=\"/v/evil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/watch?v=evil&evilevil</object>",
        "<objectevilsrc=\"http://wwwayoutubeacom/v/evilevil</object>"
      ]
    },
    {
      "regex": "^heard_(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "heard_eVil",
        "heard_EVIL",
        "heard_ev_il",
        "heard_ev il",
        "heard_ev4il",
        "heard_e",
        "heard_ ",
        "heard_6",
        "heard__",
        "heard_",
        "heard_evil"
      ]
    },
    {
      "regex": "__dep(s?)",
      "exceptionStackTrace": null,
      "matches": ["__depss", "__dep", "__deps"]
    },
    {
      "regex": "([^\\t]+)\\t+\\-sdk (.*)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "vendor\\/md5",
      "exceptionStackTrace": null,
      "matches": ["vendor/md5"]
    },
    { "regex": "^CONNECT", "exceptionStackTrace": null, "matches": ["CONNECT"] },
    {
      "regex": "^[^_-]",
      "exceptionStackTrace": null,
      "matches": ["_", "A", "0", "-", " ", "a"]
    },
    {
      "regex": "\\A([\\d_]*?\\.[\\d_]+)",
      "exceptionStackTrace": null,
      "matches": ["_.__", "_.", "_.0", "__._", "0._", "._", "_._"]
    },
    {
      "regex": "__CPAN_(DIR|FILE)__ ([^\\r\\n]+)\\r?\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": "[{}[\\](),;:]",
      "exceptionStackTrace": null,
      "matches": ["}", "{", "]", "[", ";", ",", ")", "(", ":"]
    },
    {
      "regex": "\\A(.+)ze$",
      "exceptionStackTrace": null,
      "matches": [
        "eVilze",
        "EVILze",
        "ev_ilze",
        "ev ilze",
        "ev4ilze",
        "eze",
        " ze",
        "6ze",
        "_ze",
        "ze",
        "evilze"
      ]
    },
    {
      "regex": "folders:\\s+my_folder",
      "exceptionStackTrace": null,
      "matches": [
        "folders:  my_folder",
        "folders:my_folder",
        "folders: my_folder"
      ]
    },
    {
      "regex": "([^:]/)/",
      "exceptionStackTrace": null,
      "matches": ["A//", "://", "0//", "///", " //", "a//"]
    },
    {
      "regex": "\\w{2,}\\ \\w{2,} \\d{1,}",
      "exceptionStackTrace": null,
      "matches": [
        "aa aa 00",
        "aa aa ",
        "aa a 0",
        "aa _a 0",
        "aa Aa 0",
        "aa 0a 0",
        "a aa 0",
        "_a aa 0",
        "Aa aa 0",
        "0a aa 0",
        "aa aa 0"
      ]
    },
    {
      "regex": "^I set form parameters to$",
      "exceptionStackTrace": null,
      "matches": ["I set form parameters to"]
    },
    {
      "regex": "\\[(b)\\](.*?)\\[/\\1\\]",
      "exceptionStackTrace": null,
      "matches": [
        "[b]][/b]",
        "[b][[/b]",
        "[b]/[/b]",
        "[b]eVil[/b]",
        "[b]EVIL[/b]",
        "[b]ev_il[/b]",
        "[b]ev il[/b]",
        "[b]ev4il[/b]",
        "[b]e[/b]",
        "[b] [/b]",
        "[b]6[/b]",
        "[b]_[/b]",
        "[b][/b]",
        "[b]evil[/b]"
      ]
    },
    {
      "regex": "//[/\\s]*(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "////",
        "///eVil",
        "///EVIL",
        "///ev_il",
        "///ev il",
        "///ev4il",
        "///e",
        "/// ",
        "///6",
        "///_",
        "///",
        "////evil",
        "//evil",
        "// evil",
        "//",
        "///evil"
      ]
    },
    { "regex": "Removing", "exceptionStackTrace": null, "matches": ["Removing"] },
    {
      "regex": "[Hh]u",
      "exceptionStackTrace": null,
      "matches": ["au", "Hu", "Au", "hu"]
    },
    {
      "regex": "not compatible",
      "exceptionStackTrace": null,
      "matches": ["not compatible"]
    },
    {
      "regex": "^[a-zA-Z0-9_]+?$",
      "exceptionStackTrace": null,
      "matches": [
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "\\W+([\\d\\.]+).+/proof: (\\w+).+/location: ([^ \\n]+)./change: ([^/;]+)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "my_model.rb",
      "exceptionStackTrace": null,
      "matches": [
        "my_model_rb",
        "my_modelArb",
        "my_model0rb",
        "my_model rb",
        "my_modelarb"
      ]
    },
    {
      "regex": "(?>(?>(?>[[:space:]])+|(?>\\/\\*)(?>(?>(?!\\*\\/)(?>.))*)(?>\\*\\/)|(?>\\/\\/)(?>(?>[^\\n])*))*)\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?>"
      },
      "matches": []
    },
    {
      "regex": "\"frmSMS\"(.*?)tr>",
      "exceptionStackTrace": null,
      "matches": [
        "\"frmSMS\">tr>",
        "\"frmSMS\"\"tr>",
        "\"frmSMS\"eViltr>",
        "\"frmSMS\"EVILtr>",
        "\"frmSMS\"ev_iltr>",
        "\"frmSMS\"ev iltr>",
        "\"frmSMS\"ev4iltr>",
        "\"frmSMS\"etr>",
        "\"frmSMS\" tr>",
        "\"frmSMS\"6tr>",
        "\"frmSMS\"_tr>",
        "\"frmSMS\"tr>",
        "\"frmSMS\"eviltr>"
      ]
    },
    {
      "regex": "SSL certificate successfully added",
      "exceptionStackTrace": null,
      "matches": ["SSL certificate successfully added"]
    },
    {
      "regex": "<div\\s+data-winlet\\s*=\\s*\\\"([^\\?\\\"\\s]+)([^\\\"]*)\\\"",
      "exceptionStackTrace": null,
      "matches": [
        "<div data-winlet = \"evil?\"",
        "<div data-winlet = \"evil=\"",
        "<div data-winlet = \"evil<\"",
        "<div data-winlet = \"evil-\"",
        "<div data-winlet = \"evil\"\"",
        "<div data-winlet = \"evileVil\"",
        "<div data-winlet = \"evilEVIL\"",
        "<div data-winlet = \"evilev_il\"",
        "<div data-winlet = \"evilev il\"",
        "<div data-winlet = \"evilev4il\"",
        "<div data-winlet = \"evile\"",
        "<div data-winlet = \"evil \"",
        "<div data-winlet = \"evil6\"",
        "<div data-winlet = \"evil_\"",
        "<div data-winlet = \"?evil\"",
        "<div data-winlet = \"=evil\"",
        "<div data-winlet = \"<evil\"",
        "<div data-winlet = \"-evil\"",
        "<div data-winlet = \"\"evil\"",
        "<div data-winlet = \"eVilevil\"",
        "<div data-winlet = \"EVILevil\"",
        "<div data-winlet = \"ev_ilevil\"",
        "<div data-winlet = \"ev ilevil\"",
        "<div data-winlet = \"ev4ilevil\"",
        "<div data-winlet = \"eevil\"",
        "<div data-winlet = \" evil\"",
        "<div data-winlet = \"6evil\"",
        "<div data-winlet = \"_evil\"",
        "<div data-winlet = \"evil\"",
        "<div data-winlet =  \"evilevil\"",
        "<div data-winlet =\"evilevil\"",
        "<div data-winlet  = \"evilevil\"",
        "<div data-winlet= \"evilevil\"",
        "<div  data-winlet = \"evilevil\"",
        "<divdata-winlet = \"evilevil\"",
        "<div data-winlet=\"evil\"",
        "<div data-winlet = \"evilevil\""
      ]
    },
    { "regex": "(\\?\\?)", "exceptionStackTrace": null, "matches": ["??"] },
    {
      "regex": "NetSuite::Records::CashRefund with OPTIONS=(.*) could not be found",
      "exceptionStackTrace": null,
      "matches": [
        "NetSuite::Records::CashRefund with OPTIONS== could not be found",
        "NetSuite::Records::CashRefund with OPTIONS=: could not be found",
        "NetSuite::Records::CashRefund with OPTIONS=eVil could not be found",
        "NetSuite::Records::CashRefund with OPTIONS=EVIL could not be found",
        "NetSuite::Records::CashRefund with OPTIONS=ev_il could not be found",
        "NetSuite::Records::CashRefund with OPTIONS=ev il could not be found",
        "NetSuite::Records::CashRefund with OPTIONS=ev4il could not be found",
        "NetSuite::Records::CashRefund with OPTIONS=e could not be found",
        "NetSuite::Records::CashRefund with OPTIONS=  could not be found",
        "NetSuite::Records::CashRefund with OPTIONS=6 could not be found",
        "NetSuite::Records::CashRefund with OPTIONS=_ could not be found",
        "NetSuite::Records::CashRefund with OPTIONS= could not be found",
        "NetSuite::Records::CashRefund with OPTIONS=evil could not be found"
      ]
    },
    {
      "regex": "^url\\.([^=]+)\\.insteadof=(.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "url.evil.insteadof==",
        "url.evil.insteadof=.",
        "url.evil.insteadof=eVil",
        "url.evil.insteadof=EVIL",
        "url.evil.insteadof=ev_il",
        "url.evil.insteadof=ev il",
        "url.evil.insteadof=ev4il",
        "url.evil.insteadof=e",
        "url.evil.insteadof= ",
        "url.evil.insteadof=6",
        "url.evil.insteadof=_",
        "url.evil.insteadof=",
        "url.=.insteadof=evil",
        "url...insteadof=evil",
        "url.eVil.insteadof=evil",
        "url.EVIL.insteadof=evil",
        "url.ev_il.insteadof=evil",
        "url.ev il.insteadof=evil",
        "url.ev4il.insteadof=evil",
        "url.e.insteadof=evil",
        "url. .insteadof=evil",
        "url.6.insteadof=evil",
        "url._.insteadof=evil",
        "url..insteadof=evil",
        "url.evil.insteadof=evil"
      ]
    },
    {
      "regex": "(cod|mur|sil|vert|ind)ices$",
      "exceptionStackTrace": null,
      "matches": ["indices", "vertices", "silices", "murices", "codices"]
    },
    {
      "regex": "## \\[(.*)\\].* ##",
      "exceptionStackTrace": null,
      "matches": [
        "## [evil]] ##",
        "## [evil][ ##",
        "## [evil]# ##",
        "## [evil]eVil ##",
        "## [evil]EVIL ##",
        "## [evil]ev_il ##",
        "## [evil]ev il ##",
        "## [evil]ev4il ##",
        "## [evil]e ##",
        "## [evil]  ##",
        "## [evil]6 ##",
        "## [evil]_ ##",
        "## [evil] ##",
        "## []]evil ##",
        "## [[]evil ##",
        "## [#]evil ##",
        "## [eVil]evil ##",
        "## [EVIL]evil ##",
        "## [ev_il]evil ##",
        "## [ev il]evil ##",
        "## [ev4il]evil ##",
        "## [e]evil ##",
        "## [ ]evil ##",
        "## [6]evil ##",
        "## [_]evil ##",
        "## []evil ##",
        "## [] ##",
        "## [evil]evil ##"
      ]
    },
    {
      "regex": "(?i)^job\\\\w*\\\\s*(\\\\d+)?",
      "exceptionStackTrace": null,
      "matches": [
        "job\\w\\s\\d\\d",
        "job\\w\\s",
        "job\\w\\s\\dd",
        "job\\w\\s\\",
        "job\\w\\ss\\d",
        "job\\w\\\\d",
        "job\\ww\\s\\d",
        "job\\\\s\\d",
        "job\\\\",
        "job\\w\\s\\d"
      ]
    },
    {
      "regex": "test_resources\\?include=nil_resources",
      "exceptionStackTrace": null,
      "matches": ["test_resources?include=nil_resources"]
    },
    {
      "regex": "\\A(?:REGR_SXY)",
      "exceptionStackTrace": null,
      "matches": ["REGR_SXY"]
    },
    {
      "regex": "Successfully finished",
      "exceptionStackTrace": null,
      "matches": ["Successfully finished"]
    },
    {
      "regex": "^(subtract|intersect)$",
      "exceptionStackTrace": null,
      "matches": ["intersect", "subtract"]
    },
    {
      "regex": "^the \"([^\\\"]*)\" value for the node should be \"([^\\\"]*)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "the \"evil\" value for the node should be \"\"\"",
        "the \"evil\" value for the node should be \"eVil\"",
        "the \"evil\" value for the node should be \"EVIL\"",
        "the \"evil\" value for the node should be \"ev_il\"",
        "the \"evil\" value for the node should be \"ev il\"",
        "the \"evil\" value for the node should be \"ev4il\"",
        "the \"evil\" value for the node should be \"e\"",
        "the \"evil\" value for the node should be \" \"",
        "the \"evil\" value for the node should be \"6\"",
        "the \"evil\" value for the node should be \"_\"",
        "the \"evil\" value for the node should be \"\"",
        "the \"\"\" value for the node should be \"evil\"",
        "the \"eVil\" value for the node should be \"evil\"",
        "the \"EVIL\" value for the node should be \"evil\"",
        "the \"ev_il\" value for the node should be \"evil\"",
        "the \"ev il\" value for the node should be \"evil\"",
        "the \"ev4il\" value for the node should be \"evil\"",
        "the \"e\" value for the node should be \"evil\"",
        "the \" \" value for the node should be \"evil\"",
        "the \"6\" value for the node should be \"evil\"",
        "the \"_\" value for the node should be \"evil\"",
        "the \"\" value for the node should be \"evil\"",
        "the \"\" value for the node should be \"\"",
        "the \"evil\" value for the node should be \"evil\""
      ]
    },
    {
      "regex": "(?x)\n\t\\!\t\t\t\t\t\t\t\t\t\t# Open image\n\t(?<_1>\\<|\\=|\\>)?\t\t\t\t\t\t\t\t# Optional alignment\n\t(?:\t\t\t\t\t\t\t\t\t\t# Attributes\n\t# I swear, this is how the language is defined,\n\t# couldnt make it up if I tried.\n\t(?:\\([^)]+\\))?(?:\\{[^}]+\\})?(?:\\[[^\\]]+\\])?\n\t# Class, Style, Lang\n\t  | (?:\\{[^}]+\\})?(?:\\[[^\\]]+\\])?(?:\\([^)]+\\))?\n\t# Style, Lang, Class\n\t  | (?:\\[[^\\]]+\\])?(?:\\{[^}]+\\})?(?:\\([^)]+\\))?\n\t# Lang, Style, Class\n\t)?\n\t(?:\\.[ ])?            \t\t\t\t\t# Optional\n\t(?<_2>[^\\s(?<_3>!]+?)         \t\t\t\t\t# Image URL\n\t\\s?                \t\t\t\t\t\t# Optional space\n\t(?:\\((?<_4>(?:[^\\(\\)]|\\([^\\)]+\\))+?)\\))?   \t# Optional title\n\t\\!\t\t\t\t\t\t\t\t\t\t# Close image\n\t(?:\n\t:\n\t(?<_5>\\S*?(?:\\w|\\/|;))\t\t\t\t\t# URL\n\t(?=[^\\w\\/;]*?(?<_6><|\\s|$))\t\t\t\t# Catch closing punctuation\n\t)?\n\t",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<_"
      },
      "matches": []
    },
    {
      "regex": "^[*-] (.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "- -",
        "- *",
        "- eVil",
        "- EVIL",
        "- ev_il",
        "- ev il",
        "- ev4il",
        "- e",
        "-  ",
        "- 6",
        "- _",
        "* evil",
        "- ",
        "- evil"
      ]
    },
    {
      "regex": "^((-|\\+)?(\\d+(?:\\.\\d+)?)) *(kb|mb|gb|tb)$",
      "exceptionStackTrace": null,
      "matches": [
        "-0.0  kb",
        "-0.0kb",
        "-0.0.0 kb",
        "-0 kb",
        "-0.00 kb",
        "-0. kb",
        "-00.0 kb",
        "-.0 kb",
        "--0.0 kb",
        "0.0 kb",
        "0tb",
        "0gb",
        "0mb",
        "0kb",
        "+0.0 kb",
        "-0.0 tb",
        "-0.0 gb",
        "-0.0 mb",
        "-0.0 kb"
      ]
    },
    {
      "regex": "(?x) (?: (?= \\s )  (?:(?<=else|new|return) | (?<!\\w)) (\\s+))?\n      (\\b\n        (?!(while|for|do|if|else|switch|catch|enumerate|return|r?iterate)\\s*\\()(?:(?!NS)[A-Za-z_][A-Za-z0-9_]*+\\b | :: )++                  # actual name\n      )\n       \\s*(\\()",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "multiple repeat"
      },
      "matches": []
    },
    {
      "regex": "^unix\\((.+)\\)\\/(.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "unix(evil)//",
        "unix(evil)/)",
        "unix(evil)/(",
        "unix(evil)/eVil",
        "unix(evil)/EVIL",
        "unix(evil)/ev_il",
        "unix(evil)/ev il",
        "unix(evil)/ev4il",
        "unix(evil)/e",
        "unix(evil)/ ",
        "unix(evil)/6",
        "unix(evil)/_",
        "unix(evil)/",
        "unix(/)/evil",
        "unix())/evil",
        "unix(()/evil",
        "unix(eVil)/evil",
        "unix(EVIL)/evil",
        "unix(ev_il)/evil",
        "unix(ev il)/evil",
        "unix(ev4il)/evil",
        "unix(e)/evil",
        "unix( )/evil",
        "unix(6)/evil",
        "unix(_)/evil",
        "unix()/evil",
        "unix(evil)/evil"
      ]
    },
    {
      "regex": "^Positive_(\\w+)\\s+\"(.+)\"",
      "exceptionStackTrace": null,
      "matches": [
        "Positive_evil \"\"\"",
        "Positive_evil \"eVil\"",
        "Positive_evil \"EVIL\"",
        "Positive_evil \"ev_il\"",
        "Positive_evil \"ev il\"",
        "Positive_evil \"ev4il\"",
        "Positive_evil \"e\"",
        "Positive_evil \" \"",
        "Positive_evil \"6\"",
        "Positive_evil \"_\"",
        "Positive_evil \"\"",
        "Positive_evil  \"evil\"",
        "Positive_evil\"evil\"",
        "Positive_eVil \"evil\"",
        "Positive_EVIL \"evil\"",
        "Positive_ev_il \"evil\"",
        "Positive_ev il \"evil\"",
        "Positive_ev4il \"evil\"",
        "Positive_e \"evil\"",
        "Positive_  \"evil\"",
        "Positive_6 \"evil\"",
        "Positive__ \"evil\"",
        "Positive_ \"evil\"",
        "Positive_evil \"evil\""
      ]
    },
    {
      "regex": "^:twoAnons (<.*sameAs>|owl:sameAs) \\(\\[\\s*a :mother\\] \\[\\s*a :father\\]\\) \\.$",
      "exceptionStackTrace": null,
      "matches": [
        ":twoAnons <evilsameAs> ([ a :mother] [  a :father]) .",
        ":twoAnons <evilsameAs> ([ a :mother] [a :father]) .",
        ":twoAnons <evilsameAs> ([  a :mother] [ a :father]) .",
        ":twoAnons <evilsameAs> ([a :mother] [ a :father]) .",
        ":twoAnons <]sameAs> ([ a :mother] [ a :father]) .",
        ":twoAnons <[sameAs> ([ a :mother] [ a :father]) .",
        ":twoAnons <>sameAs> ([ a :mother] [ a :father]) .",
        ":twoAnons <<sameAs> ([ a :mother] [ a :father]) .",
        ":twoAnons <:sameAs> ([ a :mother] [ a :father]) .",
        ":twoAnons <.sameAs> ([ a :mother] [ a :father]) .",
        ":twoAnons <)sameAs> ([ a :mother] [ a :father]) .",
        ":twoAnons <(sameAs> ([ a :mother] [ a :father]) .",
        ":twoAnons <eVilsameAs> ([ a :mother] [ a :father]) .",
        ":twoAnons <EVILsameAs> ([ a :mother] [ a :father]) .",
        ":twoAnons <ev_ilsameAs> ([ a :mother] [ a :father]) .",
        ":twoAnons <ev ilsameAs> ([ a :mother] [ a :father]) .",
        ":twoAnons <ev4ilsameAs> ([ a :mother] [ a :father]) .",
        ":twoAnons <esameAs> ([ a :mother] [ a :father]) .",
        ":twoAnons < sameAs> ([ a :mother] [ a :father]) .",
        ":twoAnons <6sameAs> ([ a :mother] [ a :father]) .",
        ":twoAnons <_sameAs> ([ a :mother] [ a :father]) .",
        ":twoAnons <sameAs> ([ a :mother] [ a :father]) .",
        ":twoAnons owl:sameAs ([a :mother] [a :father]) .",
        ":twoAnons <sameAs> ([a :mother] [a :father]) .",
        ":twoAnons owl:sameAs ([ a :mother] [ a :father]) .",
        ":twoAnons <evilsameAs> ([ a :mother] [ a :father]) ."
      ]
    },
    {
      "regex": "\\.(?:(?:tar\\.|t)gz|zip)$",
      "exceptionStackTrace": null,
      "matches": [".zip", ".tgz", ".tar.gz"]
    },
    {
      "regex": "\\bhe\\s+is\\b",
      "exceptionStackTrace": null,
      "matches": ["he  is", "heis", "he is"]
    },
    {
      "regex": "\\{([^\\{]+)\\}",
      "exceptionStackTrace": null,
      "matches": [
        "{}}",
        "{{}",
        "{eVil}",
        "{EVIL}",
        "{ev_il}",
        "{ev il}",
        "{ev4il}",
        "{e}",
        "{ }",
        "{6}",
        "{_}",
        "{}",
        "{evil}"
      ]
    },
    {
      "regex": "[\\w-]+\\([^)]*\\).*",
      "exceptionStackTrace": null,
      "matches": [
        "evil(evil)-",
        "evil(evil))",
        "evil(evil)(",
        "evil(evil)eVil",
        "evil(evil)EVIL",
        "evil(evil)ev_il",
        "evil(evil)ev il",
        "evil(evil)ev4il",
        "evil(evil)e",
        "evil(evil) ",
        "evil(evil)6",
        "evil(evil)_",
        "evil(evil)",
        "evil(-)evil",
        "evil())evil",
        "evil(()evil",
        "evil(eVil)evil",
        "evil(EVIL)evil",
        "evil(ev_il)evil",
        "evil(ev il)evil",
        "evil(ev4il)evil",
        "evil(e)evil",
        "evil( )evil",
        "evil(6)evil",
        "evil(_)evil",
        "evil()evil",
        "-(evil)evil",
        ")(evil)evil",
        "((evil)evil",
        "eVil(evil)evil",
        "EVIL(evil)evil",
        "ev_il(evil)evil",
        "ev il(evil)evil",
        "ev4il(evil)evil",
        "e(evil)evil",
        " (evil)evil",
        "6(evil)evil",
        "_(evil)evil",
        "(evil)evil",
        "evil()",
        "evil(evil)evil"
      ]
    },
    {
      "regex": "^(class|struct)",
      "exceptionStackTrace": null,
      "matches": ["struct", "class"]
    },
    {
      "regex": "^(Show HN)",
      "exceptionStackTrace": null,
      "matches": ["Show HN"]
    },
    {
      "regex": "(?:Record )?expires(?: on)?\\.* ?:? +(?:\\w{3}, )?(\\w{3,9})\\s{1,2}(\\d{1,2}),? (\\d{4})",
      "exceptionStackTrace": null,
      "matches": [
        "Record expires on. : aaa, aaa 0, 00000",
        "Record expires on. : aaa, aaa 0, 000",
        "Record expires on. : aaa, aaa 0,, 0000",
        "Record expires on. : aaa, aaa 0 0000",
        "Record expires on. : aaa, aaa 000, 0000",
        "Record expires on. : aaa, aaa 00, 0000",
        "Record expires on. : aaa, aaa , 0000",
        "Record expires on. : aaa, aaa   0, 0000",
        "Record expires on. : aaa, aaa  0, 0000",
        "Record expires on. : aaa, aaa0, 0000",
        "Record expires on. : aaa, aaaaaaaaaa 0, 0000",
        "Record expires on. : aaa, aaaaaaaaa 0, 0000",
        "Record expires on. : aaa, aa 0, 0000",
        "Record expires on. : aaa, _aa 0, 0000",
        "Record expires on. : aaa, Aaa 0, 0000",
        "Record expires on. : aaa, 0aa 0, 0000",
        "Record expires on. : aaa, aaa, aaa 0, 0000",
        "Record expires on. : aaa 0, 0000",
        "Record expires on. : aaaa, aaa 0, 0000",
        "Record expires on. : aa, aaa 0, 0000",
        "Record expires on. : _aa, aaa 0, 0000",
        "Record expires on. : Aaa, aaa 0, 0000",
        "Record expires on. : 0aa, aaa 0, 0000",
        "Record expires on. :  aaa, aaa 0, 0000",
        "Record expires on. :aaa, aaa 0, 0000",
        "Record expires on. :: aaa, aaa 0, 0000",
        "Record expires on.  aaa, aaa 0, 0000",
        "Record expires on.  : aaa, aaa 0, 0000",
        "Record expires on.: aaa, aaa 0, 0000",
        "Record expires on.. : aaa, aaa 0, 0000",
        "Record expires on : aaa, aaa 0, 0000",
        "Record expires on on. : aaa, aaa 0, 0000",
        "Record expires. : aaa, aaa 0, 0000",
        "Record Record expires on. : aaa, aaa 0, 0000",
        "expires on. : aaa, aaa 0, 0000",
        "expires aaa 0 0000",
        "Record expires on. : aaa, aaa 0, 0000"
      ]
    },
    {
      "regex": "^(?:true|false)$",
      "exceptionStackTrace": null,
      "matches": ["false", "true"]
    },
    {
      "regex": "(.+)/([^/.]+).([A-Z]{3,5})",
      "exceptionStackTrace": null,
      "matches": [
        "evil/evilaAAAAAA",
        "evil/evilaAAAAA",
        "evil/evilaAA",
        "evil/evilAAAA",
        "evil/evil0AAA",
        "evil/evil/AAA",
        "evil/evil.AAA",
        "evil/evil AAA",
        "evil//aAAA",
        "evil/.aAAA",
        "evil/eVilaAAA",
        "evil/EVILaAAA",
        "evil/ev_ilaAAA",
        "evil/ev ilaAAA",
        "evil/ev4ilaAAA",
        "evil/eaAAA",
        "evil/ aAAA",
        "evil/6aAAA",
        "evil/_aAAA",
        "evil/aAAA",
        "//evilaAAA",
        "./evilaAAA",
        "eVil/evilaAAA",
        "EVIL/evilaAAA",
        "ev_il/evilaAAA",
        "ev il/evilaAAA",
        "ev4il/evilaAAA",
        "e/evilaAAA",
        " /evilaAAA",
        "6/evilaAAA",
        "_/evilaAAA",
        "/evilaAAA",
        "evil/evilaAAA"
      ]
    },
    {
      "regex": "[\\p{Blank}]+$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\p"
      },
      "matches": []
    },
    {
      "regex": "&#0*39;",
      "exceptionStackTrace": null,
      "matches": ["&#0039;", "&#39;", "&#039;"]
    },
    {
      "regex": "[a-zA-Z0-9]{94}\\=\\=\\-\\-[a-z0-9]{40}",
      "exceptionStackTrace": null,
      "matches": [
        "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000==--00000000000000000000000000000000000000000",
        "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000==--000000000000000000000000000000000000000",
        "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000==--a000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000==--0000000000000000000000000000000000000000",
        "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000==--0000000000000000000000000000000000000000",
        "a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000==--0000000000000000000000000000000000000000",
        "A000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000==--0000000000000000000000000000000000000000",
        "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000==--0000000000000000000000000000000000000000"
      ]
    },
    {
      "regex": "\\s+(Jr|Sr)\\s*$",
      "exceptionStackTrace": null,
      "matches": [" Jr  ", "  Jr ", "Jr ", " Sr", " Jr", " Sr ", " Jr "]
    },
    {
      "regex": "^(.*?)(-?[\\d.]+)(\\D+)evol\\s+step\\s+([\\d.]+)(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil-.evilevol step ..",
        "evil-.evilevol step .-",
        "evil-.evilevol step .eVil",
        "evil-.evilevol step .EVIL",
        "evil-.evilevol step .ev_il",
        "evil-.evilevol step .ev il",
        "evil-.evilevol step .ev4il",
        "evil-.evilevol step .e",
        "evil-.evilevol step . ",
        "evil-.evilevol step .6",
        "evil-.evilevol step ._",
        "evil-.evilevol step .",
        "evil-.evilevol step ..evil",
        "evil-.evilevol step evil",
        "evil-.evilevol step 0evil",
        "evil-.evilevol step  .evil",
        "evil-.evilevol step.evil",
        "evil-.evilevol  step .evil",
        "evil-.evilevolstep .evil",
        "evil-..evol step .evil",
        "evil-.-evol step .evil",
        "evil-.eVilevol step .evil",
        "evil-.EVILevol step .evil",
        "evil-.ev_ilevol step .evil",
        "evil-.ev ilevol step .evil",
        "evil-.ev4ilevol step .evil",
        "evil-.eevol step .evil",
        "evil-. evol step .evil",
        "evil-.6evol step .evil",
        "evil-._evol step .evil",
        "evil-.evol step .evil",
        "evil-..evilevol step .evil",
        "evil-evilevol step .evil",
        "evil-0evilevol step .evil",
        "evil--.evilevol step .evil",
        "evil.evilevol step .evil",
        ".-.evilevol step .evil",
        "--.evilevol step .evil",
        "eVil-.evilevol step .evil",
        "EVIL-.evilevol step .evil",
        "ev_il-.evilevol step .evil",
        "ev il-.evilevol step .evil",
        "ev4il-.evilevol step .evil",
        "e-.evilevol step .evil",
        " -.evilevol step .evil",
        "6-.evilevol step .evil",
        "_-.evilevol step .evil",
        "-.evilevol step .evil",
        ".evilevol step .",
        "evil-.evilevol step .evil"
      ]
    },
    {
      "regex": "^\\s*compiler\\.version=14$",
      "exceptionStackTrace": null,
      "matches": [
        "  compiler.version=14",
        "compiler.version=14",
        " compiler.version=14"
      ]
    },
    {
      "regex": "id=([0-9]+)&",
      "exceptionStackTrace": null,
      "matches": ["id=00&", "id=&", "id=0&"]
    },
    {
      "regex": "device(?!s)",
      "exceptionStackTrace": null,
      "matches": ["device"]
    },
    {
      "regex": "^ {0,2}( ?_){3,}[ \\t]*$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": ".*\\\"entity-type\\\":\\\"workflow\\\",\\\"id\\\":\\\"([^\\\"]*)\\\".*",
      "exceptionStackTrace": null,
      "matches": [
        "evil\"entity-type\":\"workflow\",\"id\":\"evil\":",
        "evil\"entity-type\":\"workflow\",\"id\":\"evil\"-",
        "evil\"entity-type\":\"workflow\",\"id\":\"evil\",",
        "evil\"entity-type\":\"workflow\",\"id\":\"evil\"\"",
        "evil\"entity-type\":\"workflow\",\"id\":\"evil\"eVil",
        "evil\"entity-type\":\"workflow\",\"id\":\"evil\"EVIL",
        "evil\"entity-type\":\"workflow\",\"id\":\"evil\"ev_il",
        "evil\"entity-type\":\"workflow\",\"id\":\"evil\"ev il",
        "evil\"entity-type\":\"workflow\",\"id\":\"evil\"ev4il",
        "evil\"entity-type\":\"workflow\",\"id\":\"evil\"e",
        "evil\"entity-type\":\"workflow\",\"id\":\"evil\" ",
        "evil\"entity-type\":\"workflow\",\"id\":\"evil\"6",
        "evil\"entity-type\":\"workflow\",\"id\":\"evil\"_",
        "evil\"entity-type\":\"workflow\",\"id\":\"evil\"",
        "evil\"entity-type\":\"workflow\",\"id\":\":\"evil",
        "evil\"entity-type\":\"workflow\",\"id\":\"-\"evil",
        "evil\"entity-type\":\"workflow\",\"id\":\",\"evil",
        "evil\"entity-type\":\"workflow\",\"id\":\"\"\"evil",
        "evil\"entity-type\":\"workflow\",\"id\":\"eVil\"evil",
        "evil\"entity-type\":\"workflow\",\"id\":\"EVIL\"evil",
        "evil\"entity-type\":\"workflow\",\"id\":\"ev_il\"evil",
        "evil\"entity-type\":\"workflow\",\"id\":\"ev il\"evil",
        "evil\"entity-type\":\"workflow\",\"id\":\"ev4il\"evil",
        "evil\"entity-type\":\"workflow\",\"id\":\"e\"evil",
        "evil\"entity-type\":\"workflow\",\"id\":\" \"evil",
        "evil\"entity-type\":\"workflow\",\"id\":\"6\"evil",
        "evil\"entity-type\":\"workflow\",\"id\":\"_\"evil",
        "evil\"entity-type\":\"workflow\",\"id\":\"\"evil",
        ":\"entity-type\":\"workflow\",\"id\":\"evil\"evil",
        "-\"entity-type\":\"workflow\",\"id\":\"evil\"evil",
        ",\"entity-type\":\"workflow\",\"id\":\"evil\"evil",
        "\"\"entity-type\":\"workflow\",\"id\":\"evil\"evil",
        "eVil\"entity-type\":\"workflow\",\"id\":\"evil\"evil",
        "EVIL\"entity-type\":\"workflow\",\"id\":\"evil\"evil",
        "ev_il\"entity-type\":\"workflow\",\"id\":\"evil\"evil",
        "ev il\"entity-type\":\"workflow\",\"id\":\"evil\"evil",
        "ev4il\"entity-type\":\"workflow\",\"id\":\"evil\"evil",
        "e\"entity-type\":\"workflow\",\"id\":\"evil\"evil",
        " \"entity-type\":\"workflow\",\"id\":\"evil\"evil",
        "6\"entity-type\":\"workflow\",\"id\":\"evil\"evil",
        "_\"entity-type\":\"workflow\",\"id\":\"evil\"evil",
        "\"entity-type\":\"workflow\",\"id\":\"evil\"evil",
        "\"entity-type\":\"workflow\",\"id\":\"\"",
        "evil\"entity-type\":\"workflow\",\"id\":\"evil\"evil"
      ]
    },
    {
      "regex": "Wisepdf javascript",
      "exceptionStackTrace": null,
      "matches": ["Wisepdf javascript"]
    },
    {
      "regex": "^I fill in text fields as follows:$",
      "exceptionStackTrace": null,
      "matches": ["I fill in text fields as follows:"]
    },
    {
      "regex": "^[a-zA-Z0-9/_]+$",
      "exceptionStackTrace": null,
      "matches": [
        "/",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "\\A(.*?)(?<!\\\\)",
      "exceptionStackTrace": null,
      "matches": [
        "\\",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "Transaction approved",
      "exceptionStackTrace": null,
      "matches": ["Transaction approved"]
    },
    {
      "regex": "(^|/)gradlew\\\\.bat$",
      "exceptionStackTrace": null,
      "matches": [
        "gradlew\\\\bat",
        "gradlew\\Abat",
        "gradlew\\0bat",
        "gradlew\\/bat",
        "gradlew\\ bat",
        "/gradlew\\abat",
        "gradlew\\abat"
      ]
    },
    {
      "regex": "is\\snot\\sa\\svalid\\sproperty",
      "exceptionStackTrace": null,
      "matches": ["is not a valid property"]
    },
    {
      "regex": "\\v+\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "^permission-to-forward$",
      "exceptionStackTrace": null,
      "matches": ["permission-to-forward"]
    },
    {
      "regex": "^(\\d\\d?):?(\\d\\d)?:?(\\d\\d)?\\.?(\\d\\d\\d)?$",
      "exceptionStackTrace": null,
      "matches": [
        "00:00:00.000000",
        "00:00:00.",
        "00:00:00..000",
        "00:00:00000",
        "00:00:0000.000",
        "00:00:.000",
        "00:00::00.000",
        "00:0000.000",
        "00:0000:00.000",
        "00::00.000",
        "00::00:00.000",
        "0000:00.000",
        "000:00:00.000",
        "0:00:00.000",
        "0",
        "00:00:00.000"
      ]
    },
    {
      "regex": "either: Last argument must be a Sum Type",
      "exceptionStackTrace": null,
      "matches": ["either: Last argument must be a Sum Type"]
    },
    { "regex": "\\bair\\b", "exceptionStackTrace": null, "matches": ["air"] },
    {
      "regex": "^\\[\\s*frame-offset",
      "exceptionStackTrace": null,
      "matches": ["[  frame-offset", "[frame-offset", "[ frame-offset"]
    },
    {
      "regex": "^([^\\s\\d]+)(\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "evil00",
        "evil",
        "eVil0",
        "EVIL0",
        "ev_il0",
        "ev il0",
        "ev4il0",
        "e0",
        " 0",
        "60",
        "_0",
        "0",
        "evil0"
      ]
    },
    {
      "regex": "Device::Inverter::Aurora::DSP_",
      "exceptionStackTrace": null,
      "matches": ["Device::Inverter::Aurora::DSP_"]
    },
    {
      "regex": "\\AUser mailbox exceeds allowed size",
      "exceptionStackTrace": null,
      "matches": ["User mailbox exceeds allowed size"]
    },
    {
      "regex": "^(\\w+)[\\( ]",
      "exceptionStackTrace": null,
      "matches": [
        "evil(",
        "eVil ",
        "EVIL ",
        "ev_il ",
        "ev il ",
        "ev4il ",
        "e ",
        "  ",
        "6 ",
        "_ ",
        " ",
        "evil "
      ]
    },
    {
      "regex": "^\\A([^\\: \\t]+):\\s*(.+)\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "\\.webbynode_(.*)",
      "exceptionStackTrace": null,
      "matches": [
        ".webbynode_.",
        ".webbynode_eVil",
        ".webbynode_EVIL",
        ".webbynode_ev_il",
        ".webbynode_ev il",
        ".webbynode_ev4il",
        ".webbynode_e",
        ".webbynode_ ",
        ".webbynode_6",
        ".webbynode__",
        ".webbynode_",
        ".webbynode_evil"
      ]
    },
    {
      "regex": "(^`{3,})",
      "exceptionStackTrace": null,
      "matches": ["``", "```"]
    },
    {
      "regex": "/pub/data/noaa/2007/722874-93134-2007.gz",
      "exceptionStackTrace": null,
      "matches": [
        "/pub/data/noaa/2007/722874-93134-2007Agz",
        "/pub/data/noaa/2007/722874-93134-20070gz",
        "/pub/data/noaa/2007/722874-93134-2007/gz",
        "/pub/data/noaa/2007/722874-93134-2007-gz",
        "/pub/data/noaa/2007/722874-93134-2007 gz",
        "/pub/data/noaa/2007/722874-93134-2007agz"
      ]
    },
    {
      "regex": "^\\/(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "//",
        "/eVil",
        "/EVIL",
        "/ev_il",
        "/ev il",
        "/ev4il",
        "/e",
        "/ ",
        "/6",
        "/_",
        "/",
        "/evil"
      ]
    },
    {
      "regex": "PASSENGER_APP_ENV = development",
      "exceptionStackTrace": null,
      "matches": ["PASSENGER_APP_ENV = development"]
    },
    {
      "regex": "\\/\\/\\s*#endregion",
      "exceptionStackTrace": null,
      "matches": ["//  #endregion", "//#endregion", "// #endregion"]
    },
    {
      "regex": "Resource:([a-zA-Z_]+)",
      "exceptionStackTrace": null,
      "matches": [
        "Resource::",
        "Resource:eVil",
        "Resource:EVIL",
        "Resource:ev_il",
        "Resource:ev il",
        "Resource:ev4il",
        "Resource:e",
        "Resource: ",
        "Resource:6",
        "Resource:_",
        "Resource:",
        "Resource:evil"
      ]
    },
    {
      "regex": "(\\s|^|\\W)@[0-9a-zA-Z-_\\.]+",
      "exceptionStackTrace": null,
      "matches": [
        "a@evil",
        "_@evil",
        "A@evil",
        "@@evil",
        "0@evil",
        ".@evil",
        "-@evil",
        " @@",
        " @.",
        " @-",
        " @eVil",
        " @EVIL",
        " @ev_il",
        " @ev il",
        " @ev4il",
        " @e",
        " @ ",
        " @6",
        " @_",
        " @",
        ";@evil",
        "@evil",
        " @evil"
      ]
    },
    {
      "regex": "^\\S+/ip6tables",
      "exceptionStackTrace": null,
      "matches": [
        "//ip6tables",
        "eVil/ip6tables",
        "EVIL/ip6tables",
        "ev_il/ip6tables",
        "ev il/ip6tables",
        "ev4il/ip6tables",
        "e/ip6tables",
        " /ip6tables",
        "6/ip6tables",
        "_/ip6tables",
        "/ip6tables",
        "evil/ip6tables"
      ]
    },
    {
      "regex": "^\\s*<\\?xml.*\\?>",
      "exceptionStackTrace": null,
      "matches": [
        " <?xml??>",
        " <?xml>?>",
        " <?xml<?>",
        " <?xmleVil?>",
        " <?xmlEVIL?>",
        " <?xmlev_il?>",
        " <?xmlev il?>",
        " <?xmlev4il?>",
        " <?xmle?>",
        " <?xml ?>",
        " <?xml6?>",
        " <?xml_?>",
        " <?xml?>",
        "  <?xmlevil?>",
        "<?xmlevil?>",
        "<?xml?>",
        " <?xmlevil?>"
      ]
    },
    {
      "regex": "^urn:uuid:",
      "exceptionStackTrace": null,
      "matches": ["urn:uuid:"]
    },
    {
      "regex": "id=1\\/title='title'$",
      "exceptionStackTrace": null,
      "matches": ["id=1/title='title'"]
    },
    {
      "regex": "(?:open|net)bsd",
      "exceptionStackTrace": null,
      "matches": ["netbsd", "openbsd"]
    },
    {
      "regex": "SOP Class",
      "exceptionStackTrace": null,
      "matches": ["SOP Class"]
    },
    {
      "regex": "\\(\\?P[<](.+?)[>]",
      "exceptionStackTrace": null,
      "matches": [
        "(?P<?>",
        "(?P<>>",
        "(?P<<>",
        "(?P<(>",
        "(?P<eVil>",
        "(?P<EVIL>",
        "(?P<ev_il>",
        "(?P<ev il>",
        "(?P<ev4il>",
        "(?P<e>",
        "(?P< >",
        "(?P<6>",
        "(?P<_>",
        "(?P<>",
        "(?P<evil>"
      ]
    },
    {
      "regex": "(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)\\11",
      "exceptionStackTrace": null,
      "matches": ["abcdefghijkk"]
    },
    {
      "regex": "D[oD]? *MMMM?",
      "exceptionStackTrace": null,
      "matches": [
        "DD MMMMM",
        "DD MMM",
        "DD  MMMM",
        "DDMMMM",
        "DDD MMMM",
        "D MMMM",
        "Do MMMM",
        "Da MMMM",
        "DA MMMM",
        "DMMM",
        "DD MMMM"
      ]
    },
    {
      "regex": "^[a-zA-Z][a-zA-Z0-9]{2}_all$",
      "exceptionStackTrace": null,
      "matches": [
        "A000_all",
        "A0_all",
        "Aa0_all",
        "AA0_all",
        "a00_all",
        "A00_all"
      ]
    },
    {
      "regex": "\n            ^HTTP/(1\\.1|1\\.0)\\s # Version\n            (302|200).+?\\r\\n # Status code\n            (.*?)\\r\\n\\r\\n # Header\n            (.*?)$ # Data\n            ",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": "The game is set in the Burgundy region of High Medieval France\\.",
      "exceptionStackTrace": null,
      "matches": [
        "The game is set in the Burgundy region of High Medieval France."
      ]
    },
    {
      "regex": "(.+)\\n(\\d{2}:\\d{2}:\\d{2},\\d{3} --> \\d{2}:\\d{2}:\\d{2},\\d{3})\\n((?:^.*$\\n)*?)\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "___dot_btw_cpnts___",
      "exceptionStackTrace": null,
      "matches": ["___dot_btw_cpnts___"]
    },
    {
      "regex": "(?<![<>])(<F>[Ss]h?ol\\x{e1}thraigh<\\/F>)(?![<>])",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "incomplete escape \\x"
      },
      "matches": []
    },
    {
      "regex": "^(entity|(?:all)?entities)by(.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "allallentitiesbyevil",
        "entitybyeVil",
        "entitybyEVIL",
        "entitybyev_il",
        "entitybyev il",
        "entitybyev4il",
        "entitybye",
        "entityby ",
        "entityby6",
        "entityby_",
        "entityby",
        "entitiesbyevil",
        "allentitiesbyevil",
        "entitybyevil"
      ]
    },
    {
      "regex": "\\d{1,3}$",
      "exceptionStackTrace": null,
      "matches": ["0000", "000", "", "0"]
    },
    {
      "regex": "Snatch\\d{1,5}",
      "exceptionStackTrace": null,
      "matches": ["Snatch000000", "Snatch00000", "Snatch", "Snatch0"]
    },
    {
      "regex": "([?&]v=|./././)([^#&]+)",
      "exceptionStackTrace": null,
      "matches": [
        "a/a/A/evil",
        "a/a/?/evil",
        "a/a/=/evil",
        "a/a/0/evil",
        "a/a///evil",
        "a/a/&/evil",
        "a/a/#/evil",
        "a/a/ /evil",
        "a/A/a/evil",
        "a/?/a/evil",
        "a/=/a/evil",
        "a/0/a/evil",
        "a///a/evil",
        "a/&/a/evil",
        "a/#/a/evil",
        "a/ /a/evil",
        "A/a/a/evil",
        "?/a/a/evil",
        "=/a/a/evil",
        "0/a/a/evil",
        "//a/a/evil",
        "&/a/a/evil",
        "#/a/a/evil",
        " /a/a/evil",
        "&v=?",
        "&v==",
        "&v=/",
        "&v=&",
        "&v=#",
        "&v=eVil",
        "&v=EVIL",
        "&v=ev_il",
        "&v=ev il",
        "&v=ev4il",
        "&v=e",
        "&v= ",
        "&v=6",
        "&v=_",
        "&v=",
        "?v=evil",
        "a/a/a/evil",
        "&v=evil"
      ]
    },
    {
      "regex": "(,\\s*)?([a-zA-Z]{2}|\\s\\w+\\s*\\w*)(,\\s*)?$",
      "exceptionStackTrace": null,
      "matches": [
        ",  evil eVil, ",
        ",  evil EVIL, ",
        ",  evil ev_il, ",
        ",  evil ev il, ",
        ",  evil ev4il, ",
        ",  evil e, ",
        ",  evil  , ",
        ",  evil 6, ",
        ",  evil _, ",
        ",  evil , ",
        ",  evil  evil, ",
        ",  evilevil, ",
        ",  eVil evil, ",
        ",  EVIL evil, ",
        ",  ev_il evil, ",
        ",  ev il evil, ",
        ",  ev4il evil, ",
        ",  e evil, ",
        ",    evil, ",
        ",  6 evil, ",
        ",  _ evil, ",
        ",   evil, ",
        ", AA, , ",
        ", AA",
        ", AA,  ",
        ", AA,",
        ", AAA, ",
        ", A, ",
        ", aA, ",
        ", , AA, ",
        "AA, ",
        ",  AA, ",
        ",AA, ",
        " evil",
        "AA",
        ",  evil evil, ",
        ", AA, "
      ]
    },
    { "regex": "\\.smcat$", "exceptionStackTrace": null, "matches": [".smcat"] },
    {
      "regex": "^[_1-9][_0-9][_0-9][_0-9]-[_0-9][_0-9]-[_0-9][_0-9]$",
      "exceptionStackTrace": null,
      "matches": [
        "____-__-_0",
        "____-__-0_",
        "____-_0-__",
        "____-0_-__",
        "___0-__-__",
        "__0_-__-__",
        "_0__-__-__",
        "1___-__-__",
        "0___-__-__",
        "____-__-__"
      ]
    },
    {
      "regex": "{MODULEDIR}",
      "exceptionStackTrace": null,
      "matches": ["{MODULEDIR}"]
    },
    {
      "regex": "<$tag><\\/$tag>",
      "exceptionStackTrace": null,
      "matches": ["<tag></tag>"]
    },
    {
      "regex": "^([0-9]+)\\-(.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "0--",
        "0-eVil",
        "0-EVIL",
        "0-ev_il",
        "0-ev il",
        "0-ev4il",
        "0-e",
        "0- ",
        "0-6",
        "0-_",
        "0-",
        "00-evil",
        "-evil",
        "0-evil"
      ]
    },
    {
      "regex": "^author:\\s+(.*?)\\s<(.*?)>",
      "exceptionStackTrace": null,
      "matches": [
        "author: evil <>>",
        "author: evil <<>",
        "author: evil <:>",
        "author: evil <eVil>",
        "author: evil <EVIL>",
        "author: evil <ev_il>",
        "author: evil <ev il>",
        "author: evil <ev4il>",
        "author: evil <e>",
        "author: evil < >",
        "author: evil <6>",
        "author: evil <_>",
        "author: evil <>",
        "author: > <evil>",
        "author: < <evil>",
        "author: : <evil>",
        "author: eVil <evil>",
        "author: EVIL <evil>",
        "author: ev_il <evil>",
        "author: ev il <evil>",
        "author: ev4il <evil>",
        "author: e <evil>",
        "author:   <evil>",
        "author: 6 <evil>",
        "author: _ <evil>",
        "author:  <evil>",
        "author:  evil <evil>",
        "author:evil <evil>",
        "author:  <>",
        "author: evil <evil>"
      ]
    },
    {
      "regex": "TestTransactionLulz",
      "exceptionStackTrace": null,
      "matches": ["TestTransactionLulz"]
    },
    {
      "regex": "^I attempt to call a method that does not exist$",
      "exceptionStackTrace": null,
      "matches": ["I attempt to call a method that does not exist"]
    },
    {
      "regex": "(Trident|Edge)",
      "exceptionStackTrace": null,
      "matches": ["Edge", "Trident"]
    },
    {
      "regex": "^[5]\\.\\d\\.\\d$",
      "exceptionStackTrace": null,
      "matches": ["5.0.0"]
    },
    {
      "regex": "cacheBusterNotAdded.js",
      "exceptionStackTrace": null,
      "matches": [
        "cacheBusterNotAdded_js",
        "cacheBusterNotAddedAjs",
        "cacheBusterNotAdded0js",
        "cacheBusterNotAdded js",
        "cacheBusterNotAddedajs"
      ]
    },
    {
      "regex": "(&)#x([0-9a-f]+);?",
      "exceptionStackTrace": null,
      "matches": ["&#xa;;", "&#xaa;", "&#x;", "&#xg;", "&#x0;", "&#xa", "&#xa;"]
    },
    { "regex": "!/", "exceptionStackTrace": null, "matches": ["!/"] },
    {
      "regex": "(\\*\\*|__)(?=\\S)([^\\r]*?\\S[\\*_]*)\\1",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": "^\\{([0-9]+),([0-9]+)\\}",
      "exceptionStackTrace": null,
      "matches": ["{0,00}", "{0,}", "{00,0}", "{,0}", "{0,0}"]
    },
    { "regex": "[\\s-]", "exceptionStackTrace": null, "matches": [" ", "-"] },
    {
      "regex": "Bit rate\\s*:\\s*(\\d+)\n",
      "exceptionStackTrace": null,
      "matches": [
        "Bit rate : 00\n",
        "Bit rate : \n",
        "Bit rate :  0\n",
        "Bit rate :0\n",
        "Bit rate  : 0\n",
        "Bit rate: 0\n",
        "Bit rate:0\n",
        "Bit rate : 0\n"
      ]
    },
    {
      "regex": "(?:\\$\\$)|(?:\\${.+?})|(?:\\$[0-9A-Z_a-z]+)",
      "exceptionStackTrace": null,
      "matches": [
        "$}",
        "${",
        "$eVil",
        "$EVIL",
        "$ev_il",
        "$ev il",
        "$ev4il",
        "$e",
        "$ ",
        "$6",
        "$_",
        "$",
        "${}}",
        "${{}",
        "${$}",
        "${eVil}",
        "${EVIL}",
        "${ev_il}",
        "${ev il}",
        "${ev4il}",
        "${e}",
        "${ }",
        "${6}",
        "${_}",
        "${}",
        "$evil",
        "${evil}",
        "$$"
      ]
    },
    {
      "regex": "\\.worker.js$",
      "exceptionStackTrace": null,
      "matches": [
        ".workerAjs",
        ".worker0js",
        ".worker.js",
        ".worker js",
        ".workerajs"
      ]
    },
    {
      "regex": "^\\#<Class",
      "exceptionStackTrace": null,
      "matches": ["#<Class"]
    },
    {
      "regex": ".\\015?\\012",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported octal value 13"
      },
      "matches": []
    },
    {
      "regex": "^it should send a tweet$",
      "exceptionStackTrace": null,
      "matches": ["it should send a tweet"]
    },
    {
      "regex": "WebTracking\\/processRequest",
      "exceptionStackTrace": null,
      "matches": ["WebTracking/processRequest"]
    },
    {
      "regex": "[A-Z]([A-Z](?![a-z]))*",
      "exceptionStackTrace": null,
      "matches": ["AAA", "A", "AA"]
    },
    {
      "regex": "^\\s*([^:\\s]+)\\s*:\\s*(.*?)\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        " evil : evil  ",
        " evil : evil",
        " evil : : ",
        " evil : eVil ",
        " evil : EVIL ",
        " evil : ev_il ",
        " evil : ev il ",
        " evil : ev4il ",
        " evil : e ",
        " evil :   ",
        " evil : 6 ",
        " evil : _ ",
        " evil :  ",
        " evil :  evil ",
        " evil :evil ",
        " evil  : evil ",
        " evil: evil ",
        " : : evil ",
        " eVil : evil ",
        " EVIL : evil ",
        " ev_il : evil ",
        " ev il : evil ",
        " ev4il : evil ",
        " e : evil ",
        "   : evil ",
        " 6 : evil ",
        " _ : evil ",
        "  : evil ",
        "  evil : evil ",
        "evil : evil ",
        "evil:",
        " evil : evil "
      ]
    },
    {
      "regex": "\\.(ts|tsx)?$",
      "exceptionStackTrace": null,
      "matches": [".tsts", ".", ".tsx", ".ts"]
    },
    {
      "regex": "^$self->{ROOT}",
      "exceptionStackTrace": null,
      "matches": ["self->{ROOT}"]
    },
    {
      "regex": "add_column :users, :second_factor_attempts_count, :integer, default: 0",
      "exceptionStackTrace": null,
      "matches": [
        "add_column :users, :second_factor_attempts_count, :integer, default: 0"
      ]
    },
    {
      "regex": "^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}",
      "exceptionStackTrace": null,
      "matches": [
        "0.0.0.0000",
        "0.0.0.000",
        "0.0.0.",
        "0.0.0000.0",
        "0.0.000.0",
        "0.0..0",
        "0.0000.0.0",
        "0.000.0.0",
        "0..0.0",
        "0000.0.0.0",
        "000.0.0.0",
        ".0.0.0",
        "0.0.0.0"
      ]
    },
    {
      "regex": "(^|[^0-9A-Za-z\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u024f\u1e00-\u1eff\u2c60-\u2c7f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua7ff])((?:1(?:[\\s\\xa0]*(?:S\u1eed[\\s\\xa0]*(?:bi\\xEAn[\\s\\xa0]*ni\\xEAn|K\\xFD)|L\u1ecbch[\\s\\xa0]*s\u1eed)|Chr|\\.[\\s\\xa0]*(?:S\u1eed[\\s\\xa0]*(?:bi\\xEAn[\\s\\xa0]*ni\\xEAn|K\\xFD)|L\u1ecbch[\\s\\xa0]*s\u1eed))|I(?:\\.[\\s\\xa0]*(?:S\u1eed[\\s\\xa0]*(?:bi\\xEAn[\\s\\xa0]*ni\\xEAn|K\\xFD)|L\u1ecbch[\\s\\xa0]*s\u1eed)|[\\s\\xa0]*(?:S\u1eed[\\s\\xa0]*(?:bi\\xEAn[\\s\\xa0]*ni\\xEAn|K\\xFD)|L\u1ecbch[\\s\\xa0]*s\u1eed)))|(?:[1I](?:\\.[\\s\\xa0]*S\u1eed(?:[\\s\\xa0]*k\\xFD)?|[\\s\\xa0]*S\u1eed(?:[\\s\\xa0]*k\\xFD)?)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 160"
      },
      "matches": []
    },
    {
      "regex": "([a-zA-Z_-]+)\\=(.+)",
      "exceptionStackTrace": null,
      "matches": [
        "evil==",
        "evil=-",
        "evil=eVil",
        "evil=EVIL",
        "evil=ev_il",
        "evil=ev il",
        "evil=ev4il",
        "evil=e",
        "evil= ",
        "evil=6",
        "evil=_",
        "evil=",
        "==evil",
        "-=evil",
        "eVil=evil",
        "EVIL=evil",
        "ev_il=evil",
        "ev il=evil",
        "ev4il=evil",
        "e=evil",
        " =evil",
        "6=evil",
        "_=evil",
        "=evil",
        "evil=evil"
      ]
    },
    {
      "regex": "\\{\\s+.+",
      "exceptionStackTrace": null,
      "matches": [
        "{ {",
        "{ eVil",
        "{ EVIL",
        "{ ev_il",
        "{ ev il",
        "{ ev4il",
        "{ e",
        "{  ",
        "{ 6",
        "{ _",
        "{ ",
        "{  evil",
        "{evil",
        "{ evil"
      ]
    },
    {
      "regex": "\\A\\d{2}:\\d{2}\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "filename.*string",
      "exceptionStackTrace": null,
      "matches": [
        "filenameeVilstring",
        "filenameEVILstring",
        "filenameev_ilstring",
        "filenameev ilstring",
        "filenameev4ilstring",
        "filenameestring",
        "filename string",
        "filename6string",
        "filename_string",
        "filenamestring",
        "filenameevilstring"
      ]
    },
    {
      "regex": "type name",
      "exceptionStackTrace": null,
      "matches": ["type name"]
    },
    {
      "regex": "_VERSION_GOES_HERE_",
      "exceptionStackTrace": null,
      "matches": ["_VERSION_GOES_HERE_"]
    },
    {
      "regex": "(&(?:lt|gt|amp|quot);)",
      "exceptionStackTrace": null,
      "matches": ["&quot;", "&amp;", "&gt;", "&lt;"]
    },
    {
      "regex": "^(http|https):\\/\\/(gitlab.alibaba-inc.com|github.com)\\/(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "http://githubAcom/evil",
        "http://github:com/evil",
        "http://github0com/evil",
        "http://github/com/evil",
        "http://github-com/evil",
        "http://github com/evil",
        "http://gitlabaalibaba-incacom/:",
        "http://gitlabaalibaba-incacom//",
        "http://gitlabaalibaba-incacom/-",
        "http://gitlabaalibaba-incacom/eVil",
        "http://gitlabaalibaba-incacom/EVIL",
        "http://gitlabaalibaba-incacom/ev_il",
        "http://gitlabaalibaba-incacom/ev il",
        "http://gitlabaalibaba-incacom/ev4il",
        "http://gitlabaalibaba-incacom/e",
        "http://gitlabaalibaba-incacom/ ",
        "http://gitlabaalibaba-incacom/6",
        "http://gitlabaalibaba-incacom/_",
        "http://gitlabaalibaba-incAcom/evil",
        "http://gitlabaalibaba-inc:com/evil",
        "http://gitlabaalibaba-inc0com/evil",
        "http://gitlabaalibaba-inc/com/evil",
        "http://gitlabaalibaba-inc-com/evil",
        "http://gitlabaalibaba-inc com/evil",
        "http://gitlabAalibaba-incacom/evil",
        "http://gitlab:alibaba-incacom/evil",
        "http://gitlab0alibaba-incacom/evil",
        "http://gitlab/alibaba-incacom/evil",
        "http://gitlab-alibaba-incacom/evil",
        "http://gitlab alibaba-incacom/evil",
        "https://gitlabaalibaba-incacom/",
        "http://githubacom/",
        "http://gitlabaalibaba-incacom/",
        "https://gitlabaalibaba-incacom/evil",
        "http://githubacom/evil",
        "http://gitlabaalibaba-incacom/evil"
      ]
    },
    {
      "regex": "^\\s*\\[[^\\]]*[^\"a-zA-Z0-9]\\]$",
      "exceptionStackTrace": null,
      "matches": [
        " [evila]",
        " [evil]]",
        " [evil[]",
        " [evilA]",
        " [evil0]",
        " [evil\"]",
        " [] ]",
        " [[ ]",
        " [\" ]",
        " [eVil ]",
        " [EVIL ]",
        " [ev_il ]",
        " [ev il ]",
        " [ev4il ]",
        " [e ]",
        " [  ]",
        " [6 ]",
        " [_ ]",
        " [ ]",
        "  [evil ]",
        "[evil ]",
        "[ ]",
        " [evil ]"
      ]
    },
    { "regex": "mymodule", "exceptionStackTrace": null, "matches": ["mymodule"] },
    {
      "regex": "\u0001([a-zA-Z]*)([0-9]*) (.) ([A-Z]{1,3}) ([0-9]*) ([a-zA-Z0-9 ]*)",
      "exceptionStackTrace": null,
      "matches": [
        "\u0001evil0 a A 0 eVil",
        "\u0001evil0 a A 0 EVIL",
        "\u0001evil0 a A 0 ev_il",
        "\u0001evil0 a A 0 ev il",
        "\u0001evil0 a A 0 ev4il",
        "\u0001evil0 a A 0 e",
        "\u0001evil0 a A 0  ",
        "\u0001evil0 a A 0 6",
        "\u0001evil0 a A 0 _",
        "\u0001evil0 a A 0 ",
        "\u0001evil0 a A 00 evil",
        "\u0001evil0 a A  evil",
        "\u0001evil0 a AAAA 0 evil",
        "\u0001evil0 a AAA 0 evil",
        "\u0001evil0 a  0 evil",
        "\u0001evil0 _ A 0 evil",
        "\u0001evil0 A A 0 evil",
        "\u0001evil0 0 A 0 evil",
        "\u0001evil0   A 0 evil",
        "\u0001evil00 a A 0 evil",
        "\u0001evil a A 0 evil",
        "\u0001eVil0 a A 0 evil",
        "\u0001EVIL0 a A 0 evil",
        "\u0001ev_il0 a A 0 evil",
        "\u0001ev il0 a A 0 evil",
        "\u0001ev4il0 a A 0 evil",
        "\u0001e0 a A 0 evil",
        "\u0001 0 a A 0 evil",
        "\u000160 a A 0 evil",
        "\u0001_0 a A 0 evil",
        "\u00010 a A 0 evil",
        "\u0001 a A  ",
        "\u0001evil0 a A 0 evil"
      ]
    },
    {
      "regex": "<span class=\"disabled prev_page\">&laquo; Previous<\\/span>",
      "exceptionStackTrace": null,
      "matches": ["<span class=\"disabled prev_page\">&laquo; Previous</span>"]
    },
    { "regex": "^(530)", "exceptionStackTrace": null, "matches": ["530"] },
    {
      "regex": "\\\"map\\\"[ ]*:[ ]*\\{",
      "exceptionStackTrace": null,
      "matches": [
        "\"map\" :  {",
        "\"map\" :{",
        "\"map\"  : {",
        "\"map\": {",
        "\"map\":{",
        "\"map\" : {"
      ]
    },
    {
      "regex": "\\{(\\w+)}",
      "exceptionStackTrace": null,
      "matches": [
        "{eVil}",
        "{EVIL}",
        "{ev_il}",
        "{ev il}",
        "{ev4il}",
        "{e}",
        "{ }",
        "{6}",
        "{_}",
        "{}",
        "{evil}"
      ]
    },
    {
      "regex": "^[-_.a-z0-9]{3,128}$",
      "exceptionStackTrace": null,
      "matches": [
        ".................................................................................................................................",
        "................................................................................................................................",
        "..",
        "a..",
        "_..",
        "0..",
        "-..",
        "..."
      ]
    },
    { "regex": "myth", "exceptionStackTrace": null, "matches": ["myth"] },
    {
      "regex": "(nk|vk|lh|lf|li|ri|sk)",
      "exceptionStackTrace": null,
      "matches": ["sk", "ri", "li", "lf", "lh", "vk", "nk"]
    },
    {
      "regex": "\"(\\\\.|[^\"\\\\])*\"|'(\\\\.|[^'\\\\])*'|[\\[\\]]",
      "exceptionStackTrace": null,
      "matches": [
        "[",
        "']'",
        "'\\'",
        "'['",
        "'A'",
        "'0'",
        "'''",
        "'\"'",
        "' '",
        "'\\a\\a'",
        "'\\]'",
        "'\\\\'",
        "'\\['",
        "'\\A'",
        "'\\0'",
        "'\\''",
        "'\\\"'",
        "'\\ '",
        "\"]\"",
        "\"\\\"",
        "\"[\"",
        "\"A\"",
        "\"0\"",
        "\"'\"",
        "\"\"\"",
        "\" \"",
        "\"\\a\\a\"",
        "\"\\]\"",
        "\"\\\\\"",
        "\"\\[\"",
        "\"\\A\"",
        "\"\\0\"",
        "\"\\'\"",
        "\"\\\"\"",
        "\"\\ \"",
        "''",
        "\"\"",
        "]",
        "'a'",
        "'\\a'",
        "\"a\"",
        "\"\\a\""
      ]
    },
    {
      "regex": "^build an index on all sequences$",
      "exceptionStackTrace": null,
      "matches": ["build an index on all sequences"]
    },
    {
      "regex": "^(\\s*)((?:[0-9]+\\.)|\\-|\\+|\\*)\\s+",
      "exceptionStackTrace": null,
      "matches": [
        " 0.  ",
        " 0.",
        " 00. ",
        " . ",
        "  0. ",
        "* ",
        "+ ",
        "- ",
        "0. ",
        " * ",
        " + ",
        " - ",
        " 0. "
      ]
    },
    {
      "regex": "define ZLIB_VERSION \\\"(.+)\\\"",
      "exceptionStackTrace": null,
      "matches": [
        "define ZLIB_VERSION \"\"\"",
        "define ZLIB_VERSION \"eVil\"",
        "define ZLIB_VERSION \"EVIL\"",
        "define ZLIB_VERSION \"ev_il\"",
        "define ZLIB_VERSION \"ev il\"",
        "define ZLIB_VERSION \"ev4il\"",
        "define ZLIB_VERSION \"e\"",
        "define ZLIB_VERSION \" \"",
        "define ZLIB_VERSION \"6\"",
        "define ZLIB_VERSION \"_\"",
        "define ZLIB_VERSION \"\"",
        "define ZLIB_VERSION \"evil\""
      ]
    },
    { "regex": "pi\\B", "exceptionStackTrace": null, "matches": ["pi"] },
    {
      "regex": "^Trace: hello",
      "exceptionStackTrace": null,
      "matches": ["Trace: hello"]
    },
    {
      "regex": "\\\\ licen[sc]e",
      "exceptionStackTrace": null,
      "matches": ["\\ license", "\\ licenae", "\\ licence"]
    },
    {
      "regex": "\\n[\\s\\t\\n\\r]*\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "Provided list of item keys contains duplicates",
      "exceptionStackTrace": null,
      "matches": ["Provided list of item keys contains duplicates"]
    },
    {
      "regex": "hasPropPath: Array of Non-empty Strings or Integers required for first argument",
      "exceptionStackTrace": null,
      "matches": [
        "hasPropPath: Array of Non-empty Strings or Integers required for first argument"
      ]
    },
    {
      "regex": "\\d\\\\\\C-C\\w",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\C"
      },
      "matches": []
    },
    {
      "regex": "(\\d+)\\.(\\d+)\\.(\\d+)(_\\d+)?.*",
      "exceptionStackTrace": null,
      "matches": [
        "0.0.0_0.",
        "0.0.0_0eVil",
        "0.0.0_0EVIL",
        "0.0.0_0ev_il",
        "0.0.0_0ev il",
        "0.0.0_0ev4il",
        "0.0.0_0e",
        "0.0.0_0 ",
        "0.0.0_06",
        "0.0.0_0_",
        "0.0.0_0",
        "0.0.0_0_0evil",
        "0.0.0evil",
        "0.0.0_00evil",
        "0.0.0_evil",
        "0.0.00_0evil",
        "0.0._0evil",
        "0.00.0_0evil",
        "0..0_0evil",
        "00.0.0_0evil",
        ".0.0_0evil",
        "0.0.0",
        "0.0.0_0evil"
      ]
    },
    {
      "regex": "project_id doesn't match",
      "exceptionStackTrace": null,
      "matches": ["project_id doesn't match"]
    },
    {
      "regex": "rgba?\\((\\d+,\\s*\\d+,\\s*\\d+)(?:,\\s*(0|1|\\.\\d+|0\\.\\d+))?\\)\\s*(\\d+%)?",
      "exceptionStackTrace": null,
      "matches": [
        "rgba(0, 0, 0, 0.00) 0%",
        "rgba(0, 0, 0, 0.) 0%",
        "rgba(0, 0, 0, .00) 0%",
        "rgba(0, 0, 0, .) 0%",
        "rgba(0, 0, 0, 0) 0%0%",
        "rgba(0, 0, 0, 0) ",
        "rgba(0, 0, 0, 0) 00%",
        "rgba(0, 0, 0, 0) %",
        "rgba(0, 0, 0, 0)  0%",
        "rgba(0, 0, 0, 0)0%",
        "rgba(0, 0, 0, 0, 0) 0%",
        "rgba(0, 0, 0) 0%",
        "rgba(0, 0, 0,  0) 0%",
        "rgba(0, 0, 0,0) 0%",
        "rgba(0, 0, 00, 0) 0%",
        "rgba(0, 0, , 0) 0%",
        "rgba(0, 0,  0, 0) 0%",
        "rgba(0, 0,0, 0) 0%",
        "rgba(0, 00, 0, 0) 0%",
        "rgba(0, , 0, 0) 0%",
        "rgba(0,  0, 0, 0) 0%",
        "rgba(0,0, 0, 0) 0%",
        "rgba(00, 0, 0, 0) 0%",
        "rgba(, 0, 0, 0) 0%",
        "rgbaa(0, 0, 0, 0) 0%",
        "rgb(0, 0, 0, 0) 0%",
        "rgb(0,0,0)",
        "rgba(0, 0, 0, 0.0) 0%",
        "rgba(0, 0, 0, .0) 0%",
        "rgba(0, 0, 0, 1) 0%",
        "rgba(0, 0, 0, 0) 0%"
      ]
    },
    {
      "regex": " \\A :\\s* ",
      "exceptionStackTrace": null,
      "matches": ["  :   ", "  : ", "  :  "]
    },
    {
      "regex": "(\\s+|>)",
      "exceptionStackTrace": null,
      "matches": ["  ", "", ">", " "]
    },
    {
      "regex": "^I have added the following decorator to `Specdown::ReporterFactory`:$",
      "exceptionStackTrace": null,
      "matches": [
        "I have added the following decorator to `Specdown::ReporterFactory`:"
      ]
    },
    {
      "regex": "(\\d+)-cover\\.jpg",
      "exceptionStackTrace": null,
      "matches": ["00-cover.jpg", "-cover.jpg", "0-cover.jpg"]
    },
    {
      "regex": "h[a4](x+|ck)([0o]r)?ed[^a-z0-9]*\\s*by",
      "exceptionStackTrace": null,
      "matches": [
        "h4xoredevil  by",
        "h4xoredevilby",
        "h4xoredeVil by",
        "h4xoredEVIL by",
        "h4xoredev_il by",
        "h4xoredev il by",
        "h4xoredev4il by",
        "h4xorede by",
        "h4xored  by",
        "h4xored6 by",
        "h4xored_ by",
        "h4xored by",
        "h4xororedevil by",
        "h4xedevil by",
        "h4xaredevil by",
        "h4x1redevil by",
        "h4x0redevil by",
        "h4xxoredevil by",
        "h4oredevil by",
        "hbxoredevil by",
        "haxoredevil by",
        "h0xoredevil by",
        "h4ckedby",
        "h4xedby",
        "h4ckoredevil by",
        "h4xoredevil by"
      ]
    },
    {
      "regex": "\\S*.Object and \\S*.Object and \\S*.Object",
      "exceptionStackTrace": null,
      "matches": [
        "evilaObject and evilaObject and evil_Object",
        "evilaObject and evilaObject and evilAObject",
        "evilaObject and evilaObject and evil0Object",
        "evilaObject and evilaObject and evil Object",
        "evilaObject and evilaObject and eVilaObject",
        "evilaObject and evilaObject and EVILaObject",
        "evilaObject and evilaObject and ev_ilaObject",
        "evilaObject and evilaObject and ev ilaObject",
        "evilaObject and evilaObject and ev4ilaObject",
        "evilaObject and evilaObject and eaObject",
        "evilaObject and evilaObject and  aObject",
        "evilaObject and evilaObject and 6aObject",
        "evilaObject and evilaObject and _aObject",
        "evilaObject and evilaObject and aObject",
        "evilaObject and evil_Object and evilaObject",
        "evilaObject and evilAObject and evilaObject",
        "evilaObject and evil0Object and evilaObject",
        "evilaObject and evil Object and evilaObject",
        "evilaObject and eVilaObject and evilaObject",
        "evilaObject and EVILaObject and evilaObject",
        "evilaObject and ev_ilaObject and evilaObject",
        "evilaObject and ev ilaObject and evilaObject",
        "evilaObject and ev4ilaObject and evilaObject",
        "evilaObject and eaObject and evilaObject",
        "evilaObject and  aObject and evilaObject",
        "evilaObject and 6aObject and evilaObject",
        "evilaObject and _aObject and evilaObject",
        "evilaObject and aObject and evilaObject",
        "evil_Object and evilaObject and evilaObject",
        "evilAObject and evilaObject and evilaObject",
        "evil0Object and evilaObject and evilaObject",
        "evil Object and evilaObject and evilaObject",
        "eVilaObject and evilaObject and evilaObject",
        "EVILaObject and evilaObject and evilaObject",
        "ev_ilaObject and evilaObject and evilaObject",
        "ev ilaObject and evilaObject and evilaObject",
        "ev4ilaObject and evilaObject and evilaObject",
        "eaObject and evilaObject and evilaObject",
        " aObject and evilaObject and evilaObject",
        "6aObject and evilaObject and evilaObject",
        "_aObject and evilaObject and evilaObject",
        "aObject and evilaObject and evilaObject",
        "aObject and aObject and aObject",
        "evilaObject and evilaObject and evilaObject"
      ]
    },
    {
      "regex": "^\\.?mysql_history$",
      "exceptionStackTrace": null,
      "matches": ["..mysql_history", "mysql_history", ".mysql_history"]
    },
    {
      "regex": "'namespace' must be specified as an option",
      "exceptionStackTrace": null,
      "matches": ["'namespace' must be specified as an option"]
    },
    {
      "regex": "^(.+?) ([^\\s]+)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil eVil",
        "evil EVIL",
        "evil ev_il",
        "evil ev il",
        "evil ev4il",
        "evil e",
        "evil  ",
        "evil 6",
        "evil _",
        "evil ",
        "eVil evil",
        "EVIL evil",
        "ev_il evil",
        "ev il evil",
        "ev4il evil",
        "e evil",
        "  evil",
        "6 evil",
        "_ evil",
        " evil",
        "evil evil"
      ]
    },
    { "regex": "\\A\\|", "exceptionStackTrace": null, "matches": ["|"] },
    {
      "regex": "^var *test *= *!!\\[\\];$",
      "exceptionStackTrace": null,
      "matches": [
        "var test =  !![];",
        "var test =!![];",
        "var test  = !![];",
        "var test= !![];",
        "var  test = !![];",
        "vartest = !![];",
        "vartest=!![];",
        "var test = !![];"
      ]
    },
    {
      "regex": "Unable to load plugin tty-console.",
      "exceptionStackTrace": null,
      "matches": [
        "Unable to load plugin tty-consoleA",
        "Unable to load plugin tty-console0",
        "Unable to load plugin tty-console-",
        "Unable to load plugin tty-console ",
        "Unable to load plugin tty-consolea"
      ]
    },
    {
      "regex": "uri:classloader\\:\\/_file_constant_\\.rb",
      "exceptionStackTrace": null,
      "matches": ["uri:classloader:/_file_constant_.rb"]
    },
    {
      "regex": "^ve_(private|root)$",
      "exceptionStackTrace": null,
      "matches": ["ve_root", "ve_private"]
    },
    {
      "regex": "Renderer timer console",
      "exceptionStackTrace": null,
      "matches": ["Renderer timer console"]
    },
    {
      "regex": "\\burl\\s*\\(\"?([^)]*?)\"?\\)",
      "exceptionStackTrace": null,
      "matches": [
        "url (\"evil\"\")",
        "url (\"evil)",
        "url (\")\")",
        "url (\"(\")",
        "url (\"\"\")",
        "url (\"eVil\")",
        "url (\"EVIL\")",
        "url (\"ev_il\")",
        "url (\"ev il\")",
        "url (\"ev4il\")",
        "url (\"e\")",
        "url (\" \")",
        "url (\"6\")",
        "url (\"_\")",
        "url (\"\")",
        "url (\"\"evil\")",
        "url (evil\")",
        "url  (\"evil\")",
        "url(\"evil\")",
        "url()",
        "url (\"evil\")"
      ]
    },
    { "regex": "/foo", "exceptionStackTrace": null, "matches": ["/foo"] },
    {
      "regex": "(.)(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "aeVil",
        "aEVIL",
        "aev_il",
        "aev il",
        "aev4il",
        "ae",
        "a ",
        "a6",
        "a_",
        "_evil",
        "Aevil",
        "0evil",
        " evil",
        "a",
        "aevil"
      ]
    },
    {
      "regex": "^(id|cart)$",
      "exceptionStackTrace": null,
      "matches": ["cart", "id"]
    },
    {
      "regex": "url\\((\\\\[^)]*)\\)",
      "exceptionStackTrace": null,
      "matches": [
        "url(\\\\)",
        "url(\\))",
        "url(\\()",
        "url(\\eVil)",
        "url(\\EVIL)",
        "url(\\ev_il)",
        "url(\\ev il)",
        "url(\\ev4il)",
        "url(\\e)",
        "url(\\ )",
        "url(\\6)",
        "url(\\_)",
        "url(\\)",
        "url(\\evil)"
      ]
    },
    {
      "regex": "\\.(svgz?|eps|pdf|ps|ai|indd)$",
      "exceptionStackTrace": null,
      "matches": [
        ".svgzz",
        ".svg",
        ".indd",
        ".ai",
        ".ps",
        ".pdf",
        ".eps",
        ".svgz"
      ]
    },
    {
      "regex": "^(\\[?)([a-fx.\\d]+)(\\]?)$",
      "exceptionStackTrace": null,
      "matches": [
        "[.]]",
        "[.",
        "[..]",
        "[]",
        "[x]",
        "[g]",
        "[a]",
        "[0]",
        "[[.]",
        ".]",
        ".",
        "[.]"
      ]
    },
    {
      "regex": "(?:^|&)suppress_response_codes(=([^&]+))?",
      "exceptionStackTrace": null,
      "matches": [
        "suppress_response_codes=evil=evil",
        "suppress_response_codes==",
        "suppress_response_codes=&",
        "suppress_response_codes=eVil",
        "suppress_response_codes=EVIL",
        "suppress_response_codes=ev_il",
        "suppress_response_codes=ev il",
        "suppress_response_codes=ev4il",
        "suppress_response_codes=e",
        "suppress_response_codes= ",
        "suppress_response_codes=6",
        "suppress_response_codes=_",
        "suppress_response_codes=",
        "&suppress_response_codes",
        "suppress_response_codes",
        "&suppress_response_codes=evil",
        "suppress_response_codes=evil"
      ]
    },
    { "regex": "^case(?=\\s)", "exceptionStackTrace": null, "matches": ["case"] },
    { "regex": "&facets=", "exceptionStackTrace": null, "matches": ["&facets="] },
    {
      "regex": "TAP|NYC|SW_ORIG",
      "exceptionStackTrace": null,
      "matches": ["SW_ORIG", "NYC", "TAP"]
    },
    {
      "regex": "Version\\s*(.+)",
      "exceptionStackTrace": null,
      "matches": [
        "Version eVil",
        "Version EVIL",
        "Version ev_il",
        "Version ev il",
        "Version ev4il",
        "Version e",
        "Version  ",
        "Version 6",
        "Version _",
        "Version ",
        "Version  evil",
        "Versionevil",
        "Version evil"
      ]
    },
    {
      "regex": "/ajax/payment_form_settings",
      "exceptionStackTrace": null,
      "matches": ["/ajax/payment_form_settings"]
    },
    {
      "regex": "filename\\.gpg$",
      "exceptionStackTrace": null,
      "matches": ["filename.gpg"]
    },
    { "regex": "IronWare", "exceptionStackTrace": null, "matches": ["IronWare"] },
    {
      "regex": "[\\u3000]+$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 12288"
      },
      "matches": []
    },
    {
      "regex": "android.*applewebkit",
      "exceptionStackTrace": null,
      "matches": [
        "androideVilapplewebkit",
        "androidEVILapplewebkit",
        "androidev_ilapplewebkit",
        "androidev ilapplewebkit",
        "androidev4ilapplewebkit",
        "androideapplewebkit",
        "android applewebkit",
        "android6applewebkit",
        "android_applewebkit",
        "androidapplewebkit",
        "androidevilapplewebkit"
      ]
    },
    {
      "regex": ",\"workers\":1",
      "exceptionStackTrace": null,
      "matches": [",\"workers\":1"]
    },
    {
      "regex": "\"messageId\":\\s*\"2345\"",
      "exceptionStackTrace": null,
      "matches": [
        "\"messageId\":  \"2345\"",
        "\"messageId\":\"2345\"",
        "\"messageId\": \"2345\""
      ]
    },
    {
      "regex": "\\s([frentopc-]{0,4}bsd|dragonfly)\\s?([\\w\\.]*)",
      "exceptionStackTrace": null,
      "matches": [
        " -bsd .",
        " -bsd -",
        " -bsd eVil",
        " -bsd EVIL",
        " -bsd ev_il",
        " -bsd ev il",
        " -bsd ev4il",
        " -bsd e",
        " -bsd  ",
        " -bsd 6",
        " -bsd _",
        " -bsd ",
        " -bsd  evil",
        " -bsdevil",
        " -----bsd evil",
        " ----bsd evil",
        " bsd evil",
        " tbsd evil",
        " rbsd evil",
        " pbsd evil",
        " obsd evil",
        " nbsd evil",
        " fbsd evil",
        " ebsd evil",
        " cbsd evil",
        " absd evil",
        " dragonfly",
        " bsd",
        " dragonfly evil",
        " -bsd evil"
      ]
    },
    {
      "regex": "must not be larger than",
      "exceptionStackTrace": null,
      "matches": ["must not be larger than"]
    },
    {
      "regex": "PRETTY_NAME=\\\".+\\\"",
      "exceptionStackTrace": null,
      "matches": [
        "PRETTY_NAME=\"=\"",
        "PRETTY_NAME=\"\"\"",
        "PRETTY_NAME=\"eVil\"",
        "PRETTY_NAME=\"EVIL\"",
        "PRETTY_NAME=\"ev_il\"",
        "PRETTY_NAME=\"ev il\"",
        "PRETTY_NAME=\"ev4il\"",
        "PRETTY_NAME=\"e\"",
        "PRETTY_NAME=\" \"",
        "PRETTY_NAME=\"6\"",
        "PRETTY_NAME=\"_\"",
        "PRETTY_NAME=\"\"",
        "PRETTY_NAME=\"evil\""
      ]
    },
    {
      "regex": "{docsify-ignore}",
      "exceptionStackTrace": null,
      "matches": ["{docsify-ignore}"]
    },
    {
      "regex": "procedures",
      "exceptionStackTrace": null,
      "matches": ["procedures"]
    },
    {
      "regex": "card (?P<card>\\d+)[:].*?[[](?P<description>.*?)[]], device (?P<device>\\d+)[:].*?[[](?P<device_description>.*?)[]]",
      "exceptionStackTrace": null,
      "matches": [
        "card 0:evil[evil], device 0:evil[]]",
        "card 0:evil[evil], device 0:evil[[]",
        "card 0:evil[evil], device 0:evil[:]",
        "card 0:evil[evil], device 0:evil[,]",
        "card 0:evil[evil], device 0:evil[eVil]",
        "card 0:evil[evil], device 0:evil[EVIL]",
        "card 0:evil[evil], device 0:evil[ev_il]",
        "card 0:evil[evil], device 0:evil[ev il]",
        "card 0:evil[evil], device 0:evil[ev4il]",
        "card 0:evil[evil], device 0:evil[e]",
        "card 0:evil[evil], device 0:evil[ ]",
        "card 0:evil[evil], device 0:evil[6]",
        "card 0:evil[evil], device 0:evil[_]",
        "card 0:evil[evil], device 0:evil[]",
        "card 0:evil[evil], device 0:][evil]",
        "card 0:evil[evil], device 0:[[evil]",
        "card 0:evil[evil], device 0::[evil]",
        "card 0:evil[evil], device 0:,[evil]",
        "card 0:evil[evil], device 0:eVil[evil]",
        "card 0:evil[evil], device 0:EVIL[evil]",
        "card 0:evil[evil], device 0:ev_il[evil]",
        "card 0:evil[evil], device 0:ev il[evil]",
        "card 0:evil[evil], device 0:ev4il[evil]",
        "card 0:evil[evil], device 0:e[evil]",
        "card 0:evil[evil], device 0: [evil]",
        "card 0:evil[evil], device 0:6[evil]",
        "card 0:evil[evil], device 0:_[evil]",
        "card 0:evil[evil], device 0:[evil]",
        "card 0:evil[evil], device 00:evil[evil]",
        "card 0:evil[evil], device :evil[evil]",
        "card 0:evil[]], device 0:evil[evil]",
        "card 0:evil[[], device 0:evil[evil]",
        "card 0:evil[:], device 0:evil[evil]",
        "card 0:evil[,], device 0:evil[evil]",
        "card 0:evil[eVil], device 0:evil[evil]",
        "card 0:evil[EVIL], device 0:evil[evil]",
        "card 0:evil[ev_il], device 0:evil[evil]",
        "card 0:evil[ev il], device 0:evil[evil]",
        "card 0:evil[ev4il], device 0:evil[evil]",
        "card 0:evil[e], device 0:evil[evil]",
        "card 0:evil[ ], device 0:evil[evil]",
        "card 0:evil[6], device 0:evil[evil]",
        "card 0:evil[_], device 0:evil[evil]",
        "card 0:evil[], device 0:evil[evil]",
        "card 0:][evil], device 0:evil[evil]",
        "card 0:[[evil], device 0:evil[evil]",
        "card 0::[evil], device 0:evil[evil]",
        "card 0:,[evil], device 0:evil[evil]",
        "card 0:eVil[evil], device 0:evil[evil]",
        "card 0:EVIL[evil], device 0:evil[evil]",
        "card 0:ev_il[evil], device 0:evil[evil]",
        "card 0:ev il[evil], device 0:evil[evil]",
        "card 0:ev4il[evil], device 0:evil[evil]",
        "card 0:e[evil], device 0:evil[evil]",
        "card 0: [evil], device 0:evil[evil]",
        "card 0:6[evil], device 0:evil[evil]",
        "card 0:_[evil], device 0:evil[evil]",
        "card 0:[evil], device 0:evil[evil]",
        "card 00:evil[evil], device 0:evil[evil]",
        "card :evil[evil], device 0:evil[evil]",
        "card 0:[], device 0:[]",
        "card 0:evil[evil], device 0:evil[evil]"
      ]
    },
    {
      "regex": "^$wanted_tag\\t",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "people\\?q(%5B|\\[)s(%5D|\\])(%5B|\\[)(%5D|\\])=name\\+asc&q(%5B|\\[)s(%5D|\\])(%5B|\\[)(%5D|\\])=email\\+desc",
      "exceptionStackTrace": null,
      "matches": [
        "people?q[s%5D%5B%5D=name+asc&q%5Bs%5D%5B%5D=email+desc",
        "people?q%5Bs]%5B%5D=name+asc&q%5Bs%5D%5B%5D=email+desc",
        "people?q%5Bs%5D[%5D=name+asc&q%5Bs%5D%5B%5D=email+desc",
        "people?q%5Bs%5D%5B]=name+asc&q%5Bs%5D%5B%5D=email+desc",
        "people?q%5Bs%5D%5B%5D=name+asc&q[s%5D%5B%5D=email+desc",
        "people?q%5Bs%5D%5B%5D=name+asc&q%5Bs]%5B%5D=email+desc",
        "people?q%5Bs%5D%5B%5D=name+asc&q%5Bs%5D[%5D=email+desc",
        "people?q%5Bs%5D%5B%5D=name+asc&q%5Bs%5D%5B]=email+desc",
        "people?q%5Bs%5D%5B%5D=name+asc&q%5Bs%5D%5B%5D=email+desc"
      ]
    },
    {
      "regex": "^(Assignable|Unassignable)$",
      "exceptionStackTrace": null,
      "matches": ["Unassignable", "Assignable"]
    },
    {
      "regex": "@keywords|=>|\\{",
      "exceptionStackTrace": null,
      "matches": ["{", "=>", "@keywords"]
    },
    {
      "regex": "\\*[^*]*\\*",
      "exceptionStackTrace": null,
      "matches": [
        "***",
        "*eVil*",
        "*EVIL*",
        "*ev_il*",
        "*ev il*",
        "*ev4il*",
        "*e*",
        "* *",
        "*6*",
        "*_*",
        "**",
        "*evil*"
      ]
    },
    {
      "regex": "^\\s*\\};\\s*$",
      "exceptionStackTrace": null,
      "matches": [" };  ", " };", "  }; ", "}; ", "};", " }; "]
    },
    {
      "regex": "^invalid key size",
      "exceptionStackTrace": null,
      "matches": ["invalid key size"]
    },
    {
      "regex": "^(# ?--[-]+|##[#]+ )[ -]*[^- ]+",
      "exceptionStackTrace": null,
      "matches": [
        "#### -evil",
        "## -evil",
        "# -----",
        "# ----#",
        "# ----eVil",
        "# ----EVIL",
        "# ----ev_il",
        "# ----ev il",
        "# ----ev4il",
        "# ----e",
        "# ---- ",
        "# ----6",
        "# ----_",
        "# ----",
        "# --- evil",
        "# -----evil",
        "# ---evil",
        "#  ----evil",
        "#----evil",
        "### evil",
        "#---evil",
        "### -evil",
        "# ----evil"
      ]
    },
    {
      "regex": "[^/].*",
      "exceptionStackTrace": null,
      "matches": [
        "a/",
        "aeVil",
        "aEVIL",
        "aev_il",
        "aev il",
        "aev4il",
        "ae",
        "a ",
        "a6",
        "a_",
        "Aevil",
        "0evil",
        "/evil",
        " evil",
        "a",
        "aevil"
      ]
    },
    {
      "regex": "^# TorqueBox",
      "exceptionStackTrace": null,
      "matches": ["# TorqueBox"]
    },
    {
      "regex": "^0*?(-?)(\\d+\\.?\\d*)(e([+-]?\\d+))?$",
      "exceptionStackTrace": null,
      "matches": [
        "0-0.0e-0e-0",
        "0-0.0",
        "0-0.0e-00",
        "0-0.0e-",
        "0-0.0e--0",
        "0-0.0e0",
        "0-0.0e+0",
        "0-0.00e-0",
        "0-0.e-0",
        "0-0..0e-0",
        "0-00e-0",
        "0-00.0e-0",
        "0-.0e-0",
        "0--0.0e-0",
        "00.0e-0",
        "00-0.0e-0",
        "-0.0e-0",
        "0",
        "0-0.0e-0"
      ]
    },
    {
      "regex": "(scale|rotate|translate|skew|matrix)\\(([^()]+)\\)",
      "exceptionStackTrace": null,
      "matches": [
        "scale())",
        "scale(()",
        "scale(eVil)",
        "scale(EVIL)",
        "scale(ev_il)",
        "scale(ev il)",
        "scale(ev4il)",
        "scale(e)",
        "scale( )",
        "scale(6)",
        "scale(_)",
        "scale()",
        "matrix(evil)",
        "skew(evil)",
        "translate(evil)",
        "rotate(evil)",
        "scale(evil)"
      ]
    },
    {
      "regex": "^.*?\\#",
      "exceptionStackTrace": null,
      "matches": [
        "##",
        "eVil#",
        "EVIL#",
        "ev_il#",
        "ev il#",
        "ev4il#",
        "e#",
        " #",
        "6#",
        "_#",
        "#",
        "evil#"
      ]
    },
    {
      "regex": "(\\-?\\d\\.\\d+)\\s+(\\d+)?",
      "exceptionStackTrace": null,
      "matches": [
        "-0.0 00",
        "-0.0 ",
        "-0.0  0",
        "-0.00",
        "-0.00 0",
        "-0. 0",
        "--0.0 0",
        "0.0 0",
        "0.0 ",
        "-0.0 0"
      ]
    },
    {
      "regex": "\\s\\((.+)\\)\\s",
      "exceptionStackTrace": null,
      "matches": [
        " ()) ",
        " (() ",
        " (eVil) ",
        " (EVIL) ",
        " (ev_il) ",
        " (ev il) ",
        " (ev4il) ",
        " (e) ",
        " ( ) ",
        " (6) ",
        " (_) ",
        " () ",
        " (evil) "
      ]
    },
    {
      "regex": "^new post$",
      "exceptionStackTrace": null,
      "matches": ["new post"]
    },
    {
      "regex": "\\A(?:---|\\+\\+\\+)\\s+(\\S+)\\s+\\(revision (\\d+)\\)",
      "exceptionStackTrace": null,
      "matches": [
        "--- evil (revision 00)",
        "--- evil (revision )",
        "--- evil  (revision 0)",
        "--- evil(revision 0)",
        "--- - (revision 0)",
        "--- + (revision 0)",
        "--- ) (revision 0)",
        "--- ( (revision 0)",
        "--- eVil (revision 0)",
        "--- EVIL (revision 0)",
        "--- ev_il (revision 0)",
        "--- ev il (revision 0)",
        "--- ev4il (revision 0)",
        "--- e (revision 0)",
        "---   (revision 0)",
        "--- 6 (revision 0)",
        "--- _ (revision 0)",
        "---  (revision 0)",
        "---  evil (revision 0)",
        "---evil (revision 0)",
        "+++ evil (revision 0)",
        "--- evil (revision 0)"
      ]
    },
    {
      "regex": "\\Aappium-image-element-[a-z0-9\\-]+",
      "exceptionStackTrace": null,
      "matches": [
        "appium-image-element--",
        "appium-image-element-eVil",
        "appium-image-element-EVIL",
        "appium-image-element-ev_il",
        "appium-image-element-ev il",
        "appium-image-element-ev4il",
        "appium-image-element-e",
        "appium-image-element- ",
        "appium-image-element-6",
        "appium-image-element-_",
        "appium-image-element-",
        "appium-image-element-evil"
      ]
    },
    {
      "regex": "(?<![<>])(<V cop=\"y\">[Nn]ach<\\/V> (?:<[AN][^>]*>(?:[CcDdFfGgMmPpSsTt][Hh]|[Bb]h[^fF])[^<]+<\\/[AN]>))(?![<>])",
      "exceptionStackTrace": null,
      "matches": [
        "<V cop=\"y\">nach</V> <Nevil>bhfevil</N>",
        "<V cop=\"y\">nach</V> <Nevil>bhFevil</N>",
        "<V cop=\"y\">nach</V> <Nevil>bhAevil</N>",
        "<V cop=\"y\">nach</V> <Nevil>bh>evil</N>",
        "<V cop=\"y\">nach</V> <Nevil>bh=evil</N>",
        "<V cop=\"y\">nach</V> <Nevil>bh<evil</N>",
        "<V cop=\"y\">nach</V> <Nevil>bh0evil</N>",
        "<V cop=\"y\">nach</V> <Nevil>bh/evil</N>",
        "<V cop=\"y\">nach</V> <Nevil>bh\"evil</N>",
        "<V cop=\"y\">nach</V> <Nevil>bh evil</N>",
        "<V cop=\"y\">nach</V> <Nevil>ahaevil</N>",
        "<V cop=\"y\">nach</V> <Nevil>Bhaevil</N>",
        "<V cop=\"y\">nach</V> <Nevil>Ahaevil</N>",
        "<V cop=\"y\">nach</V> <Nevil>thevil</B>",
        "<V cop=\"y\">nach</V> <Nevil>thevil</A>",
        "<V cop=\"y\">nach</V> <Nevil>th></N>",
        "<V cop=\"y\">nach</V> <Nevil>th=</N>",
        "<V cop=\"y\">nach</V> <Nevil>th<</N>",
        "<V cop=\"y\">nach</V> <Nevil>th/</N>",
        "<V cop=\"y\">nach</V> <Nevil>th\"</N>",
        "<V cop=\"y\">nach</V> <Nevil>theVil</N>",
        "<V cop=\"y\">nach</V> <Nevil>thEVIL</N>",
        "<V cop=\"y\">nach</V> <Nevil>thev_il</N>",
        "<V cop=\"y\">nach</V> <Nevil>thev il</N>",
        "<V cop=\"y\">nach</V> <Nevil>thev4il</N>",
        "<V cop=\"y\">nach</V> <Nevil>the</N>",
        "<V cop=\"y\">nach</V> <Nevil>th </N>",
        "<V cop=\"y\">nach</V> <Nevil>th6</N>",
        "<V cop=\"y\">nach</V> <Nevil>th_</N>",
        "<V cop=\"y\">nach</V> <Nevil>th</N>",
        "<V cop=\"y\">nach</V> <Nevil>taevil</N>",
        "<V cop=\"y\">nach</V> <Nevil>tHevil</N>",
        "<V cop=\"y\">nach</V> <Nevil>tAevil</N>",
        "<V cop=\"y\">nach</V> <Nevil>shevil</N>",
        "<V cop=\"y\">nach</V> <Nevil>phevil</N>",
        "<V cop=\"y\">nach</V> <Nevil>mhevil</N>",
        "<V cop=\"y\">nach</V> <Nevil>ghevil</N>",
        "<V cop=\"y\">nach</V> <Nevil>fhevil</N>",
        "<V cop=\"y\">nach</V> <Nevil>dhevil</N>",
        "<V cop=\"y\">nach</V> <Nevil>chevil</N>",
        "<V cop=\"y\">nach</V> <Nevil>ahevil</N>",
        "<V cop=\"y\">nach</V> <Nevil>Thevil</N>",
        "<V cop=\"y\">nach</V> <Nevil>Shevil</N>",
        "<V cop=\"y\">nach</V> <Nevil>Phevil</N>",
        "<V cop=\"y\">nach</V> <Nevil>Mhevil</N>",
        "<V cop=\"y\">nach</V> <Nevil>Ghevil</N>",
        "<V cop=\"y\">nach</V> <Nevil>Fhevil</N>",
        "<V cop=\"y\">nach</V> <Nevil>Dhevil</N>",
        "<V cop=\"y\">nach</V> <Nevil>Chevil</N>",
        "<V cop=\"y\">nach</V> <Nevil>Ahevil</N>",
        "<V cop=\"y\">nach</V> <N>>thevil</N>",
        "<V cop=\"y\">nach</V> <N=>thevil</N>",
        "<V cop=\"y\">nach</V> <N<>thevil</N>",
        "<V cop=\"y\">nach</V> <N/>thevil</N>",
        "<V cop=\"y\">nach</V> <N\">thevil</N>",
        "<V cop=\"y\">nach</V> <NeVil>thevil</N>",
        "<V cop=\"y\">nach</V> <NEVIL>thevil</N>",
        "<V cop=\"y\">nach</V> <Nev_il>thevil</N>",
        "<V cop=\"y\">nach</V> <Nev il>thevil</N>",
        "<V cop=\"y\">nach</V> <Nev4il>thevil</N>",
        "<V cop=\"y\">nach</V> <Ne>thevil</N>",
        "<V cop=\"y\">nach</V> <N >thevil</N>",
        "<V cop=\"y\">nach</V> <N6>thevil</N>",
        "<V cop=\"y\">nach</V> <N_>thevil</N>",
        "<V cop=\"y\">nach</V> <Bevil>thevil</N>",
        "<V cop=\"y\">nach</V> <Aevil>thevil</N>",
        "<V cop=\"y\">aach</V> <Nevil>thevil</N>",
        "<V cop=\"y\">Nach</V> <Nevil>thevil</N>",
        "<V cop=\"y\">Aach</V> <Nevil>thevil</N>",
        "<V cop=\"y\">nach</V> <N>bhaevil</N>",
        "<V cop=\"y\">nach</V> <N>thevil</N>",
        "<V cop=\"y\">nach</V> <Nevil>bhaevil</N>",
        "<V cop=\"y\">nach</V> <Nevil>thevil</N>"
      ]
    },
    {
      "regex": "SELECT \\\"categories__recursive\\\"",
      "exceptionStackTrace": null,
      "matches": ["SELECT \"categories__recursive\""]
    },
    {
      "regex": "^\\x3c!--\\{\\{\\{--\\x3e$",
      "exceptionStackTrace": null,
      "matches": ["<!--{{{-->"]
    },
    {
      "regex": ".*[^a-z]name=\\\"([^\\\"]+)\\\".*",
      "exceptionStackTrace": null,
      "matches": [
        "evilAname=\"evil\"=",
        "evilAname=\"evil\"\"",
        "evilAname=\"evil\"eVil",
        "evilAname=\"evil\"EVIL",
        "evilAname=\"evil\"ev_il",
        "evilAname=\"evil\"ev il",
        "evilAname=\"evil\"ev4il",
        "evilAname=\"evil\"e",
        "evilAname=\"evil\" ",
        "evilAname=\"evil\"6",
        "evilAname=\"evil\"_",
        "evilAname=\"evil\"",
        "evilAname=\"=\"evil",
        "evilAname=\"\"\"evil",
        "evilAname=\"eVil\"evil",
        "evilAname=\"EVIL\"evil",
        "evilAname=\"ev_il\"evil",
        "evilAname=\"ev il\"evil",
        "evilAname=\"ev4il\"evil",
        "evilAname=\"e\"evil",
        "evilAname=\" \"evil",
        "evilAname=\"6\"evil",
        "evilAname=\"_\"evil",
        "evilAname=\"\"evil",
        "evilaname=\"evil\"evil",
        "evil=name=\"evil\"evil",
        "evil0name=\"evil\"evil",
        "evil\"name=\"evil\"evil",
        "evil name=\"evil\"evil",
        "=Aname=\"evil\"evil",
        "\"Aname=\"evil\"evil",
        "eVilAname=\"evil\"evil",
        "EVILAname=\"evil\"evil",
        "ev_ilAname=\"evil\"evil",
        "ev ilAname=\"evil\"evil",
        "ev4ilAname=\"evil\"evil",
        "eAname=\"evil\"evil",
        " Aname=\"evil\"evil",
        "6Aname=\"evil\"evil",
        "_Aname=\"evil\"evil",
        "Aname=\"evil\"evil",
        "Aname=\"evil\"",
        "evilAname=\"evil\"evil"
      ]
    },
    {
      "regex": "^(je|tu|il|elle|nous|vous|ils|elles)@\\d$",
      "exceptionStackTrace": null,
      "matches": [
        "elles@0",
        "ils@0",
        "vous@0",
        "nous@0",
        "elle@0",
        "il@0",
        "tu@0",
        "je@0"
      ]
    },
    {
      "regex": ".|^\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "Text\\::Microformat\\::Element\\::",
      "exceptionStackTrace": null,
      "matches": ["Text::Microformat::Element::"]
    },
    {
      "regex": "(\\bmarvin_dataset\\b)",
      "exceptionStackTrace": null,
      "matches": ["marvin_dataset"]
    },
    {
      "regex": "^(?:([+-]?[0-9]+) years?)? ?(?:([+-]?[0-9]+) mons?)? ?(?:([+-]?[0-9]+) days?)? ?(?:([+-])?([0-9]+):([0-9]+):([0-9]+)(?:,|.([0-9]+))?)?$",
      "exceptionStackTrace": null,
      "matches": [
        "-0 years -0 mons -0 days -0:0:0a00",
        "-0 years -0 mons -0 days -0:0:0a",
        "-0 years -0 mons -0 days -0:0:0A0",
        "-0 years -0 mons -0 days -0:0:0:0",
        "-0 years -0 mons -0 days -0:0:000",
        "-0 years -0 mons -0 days -0:0:0-0",
        "-0 years -0 mons -0 days -0:0:0,0",
        "-0 years -0 mons -0 days -0:0:0+0",
        "-0 years -0 mons -0 days -0:0:0 0",
        "-0 years -0 mons -0 days -0:0:0,-0:0:0,",
        "-0 years -0 mons -0 days ",
        "-0 years -0 mons -0 days -0:0:0,,",
        "-0 years -0 mons -0 days -0:0:0",
        "-0 years -0 mons -0 days -0:0:00,",
        "-0 years -0 mons -0 days -0:0:,",
        "-0 years -0 mons -0 days -0:00:0,",
        "-0 years -0 mons -0 days -0::0,",
        "-0 years -0 mons -0 days -00:0:0,",
        "-0 years -0 mons -0 days -:0:0,",
        "-0 years -0 mons -0 days --0:0:0,",
        "-0 years -0 mons -0 days 0:0:0,",
        "-0 years -0 mons -0 days +0:0:0,",
        "-0 years -0 mons -0 days  -0:0:0,",
        "-0 years -0 mons -0 days-0:0:0,",
        "-0 years -0 mons -0 days-0 days -0:0:0,",
        "-0 years -0 mons  -0:0:0,",
        "-0 years -0 mons -0 dayss -0:0:0,",
        "-0 years -0 mons -0 day -0:0:0,",
        "-0 years -0 mons -00 days -0:0:0,",
        "-0 years -0 mons - days -0:0:0,",
        "-0 years -0 mons --0 days -0:0:0,",
        "-0 years -0 mons 0 days -0:0:0,",
        "-0 years -0 mons +0 days -0:0:0,",
        "-0 years -0 mons  -0 days -0:0:0,",
        "-0 years -0 mons-0 days -0:0:0,",
        "-0 years -0 mons-0 mons -0 days -0:0:0,",
        "-0 years  -0 days -0:0:0,",
        "-0 years -0 monss -0 days -0:0:0,",
        "-0 years -0 mon -0 days -0:0:0,",
        "-0 years -00 mons -0 days -0:0:0,",
        "-0 years - mons -0 days -0:0:0,",
        "-0 years --0 mons -0 days -0:0:0,",
        "-0 years 0 mons -0 days -0:0:0,",
        "-0 years +0 mons -0 days -0:0:0,",
        "-0 years  -0 mons -0 days -0:0:0,",
        "-0 years-0 mons -0 days -0:0:0,",
        "-0 years-0 years -0 mons -0 days -0:0:0,",
        " -0 mons -0 days -0:0:0,",
        "-0 yearss -0 mons -0 days -0:0:0,",
        "-0 year -0 mons -0 days -0:0:0,",
        "-00 years -0 mons -0 days -0:0:0,",
        "- years -0 mons -0 days -0:0:0,",
        "--0 years -0 mons -0 days -0:0:0,",
        "0 years -0 mons -0 days -0:0:0,",
        "+0 years -0 mons -0 days -0:0:0,",
        "",
        "-0 years -0 mons -0 days -0:0:0a0",
        "-0 years -0 mons -0 days -0:0:0,"
      ]
    },
    {
      "regex": "\\!\\s\\w",
      "exceptionStackTrace": null,
      "matches": ["! _", "! A", "! 0", "! a"]
    },
    {
      "regex": "<!--REPEAT_SP-->(.*)<!--END_REPEAT_SP-->",
      "exceptionStackTrace": null,
      "matches": [
        "<!--REPEAT_SP-->><!--END_REPEAT_SP-->",
        "<!--REPEAT_SP--><<!--END_REPEAT_SP-->",
        "<!--REPEAT_SP-->-<!--END_REPEAT_SP-->",
        "<!--REPEAT_SP-->!<!--END_REPEAT_SP-->",
        "<!--REPEAT_SP-->eVil<!--END_REPEAT_SP-->",
        "<!--REPEAT_SP-->EVIL<!--END_REPEAT_SP-->",
        "<!--REPEAT_SP-->ev_il<!--END_REPEAT_SP-->",
        "<!--REPEAT_SP-->ev il<!--END_REPEAT_SP-->",
        "<!--REPEAT_SP-->ev4il<!--END_REPEAT_SP-->",
        "<!--REPEAT_SP-->e<!--END_REPEAT_SP-->",
        "<!--REPEAT_SP--> <!--END_REPEAT_SP-->",
        "<!--REPEAT_SP-->6<!--END_REPEAT_SP-->",
        "<!--REPEAT_SP-->_<!--END_REPEAT_SP-->",
        "<!--REPEAT_SP--><!--END_REPEAT_SP-->",
        "<!--REPEAT_SP-->evil<!--END_REPEAT_SP-->"
      ]
    },
    {
      "regex": "document\\.form3\\.N0000\\.value \\s* = \\s* (\\d+) \\s* ;",
      "exceptionStackTrace": null,
      "matches": [
        "document.form3.N0000.value   =   0    ;",
        "document.form3.N0000.value   =   0  ;",
        "document.form3.N0000.value   =   00   ;",
        "document.form3.N0000.value   =      ;",
        "document.form3.N0000.value   =    0   ;",
        "document.form3.N0000.value   =  0   ;",
        "document.form3.N0000.value    =   0   ;",
        "document.form3.N0000.value  =   0   ;",
        "document.form3.N0000.value  =  0  ;",
        "document.form3.N0000.value   =   0   ;"
      ]
    },
    {
      "regex": "(node_modules|bower_components|\\.embark[\\\\/]versions)",
      "exceptionStackTrace": null,
      "matches": [
        ".embark\\versions",
        ".embark/versions",
        "bower_components",
        "node_modules"
      ]
    },
    { "regex": "\\.eml$", "exceptionStackTrace": null, "matches": [".eml"] },
    {
      "regex": ".+\\Spec\\.js$",
      "exceptionStackTrace": null,
      "matches": [
        "evil_pec.js",
        "evilApec.js",
        "evil0pec.js",
        "evil.pec.js",
        "evil pec.js",
        ".apec.js",
        "eVilapec.js",
        "EVILapec.js",
        "ev_ilapec.js",
        "ev ilapec.js",
        "ev4ilapec.js",
        "eapec.js",
        " apec.js",
        "6apec.js",
        "_apec.js",
        "apec.js",
        "evilapec.js"
      ]
    },
    {
      "regex": "/api/instance_types",
      "exceptionStackTrace": null,
      "matches": ["/api/instance_types"]
    },
    {
      "regex": "Unable.*coolio.*No module",
      "exceptionStackTrace": null,
      "matches": [
        "UnableevilcoolioeVilNo module",
        "UnableevilcoolioEVILNo module",
        "Unableevilcoolioev_ilNo module",
        "Unableevilcoolioev ilNo module",
        "Unableevilcoolioev4ilNo module",
        "UnableevilcoolioeNo module",
        "Unableevilcoolio No module",
        "Unableevilcoolio6No module",
        "Unableevilcoolio_No module",
        "UnableevilcoolioNo module",
        "UnableeVilcoolioevilNo module",
        "UnableEVILcoolioevilNo module",
        "Unableev_ilcoolioevilNo module",
        "Unableev ilcoolioevilNo module",
        "Unableev4ilcoolioevilNo module",
        "UnableecoolioevilNo module",
        "Unable coolioevilNo module",
        "Unable6coolioevilNo module",
        "Unable_coolioevilNo module",
        "UnablecoolioevilNo module",
        "UnablecoolioNo module",
        "UnableevilcoolioevilNo module"
      ]
    },
    { "regex": "NodeList", "exceptionStackTrace": null, "matches": ["NodeList"] },
    { "regex": "\\b200\\b", "exceptionStackTrace": null, "matches": ["200"] },
    {
      "regex": "^(\\w+:)?//.*",
      "exceptionStackTrace": null,
      "matches": [
        "evil://:",
        "evil:///",
        "evil://eVil",
        "evil://EVIL",
        "evil://ev_il",
        "evil://ev il",
        "evil://ev4il",
        "evil://e",
        "evil:// ",
        "evil://6",
        "evil://_",
        "evil://",
        "evil:evil://evil",
        "//evil",
        "eVil://evil",
        "EVIL://evil",
        "ev_il://evil",
        "ev il://evil",
        "ev4il://evil",
        "e://evil",
        " ://evil",
        "6://evil",
        "_://evil",
        "://evil",
        "//",
        "evil://evil"
      ]
    },
    {
      "regex": "(category=\\\")(.+?)(\\\" crawl)",
      "exceptionStackTrace": null,
      "matches": [
        "category=\"=\" crawl",
        "category=\"\"\" crawl",
        "category=\"eVil\" crawl",
        "category=\"EVIL\" crawl",
        "category=\"ev_il\" crawl",
        "category=\"ev il\" crawl",
        "category=\"ev4il\" crawl",
        "category=\"e\" crawl",
        "category=\" \" crawl",
        "category=\"6\" crawl",
        "category=\"_\" crawl",
        "category=\"\" crawl",
        "category=\"evil\" crawl"
      ]
    },
    {
      "regex": "^Job <\\d*> is not found",
      "exceptionStackTrace": null,
      "matches": [
        "Job <00> is not found",
        "Job <> is not found",
        "Job <0> is not found"
      ]
    },
    {
      "regex": "^[a-zA-Z]{4,6}(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "AAAAeVil",
        "AAAAEVIL",
        "AAAAev_il",
        "AAAAev il",
        "AAAAev4il",
        "AAAAe",
        "AAAA ",
        "AAAA6",
        "AAAA_",
        "AAAAAAAevil",
        "AAAAAAevil",
        "AAAevil",
        "aAAAevil",
        "AAAA",
        "AAAAevil"
      ]
    },
    {
      "regex": "^date-received$",
      "exceptionStackTrace": null,
      "matches": ["date-received"]
    },
    {
      "regex": "^\\(:a\\) :b :c \\.$",
      "exceptionStackTrace": null,
      "matches": ["(:a) :b :c ."]
    },
    {
      "regex": "^(.+)::(.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil:::",
        "evil::eVil",
        "evil::EVIL",
        "evil::ev_il",
        "evil::ev il",
        "evil::ev4il",
        "evil::e",
        "evil:: ",
        "evil::6",
        "evil::_",
        "evil::",
        ":::evil",
        "eVil::evil",
        "EVIL::evil",
        "ev_il::evil",
        "ev il::evil",
        "ev4il::evil",
        "e::evil",
        " ::evil",
        "6::evil",
        "_::evil",
        "::evil",
        "evil::evil"
      ]
    },
    {
      "regex": "(^|[^\\w.])(\\d{4,})",
      "exceptionStackTrace": null,
      "matches": [
        "a0000",
        "_0000",
        "A0000",
        "00000",
        ".0000",
        "000",
        " 0000",
        "0000"
      ]
    },
    {
      "regex": "^I should get a teacher with id ([a-f0-9]{24})$",
      "exceptionStackTrace": null,
      "matches": [
        "I should get a teacher with id 0000000000000000000000000",
        "I should get a teacher with id 00000000000000000000000",
        "I should get a teacher with id g00000000000000000000000",
        "I should get a teacher with id a00000000000000000000000",
        "I should get a teacher with id 000000000000000000000000"
      ]
    },
    {
      "regex": "highest point",
      "exceptionStackTrace": null,
      "matches": ["highest point"]
    },
    {
      "regex": "<!--\\s*@@var\\s*[= ]\\s*(\\S+?)\\s*(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"\\s*)?-->",
      "exceptionStackTrace": null,
      "matches": [
        "<!-- @@var   evil \"evil\\aevil\" \"evil\\aevil\" -->",
        "<!-- @@var   evil -->",
        "<!-- @@var   evil \"evil\\aevil\"  -->",
        "<!-- @@var   evil \"evil\\aevil\"-->",
        "<!-- @@var   evil \"evil\\aevil\\aevil\" -->",
        "<!-- @@var   evil \"evil\" -->",
        "<!-- @@var   evil \"evil\\a\\\" -->",
        "<!-- @@var   evil \"evil\\a@\" -->",
        "<!-- @@var   evil \"evil\\a>\" -->",
        "<!-- @@var   evil \"evil\\a=\" -->",
        "<!-- @@var   evil \"evil\\a<\" -->",
        "<!-- @@var   evil \"evil\\a-\" -->",
        "<!-- @@var   evil \"evil\\a\"\" -->",
        "<!-- @@var   evil \"evil\\a!\" -->",
        "<!-- @@var   evil \"evil\\aeVil\" -->",
        "<!-- @@var   evil \"evil\\aEVIL\" -->",
        "<!-- @@var   evil \"evil\\aev_il\" -->",
        "<!-- @@var   evil \"evil\\aev il\" -->",
        "<!-- @@var   evil \"evil\\aev4il\" -->",
        "<!-- @@var   evil \"evil\\ae\" -->",
        "<!-- @@var   evil \"evil\\a \" -->",
        "<!-- @@var   evil \"evil\\a6\" -->",
        "<!-- @@var   evil \"evil\\a_\" -->",
        "<!-- @@var   evil \"evil\\a\" -->",
        "<!-- @@var   evil \"evil\\\\evil\" -->",
        "<!-- @@var   evil \"evil\\Aevil\" -->",
        "<!-- @@var   evil \"evil\\@evil\" -->",
        "<!-- @@var   evil \"evil\\>evil\" -->",
        "<!-- @@var   evil \"evil\\=evil\" -->",
        "<!-- @@var   evil \"evil\\<evil\" -->",
        "<!-- @@var   evil \"evil\\0evil\" -->",
        "<!-- @@var   evil \"evil\\-evil\" -->",
        "<!-- @@var   evil \"evil\\\"evil\" -->",
        "<!-- @@var   evil \"evil\\!evil\" -->",
        "<!-- @@var   evil \"evil\\ evil\" -->",
        "<!-- @@var   evil \"\\\\aevil\" -->",
        "<!-- @@var   evil \"@\\aevil\" -->",
        "<!-- @@var   evil \">\\aevil\" -->",
        "<!-- @@var   evil \"=\\aevil\" -->",
        "<!-- @@var   evil \"<\\aevil\" -->",
        "<!-- @@var   evil \"-\\aevil\" -->",
        "<!-- @@var   evil \"\"\\aevil\" -->",
        "<!-- @@var   evil \"!\\aevil\" -->",
        "<!-- @@var   evil \"eVil\\aevil\" -->",
        "<!-- @@var   evil \"EVIL\\aevil\" -->",
        "<!-- @@var   evil \"ev_il\\aevil\" -->",
        "<!-- @@var   evil \"ev il\\aevil\" -->",
        "<!-- @@var   evil \"ev4il\\aevil\" -->",
        "<!-- @@var   evil \"e\\aevil\" -->",
        "<!-- @@var   evil \" \\aevil\" -->",
        "<!-- @@var   evil \"6\\aevil\" -->",
        "<!-- @@var   evil \"_\\aevil\" -->",
        "<!-- @@var   evil \"\\aevil\" -->",
        "<!-- @@var   evil  \"evil\\aevil\" -->",
        "<!-- @@var   evil\"evil\\aevil\" -->",
        "<!-- @@var   \\ \"evil\\aevil\" -->",
        "<!-- @@var   @ \"evil\\aevil\" -->",
        "<!-- @@var   > \"evil\\aevil\" -->",
        "<!-- @@var   = \"evil\\aevil\" -->",
        "<!-- @@var   < \"evil\\aevil\" -->",
        "<!-- @@var   - \"evil\\aevil\" -->",
        "<!-- @@var   \" \"evil\\aevil\" -->",
        "<!-- @@var   ! \"evil\\aevil\" -->",
        "<!-- @@var   eVil \"evil\\aevil\" -->",
        "<!-- @@var   EVIL \"evil\\aevil\" -->",
        "<!-- @@var   ev_il \"evil\\aevil\" -->",
        "<!-- @@var   ev il \"evil\\aevil\" -->",
        "<!-- @@var   ev4il \"evil\\aevil\" -->",
        "<!-- @@var   e \"evil\\aevil\" -->",
        "<!-- @@var     \"evil\\aevil\" -->",
        "<!-- @@var   6 \"evil\\aevil\" -->",
        "<!-- @@var   _ \"evil\\aevil\" -->",
        "<!-- @@var    \"evil\\aevil\" -->",
        "<!-- @@var = evil \"evil\\aevil\" -->",
        "<!-- @@var    evil \"evil\\aevil\" -->",
        "<!-- @@var  evil \"evil\\aevil\" -->",
        "<!--  @@var   evil \"evil\\aevil\" -->",
        "<!--@@var   evil \"evil\\aevil\" -->",
        "<!--@@var evil-->",
        "<!-- @@var   evil \"evil\\aevil\" -->"
      ]
    },
    {
      "regex": "^(\\d+)(\\.\\d+)",
      "exceptionStackTrace": null,
      "matches": ["0.00", "0.", "00.0", ".0", "0.0"]
    },
    {
      "regex": "async|sync",
      "exceptionStackTrace": null,
      "matches": ["sync", "async"]
    },
    {
      "regex": "Correlation coefficient *: *(.*)\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "Either \"path\" or \"action\" are required",
      "exceptionStackTrace": null,
      "matches": ["Either \"path\" or \"action\" are required"]
    },
    {
      "regex": "\\n+[[:space:]]*",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^(\\d+)x(\\d+)([+-]\\d+)([+-]\\d+)$",
      "exceptionStackTrace": null,
      "matches": [
        "0x0-0-00",
        "0x0-0-",
        "0x0-0+0",
        "0x0-00-0",
        "0x0--0",
        "0x0+0-0",
        "0x00-0-0",
        "0x-0-0",
        "00x0-0-0",
        "x0-0-0",
        "0x0-0-0"
      ]
    },
    {
      "regex": "%([\\da-f]{1,2})",
      "exceptionStackTrace": null,
      "matches": ["%aaa", "%aa", "%", "%g", "%0", "%a"]
    },
    { "regex": "thes", "exceptionStackTrace": null, "matches": ["thes"] },
    {
      "regex": "^This(.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "ThiseVil",
        "ThisEVIL",
        "Thisev_il",
        "Thisev il",
        "Thisev4il",
        "Thise",
        "This ",
        "This6",
        "This_",
        "This",
        "Thisevil"
      ]
    },
    {
      "regex": "to.*did ",
      "exceptionStackTrace": null,
      "matches": [
        "toeVildid ",
        "toEVILdid ",
        "toev_ildid ",
        "toev ildid ",
        "toev4ildid ",
        "toedid ",
        "to did ",
        "to6did ",
        "to_did ",
        "todid ",
        "toevildid "
      ]
    },
    {
      "regex": "\n        \\{\\{(\\w+)\\}\\}\n    ",
      "exceptionStackTrace": null,
      "matches": [
        "\n        {{eVil}}\n    ",
        "\n        {{EVIL}}\n    ",
        "\n        {{ev_il}}\n    ",
        "\n        {{ev il}}\n    ",
        "\n        {{ev4il}}\n    ",
        "\n        {{e}}\n    ",
        "\n        {{ }}\n    ",
        "\n        {{6}}\n    ",
        "\n        {{_}}\n    ",
        "\n        {{}}\n    ",
        "\n        {{evil}}\n    "
      ]
    },
    {
      "regex": "\\s*(.*?)[\\x0a\\x0d]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 10"
      },
      "matches": []
    },
    {
      "regex": "$old_user",
      "exceptionStackTrace": null,
      "matches": ["old_user"]
    },
    {
      "regex": "[A-Z]{1}[a-z0-9]+$",
      "exceptionStackTrace": null,
      "matches": [
        "AeVil",
        "AEVIL",
        "Aev_il",
        "Aev il",
        "Aev4il",
        "Ae",
        "A ",
        "A6",
        "A_",
        "A",
        "AAevil",
        "evil",
        "Aevil"
      ]
    },
    {
      "regex": "^(?:|I )select \"([^\"]*)\" as the \"([^\"]*)\" date$",
      "exceptionStackTrace": null,
      "matches": [
        "I select \"evil\" as the \"\"\" date",
        "I select \"evil\" as the \"eVil\" date",
        "I select \"evil\" as the \"EVIL\" date",
        "I select \"evil\" as the \"ev_il\" date",
        "I select \"evil\" as the \"ev il\" date",
        "I select \"evil\" as the \"ev4il\" date",
        "I select \"evil\" as the \"e\" date",
        "I select \"evil\" as the \" \" date",
        "I select \"evil\" as the \"6\" date",
        "I select \"evil\" as the \"_\" date",
        "I select \"evil\" as the \"\" date",
        "I select \"\"\" as the \"evil\" date",
        "I select \"eVil\" as the \"evil\" date",
        "I select \"EVIL\" as the \"evil\" date",
        "I select \"ev_il\" as the \"evil\" date",
        "I select \"ev il\" as the \"evil\" date",
        "I select \"ev4il\" as the \"evil\" date",
        "I select \"e\" as the \"evil\" date",
        "I select \" \" as the \"evil\" date",
        "I select \"6\" as the \"evil\" date",
        "I select \"_\" as the \"evil\" date",
        "I select \"\" as the \"evil\" date",
        "I I select \"evil\" as the \"evil\" date",
        "select \"evil\" as the \"evil\" date",
        "select \"\" as the \"\" date",
        "I select \"evil\" as the \"evil\" date"
      ]
    },
    {
      "regex": "Tried to add already existing instance methods: \\[:existing_instance_method, :existing_private_instance_method\\]",
      "exceptionStackTrace": null,
      "matches": [
        "Tried to add already existing instance methods: [:existing_instance_method, :existing_private_instance_method]"
      ]
    },
    {
      "regex": "^\\s*\n                   ( [^\"]{$min,$max} [,;]\n                   | [^\"]{1,$max}    [,;\\s]\n                   | [^\\s\"]*(?:\"[^\"]*\"[ \\t]?[^\\s\"]*)+\\s\n                   ) ",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "(a|\\d+) ducks? that ha(?:s|ve) (a|\\d+) bills?",
      "exceptionStackTrace": null,
      "matches": [
        "00 ducks that has a bills",
        " ducks that has a bills",
        "a ducks that has 00 bills",
        "a ducks that has  bills",
        "a ducks that has a billss",
        "a ducks that has a bill",
        "a duckss that has a bills",
        "a duck that has a bills",
        "0 duck that has a bill",
        "a duck that have a bill",
        "a duck that has 0 bill",
        "a duck that has a bill",
        "0 ducks that has a bills",
        "a ducks that have a bills",
        "a ducks that has 0 bills",
        "a ducks that has a bills"
      ]
    },
    {
      "regex": ".adoc$|.ad$|.asciidoc$|.index$|.txt$",
      "exceptionStackTrace": null,
      "matches": [
        "_txt",
        "Atxt",
        "0txt",
        " txt",
        "_index",
        "Aindex",
        "0index",
        " index",
        "_asciidoc",
        "Aasciidoc",
        "0asciidoc",
        " asciidoc",
        "_ad",
        "Aad",
        "0ad",
        " ad",
        "_adoc",
        "Aadoc",
        "0adoc",
        " adoc",
        "atxt",
        "aindex",
        "aasciidoc",
        "aad",
        "aadoc"
      ]
    },
    {
      "regex": "([^A-Za-z0-9!*+\\/ -])",
      "exceptionStackTrace": null,
      "matches": ["a", "A", "0", "/", "-", "+", "*", "!", " ", "\""]
    },
    {
      "regex": "^T[1234]",
      "exceptionStackTrace": null,
      "matches": ["T3", "T2", "T1", "T0", "T4"]
    },
    {
      "regex": ".min.css$",
      "exceptionStackTrace": null,
      "matches": [
        "amin_css",
        "aminAcss",
        "amin0css",
        "amin css",
        "_minacss",
        "Aminacss",
        "0minacss",
        " minacss",
        "aminacss"
      ]
    },
    {
      "regex": "^\\); # for DUCET",
      "exceptionStackTrace": null,
      "matches": ["); # for DUCET"]
    },
    {
      "regex": "ProvisionedThroughputExceededException$",
      "exceptionStackTrace": null,
      "matches": ["ProvisionedThroughputExceededException"]
    },
    { "regex": "^(25)", "exceptionStackTrace": null, "matches": ["25"] },
    {
      "regex": "^TypeError: Illegal invocation$",
      "exceptionStackTrace": null,
      "matches": ["TypeError: Illegal invocation"]
    },
    { "regex": "^folks$", "exceptionStackTrace": null, "matches": ["folks"] },
    {
      "regex": "\\G($Num)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\G"
      },
      "matches": []
    },
    {
      "regex": "\\w|\\W",
      "exceptionStackTrace": null,
      "matches": [" ", "_", "A", "0", ";", "a"]
    },
    {
      "regex": "/attachments/item/state$",
      "exceptionStackTrace": null,
      "matches": ["/attachments/item/state"]
    },
    {
      "regex": "(</)([A-Z]*)(>)",
      "exceptionStackTrace": null,
      "matches": [
        "</eVil>",
        "</EVIL>",
        "</ev_il>",
        "</ev il>",
        "</ev4il>",
        "</e>",
        "</ >",
        "</6>",
        "</_>",
        "</>",
        "</evil>"
      ]
    },
    {
      "regex": "\\/([^\\/\\\\]|\\\\.)*\\/",
      "exceptionStackTrace": null,
      "matches": [
        "/\\\\/",
        "/\\A/",
        "/\\0/",
        "/\\//",
        "/\\ /",
        "/aa/",
        "/\\/",
        "/A/",
        "/0/",
        "///",
        "/ /",
        "//",
        "/\\a/",
        "/a/"
      ]
    },
    {
      "regex": "\\.appVersion = \"(.*)\"",
      "exceptionStackTrace": null,
      "matches": [
        ".appVersion = \"=\"",
        ".appVersion = \".\"",
        ".appVersion = \"\"\"",
        ".appVersion = \"eVil\"",
        ".appVersion = \"EVIL\"",
        ".appVersion = \"ev_il\"",
        ".appVersion = \"ev il\"",
        ".appVersion = \"ev4il\"",
        ".appVersion = \"e\"",
        ".appVersion = \" \"",
        ".appVersion = \"6\"",
        ".appVersion = \"_\"",
        ".appVersion = \"\"",
        ".appVersion = \"evil\""
      ]
    },
    {
      "regex": "$opt_deencap",
      "exceptionStackTrace": null,
      "matches": ["opt_deencap"]
    },
    {
      "regex": "goog.provide\\(['\"](.*)['\"]\\).*;",
      "exceptionStackTrace": null,
      "matches": [
        "googaprovide(\"evil\");;",
        "googaprovide(\"evil\"));",
        "googaprovide(\"evil\")(;",
        "googaprovide(\"evil\")';",
        "googaprovide(\"evil\")\";",
        "googaprovide(\"evil\")eVil;",
        "googaprovide(\"evil\")EVIL;",
        "googaprovide(\"evil\")ev_il;",
        "googaprovide(\"evil\")ev il;",
        "googaprovide(\"evil\")ev4il;",
        "googaprovide(\"evil\")e;",
        "googaprovide(\"evil\") ;",
        "googaprovide(\"evil\")6;",
        "googaprovide(\"evil\")_;",
        "googaprovide(\"evil\");",
        "googaprovide(\"evil')evil;",
        "googaprovide(\";\")evil;",
        "googaprovide(\")\")evil;",
        "googaprovide(\"(\")evil;",
        "googaprovide(\"'\")evil;",
        "googaprovide(\"\"\")evil;",
        "googaprovide(\"eVil\")evil;",
        "googaprovide(\"EVIL\")evil;",
        "googaprovide(\"ev_il\")evil;",
        "googaprovide(\"ev il\")evil;",
        "googaprovide(\"ev4il\")evil;",
        "googaprovide(\"e\")evil;",
        "googaprovide(\" \")evil;",
        "googaprovide(\"6\")evil;",
        "googaprovide(\"_\")evil;",
        "googaprovide(\"\")evil;",
        "googaprovide('evil\")evil;",
        "googAprovide(\"evil\")evil;",
        "goog;provide(\"evil\")evil;",
        "goog0provide(\"evil\")evil;",
        "goog)provide(\"evil\")evil;",
        "goog(provide(\"evil\")evil;",
        "goog'provide(\"evil\")evil;",
        "goog\"provide(\"evil\")evil;",
        "goog provide(\"evil\")evil;",
        "googaprovide(\"\");",
        "googaprovide(\"evil\")evil;"
      ]
    },
    {
      "regex": "[A-Z]{1,2}[0-9R][0-9A-Z]? *[0-9][A-Z]{0,2}",
      "exceptionStackTrace": null,
      "matches": [
        "ARA 0AAA",
        "ARA 0AA",
        "ARA 0",
        "ARA  0A",
        "ARA0A",
        "ARAA 0A",
        "AR 0A",
        "AR0 0A",
        "AAA 0A",
        "A0A 0A",
        "AAARA 0A",
        "AARA 0A",
        "RA 0A",
        "AR0",
        "ARA 0A"
      ]
    },
    { "regex": "^VIDEO$", "exceptionStackTrace": null, "matches": ["VIDEO"] },
    {
      "regex": "^([^,]+),(\\d+),(\\d+)(?:,(.*))?$",
      "exceptionStackTrace": null,
      "matches": [
        "evil,0,0,evil,evil",
        "evil,0,0,,",
        "evil,0,0,eVil",
        "evil,0,0,EVIL",
        "evil,0,0,ev_il",
        "evil,0,0,ev il",
        "evil,0,0,ev4il",
        "evil,0,0,e",
        "evil,0,0, ",
        "evil,0,0,6",
        "evil,0,0,_",
        "evil,0,0,",
        "evil,0,00,evil",
        "evil,0,,evil",
        "evil,00,0,evil",
        "evil,,0,evil",
        ",,0,0,evil",
        "eVil,0,0,evil",
        "EVIL,0,0,evil",
        "ev_il,0,0,evil",
        "ev il,0,0,evil",
        "ev4il,0,0,evil",
        "e,0,0,evil",
        " ,0,0,evil",
        "6,0,0,evil",
        "_,0,0,evil",
        ",0,0,evil",
        "evil,0,0",
        "evil,0,0,evil"
      ]
    },
    { "regex": "^WINCE", "exceptionStackTrace": null, "matches": ["WINCE"] },
    {
      "regex": "^([_a-zA-Z0-9]+)\\+\\+$",
      "exceptionStackTrace": null,
      "matches": [
        "+++",
        "eVil++",
        "EVIL++",
        "ev_il++",
        "ev il++",
        "ev4il++",
        "e++",
        " ++",
        "6++",
        "_++",
        "++",
        "evil++"
      ]
    },
    {
      "regex": "^(\\S+)\\s*\\((.*)\\);?\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        "evil (evil);  ",
        "evil (evil);",
        "evil (evil);; ",
        "evil (evil) ",
        "evil (;); ",
        "evil ()); ",
        "evil ((); ",
        "evil (eVil); ",
        "evil (EVIL); ",
        "evil (ev_il); ",
        "evil (ev il); ",
        "evil (ev4il); ",
        "evil (e); ",
        "evil ( ); ",
        "evil (6); ",
        "evil (_); ",
        "evil (); ",
        "evil  (evil); ",
        "evil(evil); ",
        "; (evil); ",
        ") (evil); ",
        "( (evil); ",
        "eVil (evil); ",
        "EVIL (evil); ",
        "ev_il (evil); ",
        "ev il (evil); ",
        "ev4il (evil); ",
        "e (evil); ",
        "  (evil); ",
        "6 (evil); ",
        "_ (evil); ",
        " (evil); ",
        "evil()",
        "evil (evil); "
      ]
    },
    {
      "regex": "ipPermissions(Egress)?/item/groups/item/userId$",
      "exceptionStackTrace": null,
      "matches": [
        "ipPermissionsEgressEgress/item/groups/item/userId",
        "ipPermissions/item/groups/item/userId",
        "ipPermissionsEgress/item/groups/item/userId"
      ]
    },
    {
      "regex": "modify_table :",
      "exceptionStackTrace": null,
      "matches": ["modify_table :"]
    },
    {
      "regex": "(^\\+420|\\D)",
      "exceptionStackTrace": null,
      "matches": ["_", "A", "0", "+", " ", "a", "+420"]
    },
    {
      "regex": "(^    at.+[>)\\d]$\\n?)+",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    { "regex": "^(?u:\\\\#)", "exceptionStackTrace": null, "matches": [""] },
    { "regex": "\\.hbars", "exceptionStackTrace": null, "matches": [".hbars"] },
    {
      "regex": "For(?:In|Of)Statement",
      "exceptionStackTrace": null,
      "matches": ["ForOfStatement", "ForInStatement"]
    },
    {
      "regex": "ENSECAG\\d{11}",
      "exceptionStackTrace": null,
      "matches": [
        "ENSECAG000000000000",
        "ENSECAG0000000000",
        "ENSECAG00000000000"
      ]
    },
    {
      "regex": "(\\],.\\[?)",
      "exceptionStackTrace": null,
      "matches": [
        "],a[[",
        "],][",
        "],[[",
        "],A[",
        "],0[",
        "],,[",
        "], [",
        "],a",
        "],a["
      ]
    },
    {
      "regex": "(and|AND)\\b(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "andeVil",
        "andEVIL",
        "andev_il",
        "andev il",
        "andev4il",
        "ande",
        "and ",
        "and6",
        "and_",
        "AND",
        "and",
        "ANDevil",
        "andevil"
      ]
    },
    {
      "regex": "Application with invalid password",
      "exceptionStackTrace": null,
      "matches": ["Application with invalid password"]
    },
    {
      "regex": "  Encoded password\\s+(\\$argon2id?\\$[\\w,=\\$+\\/]+={0,2})\\s+",
      "exceptionStackTrace": null,
      "matches": [
        "  Encoded password $argon2id$evil=  ",
        "  Encoded password $argon2id$evil=",
        "  Encoded password $argon2id$evil=== ",
        "  Encoded password $argon2id$evil== ",
        "  Encoded password $argon2id$evil ",
        "  Encoded password $argon2id$== ",
        "  Encoded password $argon2id$/= ",
        "  Encoded password $argon2id$,= ",
        "  Encoded password $argon2id$+= ",
        "  Encoded password $argon2id$$= ",
        "  Encoded password $argon2id$eVil= ",
        "  Encoded password $argon2id$EVIL= ",
        "  Encoded password $argon2id$ev_il= ",
        "  Encoded password $argon2id$ev il= ",
        "  Encoded password $argon2id$ev4il= ",
        "  Encoded password $argon2id$e= ",
        "  Encoded password $argon2id$ = ",
        "  Encoded password $argon2id$6= ",
        "  Encoded password $argon2id$_= ",
        "  Encoded password $argon2id$= ",
        "  Encoded password $argon2idd$evil= ",
        "  Encoded password $argon2i$evil= ",
        "  Encoded password  $argon2id$evil= ",
        "  Encoded password$argon2id$evil= ",
        "  Encoded password $argon2i$evil ",
        "  Encoded password $argon2id$evil= "
      ]
    },
    {
      "regex": "Add operation with different types: \"1\" \\(string\\) \\+ 1 \\(number\\)",
      "exceptionStackTrace": null,
      "matches": [
        "Add operation with different types: \"1\" (string) + 1 (number)"
      ]
    },
    {
      "regex": "#define[\\s]+SHADER_NAME_B64[\\s]+([\\S]+)(\\n|$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "(<hr [^>]*)width=\\\"?100%\\\"?([^>]*>)",
      "exceptionStackTrace": null,
      "matches": [
        "<hr evilwidth=\"100%\">>",
        "<hr evilwidth=\"100%\"=>",
        "<hr evilwidth=\"100%\"<>",
        "<hr evilwidth=\"100%\"%>",
        "<hr evilwidth=\"100%\"\">",
        "<hr evilwidth=\"100%\"eVil>",
        "<hr evilwidth=\"100%\"EVIL>",
        "<hr evilwidth=\"100%\"ev_il>",
        "<hr evilwidth=\"100%\"ev il>",
        "<hr evilwidth=\"100%\"ev4il>",
        "<hr evilwidth=\"100%\"e>",
        "<hr evilwidth=\"100%\" >",
        "<hr evilwidth=\"100%\"6>",
        "<hr evilwidth=\"100%\"_>",
        "<hr evilwidth=\"100%\">",
        "<hr evilwidth=\"100%\"\"evil>",
        "<hr evilwidth=\"100%evil>",
        "<hr evilwidth=\"\"100%\"evil>",
        "<hr evilwidth=100%\"evil>",
        "<hr >width=\"100%\"evil>",
        "<hr =width=\"100%\"evil>",
        "<hr <width=\"100%\"evil>",
        "<hr %width=\"100%\"evil>",
        "<hr \"width=\"100%\"evil>",
        "<hr eVilwidth=\"100%\"evil>",
        "<hr EVILwidth=\"100%\"evil>",
        "<hr ev_ilwidth=\"100%\"evil>",
        "<hr ev ilwidth=\"100%\"evil>",
        "<hr ev4ilwidth=\"100%\"evil>",
        "<hr ewidth=\"100%\"evil>",
        "<hr  width=\"100%\"evil>",
        "<hr 6width=\"100%\"evil>",
        "<hr _width=\"100%\"evil>",
        "<hr width=\"100%\"evil>",
        "<hr width=100%>",
        "<hr evilwidth=\"100%\"evil>"
      ]
    },
    {
      "regex": "^.*[ !\\\"#\\$%&'\\(\\)\\*\\+,-\\./:;<=>\\?@\\[\\\\\\]\\^_`{\\|}~]+.*$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (bad range): Invalid range: ,-."
      },
      "matches": []
    },
    {
      "regex": "\\A[^a-zA-Z]\\Z",
      "exceptionStackTrace": null,
      "matches": ["a", "_", "A", " ", "0"]
    },
    {
      "regex": "Domain Name:\\s(.+?)\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "social provider",
      "exceptionStackTrace": null,
      "matches": ["social provider"]
    },
    {
      "regex": "Mobile|Android|BlackBerry|iPhone|Windows Phone",
      "exceptionStackTrace": null,
      "matches": ["Windows Phone", "iPhone", "BlackBerry", "Android", "Mobile"]
    },
    {
      "regex": "\\w*(?=\\s)",
      "exceptionStackTrace": null,
      "matches": [
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "(?s)Notes/Commercial Description:</b>(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "Notes/Commercial Description:</b>>",
        "Notes/Commercial Description:</b><",
        "Notes/Commercial Description:</b>:",
        "Notes/Commercial Description:</b>/",
        "Notes/Commercial Description:</b>eVil",
        "Notes/Commercial Description:</b>EVIL",
        "Notes/Commercial Description:</b>ev_il",
        "Notes/Commercial Description:</b>ev il",
        "Notes/Commercial Description:</b>ev4il",
        "Notes/Commercial Description:</b>e",
        "Notes/Commercial Description:</b> ",
        "Notes/Commercial Description:</b>6",
        "Notes/Commercial Description:</b>_",
        "Notes/Commercial Description:</b>",
        "Notes/Commercial Description:</b>evil"
      ]
    },
    {
      "regex": "^\\u001b",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 27"
      },
      "matches": []
    },
    {
      "regex": "require.+config/smtp",
      "exceptionStackTrace": null,
      "matches": [
        "require/config/smtp",
        "requireeVilconfig/smtp",
        "requireEVILconfig/smtp",
        "requireev_ilconfig/smtp",
        "requireev ilconfig/smtp",
        "requireev4ilconfig/smtp",
        "requireeconfig/smtp",
        "require config/smtp",
        "require6config/smtp",
        "require_config/smtp",
        "requireconfig/smtp",
        "requireevilconfig/smtp"
      ]
    },
    { "regex": "\\d/\\d", "exceptionStackTrace": null, "matches": ["0/0"] },
    {
      "regex": "^log\\d+$",
      "exceptionStackTrace": null,
      "matches": ["log00", "log", "log0"]
    },
    {
      "regex": "CAMERA_USAGE_DESCRIPTION",
      "exceptionStackTrace": null,
      "matches": ["CAMERA_USAGE_DESCRIPTION"]
    },
    {
      "regex": "%\\s*#.*coding[:=]\\s*([-\\w.]+)",
      "exceptionStackTrace": null,
      "matches": [
        "% #evilcoding= =",
        "% #evilcoding= :",
        "% #evilcoding= .",
        "% #evilcoding= -",
        "% #evilcoding= %",
        "% #evilcoding= #",
        "% #evilcoding= eVil",
        "% #evilcoding= EVIL",
        "% #evilcoding= ev_il",
        "% #evilcoding= ev il",
        "% #evilcoding= ev4il",
        "% #evilcoding= e",
        "% #evilcoding=  ",
        "% #evilcoding= 6",
        "% #evilcoding= _",
        "% #evilcoding= ",
        "% #evilcoding=  evil",
        "% #evilcoding=evil",
        "% #evilcoding: evil",
        "% #=coding= evil",
        "% #:coding= evil",
        "% #.coding= evil",
        "% #-coding= evil",
        "% #%coding= evil",
        "% ##coding= evil",
        "% #eVilcoding= evil",
        "% #EVILcoding= evil",
        "% #ev_ilcoding= evil",
        "% #ev ilcoding= evil",
        "% #ev4ilcoding= evil",
        "% #ecoding= evil",
        "% # coding= evil",
        "% #6coding= evil",
        "% #_coding= evil",
        "% #coding= evil",
        "%  #evilcoding= evil",
        "%#evilcoding= evil",
        "%#coding=evil",
        "% #evilcoding= evil"
      ]
    },
    {
      "regex": "[^\\w]+|able|all|already|and|any|are|because|both|can|come|each|email|even|few|first|for|from|give|has|have|http|information|into|it's|just|know|like|long|look|made|mail|mailing|mailto|make|many|more|most|much|need|not|now|number|off|one|only|out|own|people|place|right|same|see|such|that|the|this|through|time|using|web|where|why|with|without|work|world|year|years|you|you're|your",
      "exceptionStackTrace": null,
      "matches": [
        "'",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "your",
        "you're",
        "you",
        "years",
        "year",
        "world",
        "work",
        "without",
        "with",
        "why",
        "where",
        "web",
        "using",
        "time",
        "through",
        "this",
        "the",
        "that",
        "such",
        "see",
        "same",
        "right",
        "place",
        "people",
        "own",
        "out",
        "only",
        "one",
        "off",
        "number",
        "now",
        "not",
        "need",
        "much",
        "most",
        "more",
        "many",
        "make",
        "mailto",
        "mailing",
        "mail",
        "made",
        "look",
        "long",
        "like",
        "know",
        "just",
        "it's",
        "into",
        "information",
        "http",
        "have",
        "has",
        "give",
        "from",
        "for",
        "first",
        "few",
        "even",
        "email",
        "each",
        "come",
        "can",
        "both",
        "because",
        "are",
        "any",
        "and",
        "already",
        "all",
        "able",
        "evil"
      ]
    },
    {
      "regex": "^([^.]*\\.)?",
      "exceptionStackTrace": null,
      "matches": [
        "evil.evil.",
        "..",
        "eVil.",
        "EVIL.",
        "ev_il.",
        "ev il.",
        "ev4il.",
        "e.",
        " .",
        "6.",
        "_.",
        ".",
        "",
        "evil."
      ]
    },
    {
      "regex": "^org_dir\\.",
      "exceptionStackTrace": null,
      "matches": ["org_dir."]
    },
    {
      "regex": "cake\\.project",
      "exceptionStackTrace": null,
      "matches": ["cake.project"]
    },
    {
      "regex": "cols\\s*=\\s*[\"']?(\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "cols = '00",
        "cols = '",
        "cols = ''0",
        "cols = 0",
        "cols = \"0",
        "cols =  '0",
        "cols ='0",
        "cols  = '0",
        "cols= '0",
        "cols=0",
        "cols = '0"
      ]
    },
    {
      "regex": "([\\+\\-]?[0-9#\\.]+)(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$",
      "exceptionStackTrace": null,
      "matches": [
        "-.%%",
        "-.",
        "-..%",
        "-%",
        "-0%",
        "-#%",
        "--.%",
        ".%",
        "+.%",
        ".",
        "-.turn",
        "-.rad",
        "-.deg",
        "-.vmax",
        "-.vmin",
        "-.vh",
        "-.vw",
        "-.pc",
        "-.ch",
        "-.ex",
        "-.mm",
        "-.cm",
        "-.in",
        "-.rem",
        "-.em",
        "-.pt",
        "-.px",
        "-.%"
      ]
    },
    {
      "regex": "file:\\/\\/\\.\\/",
      "exceptionStackTrace": null,
      "matches": ["file://./"]
    },
    {
      "regex": "Hello World 2",
      "exceptionStackTrace": null,
      "matches": ["Hello World 2"]
    },
    {
      "regex": "^From: =\\?UTF\\-8\\?Q\\?the_safewithme_=C3=B5_testuser\\?=$",
      "exceptionStackTrace": null,
      "matches": ["From: =?UTF-8?Q?the_safewithme_=C3=B5_testuser?="]
    },
    {
      "regex": "use --force.+download.+",
      "exceptionStackTrace": null,
      "matches": [
        "use --forceevildownload-",
        "use --forceevildownloadeVil",
        "use --forceevildownloadEVIL",
        "use --forceevildownloadev_il",
        "use --forceevildownloadev il",
        "use --forceevildownloadev4il",
        "use --forceevildownloade",
        "use --forceevildownload ",
        "use --forceevildownload6",
        "use --forceevildownload_",
        "use --forceevildownload",
        "use --force-downloadevil",
        "use --forceeVildownloadevil",
        "use --forceEVILdownloadevil",
        "use --forceev_ildownloadevil",
        "use --forceev ildownloadevil",
        "use --forceev4ildownloadevil",
        "use --forceedownloadevil",
        "use --force downloadevil",
        "use --force6downloadevil",
        "use --force_downloadevil",
        "use --forcedownloadevil",
        "use --forceevildownloadevil"
      ]
    },
    {
      "regex": "&nbsp;&nbsp;<a href=([^<>]*?list_member.pl\\?[^<>\\s]*page=[^<>\\s]*)>((?:(?!<\\/a>).)*)<\\/a>",
      "exceptionStackTrace": null,
      "matches": [
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage=evil>aa</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage=evil></a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage=evil>_</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage=evil>A</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage=evil>?</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage=evil>></a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage=evil>=</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage=evil><</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage=evil>;</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage=evil>0</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage=evil>/</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage=evil>&</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage=evil> </a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage=?>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage=>>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage==>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage=<>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage=;>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage=/>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage=&>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage=eVil>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage=EVIL>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage=ev_il>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage=ev il>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage=ev4il>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage=e>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage= >a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage=6>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage=_>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage=>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl??page=evil>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?>page=evil>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?=page=evil>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?<page=evil>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?;page=evil>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?/page=evil>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?&page=evil>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?eVilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?EVILpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?ev_ilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?ev ilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?ev4ilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?epage=evil>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl? page=evil>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?6page=evil>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?_page=evil>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?page=evil>a</a>",
        "&nbsp;&nbsp;<a href=evillist_member_pl?evilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=evillist_memberApl?evilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=evillist_member?pl?evilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=evillist_member>pl?evilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=evillist_member=pl?evilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=evillist_member<pl?evilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=evillist_member;pl?evilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=evillist_member0pl?evilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=evillist_member/pl?evilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=evillist_member&pl?evilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=evillist_member pl?evilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=?list_memberapl?evilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=>list_memberapl?evilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href==list_memberapl?evilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=<list_memberapl?evilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=;list_memberapl?evilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=/list_memberapl?evilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=&list_memberapl?evilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=eVillist_memberapl?evilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=EVILlist_memberapl?evilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=ev_illist_memberapl?evilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=ev illist_memberapl?evilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=ev4illist_memberapl?evilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=elist_memberapl?evilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href= list_memberapl?evilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=6list_memberapl?evilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=_list_memberapl?evilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=list_memberapl?evilpage=evil>a</a>",
        "&nbsp;&nbsp;<a href=list_memberapl?page=></a>",
        "&nbsp;&nbsp;<a href=evillist_memberapl?evilpage=evil>a</a>"
      ]
    },
    {
      "regex": "\\\\([\\\\\\\"])",
      "exceptionStackTrace": null,
      "matches": ["\\\\", "\\\""]
    },
    {
      "regex": "\\s(?:(T)|[[:upper:]])\\s",
      "exceptionStackTrace": null,
      "matches": [" u] ", " r] ", " p] ", " e] ", " a] ", " [] ", " :] ", " T "]
    },
    {
      "regex": "method with initialization logic not found",
      "exceptionStackTrace": null,
      "matches": ["method with initialization logic not found"]
    },
    {
      "regex": "([^-]+)-([^-]+)",
      "exceptionStackTrace": null,
      "matches": [
        "evil--",
        "evil-eVil",
        "evil-EVIL",
        "evil-ev_il",
        "evil-ev il",
        "evil-ev4il",
        "evil-e",
        "evil- ",
        "evil-6",
        "evil-_",
        "evil-",
        "--evil",
        "eVil-evil",
        "EVIL-evil",
        "ev_il-evil",
        "ev il-evil",
        "ev4il-evil",
        "e-evil",
        " -evil",
        "6-evil",
        "_-evil",
        "-evil",
        "evil-evil"
      ]
    },
    {
      "regex": "^Versions\\ before\\ 3\\.0\\.10\\ have\\ a\\ vulnerabil",
      "exceptionStackTrace": null,
      "matches": ["Versions before 3.0.10 have a vulnerabil"]
    },
    {
      "regex": "^(\\d+)-(\\d+)([EW])",
      "exceptionStackTrace": null,
      "matches": ["0-0E", "0-0A", "0-00W", "0-W", "00-0W", "-0W", "0-0W"]
    },
    { "regex": "^-delay", "exceptionStackTrace": null, "matches": ["-delay"] },
    {
      "regex": "\\bruleset=check_rcpt\\b",
      "exceptionStackTrace": null,
      "matches": ["ruleset=check_rcpt"]
    },
    {
      "regex": "body.*:index=>.*:operator_class=>\"text_pattern_ops\"",
      "exceptionStackTrace": null,
      "matches": [
        "bodyevil:index=>>:operator_class=>\"text_pattern_ops\"",
        "bodyevil:index=>=:operator_class=>\"text_pattern_ops\"",
        "bodyevil:index=>::operator_class=>\"text_pattern_ops\"",
        "bodyevil:index=>\":operator_class=>\"text_pattern_ops\"",
        "bodyevil:index=>eVil:operator_class=>\"text_pattern_ops\"",
        "bodyevil:index=>EVIL:operator_class=>\"text_pattern_ops\"",
        "bodyevil:index=>ev_il:operator_class=>\"text_pattern_ops\"",
        "bodyevil:index=>ev il:operator_class=>\"text_pattern_ops\"",
        "bodyevil:index=>ev4il:operator_class=>\"text_pattern_ops\"",
        "bodyevil:index=>e:operator_class=>\"text_pattern_ops\"",
        "bodyevil:index=> :operator_class=>\"text_pattern_ops\"",
        "bodyevil:index=>6:operator_class=>\"text_pattern_ops\"",
        "bodyevil:index=>_:operator_class=>\"text_pattern_ops\"",
        "bodyevil:index=>:operator_class=>\"text_pattern_ops\"",
        "body>:index=>evil:operator_class=>\"text_pattern_ops\"",
        "body=:index=>evil:operator_class=>\"text_pattern_ops\"",
        "body::index=>evil:operator_class=>\"text_pattern_ops\"",
        "body\":index=>evil:operator_class=>\"text_pattern_ops\"",
        "bodyeVil:index=>evil:operator_class=>\"text_pattern_ops\"",
        "bodyEVIL:index=>evil:operator_class=>\"text_pattern_ops\"",
        "bodyev_il:index=>evil:operator_class=>\"text_pattern_ops\"",
        "bodyev il:index=>evil:operator_class=>\"text_pattern_ops\"",
        "bodyev4il:index=>evil:operator_class=>\"text_pattern_ops\"",
        "bodye:index=>evil:operator_class=>\"text_pattern_ops\"",
        "body :index=>evil:operator_class=>\"text_pattern_ops\"",
        "body6:index=>evil:operator_class=>\"text_pattern_ops\"",
        "body_:index=>evil:operator_class=>\"text_pattern_ops\"",
        "body:index=>evil:operator_class=>\"text_pattern_ops\"",
        "body:index=>:operator_class=>\"text_pattern_ops\"",
        "bodyevil:index=>evil:operator_class=>\"text_pattern_ops\""
      ]
    },
    { "regex": "%DIST%", "exceptionStackTrace": null, "matches": ["%DIST%"] },
    {
      "regex": "^\\s*language\\s*=\\s*C\\s*;",
      "exceptionStackTrace": null,
      "matches": [
        " language = C  ;",
        " language = C;",
        " language =  C ;",
        " language =C ;",
        " language  = C ;",
        " language= C ;",
        "  language = C ;",
        "language = C ;",
        "language=C;",
        " language = C ;"
      ]
    },
    {
      "regex": "^(?:I )?set the map zoom level to (\\d+)$",
      "exceptionStackTrace": null,
      "matches": [
        "I set the map zoom level to 00",
        "I set the map zoom level to ",
        "I I set the map zoom level to 0",
        "set the map zoom level to 0",
        "I set the map zoom level to 0"
      ]
    },
    { "regex": "=\\Z", "exceptionStackTrace": null, "matches": ["="] },
    {
      "regex": "foo\\/bar\\/(.+)",
      "exceptionStackTrace": null,
      "matches": [
        "foo/bar//",
        "foo/bar/eVil",
        "foo/bar/EVIL",
        "foo/bar/ev_il",
        "foo/bar/ev il",
        "foo/bar/ev4il",
        "foo/bar/e",
        "foo/bar/ ",
        "foo/bar/6",
        "foo/bar/_",
        "foo/bar/",
        "foo/bar/evil"
      ]
    },
    {
      "regex": "^(3[01]|[12][0-9]|0[1-9])",
      "exceptionStackTrace": null,
      "matches": ["10", "00", "32", "30", "01", "20", "31"]
    },
    {
      "regex": "^CMakeLists.txt$",
      "exceptionStackTrace": null,
      "matches": [
        "CMakeLists_txt",
        "CMakeListsAtxt",
        "CMakeLists0txt",
        "CMakeLists txt",
        "CMakeListsatxt"
      ]
    },
    {
      "regex": "[.=]..?$",
      "exceptionStackTrace": null,
      "matches": [
        "=aaa",
        "=aA",
        "=a=",
        "=a0",
        "=a.",
        "=a ",
        "=Aa",
        "==a",
        "=0a",
        "=.a",
        "= a",
        ".aa",
        "=a",
        "=aa"
      ]
    },
    {
      "regex": "none|trust|lookup",
      "exceptionStackTrace": null,
      "matches": ["lookup", "trust", "none"]
    },
    {
      "regex": "Payload size of \\d+ exceeds allowed size of 2048 bytes",
      "exceptionStackTrace": null,
      "matches": [
        "Payload size of 00 exceeds allowed size of 2048 bytes",
        "Payload size of  exceeds allowed size of 2048 bytes",
        "Payload size of 0 exceeds allowed size of 2048 bytes"
      ]
    },
    {
      "regex": "(?<!\\\\)(?:\\\\\\\\)*[\\$\\@]",
      "exceptionStackTrace": null,
      "matches": ["\\\\$", "\\\\\\\\@", "@", "\\\\@"]
    },
    {
      "regex": "[^A-Za-z\\d_]+",
      "exceptionStackTrace": null,
      "matches": [
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "http:\\/\\/([^\\/]+)(\\/[^\\?]+)\\?(.*$)",
      "exceptionStackTrace": null,
      "matches": [
        "http://evil/evil??",
        "http://evil/evil?:",
        "http://evil/evil?/",
        "http://evil/evil?eVil",
        "http://evil/evil?EVIL",
        "http://evil/evil?ev_il",
        "http://evil/evil?ev il",
        "http://evil/evil?ev4il",
        "http://evil/evil?e",
        "http://evil/evil? ",
        "http://evil/evil?6",
        "http://evil/evil?_",
        "http://evil/??evil",
        "http://evil/:?evil",
        "http://evil//?evil",
        "http://evil/eVil?evil",
        "http://evil/EVIL?evil",
        "http://evil/ev_il?evil",
        "http://evil/ev il?evil",
        "http://evil/ev4il?evil",
        "http://evil/e?evil",
        "http://evil/ ?evil",
        "http://evil/6?evil",
        "http://evil/_?evil",
        "http://evil/?evil",
        "http://?/evil?evil",
        "http://:/evil?evil",
        "http:////evil?evil",
        "http://eVil/evil?evil",
        "http://EVIL/evil?evil",
        "http://ev_il/evil?evil",
        "http://ev il/evil?evil",
        "http://ev4il/evil?evil",
        "http://e/evil?evil",
        "http:// /evil?evil",
        "http://6/evil?evil",
        "http://_/evil?evil",
        "http:///evil?evil",
        "http://evil/evil?",
        "http://evil/evil?evil"
      ]
    },
    {
      "regex": "\\\\author\\{foo\\}",
      "exceptionStackTrace": null,
      "matches": ["\\author{foo}"]
    },
    {
      "regex": "[\\p{Alpha}]+://.+",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\p"
      },
      "matches": []
    },
    {
      "regex": "^(mode|theme|ext|keybinding)-",
      "exceptionStackTrace": null,
      "matches": ["keybinding-", "ext-", "theme-", "mode-"]
    },
    {
      "regex": "\\u001b\\[38;5;172m.services\\u001b\\[39m \u2502 \\u001b\\[38;5;8mLists all of the services within this project\\u001b\\[39m",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 27"
      },
      "matches": []
    },
    {
      "regex": "^\\d+-\\d+\\s+of\\s+([\\d,]+)\\s+results",
      "exceptionStackTrace": null,
      "matches": [
        "0-0 of ,  results",
        "0-0 of ,results",
        "0-0 of ,, results",
        "0-0 of  results",
        "0-0 of 0 results",
        "0-0 of  , results",
        "0-0 of, results",
        "0-0  of , results",
        "0-0of , results",
        "0-00 of , results",
        "0- of , results",
        "00-0 of , results",
        "-0 of , results",
        "0-0 of , results"
      ]
    },
    {
      "regex": "^I should be able to click it when it gets added$",
      "exceptionStackTrace": null,
      "matches": ["I should be able to click it when it gets added"]
    },
    {
      "regex": "META-INF/SERVICES/.*",
      "exceptionStackTrace": null,
      "matches": [
        "META-INF/SERVICES//",
        "META-INF/SERVICES/-",
        "META-INF/SERVICES/eVil",
        "META-INF/SERVICES/EVIL",
        "META-INF/SERVICES/ev_il",
        "META-INF/SERVICES/ev il",
        "META-INF/SERVICES/ev4il",
        "META-INF/SERVICES/e",
        "META-INF/SERVICES/ ",
        "META-INF/SERVICES/6",
        "META-INF/SERVICES/_",
        "META-INF/SERVICES/",
        "META-INF/SERVICES/evil"
      ]
    },
    {
      "regex": "^(self\\.|test_class_)",
      "exceptionStackTrace": null,
      "matches": ["test_class_", "self."]
    },
    {
      "regex": "[*~$^|=]",
      "exceptionStackTrace": null,
      "matches": ["~", "|", "^", "*", "$", "="]
    },
    {
      "regex": "Record last updated on (.+?)\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "\\$\\{(.+?):(\\d+)\\}",
      "exceptionStackTrace": null,
      "matches": [
        "${evil:00}",
        "${evil:}",
        "${}:0}",
        "${{:0}",
        "${::0}",
        "${$:0}",
        "${eVil:0}",
        "${EVIL:0}",
        "${ev_il:0}",
        "${ev il:0}",
        "${ev4il:0}",
        "${e:0}",
        "${ :0}",
        "${6:0}",
        "${_:0}",
        "${:0}",
        "${evil:0}"
      ]
    },
    {
      "regex": "[^\\x00<]*?(?={BEGIN})",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 0"
      },
      "matches": []
    },
    {
      "regex": "^[\\0-\\xFF]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\0"
      },
      "matches": []
    },
    {
      "regex": "`attendee`",
      "exceptionStackTrace": null,
      "matches": ["`attendee`"]
    },
    {
      "regex": "-[w]\\s?(\\d+)",
      "exceptionStackTrace": null,
      "matches": ["-w 00", "-w ", "-w  0", "-w0", "-w 0"]
    },
    {
      "regex": "Console Connected to",
      "exceptionStackTrace": null,
      "matches": ["Console Connected to"]
    },
    {
      "regex": "(/)([imsxeADSUXu]*)(\")",
      "exceptionStackTrace": null,
      "matches": [
        "/uu\"",
        "/x\"",
        "/s\"",
        "/m\"",
        "/i\"",
        "/e\"",
        "/a\"",
        "/X\"",
        "/U\"",
        "/S\"",
        "/D\"",
        "/B\"",
        "/A\"",
        "/\"",
        "/u\""
      ]
    },
    {
      "regex": "\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b",
      "exceptionStackTrace": null,
      "matches": [
        "0.0e-0e-0",
        "0.0",
        "0.0e-00",
        "0.0e-",
        "0.0e--0",
        "0.0e0",
        "0.0e+0",
        "0.0.0e-0",
        "0e-0",
        "0.00e-0",
        "0.e-0",
        "00.0e-0",
        ".0e-0",
        "0xaa",
        "0x",
        "0xg",
        "0x0",
        "0",
        "0.0e-0",
        "0xa"
      ]
    },
    {
      "regex": "current Bundler version",
      "exceptionStackTrace": null,
      "matches": ["current Bundler version"]
    },
    {
      "regex": "([a-zA-Z0-9]*)",
      "exceptionStackTrace": null,
      "matches": [
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "/(tools|libs)/(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "/tools//",
        "/tools/eVil",
        "/tools/EVIL",
        "/tools/ev_il",
        "/tools/ev il",
        "/tools/ev4il",
        "/tools/e",
        "/tools/ ",
        "/tools/6",
        "/tools/_",
        "/libs/",
        "/tools/",
        "/libs/evil",
        "/tools/evil"
      ]
    },
    {
      "regex": "([-0-9a-zA-Z._+&\\/=]+@([-0-9a-zA-Z]+[.])+[a-zA-Z]{2,6})",
      "exceptionStackTrace": null,
      "matches": [
        "evil@evil.AAAAAAA",
        "evil@evil.AAAAAA",
        "evil@evil.A",
        "evil@evil.aA",
        "evil@evil.evil.AA",
        "evil@AA",
        "evil@@.AA",
        "evil@=.AA",
        "evil@/.AA",
        "evil@..AA",
        "evil@-.AA",
        "evil@+.AA",
        "evil@&.AA",
        "evil@eVil.AA",
        "evil@EVIL.AA",
        "evil@ev_il.AA",
        "evil@ev il.AA",
        "evil@ev4il.AA",
        "evil@e.AA",
        "evil@ .AA",
        "evil@6.AA",
        "evil@_.AA",
        "evil@.AA",
        "@@evil.AA",
        "=@evil.AA",
        "/@evil.AA",
        ".@evil.AA",
        "-@evil.AA",
        "+@evil.AA",
        "&@evil.AA",
        "eVil@evil.AA",
        "EVIL@evil.AA",
        "ev_il@evil.AA",
        "ev il@evil.AA",
        "ev4il@evil.AA",
        "e@evil.AA",
        " @evil.AA",
        "6@evil.AA",
        "_@evil.AA",
        "@evil.AA",
        "evil@evil.AA"
      ]
    },
    {
      "regex": "You cannot currently mix including and excluding fields",
      "exceptionStackTrace": null,
      "matches": ["You cannot currently mix including and excluding fields"]
    },
    {
      "regex": "([ai]ble|ante)mente$",
      "exceptionStackTrace": null,
      "matches": ["bblemente", "ablemente", "antemente", "iblemente"]
    },
    {
      "regex": "domain isn't set up correctly",
      "exceptionStackTrace": null,
      "matches": ["domain isn't set up correctly"]
    },
    {
      "regex": "^target=.*",
      "exceptionStackTrace": null,
      "matches": [
        "target==",
        "target=eVil",
        "target=EVIL",
        "target=ev_il",
        "target=ev il",
        "target=ev4il",
        "target=e",
        "target= ",
        "target=6",
        "target=_",
        "target=",
        "target=evil"
      ]
    },
    {
      "regex": "<sup id=\"fnref:([^\"]+)\">\\s*<a href=\"#fn:\\1\" rel=\"footnote\">\\s*\\d+\\s*</a>\\s*</sup>",
      "exceptionStackTrace": null,
      "matches": [
        "<sup id=\"fnref:evil\"> <a href=\"#fn:evil\" rel=\"footnote\"> 0 </a>  </sup>",
        "<sup id=\"fnref:evil\"> <a href=\"#fn:evil\" rel=\"footnote\"> 0 </a></sup>",
        "<sup id=\"fnref:evil\"> <a href=\"#fn:evil\" rel=\"footnote\"> 0  </a> </sup>",
        "<sup id=\"fnref:evil\"> <a href=\"#fn:evil\" rel=\"footnote\"> 0</a> </sup>",
        "<sup id=\"fnref:evil\"> <a href=\"#fn:evil\" rel=\"footnote\"> 00 </a> </sup>",
        "<sup id=\"fnref:evil\"> <a href=\"#fn:evil\" rel=\"footnote\">  </a> </sup>",
        "<sup id=\"fnref:evil\"> <a href=\"#fn:evil\" rel=\"footnote\">  0 </a> </sup>",
        "<sup id=\"fnref:evil\"> <a href=\"#fn:evil\" rel=\"footnote\">0 </a> </sup>",
        "<sup id=\"fnref:evil\">  <a href=\"#fn:evil\" rel=\"footnote\"> 0 </a> </sup>",
        "<sup id=\"fnref:evil\"><a href=\"#fn:evil\" rel=\"footnote\"> 0 </a> </sup>",
        "<sup id=\"fnref:>\"> <a href=\"#fn:evil\" rel=\"footnote\"> 0 </a> </sup>",
        "<sup id=\"fnref:=\"> <a href=\"#fn:evil\" rel=\"footnote\"> 0 </a> </sup>",
        "<sup id=\"fnref:<\"> <a href=\"#fn:evil\" rel=\"footnote\"> 0 </a> </sup>",
        "<sup id=\"fnref::\"> <a href=\"#fn:evil\" rel=\"footnote\"> 0 </a> </sup>",
        "<sup id=\"fnref:/\"> <a href=\"#fn:evil\" rel=\"footnote\"> 0 </a> </sup>",
        "<sup id=\"fnref:#\"> <a href=\"#fn:evil\" rel=\"footnote\"> 0 </a> </sup>",
        "<sup id=\"fnref:\"\"> <a href=\"#fn:evil\" rel=\"footnote\"> 0 </a> </sup>",
        "<sup id=\"fnref:eVil\"> <a href=\"#fn:evil\" rel=\"footnote\"> 0 </a> </sup>",
        "<sup id=\"fnref:EVIL\"> <a href=\"#fn:evil\" rel=\"footnote\"> 0 </a> </sup>",
        "<sup id=\"fnref:ev_il\"> <a href=\"#fn:evil\" rel=\"footnote\"> 0 </a> </sup>",
        "<sup id=\"fnref:ev il\"> <a href=\"#fn:evil\" rel=\"footnote\"> 0 </a> </sup>",
        "<sup id=\"fnref:ev4il\"> <a href=\"#fn:evil\" rel=\"footnote\"> 0 </a> </sup>",
        "<sup id=\"fnref:e\"> <a href=\"#fn:evil\" rel=\"footnote\"> 0 </a> </sup>",
        "<sup id=\"fnref: \"> <a href=\"#fn:evil\" rel=\"footnote\"> 0 </a> </sup>",
        "<sup id=\"fnref:6\"> <a href=\"#fn:evil\" rel=\"footnote\"> 0 </a> </sup>",
        "<sup id=\"fnref:_\"> <a href=\"#fn:evil\" rel=\"footnote\"> 0 </a> </sup>",
        "<sup id=\"fnref:\"> <a href=\"#fn:evil\" rel=\"footnote\"> 0 </a> </sup>",
        "<sup id=\"fnref:evil\"><a href=\"#fn:evil\" rel=\"footnote\">0</a></sup>",
        "<sup id=\"fnref:evil\"> <a href=\"#fn:evil\" rel=\"footnote\"> 0 </a> </sup>"
      ]
    },
    {
      "regex": "\\d{4}-\\d\\d-\\d\\d([Tt ]\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(( ?[+-]\\d\\d?(:\\d\\d)?)|Z)?)?",
      "exceptionStackTrace": null,
      "matches": [
        "0000-00-00 00:00:00.0 -00:00 00:00:00.0 -00:00",
        "0000-00-00 00:00:00.0 -00:00 -00:00",
        "0000-00-00 00:00:00.0",
        "0000-00-00 00:00:00.0 -00:00:00",
        "0000-00-00 00:00:00.0 -00",
        "0000-00-00 00:00:00.0 -000:00",
        "0000-00-00 00:00:00.0 -0:00",
        "0000-00-00 00:00:00.0 +00:00",
        "0000-00-00 00:00:00.0  -00:00",
        "0000-00-00 00:00:00.0-00:00",
        "0000-00-00 00:00:00.0.0 -00:00",
        "0000-00-00 00:00:00 -00:00",
        "0000-00-00 00:00:00.00 -00:00",
        "0000-00-00 00:00:00. -00:00",
        "0000-00-00t00:00:00.0 -00:00",
        "0000-00-00a00:00:00.0 -00:00",
        "0000-00-00T00:00:00.0 -00:00",
        "0000-00-00A00:00:00.0 -00:00",
        "00000-00-00 00:00:00.0 -00:00",
        "000-00-00 00:00:00.0 -00:00",
        "0000-00-00",
        "0000-00-00 00:00:00.0Z",
        "0000-00-00 00:00:00.0 -00:00"
      ]
    },
    {
      "regex": "^(\\S+\\s+\\S+).*$",
      "exceptionStackTrace": null,
      "matches": [
        "evil evileVil",
        "evil evilEVIL",
        "evil evilev_il",
        "evil evilev il",
        "evil evilev4il",
        "evil evile",
        "evil evil ",
        "evil evil6",
        "evil evil_",
        "evil eVilevil",
        "evil EVILevil",
        "evil ev_ilevil",
        "evil ev ilevil",
        "evil ev4ilevil",
        "evil eevil",
        "evil  evil",
        "evil 6evil",
        "evil _evil",
        "evil  evilevil",
        "evilevilevil",
        "eVil evilevil",
        "EVIL evilevil",
        "ev_il evilevil",
        "ev il evilevil",
        "ev4il evilevil",
        "e evilevil",
        "  evilevil",
        "6 evilevil",
        "_ evilevil",
        " evilevil",
        "evil evil",
        "evil evilevil"
      ]
    },
    {
      "regex": "number|column|placeholder",
      "exceptionStackTrace": null,
      "matches": ["placeholder", "column", "number"]
    },
    {
      "regex": "<?xml[^>]* encoding=[\"']([^\"']*)[\"']",
      "exceptionStackTrace": null,
      "matches": [
        "<xmlevil encoding='evil\"",
        "<xmlevil encoding='>'",
        "<xmlevil encoding='='",
        "<xmlevil encoding='<'",
        "<xmlevil encoding='''",
        "<xmlevil encoding='\"'",
        "<xmlevil encoding='eVil'",
        "<xmlevil encoding='EVIL'",
        "<xmlevil encoding='ev_il'",
        "<xmlevil encoding='ev il'",
        "<xmlevil encoding='ev4il'",
        "<xmlevil encoding='e'",
        "<xmlevil encoding=' '",
        "<xmlevil encoding='6'",
        "<xmlevil encoding='_'",
        "<xmlevil encoding=''",
        "<xmlevil encoding=\"evil'",
        "<xml> encoding='evil'",
        "<xml= encoding='evil'",
        "<xml< encoding='evil'",
        "<xml' encoding='evil'",
        "<xml\" encoding='evil'",
        "<xmleVil encoding='evil'",
        "<xmlEVIL encoding='evil'",
        "<xmlev_il encoding='evil'",
        "<xmlev il encoding='evil'",
        "<xmlev4il encoding='evil'",
        "<xmle encoding='evil'",
        "<xml  encoding='evil'",
        "<xml6 encoding='evil'",
        "<xml_ encoding='evil'",
        "<xml encoding='evil'",
        "<<xmlevil encoding='evil'",
        "xmlevil encoding='evil'",
        "xml encoding=''",
        "<xmlevil encoding='evil'"
      ]
    },
    {
      "regex": "^\\s*use\\s+DBI\\b",
      "exceptionStackTrace": null,
      "matches": [" use  DBI", " useDBI", "  use DBI", "use DBI", " use DBI"]
    },
    {
      "regex": "^.*\\/MapServer",
      "exceptionStackTrace": null,
      "matches": [
        "//MapServer",
        "eVil/MapServer",
        "EVIL/MapServer",
        "ev_il/MapServer",
        "ev il/MapServer",
        "ev4il/MapServer",
        "e/MapServer",
        " /MapServer",
        "6/MapServer",
        "_/MapServer",
        "/MapServer",
        "evil/MapServer"
      ]
    },
    {
      "regex": "(CREATE TABLE|ALTER TABLE)",
      "exceptionStackTrace": null,
      "matches": ["ALTER TABLE", "CREATE TABLE"]
    },
    {
      "regex": "\uff3b\uff03.*?\u5730\u4ed8\u304d.*?\uff3d$",
      "exceptionStackTrace": null,
      "matches": [
        "\uff3b\uff03evil\u5730\u4ed8\u304deVil\uff3d",
        "\uff3b\uff03evil\u5730\u4ed8\u304dEVIL\uff3d",
        "\uff3b\uff03evil\u5730\u4ed8\u304dev_il\uff3d",
        "\uff3b\uff03evil\u5730\u4ed8\u304dev il\uff3d",
        "\uff3b\uff03evil\u5730\u4ed8\u304dev4il\uff3d",
        "\uff3b\uff03evil\u5730\u4ed8\u304de\uff3d",
        "\uff3b\uff03evil\u5730\u4ed8\u304d \uff3d",
        "\uff3b\uff03evil\u5730\u4ed8\u304d6\uff3d",
        "\uff3b\uff03evil\u5730\u4ed8\u304d_\uff3d",
        "\uff3b\uff03evil\u5730\u4ed8\u304d\uff3d",
        "\uff3b\uff03eVil\u5730\u4ed8\u304devil\uff3d",
        "\uff3b\uff03EVIL\u5730\u4ed8\u304devil\uff3d",
        "\uff3b\uff03ev_il\u5730\u4ed8\u304devil\uff3d",
        "\uff3b\uff03ev il\u5730\u4ed8\u304devil\uff3d",
        "\uff3b\uff03ev4il\u5730\u4ed8\u304devil\uff3d",
        "\uff3b\uff03e\u5730\u4ed8\u304devil\uff3d",
        "\uff3b\uff03 \u5730\u4ed8\u304devil\uff3d",
        "\uff3b\uff036\u5730\u4ed8\u304devil\uff3d",
        "\uff3b\uff03_\u5730\u4ed8\u304devil\uff3d",
        "\uff3b\uff03\u5730\u4ed8\u304devil\uff3d",
        "\uff3b\uff03\u5730\u4ed8\u304d\uff3d",
        "\uff3b\uff03evil\u5730\u4ed8\u304devil\uff3d"
      ]
    },
    {
      "regex": "^__version__ = [\"']([^'\"]+)['\"]",
      "exceptionStackTrace": null,
      "matches": [
        "__version__ = 'evil'",
        "__version__ = '=\"",
        "__version__ = ''\"",
        "__version__ = '\"\"",
        "__version__ = 'eVil\"",
        "__version__ = 'EVIL\"",
        "__version__ = 'ev_il\"",
        "__version__ = 'ev il\"",
        "__version__ = 'ev4il\"",
        "__version__ = 'e\"",
        "__version__ = ' \"",
        "__version__ = '6\"",
        "__version__ = '_\"",
        "__version__ = '\"",
        "__version__ = \"evil\"",
        "__version__ = 'evil\""
      ]
    },
    {
      "regex": "^(\\/|unix|file)",
      "exceptionStackTrace": null,
      "matches": ["file", "unix", "/"]
    },
    { "regex": "\\\\\\%", "exceptionStackTrace": null, "matches": ["\\%"] },
    {
      "regex": "([?*]|(\\[.*?))",
      "exceptionStackTrace": null,
      "matches": [
        "[[",
        "[?",
        "[*",
        "[eVil",
        "[EVIL",
        "[ev_il",
        "[ev il",
        "[ev4il",
        "[e",
        "[ ",
        "[6",
        "[_",
        "?",
        "[",
        "[evil",
        "*"
      ]
    },
    {
      "regex": "not to have a successful status code \\(2xx\\) but it was 222",
      "exceptionStackTrace": null,
      "matches": ["not to have a successful status code (2xx) but it was 222"]
    },
    {
      "regex": " .",
      "exceptionStackTrace": null,
      "matches": [" _", " A", " 0", "  ", " a"]
    },
    {
      "regex": "\\w+=\\w+",
      "exceptionStackTrace": null,
      "matches": [
        "evil=eVil",
        "evil=EVIL",
        "evil=ev_il",
        "evil=ev il",
        "evil=ev4il",
        "evil=e",
        "evil= ",
        "evil=6",
        "evil=_",
        "evil=",
        "eVil=evil",
        "EVIL=evil",
        "ev_il=evil",
        "ev il=evil",
        "ev4il=evil",
        "e=evil",
        " =evil",
        "6=evil",
        "_=evil",
        "=evil",
        "evil=evil"
      ]
    },
    {
      "regex": "Missing experiment variants config",
      "exceptionStackTrace": null,
      "matches": ["Missing experiment variants config"]
    },
    {
      "regex": "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}\n      -[0-9a-f]{12}$",
      "exceptionStackTrace": null,
      "matches": [
        "aaaaaaaa-aaaa-1aaa-baaa\n      -aaaaaaaaaaaaa",
        "aaaaaaaa-aaaa-1aaa-baaa\n      -aaaaaaaaaaa",
        "aaaaaaaa-aaaa-1aaa-baaa\n      -gaaaaaaaaaaa",
        "aaaaaaaa-aaaa-1aaa-baaa\n      -0aaaaaaaaaaa",
        "aaaaaaaa-aaaa-1aaa-baaaa\n      -aaaaaaaaaaaa",
        "aaaaaaaa-aaaa-1aaa-baa\n      -aaaaaaaaaaaa",
        "aaaaaaaa-aaaa-1aaa-bgaa\n      -aaaaaaaaaaaa",
        "aaaaaaaa-aaaa-1aaa-b0aa\n      -aaaaaaaaaaaa",
        "aaaaaaaa-aaaa-1aaa-caaa\n      -aaaaaaaaaaaa",
        "aaaaaaaa-aaaa-1aaa-aaaa\n      -aaaaaaaaaaaa",
        "aaaaaaaa-aaaa-1aaa-9aaa\n      -aaaaaaaaaaaa",
        "aaaaaaaa-aaaa-1aaa-8aaa\n      -aaaaaaaaaaaa",
        "aaaaaaaa-aaaa-1aaa-0aaa\n      -aaaaaaaaaaaa",
        "aaaaaaaa-aaaa-1aaaa-baaa\n      -aaaaaaaaaaaa",
        "aaaaaaaa-aaaa-1aa-baaa\n      -aaaaaaaaaaaa",
        "aaaaaaaa-aaaa-1gaa-baaa\n      -aaaaaaaaaaaa",
        "aaaaaaaa-aaaa-10aa-baaa\n      -aaaaaaaaaaaa",
        "aaaaaaaa-aaaa-0aaa-baaa\n      -aaaaaaaaaaaa",
        "aaaaaaaa-aaaaa-1aaa-baaa\n      -aaaaaaaaaaaa",
        "aaaaaaaa-aaa-1aaa-baaa\n      -aaaaaaaaaaaa",
        "aaaaaaaa-gaaa-1aaa-baaa\n      -aaaaaaaaaaaa",
        "aaaaaaaa-0aaa-1aaa-baaa\n      -aaaaaaaaaaaa",
        "aaaaaaaaa-aaaa-1aaa-baaa\n      -aaaaaaaaaaaa",
        "aaaaaaa-aaaa-1aaa-baaa\n      -aaaaaaaaaaaa",
        "gaaaaaaa-aaaa-1aaa-baaa\n      -aaaaaaaaaaaa",
        "0aaaaaaa-aaaa-1aaa-baaa\n      -aaaaaaaaaaaa",
        "aaaaaaaa-aaaa-1aaa-baaa\n      -aaaaaaaaaaaa"
      ]
    },
    {
      "regex": "^[-a-z0-9_\\\\]+$",
      "exceptionStackTrace": null,
      "matches": [
        "\\",
        "-",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "\\s+\\?",
      "exceptionStackTrace": null,
      "matches": ["  ?", "?", " ?"]
    },
    {
      "regex": "Could not find account",
      "exceptionStackTrace": null,
      "matches": ["Could not find account"]
    },
    {
      "regex": "\\d{4}:\\d{2}(\\D|$)",
      "exceptionStackTrace": null,
      "matches": [
        "0000:00_",
        "0000:00A",
        "0000:00:",
        "0000:000",
        "0000:00 ",
        "0000:000a",
        "0000:0a",
        "00000:00a",
        "000:00a",
        "0000:00",
        "0000:00a"
      ]
    },
    {
      "regex": "^const jQueryCronWords = {",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (parse error): Input string ended prematurely"
      },
      "matches": []
    },
    {
      "regex": "package (?:\\w+(?:::)?)+;",
      "exceptionStackTrace": null,
      "matches": [
        "package evil::evil::;",
        "package ;",
        "package evil::::;",
        "package eVil::;",
        "package EVIL::;",
        "package ev_il::;",
        "package ev il::;",
        "package ev4il::;",
        "package e::;",
        "package  ::;",
        "package 6::;",
        "package _::;",
        "package ::;",
        "package evil;",
        "package evil::;"
      ]
    },
    {
      "regex": "_____\\[ [ ] (\\S+) [ ] \\]_+\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "^\\s*(.*\\@.*)\\s+\\(.*\\)\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        " evil@evil (evil)  ",
        " evil@evil (evil)",
        " evil@evil (@) ",
        " evil@evil ()) ",
        " evil@evil (() ",
        " evil@evil (eVil) ",
        " evil@evil (EVIL) ",
        " evil@evil (ev_il) ",
        " evil@evil (ev il) ",
        " evil@evil (ev4il) ",
        " evil@evil (e) ",
        " evil@evil ( ) ",
        " evil@evil (6) ",
        " evil@evil (_) ",
        " evil@evil () ",
        " evil@evil  (evil) ",
        " evil@evil(evil) ",
        " evil@@ (evil) ",
        " evil@) (evil) ",
        " evil@( (evil) ",
        " evil@eVil (evil) ",
        " evil@EVIL (evil) ",
        " evil@ev_il (evil) ",
        " evil@ev il (evil) ",
        " evil@ev4il (evil) ",
        " evil@e (evil) ",
        " evil@  (evil) ",
        " evil@6 (evil) ",
        " evil@_ (evil) ",
        " evil@ (evil) ",
        " @@evil (evil) ",
        " )@evil (evil) ",
        " (@evil (evil) ",
        " eVil@evil (evil) ",
        " EVIL@evil (evil) ",
        " ev_il@evil (evil) ",
        " ev il@evil (evil) ",
        " ev4il@evil (evil) ",
        " e@evil (evil) ",
        "  @evil (evil) ",
        " 6@evil (evil) ",
        " _@evil (evil) ",
        " @evil (evil) ",
        "  evil@evil (evil) ",
        "evil@evil (evil) ",
        "@ ()",
        " evil@evil (evil) "
      ]
    },
    {
      "regex": "^locker\\sresource\\sshow\\s",
      "exceptionStackTrace": null,
      "matches": ["locker resource show "]
    },
    {
      "regex": "END.*\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    { "regex": "ERROR: ", "exceptionStackTrace": null, "matches": ["ERROR: "] },
    {
      "regex": "illegal character",
      "exceptionStackTrace": null,
      "matches": ["illegal character"]
    },
    { "regex": "^PROTSIM", "exceptionStackTrace": null, "matches": ["PROTSIM"] },
    { "regex": "^(?:Vim)", "exceptionStackTrace": null, "matches": ["Vim"] },
    {
      "regex": "^whitelist[-_]to\\s+(.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "whitelist_to -",
        "whitelist_to eVil",
        "whitelist_to EVIL",
        "whitelist_to ev_il",
        "whitelist_to ev il",
        "whitelist_to ev4il",
        "whitelist_to e",
        "whitelist_to  ",
        "whitelist_to 6",
        "whitelist_to _",
        "whitelist_to ",
        "whitelist_to  evil",
        "whitelist_toevil",
        "whitelist-to evil",
        "whitelist_to evil"
      ]
    },
    { "regex": " missing", "exceptionStackTrace": null, "matches": [" missing"] },
    {
      "regex": "^(\\s*)#+",
      "exceptionStackTrace": null,
      "matches": [" ##", " ", "  #", "#", " #"]
    },
    {
      "regex": "(^https?):\\/\\/(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "https://:",
        "https:///",
        "https://eVil",
        "https://EVIL",
        "https://ev_il",
        "https://ev il",
        "https://ev4il",
        "https://e",
        "https:// ",
        "https://6",
        "https://_",
        "https://",
        "httpss://evil",
        "http://evil",
        "http://",
        "https://evil"
      ]
    },
    { "regex": " not in ", "exceptionStackTrace": null, "matches": [" not in "] },
    {
      "regex": "\\A((?:gmt|utc?)?[-+]\\d+(?:[,.:]\\d+(?::\\d+)?)?\n              |[[:alpha:].\\s]+(?:standard|daylight)\\s+time\\b\n              |[[:alpha:]]+(?:\\s+dst)?\\b\n              )",
      "exceptionStackTrace": null,
      "matches": [
        ":] dst dst\n              ",
        ":]  dst\n              ",
        ":]dst\n              ",
        ":]] dst\n              ",
        ": dst\n              ",
        "p] dst\n              ",
        "l] dst\n              ",
        "h] dst\n              ",
        "b] dst\n              ",
        "a] dst\n              ",
        "[] dst\n              ",
        ":a ]standard  time\n              ",
        ":a ]standardtime\n              ",
        ":a ]]standard time\n              ",
        ":a standard time\n              ",
        ":] ]standard time\n              ",
        ":[ ]standard time\n              ",
        ":A ]standard time\n              ",
        ":: ]standard time\n              ",
        ":0 ]standard time\n              ",
        ":. ]standard time\n              ",
        ":- ]standard time\n              ",
        ":, ]standard time\n              ",
        ":+ ]standard time\n              ",
        ":  ]standard time\n              ",
        "pa ]standard time\n              ",
        "la ]standard time\n              ",
        "ha ]standard time\n              ",
        "ba ]standard time\n              ",
        "aa ]standard time\n              ",
        "[a ]standard time\n              ",
        "utcc+0:0:0\n              ",
        "ut+0:0:0\n              ",
        "gmt+0:0:0:0:0\n              ",
        "gmt+0\n              ",
        "gmt+0:0:0:0\n              ",
        "gmt+0:0\n              ",
        "gmt+0:0:00\n              ",
        "gmt+0:0:\n              ",
        "gmt+0:00:0\n              ",
        "gmt+0::0\n              ",
        "gmt+0.0:0\n              ",
        "gmt+0,0:0\n              ",
        "gmt+00:0:0\n              ",
        "gmt+:0:0\n              ",
        "gmt-0:0:0\n              ",
        "gmtgmt+0:0:0\n              ",
        "+0:0:0\n              ",
        ":]\n              ",
        "+0\n              ",
        ":] dst\n              ",
        ":a ]daylight time\n              ",
        ":a ]standard time\n              ",
        "utc+0:0:0\n              ",
        "gmt+0:0:0\n              "
      ]
    },
    {
      "regex": "$label:(\\d+)",
      "exceptionStackTrace": null,
      "matches": ["label:00", "label:", "label:0"]
    },
    {
      "regex": "^function\\s?\\(\\)\\s?\\{\\n?|\\n?\\}$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    { "regex": "$PSTRING", "exceptionStackTrace": null, "matches": ["PSTRING"] },
    {
      "regex": "(?<=[\\w\\.])\\s+(?=[\\w\\.])",
      "exceptionStackTrace": null,
      "matches": ["  ", "", " "]
    },
    {
      "regex": "t\\.text\\s+\"normal_text\",\\s+limit: 65535$",
      "exceptionStackTrace": null,
      "matches": [
        "t.text \"normal_text\",  limit: 65535",
        "t.text \"normal_text\",limit: 65535",
        "t.text  \"normal_text\", limit: 65535",
        "t.text\"normal_text\", limit: 65535",
        "t.text \"normal_text\", limit: 65535"
      ]
    },
    {
      "regex": "Additional log info",
      "exceptionStackTrace": null,
      "matches": ["Additional log info"]
    },
    { "regex": " $stage ", "exceptionStackTrace": null, "matches": [" stage "] },
    {
      "regex": "security1",
      "exceptionStackTrace": null,
      "matches": ["security1"]
    },
    { "regex": "ios71", "exceptionStackTrace": null, "matches": ["ios71"] },
    {
      "regex": "(^|[^0-9A-Za-z\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u024f\u1e00-\u1eff\u2c60-\u2c7f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua7ff])((?:1[\\s\\xa0]*Samuel)|(?:(?:1(?:\\xE8?re|ere?)|I)[\\s\\xa0]*Samuel|1(?:[\\s\\xa0]*?Sam|[\\s\\xa0]*Sa?)|(?:1(?:\\xE8?re|ere?)?|I)\\.[\\s\\xa0]*Samuel|Premi(?:er(?:es?|s)?|\\xE8res?)[\\s\\xa0]*Samuel))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 160"
      },
      "matches": []
    },
    {
      "regex": " ^( [$BASICWORDS]+ )$ ",
      "exceptionStackTrace": null,
      "matches": [
        "  SS  ",
        "    ",
        "  W  ",
        "  R  ",
        "  O  ",
        "  I  ",
        "  E  ",
        "  D  ",
        "  C  ",
        "  B  ",
        "  A  ",
        "  $  ",
        "  S  "
      ]
    },
    { "regex": "^draft", "exceptionStackTrace": null, "matches": ["draft"] },
    {
      "regex": "^X?S?VCD$",
      "exceptionStackTrace": null,
      "matches": ["XSSVCD", "XVCD", "XXSVCD", "SVCD", "VCD", "XSVCD"]
    },
    {
      "regex": "\\/\\/# sourceMappingURL=",
      "exceptionStackTrace": null,
      "matches": ["//# sourceMappingURL="]
    },
    {
      "regex": "david,Copenhagen",
      "exceptionStackTrace": null,
      "matches": ["david,Copenhagen"]
    },
    {
      "regex": "\ud808\udf45|\ud84d\udc56",
      "exceptionStackTrace": null,
      "matches": ["\ud84d\udc56", "\ud808\udf45"]
    },
    {
      "regex": "^callback\\(",
      "exceptionStackTrace": null,
      "matches": ["callback("]
    },
    {
      "regex": "{min}|{max}",
      "exceptionStackTrace": null,
      "matches": ["{max}", "{min}"]
    },
    {
      "regex": "^<table border=0>$",
      "exceptionStackTrace": null,
      "matches": ["<table border=0>"]
    },
    {
      "regex": "(\\d+)m(\\-\\d+m) (day|night) (.+)",
      "exceptionStackTrace": null,
      "matches": [
        "0m-0m day -",
        "0m-0m day eVil",
        "0m-0m day EVIL",
        "0m-0m day ev_il",
        "0m-0m day ev il",
        "0m-0m day ev4il",
        "0m-0m day e",
        "0m-0m day  ",
        "0m-0m day 6",
        "0m-0m day _",
        "0m-0m day ",
        "0m-00m day evil",
        "0m-m day evil",
        "00m-0m day evil",
        "m-0m day evil",
        "0m-0m night evil",
        "0m-0m day evil"
      ]
    },
    { "regex": "(s)eries$", "exceptionStackTrace": null, "matches": ["series"] },
    {
      "regex": "^parent [0-9a-f]{40}\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        "parent aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa  ",
        "parent aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ",
        "parent aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ",
        "parent gaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ",
        "parent 0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ",
        "parent aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "parent aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa "
      ]
    },
    {
      "regex": "(BEGIN:VEVENT(.*\\n)*?END:VEVENT\\r?\\n)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "\\ADocker/.+\\s\\((.+)\\)\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "^cmyk\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*\\)$",
      "exceptionStackTrace": null,
      "matches": [
        "cmyk( 0 , 0 , 0 , 0  )",
        "cmyk( 0 , 0 , 0 , 0)",
        "cmyk( 0 , 0 , 0 , 0000 )",
        "cmyk( 0 , 0 , 0 , 000 )",
        "cmyk( 0 , 0 , 0 ,  )",
        "cmyk( 0 , 0 , 0 ,  0 )",
        "cmyk( 0 , 0 , 0 ,0 )",
        "cmyk( 0 , 0 , 0  , 0 )",
        "cmyk( 0 , 0 , 0, 0 )",
        "cmyk( 0 , 0 , 0000 , 0 )",
        "cmyk( 0 , 0 , 000 , 0 )",
        "cmyk( 0 , 0 ,  , 0 )",
        "cmyk( 0 , 0 ,  0 , 0 )",
        "cmyk( 0 , 0 ,0 , 0 )",
        "cmyk( 0 , 0  , 0 , 0 )",
        "cmyk( 0 , 0, 0 , 0 )",
        "cmyk( 0 , 0000 , 0 , 0 )",
        "cmyk( 0 , 000 , 0 , 0 )",
        "cmyk( 0 ,  , 0 , 0 )",
        "cmyk( 0 ,  0 , 0 , 0 )",
        "cmyk( 0 ,0 , 0 , 0 )",
        "cmyk( 0  , 0 , 0 , 0 )",
        "cmyk( 0, 0 , 0 , 0 )",
        "cmyk( 0000 , 0 , 0 , 0 )",
        "cmyk( 000 , 0 , 0 , 0 )",
        "cmyk(  , 0 , 0 , 0 )",
        "cmyk(  0 , 0 , 0 , 0 )",
        "cmyk(0 , 0 , 0 , 0 )",
        "cmyk(0,0,0,0)",
        "cmyk( 0 , 0 , 0 , 0 )"
      ]
    },
    {
      "regex": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
      "exceptionStackTrace": null,
      "matches": [
        "gmt + 00000",
        "gmt + 000",
        "gmt +  0000",
        "gmt +0000",
        "gmt  + 0000",
        "gmt+ 0000",
        "gmtgmt + 0000",
        " + 0000",
        "-000",
        "+000",
        "utc",
        "gmt",
        "gmt - 0000",
        "gmt + 0000",
        "pdt",
        "pst",
        "mdt",
        "mst",
        "cdt",
        "cst",
        "edt",
        "est"
      ]
    },
    { "regex": "^vendor/", "exceptionStackTrace": null, "matches": ["vendor/"] },
    {
      "regex": "ISODate\\(([^)]+)\\)",
      "exceptionStackTrace": null,
      "matches": [
        "ISODate())",
        "ISODate(()",
        "ISODate(eVil)",
        "ISODate(EVIL)",
        "ISODate(ev_il)",
        "ISODate(ev il)",
        "ISODate(ev4il)",
        "ISODate(e)",
        "ISODate( )",
        "ISODate(6)",
        "ISODate(_)",
        "ISODate()",
        "ISODate(evil)"
      ]
    },
    {
      "regex": "^(\\); # for DUCET).*",
      "exceptionStackTrace": null,
      "matches": [
        "); # for DUCET;",
        "); # for DUCET)",
        "); # for DUCET#",
        "); # for DUCETeVil",
        "); # for DUCETEVIL",
        "); # for DUCETev_il",
        "); # for DUCETev il",
        "); # for DUCETev4il",
        "); # for DUCETe",
        "); # for DUCET ",
        "); # for DUCET6",
        "); # for DUCET_",
        "); # for DUCET",
        "); # for DUCETevil"
      ]
    },
    {
      "regex": "^\\s*--?\\w",
      "exceptionStackTrace": null,
      "matches": [
        " --_",
        " --A",
        " --0",
        " ---a",
        " -a",
        "  --a",
        "--a",
        "-a",
        " --a"
      ]
    },
    {
      "regex": "(.+)[.?]?.*(\\r?\\n)?",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": "\\/dev\\/null differ",
      "exceptionStackTrace": null,
      "matches": ["/dev/null differ"]
    },
    { "regex": "test-q", "exceptionStackTrace": null, "matches": ["test-q"] },
    {
      "regex": "permitted",
      "exceptionStackTrace": null,
      "matches": ["permitted"]
    },
    {
      "regex": "[<]([^ ]+?)[>]",
      "exceptionStackTrace": null,
      "matches": [
        "<>>",
        "<<>",
        "<eVil>",
        "<EVIL>",
        "<ev_il>",
        "<ev il>",
        "<ev4il>",
        "<e>",
        "< >",
        "<6>",
        "<_>",
        "<>",
        "<evil>"
      ]
    },
    {
      "regex": "^CouchRest::Model::Config should be reset to defaults$",
      "exceptionStackTrace": null,
      "matches": ["CouchRest::Model::Config should be reset to defaults"]
    },
    {
      "regex": "(\\w+)\\s*($relop)\\s*(\\$QS\\[\\d*\\])",
      "exceptionStackTrace": null,
      "matches": [
        "evil relop $QS[00]",
        "evil relop $QS[]",
        "evil relop  $QS[0]",
        "evil relop$QS[0]",
        "evil  relop $QS[0]",
        "evilrelop $QS[0]",
        "eVil relop $QS[0]",
        "EVIL relop $QS[0]",
        "ev_il relop $QS[0]",
        "ev il relop $QS[0]",
        "ev4il relop $QS[0]",
        "e relop $QS[0]",
        "  relop $QS[0]",
        "6 relop $QS[0]",
        "_ relop $QS[0]",
        " relop $QS[0]",
        "evilrelop$QS[]",
        "evil relop $QS[0]"
      ]
    },
    {
      "regex": "^[*_]{2,}[^*_]+[*_]{2,}$",
      "exceptionStackTrace": null,
      "matches": [
        "__evil_",
        "__evil*_",
        "__*__",
        "__eVil__",
        "__EVIL__",
        "__ev_il__",
        "__ev il__",
        "__ev4il__",
        "__e__",
        "__ __",
        "__6__",
        "_____",
        "____",
        "_evil__",
        "*_evil__",
        "__evil__"
      ]
    },
    {
      "regex": "(?:<[\\/A-DF-Z][^>]*>)+([Ii])<\\/[A-DF-Z]> (?:<[\\/A-DF-Z][^>]*>)+(dtreo)<\\/[A-DF-Z]>",
      "exceptionStackTrace": null,
      "matches": [
        "</evil>i</F> </evil>dtreo</E>",
        "</evil>i</F> </evil>dtreo</A>",
        "</evil>i</F> </evil></evil>dtreo</F>",
        "</evil>i</F> dtreo</F>",
        "</evil>i</F> </>>dtreo</F>",
        "</evil>i</F> </<>dtreo</F>",
        "</evil>i</F> <//>dtreo</F>",
        "</evil>i</F> </eVil>dtreo</F>",
        "</evil>i</F> </EVIL>dtreo</F>",
        "</evil>i</F> </ev_il>dtreo</F>",
        "</evil>i</F> </ev il>dtreo</F>",
        "</evil>i</F> </ev4il>dtreo</F>",
        "</evil>i</F> </e>dtreo</F>",
        "</evil>i</F> </ >dtreo</F>",
        "</evil>i</F> </6>dtreo</F>",
        "</evil>i</F> </_>dtreo</F>",
        "</evil>i</F> </>dtreo</F>",
        "</evil>i</F> <Fevil>dtreo</F>",
        "</evil>i</F> <Eevil>dtreo</F>",
        "</evil>i</F> <Aevil>dtreo</F>",
        "</evil>i</E> </evil>dtreo</F>",
        "</evil>i</A> </evil>dtreo</F>",
        "</evil>a</F> </evil>dtreo</F>",
        "</evil>I</F> </evil>dtreo</F>",
        "</evil>A</F> </evil>dtreo</F>",
        "</evil></evil>i</F> </evil>dtreo</F>",
        "i</F> </evil>dtreo</F>",
        "</>>i</F> </evil>dtreo</F>",
        "</<>i</F> </evil>dtreo</F>",
        "<//>i</F> </evil>dtreo</F>",
        "</eVil>i</F> </evil>dtreo</F>",
        "</EVIL>i</F> </evil>dtreo</F>",
        "</ev_il>i</F> </evil>dtreo</F>",
        "</ev il>i</F> </evil>dtreo</F>",
        "</ev4il>i</F> </evil>dtreo</F>",
        "</e>i</F> </evil>dtreo</F>",
        "</ >i</F> </evil>dtreo</F>",
        "</6>i</F> </evil>dtreo</F>",
        "</_>i</F> </evil>dtreo</F>",
        "</>i</F> </evil>dtreo</F>",
        "<Fevil>i</F> </evil>dtreo</F>",
        "<Eevil>i</F> </evil>dtreo</F>",
        "<Aevil>i</F> </evil>dtreo</F>",
        "</>i</F> </>dtreo</F>",
        "</evil>i</F> </evil>dtreo</F>"
      ]
    },
    {
      "regex": "^(\\w+) (>=?|<=?)\\s*([\\d\\.]+)",
      "exceptionStackTrace": null,
      "matches": [
        "evil <== .",
        "evil < .",
        "evil >= ..",
        "evil >= ",
        "evil >= 0",
        "evil >=  .",
        "evil >=.",
        "evil >== .",
        "evil > .",
        "eVil >= .",
        "EVIL >= .",
        "ev_il >= .",
        "ev il >= .",
        "ev4il >= .",
        "e >= .",
        "  >= .",
        "6 >= .",
        "_ >= .",
        " >= .",
        "evil <.",
        "evil >.",
        "evil <= .",
        "evil >= ."
      ]
    },
    {
      "regex": "^\\Q$ref_type\\E\\=([A-Z]+)\\(0x[0-9a-f]+\\)$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\Q"
      },
      "matches": []
    },
    {
      "regex": ",\\\\\\n$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "Renewing authorization",
      "exceptionStackTrace": null,
      "matches": ["Renewing authorization"]
    },
    {
      "regex": "com.bigdata.bop.solutions.",
      "exceptionStackTrace": null,
      "matches": [
        "comabigdataabopasolutions_",
        "comabigdataabopasolutionsA",
        "comabigdataabopasolutions0",
        "comabigdataabopasolutions ",
        "comabigdataabop_solutionsa",
        "comabigdataabopAsolutionsa",
        "comabigdataabop0solutionsa",
        "comabigdataabop solutionsa",
        "comabigdata_bopasolutionsa",
        "comabigdataAbopasolutionsa",
        "comabigdata0bopasolutionsa",
        "comabigdata bopasolutionsa",
        "com_bigdataabopasolutionsa",
        "comAbigdataabopasolutionsa",
        "com0bigdataabopasolutionsa",
        "com bigdataabopasolutionsa",
        "comabigdataabopasolutionsa"
      ]
    },
    {
      "regex": "database: tmp_test",
      "exceptionStackTrace": null,
      "matches": ["database: tmp_test"]
    },
    {
      "regex": "^[\\t\\r\\n]+|[\\t\\r\\n\\s]+$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "^(?:(\\-\\w)(?:=(.*))?|(\\-\\-\\w{2,})(?:=(.*))?)$",
      "exceptionStackTrace": null,
      "matches": [
        "--aa=evil=evil",
        "--aa==",
        "--aa=-",
        "--aa=eVil",
        "--aa=EVIL",
        "--aa=ev_il",
        "--aa=ev il",
        "--aa=ev4il",
        "--aa=e",
        "--aa= ",
        "--aa=6",
        "--aa=_",
        "--aa=",
        "--a=evil",
        "--_a=evil",
        "--Aa=evil",
        "--0a=evil",
        "-a=evil=evil",
        "-a==",
        "-a=-",
        "-a=eVil",
        "-a=EVIL",
        "-a=ev_il",
        "-a=ev il",
        "-a=ev4il",
        "-a=e",
        "-a= ",
        "-a=6",
        "-a=_",
        "-a=",
        "-_=evil",
        "-A=evil",
        "-0=evil",
        "--aa",
        "-a",
        "--aa=evil",
        "-a=evil"
      ]
    },
    {
      "regex": "^on((?![a-z])|(?=$))",
      "exceptionStackTrace": null,
      "matches": ["on"]
    },
    {
      "regex": "^[a-zA-Z0-9]+(\\-[a-zA-Z0-9]+)*$",
      "exceptionStackTrace": null,
      "matches": [
        "evil-evil-evil",
        "evil-eVil",
        "evil-EVIL",
        "evil-ev_il",
        "evil-ev il",
        "evil-ev4il",
        "evil-e",
        "evil- ",
        "evil-6",
        "evil-_",
        "evil-",
        "eVil-evil",
        "EVIL-evil",
        "ev_il-evil",
        "ev il-evil",
        "ev4il-evil",
        "e-evil",
        " -evil",
        "6-evil",
        "_-evil",
        "-evil",
        "evil",
        "evil-evil"
      ]
    },
    {
      "regex": "Jan 01 01:01:01 [\\+-]?[\\w ]+ 2006",
      "exceptionStackTrace": null,
      "matches": [
        "Jan 01 01:01:01 -eVil 2006",
        "Jan 01 01:01:01 -EVIL 2006",
        "Jan 01 01:01:01 -ev_il 2006",
        "Jan 01 01:01:01 -ev il 2006",
        "Jan 01 01:01:01 -ev4il 2006",
        "Jan 01 01:01:01 -e 2006",
        "Jan 01 01:01:01 -  2006",
        "Jan 01 01:01:01 -6 2006",
        "Jan 01 01:01:01 -_ 2006",
        "Jan 01 01:01:01 - 2006",
        "Jan 01 01:01:01 --evil 2006",
        "Jan 01 01:01:01 +evil 2006",
        "Jan 01 01:01:01 evil 2006",
        "Jan 01 01:01:01 -evil 2006"
      ]
    },
    {
      "regex": "Version: ImageMagick ([0-9]*\\.[0-9]*\\.[0-9]*)",
      "exceptionStackTrace": null,
      "matches": [
        "Version: ImageMagick 0.0.00",
        "Version: ImageMagick 0.0.",
        "Version: ImageMagick 0.00.0",
        "Version: ImageMagick 0..0",
        "Version: ImageMagick 00.0.0",
        "Version: ImageMagick .0.0",
        "Version: ImageMagick ..",
        "Version: ImageMagick 0.0.0"
      ]
    },
    {
      "regex": "^http(s?):\\/\\/(\\w+\\.)*twitter\\.com([\\:\\/]|$)",
      "exceptionStackTrace": null,
      "matches": [
        "https://evil.twitter.com:",
        "https://evil.evil.twitter.com/",
        "https://twitter.com/",
        "https://eVil.twitter.com/",
        "https://EVIL.twitter.com/",
        "https://ev_il.twitter.com/",
        "https://ev il.twitter.com/",
        "https://ev4il.twitter.com/",
        "https://e.twitter.com/",
        "https:// .twitter.com/",
        "https://6.twitter.com/",
        "https://_.twitter.com/",
        "https://.twitter.com/",
        "httpss://evil.twitter.com/",
        "http://evil.twitter.com/",
        "http://twitter.com",
        "http://twitter.com/",
        "https://evil.twitter.com",
        "https://evil.twitter.com/"
      ]
    },
    {
      "regex": "(?:.*::)?(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "evil:::",
        "evil::eVil",
        "evil::EVIL",
        "evil::ev_il",
        "evil::ev il",
        "evil::ev4il",
        "evil::e",
        "evil:: ",
        "evil::6",
        "evil::_",
        "evil::",
        "evil::evil::evil",
        "evil",
        ":::evil",
        "eVil::evil",
        "EVIL::evil",
        "ev_il::evil",
        "ev il::evil",
        "ev4il::evil",
        "e::evil",
        " ::evil",
        "6::evil",
        "_::evil",
        "::evil",
        "",
        "evil::evil"
      ]
    },
    { "regex": "\\$sect", "exceptionStackTrace": null, "matches": ["$sect"] },
    {
      "regex": "background:(?:none|transparent)([;}])",
      "exceptionStackTrace": null,
      "matches": [
        "background:none;",
        "background:transparent}",
        "background:none}"
      ]
    },
    {
      "regex": "Date\\(\\d{13}\\)",
      "exceptionStackTrace": null,
      "matches": [
        "Date(00000000000000)",
        "Date(000000000000)",
        "Date(0000000000000)"
      ]
    },
    {
      "regex": "(::)|#|\\.",
      "exceptionStackTrace": null,
      "matches": [".", "#", "::"]
    },
    {
      "regex": "exon|splice|intron",
      "exceptionStackTrace": null,
      "matches": ["intron", "splice", "exon"]
    },
    { "regex": "foundry", "exceptionStackTrace": null, "matches": ["foundry"] },
    {
      "regex": "([0-9.]{6,9}[N]{1}) ([0-9.]{7,10}[E]{1})",
      "exceptionStackTrace": null,
      "matches": [
        "......N .......EE",
        "......N .......",
        "......N ...........E",
        "......N ..........E",
        "......N ......E",
        "......N 0......E",
        "......NN .......E",
        "...... .......E",
        "..........N .......E",
        ".........N .......E",
        ".....N .......E",
        "0.....N .......E",
        "......N .......E"
      ]
    },
    {
      "regex": "(?s)^Error: custom failure\n\tgithub.com/palantir/pkg/cobracli_test.TestExecuteWithParams.func9.+\n$",
      "exceptionStackTrace": null,
      "matches": [
        "Error: custom failure\n\tgithubacom/palantir/pkg/cobracli_testaTestExecuteWithParamsafunc9:\n",
        "Error: custom failure\n\tgithubacom/palantir/pkg/cobracli_testaTestExecuteWithParamsafunc9/\n",
        "Error: custom failure\n\tgithubacom/palantir/pkg/cobracli_testaTestExecuteWithParamsafunc9eVil\n",
        "Error: custom failure\n\tgithubacom/palantir/pkg/cobracli_testaTestExecuteWithParamsafunc9EVIL\n",
        "Error: custom failure\n\tgithubacom/palantir/pkg/cobracli_testaTestExecuteWithParamsafunc9ev_il\n",
        "Error: custom failure\n\tgithubacom/palantir/pkg/cobracli_testaTestExecuteWithParamsafunc9ev il\n",
        "Error: custom failure\n\tgithubacom/palantir/pkg/cobracli_testaTestExecuteWithParamsafunc9ev4il\n",
        "Error: custom failure\n\tgithubacom/palantir/pkg/cobracli_testaTestExecuteWithParamsafunc9e\n",
        "Error: custom failure\n\tgithubacom/palantir/pkg/cobracli_testaTestExecuteWithParamsafunc9 \n",
        "Error: custom failure\n\tgithubacom/palantir/pkg/cobracli_testaTestExecuteWithParamsafunc96\n",
        "Error: custom failure\n\tgithubacom/palantir/pkg/cobracli_testaTestExecuteWithParamsafunc9_\n",
        "Error: custom failure\n\tgithubacom/palantir/pkg/cobracli_testaTestExecuteWithParamsafunc9\n",
        "Error: custom failure\n\tgithubacom/palantir/pkg/cobracli_testaTestExecuteWithParams_func9evil\n",
        "Error: custom failure\n\tgithubacom/palantir/pkg/cobracli_testaTestExecuteWithParamsAfunc9evil\n",
        "Error: custom failure\n\tgithubacom/palantir/pkg/cobracli_testaTestExecuteWithParams:func9evil\n",
        "Error: custom failure\n\tgithubacom/palantir/pkg/cobracli_testaTestExecuteWithParams0func9evil\n",
        "Error: custom failure\n\tgithubacom/palantir/pkg/cobracli_testaTestExecuteWithParams/func9evil\n",
        "Error: custom failure\n\tgithubacom/palantir/pkg/cobracli_testaTestExecuteWithParams func9evil\n",
        "Error: custom failure\n\tgithubacom/palantir/pkg/cobracli_test_TestExecuteWithParamsafunc9evil\n",
        "Error: custom failure\n\tgithubacom/palantir/pkg/cobracli_testATestExecuteWithParamsafunc9evil\n",
        "Error: custom failure\n\tgithubacom/palantir/pkg/cobracli_test:TestExecuteWithParamsafunc9evil\n",
        "Error: custom failure\n\tgithubacom/palantir/pkg/cobracli_test0TestExecuteWithParamsafunc9evil\n",
        "Error: custom failure\n\tgithubacom/palantir/pkg/cobracli_test/TestExecuteWithParamsafunc9evil\n",
        "Error: custom failure\n\tgithubacom/palantir/pkg/cobracli_test TestExecuteWithParamsafunc9evil\n",
        "Error: custom failure\n\tgithub_com/palantir/pkg/cobracli_testaTestExecuteWithParamsafunc9evil\n",
        "Error: custom failure\n\tgithubAcom/palantir/pkg/cobracli_testaTestExecuteWithParamsafunc9evil\n",
        "Error: custom failure\n\tgithub:com/palantir/pkg/cobracli_testaTestExecuteWithParamsafunc9evil\n",
        "Error: custom failure\n\tgithub0com/palantir/pkg/cobracli_testaTestExecuteWithParamsafunc9evil\n",
        "Error: custom failure\n\tgithub/com/palantir/pkg/cobracli_testaTestExecuteWithParamsafunc9evil\n",
        "Error: custom failure\n\tgithub com/palantir/pkg/cobracli_testaTestExecuteWithParamsafunc9evil\n",
        "Error: custom failure\n\tgithubacom/palantir/pkg/cobracli_testaTestExecuteWithParamsafunc9evil\n"
      ]
    },
    {
      "regex": "(^|[^0-9A-Za-z\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u024f\u0b82-\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99-\u0b9a\u0b9c\u0b9e-\u0b9f\u0ba3-\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bc0\u0bcd\u0bd0\u1e00-\u1eff\u2c60-\u2c7f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua7ff])((?:2[\\s\\xa0]*\u0b9a\u0bbe\u0bae\u0bc1\u0bb5\u0bc7\u0bb2\u0bcd)|(?:2(?:[\\s\\xa0]*(?:C[a\u0101]muv[e\u0113]l|\u0b9a\u0bbe\u0bae\u0bc1)|Sam|[\\s\\xa0]*\u0b85\u0bb0\u0b9a\u0bc1\u0b95\u0bb3\u0bcd)|\u0b9a\u0bbe\u0bae\u0bc1\u0bb5\u0bc7\u0bb2\u0bbf\u0ba9\u0bcd[\\s\\xa0]*\u0b87\u0bb0\u0ba3\u0bcd\u0b9f\u0bbe\u0bae\u0bcd[\\s\\xa0]*\u0baa\u0bc1\u0ba4\u0bcd\u0ba4\u0b95\u0bae\u0bcd))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 160"
      },
      "matches": []
    },
    {
      "regex": "^\\/\\/(-)?([^\\n]*)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    { "regex": "httponly", "exceptionStackTrace": null, "matches": ["httponly"] },
    {
      "regex": "^.{44}SCRM",
      "exceptionStackTrace": null,
      "matches": [
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaSCRM",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaSCRM",
        "_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaSCRM",
        "AaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaSCRM",
        "0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaSCRM",
        " aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaSCRM",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaSCRM"
      ]
    },
    {
      "regex": "^(?<header_name>[^:]+):\\s*(?<header_value>.*)$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<h"
      },
      "matches": []
    },
    { "regex": "(<<)$", "exceptionStackTrace": null, "matches": ["<<"] },
    {
      "regex": "NumberOfPages: (\\d+)",
      "exceptionStackTrace": null,
      "matches": ["NumberOfPages: 00", "NumberOfPages: ", "NumberOfPages: 0"]
    },
    {
      "regex": "^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))",
      "exceptionStackTrace": null,
      "matches": [
        "evil?",
        "evil/",
        "?#",
        ":#",
        "/#",
        "&#",
        "##",
        "eVil#",
        "EVIL#",
        "ev_il#",
        "ev il#",
        "ev4il#",
        "e#",
        " #",
        "6#",
        "_#",
        "httpss:",
        "",
        "#",
        "http:",
        "evil",
        "evil#",
        "file:",
        "tel:",
        "ftp:",
        "mailto:",
        "https:"
      ]
    },
    {
      "regex": "^\\^?(.*?)\\$?$",
      "exceptionStackTrace": null,
      "matches": [
        "^evil$$",
        "^evil",
        "^^$",
        "^$$",
        "^eVil$",
        "^EVIL$",
        "^ev_il$",
        "^ev il$",
        "^ev4il$",
        "^e$",
        "^ $",
        "^6$",
        "^_$",
        "^$",
        "^^evil$",
        "evil$",
        "",
        "^evil$"
      ]
    },
    {
      "regex": "^[A-Za-z0-9][A-Za-z0-9_@&$. \\-]{3,31}[a-zA-Z0-9_]$",
      "exceptionStackTrace": null,
      "matches": [
        "0---a",
        "0---A",
        "0---0",
        "0--------------------------------_",
        "0-------------------------------_",
        "0--_",
        "0a--_",
        "0_--_",
        "0A--_",
        "0@--_",
        "00--_",
        "0.--_",
        "0&--_",
        "0$--_",
        "0 --_",
        "a---_",
        "A---_",
        "0---_"
      ]
    },
    {
      "regex": "^(width|height|visibility|x|y|d|transform)$",
      "exceptionStackTrace": null,
      "matches": ["transform", "d", "y", "x", "visibility", "height", "width"]
    },
    {
      "regex": "^save (.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "save eVil",
        "save EVIL",
        "save ev_il",
        "save ev il",
        "save ev4il",
        "save e",
        "save  ",
        "save 6",
        "save _",
        "save ",
        "save evil"
      ]
    },
    {
      "regex": "^1.8",
      "exceptionStackTrace": null,
      "matches": ["1_8", "1A8", "108", "1 8", "1a8"]
    },
    {
      "regex": "\\bgeneric\\b",
      "exceptionStackTrace": null,
      "matches": ["generic"]
    },
    {
      "regex": "VERSION|version",
      "exceptionStackTrace": null,
      "matches": ["version", "VERSION"]
    },
    {
      "regex": "\\W(GPL-1.0|GNU\\WGeneral\\WPublic\\WLicense\\Wv1.0\\Wonly)\\W",
      "exceptionStackTrace": null,
      "matches": [
        ";GNU;General;Public;License;v1a0aonly;",
        ";GNU;General;Public;License;v1a0_only;",
        ";GNU;General;Public;License;v1a0Aonly;",
        ";GNU;General;Public;License;v1a00only;",
        ";GNU;General;Public;License;v1a0-only;",
        ";GNU;General;Public;License;v1a0 only;",
        ";GNU;General;Public;License;v1A0;only;",
        ";GNU;General;Public;License;v100;only;",
        ";GNU;General;Public;License;v1-0;only;",
        ";GNU;General;Public;License;v1 0;only;",
        ";GNU;General;Public;Licenseav1a0;only;",
        ";GNU;General;Public;License_v1a0;only;",
        ";GNU;General;Public;LicenseAv1a0;only;",
        ";GNU;General;Public;License0v1a0;only;",
        ";GNU;General;Public;License-v1a0;only;",
        ";GNU;General;Public;License v1a0;only;",
        ";GNU;General;PublicaLicense;v1a0;only;",
        ";GNU;General;Public_License;v1a0;only;",
        ";GNU;General;PublicALicense;v1a0;only;",
        ";GNU;General;Public0License;v1a0;only;",
        ";GNU;General;Public-License;v1a0;only;",
        ";GNU;General;Public License;v1a0;only;",
        ";GNU;GeneralaPublic;License;v1a0;only;",
        ";GNU;General_Public;License;v1a0;only;",
        ";GNU;GeneralAPublic;License;v1a0;only;",
        ";GNU;General0Public;License;v1a0;only;",
        ";GNU;General-Public;License;v1a0;only;",
        ";GNU;General Public;License;v1a0;only;",
        ";GNUaGeneral;Public;License;v1a0;only;",
        ";GNU_General;Public;License;v1a0;only;",
        ";GNUAGeneral;Public;License;v1a0;only;",
        ";GNU0General;Public;License;v1a0;only;",
        ";GNU-General;Public;License;v1a0;only;",
        ";GNU General;Public;License;v1a0;only;",
        ";GPL-1a0a",
        ";GPL-1a0_",
        ";GPL-1a0A",
        ";GPL-1a00",
        ";GPL-1a0-",
        ";GPL-1a0 ",
        ";GPL-1A0;",
        ";GPL-100;",
        ";GPL-1-0;",
        ";GPL-1 0;",
        "aGPL-1a0;",
        "_GPL-1a0;",
        "AGPL-1a0;",
        "0GPL-1a0;",
        "-GPL-1a0;",
        " GPL-1a0;",
        ";GNU;General;Public;License;v1a0;only;",
        ";GPL-1a0;"
      ]
    },
    {
      "regex": "^(?:[([{<~!]|\\+\\+?|--?)$",
      "exceptionStackTrace": null,
      "matches": [
        "---",
        "+++",
        "~",
        "{",
        "[",
        "<",
        "(",
        "-",
        "+",
        "--",
        "++",
        "!"
      ]
    },
    { "regex": "^\\{|}$", "exceptionStackTrace": null, "matches": ["}", "{"] },
    {
      "regex": "(\\.?\\d+){3,4}",
      "exceptionStackTrace": null,
      "matches": [
        ".0.0.0.0.0",
        ".0.0.0.0",
        ".0.0",
        ".00.0.0",
        "..0.0",
        "..0.0.0",
        "0.0.0",
        ".0.0.0"
      ]
    },
    {
      "regex": "GSP_P\\d{3}",
      "exceptionStackTrace": null,
      "matches": ["GSP_P0000", "GSP_P00", "GSP_P000"]
    },
    {
      "regex": "ipfs:\\/\\/([-a-zA-Z0-9]+)",
      "exceptionStackTrace": null,
      "matches": [
        "ipfs://:",
        "ipfs:///",
        "ipfs://-",
        "ipfs://eVil",
        "ipfs://EVIL",
        "ipfs://ev_il",
        "ipfs://ev il",
        "ipfs://ev4il",
        "ipfs://e",
        "ipfs:// ",
        "ipfs://6",
        "ipfs://_",
        "ipfs://",
        "ipfs://evil"
      ]
    },
    { "regex": "^[.#]", "exceptionStackTrace": null, "matches": [".", "#"] },
    {
      "regex": "\\.\\.\\/css\\/",
      "exceptionStackTrace": null,
      "matches": ["../css/"]
    },
    {
      "regex": "^I am on a page with an array field with the data \\[(.*)\\]$",
      "exceptionStackTrace": null,
      "matches": [
        "I am on a page with an array field with the data []]",
        "I am on a page with an array field with the data [[]",
        "I am on a page with an array field with the data [eVil]",
        "I am on a page with an array field with the data [EVIL]",
        "I am on a page with an array field with the data [ev_il]",
        "I am on a page with an array field with the data [ev il]",
        "I am on a page with an array field with the data [ev4il]",
        "I am on a page with an array field with the data [e]",
        "I am on a page with an array field with the data [ ]",
        "I am on a page with an array field with the data [6]",
        "I am on a page with an array field with the data [_]",
        "I am on a page with an array field with the data []",
        "I am on a page with an array field with the data [evil]"
      ]
    },
    { "regex": "jpmrich", "exceptionStackTrace": null, "matches": ["jpmrich"] },
    {
      "regex": "([^\\s\\[\\(])'(?=$|\\s|[:punct:])",
      "exceptionStackTrace": null,
      "matches": ["['", "A'", ":'", "0'", "('", "''", " '", "a'"]
    },
    { "regex": "decidim-", "exceptionStackTrace": null, "matches": ["decidim-"] },
    { "regex": "atomic", "exceptionStackTrace": null, "matches": ["atomic"] },
    {
      "regex": "(<object[^>]*)(xmlns=\".*?\")",
      "exceptionStackTrace": null,
      "matches": [
        "<objectevilxmlns=\">\"",
        "<objectevilxmlns=\"=\"",
        "<objectevilxmlns=\"<\"",
        "<objectevilxmlns=\"\"\"",
        "<objectevilxmlns=\"eVil\"",
        "<objectevilxmlns=\"EVIL\"",
        "<objectevilxmlns=\"ev_il\"",
        "<objectevilxmlns=\"ev il\"",
        "<objectevilxmlns=\"ev4il\"",
        "<objectevilxmlns=\"e\"",
        "<objectevilxmlns=\" \"",
        "<objectevilxmlns=\"6\"",
        "<objectevilxmlns=\"_\"",
        "<objectevilxmlns=\"\"",
        "<object>xmlns=\"evil\"",
        "<object=xmlns=\"evil\"",
        "<object<xmlns=\"evil\"",
        "<object\"xmlns=\"evil\"",
        "<objecteVilxmlns=\"evil\"",
        "<objectEVILxmlns=\"evil\"",
        "<objectev_ilxmlns=\"evil\"",
        "<objectev ilxmlns=\"evil\"",
        "<objectev4ilxmlns=\"evil\"",
        "<objectexmlns=\"evil\"",
        "<object xmlns=\"evil\"",
        "<object6xmlns=\"evil\"",
        "<object_xmlns=\"evil\"",
        "<objectxmlns=\"evil\"",
        "<objectxmlns=\"\"",
        "<objectevilxmlns=\"evil\""
      ]
    },
    {
      "regex": "<div>(.*?)</div>",
      "exceptionStackTrace": null,
      "matches": [
        "<div>></div>",
        "<div><</div>",
        "<div>/</div>",
        "<div>eVil</div>",
        "<div>EVIL</div>",
        "<div>ev_il</div>",
        "<div>ev il</div>",
        "<div>ev4il</div>",
        "<div>e</div>",
        "<div> </div>",
        "<div>6</div>",
        "<div>_</div>",
        "<div></div>",
        "<div>evil</div>"
      ]
    },
    {
      "regex": "^the following (databag|databags) (has|have) been (updated|uploaded):$",
      "exceptionStackTrace": null,
      "matches": [
        "the following databags has been updated:",
        "the following databag have been updated:",
        "the following databag has been uploaded:",
        "the following databag has been updated:"
      ]
    },
    { "regex": "%3C", "exceptionStackTrace": null, "matches": ["%3C"] },
    {
      "regex": "^Comments:",
      "exceptionStackTrace": null,
      "matches": ["Comments:"]
    },
    {
      "regex": "sequence (\\S+)",
      "exceptionStackTrace": null,
      "matches": [
        "sequence eVil",
        "sequence EVIL",
        "sequence ev_il",
        "sequence ev il",
        "sequence ev4il",
        "sequence e",
        "sequence  ",
        "sequence 6",
        "sequence _",
        "sequence ",
        "sequence evil"
      ]
    },
    {
      "regex": "<h([1-6])[^>]*>\\s*([^\\r\\n<]+)(\\s*<\\/h\\1)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": "(^|[^0-9A-Za-z\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u024f\u1e00-\u1eff\u2c60-\u2c7f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua7ff])((?:1(?:[\\s\\xa0]*Timoteusbrev|Tim|\\.[\\s\\xa0]*Timoteusbrev)|F\\xF8rste[\\s\\xa0]*Timoteusbrev|1(?:\\.[\\s\\xa0]*Tim(?:oteus)?|[\\s\\xa0]*Tim(?:oteus)?)|F\\xF8rste[\\s\\xa0]*Tim(?:oteus)?|Paulus\u2019[\\s\\xa0]*f\\xF8rste[\\s\\xa0]*brev[\\s\\xa0]*til[\\s\\xa0]*Timoteus))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 160"
      },
      "matches": []
    },
    {
      "regex": "(?<![<>])(<F>[Cc]heanna<\\/F>)(?![<>])",
      "exceptionStackTrace": null,
      "matches": [
        "<F>aheanna</F>",
        "<F>Cheanna</F>",
        "<F>Aheanna</F>",
        "<F>cheanna</F>"
      ]
    },
    {
      "regex": "\\[\\[([^\\]]*)\\]?$",
      "exceptionStackTrace": null,
      "matches": [
        "[[evil]]",
        "[[evil",
        "[[]]",
        "[[[]",
        "[[eVil]",
        "[[EVIL]",
        "[[ev_il]",
        "[[ev il]",
        "[[ev4il]",
        "[[e]",
        "[[ ]",
        "[[6]",
        "[[_]",
        "[[]",
        "[[",
        "[[evil]"
      ]
    },
    {
      "regex": "(((",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "missing ), unterminated subpattern"
      },
      "matches": []
    },
    {
      "regex": "^~[A-Z](?:\\/(?:[^\\/\\r\\n\\\\]|\\\\.)+\\/|\\|(?:[^\\|\\r\\n\\\\]|\\\\.)+\\||\"(?:[^\"\\r\\n\\\\]|\\\\.)+\"|'(?:[^'\\r\\n\\\\]|\\\\.)+')[A-Z]*",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": "^\\s*($Ident)\\s*$",
      "exceptionStackTrace": null,
      "matches": [" Ident  ", " Ident", "  Ident ", "Ident ", "Ident", " Ident "]
    },
    {
      "regex": "^Counters: (?P<num_counters>\\d+)\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        "Counters: 0  ",
        "Counters: 00 ",
        "Counters:  ",
        "Counters: 0",
        "Counters: 0 "
      ]
    },
    {
      "regex": "\\A(\\#\\+BEGIN_SRC)(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "#+BEGIN_SRC+",
        "#+BEGIN_SRC#",
        "#+BEGIN_SRCeVil",
        "#+BEGIN_SRCEVIL",
        "#+BEGIN_SRCev_il",
        "#+BEGIN_SRCev il",
        "#+BEGIN_SRCev4il",
        "#+BEGIN_SRCe",
        "#+BEGIN_SRC ",
        "#+BEGIN_SRC6",
        "#+BEGIN_SRC_",
        "#+BEGIN_SRC",
        "#+BEGIN_SRCevil"
      ]
    },
    {
      "regex": "^\\d{4}-##-##$",
      "exceptionStackTrace": null,
      "matches": ["00000-##-##", "000-##-##", "0000-##-##"]
    },
    {
      "regex": "\\s*\\n\\s*\\*\\s*|\\s{1,}",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "[x0-9a-f]",
      "exceptionStackTrace": null,
      "matches": ["g", "a", "0", "x"]
    },
    {
      "regex": "^\\Q$_\\E\\s+(\\d+(?:\\.\\d+)?)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\Q"
      },
      "matches": []
    },
    {
      "regex": "\\$\\{([\\w.]+?)\\}",
      "exceptionStackTrace": null,
      "matches": [
        "${}}",
        "${{}",
        "${.}",
        "${$}",
        "${eVil}",
        "${EVIL}",
        "${ev_il}",
        "${ev il}",
        "${ev4il}",
        "${e}",
        "${ }",
        "${6}",
        "${_}",
        "${}",
        "${evil}"
      ]
    },
    {
      "regex": "#define\\s+START_BMPWIDTH\\s+(\\d*)",
      "exceptionStackTrace": null,
      "matches": [
        "#define START_BMPWIDTH 00",
        "#define START_BMPWIDTH  0",
        "#define START_BMPWIDTH0",
        "#define  START_BMPWIDTH 0",
        "#defineSTART_BMPWIDTH 0",
        "#define START_BMPWIDTH ",
        "#define START_BMPWIDTH 0"
      ]
    },
    {
      "regex": "2> /dev/null",
      "exceptionStackTrace": null,
      "matches": ["2> /dev/null"]
    },
    {
      "regex": "^(\\*=|\\+=|-=)",
      "exceptionStackTrace": null,
      "matches": ["-=", "+=", "*="]
    },
    {
      "regex": "^([^ ]+) *(.+)?$",
      "exceptionStackTrace": null,
      "matches": [
        "evil evilevil",
        "evil eVil",
        "evil EVIL",
        "evil ev_il",
        "evil ev il",
        "evil ev4il",
        "evil e",
        "evil  ",
        "evil 6",
        "evil _",
        "evil ",
        "evil  evil",
        "evilevil",
        "eVil evil",
        "EVIL evil",
        "ev_il evil",
        "ev il evil",
        "ev4il evil",
        "e evil",
        "  evil",
        "6 evil",
        "_ evil",
        " evil",
        "evil",
        "evil evil"
      ]
    },
    {
      "regex": "(?:UNDEFINED|MERGE|TEMPTABLE)",
      "exceptionStackTrace": null,
      "matches": ["TEMPTABLE", "MERGE", "UNDEFINED"]
    },
    {
      "regex": "[@\\$]?[.].+",
      "exceptionStackTrace": null,
      "matches": [
        "$.@",
        "$..",
        "$.$",
        "$.eVil",
        "$.EVIL",
        "$.ev_il",
        "$.ev il",
        "$.ev4il",
        "$.e",
        "$. ",
        "$.6",
        "$._",
        "$.",
        "$$.evil",
        "@.evil",
        ".evil",
        "$.evil"
      ]
    },
    {
      "regex": " ([[:lower:]]+) ",
      "exceptionStackTrace": null,
      "matches": [
        " :]] ",
        " : ",
        " w] ",
        " r] ",
        " o] ",
        " l] ",
        " e] ",
        " a] ",
        " [] ",
        " :] "
      ]
    },
    {
      "regex": "[@\\]\\[]",
      "exceptionStackTrace": null,
      "matches": ["]", "@", "["]
    },
    {
      "regex": "(\\xc1\\xb0\\xc6\\xfc\\xc8\\xe6)([\\+\\-][\\d\\,]+)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 193"
      },
      "matches": []
    },
    {
      "regex": "(?:(ALTER\\s+?TABLE)\\s+(`?\\b.*?\\b`?))\\s+(?:RENAME)\\s+(?:TO)?\\s+(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "ALTER TABLE `evil` RENAME TO `",
        "ALTER TABLE `evil` RENAME TO eVil",
        "ALTER TABLE `evil` RENAME TO EVIL",
        "ALTER TABLE `evil` RENAME TO ev_il",
        "ALTER TABLE `evil` RENAME TO ev il",
        "ALTER TABLE `evil` RENAME TO ev4il",
        "ALTER TABLE `evil` RENAME TO e",
        "ALTER TABLE `evil` RENAME TO  ",
        "ALTER TABLE `evil` RENAME TO 6",
        "ALTER TABLE `evil` RENAME TO _",
        "ALTER TABLE `evil` RENAME TO ",
        "ALTER TABLE `evil` RENAME TO  evil",
        "ALTER TABLE `evil` RENAME TOevil",
        "ALTER TABLE `evil` RENAME TOTO evil",
        "ALTER TABLE `evil` RENAME  evil",
        "ALTER TABLE `evil` RENAME  TO evil",
        "ALTER TABLE `evil` RENAMETO evil",
        "ALTER TABLE `evil`  RENAME TO evil",
        "ALTER TABLE `evil`RENAME TO evil",
        "ALTER TABLE `evil`` RENAME TO evil",
        "ALTER TABLE `evil RENAME TO evil",
        "ALTER TABLE ``` RENAME TO evil",
        "ALTER TABLE `eVil` RENAME TO evil",
        "ALTER TABLE `EVIL` RENAME TO evil",
        "ALTER TABLE `ev_il` RENAME TO evil",
        "ALTER TABLE `ev il` RENAME TO evil",
        "ALTER TABLE `ev4il` RENAME TO evil",
        "ALTER TABLE `e` RENAME TO evil",
        "ALTER TABLE ` ` RENAME TO evil",
        "ALTER TABLE `6` RENAME TO evil",
        "ALTER TABLE `_` RENAME TO evil",
        "ALTER TABLE `` RENAME TO evil",
        "ALTER TABLE ``evil` RENAME TO evil",
        "ALTER TABLE evil` RENAME TO evil",
        "ALTER TABLE  `evil` RENAME TO evil",
        "ALTER TABLE`evil` RENAME TO evil",
        "ALTER  TABLE `evil` RENAME TO evil",
        "ALTERTABLE `evil` RENAME TO evil",
        "ALTER TABLE  RENAME  ",
        "ALTER TABLE `evil` RENAME TO evil"
      ]
    },
    {
      "regex": "\"version\":3",
      "exceptionStackTrace": null,
      "matches": ["\"version\":3"]
    },
    {
      "regex": "app binary not found at",
      "exceptionStackTrace": null,
      "matches": ["app binary not found at"]
    },
    { "regex": "exponent", "exceptionStackTrace": null, "matches": ["exponent"] },
    {
      "regex": "^I am within wikipedia\\.com$",
      "exceptionStackTrace": null,
      "matches": ["I am within wikipedia.com"]
    },
    {
      "regex": "(.*)\\.(\\w\\w\\w+)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil.aaeVil",
        "evil.aaEVIL",
        "evil.aaev_il",
        "evil.aaev il",
        "evil.aaev4il",
        "evil.aae",
        "evil.aa ",
        "evil.aa6",
        "evil.aa_",
        "evil.aa",
        "evil.a_evil",
        "evil.aAevil",
        "evil.a0evil",
        "evil._aevil",
        "evil.Aaevil",
        "evil.0aevil",
        "..aaevil",
        "eVil.aaevil",
        "EVIL.aaevil",
        "ev_il.aaevil",
        "ev il.aaevil",
        "ev4il.aaevil",
        "e.aaevil",
        " .aaevil",
        "6.aaevil",
        "_.aaevil",
        ".aaevil",
        "evil.aaevil"
      ]
    },
    {
      "regex": "(?<=v(\\=|\\/))([-a-zA-Z0-9_]+)|(?<=youtu\\.be\\/)([-a-zA-Z0-9_]+)",
      "exceptionStackTrace": null,
      "matches": [
        "=",
        "/",
        ".",
        "-",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "$asterisk",
      "exceptionStackTrace": null,
      "matches": ["asterisk"]
    },
    { "regex": "nt", "exceptionStackTrace": null, "matches": ["nt"] },
    {
      "regex": "https?:\\/\\/(.+)(:.+)?",
      "exceptionStackTrace": null,
      "matches": [
        "https://evil:evil:evil",
        "https://evil",
        "https://evil::",
        "https://evil:/",
        "https://evil:eVil",
        "https://evil:EVIL",
        "https://evil:ev_il",
        "https://evil:ev il",
        "https://evil:ev4il",
        "https://evil:e",
        "https://evil: ",
        "https://evil:6",
        "https://evil:_",
        "https://evil:",
        "https://::evil",
        "https:///:evil",
        "https://eVil:evil",
        "https://EVIL:evil",
        "https://ev_il:evil",
        "https://ev il:evil",
        "https://ev4il:evil",
        "https://e:evil",
        "https:// :evil",
        "https://6:evil",
        "https://_:evil",
        "https://:evil",
        "httpss://evil:evil",
        "http://evil:evil",
        "http://evil",
        "https://evil:evil"
      ]
    },
    {
      "regex": "^(.*)\\.[0-9]+$",
      "exceptionStackTrace": null,
      "matches": [
        "evil.00",
        "evil.",
        "..0",
        "eVil.0",
        "EVIL.0",
        "ev_il.0",
        "ev il.0",
        "ev4il.0",
        "e.0",
        " .0",
        "6.0",
        "_.0",
        ".0",
        "evil.0"
      ]
    },
    { "regex": "\\\\$[0-9]", "exceptionStackTrace": null, "matches": ["\\0"] },
    {
      "regex": "^#@ Row \\d+: Not transferred",
      "exceptionStackTrace": null,
      "matches": [
        "#@ Row 00: Not transferred",
        "#@ Row : Not transferred",
        "#@ Row 0: Not transferred"
      ]
    },
    {
      "regex": "@import url\\('/infinity/css/four\\.\\d+\\.css'\\);",
      "exceptionStackTrace": null,
      "matches": [
        "@import url('/infinity/css/four.00.css');",
        "@import url('/infinity/css/four..css');",
        "@import url('/infinity/css/four.0.css');"
      ]
    },
    {
      "regex": "^[wW]$",
      "exceptionStackTrace": null,
      "matches": ["w", "a", "A", "W"]
    },
    {
      "regex": "(?mi)^/buildif(y|ier)\\s*$",
      "exceptionStackTrace": null,
      "matches": [
        "/buildify  ",
        "/buildifier",
        "/buildify",
        "/buildifier ",
        "/buildify "
      ]
    },
    {
      "regex": "<\\/code><\\/pre>\\n?",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "Expected a Hash",
      "exceptionStackTrace": null,
      "matches": ["Expected a Hash"]
    },
    {
      "regex": "\\{\\{link\\:(.*)\\}\\}",
      "exceptionStackTrace": null,
      "matches": [
        "{{link:}}}",
        "{{link:{}}",
        "{{link::}}",
        "{{link:eVil}}",
        "{{link:EVIL}}",
        "{{link:ev_il}}",
        "{{link:ev il}}",
        "{{link:ev4il}}",
        "{{link:e}}",
        "{{link: }}",
        "{{link:6}}",
        "{{link:_}}",
        "{{link:}}",
        "{{link:evil}}"
      ]
    },
    {
      "regex": "(?:class|interface) +(\\w+)",
      "exceptionStackTrace": null,
      "matches": [
        "class eVil",
        "class EVIL",
        "class ev_il",
        "class ev il",
        "class ev4il",
        "class e",
        "class  ",
        "class 6",
        "class _",
        "class ",
        "class  evil",
        "classevil",
        "interface evil",
        "class evil"
      ]
    },
    {
      "regex": "minimum amount",
      "exceptionStackTrace": null,
      "matches": ["minimum amount"]
    },
    {
      "regex": "database \"",
      "exceptionStackTrace": null,
      "matches": ["database \""]
    },
    {
      "regex": "(\\s|\\t)*\\n+(\\s|\\t)*$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\t"
      },
      "matches": []
    },
    {
      "regex": "(?x)\n\t(?<_1><\\/(?i:head|body|table|thead|tbody|tfoot|tr|div|select|fieldset|style|script|ul|ol|form|dl|cfloop|cfif|cfswitch|cfcomponent)>\n\t|^(?!.*?<!---).*?---\\s*>\n\t)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<_"
      },
      "matches": []
    },
    {
      "regex": "^(.*)requirements(.*)\\.txt$",
      "exceptionStackTrace": null,
      "matches": [
        "evilrequirements..txt",
        "evilrequirementseVil.txt",
        "evilrequirementsEVIL.txt",
        "evilrequirementsev_il.txt",
        "evilrequirementsev il.txt",
        "evilrequirementsev4il.txt",
        "evilrequirementse.txt",
        "evilrequirements .txt",
        "evilrequirements6.txt",
        "evilrequirements_.txt",
        "evilrequirements.txt",
        ".requirementsevil.txt",
        "eVilrequirementsevil.txt",
        "EVILrequirementsevil.txt",
        "ev_ilrequirementsevil.txt",
        "ev ilrequirementsevil.txt",
        "ev4ilrequirementsevil.txt",
        "erequirementsevil.txt",
        " requirementsevil.txt",
        "6requirementsevil.txt",
        "_requirementsevil.txt",
        "requirementsevil.txt",
        "requirements.txt",
        "evilrequirementsevil.txt"
      ]
    },
    {
      "regex": "[^-]--[a-zA-Z0-9]",
      "exceptionStackTrace": null,
      "matches": ["a--a", "a--A", "A--0", "0--0", "---0", " --0", "a--0"]
    },
    {
      "regex": "^NOTIFY\\ (.*)",
      "exceptionStackTrace": null,
      "matches": [
        "NOTIFY eVil",
        "NOTIFY EVIL",
        "NOTIFY ev_il",
        "NOTIFY ev il",
        "NOTIFY ev4il",
        "NOTIFY e",
        "NOTIFY  ",
        "NOTIFY 6",
        "NOTIFY _",
        "NOTIFY ",
        "NOTIFY evil"
      ]
    },
    {
      "regex": "^(vib|tam)$",
      "exceptionStackTrace": null,
      "matches": ["tam", "vib"]
    },
    {
      "regex": "^(\\w+)(.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "evileVil",
        "evilEVIL",
        "evilev_il",
        "evilev il",
        "evilev4il",
        "evile",
        "evil ",
        "evil6",
        "evil_",
        "eVilevil",
        "EVILevil",
        "ev_ilevil",
        "ev ilevil",
        "ev4ilevil",
        "eevil",
        " evil",
        "6evil",
        "_evil",
        "evil",
        "evilevil"
      ]
    },
    {
      "regex": "(?<![<>])((?:<[^\\/Y][^>]*>[Nn]aoi<\\/[^Y]>) <N pl=\"n\" gnt=\"n\" gnd=\"f\">m[Bb]liain<\\/N>)(?![<>])",
      "exceptionStackTrace": null,
      "matches": [
        "<aevil>naoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">maliain</N>",
        "<aevil>naoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mBliain</N>",
        "<aevil>naoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mAliain</N>",
        "<aevil>naoi</Y> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<aevil>naoi</A> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<aevil>naoi</>> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<aevil>naoi</=> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<aevil>naoi</<> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<aevil>naoi</0> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<aevil>naoi<//> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<aevil>naoi</\"> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<aevil>naoi</ > <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<aevil>aaoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<aevil>Naoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<aevil>Aaoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<a>>naoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<a=>naoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<a<>naoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<a/>naoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<a\">naoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<aeVil>naoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<aEVIL>naoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<aev_il>naoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<aev il>naoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<aev4il>naoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<ae>naoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<a >naoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<a6>naoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<a_>naoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<Yevil>naoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<Aevil>naoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<>evil>naoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<=evil>naoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<<evil>naoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<0evil>naoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "</evil>naoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<\"evil>naoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "< evil>naoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<a>naoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>",
        "<aevil>naoi</a> <N pl=\"n\" gnt=\"n\" gnd=\"f\">mbliain</N>"
      ]
    },
    {
      "regex": "^(uint[0-9]+_t|uint_least[0-9]+_t)$",
      "exceptionStackTrace": null,
      "matches": [
        "uint_least00_t",
        "uint_least_t",
        "uint00_t",
        "uint_t",
        "uint_least0_t",
        "uint0_t"
      ]
    },
    {
      "regex": "<a[^>]+href=\"([^\"]*)\"[^>]*>([^<]*)<\\/a>",
      "exceptionStackTrace": null,
      "matches": [
        "<aevilhref=\"evil\"evil>></a>",
        "<aevilhref=\"evil\"evil>=</a>",
        "<aevilhref=\"evil\"evil><</a>",
        "<aevilhref=\"evil\"evil>/</a>",
        "<aevilhref=\"evil\"evil>\"</a>",
        "<aevilhref=\"evil\"evil>eVil</a>",
        "<aevilhref=\"evil\"evil>EVIL</a>",
        "<aevilhref=\"evil\"evil>ev_il</a>",
        "<aevilhref=\"evil\"evil>ev il</a>",
        "<aevilhref=\"evil\"evil>ev4il</a>",
        "<aevilhref=\"evil\"evil>e</a>",
        "<aevilhref=\"evil\"evil> </a>",
        "<aevilhref=\"evil\"evil>6</a>",
        "<aevilhref=\"evil\"evil>_</a>",
        "<aevilhref=\"evil\"evil></a>",
        "<aevilhref=\"evil\">>evil</a>",
        "<aevilhref=\"evil\"=>evil</a>",
        "<aevilhref=\"evil\"<>evil</a>",
        "<aevilhref=\"evil\"/>evil</a>",
        "<aevilhref=\"evil\"\">evil</a>",
        "<aevilhref=\"evil\"eVil>evil</a>",
        "<aevilhref=\"evil\"EVIL>evil</a>",
        "<aevilhref=\"evil\"ev_il>evil</a>",
        "<aevilhref=\"evil\"ev il>evil</a>",
        "<aevilhref=\"evil\"ev4il>evil</a>",
        "<aevilhref=\"evil\"e>evil</a>",
        "<aevilhref=\"evil\" >evil</a>",
        "<aevilhref=\"evil\"6>evil</a>",
        "<aevilhref=\"evil\"_>evil</a>",
        "<aevilhref=\"evil\">evil</a>",
        "<aevilhref=\">\"evil>evil</a>",
        "<aevilhref=\"=\"evil>evil</a>",
        "<aevilhref=\"<\"evil>evil</a>",
        "<aevilhref=\"/\"evil>evil</a>",
        "<aevilhref=\"\"\"evil>evil</a>",
        "<aevilhref=\"eVil\"evil>evil</a>",
        "<aevilhref=\"EVIL\"evil>evil</a>",
        "<aevilhref=\"ev_il\"evil>evil</a>",
        "<aevilhref=\"ev il\"evil>evil</a>",
        "<aevilhref=\"ev4il\"evil>evil</a>",
        "<aevilhref=\"e\"evil>evil</a>",
        "<aevilhref=\" \"evil>evil</a>",
        "<aevilhref=\"6\"evil>evil</a>",
        "<aevilhref=\"_\"evil>evil</a>",
        "<aevilhref=\"\"evil>evil</a>",
        "<a>href=\"evil\"evil>evil</a>",
        "<a=href=\"evil\"evil>evil</a>",
        "<a<href=\"evil\"evil>evil</a>",
        "<a/href=\"evil\"evil>evil</a>",
        "<a\"href=\"evil\"evil>evil</a>",
        "<aeVilhref=\"evil\"evil>evil</a>",
        "<aEVILhref=\"evil\"evil>evil</a>",
        "<aev_ilhref=\"evil\"evil>evil</a>",
        "<aev ilhref=\"evil\"evil>evil</a>",
        "<aev4ilhref=\"evil\"evil>evil</a>",
        "<aehref=\"evil\"evil>evil</a>",
        "<a href=\"evil\"evil>evil</a>",
        "<a6href=\"evil\"evil>evil</a>",
        "<a_href=\"evil\"evil>evil</a>",
        "<ahref=\"evil\"evil>evil</a>",
        "<aevilhref=\"\"></a>",
        "<aevilhref=\"evil\"evil>evil</a>"
      ]
    },
    { "regex": "$EXACTLY", "exceptionStackTrace": null, "matches": ["EXACTLY"] },
    {
      "regex": "^(?:--|\u2014)no-(.+)",
      "exceptionStackTrace": null,
      "matches": [
        "--no--",
        "--no-eVil",
        "--no-EVIL",
        "--no-ev_il",
        "--no-ev il",
        "--no-ev4il",
        "--no-e",
        "--no- ",
        "--no-6",
        "--no-_",
        "--no-",
        "\u2014no-evil",
        "--no-evil"
      ]
    },
    {
      "regex": "^image\\/jpe?g$",
      "exceptionStackTrace": null,
      "matches": ["image/jpeeg", "image/jpg", "image/jpeg"]
    },
    {
      "regex": "ui-(bar|body)-([a-z])",
      "exceptionStackTrace": null,
      "matches": ["ui-body-a", "ui-bar-a"]
    },
    {
      "regex": "myosdisk1.vhd$",
      "exceptionStackTrace": null,
      "matches": [
        "myosdisk1_vhd",
        "myosdisk1Avhd",
        "myosdisk10vhd",
        "myosdisk1 vhd",
        "myosdisk1avhd"
      ]
    },
    {
      "regex": "pod2html\\.bat",
      "exceptionStackTrace": null,
      "matches": ["pod2html.bat"]
    },
    {
      "regex": "Invalid policy type found",
      "exceptionStackTrace": null,
      "matches": ["Invalid policy type found"]
    },
    {
      "regex": " *\\[ *",
      "exceptionStackTrace": null,
      "matches": [" [  ", " [", "  [ ", "[ ", "[", " [ "]
    },
    {
      "regex": "^# Merge completed.|^Merge Successful$",
      "exceptionStackTrace": null,
      "matches": [
        "# Merge completedA",
        "# Merge completed0",
        "# Merge completed#",
        "# Merge completed ",
        "Merge Successful",
        "# Merge completeda"
      ]
    },
    {
      "regex": "/cal/(?<cal>[\\w-]+)/?$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?<c"
      },
      "matches": []
    },
    {
      "regex": "^I cannot get a profile without ID$",
      "exceptionStackTrace": null,
      "matches": ["I cannot get a profile without ID"]
    },
    {
      "regex": "Giving up looking for additional nodes",
      "exceptionStackTrace": null,
      "matches": ["Giving up looking for additional nodes"]
    },
    {
      "regex": "Unable to dump bad_var \\(#<CustomMarshaling>\\) => marshal_dump \\(#<Array>\\) => \\[0\\] \\(#<SomeObject>\\) => @danger \\(#<Class>\\)",
      "exceptionStackTrace": null,
      "matches": [
        "Unable to dump bad_var (#<CustomMarshaling>) => marshal_dump (#<Array>) => [0] (#<SomeObject>) => @danger (#<Class>)"
      ]
    },
    {
      "regex": "\\[slush\\] No generator by name: \"noexist\" was found",
      "exceptionStackTrace": null,
      "matches": ["[slush] No generator by name: \"noexist\" was found"]
    },
    {
      "regex": "test[\\/\\\\]stack\\.js:\\w+:\\w+\\)\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    { "regex": "\\bREAL\\b", "exceptionStackTrace": null, "matches": ["REAL"] },
    {
      "regex": "(?:\\r\\n)|(?:\\n)|(?:\\r)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": "^[^_]+$",
      "exceptionStackTrace": null,
      "matches": [
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "\\!max\\s*=?\\s*(\\d+)",
      "exceptionStackTrace": null,
      "matches": [
        "!max = 00",
        "!max = ",
        "!max =  0",
        "!max =0",
        "!max == 0",
        "!max  0",
        "!max  = 0",
        "!max= 0",
        "!max0",
        "!max = 0"
      ]
    },
    {
      "regex": "^I specify the Git PUGE tag \"([^\"]*)\"$",
      "exceptionStackTrace": null,
      "matches": [
        "I specify the Git PUGE tag \"\"\"",
        "I specify the Git PUGE tag \"eVil\"",
        "I specify the Git PUGE tag \"EVIL\"",
        "I specify the Git PUGE tag \"ev_il\"",
        "I specify the Git PUGE tag \"ev il\"",
        "I specify the Git PUGE tag \"ev4il\"",
        "I specify the Git PUGE tag \"e\"",
        "I specify the Git PUGE tag \" \"",
        "I specify the Git PUGE tag \"6\"",
        "I specify the Git PUGE tag \"_\"",
        "I specify the Git PUGE tag \"\"",
        "I specify the Git PUGE tag \"evil\""
      ]
    },
    {
      "regex": "^[A-Za-z0-9_]+",
      "exceptionStackTrace": null,
      "matches": [
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "version=\"1\\.1\"",
      "exceptionStackTrace": null,
      "matches": ["version=\"1.1\""]
    },
    {
      "regex": "\"?([^\\\"]+)\"?",
      "exceptionStackTrace": null,
      "matches": [
        "\"evil\"\"",
        "\"evil",
        "\"\"\"",
        "\"eVil\"",
        "\"EVIL\"",
        "\"ev_il\"",
        "\"ev il\"",
        "\"ev4il\"",
        "\"e\"",
        "\" \"",
        "\"6\"",
        "\"_\"",
        "\"\"",
        "\"\"evil\"",
        "evil\"",
        "evil",
        "\"evil\""
      ]
    },
    {
      "regex": "<_ast\\.(.*) object at 0x[0-9a-f]+>",
      "exceptionStackTrace": null,
      "matches": [
        "<_ast.evil object at 0xaa>",
        "<_ast.evil object at 0x>",
        "<_ast.evil object at 0xg>",
        "<_ast.evil object at 0x0>",
        "<_ast.> object at 0xa>",
        "<_ast.< object at 0xa>",
        "<_ast.. object at 0xa>",
        "<_ast.eVil object at 0xa>",
        "<_ast.EVIL object at 0xa>",
        "<_ast.ev_il object at 0xa>",
        "<_ast.ev il object at 0xa>",
        "<_ast.ev4il object at 0xa>",
        "<_ast.e object at 0xa>",
        "<_ast.  object at 0xa>",
        "<_ast.6 object at 0xa>",
        "<_ast._ object at 0xa>",
        "<_ast. object at 0xa>",
        "<_ast.evil object at 0xa>"
      ]
    },
    {
      "regex": "^<ul class=\"simplelifestream\">(.*?)</ul>$",
      "exceptionStackTrace": null,
      "matches": [
        "<ul class=\"simplelifestream\">></ul>",
        "<ul class=\"simplelifestream\">=</ul>",
        "<ul class=\"simplelifestream\"><</ul>",
        "<ul class=\"simplelifestream\">/</ul>",
        "<ul class=\"simplelifestream\">\"</ul>",
        "<ul class=\"simplelifestream\">eVil</ul>",
        "<ul class=\"simplelifestream\">EVIL</ul>",
        "<ul class=\"simplelifestream\">ev_il</ul>",
        "<ul class=\"simplelifestream\">ev il</ul>",
        "<ul class=\"simplelifestream\">ev4il</ul>",
        "<ul class=\"simplelifestream\">e</ul>",
        "<ul class=\"simplelifestream\"> </ul>",
        "<ul class=\"simplelifestream\">6</ul>",
        "<ul class=\"simplelifestream\">_</ul>",
        "<ul class=\"simplelifestream\"></ul>",
        "<ul class=\"simplelifestream\">evil</ul>"
      ]
    },
    {
      "regex": "^[\\d\\.]{1,}$",
      "exceptionStackTrace": null,
      "matches": ["..", "", "0", "."]
    },
    {
      "regex": "\\G([^<]+)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\G"
      },
      "matches": []
    },
    {
      "regex": "^/core/modules/[^/]+/assets/",
      "exceptionStackTrace": null,
      "matches": [
        "/core/modules///assets/",
        "/core/modules/eVil/assets/",
        "/core/modules/EVIL/assets/",
        "/core/modules/ev_il/assets/",
        "/core/modules/ev il/assets/",
        "/core/modules/ev4il/assets/",
        "/core/modules/e/assets/",
        "/core/modules/ /assets/",
        "/core/modules/6/assets/",
        "/core/modules/_/assets/",
        "/core/modules//assets/",
        "/core/modules/evil/assets/"
      ]
    },
    {
      "regex": "_EMO_([^_]+?)_([^]*?)_EMO_",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unterminated character set"
      },
      "matches": []
    },
    {
      "regex": "^I create an IAM user with the username$",
      "exceptionStackTrace": null,
      "matches": ["I create an IAM user with the username"]
    },
    {
      "regex": "\\Q$alta{'q_pre'}\\E([^\\\"]*)\\Q$alta{'q_pst'}\\E",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\Q"
      },
      "matches": []
    },
    {
      "regex": "-rbundler\\/setup",
      "exceptionStackTrace": null,
      "matches": ["-rbundler/setup"]
    },
    {
      "regex": "\\bupgrade\\b",
      "exceptionStackTrace": null,
      "matches": ["upgrade"]
    },
    {
      "regex": "^$wsp*",
      "exceptionStackTrace": null,
      "matches": ["wspp", "ws", "wsp"]
    },
    {
      "regex": "^\\s*(\\d{1,3})\\s*$",
      "exceptionStackTrace": null,
      "matches": [" 0  ", " 0", " 0000 ", " 000 ", "  ", "  0 ", "0 ", "0", " 0 "]
    },
    {
      "regex": "\\Ah\\d\\.\\s*",
      "exceptionStackTrace": null,
      "matches": ["h0.  ", "h0.", "h0. "]
    },
    {
      "regex": "(?<!second|\\d|",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "missing ), unterminated subpattern"
      },
      "matches": []
    },
    { "regex": "$marker", "exceptionStackTrace": null, "matches": ["marker"] },
    {
      "regex": "(?>(?>[[:blank:]])*)(?>\\z|;|(?>(?>\\r)?)(?>\\n)|(?>\\#)(?>(?>[^\\n])*))",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "unknown extension ?>"
      },
      "matches": []
    },
    {
      "regex": "Debugger listening on .*:9000",
      "exceptionStackTrace": null,
      "matches": [
        "Debugger listening on ::9000",
        "Debugger listening on eVil:9000",
        "Debugger listening on EVIL:9000",
        "Debugger listening on ev_il:9000",
        "Debugger listening on ev il:9000",
        "Debugger listening on ev4il:9000",
        "Debugger listening on e:9000",
        "Debugger listening on  :9000",
        "Debugger listening on 6:9000",
        "Debugger listening on _:9000",
        "Debugger listening on :9000",
        "Debugger listening on evil:9000"
      ]
    },
    { "regex": "^$p", "exceptionStackTrace": null, "matches": ["p"] },
    {
      "regex": "()<B><Z>(?:<[^>]+>)+<\\/Z>([Aa]t\\x{e1})<\\/B>()",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "incomplete escape \\x"
      },
      "matches": []
    },
    {
      "regex": "^\\Q$distdir\\E(?:/|$)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\Q"
      },
      "matches": []
    },
    {
      "regex": "^data:image\\/jpeg.*;base64,",
      "exceptionStackTrace": null,
      "matches": [
        "data:image/jpeg;;base64,",
        "data:image/jpeg:;base64,",
        "data:image/jpeg/;base64,",
        "data:image/jpeg,;base64,",
        "data:image/jpegeVil;base64,",
        "data:image/jpegEVIL;base64,",
        "data:image/jpegev_il;base64,",
        "data:image/jpegev il;base64,",
        "data:image/jpegev4il;base64,",
        "data:image/jpege;base64,",
        "data:image/jpeg ;base64,",
        "data:image/jpeg6;base64,",
        "data:image/jpeg_;base64,",
        "data:image/jpeg;base64,",
        "data:image/jpegevil;base64,"
      ]
    },
    { "regex": "EPOC", "exceptionStackTrace": null, "matches": ["EPOC"] },
    {
      "regex": "auth.*DIGEST\\-MD5",
      "exceptionStackTrace": null,
      "matches": [
        "auth-DIGEST-MD5",
        "autheVilDIGEST-MD5",
        "authEVILDIGEST-MD5",
        "authev_ilDIGEST-MD5",
        "authev ilDIGEST-MD5",
        "authev4ilDIGEST-MD5",
        "autheDIGEST-MD5",
        "auth DIGEST-MD5",
        "auth6DIGEST-MD5",
        "auth_DIGEST-MD5",
        "authDIGEST-MD5",
        "authevilDIGEST-MD5"
      ]
    },
    {
      "regex": "\\d+.\\w{3,}",
      "exceptionStackTrace": null,
      "matches": [
        "0aaa",
        "0a_aa",
        "0aAaa",
        "0a0aa",
        "0_aaa",
        "0Aaaa",
        "00aaa",
        "0 aaa",
        "00aaaa",
        "aaaa",
        "0aaaa"
      ]
    },
    {
      "regex": "^\\.{1,2}$",
      "exceptionStackTrace": null,
      "matches": ["...", "..", "", "."]
    },
    {
      "regex": "(?i)^(.*)(@charset)( \\\"[^\\\"]*\\\";)",
      "exceptionStackTrace": null,
      "matches": [
        "evil@charset \"@\";",
        "evil@charset \";\";",
        "evil@charset \"\"\";",
        "evil@charset \"eVil\";",
        "evil@charset \"EVIL\";",
        "evil@charset \"ev_il\";",
        "evil@charset \"ev il\";",
        "evil@charset \"ev4il\";",
        "evil@charset \"e\";",
        "evil@charset \" \";",
        "evil@charset \"6\";",
        "evil@charset \"_\";",
        "evil@charset \"\";",
        "@@charset \"evil\";",
        ";@charset \"evil\";",
        "\"@charset \"evil\";",
        "eVil@charset \"evil\";",
        "EVIL@charset \"evil\";",
        "ev_il@charset \"evil\";",
        "ev il@charset \"evil\";",
        "ev4il@charset \"evil\";",
        "e@charset \"evil\";",
        " @charset \"evil\";",
        "6@charset \"evil\";",
        "_@charset \"evil\";",
        "@charset \"evil\";",
        "@charset \"\";",
        "evil@charset \"evil\";"
      ]
    },
    {
      "regex": "tree_building: (\\d+(.\\d+)?)s",
      "exceptionStackTrace": null,
      "matches": [
        "tree_building: 0a0a0s",
        "tree_building: 0a00s",
        "tree_building: 0as",
        "tree_building: 0_0s",
        "tree_building: 0A0s",
        "tree_building: 0:0s",
        "tree_building: 000s",
        "tree_building: 0 0s",
        "tree_building: 00a0s",
        "tree_building: a0s",
        "tree_building: 0s",
        "tree_building: 0a0s"
      ]
    },
    {
      "regex": "(<E[^>]*><U>[Nn]\\x{ed}<\\/U> <V cop=\"y\">ba<\\/V><\\/E>)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "incomplete escape \\x"
      },
      "matches": []
    },
    { "regex": "TXT_LAST", "exceptionStackTrace": null, "matches": ["TXT_LAST"] },
    {
      "regex": ":<([^\\n]+)",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "form-data; *name=(?:\"([^\"\\r\\n]*)\"|([^;\\r\\n]+))",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": "data\\-show\\-posts=\\\"(?:true|1)?\\\"",
      "exceptionStackTrace": null,
      "matches": [
        "data-show-posts=\"truetrue\"",
        "data-show-posts=\"\"",
        "data-show-posts=\"1\"",
        "data-show-posts=\"true\""
      ]
    },
    {
      "regex": "^\\x0D\\x0A$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 13"
      },
      "matches": []
    },
    {
      "regex": "\\[\\[([^|]*?)\\|?([^|]*?)\\]\\]",
      "exceptionStackTrace": null,
      "matches": [
        "[[evil||]]",
        "[[evil|]]]",
        "[[evil|[]]",
        "[[evil|eVil]]",
        "[[evil|EVIL]]",
        "[[evil|ev_il]]",
        "[[evil|ev il]]",
        "[[evil|ev4il]]",
        "[[evil|e]]",
        "[[evil| ]]",
        "[[evil|6]]",
        "[[evil|_]]",
        "[[evil|]]",
        "[[evil||evil]]",
        "[[evilevil]]",
        "[[||evil]]",
        "[[]|evil]]",
        "[[[|evil]]",
        "[[eVil|evil]]",
        "[[EVIL|evil]]",
        "[[ev_il|evil]]",
        "[[ev il|evil]]",
        "[[ev4il|evil]]",
        "[[e|evil]]",
        "[[ |evil]]",
        "[[6|evil]]",
        "[[_|evil]]",
        "[[|evil]]",
        "[[]]",
        "[[evil|evil]]"
      ]
    },
    {
      "regex": "Token type must be 0",
      "exceptionStackTrace": null,
      "matches": ["Token type must be 0"]
    },
    {
      "regex": "^(\\w+)-(.*?)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil--",
        "evil-eVil",
        "evil-EVIL",
        "evil-ev_il",
        "evil-ev il",
        "evil-ev4il",
        "evil-e",
        "evil- ",
        "evil-6",
        "evil-_",
        "eVil-evil",
        "EVIL-evil",
        "ev_il-evil",
        "ev il-evil",
        "ev4il-evil",
        "e-evil",
        " -evil",
        "6-evil",
        "_-evil",
        "-evil",
        "evil-",
        "evil-evil"
      ]
    },
    {
      "regex": "\\[([^\\[]*)\\[([^\\]]*)\\]",
      "exceptionStackTrace": null,
      "matches": [
        "[evil[]]",
        "[evil[[]",
        "[evil[eVil]",
        "[evil[EVIL]",
        "[evil[ev_il]",
        "[evil[ev il]",
        "[evil[ev4il]",
        "[evil[e]",
        "[evil[ ]",
        "[evil[6]",
        "[evil[_]",
        "[evil[]",
        "[][evil]",
        "[[[evil]",
        "[eVil[evil]",
        "[EVIL[evil]",
        "[ev_il[evil]",
        "[ev il[evil]",
        "[ev4il[evil]",
        "[e[evil]",
        "[ [evil]",
        "[6[evil]",
        "[_[evil]",
        "[[evil]",
        "[[]",
        "[evil[evil]"
      ]
    },
    {
      "regex": "^\\\\_sh\\s+(\\S+)\\s+(\\S+)\\s+(.*?)\\s+$",
      "exceptionStackTrace": null,
      "matches": [
        "\\_sh evil evil evil  ",
        "\\_sh evil evil evil",
        "\\_sh evil evil \\ ",
        "\\_sh evil evil eVil ",
        "\\_sh evil evil EVIL ",
        "\\_sh evil evil ev_il ",
        "\\_sh evil evil ev il ",
        "\\_sh evil evil ev4il ",
        "\\_sh evil evil e ",
        "\\_sh evil evil   ",
        "\\_sh evil evil 6 ",
        "\\_sh evil evil _ ",
        "\\_sh evil evil  evil ",
        "\\_sh evil evilevil ",
        "\\_sh evil \\ evil ",
        "\\_sh evil eVil evil ",
        "\\_sh evil EVIL evil ",
        "\\_sh evil ev_il evil ",
        "\\_sh evil ev il evil ",
        "\\_sh evil ev4il evil ",
        "\\_sh evil e evil ",
        "\\_sh evil   evil ",
        "\\_sh evil 6 evil ",
        "\\_sh evil _ evil ",
        "\\_sh evil  evil ",
        "\\_sh evil  evil evil ",
        "\\_sh evilevil evil ",
        "\\_sh \\ evil evil ",
        "\\_sh eVil evil evil ",
        "\\_sh EVIL evil evil ",
        "\\_sh ev_il evil evil ",
        "\\_sh ev il evil evil ",
        "\\_sh ev4il evil evil ",
        "\\_sh e evil evil ",
        "\\_sh   evil evil ",
        "\\_sh 6 evil evil ",
        "\\_sh _ evil evil ",
        "\\_sh  evil evil ",
        "\\_sh  evil evil evil ",
        "\\_shevil evil evil ",
        "\\_sh evil evil  ",
        "\\_sh evil evil evil "
      ]
    },
    {
      "regex": "(?<=\\s{3}min-links\\s)(?P<value>.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "-",
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "\\$\\(dir ([^\\)]+)\\)",
      "exceptionStackTrace": null,
      "matches": [
        "$(dir ))",
        "$(dir ()",
        "$(dir $)",
        "$(dir eVil)",
        "$(dir EVIL)",
        "$(dir ev_il)",
        "$(dir ev il)",
        "$(dir ev4il)",
        "$(dir e)",
        "$(dir  )",
        "$(dir 6)",
        "$(dir _)",
        "$(dir )",
        "$(dir evil)"
      ]
    },
    {
      "regex": "\u00e1\u00bd\u0081",
      "exceptionStackTrace": null,
      "matches": ["\u00e1\u00bd\u0081"]
    },
    {
      "regex": "height=['\\\"]?[10]['\\\"]?",
      "exceptionStackTrace": null,
      "matches": [
        "height=\"0\"\"",
        "height=\"0",
        "height=\"0'",
        "height=\"2\"",
        "height=\"1\"",
        "height=\"\"0\"",
        "height=0\"",
        "height='0\"",
        "height=0",
        "height=\"0\""
      ]
    },
    {
      "regex": "<head[^<]*?>",
      "exceptionStackTrace": null,
      "matches": [
        "<head>>",
        "<head<>",
        "<headeVil>",
        "<headEVIL>",
        "<headev_il>",
        "<headev il>",
        "<headev4il>",
        "<heade>",
        "<head >",
        "<head6>",
        "<head_>",
        "<head>",
        "<headevil>"
      ]
    },
    {
      "regex": ".cfmt$",
      "exceptionStackTrace": null,
      "matches": ["_cfmt", "Acfmt", "0cfmt", " cfmt", "acfmt"]
    },
    {
      "regex": "^Supported options:\\n[\\s\\S]*?\\nERROR: `reserved=\\[in]` is not a supported option",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "NTLM ([^\\s]+)",
      "exceptionStackTrace": null,
      "matches": [
        "NTLM eVil",
        "NTLM EVIL",
        "NTLM ev_il",
        "NTLM ev il",
        "NTLM ev4il",
        "NTLM e",
        "NTLM  ",
        "NTLM 6",
        "NTLM _",
        "NTLM ",
        "NTLM evil"
      ]
    },
    {
      "regex": "$getmetaheader",
      "exceptionStackTrace": null,
      "matches": ["getmetaheader"]
    },
    {
      "regex": "0X0P.+",
      "exceptionStackTrace": null,
      "matches": [
        "0X0PeVil",
        "0X0PEVIL",
        "0X0Pev_il",
        "0X0Pev il",
        "0X0Pev4il",
        "0X0Pe",
        "0X0P ",
        "0X0P6",
        "0X0P_",
        "0X0P",
        "0X0Pevil"
      ]
    },
    {
      "regex": "<\\?birthdate>",
      "exceptionStackTrace": null,
      "matches": ["<?birthdate>"]
    },
    {
      "regex": "failure: assert falsy",
      "exceptionStackTrace": null,
      "matches": ["failure: assert falsy"]
    },
    { "regex": "\\s\\|\\s", "exceptionStackTrace": null, "matches": [" | "] },
    {
      "regex": "^(https?)://([\\w\\.-]+)",
      "exceptionStackTrace": null,
      "matches": [
        "https://:",
        "https:///",
        "https://.",
        "https://-",
        "https://eVil",
        "https://EVIL",
        "https://ev_il",
        "https://ev il",
        "https://ev4il",
        "https://e",
        "https:// ",
        "https://6",
        "https://_",
        "https://",
        "httpss://evil",
        "http://evil",
        "https://evil"
      ]
    },
    {
      "regex": "^https?:\\/\\/([0-9a-z\\_\\.\\-:]+)\\/",
      "exceptionStackTrace": null,
      "matches": [
        "https://:/",
        "https:////",
        "https://./",
        "https://-/",
        "https://eVil/",
        "https://EVIL/",
        "https://ev_il/",
        "https://ev il/",
        "https://ev4il/",
        "https://e/",
        "https:// /",
        "https://6/",
        "https://_/",
        "https:///",
        "httpss://evil/",
        "http://evil/",
        "https://evil/"
      ]
    },
    {
      "regex": "\\.(?:nan|Nan|NAN)",
      "exceptionStackTrace": null,
      "matches": [".NAN", ".Nan", ".nan"]
    },
    {
      "regex": "\\bSmartWatch *\\( *([^;]+) *; *([^;]+) *;",
      "exceptionStackTrace": null,
      "matches": [
        "SmartWatch ( evil ; evil  ;",
        "SmartWatch ( evil ; evil;",
        "SmartWatch ( evil ; ; ;",
        "SmartWatch ( evil ; ( ;",
        "SmartWatch ( evil ; eVil ;",
        "SmartWatch ( evil ; EVIL ;",
        "SmartWatch ( evil ; ev_il ;",
        "SmartWatch ( evil ; ev il ;",
        "SmartWatch ( evil ; ev4il ;",
        "SmartWatch ( evil ; e ;",
        "SmartWatch ( evil ;   ;",
        "SmartWatch ( evil ; 6 ;",
        "SmartWatch ( evil ; _ ;",
        "SmartWatch ( evil ;  ;",
        "SmartWatch ( evil ;  evil ;",
        "SmartWatch ( evil ;evil ;",
        "SmartWatch ( evil  ; evil ;",
        "SmartWatch ( evil; evil ;",
        "SmartWatch ( ; ; evil ;",
        "SmartWatch ( ( ; evil ;",
        "SmartWatch ( eVil ; evil ;",
        "SmartWatch ( EVIL ; evil ;",
        "SmartWatch ( ev_il ; evil ;",
        "SmartWatch ( ev il ; evil ;",
        "SmartWatch ( ev4il ; evil ;",
        "SmartWatch ( e ; evil ;",
        "SmartWatch (   ; evil ;",
        "SmartWatch ( 6 ; evil ;",
        "SmartWatch ( _ ; evil ;",
        "SmartWatch (  ; evil ;",
        "SmartWatch (  evil ; evil ;",
        "SmartWatch (evil ; evil ;",
        "SmartWatch  ( evil ; evil ;",
        "SmartWatch( evil ; evil ;",
        "SmartWatch(evil;evil;",
        "SmartWatch ( evil ; evil ;"
      ]
    },
    { "regex": "^weekend$", "exceptionStackTrace": null, "matches": ["weekend"] },
    {
      "regex": "^memcached_items(\\\\.|-).*",
      "exceptionStackTrace": null,
      "matches": [
        "memcached_items\\a\\",
        "memcached_items\\a-",
        "memcached_items\\aeVil",
        "memcached_items\\aEVIL",
        "memcached_items\\aev_il",
        "memcached_items\\aev il",
        "memcached_items\\aev4il",
        "memcached_items\\ae",
        "memcached_items\\a ",
        "memcached_items\\a6",
        "memcached_items\\a_",
        "memcached_items\\_evil",
        "memcached_items\\\\evil",
        "memcached_items\\Aevil",
        "memcached_items\\0evil",
        "memcached_items\\-evil",
        "memcached_items\\ evil",
        "memcached_items-",
        "memcached_items\\a",
        "memcached_items-evil",
        "memcached_items\\aevil"
      ]
    },
    {
      "regex": "([^\\.]+)(?:\\.(.+))?",
      "exceptionStackTrace": null,
      "matches": [
        "evil.evil.evil",
        "evil..",
        "evil.eVil",
        "evil.EVIL",
        "evil.ev_il",
        "evil.ev il",
        "evil.ev4il",
        "evil.e",
        "evil. ",
        "evil.6",
        "evil._",
        "evil.",
        "..evil",
        "eVil.evil",
        "EVIL.evil",
        "ev_il.evil",
        "ev il.evil",
        "ev4il.evil",
        "e.evil",
        " .evil",
        "6.evil",
        "_.evil",
        ".evil",
        "evil",
        "evil.evil"
      ]
    },
    {
      "regex": "[^0-9A-Za-z]+",
      "exceptionStackTrace": null,
      "matches": [
        "eVil",
        "EVIL",
        "ev_il",
        "ev il",
        "ev4il",
        "e",
        " ",
        "6",
        "_",
        "",
        "evil"
      ]
    },
    {
      "regex": "^\\s*\\/\\/ *(\\{[^}]*\\}) *\\r?\\n",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\r"
      },
      "matches": []
    },
    {
      "regex": "DOME*FLAT",
      "exceptionStackTrace": null,
      "matches": ["DOMEEFLAT", "DOMFLAT", "DOMEFLAT"]
    },
    {
      "regex": "^resp([0-9]+)_",
      "exceptionStackTrace": null,
      "matches": ["resp00_", "resp_", "resp0_"]
    },
    {
      "regex": "Concurrency:[\\s]+([\\d\\.]+)",
      "exceptionStackTrace": null,
      "matches": [
        "Concurrency: ..",
        "Concurrency: ",
        "Concurrency: 0",
        "Concurrency:  .",
        "Concurrency:.",
        "Concurrency: ."
      ]
    },
    {
      "regex": "^(\\s*VERSION\\s*=\\s*).*",
      "exceptionStackTrace": null,
      "matches": [
        " VERSION = =",
        " VERSION = eVil",
        " VERSION = EVIL",
        " VERSION = ev_il",
        " VERSION = ev il",
        " VERSION = ev4il",
        " VERSION = e",
        " VERSION =  ",
        " VERSION = 6",
        " VERSION = _",
        " VERSION = ",
        " VERSION =  evil",
        " VERSION =evil",
        " VERSION  = evil",
        " VERSION= evil",
        "  VERSION = evil",
        "VERSION = evil",
        "VERSION=",
        " VERSION = evil"
      ]
    },
    {
      "regex": "(XP|2000 Advanced Server|2000|2003|2008|SBS|Vista|7 .* Edition|7)",
      "exceptionStackTrace": null,
      "matches": [
        "7 eVil Edition",
        "7 EVIL Edition",
        "7 ev_il Edition",
        "7 ev il Edition",
        "7 ev4il Edition",
        "7 e Edition",
        "7   Edition",
        "7 6 Edition",
        "7 _ Edition",
        "7  Edition",
        "7",
        "7 evil Edition",
        "Vista",
        "SBS",
        "2008",
        "2003",
        "2000",
        "2000 Advanced Server",
        "XP"
      ]
    },
    {
      "regex": "rgb\\((\\d+),\\s?(\\d+),\\s?(\\d+)\\)",
      "exceptionStackTrace": null,
      "matches": [
        "rgb(0, 0, 00)",
        "rgb(0, 0, )",
        "rgb(0, 0,  0)",
        "rgb(0, 0,0)",
        "rgb(0, 00, 0)",
        "rgb(0, , 0)",
        "rgb(0,  0, 0)",
        "rgb(0,0, 0)",
        "rgb(00, 0, 0)",
        "rgb(, 0, 0)",
        "rgb(0,0,0)",
        "rgb(0, 0, 0)"
      ]
    },
    { "regex": "readable", "exceptionStackTrace": null, "matches": ["readable"] },
    {
      "regex": "([a-z]|\\.|\\[|\\])+(\\d)$",
      "exceptionStackTrace": null,
      "matches": ["aa0", "0", "]0", "[0", ".0", "a0"]
    },
    {
      "regex": "^(?:file|mode|perms)$",
      "exceptionStackTrace": null,
      "matches": ["perms", "mode", "file"]
    },
    {
      "regex": "$path_dem",
      "exceptionStackTrace": null,
      "matches": ["path_dem"]
    },
    {
      "regex": "^allclients;\\[[0-9, ]*\\]$",
      "exceptionStackTrace": null,
      "matches": [
        "allclients;[  ]",
        "allclients;[0]",
        "allclients;[,]",
        "allclients;[]",
        "allclients;[ ]"
      ]
    },
    {
      "regex": "<div>\\n +<br/>\\n +<!-- comment -->\\n +<br/>\\n +</div>",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "Cleared for White House|Presented to President",
      "exceptionStackTrace": null,
      "matches": ["Presented to President", "Cleared for White House"]
    },
    {
      "regex": "^.+::([\\w]+?)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil::eVil",
        "evil::EVIL",
        "evil::ev_il",
        "evil::ev il",
        "evil::ev4il",
        "evil::e",
        "evil:: ",
        "evil::6",
        "evil::_",
        "evil::",
        ":::evil",
        "eVil::evil",
        "EVIL::evil",
        "ev_il::evil",
        "ev il::evil",
        "ev4il::evil",
        "e::evil",
        " ::evil",
        "6::evil",
        "_::evil",
        "::evil",
        "evil::evil"
      ]
    },
    {
      "regex": "sense\\s*id=\\\"$1\\\"",
      "exceptionStackTrace": null,
      "matches": ["sense  id=\"1\"", "senseid=\"1\"", "sense id=\"1\""]
    },
    {
      "regex": "^\\s*[#].*",
      "exceptionStackTrace": null,
      "matches": [
        " ##",
        " #eVil",
        " #EVIL",
        " #ev_il",
        " #ev il",
        " #ev4il",
        " #e",
        " # ",
        " #6",
        " #_",
        " #",
        "  #evil",
        "#evil",
        "#",
        " #evil"
      ]
    },
    { "regex": "cccccc", "exceptionStackTrace": null, "matches": ["cccccc"] },
    {
      "regex": "^(?:table(_?",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "missing ), unterminated subpattern"
      },
      "matches": []
    },
    { "regex": "$parent1", "exceptionStackTrace": null, "matches": ["parent1"] },
    { "regex": "^\\\\\\%", "exceptionStackTrace": null, "matches": ["\\%"] },
    {
      "regex": "no results",
      "exceptionStackTrace": null,
      "matches": ["no results"]
    },
    {
      "regex": "\\\"([\\w.]+)?\\\"",
      "exceptionStackTrace": null,
      "matches": [
        "\"evilevil\"",
        "\".\"",
        "\"\"\"",
        "\"eVil\"",
        "\"EVIL\"",
        "\"ev_il\"",
        "\"ev il\"",
        "\"ev4il\"",
        "\"e\"",
        "\" \"",
        "\"6\"",
        "\"_\"",
        "\"\"",
        "\"evil\""
      ]
    },
    {
      "regex": "^data\\-(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "data--",
        "data-eVil",
        "data-EVIL",
        "data-ev_il",
        "data-ev il",
        "data-ev4il",
        "data-e",
        "data- ",
        "data-6",
        "data-_",
        "data-",
        "data-evil"
      ]
    },
    {
      "regex": "(\\$DBName\\s*=\\s*(\\\"|')+)(.*)((\\\"|')+;)",
      "exceptionStackTrace": null,
      "matches": [
        "$DBName = \"evil\"\";",
        "$DBName = \"evil;",
        "$DBName = \"=\";",
        "$DBName = \";\";",
        "$DBName = \"'\";",
        "$DBName = \"$\";",
        "$DBName = \"\"\";",
        "$DBName = \"eVil\";",
        "$DBName = \"EVIL\";",
        "$DBName = \"ev_il\";",
        "$DBName = \"ev il\";",
        "$DBName = \"ev4il\";",
        "$DBName = \"e\";",
        "$DBName = \" \";",
        "$DBName = \"6\";",
        "$DBName = \"_\";",
        "$DBName = \"\";",
        "$DBName = \"\"evil\";",
        "$DBName = evil\";",
        "$DBName =  \"evil\";",
        "$DBName =\"evil\";",
        "$DBName  = \"evil\";",
        "$DBName= \"evil\";",
        "$DBName='\";",
        "$DBName=\"';",
        "$DBName=\"\";",
        "$DBName = 'evil\";",
        "$DBName = \"evil';",
        "$DBName = \"evil\";"
      ]
    },
    {
      "regex": "^urn\\:lsid",
      "exceptionStackTrace": null,
      "matches": ["urn:lsid"]
    },
    {
      "regex": "[\\x00-\\x1f\\s]",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported hex value 0"
      },
      "matches": []
    },
    {
      "regex": "(?mi)^/joke\\s*$",
      "exceptionStackTrace": null,
      "matches": ["/joke  ", "/joke", "/joke "]
    },
    {
      "regex": "^.*\\:\\/\\/[^\\/]+\\/?",
      "exceptionStackTrace": null,
      "matches": [
        "evil://evil//",
        "evil://evil",
        "evil://:/",
        "evil:////",
        "evil://eVil/",
        "evil://EVIL/",
        "evil://ev_il/",
        "evil://ev il/",
        "evil://ev4il/",
        "evil://e/",
        "evil:// /",
        "evil://6/",
        "evil://_/",
        "evil:///",
        ":://evil/",
        "/://evil/",
        "eVil://evil/",
        "EVIL://evil/",
        "ev_il://evil/",
        "ev il://evil/",
        "ev4il://evil/",
        "e://evil/",
        " ://evil/",
        "6://evil/",
        "_://evil/",
        "://evil/",
        "://evil",
        "evil://evil/"
      ]
    },
    {
      "regex": "^the load balancer should be in the list$",
      "exceptionStackTrace": null,
      "matches": ["the load balancer should be in the list"]
    },
    {
      "regex": "^%([#0 +-]?)((\\*|[0-9]+)?)((\\.(\\*|[0-9]+))?)[hlL]?([diouxXeEfFgGcrs%])",
      "exceptionStackTrace": null,
      "matches": [
        "%-00.*L%",
        "%-*.00L%",
        "%-*.L%",
        "%-*.*Lx",
        "%-*.*Lu",
        "%-*.*Ls",
        "%-*.*Lr",
        "%-*.*Lo",
        "%-*.*Li",
        "%-*.*Lg",
        "%-*.*Lf",
        "%-*.*Le",
        "%-*.*Ld",
        "%-*.*Lc",
        "%-*.*La",
        "%-*.*LX",
        "%-*.*LG",
        "%-*.*LF",
        "%-*.*LE",
        "%-*.*LA",
        "%-*.*LL%",
        "%-*.*%",
        "%-*.*l%",
        "%-*.*h%",
        "%-*.*a%",
        "%-*.*A%",
        "%-*.*.*L%",
        "%-*L%",
        "%-**.*L%",
        "%-.*L%",
        "%--*.*L%",
        "%*.*L%",
        "%1*.*L%",
        "%0*.*L%",
        "%+*.*L%",
        "%#*.*L%",
        "% *.*L%",
        "%%",
        "%-0.*L%",
        "%-*.0L%",
        "%-*.*L%"
      ]
    },
    {
      "regex": ".*?\\.([^\\.]+)$",
      "exceptionStackTrace": null,
      "matches": [
        "evil..",
        "evil.eVil",
        "evil.EVIL",
        "evil.ev_il",
        "evil.ev il",
        "evil.ev4il",
        "evil.e",
        "evil. ",
        "evil.6",
        "evil._",
        "evil.",
        "..evil",
        "eVil.evil",
        "EVIL.evil",
        "ev_il.evil",
        "ev il.evil",
        "ev4il.evil",
        "e.evil",
        " .evil",
        "6.evil",
        "_.evil",
        ".evil",
        "evil.evil"
      ]
    },
    {
      "regex": "[^\\{\\}\\s][^\\{\\};]*?(?=\\s*\\{)",
      "exceptionStackTrace": null,
      "matches": [
        "a}",
        "a{",
        "a;",
        "aeVil",
        "aEVIL",
        "aev_il",
        "aev il",
        "aev4il",
        "ae",
        "a ",
        "a6",
        "a_",
        "}evil",
        "{evil",
        "Aevil",
        ";evil",
        "0evil",
        " evil",
        "a",
        "aevil"
      ]
    },
    {
      "regex": "^.*id=([^ ]+).*name=blocked.*$",
      "exceptionStackTrace": null,
      "matches": [
        "evilid=evilevilname=blocked=",
        "evilid=evilevilname=blockedeVil",
        "evilid=evilevilname=blockedEVIL",
        "evilid=evilevilname=blockedev_il",
        "evilid=evilevilname=blockedev il",
        "evilid=evilevilname=blockedev4il",
        "evilid=evilevilname=blockede",
        "evilid=evilevilname=blocked ",
        "evilid=evilevilname=blocked6",
        "evilid=evilevilname=blocked_",
        "evilid=evilevilname=blocked",
        "evilid=evil=name=blockedevil",
        "evilid=evileVilname=blockedevil",
        "evilid=evilEVILname=blockedevil",
        "evilid=evilev_ilname=blockedevil",
        "evilid=evilev ilname=blockedevil",
        "evilid=evilev4ilname=blockedevil",
        "evilid=evilename=blockedevil",
        "evilid=evil name=blockedevil",
        "evilid=evil6name=blockedevil",
        "evilid=evil_name=blockedevil",
        "evilid==evilname=blockedevil",
        "evilid=eVilevilname=blockedevil",
        "evilid=EVILevilname=blockedevil",
        "evilid=ev_ilevilname=blockedevil",
        "evilid=ev ilevilname=blockedevil",
        "evilid=ev4ilevilname=blockedevil",
        "evilid=eevilname=blockedevil",
        "evilid= evilname=blockedevil",
        "evilid=6evilname=blockedevil",
        "evilid=_evilname=blockedevil",
        "evilid=evilname=blockedevil",
        "=id=evilevilname=blockedevil",
        "eVilid=evilevilname=blockedevil",
        "EVILid=evilevilname=blockedevil",
        "ev_ilid=evilevilname=blockedevil",
        "ev ilid=evilevilname=blockedevil",
        "ev4ilid=evilevilname=blockedevil",
        "eid=evilevilname=blockedevil",
        " id=evilevilname=blockedevil",
        "6id=evilevilname=blockedevil",
        "_id=evilevilname=blockedevil",
        "id=evilevilname=blockedevil",
        "id=evilname=blocked",
        "evilid=evilevilname=blockedevil"
      ]
    },
    {
      "regex": "https://gist\\.github\\.com/(?:(?:[^\\/]+/.+)|\\d+)\\.js",
      "exceptionStackTrace": null,
      "matches": [
        "https://gist.github.com/00.js",
        "https://gist.github.com/.js",
        "https://gist.github.com/evil/:.js",
        "https://gist.github.com/evil//.js",
        "https://gist.github.com/evil/..js",
        "https://gist.github.com/evil/eVil.js",
        "https://gist.github.com/evil/EVIL.js",
        "https://gist.github.com/evil/ev_il.js",
        "https://gist.github.com/evil/ev il.js",
        "https://gist.github.com/evil/ev4il.js",
        "https://gist.github.com/evil/e.js",
        "https://gist.github.com/evil/ .js",
        "https://gist.github.com/evil/6.js",
        "https://gist.github.com/evil/_.js",
        "https://gist.github.com/evil/.js",
        "https://gist.github.com/:/evil.js",
        "https://gist.github.com///evil.js",
        "https://gist.github.com/./evil.js",
        "https://gist.github.com/eVil/evil.js",
        "https://gist.github.com/EVIL/evil.js",
        "https://gist.github.com/ev_il/evil.js",
        "https://gist.github.com/ev il/evil.js",
        "https://gist.github.com/ev4il/evil.js",
        "https://gist.github.com/e/evil.js",
        "https://gist.github.com/ /evil.js",
        "https://gist.github.com/6/evil.js",
        "https://gist.github.com/_/evil.js",
        "https://gist.github.com//evil.js",
        "https://gist.github.com/0.js",
        "https://gist.github.com/evil/evil.js"
      ]
    },
    {
      "regex": "\\s+v\\.?\\s+",
      "exceptionStackTrace": null,
      "matches": [" v.  ", " v.", " v.. ", "  v. ", "v. ", " v ", " v. "]
    },
    {
      "regex": "-{2,}(.*)",
      "exceptionStackTrace": null,
      "matches": [
        "---",
        "--eVil",
        "--EVIL",
        "--ev_il",
        "--ev il",
        "--ev4il",
        "--e",
        "-- ",
        "--6",
        "--_",
        "-evil",
        "--",
        "--evil"
      ]
    },
    {
      "regex": "[\\;\\\"\\'\\)]$|--$",
      "exceptionStackTrace": null,
      "matches": [";", "'", "\"", "--", ")"]
    },
    {
      "regex": "^\\{\\s+\"",
      "exceptionStackTrace": null,
      "matches": ["{  \"", "{\"", "{ \""]
    },
    {
      "regex": "<br (.*?)>",
      "exceptionStackTrace": null,
      "matches": [
        "<br >>",
        "<br <>",
        "<br eVil>",
        "<br EVIL>",
        "<br ev_il>",
        "<br ev il>",
        "<br ev4il>",
        "<br e>",
        "<br  >",
        "<br 6>",
        "<br _>",
        "<br >",
        "<br evil>"
      ]
    },
    {
      "regex": "Missing source file `other.c' when parsing Foo#foo",
      "exceptionStackTrace": null,
      "matches": [
        "Missing source file `other`c' when parsing Foo#foo",
        "Missing source file `otherAc' when parsing Foo#foo",
        "Missing source file `other0c' when parsing Foo#foo",
        "Missing source file `other'c' when parsing Foo#foo",
        "Missing source file `other#c' when parsing Foo#foo",
        "Missing source file `other c' when parsing Foo#foo",
        "Missing source file `otherac' when parsing Foo#foo"
      ]
    },
    {
      "regex": "^(.*?)(:\\d+:(\\d+:)? (warning|error):)",
      "exceptionStackTrace": null,
      "matches": [
        "evil:0:0:0: warning:",
        "evil:0: warning:",
        "evil:0:00: warning:",
        "evil:0:: warning:",
        "evil:00:0: warning:",
        "evil::0: warning:",
        "::0:0: warning:",
        "eVil:0:0: warning:",
        "EVIL:0:0: warning:",
        "ev_il:0:0: warning:",
        "ev il:0:0: warning:",
        "ev4il:0:0: warning:",
        "e:0:0: warning:",
        " :0:0: warning:",
        "6:0:0: warning:",
        "_:0:0: warning:",
        ":0:0: warning:",
        ":0: error:",
        ":0: warning:",
        "evil:0:0: error:",
        "evil:0:0: warning:"
      ]
    },
    {
      "regex": "@\\[url=([^\\]]*)\\]",
      "exceptionStackTrace": null,
      "matches": [
        "@[url=]]",
        "@[url=[]",
        "@[url=@]",
        "@[url==]",
        "@[url=eVil]",
        "@[url=EVIL]",
        "@[url=ev_il]",
        "@[url=ev il]",
        "@[url=ev4il]",
        "@[url=e]",
        "@[url= ]",
        "@[url=6]",
        "@[url=_]",
        "@[url=]",
        "@[url=evil]"
      ]
    },
    {
      "regex": "^([\\d]+\\.[\\d]+\\.[\\d]+)(.+)$",
      "exceptionStackTrace": null,
      "matches": [
        "0.0.0.",
        "0.0.0eVil",
        "0.0.0EVIL",
        "0.0.0ev_il",
        "0.0.0ev il",
        "0.0.0ev4il",
        "0.0.0e",
        "0.0.0 ",
        "0.0.06",
        "0.0.0_",
        "0.0.0",
        "0.0.00evil",
        "0.0.evil",
        "0.00.0evil",
        "0..0evil",
        "00.0.0evil",
        ".0.0evil",
        "0.0.0evil"
      ]
    },
    {
      "regex": "#(monkey)man(.*)$",
      "exceptionStackTrace": null,
      "matches": [
        "#monkeyman#",
        "#monkeymaneVil",
        "#monkeymanEVIL",
        "#monkeymanev_il",
        "#monkeymanev il",
        "#monkeymanev4il",
        "#monkeymane",
        "#monkeyman ",
        "#monkeyman6",
        "#monkeyman_",
        "#monkeyman",
        "#monkeymanevil"
      ]
    },
    {
      "regex": "([\\w]*mesa(gl)?.*)",
      "exceptionStackTrace": null,
      "matches": [
        "evilmesagleVil",
        "evilmesaglEVIL",
        "evilmesaglev_il",
        "evilmesaglev il",
        "evilmesaglev4il",
        "evilmesagle",
        "evilmesagl ",
        "evilmesagl6",
        "evilmesagl_",
        "evilmesagl",
        "evilmesaglglevil",
        "evilmesaevil",
        "eVilmesaglevil",
        "EVILmesaglevil",
        "ev_ilmesaglevil",
        "ev ilmesaglevil",
        "ev4ilmesaglevil",
        "emesaglevil",
        " mesaglevil",
        "6mesaglevil",
        "_mesaglevil",
        "mesaglevil",
        "mesa",
        "evilmesaglevil"
      ]
    },
    {
      "regex": "This module template is out of date. Run `pdk convert` to make it compatible with your version of PDK.",
      "exceptionStackTrace": null,
      "matches": [
        "This module template is out of datea Run `pdk convert` to make it compatible with your version of PDK`",
        "This module template is out of datea Run `pdk convert` to make it compatible with your version of PDKA",
        "This module template is out of datea Run `pdk convert` to make it compatible with your version of PDK0",
        "This module template is out of datea Run `pdk convert` to make it compatible with your version of PDK ",
        "This module template is out of date` Run `pdk convert` to make it compatible with your version of PDKa",
        "This module template is out of dateA Run `pdk convert` to make it compatible with your version of PDKa",
        "This module template is out of date0 Run `pdk convert` to make it compatible with your version of PDKa",
        "This module template is out of date  Run `pdk convert` to make it compatible with your version of PDKa",
        "This module template is out of datea Run `pdk convert` to make it compatible with your version of PDKa"
      ]
    },
    {
      "regex": "^\\s*?\\n\\s*|\\s*?\\n\\s*$",
      "exceptionStackTrace": {
        "exceptionThrownBy": "EGRET",
        "exception": "ERROR (unsupported): contains unsupported character \\n"
      },
      "matches": []
    },
    {
      "regex": "failed to request identity",
      "exceptionStackTrace": null,
      "matches": ["failed to request identity"]
    },
    {
      "regex": "[^IVXLCDM]",
      "exceptionStackTrace": null,
      "matches": ["_", "X", "V", "M", "L", "I", "D", "C", "A", "0", " ", "a"]
    },
    {
      "regex": "<meta\\shttp-equiv=\"content-language\"\\scontent=\"(?P<language>\\S+)\"\\s\\/>",
      "exceptionStackTrace": null,
      "matches": [
        "<meta http-equiv=\"content-language\" content=\">\" />",
        "<meta http-equiv=\"content-language\" content=\"=\" />",
        "<meta http-equiv=\"content-language\" content=\"<\" />",
        "<meta http-equiv=\"content-language\" content=\"/\" />",
        "<meta http-equiv=\"content-language\" content=\"-\" />",
        "<meta http-equiv=\"content-language\" content=\"\"\" />",
        "<meta http-equiv=\"content-language\" content=\"eVil\" />",
        "<meta http-equiv=\"content-language\" content=\"EVIL\" />",
        "<meta http-equiv=\"content-language\" content=\"ev_il\" />",
        "<meta http-equiv=\"content-language\" content=\"ev il\" />",
        "<meta http-equiv=\"content-language\" content=\"ev4il\" />",
        "<meta http-equiv=\"content-language\" content=\"e\" />",
        "<meta http-equiv=\"content-language\" content=\" \" />",
        "<meta http-equiv=\"content-language\" content=\"6\" />",
        "<meta http-equiv=\"content-language\" content=\"_\" />",
        "<meta http-equiv=\"content-language\" content=\"\" />",
        "<meta http-equiv=\"content-language\" content=\"evil\" />"
      ]
    },
    {
      "regex": "\\\\'\\{E\\}",
      "exceptionStackTrace": null,
      "matches": ["\\'{E}"]
    },
    {
      "regex": "universal\\/(.+)",
      "exceptionStackTrace": null,
      "matches": [
        "universal//",
        "universal/eVil",
        "universal/EVIL",
        "universal/ev_il",
        "universal/ev il",
        "universal/ev4il",
        "universal/e",
        "universal/ ",
        "universal/6",
        "universal/_",
        "universal/",
        "universal/evil"
      ]
    },
    {
      "regex": "^([\\w-]+) +Check",
      "exceptionStackTrace": null,
      "matches": [
        "evil  Check",
        "evilCheck",
        "- Check",
        "eVil Check",
        "EVIL Check",
        "ev_il Check",
        "ev il Check",
        "ev4il Check",
        "e Check",
        "  Check",
        "6 Check",
        "_ Check",
        " Check",
        "evil Check"
      ]
    },
    {
      "regex": "(.+)ch$",
      "exceptionStackTrace": null,
      "matches": [
        "eVilch",
        "EVILch",
        "ev_ilch",
        "ev ilch",
        "ev4ilch",
        "ech",
        " ch",
        "6ch",
        "_ch",
        "ch",
        "evilch"
      ]
    },
    {
      "regex": "%PLACEHOLDER_CLOSING_BRACKET%",
      "exceptionStackTrace": null,
      "matches": ["%PLACEHOLDER_CLOSING_BRACKET%"]
    },
    {
      "regex": "mspec/lib",
      "exceptionStackTrace": null,
      "matches": ["mspec/lib"]
    },
    { "regex": "gd", "exceptionStackTrace": null, "matches": ["gd"] },
    {
      "regex": "\\*\\/\\z",
      "exceptionStackTrace": {
        "exceptionThrownBy": "Python",
        "exception": "bad escape \\z"
      },
      "matches": []
    },
    {
      "regex": "\\w{7}US\\d*",
      "exceptionStackTrace": null,
      "matches": [
        "aaaaaaaUS00",
        "aaaaaaaaUS0",
        "aaaaaaUS0",
        "_aaaaaaUS0",
        "AaaaaaaUS0",
        "0aaaaaaUS0",
        "aaaaaaaUS",
        "aaaaaaaUS0"
      ]
    },
    { "regex": "(?!.)\\s", "exceptionStackTrace": null, "matches": [" "] },
    {
      "regex": "^\\d{4}\\.[a-zA-Z]$",
      "exceptionStackTrace": null,
      "matches": ["0000.a", "00000.A", "000.A", "0000.A"]
    },
    {
      "regex": "^log.build-",
      "exceptionStackTrace": null,
      "matches": [
        "logAbuild-",
        "log0build-",
        "log-build-",
        "log build-",
        "logabuild-"
      ]
    },
    { "regex": "##yv17##", "exceptionStackTrace": null, "matches": ["##yv17##"] },
    {
      "regex": "^https?:\\/\\/[a-z0-9\\-\\.]+.*",
      "exceptionStackTrace": null,
      "matches": [
        "https://evil:",
        "https://evil/",
        "https://evil.",
        "https://evil-",
        "https://evileVil",
        "https://evilEVIL",
        "https://evilev_il",
        "https://evilev il",
        "https://evilev4il",
        "https://evile",
        "https://evil ",
        "https://evil6",
        "https://evil_",
        "https://:evil",
        "https:///evil",
        "https://.evil",
        "https://-evil",
        "https://eVilevil",
        "https://EVILevil",
        "https://ev_ilevil",
        "https://ev ilevil",
        "https://ev4ilevil",
        "https://eevil",
        "https:// evil",
        "https://6evil",
        "https://_evil",
        "https://evil",
        "httpss://evilevil",
        "http://evilevil",
        "http://evil",
        "https://evilevil"
      ]
    }
  ]
  