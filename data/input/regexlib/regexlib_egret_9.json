[{"regex": "^5[1-5][0-9]{14}$\n\n# First character is 5\n# Second character is 1-5\n# Last 14 characters 0-9", "exceptionStackTrace": null, "matches": [], "nonMatches": ["51000000000000000\n\n# First character is 5\n# Second character is 1-5\n# Last 14 characters 0-9", "510000000000000\n\n# First character is 5\n# Second character is 1-5\n# Last 14 characters 0-9", "5000000000000000\n\n# First character is 5\n# Second character is 1-5\n# Last 14 characters 0-9", "5100000000000000\n\n# First character is 5\n# Second character is 1-5\n# Last 14 characters 0-9"]}, {"regex": "^[A-CEGHJ-PR-TW-Z]{1}[A-CEGHJ-NPR-TW-Z]{1}[0-9]{6}[A-DFM]{0,1}$", "exceptionStackTrace": null, "matches": ["HP000000F", "HP000000A", "HW000000M", "HR000000M", "HJ000000M", "HH000000M", "HG000000M", "HE000000M", "HA000000M", "WP000000M", "RP000000M", "JP000000M", "GP000000M", "EP000000M", "AP000000M", "HP000000", "HP000000M"], "nonMatches": ["HP000000MM", "HP000000E", "HP0000000M", "HP00000M", "HPP000000M", "H000000M", "HD000000M", "HHP000000M", "P000000M", "DP000000M"]}, {"regex": "(25[0-5]|2[0-4][0-9]|[1][0-9]?[0-9]?|[1-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[1][0-9]?[0-9]?|[1-9][0-9]?|[0])\\.(25[0-5]|2[0-4][0-9]|[1][0-9]?[0-9]?|[1-9][0-9]?|[0])\\.(25[0-5]|2[0-4][0-9]|[1][0-9]?[0-9]?|[1-9][0-9]?)", "exceptionStackTrace": null, "matches": ["250.250.250.1000", "250.250.250.256", "256.250.250.250", "1.250.250.250", "250.1.250.250", "250.250.1.250", "250.250.250.1", "10.250.250.250", "100.250.250.250", "200.250.250.250", "250.0.250.250", "250.10.250.250", "250.100.250.250", "250.200.250.250", "250.250.0.250", "250.250.10.250", "250.250.100.250", "250.250.200.250", "250.250.250.10", "250.250.250.100", "250.250.250.200", "250.250.250.250"], "nonMatches": ["00.250.250.250", "1000.250.250.250", "250.00.250.250", "250.1000.250.250", "250.250.00.250", "250.250.1000.250", "250.250.250.00", "250.250.256.250", "250.256.250.250"]}, {"regex": "^((.)(?!\\2{2,}))+$", "exceptionStackTrace": null, "matches": ["aa", "_", "A", "0", " ", "a"], "nonMatches": [""]}, {"regex": "\\|(http.*)\\|(.*)$/ig", "exceptionStackTrace": null, "matches": [], "nonMatches": ["|httpevil||/ig", "|httpevil|//ig", "|httpevil|eVil/ig", "|httpevil|EVIL/ig", "|httpevil|ev_il/ig", "|httpevil|ev il/ig", "|httpevil|ev4il/ig", "|httpevil|e/ig", "|httpevil| /ig", "|httpevil|6/ig", "|httpevil|_/ig", "|httpevil|/ig", "|http||evil/ig", "|http/|evil/ig", "|httpeVil|evil/ig", "|httpEVIL|evil/ig", "|httpev_il|evil/ig", "|httpev il|evil/ig", "|httpev4il|evil/ig", "|httpe|evil/ig", "|http |evil/ig", "|http6|evil/ig", "|http_|evil/ig", "|http|evil/ig", "|http|/ig", "|httpevil|evil/ig"]}, {"regex": "^\\$(\\d{1,3}(\\,\\d{3})*|(\\d+))(\\.\\d{2})?$", "exceptionStackTrace": null, "matches": ["$00.00", "$0,000", "$0,000,000.00", "$000,000.00", "$0", "$0.00", "$0,000.00"], "nonMatches": ["$.00", "$0,000.00.00", "$0,000.000", "$0,000.0", "$0,0000.00", "$0,00.00", "$0000,000.00", "$,000.00"]}, {"regex": "[\\d+]{10}\\@[\\w]+\\.?[\\w]+?\\.?[\\w]+?\\.?[\\w+]{2,4}/i", "exceptionStackTrace": null, "matches": ["++++++++++@evil.evil.evil.++++/i", "++++++++++@evil.evil.evil.a+/i", "++++++++++@evil.evil.evil._+/i", "++++++++++@evil.evil.evil.A+/i", "++++++++++@evil.evil.evil.0+/i", "++++++++++@evil.evil.evil++/i", "++++++++++@evil.evil.eVil.++/i", "++++++++++@evil.evil.EVIL.++/i", "++++++++++@evil.evil.ev_il.++/i", "++++++++++@evil.evil.ev4il.++/i", "++++++++++@evil.evil.e.++/i", "++++++++++@evil.evil.6.++/i", "++++++++++@evil.evil._.++/i", "++++++++++@evil.evilevil.++/i", "++++++++++@evil.eVil.evil.++/i", "++++++++++@evil.EVIL.evil.++/i", "++++++++++@evil.ev_il.evil.++/i", "++++++++++@evil.ev4il.evil.++/i", "++++++++++@evil.e.evil.++/i", "++++++++++@evil.6.evil.++/i", "++++++++++@evil._.evil.++/i", "++++++++++@evilevil.evil.++/i", "++++++++++@eVil.evil.evil.++/i", "++++++++++@EVIL.evil.evil.++/i", "++++++++++@ev_il.evil.evil.++/i", "++++++++++@ev4il.evil.evil.++/i", "++++++++++@e.evil.evil.++/i", "++++++++++@6.evil.evil.++/i", "++++++++++@_.evil.evil.++/i", "+++++++++++@evil.evil.evil.++/i", "0+++++++++@evil.evil.evil.++/i", "++++++++++@evilevilevil++/i", "++++++++++@evil.evil.evil.++/i"], "nonMatches": ["++++++++++@evil.evil.evil.+++++/i", "++++++++++@evil.evil.evil.+/i", "++++++++++@evil.evil.evil..++/i", "++++++++++@evil.evil.ev il.++/i", "++++++++++@evil.evil. .++/i", "++++++++++@evil.evil..++/i", "++++++++++@evil.evil..evil.++/i", "++++++++++@evil.ev il.evil.++/i", "++++++++++@evil. .evil.++/i", "++++++++++@evil..evil.++/i", "++++++++++@evil..evil.evil.++/i", "++++++++++@ev il.evil.evil.++/i", "++++++++++@ .evil.evil.++/i", "++++++++++@.evil.evil.++/i", "+++++++++@evil.evil.evil.++/i"]}, {"regex": "^\\$YYYY\\$\\$MM\\$\\$DD\\$$", "exceptionStackTrace": null, "matches": ["$YYYY$$MM$$DD$"], "nonMatches": []}, {"regex": "^(\\w+)s?\\:\\/\\/(\\w+)?(\\.)?(\\w+)?\\.(\\w+)$", "exceptionStackTrace": null, "matches": ["evils://evil.evil.eVil", "evils://evil.evil.EVIL", "evils://evil.evil.ev_il", "evils://evil.evil.ev4il", "evils://evil.evil.e", "evils://evil.evil.6", "evils://evil.evil._", "evils://evil.evilevil.evil", "evils://evil.eVil.evil", "evils://evil.EVIL.evil", "evils://evil.ev_il.evil", "evils://evil.ev4il.evil", "evils://evil.e.evil", "evils://evil.6.evil", "evils://evil._.evil", "evils://evil..evil", "evils://evilevil.evil", "evils://evilevil.evil.evil", "evils://eVil.evil.evil", "evils://EVIL.evil.evil", "evils://ev_il.evil.evil", "evils://ev4il.evil.evil", "evils://e.evil.evil", "evils://6.evil.evil", "evils://_.evil.evil", "evils://.evil.evil", "evilss://evil.evil.evil", "evil://evil.evil.evil", "eVils://evil.evil.evil", "EVILs://evil.evil.evil", "ev_ils://evil.evil.evil", "ev4ils://evil.evil.evil", "es://evil.evil.evil", "6s://evil.evil.evil", "_s://evil.evil.evil", "s://evil.evil.evil", "evil://.evil", "evils://evil.evil.evil"], "nonMatches": ["evils://evil.evil.ev il", "evils://evil.evil. ", "evils://evil.evil.", "evils://evil.ev il.evil", "evils://evil. .evil", "evils://evil..evil.evil", "evils://ev il.evil.evil", "evils:// .evil.evil", "ev ils://evil.evil.evil", " s://evil.evil.evil"]}, {"regex": "^(\\w+)s?[:]\\/\\/(\\w+)?[.]?(\\w+)[.](\\w+)$", "exceptionStackTrace": null, "matches": ["evils://evil.evil.eVil", "evils://evil.evil.EVIL", "evils://evil.evil.ev_il", "evils://evil.evil.ev4il", "evils://evil.evil.e", "evils://evil.evil.6", "evils://evil.evil._", "evils://evil.eVil.evil", "evils://evil.EVIL.evil", "evils://evil.ev_il.evil", "evils://evil.ev4il.evil", "evils://evil.e.evil", "evils://evil.6.evil", "evils://evil._.evil", "evils://evilevil.evil", "evils://evilevil.evil.evil", "evils://eVil.evil.evil", "evils://EVIL.evil.evil", "evils://ev_il.evil.evil", "evils://ev4il.evil.evil", "evils://e.evil.evil", "evils://6.evil.evil", "evils://_.evil.evil", "evils://.evil.evil", "evilss://evil.evil.evil", "evil://evil.evil.evil", "eVils://evil.evil.evil", "EVILs://evil.evil.evil", "ev_ils://evil.evil.evil", "ev4ils://evil.evil.evil", "es://evil.evil.evil", "6s://evil.evil.evil", "_s://evil.evil.evil", "s://evil.evil.evil", "evil://evil.evil", "evils://evil.evil.evil"], "nonMatches": ["evils://evil.evil.ev il", "evils://evil.evil. ", "evils://evil.evil.", "evils://evil.ev il.evil", "evils://evil. .evil", "evils://evil..evil", "evils://evil..evil.evil", "evils://ev il.evil.evil", "evils:// .evil.evil", "ev ils://evil.evil.evil", " s://evil.evil.evil"]}, {"regex": "Dr[.]?|Phd[.]?|MBA", "exceptionStackTrace": null, "matches": ["Phd..", "Dr..", "Phd", "Dr", "MBA", "Phd.", "Dr."], "nonMatches": []}, {"regex": "[\\w]+\\@[\\w]+\\.?[\\w]+?\\.?[\\w]+?\\.?[\\w+]{2,4}", "exceptionStackTrace": null, "matches": ["evil@evil.evil.evil.+++++", "evil@evil.evil.evil.++++", "evil@evil.evil.evil.+", "evil@evil.evil.evil.a+", "evil@evil.evil.evil._+", "evil@evil.evil.evil.A+", "evil@evil.evil.evil.0+", "evil@evil.evil.evil..++", "evil@evil.evil.evil++", "evil@evil.evil.eVil.++", "evil@evil.evil.EVIL.++", "evil@evil.evil.ev_il.++", "evil@evil.evil.ev il.++", "evil@evil.evil.ev4il.++", "evil@evil.evil.e.++", "evil@evil.evil. .++", "evil@evil.evil.6.++", "evil@evil.evil._.++", "evil@evil.evil..++", "evil@evil.evil..evil.++", "evil@evil.evilevil.++", "evil@evil.eVil.evil.++", "evil@evil.EVIL.evil.++", "evil@evil.ev_il.evil.++", "evil@evil.ev il.evil.++", "evil@evil.ev4il.evil.++", "evil@evil.e.evil.++", "evil@evil.6.evil.++", "evil@evil._.evil.++", "evil@evilevil.evil.++", "evil@eVil.evil.evil.++", "evil@EVIL.evil.evil.++", "evil@ev_il.evil.evil.++", "evil@ev4il.evil.evil.++", "evil@e.evil.evil.++", "evil@6.evil.evil.++", "evil@_.evil.evil.++", "eVil@evil.evil.evil.++", "EVIL@evil.evil.evil.++", "ev_il@evil.evil.evil.++", "ev il@evil.evil.evil.++", "ev4il@evil.evil.evil.++", "e@evil.evil.evil.++", "6@evil.evil.evil.++", "_@evil.evil.evil.++", "evil@evilevilevil++", "evil@evil.evil.evil.++"], "nonMatches": ["evil@evil. .evil.++", "evil@evil..evil.++", "evil@evil..evil.evil.++", "evil@ev il.evil.evil.++", "evil@ .evil.evil.++", "evil@.evil.evil.++", " @evil.evil.evil.++", "@evil.evil.evil.++"]}, {"regex": "(\\d+)?-?(\\d+)-(\\d+)", "exceptionStackTrace": null, "matches": ["0-0-00", "0-0-", "0-00-0", "0--0-0", "00-0", "00-0-0", "-0-0", "0-0", "0-0-0"], "nonMatches": ["0--0"]}, {"regex": "((0[1-9]|1[0-9]|2[0-9]|3[01])\\/(?:0[13578]|1[02])\\/(?:1[2-9]\\d+|2[0-9]\\d+))|((0[1-9]|1[0-9]|2[0-8])\\/(?:02)\\/(?:1[2-9]\\d+|2[0-9]\\d+))|(29\\/(?:02)\\/((1200|1600|2000|2400)|(1[6-9]|2[0-9])((0[48]|1[26]|2[048]|3[26]|4[048]|5[26]|6[048]|7[26]|8[048]|9[26]))))|((0[1-9]|1[0-9]|2[0-9]|30)\\/(?:0[469]|11)\\/(?:1[2-9]\\d+|2[0-9]\\d+))", "exceptionStackTrace": null, "matches": ["01/09/2000", "01/09/1200", "01/06/120", "01/04/120", "29/02/1692", "29/02/1684", "29/02/1680", "29/02/1672", "29/02/1664", "29/02/1660", "29/02/1652", "29/02/1644", "29/02/1640", "29/02/1632", "29/02/1624", "29/02/1620", "29/02/1612", "29/02/1604", "01/02/2000", "01/02/1200", "30/08/120", "01/10/120", "01/08/2000", "01/08/1200", "01/07/120", "01/05/120", "01/03/120", "01/01/120", "30/09/120", "20/09/120", "10/09/120", "01/11/120", "01/09/200", "01/09/120", "29/02/2008", "29/02/1696", "29/02/1688", "29/02/1676", "29/02/1668", "29/02/1656", "29/02/1648", "29/02/1636", "29/02/1628", "29/02/1616", "29/02/1608", "29/02/2400", "29/02/2000", "29/02/1600", "29/02/1200", "20/02/120", "10/02/120", "01/02/200", "01/02/120", "31/08/120", "20/08/120", "10/08/120", "01/12/120", "01/08/200", "01/08/120"], "nonMatches": ["01/09/20", "01/09/12", "01/09/100", "00/09/120", "29/02/1690", "29/02/1681", "29/02/1670", "29/02/1661", "29/02/1650", "29/02/1641", "29/02/1630", "29/02/1621", "29/02/1610", "29/02/1008", "29/02/120", "01/02/20", "01/02/12", "01/02/100", "00/02/120", "32/08/120", "01/08/20", "01/08/12", "01/08/100", "01/00/120", "00/08/120"]}, {"regex": "^(\\s*\\d\\s*){11}$", "exceptionStackTrace": null, "matches": [" 0   0  0  0  0  0  0  0  0  0  0 ", " 0 0  0  0  0  0  0  0  0  0  0 ", "  0  0  0  0  0  0  0  0  0  0  0 ", "0  0  0  0  0  0  0  0  0  0  0 ", "0 0  0  0  0  0  0  0  0  0  0 ", " 0  0  0  0  0  0  0  0  0  0  0 "], "nonMatches": [" 0  0  0  0  0  0  0  0  0  0  0  0 ", " 0  0  0  0  0  0  0  0  0  0 "]}, {"regex": "^\\d{3}\\s?\\d{3}\\s?\\d{3}$", "exceptionStackTrace": null, "matches": ["000 000000", "000000 000", "000000000", "000 000 000"], "nonMatches": ["000 000 0000", "000 000 00", "000 000  000", "000 0000 000", "000 00 000", "000  000 000", "0000 000 000", "00 000 000"]}, {"regex": "<(?<tag>\\w*|\\w*\\.+\\w*)>+((.|[\\n\\t\\f\\r\\s])*?)<\\/\\k<tag>>", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<t"}, "matches": []}, {"regex": "^(((0?[1-9]|[12]\\d|3[01])\\.(0[13578]|[13578]|1[02])\\.((1[6-9]|[2-9]\\d)\\d{2}))|((0?[1-9]|[12]\\d|30)\\.(0[13456789]|[13456789]|1[012])\\.((1[6-9]|[2-9]\\d)\\d{2}))|((0?[1-9]|1\\d|2[0-8])\\.0?2\\.((1[6-9]|[2-9]\\d)\\d{2}))|(29\\.0?2\\.((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))$", "exceptionStackTrace": null, "matches": ["29.02.9200", "29.02.7600", "29.02.5600", "29.02.3600", "29.02.8400", "29.02.8000", "29.02.6800", "29.02.4800", "29.02.2800", "29.02.1692", "29.02.1676", "29.02.1656", "29.02.1636", "29.02.1616", "29.02.1684", "29.02.1680", "29.02.1668", "29.02.1648", "29.02.1628", "29.02.1604", "01.2.1600", "1.02.1600", "10.09.1600", "01.6.1600", "01.4.1600", "01.06.1600", "01.04.1600", "30.08.1600", "10.08.1600", "01.11.1600", "01.10.1600", "01.7.1600", "01.5.1600", "01.3.1600", "01.1.1600", "01.07.1600", "01.05.1600", "01.03.1600", "01.01.1600", "29.2.9600", "29.2.8800", "29.2.1600", "29.2.2008", "29.2.1696", "29.2.1688", "29.2.1608", "20.2.1600", "10.2.1600", "1.2.2000", "1.2.1600", "1.9.1600", "1.09.2000", "1.09.1600", "1.12.1600", "1.8.1600", "1.08.2000", "1.08.1600", "29.02.9600", "29.02.8800", "29.02.1600", "29.02.2008", "29.02.1696", "29.02.1688", "29.02.1608", "20.02.1600", "10.02.1600", "01.02.2000", "01.02.1600", "30.09.1600", "20.09.1600", "01.9.1600", "01.09.2000", "01.09.1600", "31.08.1600", "20.08.1600", "01.12.1600", "01.8.1600", "01.08.2000", "01.08.1600"], "nonMatches": ["29.02.9000", "29.02.0600", "29.02.8100", "29.02.0800", "29.02.0008", "29.02.1690", "29.02.1606", "29.02.1681", "29.02.1008", "29.002.1608", "01.02.0000", "01.02.16000", "01.02.160", "01.02.1000", "01.002.1600", "00.02.1600", "001.02.1600", "01.13.1600", "01.09.0000", "01.09.16000", "01.09.160", "01.09.1000", "00.09.1600", "001.09.1600", "32.08.1600", "01.0.1600", "01.08.0000", "01.08.16000", "01.08.160", "01.08.1000", "01.00.1600", "00.08.1600", "001.08.1600"]}, {"regex": "^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[1,3-9]|1[0-2])\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)0?2\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$", "exceptionStackTrace": null, "matches": ["01/01/00", "01/1/1600", "1/01/1600", "29/02/9200", "29/02/7600", "29/02/5600", "29/02/3600", "29/02/8400", "29/02/8000", "29/02/6800", "29/02/4800", "29/02/2800", "29/02/1692", "29/02/1676", "29/02/1656", "29/02/1636", "29/02/1616", "29/02/1684", "29/02/1680", "29/02/1668", "29/02/1648", "29/02/1628", "29/02/1604", "29/02/08", "29/2/1608", "29/03/1600", "29/01/1600", "29/,/1600", "31/10/1600", "31/08/00", "31/07/1600", "31/05/1600", "31/03/1600", "31/01/1600", "31/8/1600", "20/1/00", "10/1/00", "1/10/00", "1/1/00", "29/2/9600", "29/2/8800", "29/2/1600", "29/2/96", "29/2/88", "29/2/08", "30/,/00", "29/10/00", "29/,/00", "31/12/00", "31/8/00", "20/01/1600", "10/01/1600", "01/10/1600", "01/01/2000", "01/01/1600", "29/02/9600", "29/02/8800", "29/02/1600", "29/02/2008", "29/02/1696", "29/02/1688", "29/02/1608", "30/0,/1600", "29/10/1600", "29/0,/1600", "31/12/1600", "31/08/2000", "31/08/1600"], "nonMatches": ["01/13/1600", "01/01/0000", "01/01/16000", "01/01/160", "01/01/161600", "01/01/1000", "01/00/1600", "01/001/1600", "00/01/1600", "001/01/1600", "29/02/9000", "29/02/0600", "29/02/8100", "29/02/0800", "29/02/0008", "29/02/1690", "29/02/1606", "29/02/1681", "29/02/161608", "29/02/1008", "29/002/1608", "29/13/1600", "29/00/1600", "29/00,/1600", "31/11/1600", "31/08/0000", "31/08/16000", "31/08/160", "31/08/161600", "31/08/1000", "31/00/1600", "31/008/1600", "1.1/00", "1-1/00", "29.2/08", "29-2/08", "29.,/00", "29-,/00", "31.8/00", "31-8/00", "01.01/1600", "01-01/1600", "29.02/1608", "29-02/1608", "29.0,/1600", "29-0,/1600", "31.08/1600", "31-08/1600"]}, {"regex": "^((\\d{5}-?\\d{4})|(\\d{5})|([A-Za-z]\\d[A-Za-z]\\s?\\d[A-Za-z]\\d))$", "exceptionStackTrace": null, "matches": ["a0a 0A0", "a0A 0a0", "A0a 0a0", "a0a0a0", "000000000", "a0a 0a0", "00000", "00000-0000"], "nonMatches": ["a0a  0a0", "000000", "0000", "00000-00000", "00000-000", "00000--0000", "000000-0000", "0000-0000"]}, {"regex": "^START(?=(?:.(?!END|START))*MIDDLE).*?END[^\\n]+", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\n"}, "matches": [], "nonMatches": []}, {"regex": "iihlhlkjhn", "exceptionStackTrace": null, "matches": ["iihlhlkjhn"], "nonMatches": []}, {"regex": "\\{CHBLOCK\\:(.*?\\})", "exceptionStackTrace": null, "matches": ["{CHBLOCK:}}", "{CHBLOCK:{}", "{CHBLOCK::}", "{CHBLOCK:eVil}", "{CHBLOCK:EVIL}", "{CHBLOCK:ev_il}", "{CHBLOCK:ev il}", "{CHBLOCK:ev4il}", "{CHBLOCK:e}", "{CHBLOCK: }", "{CHBLOCK:6}", "{CHBLOCK:_}", "{CHBLOCK:}", "{CHBLOCK:evil}"], "nonMatches": []}, {"regex": "\\b(?:1[0-2]?|[2-9])\\b", "exceptionStackTrace": null, "matches": ["1", "2", "10"], "nonMatches": ["0", "100", "13"]}, {"regex": "gvdrgvdg", "exceptionStackTrace": null, "matches": ["gvdrgvdg"], "nonMatches": []}, {"regex": "fsefrsd", "exceptionStackTrace": null, "matches": ["fsefrsd"], "nonMatches": []}, {"regex": "\\d{2,4}", "exceptionStackTrace": null, "matches": ["00000", "0000", "00"], "nonMatches": ["0"]}, {"regex": "^([1-9]+[0-9]* | [1-9])$", "exceptionStackTrace": null, "matches": ["100 ", "110 ", "1 ", " 1", "10 "], "nonMatches": [" 0", "0 ", "00 "]}, {"regex": "^[a-zA-Z_:]+[a-zA-Z_:\\-\\.\\d]*$", "exceptionStackTrace": null, "matches": ["evil:", "evil.", "evil-", "evileVil", "evilEVIL", "evilev_il", "evilev4il", "evile", "evil6", "evil_", ":evil", "eVilevil", "EVILevil", "ev_ilevil", "ev4ilevil", "eevil", "_evil", "evil", "evilevil"], "nonMatches": ["evilev il", "evil ", ".evil", "-evil", "ev ilevil", " evil", "6evil"]}, {"regex": "^[0-9]{2}-[0-9]{8}-[0-9]$", "exceptionStackTrace": null, "matches": ["00-00000000-0"], "nonMatches": ["00-000000000-0", "00-0000000-0", "000-00000000-0", "0-00000000-0"]}, {"regex": "^[A-Z]{1,3}\\d{6}$", "exceptionStackTrace": null, "matches": ["AAA000000", "A000000"], "nonMatches": ["A0000000", "A00000", "AAAA000000", "000000"]}, {"regex": "^ *([AaBbCcEeGgHhJjKkLlMmNnPpRrSsTtVvXxYy]\\d[a-zA-Z]) *-* *(\\d[a-zA-Z]\\d) *$|^ *(\\d{5}) *$|^ *(\\d{5}) *-* *(\\d{4}) *$", "exceptionStackTrace": null, "matches": [" 00000 - 0000  ", " 00000 - 0000", " 00000 -  0000 ", " 00000 -0000 ", " 00000 -- 0000 ", " 00000  0000 ", " 00000  - 0000 ", " 00000- 0000 ", "  00000 - 0000 ", "00000 - 0000 ", " 00000  ", " 00000", "  00000 ", "00000 ", " y0A - 0A0  ", " y0A - 0A0", " y0A - 0a0 ", " y0A -  0A0 ", " y0A -0A0 ", " y0A -- 0A0 ", " y0A  0A0 ", " y0A  - 0A0 ", " y0A- 0A0 ", " y0a - 0A0 ", " x0A - 0A0 ", " v0A - 0A0 ", " t0A - 0A0 ", " s0A - 0A0 ", " r0A - 0A0 ", " p0A - 0A0 ", " n0A - 0A0 ", " m0A - 0A0 ", " l0A - 0A0 ", " k0A - 0A0 ", " j0A - 0A0 ", " h0A - 0A0 ", " g0A - 0A0 ", " e0A - 0A0 ", " c0A - 0A0 ", " b0A - 0A0 ", " a0A - 0A0 ", " Y0A - 0A0 ", " X0A - 0A0 ", " V0A - 0A0 ", " T0A - 0A0 ", " S0A - 0A0 ", " R0A - 0A0 ", " P0A - 0A0 ", " N0A - 0A0 ", " M0A - 0A0 ", " L0A - 0A0 ", " K0A - 0A0 ", " J0A - 0A0 ", " H0A - 0A0 ", " G0A - 0A0 ", " E0A - 0A0 ", " C0A - 0A0 ", " B0A - 0A0 ", " A0A - 0A0 ", "  y0A - 0A0 ", "y0A - 0A0 ", "000000000", "00000", "y0A0A0", " 00000 - 0000 ", " 00000 ", " y0A - 0A0 "], "nonMatches": [" 00000 - 00000 ", " 00000 - 000 ", " 000000 - 0000 ", " 0000 - 0000 ", " 000000 ", " 0000 ", " d0A - 0A0 ", " D0A - 0A0 "]}, {"regex": "^\\d{5}-\\d{3}$|^\\d{8}$", "exceptionStackTrace": null, "matches": ["00000000", "00000-000"], "nonMatches": ["000000000", "0000000", "00000-0000", "00000-00", "000000-000", "0000-000"]}, {"regex": "^([A-HJ-PR-Y]{2,2}[056][0-9]\\s?[A-HJ-PR-Y]{3,3})$|^([A-HJ-NP-Y]{1,3}[0-9]{2,3}?\\s[A-Z]{3,3})$|^([A-Z]{1,3}\\s?[0-9]{1,4}([A-Z]{1,1})?)$|^([0-9]{4,4}[A-Z]{1,3})$|^([A-Z]{1,2}\\s?[0-9]{1,4})$|^([A-Z]{2,3}\\s?[0-9]{1,4})$|^([0-9]{1,4}\\s?[A-Z]{2,3})$", "exceptionStackTrace": null, "matches": ["0 AAA", "0000 AA", "AA 0000", "A 0000", "AAA 0", "0000AAA", "A 0000A", "A0A", "AAA 0A", "P000 AAA", "PPP00 AAA", "00 AAA", "J00 AAA", "A00 AAA", "RR60 JRR", "RR60 IRR", "RR60 ARR", "RR50 RRR", "RR10 RRR", "RR00 RRR", "RRR60 RRR", "R60 RRR", "JR60 RRR", "AR60 RRR", "0AA", "AA0", "A0", "RR60RRR", "0 AA", "AA 0", "A 0", "0000A", "A 0A", "P00 AAA", "RR60 RRR"], "nonMatches": ["0 AAAA", "0 A", "0  AA", "00000 AA", " AA", "AA 00000", "AA ", "AA  0", "AAAA 0", "A 00000", "A ", "A  0", " 0", "0000AAAA", "0000", "00000A", "000A", "A 0AA", "A 00000A", "A A", "A  0A", "AAAA 0A", " 0A", "P00 AAAA", "P00 AA", "P0000 AAA", "P0 AAA", "PPPP00 AAA", "I00 AAA", "RR60 RRRR", "RR60 RR", "RR60  RRR", "IR60 RRR"]}, {"regex": "^(\\(?\\+?[0-9]*\\)?)?[0-9_\\- \\(\\)]*$", "exceptionStackTrace": null, "matches": ["(+0)_", "(+0)0", "(+0)-", "(+0)(", "(+0) ", ")", "(+0)))", "(+0)", "(+00))", "(+))", "(0))", "+0))", "", "(+0))"], "nonMatches": ["(+0)(+0))", "(++0))", "((+0))"]}, {"regex": "^[0-9][0-9,]*[0-9]$", "exceptionStackTrace": null, "matches": ["0,,0", "000", "00", "0,0"], "nonMatches": []}, {"regex": "^(19|20)\\d\\d[-/.]([1-9]|0[1-9]|1[012])[- /.]([1-9]|0[1-9]|[12][0-9]|3[01])$", "exceptionStackTrace": null, "matches": ["1900.11.1", "1900.10.1", "1900.1.30", "1900.1.10", "1900.1/1", "1900.1-1", "1900.1 1", "1900/1.1", "1900-1.1", "2000.1.1", "1900.12.1", "1900.01.1", "1900.1.31", "1900.1.20", "1900.1.01", "1900.1.1"], "nonMatches": ["1900.13.1", "1900.00.1", "1900.1.32", "1900.1.00", "1900.1.0", "1900.0.1"]}, {"regex": "\\w+@\\w+\\.\\w+", "exceptionStackTrace": null, "matches": ["evil@evil.eVil", "evil@evil.EVIL", "evil@evil.ev_il", "evil@evil.ev il", "evil@evil.ev4il", "evil@evil.e", "evil@evil.6", "evil@evil._", "evil@eVil.evil", "evil@EVIL.evil", "evil@ev_il.evil", "evil@ev4il.evil", "evil@e.evil", "evil@6.evil", "evil@_.evil", "eVil@evil.evil", "EVIL@evil.evil", "ev_il@evil.evil", "ev il@evil.evil", "ev4il@evil.evil", "e@evil.evil", "6@evil.evil", "_@evil.evil", "evil@evil.evil"], "nonMatches": ["evil@evil. ", "evil@evil.", "evil@ev il.evil", "evil@ .evil", "evil@.evil", " @evil.evil", "@evil.evil"]}, {"regex": "(http://([\\w-]+\\.)|([\\w-]+\\.))+[\\w-]*(/[\\w- ./?%=]*)?", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character range \\w- "}, "matches": []}, {"regex": "(\\/\\*(\\s*|.*?)*\\*\\/)|(--.*)", "exceptionStackTrace": null, "matches": ["--/", "---", "--*", "--eVil", "--EVIL", "--ev_il", "--ev il", "--ev4il", "--e", "-- ", "--6", "--_", "/*/*/", "/*-*/", "/***/", "/*eVil*/", "/*EVIL*/", "/*ev_il*/", "/*ev il*/", "/*ev4il*/", "/*e*/", "/*6*/", "/*_*/", "/*  */", "--", "/**/", "--evil", "/*evil*/", "/* */"], "nonMatches": []}, {"regex": "Write modules for Drupal", "exceptionStackTrace": null, "matches": ["Write modules for Drupal"], "nonMatches": []}, {"regex": "^((\\d?)|(([-+]?\\d+\\.?\\d*)|([-+]?\\d*\\.?\\d+))|(([-+]?\\d+\\.?\\d*\\,\\ ?)*([-+]?\\d+\\.?\\d*))|(([-+]?\\d*\\.?\\d+\\,\\ ?)*([-+]?\\d*\\.?\\d+))|(([-+]?\\d+\\.?\\d*\\,\\ ?)*([-+]?\\d*\\.?\\d+))|(([-+]?\\d*\\.?\\d+\\,\\ ?)*([-+]?\\d+\\.?\\d*)))$", "exceptionStackTrace": null, "matches": ["+0.0, +0.00", "+0.0, +0.", "+0.0, +00", "+0.0, +00.0", "+0.0, +.0", "+0.0, 0.0", "+0.0, -0.0", "+0.0, +0.0, +0.0", "+0.0,+0.0", "+0.00, +0.0", "+0., +0.0", "+00, +0.0", "+00.0, +0.0", "+.0, +0.0", "0.0, +0.0", "-0.0, +0.0", "+0.00", "+0.", "+00", "+00.0", "+.0", "0.0", "-0.0", "00", "", "+0.0, +0.0", "+0.0", "0"], "nonMatches": ["+0.0, +0..0", "+0.0, ++0.0", "+0.0,  +0.0", "+0..0, +0.0", "++0.0, +0.0", "+0..0", "++0.0"]}, {"regex": "(?<user>(?:(?:[^ \\t\\(\\)\\<\\>@,;\\:\\\\\\&quot;\\.\\[\\]\\r\\n]+)|(?:\\&quot;(?:(?:[^\\&quot;\\\\\\r\\n])|(?:\\\\.))*\\&quot;))(?:\\.(?:(?:[^ \\t\\(\\)\\<\\>@,;\\:\\\\\\&quot;\\.\\[\\]\\r\\n]+)|(?:\\&quot;(?:(?:[^\\&quot;\\\\\\r\\n])|(?:\\\\.))*\\&quot;)))*)@(?<domain>(?:(?:[^ \\t\\(\\)\\<\\>@,;\\:\\\\\\&quot;\\.\\[\\]\\r\\n]+)|(?:\\[(?:(?:[^\\[\\]\\\\\\r\\n])|(?:\\\\.))*\\]))(?:\\.(?:(?:[^ \\t\\(\\)\\<\\>@,;\\:\\\\\\&quot;\\.\\[\\]\\r\\n]+)|(?:\\[(?:(?:[^\\[\\]\\\\\\r\\n])|(?:\\\\.))*\\])))*)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<u"}, "matches": []}, {"regex": "^((.){1,}(\\d){1,}(.){0,})$", "exceptionStackTrace": null, "matches": ["a0aa", "a0_", "a0A", "a00", "a0 ", "a00a", "aa0a", "_0a", "A0a", "00a", " 0a", "a0", "a0a"], "nonMatches": ["aa", "0a"]}, {"regex": "^(([+]\\d{2}[ ][1-9]\\d{0,2}[ ])|([0]\\d{1,3}[-]))((\\d{2}([ ]\\d{2}){2})|(\\d{3}([ ]\\d{3})*([ ]\\d{2})+))$", "exceptionStackTrace": null, "matches": ["0000-00 00 00", "+00 10 000 000 00 00", "+00 10 000 000 000 00", "+00 10 000 00", "+00 10 000 00 00", "+00 100 00 00 00", "+00 1 000 00", "+00 1 00 00 00", "00-00 00 00", "+00 10 000 000 00", "+00 10 00 00 00"], "nonMatches": ["00000-00 00 00", "0-00 00 00", "+00 10 000 000", "+00 10 000 000 000", "+00 10 000 000 0", "+00 10 000 0000 00", "+00 10 0000 000 00", "+00 10 00 00 00 00", "+00 10 00 00", "+00 10 00 000 00", "+00 10 00 0 00", "+00 10 0 00 00", "+00 1000 00 00 00", "+00 00 00 00 00", "+000 10 00 00 00", "+0 10 00 00 00"]}, {"regex": "^/{1}(((/{1}\\.{1})?[a-zA-Z0-9 ]+/?)+(\\.{1}[a-zA-Z0-9]{2,4})?)$", "exceptionStackTrace": null, "matches": ["//.evil/.00.00", "//.evil/", "//.evil/.00000", "//.evil/.0000", "//.evil/.0", "//.evil/.a0", "//.evil/.A0", "//.evil/00", "//.evil//.evil/.00", "//.evil//.00", "//.evil.00", "//.eVil/.00", "//.EVIL/.00", "//.ev il/.00", "//.ev4il/.00", "//.e/.00", "//. /.00", "//.6/.00", "/evil/.00", "/evil", "//.evil/.00"], "nonMatches": ["//.evil/..00", "/.00", "//.ev_il/.00", "//._/.00", "//./.00", "//./.evil/.00", "//..evil/.00", "//evil/.00", "///.evil/.00", "/.evil/.00"]}, {"regex": "https?://[\\w./]+\\/[\\w./]+\\.(bmp|png|jpg|gif)", "exceptionStackTrace": null, "matches": ["https://evil//.bmp", "https://evil/..bmp", "https://evil/eVil.bmp", "https://evil/EVIL.bmp", "https://evil/ev_il.bmp", "https://evil/ev4il.bmp", "https://evil/e.bmp", "https://evil/6.bmp", "https://evil/_.bmp", "https:////evil.bmp", "https://./evil.bmp", "https://eVil/evil.bmp", "https://EVIL/evil.bmp", "https://ev_il/evil.bmp", "https://ev4il/evil.bmp", "https://e/evil.bmp", "https://6/evil.bmp", "https://_/evil.bmp", "http://evil/evil.gif", "http://evil/evil.jpg", "http://evil/evil.png", "http://evil/evil.bmp", "https://evil/evil.gif", "https://evil/evil.jpg", "https://evil/evil.png", "https://evil/evil.bmp"], "nonMatches": ["https://evil/:.bmp", "https://evil/ev il.bmp", "https://evil/ .bmp", "https://evil/.bmp", "https://:/evil.bmp", "https://ev il/evil.bmp", "https:// /evil.bmp", "https:///evil.bmp", "httpss://evil/evil.bmp"]}, {"regex": "[0-3]{1}[0-9]{1}(jan|JAN|feb|FEB|mar|MAR|apr|APR|may|MAY|jun|JUN|jul|JUL|aug|AUG|sep|SEP|oct|OCT|nov|NOV|dec|DEC){1}", "exceptionStackTrace": null, "matches": ["00janjan", "000jan", "00DEC", "00dec", "00NOV", "00nov", "00OCT", "00oct", "00SEP", "00sep", "00AUG", "00aug", "00JUL", "00jul", "00JUN", "00jun", "00MAY", "00may", "00APR", "00apr", "00MAR", "00mar", "00FEB", "00feb", "00JAN", "00jan"], "nonMatches": ["00", "0jan", "40jan"]}, {"regex": "Services", "exceptionStackTrace": null, "matches": ["Services"], "nonMatches": []}, {"regex": "&lt;[iI][mM][gG]([^&gt;]*[^/&gt;]*[/&gt;]*[&gt;])", "exceptionStackTrace": null, "matches": ["&lt;IMGevilevil;t", "&lt;IMGevilevil;g", "&lt;IMGevilevil;a", "&lt;IMGevilevil;&", "&lt;IMGevilevil;;;", "&lt;IMGevilevil;", "&lt;IMGevilevilt;", "&lt;IMGevilevilg;", "&lt;IMGevilevila;", "&lt;IMGevilevil/;", "&lt;IMGevilevil&;", "&lt;IMGevil;;;", "&lt;IMGevil/;;", "&lt;IMGevil&;;", "&lt;IMGevileVil;;", "&lt;IMGevilEVIL;;", "&lt;IMGevilev_il;;", "&lt;IMGevilev il;;", "&lt;IMGevilev4il;;", "&lt;IMGevile;;", "&lt;IMGevil ;;", "&lt;IMGevil6;;", "&lt;IMGevil_;;", "&lt;IMG;evil;;", "&lt;IMG/evil;;", "&lt;IMG&evil;;", "&lt;IMGeVilevil;;", "&lt;IMGEVILevil;;", "&lt;IMGev_ilevil;;", "&lt;IMGev ilevil;;", "&lt;IMGev4ilevil;;", "&lt;IMGeevil;;", "&lt;IMG evil;;", "&lt;IMG6evil;;", "&lt;IMG_evil;;", "&lt;IMGevil;;", "&lt;IMgevilevil;;", "&lt;ImGevilevil;;", "&lt;iMGevilevil;;", "&lt;IMG;", "&lt;IMGevilevil;;"], "nonMatches": ["&lt;IMaevilevil;;", "&lt;IMAevilevil;;", "&lt;IaGevilevil;;", "&lt;IAGevilevil;;", "&lt;aMGevilevil;;", "&lt;AMGevilevil;;"]}, {"regex": "&lt;[iI][fF][rR][aA][mM][eE]([^&gt;]*[^/&gt;]*[/&gt;]*[&gt;])", "exceptionStackTrace": null, "matches": ["&lt;IFRAMEevilevil;t", "&lt;IFRAMEevilevil;g", "&lt;IFRAMEevilevil;a", "&lt;IFRAMEevilevil;&", "&lt;IFRAMEevilevil;;;", "&lt;IFRAMEevilevil;", "&lt;IFRAMEevilevilt;", "&lt;IFRAMEevilevilg;", "&lt;IFRAMEevilevila;", "&lt;IFRAMEevilevil/;", "&lt;IFRAMEevilevil&;", "&lt;IFRAMEevil;;;", "&lt;IFRAMEevil/;;", "&lt;IFRAMEevil&;;", "&lt;IFRAMEevileVil;;", "&lt;IFRAMEevilEVIL;;", "&lt;IFRAMEevilev_il;;", "&lt;IFRAMEevilev il;;", "&lt;IFRAMEevilev4il;;", "&lt;IFRAMEevile;;", "&lt;IFRAMEevil ;;", "&lt;IFRAMEevil6;;", "&lt;IFRAMEevil_;;", "&lt;IFRAME;evil;;", "&lt;IFRAME/evil;;", "&lt;IFRAME&evil;;", "&lt;IFRAMEeVilevil;;", "&lt;IFRAMEEVILevil;;", "&lt;IFRAMEev_ilevil;;", "&lt;IFRAMEev ilevil;;", "&lt;IFRAMEev4ilevil;;", "&lt;IFRAMEeevil;;", "&lt;IFRAME evil;;", "&lt;IFRAME6evil;;", "&lt;IFRAME_evil;;", "&lt;IFRAMEevil;;", "&lt;IFRAMeevilevil;;", "&lt;IFRAmEevilevil;;", "&lt;IFRaMEevilevil;;", "&lt;IFrAMEevilevil;;", "&lt;IfRAMEevilevil;;", "&lt;iFRAMEevilevil;;", "&lt;IFRAME;", "&lt;IFRAMEevilevil;;"], "nonMatches": ["&lt;IFRAMaevilevil;;", "&lt;IFRAMAevilevil;;", "&lt;IFRAaEevilevil;;", "&lt;IFRAAEevilevil;;", "&lt;IFRbMEevilevil;;", "&lt;IFRBMEevilevil;;", "&lt;IFaAMEevilevil;;", "&lt;IFAAMEevilevil;;", "&lt;IaRAMEevilevil;;", "&lt;IARAMEevilevil;;", "&lt;aFRAMEevilevil;;", "&lt;AFRAMEevilevil;;"]}, {"regex": "^(A[A-HJ-M]|[BR][A-Y]|C[A-HJ-PR-V]|[EMOV][A-Y]|G[A-HJ-O]|[DFHKLPSWY][A-HJ-PR-Y]|MAN|N[A-EGHJ-PR-Y]|X[A-F]|)(0[02-9]|[1-9][0-9])[A-HJ-P-R-Z]{3}$", "exceptionStackTrace": null, "matches": ["NR00---", "NJ00---", "NG00---", "NA00---", "YJ00---", "YA00---", "WR00---", "SR00---", "PR00---", "LR00---", "KR00---", "HR00---", "FR00---", "DR00---", "GA00---", "OA00---", "MA00---", "EA00---", "CJ00---", "CA00---", "BA00---", "AJ00R--", "AJ00J--", "AJ00A--", "AJ02---", "AA00---", "00---", "XA00---", "NH00---", "MAN00---", "YR00---", "GJ00---", "VA00---", "CR00---", "RA00---", "AJ10---", "AJ00---"], "nonMatches": ["XAXA00---", "XG00---", "NF00---", "YI00---", "AR00---", "GI00---", "VZ00---", "CI00---", "RZ00---", "AJ00----", "AJ00--", "AJ00I--", "AJ01---", "AI00---"]}, {"regex": "^(?=.*[1-9].*)((?!SS)[AHJ-NPR-UW-Z]{2})\\-[0-9]{3}\\-[AHJ-NPR-UW-Z]{2}$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["PP-000-PPP", "PP-000-P", "PP-000-WP", "PP-000-RP", "PP-000-JP", "PP-000-HP", "PP-000-BP", "PP-000-AP", "PP-0000-PP", "PP-00-PP", "PPP-000-PP", "P-000-PP", "WP-000-PP", "RP-000-PP", "JP-000-PP", "HP-000-PP", "BP-000-PP", "AP-000-PP", "PP-000-PP"]}, {"regex": "^[AHJ-NPR-UW-Z]{2}\\s?[0-9]{3}\\s?[AHJ-NPR-UW-Z]{2}$", "exceptionStackTrace": null, "matches": ["PP 000 WP", "PP 000 RP", "PP 000 JP", "PP 000 HP", "PP 000 AP", "PP 000PP", "PP000 PP", "WP 000 PP", "RP 000 PP", "JP 000 PP", "HP 000 PP", "AP 000 PP", "PP000PP", "PP 000 PP"], "nonMatches": ["PP 000 PPP", "PP 000 P", "PP 000 BP", "PP 000  PP", "PP 0000 PP", "PP 00 PP", "PP  000 PP", "PPP 000 PP", "P 000 PP", "BP 000 PP"]}, {"regex": "EMA|QCY|SQZ|ORM|NQT|WTN|CBG|QFO|BEQ|LKZ|LTN|KNF|MHZ|NWI|CLF|QUY|SEN|STN|BEQ|BQH|LHR|NHT|LCY|MME|NCL|BWF|BLK|CAX|LPL|MAN|BBP|BEX|BZZ|LGW|SOU|FAB|OXF|ESH|QLA|LYX|KRH|ODH|RCS|QUC|BBS|GLO|EXT|FFD|BOH|LYE|NQY|LEQ|ISC|UPV|BRS|YEO|CVT|BHX|DSA|HUY|LBA|HRT|BFS|BHD|LDY|ENK|ABZ|OBN|BEB|BRR|CAL|COL|CSA|NRL|INV|SCS|DND|LSI|EOI|EDI|FIE|FOA|ILY|FSS|NDY|ADX|LMO|OUK|PSV|PPW|PIK|GLA|KOI|PSL|SYY|SKL|SOY|LWK|TRE|WRY|WHS|WIC|HAW|CEG|VLY|SWS|CWL|DGX|ACI|GCI|IOM|JER", "exceptionStackTrace": null, "matches": ["JER", "IOM", "GCI", "ACI", "DGX", "CWL", "SWS", "VLY", "CEG", "HAW", "WIC", "WHS", "WRY", "TRE", "LWK", "SOY", "SKL", "SYY", "PSL", "KOI", "GLA", "PIK", "PPW", "PSV", "OUK", "LMO", "ADX", "NDY", "FSS", "ILY", "FOA", "FIE", "EDI", "EOI", "LSI", "DND", "SCS", "INV", "NRL", "CSA", "COL", "CAL", "BRR", "BEB", "OBN", "ABZ", "ENK", "LDY", "BHD", "BFS", "HRT", "LBA", "HUY", "DSA", "BHX", "CVT", "YEO", "BRS", "UPV", "ISC", "LEQ", "NQY", "LYE", "BOH", "FFD", "EXT", "GLO", "BBS", "QUC", "RCS", "ODH", "KRH", "LYX", "QLA", "ESH", "OXF", "FAB", "SOU", "LGW", "BZZ", "BEX", "BBP", "MAN", "LPL", "CAX", "BLK", "BWF", "NCL", "MME", "LCY", "NHT", "LHR", "BQH", "STN", "SEN", "QUY", "CLF", "NWI", "MHZ", "KNF", "LTN", "LKZ", "BEQ", "QFO", "CBG", "WTN", "NQT", "ORM", "SQZ", "QCY", "EMA"], "nonMatches": []}, {"regex": "^[A-Z9]{5}[0-9]([05][1-9]|[16][0-2])(0[1-9]|[12][0-9]|3[01])[0-9][A-Z9][0-9][A-Z0-9]([0-9]{2}?)$", "exceptionStackTrace": null, "matches": ["9999901001090000", "9999905130090000", "9999905110090000", "9999905101090A00", "99999051010A0000", "9999901101090000", "9999900101090000", "A999905101090000", "9999906001090000", "9999905131090000", "9999905120090000", "9999905101090000"], "nonMatches": ["9999906301090000", "9999900001090000", "9999905132090000", "99999051010900000", "999990510109000", "9999905101000000", "9999905100090000", "9999905001090000", "99999905101090000", "999905101090000", "0999905101090000"]}, {"regex": "^[1-9][0-9]{1,6}\\-[0-9]{2}\\-[0-9]", "exceptionStackTrace": null, "matches": ["1000000-00-0", "10-00-0"], "nonMatches": ["10-000-0", "10-0-0", "10000000-00-0", "1-00-0", "00-00-0"]}, {"regex": "^A([0-9]|10)$", "exceptionStackTrace": null, "matches": ["A10", "A0"], "nonMatches": []}, {"regex": "^([1-9]+)?[13579]$", "exceptionStackTrace": null, "matches": ["17", "15", "13", "11", "119", "9", "19"], "nonMatches": ["10", "09"]}, {"regex": "^([1-9]+)?[02468]$", "exceptionStackTrace": null, "matches": ["16", "14", "12", "10", "118", "8", "18"], "nonMatches": ["11", "08"]}, {"regex": "^([2357]|1[1379]|2[39]|[58][39]|4[137]|[36][17]|7[139]|97|[134]49|1([09][1379]|13|27|3[179]|5[17]|6[37]|7[39]|81)|2(11|2[379]|[36][39]|41|[57][17]|8[13]|93)|3(07|1[137]|3[17]|47|[578][39]|67|97)|4([013479]9|[02369]1|[346]3|[568]7)|5([0269]3|[247]1|[069]9|[4578]7)|6([03469]1|[14578]3|[0147]7|[15]9)|7([056]1|[347]3|[0136]9|[2589]7)|8([128]1|[2568]3|[2578]7|[0235]9)|9([1479]1|[58]3|[034679]7|[12]9))$", "exceptionStackTrace": null, "matches": ["919", "977", "967", "947", "937", "907", "953", "971", "941", "911", "839", "829", "809", "877", "857", "827", "863", "853", "823", "821", "811", "787", "757", "727", "739", "719", "709", "743", "733", "751", "701", "619", "647", "617", "607", "673", "653", "643", "613", "661", "641", "631", "601", "577", "557", "547", "569", "509", "541", "521", "563", "523", "503", "467", "457", "443", "433", "461", "431", "421", "401", "479", "439", "419", "409", "383", "379", "359", "331", "313", "311", "281", "271", "257", "263", "239", "227", "223", "173", "163", "151", "137", "131", "197", "193", "191", "109", "349", "149", "73", "71", "61", "37", "43", "41", "83", "59", "23", "17", "13", "11", "5", "3", "2", "929", "997", "983", "991", "859", "887", "883", "881", "797", "769", "773", "761", "659", "677", "683", "691", "587", "599", "571", "593", "487", "463", "491", "499", "397", "367", "389", "347", "337", "317", "307", "293", "283", "277", "241", "269", "229", "211", "181", "179", "167", "157", "139", "127", "113", "199", "449", "97", "79", "67", "47", "89", "29", "19", "7"], "nonMatches": ["909", "917", "903", "901", "819", "807", "803", "801", "707", "729", "703", "711", "609", "627", "603", "611", "507", "519", "501", "513", "407", "403", "411", "429", "380", "309", "330", "310", "280", "270", "207", "260", "209", "220", "170", "160", "150", "130", "190", "119", "049", "70", "60", "07", "40", "80", "09", "20", "10", "0"]}, {"regex": "^(02[03489]|01(1[3-8]|[2-9]1)$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "missing ), unterminated subpattern"}, "matches": []}, {"regex": "\\-?(90|[0-8]?[0-9]\\.[0-9]{0,6})\\,\\-?(180|(1[0-7][0-9]|[0-9]{0,2})\\.[0-9]{0,6})", "exceptionStackTrace": null, "matches": ["-00.000000,-180", "-00.,-180", "-000.0,-180", "-0.0,-180", "-90.0,-180", "-90,-00.0", "-90,-.0", "-90,-100.0000000", "-90,-100.000000", "-90,-100.", "-90,-180.0", "-90,180", "--90,-180", "90,-180", "0.,180", "90,.", "90,100.", "90,180", "-00.0,-180", "-90,-0.0", "-90,-100.0", "-90,-180"], "nonMatches": ["-00.0000000,-180", "-90,-000.0", "-90,--180"]}, {"regex": "[0-9]{5}\\s?[0-9]{5}", "exceptionStackTrace": null, "matches": ["00000 000000", "000000 00000", "0000000000", "00000 00000"], "nonMatches": ["00000 0000", "00000  00000", "0000 00000"]}, {"regex": "[0-9]{3}P[A-Z][0-9]{7}[0-9X]", "exceptionStackTrace": null, "matches": ["000PA00000000", "000PA00000000X", "0000PA0000000X", "000PA0000000X"], "nonMatches": ["000PA0000000A", "000PA000000X", "00PA0000000X"]}, {"regex": "((ATU|DK|FI|HU|LU|MT|SI)[0-9]{8}|BE(0)?{8}|BG[0-9]{9,10}|(ES([0-9]|[A-Z])[0-9]{7}([A-Z]|[0-9]))|(HR|IT|LV)[0-9]{11}|CY[0-9]{8}[A-Z]|CZ[0-9]{8,10}|(DE|EE|EL|GB|PT)[0-9]{9}|FR[A-Z0-9]{2}[0-9]{8}[A-Z0-9]|IE[0-9]{7}[A-Z0-9]{2}|LT[0-9]{9}([0-9]{3})?|NL[0-9]{9}B([0-9]{2})|PL[0-9]{10}|RO[0-9]{2,10)|SK[0-9]{10}|SE[0-9]{12})", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "multiple repeat"}, "matches": []}, {"regex": "(([A-HJ-PRSTW]|A[BDHR]|BCK|B[ADEFHK-ORSUW]|BRD|C[AEFHKLNOSTY]|D[AEHKORS]|F[DEHRY]|G[HKNRUWY]|H[HL]|I[EH]|INS|KY|L[AHIKLNORTY]|M[EHLNRT]|N[ENT]|OB|P[DEHLNTWZ]|R[NORXY]|S[ACDEHMNORSTUY]|SSS|T[HNOT]|UL|W[ADHIKNOTY]|YH)[1-9][0-9]{0,2})|([1-9][0-9]{0,2}([A-HJ-PRSTW]|A[BDHR]|BCK|B[ADEFHK-ORSUW]|BRD|C[AEFHKLNOSTY]|D[AEHKORS]|F[DEHRY]|G[HKNRUWY]|H[HL]|I[EH]|INS|KY|L[AHIKLNORTY]|M[EHLNRT]|N[ENT]|OB|P[DEHLNTWZ]|R[NORXY]|S[ACDEHMNORSTUY]|SSS|T[HNOT]|UL|W[ADHIKNOTY]|YH))", "exceptionStackTrace": null, "matches": ["10WT", "10WO", "10WN", "10WK", "10WI", "10WH", "10WD", "10WB", "10WA", "10TO", "10TN", "10TH", "10TA", "10SU", "10ST", "10SS", "10SR", "10SO", "10SN", "10SM", "10SH", "10SE", "10SD", "10SC", "10SB", "10SA", "10RX", "10RR", "10RO", "10RN", "10RA", "10PW", "10PT", "10PN", "10PL", "10PH", "10PE", "10PD", "10PA", "10NN", "10NE", "10NA", "10MR", "10MN", "10ML", "10MH", "10ME", "10MA", "10LT", "10LR", "10LO", "10LN", "10LL", "10LK", "10LI", "10LH", "10LB", "10LA", "10IE", "10HH", "10HA", "10GW", "10GU", "10GR", "10GN", "10GK", "10GH", "10GA", "10FR", "10FH", "10FE", "10FD", "10FA", "10DR", "10DO", "10DK", "10DH", "10DE", "10DB", "10DA", "10CT", "10CS", "10CO", "10CN", "10CL", "10CK", "10CH", "10CF", "10CE", "10CB", "10CA", "10BU", "10BS", "10BR", "10BK", "10BH", "10BF", "10BE", "10BD", "10BB", "10BA", "10AH", "10AD", "10AB", "10AA", "10T", "10S", "10R", "10J", "10A", "100W", "WT10", "WO10", "WN10", "WK10", "WI10", "WH10", "WD10", "WB10", "WA10", "TO10", "TN10", "TH10", "TA10", "SU10", "ST10", "SS10", "SR10", "SO10", "SN10", "SM10", "SH10", "SE10", "SD10", "SC10", "SB10", "SA10", "RX10", "RR10", "RO10", "RN10", "RA10", "PW10", "PT10", "PN10", "PL10", "PH10", "PE10", "PD10", "PA10", "NN10", "NE10", "NA10", "MR10", "MN10", "ML10", "MH10", "ME10", "MA10", "LT10", "LR10", "LO10", "LN10", "LL10", "LK10", "LI10", "LH10", "LB10", "LA10", "IE10", "IA10", "HH10", "HA10", "GW10", "GU10", "GR10", "GN10", "GK10", "GH10", "GA10", "FR10", "FH10", "FE10", "FD10", "FA10", "DR10", "DO10", "DK10", "DH10", "DE10", "DB10", "DA10", "CT10", "CS10", "CO10", "CN10", "CL10", "CK10", "CH10", "CF10", "CE10", "CB10", "CA10", "BU10", "BS10", "BR10", "BK10", "BH10", "BF10", "BE10", "BD10", "BB10", "BA10", "AH10", "AD10", "AB10", "AA10", "W1000", "W100", "T10", "S10", "R10", "J10", "A10", "1YH", "1WY", "1UL", "1TT", "1SSS", "1SY", "1RY", "1PZ", "1OB", "1NT", "1MT", "1LY", "1KY", "1INS", "1IH", "1HL", "1GY", "1FY", "1DS", "1CY", "1BRD", "1BW", "1BCK", "1AR", "1W", "YH1", "WY1", "UL1", "TT1", "SSS1", "SY1", "RY1", "PZ1", "OB1", "NT1", "MT1", "LY1", "KY1", "INS1", "IH1", "HL1", "GY1", "FY1", "DS1", "CY1", "BRD1", "BW1", "BCK1", "AR1", "W1", "10YH", "10WY", "10UL", "10TT", "10SSS", "10SY", "10RY", "10PZ", "10OB", "10NT", "10MT", "10LY", "10KY", "10INS", "10IH", "10HL", "10GY", "10FY", "10DS", "10CY", "10BRD", "10BW", "10BCK", "10AR", "10W", "YH10", "WY10", "UL10", "TT10", "SSS10", "SY10", "RY10", "PZ10", "OB10", "NT10", "MT10", "LY10", "KY10", "INS10", "IH10", "HL10", "GY10", "FY10", "DS10", "CY10", "BRD10", "BW10", "BCK10", "AR10", "W10"], "nonMatches": ["10IA", "10I", "1000W", "00W", "W00", "I10"]}, {"regex": "(0[0-9]{7}|(AC|BR|FC|GE|GN|GS|IC|IP|LP|NA|NF|NI|NL|NO|NP|NR|NZ|OC|RC|SA|SC|SF|SI|SL|SO|SP|SR|SZ|ZC|R)[0-9]{6})", "exceptionStackTrace": null, "matches": ["AC0000000", "000000000", "R000000", "ZC000000", "SZ000000", "SR000000", "SP000000", "SO000000", "SL000000", "SI000000", "SF000000", "SC000000", "SA000000", "RC000000", "OC000000", "NZ000000", "NR000000", "NP000000", "NO000000", "NL000000", "NI000000", "NF000000", "NA000000", "LP000000", "IP000000", "IC000000", "GS000000", "GN000000", "GE000000", "FC000000", "BR000000", "AC000000", "00000000"], "nonMatches": ["AC00000", "0000000"]}, {"regex": "([AEHKLTY][ABEHKLMPRSTWXYZ]|B[ABEHKLMT]|C[ABEHKLR]|GY|[JS][ABCEGHJKLMNPRSTWXYZ]|M[AWX]|N[ABEHLMPRSWXYZ]|O[ABEHKLMPRSX]|P[ABCEGHJKLMNPRSTWXY]|R[ABEHKMPRSTWXYZ]|W[ABEKLMP]|Z[ABEHKLMPRSTWXY])[0-9]{6}[A-D]?", "exceptionStackTrace": null, "matches": ["ZX000000A", "ZW000000A", "ZT000000A", "ZS000000A", "ZR000000A", "ZP000000A", "ZM000000A", "ZL000000A", "ZK000000A", "ZH000000A", "ZE000000A", "ZB000000A", "ZA000000A", "WM000000A", "WL000000A", "WK000000A", "WE000000A", "WB000000A", "WA000000A", "RY000000A", "RX000000A", "RW000000A", "RT000000A", "RS000000A", "RR000000A", "RP000000A", "RM000000A", "RK000000A", "RH000000A", "RE000000A", "RB000000A", "RA000000A", "PX000000A", "PW000000A", "PT000000A", "PS000000A", "PR000000A", "PP000000A", "PN000000A", "PM000000A", "PL000000A", "PK000000A", "PJ000000A", "PH000000A", "PG000000A", "PE000000A", "PC000000A", "PB000000A", "PA000000A", "OS000000A", "OR000000A", "OP000000A", "OM000000A", "OL000000A", "OK000000A", "OH000000A", "OE000000A", "OB000000A", "OA000000A", "NY000000A", "NX000000A", "NW000000A", "NS000000A", "NR000000A", "NP000000A", "NM000000A", "NL000000A", "NH000000A", "NE000000A", "NB000000A", "NA000000A", "MW000000A", "MA000000A", "SY000000A", "SX000000A", "SW000000A", "ST000000A", "SS000000A", "SR000000A", "SP000000A", "SN000000A", "SM000000A", "SL000000A", "SK000000A", "SJ000000A", "SH000000A", "SG000000A", "SE000000A", "SC000000A", "SB000000A", "SA000000A", "JZ000000A", "CL000000A", "CK000000A", "CH000000A", "CE000000A", "CB000000A", "CA000000A", "BM000000A", "BL000000A", "BK000000A", "BH000000A", "BE000000A", "BB000000A", "BA000000A", "YZ000000AA", "YZ000000E", "YZ0000000A", "YY000000A", "YX000000A", "YW000000A", "YT000000A", "YS000000A", "YR000000A", "YP000000A", "YM000000A", "YL000000A", "YK000000A", "YH000000A", "YE000000A", "YB000000A", "YA000000A", "TZ000000A", "LZ000000A", "KZ000000A", "HZ000000A", "EZ000000A", "AZ000000A", "ZY000000", "WP000000", "RZ000000", "PY000000", "OX000000", "NZ000000", "MX000000", "SZ000000", "GY000000", "CR000000", "BT000000", "YZ000000", "ZY000000A", "WP000000A", "RZ000000A", "PY000000A", "OX000000A", "NZ000000A", "MX000000A", "SZ000000A", "GY000000A", "CR000000A", "BT000000A", "YZ000000A"], "nonMatches": ["ZC000000A", "WC000000A", "RC000000A", "PD000000A", "OC000000A", "NC000000A", "MB000000A", "SD000000A", "CC000000A", "BC000000A", "YZ00000A", "YC000000A", "BZ000000A"]}, {"regex": "^([1-9]|1[0-2])$", "exceptionStackTrace": null, "matches": ["10", "1"], "nonMatches": ["13", "0"]}, {"regex": "([1-9]|[1-4][0-9]|5[0-2])", "exceptionStackTrace": null, "matches": ["53", "50", "10", "1"], "nonMatches": ["00", "0"]}, {"regex": "([1-9]|[1-2][0-9]|3[01])", "exceptionStackTrace": null, "matches": ["32", "30", "31", "10", "1"], "nonMatches": ["00", "0"]}, {"regex": "^(?=.*[1-9].*)[0-9]{3}$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["0000", "00", "000"]}, {"regex": "^[ABCGHJMPQRTWXYZ]$", "exceptionStackTrace": null, "matches": ["Y", "X", "W", "T", "R", "Q", "P", "M", "J", "H", "G", "C", "B", "A", "Z"], "nonMatches": ["D"]}, {"regex": "^(GB)?([0-9]{9})$", "exceptionStackTrace": null, "matches": ["000000000", "GB000000000"], "nonMatches": ["GB0000000000", "GB00000000", "GBGB000000000"]}, {"regex": "^[0-9]{8}R[A-HJ-NP-TV-Z]$", "exceptionStackTrace": null, "matches": ["00000000RP", "00000000RJ", "00000000RA", "00000000RV"], "nonMatches": ["00000000RI", "000000000RV", "0000000RV"]}, {"regex": "[A-Za-z]{2}[0-9]{1,6}|[0-9]{1,8}", "exceptionStackTrace": null, "matches": ["000000000", "00000000", "aa0000000", "aa000000", "aaa0", "a0", "Aa0", "0", "aa0"], "nonMatches": ["", "aa"]}, {"regex": "(W(5|6)[D]?\\-\\d{9})|(W1\\-\\d{9}(\\-\\d{2})?)", "exceptionStackTrace": null, "matches": ["W1-000000000-00-00", "W1-000000000-000", "W1-000000000-0", "W1-0000000000-00", "W5D-0000000000", "W1-000000000", "W6-000000000", "W5-000000000", "W1-000000000-00", "W6D-000000000", "W5D-000000000"], "nonMatches": ["W1-00000000-00", "W5D-00000000", "W5DD-000000000"]}, {"regex": "(0T|NT|BR|D[01]|[1-9][0-9]{0,6}([WM]1)?|K[1-9][0-9]{0,6}", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "missing ), unterminated subpattern"}, "matches": []}, {"regex": "https://elliskinantiaging.com/renewelle/", "exceptionStackTrace": null, "matches": ["https://elliskinantiagingAcom/renewelle/", "https://elliskinantiaging:com/renewelle/", "https://elliskinantiaging0com/renewelle/", "https://elliskinantiaging/com/renewelle/", "https://elliskinantiaging com/renewelle/", "https://elliskinantiagingacom/renewelle/"], "nonMatches": []}, {"regex": "^rgb\\(([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\,([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\,([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\)$ #Matches standard web rgb pattern", "exceptionStackTrace": null, "matches": [], "nonMatches": ["rgb(256,100,100) #Matches standard web rgb pattern", "rgb(100,256,100) #Matches standard web rgb pattern", "rgb(100,100,256) #Matches standard web rgb pattern", "rgb(100,100,1000) #Matches standard web rgb pattern", "rgb(100,100,10) #Matches standard web rgb pattern", "rgb(100,100,1100) #Matches standard web rgb pattern", "rgb(100,100,00) #Matches standard web rgb pattern", "rgb(100,100,000) #Matches standard web rgb pattern", "rgb(100,1000,100) #Matches standard web rgb pattern", "rgb(100,10,100) #Matches standard web rgb pattern", "rgb(100,1100,100) #Matches standard web rgb pattern", "rgb(100,00,100) #Matches standard web rgb pattern", "rgb(100,000,100) #Matches standard web rgb pattern", "rgb(1000,100,100) #Matches standard web rgb pattern", "rgb(10,100,100) #Matches standard web rgb pattern", "rgb(1100,100,100) #Matches standard web rgb pattern", "rgb(00,100,100) #Matches standard web rgb pattern", "rgb(000,100,100) #Matches standard web rgb pattern", "rgb(250,0,0) #Matches standard web rgb pattern", "rgb(200,0,0) #Matches standard web rgb pattern", "rgb(0,250,0) #Matches standard web rgb pattern", "rgb(0,200,0) #Matches standard web rgb pattern", "rgb(0,0,250) #Matches standard web rgb pattern", "rgb(0,0,200) #Matches standard web rgb pattern", "rgb(0,0,0) #Matches standard web rgb pattern", "rgb(250,100,100) #Matches standard web rgb pattern", "rgb(200,100,100) #Matches standard web rgb pattern", "rgb(100,250,100) #Matches standard web rgb pattern", "rgb(100,200,100) #Matches standard web rgb pattern", "rgb(100,100,250) #Matches standard web rgb pattern", "rgb(100,100,200) #Matches standard web rgb pattern", "rgb(100,100,100) #Matches standard web rgb pattern"]}, {"regex": "\\b(get)\\b.*{", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (parse error): Input string ended prematurely"}, "matches": [], "nonMatches": []}, {"regex": "\\bfor\\b.*[A-Za-z][&lt;&gt; ][\\d]", "exceptionStackTrace": null, "matches": ["for;a 0", "for&a 0", "for a 0"], "nonMatches": ["forevilat0", "forevilal0", "forevilag0", "forevilaa0", "forevila;0", "forevila&0", "forevilA 0", "foreVila 0", "forEVILa 0", "forev_ila 0", "forev ila 0", "forev4ila 0", "forea 0", "for6a 0", "for_a 0", "fora 0", "forevila 0"]}, {"regex": "\\b(byte|char|short|long|float|int|double|decimal|bool|string)\\b.*\\s[a-zA-Z](?=;)", "exceptionStackTrace": null, "matches": [], "nonMatches": ["byteevil a", "byte; A", "byteeVil A", "byteEVIL A", "byteev_il A", "byteev il A", "byteev4il A", "bytee A", "byte  A", "byte6 A", "byte_ A", "string A", "bool A", "decimal A", "double A", "int A", "float A", "long A", "short A", "char A", "byte A", "stringevil A", "boolevil A", "decimalevil A", "doubleevil A", "intevil A", "floatevil A", "longevil A", "shortevil A", "charevil A", "byteevil A"]}, {"regex": "(\\bprotected\\b.*(public))|(\\bprivate\\b.*(protected))|(\\bprivate\\b.*(public))", "exceptionStackTrace": null, "matches": ["private public", "private protected", "protected public"], "nonMatches": ["privateeVilpublic", "privateEVILpublic", "privateev_ilpublic", "privateev ilpublic", "privateev4ilpublic", "privateepublic", "private6public", "private_public", "privateeVilprotected", "privateEVILprotected", "privateev_ilprotected", "privateev ilprotected", "privateev4ilprotected", "privateeprotected", "private6protected", "private_protected", "protectedeVilpublic", "protectedEVILpublic", "protectedev_ilpublic", "protectedev ilpublic", "protectedev4ilpublic", "protectedepublic", "protected6public", "protected_public", "privatepublic", "privateprotected", "protectedpublic", "privateevilpublic", "privateevilprotected", "protectedevilpublic"]}, {"regex": "\\b(\\w+).\\1", "exceptionStackTrace": null, "matches": ["evil_evil", "evilAevil", "evil0evil", "evil evil", "eaevil", "evilaevil"], "nonMatches": ["eVilaevil", "EVILaevil", "ev_ilaevil", "ev ilaevil", "ev4ilaevil", " aevil", "6aevil", "_aevil", "aevil"]}, {"regex": "\\b(public|private|protected|internal)\\b.*(byte|char|short|long|float|int|double|decimal|bool|string)\\b.*(?=,)", "exceptionStackTrace": null, "matches": [], "nonMatches": ["publicevilbyte,", "publicevilbyteeVil", "publicevilbyteEVIL", "publicevilbyteev_il", "publicevilbyteev il", "publicevilbyteev4il", "publicevilbytee", "publicevilbyte ", "publicevilbyte6", "publicevilbyte_", "publicevilbyte", "public,byteevil", "publiceVilbyteevil", "publicEVILbyteevil", "publicev_ilbyteevil", "publicev ilbyteevil", "publicev4ilbyteevil", "publicebyteevil", "public byteevil", "public6byteevil", "public_byteevil", "publicbyteevil", "internalbyte", "protectedbyte", "privatebyte", "publicstring", "publicbool", "publicdecimal", "publicdouble", "publicint", "publicfloat", "publiclong", "publicshort", "publicchar", "publicbyte", "internalevilbyteevil", "protectedevilbyteevil", "privateevilbyteevil", "publicevilstringevil", "publicevilboolevil", "publicevildecimalevil", "publicevildoubleevil", "publicevilintevil", "publicevilfloatevil", "publicevillongevil", "publicevilshortevil", "publicevilcharevil", "publicevilbyteevil"]}, {"regex": "((\\bm_[a-zA-Z\\d]*\\b)|(\\bin_[a-zA-Z\\d]*\\b)|(\\bin _[a-zA-Z\\d]*\\b))", "exceptionStackTrace": null, "matches": ["in _eVil", "in _EVIL", "in _ev il", "in _ev4il", "in _e", "in _ ", "in _6", "in_eVil", "in_EVIL", "in_ev il", "in_ev4il", "in_e", "in_ ", "in_6", "m_eVil", "m_EVIL", "m_ev il", "m_ev4il", "m_e", "m_ ", "m_6", "in _", "in_", "m_", "in _evil", "in_evil", "m_evil"], "nonMatches": ["in _ev_il", "in __", "in_ev_il", "in__", "m_ev_il", "m__"]}, {"regex": "\\binterface\\b.*(\\bI[_]\\w*\\b)", "exceptionStackTrace": null, "matches": ["interface I_evil"], "nonMatches": ["interfaceevilI_eVil", "interfaceevilI_EVIL", "interfaceevilI_ev_il", "interfaceevilI_ev il", "interfaceevilI_ev4il", "interfaceevilI_e", "interfaceevilI_ ", "interfaceevilI_6", "interfaceevilI__", "interfaceevilI_", "interfaceeVilI_evil", "interfaceEVILI_evil", "interfaceev_ilI_evil", "interfaceev ilI_evil", "interfaceev4ilI_evil", "interfaceeI_evil", "interface6I_evil", "interface_I_evil", "interfaceI_evil", "interfaceI_", "interfaceevilI_evil"]}, {"regex": "^\\w+(([-+&#39;]|[-+.]|\\w+))*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$", "exceptionStackTrace": null, "matches": ["evileVil@evil.evil.evil.evil", "evilEVIL@evil.evil.evil.evil", "evilev_il@evil.evil.evil.evil", "evilev4il@evil.evil.evil.evil", "evile@evil.evil.evil.evil", "evil6@evil.evil.evil.evil", "evil_@evil.evil.evil.evil", "evil;@evil.evil.evil.eVil", "evil;@evil.evil.evil.EVIL", "evil;@evil.evil.evil.ev_il", "evil;@evil.evil.evil.ev4il", "evil;@evil.evil.evil.e", "evil;@evil.evil.evil.6", "evil;@evil.evil.evil._", "evil;@evil.evil.evil-evil", "evil;@evil.evil.eVil.evil", "evil;@evil.evil.EVIL.evil", "evil;@evil.evil.ev_il.evil", "evil;@evil.evil.ev4il.evil", "evil;@evil.evil.e.evil", "evil;@evil.evil.6.evil", "evil;@evil.evil._.evil", "evil;@evil.evil.evil.evil.evil", "evil;@evil.evil.evil", "evil;@evil.eVil.evil.evil", "evil;@evil.EVIL.evil.evil", "evil;@evil.ev_il.evil.evil", "evil;@evil.ev4il.evil.evil", "evil;@evil.e.evil.evil", "evil;@evil.6.evil.evil", "evil;@evil._.evil.evil", "evil;@evil-evil.evil.evil", "evil;@eVil.evil.evil.evil", "evil;@EVIL.evil.evil.evil", "evil;@ev_il.evil.evil.evil", "evil;@ev4il.evil.evil.evil", "evil;@e.evil.evil.evil", "evil;@6.evil.evil.evil", "evil;@_.evil.evil.evil", "evil;;@evil.evil.evil.evil", "evil@evil.evil.evil.evil", "evil9@evil.evil.evil.evil", "evil3@evil.evil.evil.evil", "evil0@evil.evil.evil.evil", "evil-@evil.evil.evil.evil", "evil+@evil.evil.evil.evil", "evil&@evil.evil.evil.evil", "evil#@evil.evil.evil.evil", "eVil;@evil.evil.evil.evil", "EVIL;@evil.evil.evil.evil", "ev_il;@evil.evil.evil.evil", "ev4il;@evil.evil.evil.evil", "e;@evil.evil.evil.evil", "6;@evil.evil.evil.evil", "_;@evil.evil.evil.evil", "evil@evil.evil", "evilevil@evil.evil.evil.evil", "evil.@evil.evil.evil.evil", "evil;@evil.evil.evil.evil"], "nonMatches": ["evilev il@evil.evil.evil.evil", "evil @evil.evil.evil.evil", "evil;@evil.evil.evil.ev il", "evil;@evil.evil.evil. ", "evil;@evil.evil.evil.", "evil;@evil.evil.ev il.evil", "evil;@evil.evil. .evil", "evil;@evil.evil..evil", "evil;@evil.ev il.evil.evil", "evil;@evil. .evil.evil", "evil;@evil..evil.evil", "evil;@ev il.evil.evil.evil", "evil;@ .evil.evil.evil", "evil;@.evil.evil.evil", "ev il;@evil.evil.evil.evil", " ;@evil.evil.evil.evil", ";@evil.evil.evil.evil"]}, {"regex": "(^(\\d|,)*\\.?\\d*[1-9]+\\d*$)|(^[1-9]+(\\d|,)*\\.\\d*$)|(^[1-9]+(\\d|,)*\\d*$)", "exceptionStackTrace": null, "matches": ["1000", "10", "1100", "10.00", "10.", "100.0", "1.0", "110.0", "0.0100", "0.01", "0.0110", "0.0010", "0.10", "0010", "00.010", ".010", "1.", "1", "1,0", "100", "1,.0", "10.0", ",.010", "0.010"], "nonMatches": ["00", "000", "0.0", "00.0", "0.00", "0.000", "0..010"]}, {"regex": "^(?=.*\\d{2})(?=.*[A-Z]{2})(?=.*[\\D,\\W,\\S]{2})(?=.*[a-z]).{15,30}$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaa", "Aaaaaaaaaaaaaaa", "0aaaaaaaaaaaaaa", ",aaaaaaaaaaaaaa", " aaaaaaaaaaaaaa", "aaaaaaaaaaaaaaa"]}, {"regex": "^((4\\d{3})|(5[1-5]\\d{2}))(-?|\\040?)(\\d{4}(-?|\\040?)){3}|^(3[4,7]\\d{2})(-?|\\040?)\\d{6}(-?|\\040?)\\d{5}", "exceptionStackTrace": null, "matches": ["3700-000000-000000", "3700-00000000000", "3700000000-00000", "3400-000000-00000", "3,00-000000-00000", "4000-00000000 0000 ", "4000-0000-0000-0000-0000-", "4000-00000000-0000-", "40000000-0000-0000-", "370000000000000", "510000000000-0000-", "400000000000-0000-", "3700 000000-00000", "3700-000000 00000", "3700-000000-00000", "5100-0000-0000-0000-", "4000 0000-0000-0000-", "4000-0000 0000 0000 ", "4000-0000-0000-0000-"], "nonMatches": ["3700  000000-00000", "3700-000000  00000", "3700-000000-0000", "3700-000000--00000", "3700-0000000-00000", "3700-00000-00000", "3700--000000-00000", "37000-000000-00000", "370-000000-00000", "3000-000000-00000", "51000-0000-0000-0000-", "510-0000-0000-0000-", "5000-0000-0000-0000-", "4000  0000-0000-0000-", "4000-0000  0000 0000 ", "4000-0000-0000-", "4000-0000--0000-0000-", "4000-00000-0000-0000-", "4000-000-0000-0000-", "4000--0000-0000-0000-", "40000-0000-0000-0000-", "400-0000-0000-0000-"]}, {"regex": "(((?<numb1>[\\d\\.-]+)([\\s]*?)(?<oper1>(\\>=|\\<=|=\\>|=\\<|\\<|\\>|=){1})([\\s]*?)){0,1})(?<varname>(salary|mph|kph|ph){1})((([\\s]*?)(?<oper2>(\\>=|\\<=|=\\>|=\\<|\\<|\\>|=){1})([\\s]*?)(?<numb2>[\\d\\.-]+)){0,1})", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<n"}, "matches": []}, {"regex": "<script[^>]*>[\\w|\\t|\\r|\\W]*</script>", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\t"}, "matches": [], "nonMatches": []}, {"regex": "(<input )(.*?)(>)", "exceptionStackTrace": null, "matches": ["<input >>", "<input <>", "<input eVil>", "<input EVIL>", "<input ev_il>", "<input ev il>", "<input ev4il>", "<input e>", "<input  >", "<input 6>", "<input _>", "<input >", "<input evil>"], "nonMatches": []}, {"regex": "^(BE)[0-1]{1}[0-9]{9}$|^((BE)|(BE ))[0-1]{1}(\\d{3})([.]{1})(\\d{3})([.]{1})(\\d{3})", "exceptionStackTrace": null, "matches": ["BE0000.000.0000", "BE 0000.000.000", "BE0000.000.000", "BE0000000000"], "nonMatches": ["BE0000.000.00", "BE0000.000..000", "BE0000.000000", "BE0000.0000.000", "BE0000.00.000", "BE0000..000.000", "BE0000000.000", "BE00000.000.000", "BE000.000.000", "BE2000.000.000", "BE00000000000", "BE000000000", "BE2000000000"]}, {"regex": "^\\s*(([\\w-]+\\.)+[\\w-]+|([a-zA-Z]{1}|[\\w-]{2,}))@(\\w+\\.)+[A-Za-z]{2,5}$", "exceptionStackTrace": null, "matches": [" a-@evil.aa", " _-@evil.aa", " A-@evil.aa", " 0-@evil.aa", " AA@evil.aa", " a@evil.aa", " evil.evil@evil.aaaaa", " evil.evil@evil.Aa", " evil.evil@evil.evil.aa", " evil.evil@eVil.aa", " evil.evil@EVIL.aa", " evil.evil@ev_il.aa", " evil.evil@ev4il.aa", " evil.evil@e.aa", " evil.evil@6.aa", " evil.evil@_.aa", " evil.-@evil.aa", " evil.eVil@evil.aa", " evil.EVIL@evil.aa", " evil.ev_il@evil.aa", " evil.ev4il@evil.aa", " evil.e@evil.aa", " evil.6@evil.aa", " evil._@evil.aa", " evil.evil.evil@evil.aa", " evil@evil.aa", " -.evil@evil.aa", " eVil.evil@evil.aa", " EVIL.evil@evil.aa", " ev_il.evil@evil.aa", " ev4il.evil@evil.aa", " e.evil@evil.aa", " 6.evil@evil.aa", " _.evil@evil.aa", "  evil.evil@evil.aa", "--@evil.aa", "A@evil.aa", "evil.evil@evil.aa", " --@evil.aa", " A@evil.aa", " evil.evil@evil.aa"], "nonMatches": [" -@evil.aa", " @evil.aa", " evil.evil@evil.aaaaaa", " evil.evil@evil.a", " evil.evil@aa", " evil.evil@ev il.aa", " evil.evil@ .aa", " evil.evil@.aa", " evil.@@evil.aa", " evil..@evil.aa", " evil.ev il@evil.aa", " evil. @evil.aa", " evil.@evil.aa", " @.evil@evil.aa", " ..evil@evil.aa", " ev il.evil@evil.aa", "  .evil@evil.aa", " .evil@evil.aa"]}, {"regex": "&quot;^\\s*((([\\w-]+\\.)+[\\w-]+|([a-zA-Z]{1}|[\\w-]{2,}))@(\\w+\\.)+[A-Za-z]{2,5}[?= ]?[?=,;]?[?= ]?)+?$&quot;", "exceptionStackTrace": null, "matches": [], "nonMatches": ["&quot; -@evil.aa ; &quot;", "&quot; a-@evil.aa ; &quot;", "&quot; _-@evil.aa ; &quot;", "&quot; A-@evil.aa ; &quot;", "&quot; 0-@evil.aa ; &quot;", "&quot; AA@evil.aa ; &quot;", "&quot; @evil.aa ; &quot;", "&quot; a@evil.aa ; &quot;", "&quot; evil.evil@evil.aa ; evil.evil@evil.aa ; &quot;", "&quot; &quot;", "&quot; evil.evil@evil.aa ;  &quot;", "&quot; evil.evil@evil.aa ;&quot;", "&quot; evil.evil@evil.aa ;?&quot;", "&quot; evil.evil@evil.aa ;=&quot;", "&quot; evil.evil@evil.aa ;; &quot;", "&quot; evil.evil@evil.aa  &quot;", "&quot; evil.evil@evil.aa ? &quot;", "&quot; evil.evil@evil.aa = &quot;", "&quot; evil.evil@evil.aa , &quot;", "&quot; evil.evil@evil.aa  ; &quot;", "&quot; evil.evil@evil.aa; &quot;", "&quot; evil.evil@evil.aa?; &quot;", "&quot; evil.evil@evil.aa=; &quot;", "&quot; evil.evil@evil.aaaaaa ; &quot;", "&quot; evil.evil@evil.aaaaa ; &quot;", "&quot; evil.evil@evil.a ; &quot;", "&quot; evil.evil@evil.Aa ; &quot;", "&quot; evil.evil@evil.evil.aa ; &quot;", "&quot; evil.evil@aa ; &quot;", "&quot; evil.evil@eVil.aa ; &quot;", "&quot; evil.evil@EVIL.aa ; &quot;", "&quot; evil.evil@ev_il.aa ; &quot;", "&quot; evil.evil@ev il.aa ; &quot;", "&quot; evil.evil@ev4il.aa ; &quot;", "&quot; evil.evil@e.aa ; &quot;", "&quot; evil.evil@ .aa ; &quot;", "&quot; evil.evil@6.aa ; &quot;", "&quot; evil.evil@_.aa ; &quot;", "&quot; evil.evil@.aa ; &quot;", "&quot; evil.@@evil.aa ; &quot;", "&quot; evil.?@evil.aa ; &quot;", "&quot; evil.=@evil.aa ; &quot;", "&quot; evil.;@evil.aa ; &quot;", "&quot; evil..@evil.aa ; &quot;", "&quot; evil.-@evil.aa ; &quot;", "&quot; evil.,@evil.aa ; &quot;", "&quot; evil.&@evil.aa ; &quot;", "&quot; evil.eVil@evil.aa ; &quot;", "&quot; evil.EVIL@evil.aa ; &quot;", "&quot; evil.ev_il@evil.aa ; &quot;", "&quot; evil.ev il@evil.aa ; &quot;", "&quot; evil.ev4il@evil.aa ; &quot;", "&quot; evil.e@evil.aa ; &quot;", "&quot; evil. @evil.aa ; &quot;", "&quot; evil.6@evil.aa ; &quot;", "&quot; evil._@evil.aa ; &quot;", "&quot; evil.@evil.aa ; &quot;", "&quot; evil.evil.evil@evil.aa ; &quot;", "&quot; evil@evil.aa ; &quot;", "&quot; @.evil@evil.aa ; &quot;", "&quot; ?.evil@evil.aa ; &quot;", "&quot; =.evil@evil.aa ; &quot;", "&quot; ;.evil@evil.aa ; &quot;", "&quot; ..evil@evil.aa ; &quot;", "&quot; -.evil@evil.aa ; &quot;", "&quot; ,.evil@evil.aa ; &quot;", "&quot; &.evil@evil.aa ; &quot;", "&quot; eVil.evil@evil.aa ; &quot;", "&quot; EVIL.evil@evil.aa ; &quot;", "&quot; ev_il.evil@evil.aa ; &quot;", "&quot; ev il.evil@evil.aa ; &quot;", "&quot; ev4il.evil@evil.aa ; &quot;", "&quot; e.evil@evil.aa ; &quot;", "&quot;  .evil@evil.aa ; &quot;", "&quot; 6.evil@evil.aa ; &quot;", "&quot; _.evil@evil.aa ; &quot;", "&quot; .evil@evil.aa ; &quot;", "&quot;  evil.evil@evil.aa ; &quot;", "&quot;evil.evil@evil.aa ; &quot;", "&quot;--@evil.aa&quot;", "&quot;A@evil.aa&quot;", "&quot;evil.evil@evil.aa&quot;", "&quot; --@evil.aa ; &quot;", "&quot; A@evil.aa ; &quot;", "&quot; evil.evil@evil.aa ; &quot;"]}, {"regex": "^[1-9]+[0-9]*$", "exceptionStackTrace": null, "matches": ["100", "110", "1", "10"], "nonMatches": ["0", "00"]}, {"regex": "((((0[1-9]|[12][0-9]|3[01])(0[13578]|10|12)(\\d{2}))|(([0][1-9]|[12][0-9]|30)(0[469]|11)(\\d{2}))|((0[1-9]|1[0-9]|2[0-8])(02)(\\d{2}))|((29)(02)(0(0|4|8)))|((29)(02)([2468][048]))|((29)(02)([13579][26])))[- ]?\\d{4})", "exceptionStackTrace": null, "matches": ["290292 0000", "290276 0000", "290256 0000", "290236 0000", "290216 0000", "290284 0000", "290280 0000", "290268 0000", "290248 0000", "290228 0000", "100900 0000", "010600 0000", "010400 0000", "300800 0000", "100800 0000", "010800 00000", "010800-0000", "010700 0000", "010500 0000", "010300 0000", "010100 0000", "2902960000", "2902880000", "2902080000", "2902040000", "2902000000", "2002000000", "1002000000", "0102000000", "3009000000", "2009000000", "0111000000", "0109000000", "3108000000", "2008000000", "0112000000", "0110000000", "0108000000", "290296 0000", "290288 0000", "290208 0000", "290204 0000", "290200 0000", "200200 0000", "100200 0000", "010200 0000", "300900 0000", "200900 0000", "011100 0000", "010900 0000", "310800 0000", "200800 0000", "011200 0000", "011000 0000", "010800 0000"], "nonMatches": ["290290 0000", "290206 0000", "290281 0000", "0102000 0000", "01020 0000", "000200 0000", "0109000 0000", "01090 0000", "000900 0000", "320800 0000", "010800 000", "010800  0000", "0108000 0000", "01080 0000", "010000 0000", "000800 0000"]}, {"regex": "^((http:\\/\\/www\\.)|(www\\.)|(http:\\/\\/))[a-zA-Z0-9._-]+\\.[a-zA-Z.]{2,5}$", "exceptionStackTrace": null, "matches": ["http://www.evil.......", "http://www.evil......", "http://www.evil.a.", "http://www.evil.A.", "http://www.....", "http://www.-...", "http://www.eVil...", "http://www.EVIL...", "http://www.ev_il...", "http://www.ev4il...", "http://www.e...", "http://www.6...", "http://www._...", "http://www....", "http://evil...", "www.evil...", "http://www.evil..."], "nonMatches": ["http://www.evil..", "http://www.:...", "http://www./...", "http://www.ev il...", "http://www. ..."]}, {"regex": "^\\$?([0-9]{1,3},([0-9]{3},)*[0-9]{3}|[0-9]+)(.[0-9][0-9])?$", "exceptionStackTrace": null, "matches": ["$00a00", "$0,000,000", "$0,000,000A00", "$0,000,000000", "$0,000,000,00", "$0,000,000$00", "$0,000,000 00", "$0,000,000,000a00", "$0,000a00", "$000,000,000a00", "0,000,000a00", "0", "0,000", "$0a00", "$0,000,000a00"], "nonMatches": ["$a00", "$0,000,000a00a00", "$0,000,0000a00", "$0,000,00a00", "$0,0000,000a00", "$0,00,000a00", "$0000,000,000a00", "$,000,000a00", "$$0,000,000a00"]}, {"regex": "hytjuyj", "exceptionStackTrace": null, "matches": ["hytjuyj"], "nonMatches": []}, {"regex": "(^[&#209;A-Z][a-z&#225;&#233;&#237;&#243;&#250;&#241;&#39;&#209;A-Z]*$)|(^[&#209;A-Z][a-z&#225;&#233;&#237;&#243;&#250;&#241;&#39;&#209;A-Z]*[- ]^[&#209;A-Z][a-z&#225;&#233;&#237;&#243;&#250;&#241;&#39;&#209;A-Z]*$)", "exceptionStackTrace": null, "matches": [";;", ";&", ";#", ";eVil", ";EVIL", ";ev4il", ";e", "Aevil", "9evil", "2evil", "0evil", "&evil", "#evil", ";", ";evil"], "nonMatches": [";evil ;;", ";evil ;-", ";evil ;&", ";evil ;#", ";evil ;eVil", ";evil ;EVIL", ";evil ;ev_il", ";evil ;ev il", ";evil ;ev4il", ";evil ;e", ";evil ; ", ";evil ;6", ";evil ;_", ";evil ;", ";evil Aevil", ";evil 9evil", ";evil 2evil", ";evil 1evil", ";evil 0evil", ";evil &evil", ";evil #evil", ";evil-;evil", ";; ;evil", ";- ;evil", ";& ;evil", ";# ;evil", ";eVil ;evil", ";EVIL ;evil", ";ev_il ;evil", ";ev il ;evil", ";ev4il ;evil", ";e ;evil", ";  ;evil", ";6 ;evil", ";_ ;evil", "; ;evil", "Aevil ;evil", "9evil ;evil", "2evil ;evil", "1evil ;evil", "0evil ;evil", "&evil ;evil", "#evil ;evil", ";-", ";ev_il", ";ev il", "; ", ";6", ";_", "1evil", "; ;", ";evil ;evil"]}, {"regex": "^(\\$?)((\\d{1,20})|(\\d{1,2}((,?\\d{3}){0,6}))|(\\d{3}((,?\\d{3}){0,5})))$", "exceptionStackTrace": null, "matches": ["$000,000,000,000,000,000", "$000", "$000000", "$0000,000", "$0,000,000,000,000,000,000", "$0000", "$00,000", "$00000000000000000000", "000", "0", "$000,000", "$0,000", "$0"], "nonMatches": ["$000,000,000,000,000,000,000", "$000,0000", "$000,00", "$000,,000", "$0,000,000,000,000,000,000,000", "$0,0000", "$0,00", "$0,,000", "$,000", "$000000000000000000000", "$", "$$0"]}, {"regex": "^\\d{5}(-\\d{4})?$", "exceptionStackTrace": null, "matches": ["00000", "00000-0000"], "nonMatches": ["00000-0000-0000", "00000-00000", "00000-000", "000000-0000", "0000-0000"]}, {"regex": "^\\d+?(\\.\\d+)?$", "exceptionStackTrace": null, "matches": ["0.00", "00.0", "0", "0.0"], "nonMatches": ["0.0.0", "0.", ".0"]}, {"regex": "^0[1-6]{1}(([0-9]{2}){4})|((\\s[0-9]{2}){4})|((-[0-9]{2}){4})$", "exceptionStackTrace": null, "matches": ["-00-00-00-00-00", " 00 00 00 00 00", "010000000000", "01000000000", "01100000000", "-00-00-00-00", " 00 00 00 00", "0100000000"], "nonMatches": ["-00-00-00", "-000-00-00-00", "-0-00-00-00", " 00 00 00", " 000 00 00 00", " 0 00 00 00", "01000000", "010000000", "000000000", "0000000000"]}, {"regex": "^(\\d)?(\\d|,)*\\.?\\d{1,2}$", "exceptionStackTrace": null, "matches": ["00.00", "000", "000.0", "0.0", "0", "0,.0", "00.0"], "nonMatches": ["00.000", "00.", "00..0"]}, {"regex": "^(\\+[0-9]{2,}[0-9]{4,}[0-9]*)(x?[0-9]{1,})?$", "exceptionStackTrace": null, "matches": ["+0000000", "+0000000x00", "+00000000", "+00000000x0", "+000000x0", "+000000", "+0000000x0"], "nonMatches": ["+0000000x0x0", "+0000000x", "+0000000xx0"]}, {"regex": "^([A-HJ-TP-Z]{1}\\d{4}[A-Z]{3}|[a-z]{1}\\d{4}[a-hj-tp-z]{3})$", "exceptionStackTrace": null, "matches": ["a0000jpp", "a0000app", "J0000AAA", "A0000AAA", "a0000ppp", "P0000AAA"], "nonMatches": ["a0000pppp", "a0000pp", "a0000ipp", "a00000ppp", "a000ppp", "aa0000ppp", "0000ppp", "P0000AAAA", "P0000AA", "P00000AAA", "P000AAA", "PP0000AAA", "0000AAA", "I0000AAA"]}, {"regex": "hryyt", "exceptionStackTrace": null, "matches": ["hryyt"], "nonMatches": []}, {"regex": "(([IXCM])\\2{3,})|[^IVXLCDM]|([IL][LCDM])|([XD][DM])|(V[VXLCDM])|(IX[VXLC])|(VI[VX])|(XC[LCDM])|(LX[LC])|((CM|DC)[DM])|(I[VX]I)|(X[CL]X)|(C[DM]C)|(I{2,}[VX])|(X{2,}[CL])|(C{2,}[DM])", "exceptionStackTrace": null, "matches": ["CCD", "CCA", "XXC", "XXA", "IIV", "IIA", "CDC", "CAC", "XCX", "XAX", "IVI", "IAI", "CMD", "CMA", "LXL", "LXA", "XCL", "XCD", "XCC", "XCA", "VIV", "VIA", "IXX", "IXV", "IXL", "IXA", "VX", "VV", "VL", "VD", "VC", "VA", "DD", "DA", "XM", "LL", "LD", "LC", "LA", "IM", "AM", "_", "A", "0", " ", "XMMM", "IMMM", "CMMM", "AMMM", "CCM", "XXL", "IIX", "CMC", "XLX", "IXI", "DCM", "CMM", "LXC", "XCM", "VIX", "IXC", "VM", "DM", "LM", "a", "MMMM"], "nonMatches": ["CM", "XL", "IX", "X", "V", "M", "L", "I", "D", "C", "MMM"]}, {"regex": "^\\\\{2}[-\\w]+\\\\(([^&quot;*/:?|<>\\\\,;[\\]+=.\\x00-\\x20]|\\.[.\\x20]*[^&quot;*/:?|<>\\\\,;[\\]+=.\\x00-\\x20])([^&quot;*/:?|<>\\\\,;[\\]+=\\x00-\\x1F]*[^&quot;*/:?|<>\\\\,;[\\]+=\\x00-\\x20])?)\\\\([^&quot;*/:?|<>\\\\.\\x00-\\x20]([^&quot;*/:?|<>\\\\\\x00-\\x1F]*[^&quot;*/:?|<>\\\\.\\x00-\\x20])?\\\\)*$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 0"}, "matches": [], "nonMatches": []}, {"regex": "^[A-Za-z]:\\\\([^&quot;*/:?|<>\\\\.\\x00-\\x20]([^&quot;*/:?|<>\\\\\\x00-\\x1F]*[^&quot;*/:?|<>\\\\.\\x00-\\x20])?\\\\)*$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 0"}, "matches": [], "nonMatches": []}, {"regex": "^([A-Za-z]:|\\\\{2}([-\\w]+|((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\\\\(([^&quot;*/:?|<>\\\\,;[\\]+=.\\x00-\\x20]|\\.[.\\x20]*[^&quot;*/:?|<>\\\\,;[\\]+=.\\x00-\\x20])([^&quot;*/:?|<>\\\\,;[\\]+=\\x00-\\x1F]*[^&quot;*/:?|<>\\\\,;[\\]+=\\x00-\\x20])?))\\\\([^&quot;*/:?|<>\\\\.\\x00-\\x20]([^&quot;*/:?|<>\\\\\\x00-\\x1F]*[^&quot;*/:?|<>\\\\.\\x00-\\x20])?\\\\)*$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 0"}, "matches": [], "nonMatches": []}, {"regex": "(^([\\w]+[^\\W])([^\\W]\\.?)([\\w]+[^\\W]$))", "exceptionStackTrace": null, "matches": ["evilaa.evil_", "evilaa.evilA", "evilaa.evil0", "evilaa.eVila", "evilaa.EVILa", "evilaa.ev_ila", "evilaa.ev4ila", "evilaa.ea", "evilaa.6a", "evilaa._a", "evila_.evila", "evilaA.evila", "evila0.evila", "evil_a.evila", "evilAa.evila", "evil0a.evila", "eVilaa.evila", "EVILaa.evila", "ev_ilaa.evila", "ev4ilaa.evila", "eaa.evila", "6aa.evila", "_aa.evila", "evilaaevila", "evilaa.evila"], "nonMatches": ["evilaa.evil.", "evilaa.evil ", "evilaa.ev ila", "evilaa. a", "evilaa.a", "evilaa..evila", "evila..evila", "evila .evila", "evil.a.evila", "evil a.evila", "ev ilaa.evila", " aa.evila", "aa.evila"]}, {"regex": "[2-9](\\d)(?!\\1)[\\d][\\W|_]?[2-9]([0]|[2-9]|([1](?!1)))[\\d][\\W|_]?[\\d]{4}", "exceptionStackTrace": null, "matches": [], "nonMatches": ["200_200_00000", "200_200_000", "200_200__0000", "200_2000000", "200_200|0000", "200_200a0000", "200_200A0000", "200_20000000", "200_200 0000", "200_000_0000", "200__200_0000", "200200_0000", "200|200_0000", "200a200_0000", "200A200_0000", "2000200_0000", "200 200_0000", "000_200_0000", "2002100000", "2002200000", "2002000000", "200_210_0000", "200_220_0000", "200_200_0000"]}, {"regex": "^[/]*([^/\\\\ \\:\\*\\?&quot;\\<\\>\\|\\.][^/\\\\\\:\\*\\?\\&quot;\\<\\>\\|]{0,63}/)*[^/\\\\ \\:\\*\\?&quot;\\<\\>\\|\\.][^/\\\\\\:\\*\\?\\&quot;\\<\\>\\|]{0,63}$", "exceptionStackTrace": null, "matches": ["/aa/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "/aa/a", "/aa/aA", "/aa/a0", "/aa/a.", "/aa/a ", "/aa/Aa", "/aa/0a", "/aa/aa/aa", "/aa", "/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/aa", "/a/aa", "/aA/aa", "/a0/aa", "/a./aa", "/a /aa", "/Aa/aa", "/0a/aa", "//a/aa", "//aa/aa", "aa/aa", "a", "/aa/aa"], "nonMatches": ["/aa/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "/aa/a|", "/aa/au", "/aa/at", "/aa/aq", "/aa/ao", "/aa/a\\", "/aa/a?", "/aa/a>", "/aa/a<", "/aa/a;", "/aa/a:", "/aa/a/", "/aa/a*", "/aa/a&", "/aa/|a", "/aa/ua", "/aa/ta", "/aa/qa", "/aa/oa", "/aa/\\a", "/aa/?a", "/aa/>a", "/aa/<a", "/aa/;a", "/aa/:a", "/aa//a", "/aa/.a", "/aa/*a", "/aa/&a", "/aa/ a", "/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/aa", "/a|/aa", "/au/aa", "/at/aa", "/aq/aa", "/ao/aa", "/a\\/aa", "/a?/aa", "/a>/aa", "/a</aa", "/a;/aa", "/a:/aa", "/a//aa", "/a*/aa", "/a&/aa", "/|a/aa", "/ua/aa", "/ta/aa", "/qa/aa", "/oa/aa", "/\\a/aa", "/?a/aa", "/>a/aa", "/<a/aa", "/;a/aa", "/:a/aa", "/.a/aa", "/*a/aa", "/&a/aa", "/ a/aa"]}, {"regex": "wsrp_rewrite\\?(?&lt;wsrp_uri&gt;[\\w%:&amp;\\\\/;.]*)/wsrp_rewrite", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?&"}, "matches": []}, {"regex": "^(0*100{1,1}\\.?((?<=\\.)0*)?%?$)|(^0*\\d{0,2}\\.?((?<=\\.)\\d*)?%?)$", "exceptionStackTrace": null, "matches": ["00.0", "00.00%", "00.%", "000%", "0000.0%", "000.0%", "0.0%", "0100.0", "0100.00%", "0100.%", "010.0%", "00100.0%", "100.0%", "", "100", "00.0%", "0100.0%"], "nonMatches": ["00.0%%", "00..0%", "0100.0%%", "0100..0%", "01000%", "01000.0%"]}, {"regex": "^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$", "exceptionStackTrace": null, "matches": ["evil@evil.evil.AA]", "evil@-.AA]", "evil@eVil.AA]", "evil@EVIL.AA]", "evil@ev4il.AA]", "evil@e.AA]", "evil@6.AA]", "evil@[0.0.0.000]", "evil@[0.0.0.AAAA]", "evil@[0.0.0.aA]", "evil@[0.0.000.AA]", "evil@[0.000.0.AA]", "evil@[000.0.0.AA]", ".@[0.0.0.AA]", "-@[0.0.0.AA]", "eVil@[0.0.0.AA]", "EVIL@[0.0.0.AA]", "ev_il@[0.0.0.AA]", "ev4il@[0.0.0.AA]", "e@[0.0.0.AA]", "6@[0.0.0.AA]", "_@[0.0.0.AA]", "evil@evil.AA", "evil@[0.0.0.0", "evil@[0.0.0.AA", "evil@evil.AA]", "evil@[0.0.0.0]", "evil@[0.0.0.AA]"], "nonMatches": ["evil@AA]", "evil@].AA]", "evil@[.AA]", "evil@@.AA]", "evil@..AA]", "evil@ev_il.AA]", "evil@ev il.AA]", "evil@ .AA]", "evil@_.AA]", "evil@.AA]", "evil@[0.0.0.0000]", "evil@[0.0.0.]", "evil@[0.0.0.AA]]", "evil@[0.0.0.AAAAA]", "evil@[0.0.0.A]", "evil@[0.0.0000.AA]", "evil@[0.0..AA]", "evil@[0.0000.0.AA]", "evil@[0..0.AA]", "evil@[0000.0.0.AA]", "evil@[.0.0.AA]", "]@[0.0.0.AA]", "[@[0.0.0.AA]", "@@[0.0.0.AA]", "ev il@[0.0.0.AA]", " @[0.0.0.AA]", "@[0.0.0.AA]"]}, {"regex": "\\b(?:a(?:[nst]|re|nd)?|b[ey]|f(?:or|rom)|i[nst]?|o[fnr]|t(?:o|hat|he|his)|w(?:as|h(?:at|en|ere|ich|o)|i(?:th|ll)))\\b", "exceptionStackTrace": null, "matches": ["on", "of", "is", "in", "be", "as", "an", "i", "a", "will", "with", "who", "which", "where", "when", "what", "was", "this", "the", "that", "to", "or", "it", "from", "for", "by", "and", "are", "at"], "nonMatches": ["oa", "itt", "ia", "ba", "att", "aa"]}, {"regex": "(^\\d{9}[V|v|x|X]$)", "exceptionStackTrace": null, "matches": ["000000000|", "000000000x", "000000000v", "000000000V", "000000000X"], "nonMatches": ["000000000a", "000000000A", "0000000000X", "00000000X"]}, {"regex": "([0-9a-zA-Z]+)|([0-9a-zA-Z][0-9a-zA-Z\\\\s]+[0-9a-zA-Z]+)", "exceptionStackTrace": null, "matches": ["AevileVil", "AevilEVIL", "Aevilev_il", "Aevilev il", "Aevilev4il", "Aevile", "Aevil ", "Aevil6", "Aevil_", "A\\evil", "AeVilevil", "AEVILevil", "Aev_ilevil", "Aev ilevil", "Aev4ilevil", "Aeevil", "A evil", "A6evil", "A_evil", "Aevil", "aevilevil", "0evilevil", "eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", "6", "Aevilevil", "evil"], "nonMatches": [" ", "_", ""]}, {"regex": "(?<commentblock>((?m:^[\\t ]*\\/{2}[^\\n\\r\\v\\f]+[\\n\\r\\v\\f]*){2,})|(\\/\\*[\\w\\W]*?\\*\\/))", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<c"}, "matches": []}, {"regex": "^[^\\*]{0,}[\\*]{0,1}[^\\*]{0,}$", "exceptionStackTrace": null, "matches": ["evil*eVil", "evil*EVIL", "evil*ev_il", "evil*ev il", "evil*ev4il", "evil*e", "evil* ", "evil*6", "evil*_", "evil*", "evilevil", "eVil*evil", "EVIL*evil", "ev_il*evil", "ev il*evil", "ev4il*evil", "e*evil", " *evil", "6*evil", "_*evil", "*evil", "", "evil*evil"], "nonMatches": ["evil**", "evil**evil", "**evil"]}, {"regex": "&lt;(?i)(?=.[^&gt;]*runat=[&quot;]?server)(?&lt;TYPE&gt;\\S[^&gt;\\s]+).[^&gt;]*id=[&quot;]?(?&lt;NAME&gt;\\w+).[^&gt;]*&gt;", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?&"}, "matches": []}, {"regex": "(?<=(\\s|-|\\/|\\\\|\\())([A-G][b#]?[m]?((6\\/9|11|13|[679]))?((dim|dom|aug|sus|min|maj|add|no|m|M|-|\\+)(11|13|15|[23456789])?){0,2}([b#\\-\\+][59]){0,2}(\\/[A-G][b#]?)?)(?=(\\s|-|\\/|\\\\|\\)|$))", "exceptionStackTrace": null, "matches": ["A#m7dim11+9/A#", "A#m6dim11+9/A#", "A#m0dim11+9/A#", "A#m6/9dim8+9/A#", "A#m6/9dim7+9/A#", "A#m6/9dim6+9/A#", "A#m6/9dim5+9/A#", "A#m6/9dim4+9/A#", "A#m6/9dim3+9/A#", "A#m6/9dim2+9/A#", "A#m6/9dim0+9/A#", "A#m6/9dim11+9/A#/A#", "A#m6/9dim11+9/A", "A#m6/9dim11+9/Ab", "A#m6/9dim11+9+9+9/A#", "A#m6/9dim11+9+9/A#", "A#m6/9dim11/A#", "A#m6/9dim11+5/A#", "A#m6/9dim11+0/A#", "A#m6/9dim11b9/A#", "A#m6/9dim11a9/A#", "A#m6/9dim11-9/A#", "A#m6/9dim11#9/A#", "A#m6/9dim11dim11dim11+9/A#", "A#m6/9dim11dim11+9/A#", "A#m6/9+9/A#", "A#m6/9dim1111+9/A#", "A#m6/9dim+9/A#", "A#m6/96/9dim11+9/A#", "A#mdim11+9/A#", "A#mm6/9dim11+9/A#", "A#6/9dim11+9/A#", "A##m6/9dim11+9/A#", "Am6/9dim11+9/A#", "Abm6/9dim11+9/A#", "Aam6/9dim11+9/A#", "H#m6/9dim11+9/A#", "A#m9dim11+9/A#", "A#m13dim11+9/A#", "A#m11dim11+9/A#", "A#m6/9+11+9/A#", "A#m6/9-11+9/A#", "A#m6/9M11+9/A#", "A#m6/9m11+9/A#", "A#m6/9no11+9/A#", "A#m6/9add11+9/A#", "A#m6/9maj11+9/A#", "A#m6/9min11+9/A#", "A#m6/9sus11+9/A#", "A#m6/9aug11+9/A#", "A#m6/9dom11+9/A#", "A#m6/9dim9+9/A#", "A#m6/9dim15+9/A#", "A#m6/9dim13+9/A#", "A#m6/9dim11+9/A#"], "nonMatches": ["A#m6/9dim11+9", "A#m6/9dim11+9/A##", "A#m6/9dim11+9/Aa", "A#m6/9dim11+9/H#", "A"]}, {"regex": "(?=^.{1,254}$)(^(?:(?!\\d+\\.)[a-zA-Z0-9_\\-]{1,63}\\.?)+(?:[a-zA-Z]{2,})$)", "exceptionStackTrace": null, "matches": ["-.aA", "-.-.AA", "----------------------------------------------------------------.AA", "---------------------------------------------------------------.AA", "a.AA", "_.AA", "A.AA", "-AA", "-.AA"], "nonMatches": ["-.A", "AA", "-..AA", ".AA", "0.AA"]}, {"regex": "(?=^.{1,254}$)(^(?:[a-zA-Z0-9][a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9]\\.?)+(?:[a-zA-Z]{2,})$)", "exceptionStackTrace": null, "matches": ["0-0.aA", "0-0.0-0.AA", "0-0AA", "0-a.AA", "0-A.AA", "0-------------------------------------------------------------0.AA", "00.AA", "0a0.AA", "0A0.AA", "000.AA", "a-0.AA", "A-0.AA", "00AA", "0-0.AA"], "nonMatches": ["0-0.A", "AA", "0-0..AA", "0--------------------------------------------------------------0.AA"]}, {"regex": "^(([0-9])|([0-1][0-9])|([2][0-3])):(([0-9])|([0-5][0-9]))$", "exceptionStackTrace": null, "matches": ["20:0", "00:0", "0:00", "0:0"], "nonMatches": ["24:0", "0:60"]}, {"regex": " Fix Installation errors on operating systems1-877-373-8598", "exceptionStackTrace": null, "matches": [" Fix Installation errors on operating systems1-877-373-8598"], "nonMatches": []}, {"regex": "^(\\$)?(([1-9]\\d{0,2}(\\,\\d{3})*)|([1-9]\\d*)|(0))(\\.\\d{2})?$", "exceptionStackTrace": null, "matches": ["$100.00", "$1.00", "$10,000", "$10,000,000.00", "$100,000.00", "$1,000.00", "10,000.00", "0", "1", "$0.00", "$10.00", "$10,000.00"], "nonMatches": ["$00.00", "$10,000.00.00", "$10,000.000", "$10,000.0", "$10,0000.00", "$10,00.00", "$1000,000.00", "$00,000.00", "$$10,000.00"]}, {"regex": "&lt;!--((?!--&gt;).)*--&gt;", "exceptionStackTrace": null, "matches": ["&lt;!--aa--&gt;", "&lt;!--A--&gt;", "&lt;!--;--&gt;", "&lt;!--0--&gt;", "&lt;!-----&gt;", "&lt;!--&--&gt;", "&lt;!--!--&gt;", "&lt;!-- --&gt;", "&lt;!----&gt;", "&lt;!--a--&gt;"], "nonMatches": []}, {"regex": "\\/\\*((?!\\*\\/).)*\\*\\/", "exceptionStackTrace": null, "matches": ["/*aa*/", "/*A*/", "/*0*/", "/*/*/", "/***/", "/* */", "/**/", "/*a*/"], "nonMatches": []}, {"regex": "^(?<CountryPrefix>DK-)?(?<ZipCode>[0-9]{4})$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<C"}, "matches": []}, {"regex": "^([0-9a-fA-F]{1,2})(\\s[0-9a-fA-F]{1,2})*$", "exceptionStackTrace": null, "matches": ["A A A", "A AA", "A a", "A 0", "AA A", "a A", "0 A", "A", "A A"], "nonMatches": ["A AAA", "A ", "A g", "A G", "AAA A", " A", "g A", "G A"]}, {"regex": "(http|ftp|https):\\/\\/(\\w[\\w\\-_\\.]*\\.)?([_\\-\\w]+)(:[0-9]+)?([\\/[\\w_\\.-]+]*)\\/(\\.?\\w[\\w._-]*[\\w_-])?(#\\w+)?([\\w\\-\\.,@?^=%&amp;:\\~\\+#]*[\\w\\-\\@?^=%&amp;\\/\\~\\+#])?", "exceptionStackTrace": null, "matches": ["http://aevil.evil:0evil]/.aevil-#evilevil#evil#", "http://aevil.evil:0evil]/.aevil-#evil", "http://aevil.evil:0evil]/.aevil-#evilevil~", "http://aevil.evil:0evil]/.aevil-#evilevilp", "http://aevil.evil:0evil]/.aevil-#evilevilm", "http://aevil.evil:0evil]/.aevil-#evilevilb", "http://aevil.evil:0evil]/.aevil-#evilevila", "http://aevil.evil:0evil]/.aevil-#evilevil_", "http://aevil.evil:0evil]/.aevil-#evilevil^", "http://aevil.evil:0evil]/.aevil-#evilevilA", "http://aevil.evil:0evil]/.aevil-#evilevil@", "http://aevil.evil:0evil]/.aevil-#evilevil?", "http://aevil.evil:0evil]/.aevil-#evilevil=", "http://aevil.evil:0evil]/.aevil-#evilevil;", "http://aevil.evil:0evil]/.aevil-#evilevil0", "http://aevil.evil:0evil]/.aevil-#evilevil/", "http://aevil.evil:0evil]/.aevil-#evilevil-", "http://aevil.evil:0evil]/.aevil-#evilevil+", "http://aevil.evil:0evil]/.aevil-#evilevil&", "http://aevil.evil:0evil]/.aevil-#evilevil%", "http://aevil.evil:0evil]/.aevil-#evil~#", "http://aevil.evil:0evil]/.aevil-#evil^#", "http://aevil.evil:0evil]/.aevil-#evil]#", "http://aevil.evil:0evil]/.aevil-#evil[#", "http://aevil.evil:0evil]/.aevil-#evil@#", "http://aevil.evil:0evil]/.aevil-#evil?#", "http://aevil.evil:0evil]/.aevil-#evil=#", "http://aevil.evil:0evil]/.aevil-#evil;#", "http://aevil.evil:0evil]/.aevil-#evil:#", "http://aevil.evil:0evil]/.aevil-#evil/#", "http://aevil.evil:0evil]/.aevil-#evil.#", "http://aevil.evil:0evil]/.aevil-#evil-#", "http://aevil.evil:0evil]/.aevil-#evil,#", "http://aevil.evil:0evil]/.aevil-#evil+#", "http://aevil.evil:0evil]/.aevil-#evil&#", "http://aevil.evil:0evil]/.aevil-#evil%#", "http://aevil.evil:0evil]/.aevil-#evil##", "http://aevil.evil:0evil]/.aevil-#evileVil#", "http://aevil.evil:0evil]/.aevil-#evilEVIL#", "http://aevil.evil:0evil]/.aevil-#evilev_il#", "http://aevil.evil:0evil]/.aevil-#evilev il#", "http://aevil.evil:0evil]/.aevil-#evilev4il#", "http://aevil.evil:0evil]/.aevil-#evile#", "http://aevil.evil:0evil]/.aevil-#evil #", "http://aevil.evil:0evil]/.aevil-#evil6#", "http://aevil.evil:0evil]/.aevil-#evil_#", "http://aevil.evil:0evil]/.aevil-#evil#evilevil#", "http://aevil.evil:0evil]/.aevil-evil#", "http://aevil.evil:0evil]/.aevil-#eVilevil#", "http://aevil.evil:0evil]/.aevil-#EVILevil#", "http://aevil.evil:0evil]/.aevil-#ev_ilevil#", "http://aevil.evil:0evil]/.aevil-#ev ilevil#", "http://aevil.evil:0evil]/.aevil-#ev4ilevil#", "http://aevil.evil:0evil]/.aevil-#eevil#", "http://aevil.evil:0evil]/.aevil-# evil#", "http://aevil.evil:0evil]/.aevil-#6evil#", "http://aevil.evil:0evil]/.aevil-#_evil#", "http://aevil.evil:0evil]/.aevil-#evil#", "http://aevil.evil:0evil]/.aevil-.aevil-#evilevil#", "http://aevil.evil:0evil]/#evilevil#", "http://aevil.evil:0evil]/.aevila#evilevil#", "http://aevil.evil:0evil]/.aevil_#evilevil#", "http://aevil.evil:0evil]/.aevilA#evilevil#", "http://aevil.evil:0evil]/.aevil0#evilevil#", "http://aevil.evil:0evil]/.a~-#evilevil#", "http://aevil.evil:0evil]/.a^-#evilevil#", "http://aevil.evil:0evil]/.a]-#evilevil#", "http://aevil.evil:0evil]/.a[-#evilevil#", "http://aevil.evil:0evil]/.a@-#evilevil#", "http://aevil.evil:0evil]/.a?-#evilevil#", "http://aevil.evil:0evil]/.a=-#evilevil#", "http://aevil.evil:0evil]/.a;-#evilevil#", "http://aevil.evil:0evil]/.a:-#evilevil#", "http://aevil.evil:0evil]/.a/-#evilevil#", "http://aevil.evil:0evil]/.a.-#evilevil#", "http://aevil.evil:0evil]/.a--#evilevil#", "http://aevil.evil:0evil]/.a,-#evilevil#", "http://aevil.evil:0evil]/.a+-#evilevil#", "http://aevil.evil:0evil]/.a&-#evilevil#", "http://aevil.evil:0evil]/.a%-#evilevil#", "http://aevil.evil:0evil]/.a#-#evilevil#", "http://aevil.evil:0evil]/.aeVil-#evilevil#", "http://aevil.evil:0evil]/.aEVIL-#evilevil#", "http://aevil.evil:0evil]/.aev_il-#evilevil#", "http://aevil.evil:0evil]/.aev il-#evilevil#", "http://aevil.evil:0evil]/.aev4il-#evilevil#", "http://aevil.evil:0evil]/.ae-#evilevil#", "http://aevil.evil:0evil]/.a -#evilevil#", "http://aevil.evil:0evil]/.a6-#evilevil#", "http://aevil.evil:0evil]/.a_-#evilevil#", "http://aevil.evil:0evil]/.a-#evilevil#", "http://aevil.evil:0evil]/._evil-#evilevil#", "http://aevil.evil:0evil]/.Aevil-#evilevil#", "http://aevil.evil:0evil]/.0evil-#evilevil#", "http://aevil.evil:0evil]/..aevil-#evilevil#", "http://aevil.evil:0evil]/aevil-#evilevil#", "http://aevil.evil:0evil]]/.aevil-#evilevil#", "http://aevil.evil:0evil/.aevil-#evilevil#", "http://aevil.evil:0[]/.aevil-#evilevil#", "http://aevil.evil:0/]/.aevil-#evilevil#", "http://aevil.evil:0.]/.aevil-#evilevil#", "http://aevil.evil:0-]/.aevil-#evilevil#", "http://aevil.evil:0eVil]/.aevil-#evilevil#", "http://aevil.evil:0EVIL]/.aevil-#evilevil#", "http://aevil.evil:0ev_il]/.aevil-#evilevil#", "http://aevil.evil:0ev4il]/.aevil-#evilevil#", "http://aevil.evil:0e]/.aevil-#evilevil#", "http://aevil.evil:06]/.aevil-#evilevil#", "http://aevil.evil:0_]/.aevil-#evilevil#", "http://aevil.evilevil]/.aevil-#evilevil#", "http://aevil.evil:00evil]/.aevil-#evilevil#", "http://aevil./:0evil]/.aevil-#evilevil#", "http://aevil.-:0evil]/.aevil-#evilevil#", "http://aevil.eVil:0evil]/.aevil-#evilevil#", "http://aevil.EVIL:0evil]/.aevil-#evilevil#", "http://aevil.ev_il:0evil]/.aevil-#evilevil#", "http://aevil.ev4il:0evil]/.aevil-#evilevil#", "http://aevil.e:0evil]/.aevil-#evilevil#", "http://aevil.6:0evil]/.aevil-#evilevil#", "http://aevil._:0evil]/.aevil-#evilevil#", "http://aevil.aevil.evil:0evil]/.aevil-#evilevil#", "http://evil:0evil]/.aevil-#evilevil#", "http://a..evil:0evil]/.aevil-#evilevil#", "http://a-.evil:0evil]/.aevil-#evilevil#", "http://aeVil.evil:0evil]/.aevil-#evilevil#", "http://aEVIL.evil:0evil]/.aevil-#evilevil#", "http://aev_il.evil:0evil]/.aevil-#evilevil#", "http://aev4il.evil:0evil]/.aevil-#evilevil#", "http://ae.evil:0evil]/.aevil-#evilevil#", "http://a6.evil:0evil]/.aevil-#evilevil#", "http://a_.evil:0evil]/.aevil-#evilevil#", "http://a.evil:0evil]/.aevil-#evilevil#", "http://_evil.evil:0evil]/.aevil-#evilevil#", "http://Aevil.evil:0evil]/.aevil-#evilevil#", "http://0evil.evil:0evil]/.aevil-#evilevil#", "https://evilevil/", "ftp://evilevil/", "http://evilevil/", "https://aevil.evil:0evil]/.aevil-#evilevil#", "ftp://aevil.evil:0evil]/.aevil-#evilevil#", "http://aevil.evil:0evil]/.aevil-#evilevil#"], "nonMatches": ["http://aevil.evil:0~]/.aevil-#evilevil#", "http://aevil.evil:0^]/.aevil-#evilevil#", "http://aevil.evil:0]]/.aevil-#evilevil#", "http://aevil.evil:0@]/.aevil-#evilevil#", "http://aevil.evil:0?]/.aevil-#evilevil#", "http://aevil.evil:0=]/.aevil-#evilevil#", "http://aevil.evil:0;]/.aevil-#evilevil#", "http://aevil.evil:0:]/.aevil-#evilevil#", "http://aevil.evil:0,]/.aevil-#evilevil#", "http://aevil.evil:0+]/.aevil-#evilevil#", "http://aevil.evil:0&]/.aevil-#evilevil#", "http://aevil.evil:0%]/.aevil-#evilevil#", "http://aevil.evil:0#]/.aevil-#evilevil#", "http://aevil.evil:0ev il]/.aevil-#evilevil#", "http://aevil.evil:0 ]/.aevil-#evilevil#", "http://aevil.evil:0]/.aevil-#evilevil#", "http://aevil.evil:0:0evil]/.aevil-#evilevil#", "http://aevil.evil:evil]/.aevil-#evilevil#", "http://aevil.~:0evil]/.aevil-#evilevil#", "http://aevil.^:0evil]/.aevil-#evilevil#", "http://aevil.]:0evil]/.aevil-#evilevil#", "http://aevil.[:0evil]/.aevil-#evilevil#", "http://aevil.@:0evil]/.aevil-#evilevil#", "http://aevil.?:0evil]/.aevil-#evilevil#", "http://aevil.=:0evil]/.aevil-#evilevil#", "http://aevil.;:0evil]/.aevil-#evilevil#", "http://aevil.::0evil]/.aevil-#evilevil#", "http://aevil..:0evil]/.aevil-#evilevil#", "http://aevil.,:0evil]/.aevil-#evilevil#", "http://aevil.+:0evil]/.aevil-#evilevil#", "http://aevil.&:0evil]/.aevil-#evilevil#", "http://aevil.%:0evil]/.aevil-#evilevil#", "http://aevil.#:0evil]/.aevil-#evilevil#", "http://aevil.ev il:0evil]/.aevil-#evilevil#", "http://aevil. :0evil]/.aevil-#evilevil#", "http://aevil.:0evil]/.aevil-#evilevil#", "http://a~.evil:0evil]/.aevil-#evilevil#", "http://a^.evil:0evil]/.aevil-#evilevil#", "http://a].evil:0evil]/.aevil-#evilevil#", "http://a[.evil:0evil]/.aevil-#evilevil#", "http://a@.evil:0evil]/.aevil-#evilevil#", "http://a?.evil:0evil]/.aevil-#evilevil#", "http://a=.evil:0evil]/.aevil-#evilevil#", "http://a;.evil:0evil]/.aevil-#evilevil#", "http://a:.evil:0evil]/.aevil-#evilevil#", "http://a/.evil:0evil]/.aevil-#evilevil#", "http://a,.evil:0evil]/.aevil-#evilevil#", "http://a+.evil:0evil]/.aevil-#evilevil#", "http://a&.evil:0evil]/.aevil-#evilevil#", "http://a%.evil:0evil]/.aevil-#evilevil#", "http://a#.evil:0evil]/.aevil-#evilevil#", "http://aev il.evil:0evil]/.aevil-#evilevil#", "http://a .evil:0evil]/.aevil-#evilevil#"]}, {"regex": "^((\\([2-9]\\d{2}\\)[ ]?)|([2-9]\\d{2})[- ]?)\\d{3}[- ]?\\d{4}$", "exceptionStackTrace": null, "matches": ["200000 0000", "200-000 0000", "(200) 0000000", "(200) 000-0000", "(200)000 0000", "2000000000", "(200)0000000", "200 000 0000", "(200) 000 0000"], "nonMatches": ["200  000 0000", "2000 000 0000", "20 000 0000", "000 000 0000", "(200) 000 00000", "(200) 000 000", "(200) 000  0000", "(200) 0000 0000", "(200) 00 0000", "(200)  000 0000", "(2000) 000 0000", "(20) 000 0000", "(000) 000 0000"]}, {"regex": "^(?:\\s*(Sun|Mon|Tue|Wed|Thu|Fri|Sat),\\s*)?(0?[1-9]|[1-2][0-9]|3[01])\\s+(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s+(19[0-9]{2}|[2-9][0-9]{3}|[0-9]{2})\\s+(2[0-3]|[0-1][0-9]):([0-5][0-9])(?::(60|[0-5][0-9]))?\\s+([-\\+][0-9]{2}[0-5][0-9]|(?:UT|GMT|(?:E|C|M|P)(?:ST|DT)|[A-IK-Z]))(\\s*\\((\\\\\\(|\\\\\\)|(?<=[^\\\\])\\((?<C>)|(?<=[^\\\\])\\)(?<-C>)|[^\\(\\)]*)*(?(C)(?!))\\))*\\s*$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<C"}, "matches": []}, {"regex": "^\\s*\\w+\\s*\\((\\s*((&quot;|&#39;)([^\\3]+|\\\\\\3)\\3|\\$?[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]|[0-9]*)\\s*,?)*\\s*\\)", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 127"}, "matches": [], "nonMatches": []}, {"regex": "^(?<lat>(-?(90|(\\d|[1-8]\\d)(\\.\\d{1,6}){0,1})))\\,{1}(?<long>(-?(180|(\\d|\\d\\d|1[0-7]\\d)(\\.\\d{1,6}){0,1})))$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<l"}, "matches": []}, {"regex": "^[a-zA-Z0-9]+([a-zA-Z0-9\\-\\.]+)?\\.(com|org|net|mil|edu|COM|ORG|NET|MIL|EDU)$", "exceptionStackTrace": null, "matches": ["evilevilevil.com", "evil..com", "evil-.com", "evileVil.com", "evilEVIL.com", "evilev4il.com", "evile.com", "evil6.com", "eVilevil.com", "EVILevil.com", "ev4ilevil.com", "eevil.com", "6evil.com", "evil.EDU", "evil.MIL", "evil.NET", "evil.ORG", "evil.COM", "evil.edu", "evil.mil", "evil.net", "evil.org", "evil.com", "evilevil.EDU", "evilevil.MIL", "evilevil.NET", "evilevil.ORG", "evilevil.COM", "evilevil.edu", "evilevil.mil", "evilevil.net", "evilevil.org", "evilevil.com"], "nonMatches": ["evilev_il.com", "evilev il.com", "evil .com", "evil_.com", "ev_ilevil.com", "ev ilevil.com", " evil.com", "_evil.com"]}, {"regex": "^[0-9](\\.[0-9]+)?$", "exceptionStackTrace": null, "matches": ["0.00", "0", "0.0"], "nonMatches": ["0.0.0", "0."]}, {"regex": "(\\d{1,3},(\\d{3},)*\\d{3}(\\.\\d{1,3})?|\\d{1,3}(\\.\\d{3})?)$", "exceptionStackTrace": null, "matches": ["0.000.000", "0.0000", "0.00", "0000.000", "000.000", ".000", "0,000,000.0.0", "0,000,000", "0,000,000.0000", "0,000,000.000", "0,000,0000.0", "0,000,00.0", "0,000,000,000.0", "0,000.0", "0,0000,000.0", "0,00,000.0", "0000,000,000.0", "000,000,000.0", ",000,000.0", "0", "0,000", "0.000", "0,000,000.0"], "nonMatches": ["0,000,000."]}, {"regex": "\\$[0-9]?[0-9]?[0-9]?((\\,[0-9][0-9][0-9])*)?(\\.[0-9][0-9]?)?$", "exceptionStackTrace": null, "matches": ["$000,000", "$000,000.0", "$000,000,000.00", "$000.00", "$00,000.00", "$", "$000,000.00"], "nonMatches": ["$000,000.00.00", "$000,000.000", "$0000,000.00"]}, {"regex": "^[2-5](2|4|6|8|0)(A(A)?|B|C|D(D(D)?)?|E|F|G|H)$", "exceptionStackTrace": null, "matches": ["22DD", "20A", "28A", "26A", "24A", "22D", "22A", "20AA", "28AA", "26AA", "24AA", "22H", "22G", "22F", "22E", "22DDD", "22C", "22B", "22AA"], "nonMatches": ["22DDDDD", "22DDDD", "22AAA", "02AA"]}, {"regex": "^[A-Z][a-z]+((eir|(n|l)h)(a|o))$", "exceptionStackTrace": null, "matches": ["Aeeira", "Aevillha", "Aevilnha", "Aevileiro", "Aevileira"], "nonMatches": ["AeVileira", "AEVILeira", "Aev_ileira", "Aev ileira", "Aev4ileira", "A eira", "A6eira", "A_eira", "Aeira"]}, {"regex": "^(\\d)(\\.)(\\d)+\\s(x)\\s(10)(e|E|\\^)(-)?(\\d)+$", "exceptionStackTrace": null, "matches": ["0.0 x 10e-00", "0.00 x 10e-0", "0.0 x 10^0", "0.0 x 10E0", "0.0 x 10e0", "0.0 x 10^-0", "0.0 x 10E-0", "0.0 x 10e-0"], "nonMatches": ["0.0 x 10e-", "0.0 x 10e--0", "0. x 10e-0"]}, {"regex": "^([A-Z]{2}|[A-Z]\\d|\\d[A-Z])[1-9](\\d{1,3})?$", "exceptionStackTrace": null, "matches": ["AA100", "AA1000", "0A1", "A01", "AA1", "0A10", "A010", "AA10"], "nonMatches": ["AA10000", "AA00", "AAA10", "A10"]}, {"regex": "^[A-Z][a-z]+(tz)?(man|berg)$", "exceptionStackTrace": null, "matches": ["Aeviltztzman", "Aetzman", "Atzman", "Aevilberg", "Aevilman", "Aeviltzberg", "Aeviltzman"], "nonMatches": ["AeViltzman", "AEVILtzman", "Aev_iltzman", "Aev iltzman", "Aev4iltzman", "A tzman", "A6tzman", "A_tzman"]}, {"regex": "^(Op(.|us))(\\s)[1-9](\\d)*((,)?(\\s)N(o.|um(.|ber))\\s[1-9](\\d)*)?$", "exceptionStackTrace": null, "matches": ["Opa 10, NumA 10", "Opa 10, Num0 10", "Opa 10, Num, 10", "Opa 10, Num  10", "Opa 10", "Opa 10, Noa 100", "Opa 10, Noa 1", "Opa 10, NoA 10", "Opa 10, No0 10", "Opa 10, No, 10", "Opa 10, No  10", "Opa 10 Noa 10", "Opa 100, Noa 10", "Opa 1, Noa 10", "OpA 10, Noa 10", "Op0 10, Noa 10", "Op, 10, Noa 10", "Op  10, Noa 10", "Opus 1", "Opa 1", "Opus 10, Noa 10", "Opa 10, Number 10", "Opa 10, Numa 10", "Opa 10, Noa 10"], "nonMatches": ["Opa 10, Noa 10, Noa 10", "Opa 10, Noa 00", "Opa 10,, Noa 10", "Opa 00, Noa 10"]}, {"regex": "^[A-Z][a-z]+((e(m|ng)|str)a)$", "exceptionStackTrace": null, "matches": ["Aeema", "Aevilstra", "Aevilenga", "Aevilema"], "nonMatches": ["AeVilema", "AEVILema", "Aev_ilema", "Aev ilema", "Aev4ilema", "A ema", "A6ema", "A_ema", "Aema"]}, {"regex": "^[A-Z]{4}[1-8](\\d){2}$", "exceptionStackTrace": null, "matches": ["AAAA100"], "nonMatches": ["AAAA1000", "AAAA10", "AAAA000", "AAAAA100", "AAA100"]}, {"regex": "^[A-Z]{3}(\\s)?[0-9]{4}$", "exceptionStackTrace": null, "matches": ["AAA0000", "AAA 0000"], "nonMatches": ["AAA 00000", "AAA 000", "AAA  0000", "AAAA 0000", "AA 0000"]}, {"regex": "^((\\d){3})(-)?(\\d){2}(-)?(\\d){4}(A|B[1-7]?|M|T|C[1-4]|D)$", "exceptionStackTrace": null, "matches": ["000-00-0000B", "000-000000A", "00000-0000A", "000000000D", "000000000C1", "000000000T", "000000000M", "000000000B", "000000000A", "000-00-0000D", "000-00-0000C1", "000-00-0000T", "000-00-0000M", "000-00-0000B1", "000-00-0000A"], "nonMatches": ["000-00-0000C0", "000-00-0000B11", "000-00-0000B0", "000-00-00000A", "000-00-000A", "000-00--0000A", "000-000-0000A", "000-0-0000A", "000--00-0000A", "0000-00-0000A", "00-00-0000A"]}, {"regex": "^[A-Z][a-z]+((i)?e(a)?(u)?[r(re)?|x]?)$", "exceptionStackTrace": null, "matches": ["Aevilieau", "Aevilieau|", "Aevilieaur", "Aevilieaue", "Aevilieau?", "Aevilieau)", "Aevilieau(", "Aevilieax", "Aevilieux", "Aeviliieaux", "Aevileaux", "Aeieaux", "Aieaux", "Aevile", "Aevilieaux"], "nonMatches": ["Aevilieauxx", "Aevilieaua", "Aevilieauux", "Aevilieaaux", "AeVilieaux", "AEVILieaux", "Aev_ilieaux", "Aev ilieaux", "Aev4ilieaux", "A ieaux", "A6ieaux", "A_ieaux"]}, {"regex": "^[A-Z]{3}(\\d|[A-Z]){8,12}$", "exceptionStackTrace": null, "matches": ["AAA000000000000", "AAAA00000000", "AAA0AAAAAAA", "AAAAAAAAAAA", "AAA00000000"], "nonMatches": ["AAA0000000000000", "AAA0000000", "AA00000000"]}, {"regex": "^R(\\d){8}", "exceptionStackTrace": null, "matches": ["R000000000", "R00000000"], "nonMatches": ["R0000000"]}, {"regex": "^[A-Z][a-z]+(o(i|u)(n|(v)?r(t)?|s|t|x)(e(s)?)?)$", "exceptionStackTrace": null, "matches": ["Aeviloivres", "Aeviloirtes", "Aeviloine", "Aeoines", "Aeviloun", "Aeviloix", "Aeviloit", "Aevilois", "Aeviloir", "Aeviloin", "Aevilounes", "Aeviloixes", "Aeviloites", "Aeviloises", "Aeviloivrtes", "Aeviloines"], "nonMatches": ["Aeviloivrttes", "Aeviloivvrtes", "Aeviloineses", "Aeviloiness", "AeViloines", "AEVILoines", "Aev_iloines", "Aev iloines", "Aev4iloines", "A oines", "A6oines", "A_oines", "Aoines"]}, {"regex": "^[A-G](b|#)?((m(aj)?|M|aug|dim|sus)([2-7]|9|13)?)?(\\/[A-G](b|#)?)?$", "exceptionStackTrace": null, "matches": ["Abmaj2", "Abmaj2/A", "Ab/Ab", "Abmaj/Ab", "Abm2/Ab", "Amaj2/Ab", "A", "A#maj2/Ab", "Absus2/Ab", "Abdim2/Ab", "Abaug2/Ab", "AbM2/Ab", "Abmaj13/Ab", "Abmaj9/Ab", "Abmaj2/A#", "Abmaj2/Ab"], "nonMatches": ["Abmaj2/Ab/Ab", "Abmaj2/Abb", "Abmaj2/Hb", "Abmaj2maj2/Ab", "Abmaj22/Ab", "Abmaj0/Ab", "Abmajaj2/Ab", "Abbmaj2/Ab", "Hbmaj2/Ab"]}, {"regex": "~[A-Z][a-z]+(b|ch|d|g|j|k|l|m|n|p|r|s|t|v|z)(ian)$", "exceptionStackTrace": null, "matches": ["~Aebian", "~Aevilzian", "~Aevilvian", "~Aeviltian", "~Aevilsian", "~Aevilrian", "~Aevilpian", "~Aevilnian", "~Aevilmian", "~Aevillian", "~Aevilkian", "~Aeviljian", "~Aevilgian", "~Aevildian", "~Aevilchian", "~Aevilbian"], "nonMatches": ["~AeVilbian", "~AEVILbian", "~Aev_ilbian", "~Aev ilbian", "~Aev4ilbian", "~A bian", "~A6bian", "~A_bian", "~Abian"]}, {"regex": "\\b[P|p]?(OST|ost)?\\.?\\s*[O|o|0]?(ffice|FFICE)?\\.?\\s*[B|b][O|o|0]?[X|x]?\\.?\\s+[#]?(\\d+)\\b", "exceptionStackTrace": null, "matches": ["pOST. 0ffice. b0x. #00", "pOST. 0ffice. b0x. 0", "pOST. 0ffice. b0x.  #0", "pOST. 0ffice. b0x #0", "pOST. 0ffice. b0. #0", "pOST. 0ffice. b0|. #0", "pOST. 0ffice. b0X. #0", "pOST. 0ffice. bx. #0", "pOST. 0ffice. b|x. #0", "pOST. 0ffice. box. #0", "pOST. 0ffice. bOx. #0", "pOST. 0ffice. |0x. #0", "pOST. 0ffice. B0x. #0", "pOST. 0ffice.  b0x. #0", "pOST. 0ffice.b0x. #0", "pOST. 0ffice.. b0x. #0", "pOST. 0ffice b0x. #0", "pOST. 0fficeffice. b0x. #0", "pOST. 0. b0x. #0", "pOST. 00ffice. b0x. #0", "pOST. ffice. b0x. #0", "pOST. |ffice. b0x. #0", "pOST. office. b0x. #0", "pOST. affice. b0x. #0", "pOST. Office. b0x. #0", "pOST. Affice. b0x. #0", "pOST. 1ffice. b0x. #0", "pOST.  0ffice. b0x. #0", "pOST.0ffice. b0x. #0", "pOST.. 0ffice. b0x. #0", "pOST 0ffice. b0x. #0", "pOSTOST. 0ffice. b0x. #0", "p. 0ffice. b0x. #0", "ppOST. 0ffice. b0x. #0", "OST. 0ffice. b0x. #0", "|OST. 0ffice. b0x. #0", "aOST. 0ffice. b0x. #0", "POST. 0ffice. b0x. #0", "AOST. 0ffice. b0x. #0", "b 0", "post. 0ffice. b0x. #0", "pOST. 0FFICE. b0x. #0", "pOST. 0ffice. b0x. #0"], "nonMatches": ["pOST. 0ffice. b0x. #", "pOST. 0ffice. b0x. ##0", "pOST. 0ffice. b0x.#0", "pOST. 0ffice. b0x.. #0", "pOST. 0ffice. b0xx. #0", "pOST. 0ffice. b0a. #0", "pOST. 0ffice. b0A. #0", "pOST. 0ffice. b00x. #0", "pOST. 0ffice. bax. #0", "pOST. 0ffice. bAx. #0", "pOST. 0ffice. b1x. #0", "pOST. 0ffice. a0x. #0", "pOST. 0ffice. A0x. #0"]}, {"regex": "123", "exceptionStackTrace": null, "matches": ["123"], "nonMatches": []}, {"regex": "^[0-9]{6}-(?:[0-9]+){1,3}[0-9A-Za-z]$", "exceptionStackTrace": null, "matches": ["000000-0A", "000000-00", "000000-0000a", "000000-000a", "000000-00a", "000000-0a"], "nonMatches": ["000000-a", "0000000-0a", "00000-0a"]}, {"regex": "/*d(9,15)", "exceptionStackTrace": null, "matches": ["//d9,15", "d9,15", "/d9,15"], "nonMatches": []}, {"regex": "^((0[123456789]|1[0-2])(0[1-3]|1[0-9]|2[0-9]))|((0[13456789]|1[0-2])(30))|((0[13578]|1[02])(31))$", "exceptionStackTrace": null, "matches": ["1031", "0731", "0531", "0331", "0131", "0830", "0730", "0630", "0530", "0430", "0330", "0130", "0801", "0701", "0601", "0501", "0401", "0301", "0201", "0101", "1231", "0831", "1030", "0930", "1001", "0920", "0910", "0901"], "nonMatches": ["1131", "0031", "1330", "0030", "1301", "0900", "0001"]}, {"regex": "^(?!0?2/3)(?!0?2/29/.{3}[13579])(?!0?2/29/.{2}[02468][26])(?!0?2/29/.{2}[13579][048])(?!(0?[469]|11)/31)(?!0?2/29/[13579][01345789]0{2})(?!0?2/29/[02468][1235679]0{2})(0?[1-9]|1[012])/(0?[1-9]|[12][0-9]|3[01])/([0-9]{4})$", "exceptionStackTrace": null, "matches": ["11/01/0000", "10/01/0000", "01/30/0000", "01/10/0000", "01/1/0000", "1/01/0000", "12/1/0000", "1/31/0000", "1/20/0000", "1/1/0000", "12/01/0000", "01/31/0000", "01/20/0000", "01/01/0000"], "nonMatches": ["13/01/0000", "01/32/0000", "01/01/00000", "01/01/000", "01/00/0000", "01/001/0000", "00/01/0000", "001/01/0000"]}, {"regex": "^213\\.61\\.220\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])$", "exceptionStackTrace": null, "matches": ["213.61.220.0", "213.61.220.10", "213.61.220.100", "213.61.220.200", "213.61.220.250"], "nonMatches": ["213.61.220.00", "213.61.220.1000", "213.61.220.256"]}, {"regex": "(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])^[\\w!@$#.+-]{8,64}$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["-----------------------------------------------------------------", "----------------------------------------------------------------", "-------", "a-------", "_-------", "A-------", "@-------", "0-------", ".-------", "+-------", "$-------", "#-------", "!-------", "--------"]}, {"regex": "((0[1-9])|(1[02]))/\\d{2}", "exceptionStackTrace": null, "matches": ["10/00", "01/000", "12/00", "01/00"], "nonMatches": ["11/00", "01/0", "00/00"]}, {"regex": "((http\\://|https\\://|ftp\\://)|(www.))+(([a-zA-Z0-9\\.-]+\\.[a-zA-Z]{2,4})|([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}))(/[a-zA-Z0-9%:/-_\\?\\.&#39;~]*)?", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (bad range): Invalid range: /-_"}, "matches": [], "nonMatches": []}, {"regex": "(((file|gopher|news|nntp|telnet|http|ftp|https|ftps|sftp)://)|(www\\.))+(([a-zA-Z0-9\\._-]+\\.[a-zA-Z]{2,6})|([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}))(/[a-zA-Z0-9\\&amp;%_\\./-~-]*)?", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (bad range): Invalid range: /-~"}, "matches": [], "nonMatches": []}, {"regex": "^(([0][1-9]|[1|2][0-9]|[3][0|1])[./-]([0][1-9]|[1][0-2])[./-]([0-9]{4})|(([0][1-9]|[1|2][0-9]|[3][0|1])[./-]([0][1-9]|[1][0-2])[./-]([0-9]{4}))[ ]([0|1][0-2])[:](([0-5][0-9]))([:](([0-5][0-9])))?)$", "exceptionStackTrace": null, "matches": ["3|-01-0000 10:00:00", "30-01-0000 10:00:00", "|0-01-0000 10:00:00", "10-01-0000 10:00:00", "01-01-0000 |0:00:00", "01-01-0000 00:00:00", "01-01/0000 10:00:00", "01-01.0000 10:00:00", "01/01-0000 10:00:00", "01.01-0000 10:00:00", "3|-01-0000", "30-01-0000", "|0-01-0000", "10-01-0000", "01-01/0000", "01-01.0000", "01/01-0000", "01.01-0000", "31-01-0000 10:00", "20-01-0000 10:00", "01-10-0000 10:00", "01-01-0000 10:00", "31-01-0000 10:00:00", "20-01-0000 10:00:00", "01-10-0000 10:00:00", "01-01-0000 10:00:00", "31-01-0000", "20-01-0000", "01-10-0000", "01-01-0000"], "nonMatches": ["32-01-0000 10:00:00", "01-13-0000 10:00:00", "01-01-0000 10:00:00:00", "01-01-0000 10:00:60", "01-01-0000 10:60:00", "01-01-0000 13:00:00", "01-01-0000 20:00:00", "01-01-00000 10:00:00", "01-01-000 10:00:00", "01-00-0000 10:00:00", "00-01-0000 10:00:00", "32-01-0000", "01-13-0000", "01-01-00000", "01-01-000", "01-00-0000", "00-01-0000"]}, {"regex": "(http://|https://)([a-zA-Z0-9]+\\.[a-zA-Z0-9\\-]+|[a-zA-Z0-9\\-]+)\\.[a-zA-Z\\.]{2,6}(/[a-zA-Z0-9\\.\\?=/#%&\\+-]+|/|)", "exceptionStackTrace": null, "matches": ["http://-.../evil", "http://eVil.../evil", "http://EVIL.../evil", "http://ev4il.../evil", "http://e.../evil", "http://6.../evil", "http://evil.evil.../?", "http://evil.evil.../=", "http://evil.evil.../:", "http://evil.evil...//", "http://evil.evil.../.", "http://evil.evil.../-", "http://evil.evil.../+", "http://evil.evil.../&", "http://evil.evil.../%", "http://evil.evil.../#", "http://evil.evil.../eVil", "http://evil.evil.../EVIL", "http://evil.evil.../ev_il", "http://evil.evil.../ev il", "http://evil.evil.../ev4il", "http://evil.evil.../e", "http://evil.evil.../ ", "http://evil.evil.../6", "http://evil.evil.../_", "http://evil.evil......../evil", "http://evil.evil......./evil", "http://evil.evil../evil", "http://evil.evil.a./evil", "http://evil.evil.A./evil", "http://evil...../evil", "http://evil.-.../evil", "http://evil.eVil.../evil", "http://evil.EVIL.../evil", "http://evil.ev_il.../evil", "http://evil.ev il.../evil", "http://evil.ev4il.../evil", "http://evil.e.../evil", "http://evil.6.../evil", "http://evil..../evil", "http://eVil.evil.../evil", "http://EVIL.evil.../evil", "http://ev4il.evil.../evil", "http://e.evil.../evil", "http://6.evil.../evil", "http://evil.evil...", "https://evil.evil.../evil", "http://evil.../evil", "http://evil.evil.../", "http://evil.evil.../evil"], "nonMatches": ["http://?.../evil", "http://=.../evil", "http://:.../evil", "http:///.../evil", "http://..../evil", "http://+.../evil", "http://&.../evil", "http://%.../evil", "http://#.../evil", "http://ev_il.../evil", "http://ev il.../evil", "http:// .../evil", "http://_.../evil", "http://.../evil", "http://evil.?.../evil", "http://evil.=.../evil", "http://evil.:.../evil", "http://evil./.../evil", "http://evil.+.../evil", "http://evil.&.../evil", "http://evil.%.../evil", "http://evil.#.../evil", "http://evil. .../evil", "http://evil._.../evil", "http://ev_il.evil.../evil", "http://ev il.evil.../evil", "http:// .evil.../evil", "http://_.evil.../evil", "http://.evil.../evil"]}, {"regex": "^0[23489]{1}(\\-)?[^0\\D]{1}\\d{6}$", "exceptionStackTrace": null, "matches": ["08-1000000", "04-1000000", "03-1000000", "02-1000000", "091000000", "09-1000000"], "nonMatches": ["09-10000000", "09-100000", "09-11000000", "09-000000", "09-a000000", "09-_000000", "09-A000000", "09-0000000", "09--000000", "09- 000000", "09--1000000", "099-1000000", "0-1000000", "00-1000000"]}, {"regex": "^0(5[012345678]|6[47]){1}(\\-)?[^0\\D]{1}\\d{5}$", "exceptionStackTrace": null, "matches": ["064-100000", "057-100000", "056-100000", "055-100000", "054-100000", "053-100000", "052-100000", "051-100000", "050-100000", "067100000", "058100000", "067-100000", "058-100000"], "nonMatches": ["060-100000", "058-1000000", "058-10000", "058-1100000", "058-00000", "058-a00000", "058-_00000", "058-A00000", "058-000000", "058--00000", "058- 00000", "058--100000", "05858-100000", "0-100000", "059-100000"]}, {"regex": ".+\\.([^.]+)$", "exceptionStackTrace": null, "matches": ["evil.eVil", "evil.EVIL", "evil.ev_il", "evil.ev il", "evil.ev4il", "evil.e", "evil. ", "evil.6", "evil._", "..evil", "eVil.evil", "EVIL.evil", "ev_il.evil", "ev il.evil", "ev4il.evil", "e.evil", " .evil", "6.evil", "_.evil", "evil.evil"], "nonMatches": ["evil..", "evil.", ".evil"]}, {"regex": "^(smtp)\\.([\\w\\-]+)\\.[\\w\\-]{2,3}$", "exceptionStackTrace": null, "matches": ["smtp.evil.---", "smtp.evil.a-", "smtp.evil._-", "smtp.evil.A-", "smtp.evil.0-", "smtp.-.--", "smtp.eVil.--", "smtp.EVIL.--", "smtp.ev_il.--", "smtp.ev4il.--", "smtp.e.--", "smtp.6.--", "smtp._.--", "smtp.evil.--"], "nonMatches": ["smtp.evil.----", "smtp.evil.-", "smtp...--", "smtp.ev il.--", "smtp. .--", "smtp..--"]}, {"regex": "(([Gg]rand)?([Ff]ather|[Mm]other|mom|pop|son|daughter|parent|((p|m)a)|uncle|aunt)s?)|(([cC]ousin)?((?<=[cC]ousin)\\s+(?=brother|sister))?(?<siblings>brother|sister)?((?<=brother|sister)s?)?)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<s"}, "matches": []}, {"regex": "^(?:(?:[\\w\\.\\-_]+@[\\w\\d]+(?:\\.[\\w]{2,6})+)[,;]?\\s?)+$", "exceptionStackTrace": null, "matches": ["evil@evil.aa; evil@evil.aa; ", "evil@evil.aa;", "evil@evil.aa ", "evil@evil.aa, ", "evil@evil.aa.aa; ", "evil@evil.aaaaaa; ", "evil@evil._a; ", "evil@evil.Aa; ", "evil@evil.0a; ", "evil@eVil.aa; ", "evil@EVIL.aa; ", "evil@ev_il.aa; ", "evil@ev4il.aa; ", "evil@e.aa; ", "evil@6.aa; ", "evil@_.aa; ", ".@evil.aa; ", "-@evil.aa; ", "eVil@evil.aa; ", "EVIL@evil.aa; ", "ev_il@evil.aa; ", "ev4il@evil.aa; ", "e@evil.aa; ", "6@evil.aa; ", "_@evil.aa; ", "evil@evil.aa", "evil@evil.aa; "], "nonMatches": ["", "evil@evil.aa;  ", "evil@evil.aa;; ", "evil@evil; ", "evil@evil.aaaaaaa; ", "evil@evil.a; ", "evil@ev il.aa; ", "evil@ .aa; ", "evil@.aa; ", "@@evil.aa; ", ";@evil.aa; ", ",@evil.aa; ", "ev il@evil.aa; ", " @evil.aa; ", "@evil.aa; "]}, {"regex": "^((A[LKSZR])|(C[AOT])|(D[EC])|(F[ML])|(G[AU])|(HI)|(I[DLNA])|(K[SY])|(LA)|(M[EHDAINSOT])|(N[EVHJMYCD])|(MP)|(O[HKR])|(P[WAR])|(RI)|(S[CD])|(T[NX])|(UT)|(V[TIA])|(W[AVIY]))$", "exceptionStackTrace": null, "matches": ["WV", "WI", "WA", "VT", "VI", "TN", "SC", "PW", "PA", "OK", "OH", "NY", "NV", "NM", "NJ", "NH", "NE", "NC", "MS", "MO", "MN", "MI", "MH", "ME", "MD", "MA", "KS", "IN", "IL", "ID", "GA", "FM", "DE", "CO", "CA", "AZ", "AS", "AL", "AK", "WY", "VA", "UT", "TX", "SD", "RI", "PR", "OR", "MP", "ND", "MT", "LA", "KY", "IA", "HI", "GU", "FL", "DC", "CT", "AR"], "nonMatches": ["WB", "VB", "TA", "SA", "PB", "OA", "NA", "MB", "KA", "IB", "GB", "FA", "DA", "CB", "AA"]}, {"regex": "^((A[LKZR])|(C[AOT])|(D[EC])|(FL)|(GA)|(HI)|(I[DLNA])|(K[SY])|(LA)|(M[EDAINSOT])|(N[EVHJMYCD])|(O[HKR])|(PA)|(RI)|(S[CD])|(T[NX])|(UT)|(V[TA])|(W[AVIY]))$", "exceptionStackTrace": null, "matches": ["WV", "WI", "WA", "VT", "TN", "SC", "OK", "OH", "NY", "NV", "NM", "NJ", "NH", "NE", "NC", "MS", "MO", "MN", "MI", "ME", "MD", "MA", "KS", "IN", "IL", "ID", "DE", "CO", "CA", "AZ", "AL", "AK", "WY", "VA", "UT", "TX", "SD", "RI", "PA", "OR", "ND", "MT", "LA", "KY", "IA", "HI", "GA", "FL", "DC", "CT", "AR"], "nonMatches": ["WB", "VB", "TA", "SA", "OA", "NA", "MB", "KA", "IB", "DA", "CB", "AA"]}, {"regex": "^((http://)|(https://))((([a-zA-Z0-9_-]*).?([a-zA-Z0-9_-]*))|(([a-zA-Z0-9_-]*).?([a-zA-Z0-9_-]*).?([a-zA-Z0-9_-]*)))/?([a-zA-Z0-9_/?%=&+#.-~]*)$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (bad range): Invalid range: .-~"}, "matches": [], "nonMatches": []}, {"regex": "Facebook help number", "exceptionStackTrace": null, "matches": ["Facebook help number"], "nonMatches": []}, {"regex": "^([a-zA-Z0-9_\\-\\._]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-_]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$", "exceptionStackTrace": null, "matches": ["evil@evil.evil.AA]", "evil@-.AA]", "evil@eVil.AA]", "evil@EVIL.AA]", "evil@ev_il.AA]", "evil@ev4il.AA]", "evil@e.AA]", "evil@6.AA]", "evil@_.AA]", "evil@[0.0.0.000]", "evil@[0.0.0.AAAA]", "evil@[0.0.0.aA]", "evil@[0.0.000.AA]", "evil@[0.000.0.AA]", "evil@[000.0.0.AA]", ".@[0.0.0.AA]", "-@[0.0.0.AA]", "eVil@[0.0.0.AA]", "EVIL@[0.0.0.AA]", "ev_il@[0.0.0.AA]", "ev4il@[0.0.0.AA]", "e@[0.0.0.AA]", "6@[0.0.0.AA]", "_@[0.0.0.AA]", "evil@evil.AA", "evil@[0.0.0.0", "evil@[0.0.0.AA", "evil@evil.AA]", "evil@[0.0.0.0]", "evil@[0.0.0.AA]"], "nonMatches": ["evil@AA]", "evil@].AA]", "evil@[.AA]", "evil@@.AA]", "evil@..AA]", "evil@ev il.AA]", "evil@ .AA]", "evil@.AA]", "evil@[0.0.0.0000]", "evil@[0.0.0.]", "evil@[0.0.0.AA]]", "evil@[0.0.0.AAAAA]", "evil@[0.0.0.A]", "evil@[0.0.0000.AA]", "evil@[0.0..AA]", "evil@[0.0000.0.AA]", "evil@[0..0.AA]", "evil@[0000.0.0.AA]", "evil@[.0.0.AA]", "]@[0.0.0.AA]", "[@[0.0.0.AA]", "@@[0.0.0.AA]", "ev il@[0.0.0.AA]", " @[0.0.0.AA]", "@[0.0.0.AA]"]}, {"regex": "<(?![!/]?[ABIU][>\\s])[^>]*>", "exceptionStackTrace": null, "matches": ["<>>", "<<>", "</>", "<!>", "<eVil>", "<EVIL>", "<ev_il>", "<ev il>", "<ev4il>", "<e>", "< >", "<6>", "<_>", "<>", "<evil>"], "nonMatches": []}, {"regex": "Web Application Development ", "exceptionStackTrace": null, "matches": ["Web Application Development "], "nonMatches": []}, {"regex": "^(http(s?):\\/\\/)?(www\\.)?youtu(be)?\\.([a-z])+\\/(watch(.*?)(\\?|\\&)v=)?(.*?)(&(.)*)?$", "exceptionStackTrace": null, "matches": ["https://www.youtube.a/watchevil?v=evil&a&a", "https://www.youtube.a/watchevil?v=evil", "https://www.youtube.a/watchevil?v=evil&aa", "https://www.youtube.a/watchevil?v=evil&", "https://www.youtube.a/watchevil?v=evil&A", "https://www.youtube.a/watchevil?v=evil&?", "https://www.youtube.a/watchevil?v=evil&=", "https://www.youtube.a/watchevil?v=evil&:", "https://www.youtube.a/watchevil?v=evil&0", "https://www.youtube.a/watchevil?v=evil&/", "https://www.youtube.a/watchevil?v=evil&.", "https://www.youtube.a/watchevil?v=evil&&", "https://www.youtube.a/watchevil?v=evil& ", "https://www.youtube.a/watchevil?v=?&a", "https://www.youtube.a/watchevil?v==&a", "https://www.youtube.a/watchevil?v=:&a", "https://www.youtube.a/watchevil?v=/&a", "https://www.youtube.a/watchevil?v=.&a", "https://www.youtube.a/watchevil?v=&&a", "https://www.youtube.a/watchevil?v=eVil&a", "https://www.youtube.a/watchevil?v=EVIL&a", "https://www.youtube.a/watchevil?v=ev_il&a", "https://www.youtube.a/watchevil?v=ev il&a", "https://www.youtube.a/watchevil?v=ev4il&a", "https://www.youtube.a/watchevil?v=e&a", "https://www.youtube.a/watchevil?v= &a", "https://www.youtube.a/watchevil?v=6&a", "https://www.youtube.a/watchevil?v=_&a", "https://www.youtube.a/watchevil?v=&a", "https://www.youtube.a/watchevil?v=watchevil?v=evil&a", "https://www.youtube.a/evil&a", "https://www.youtube.a/watch??v=evil&a", "https://www.youtube.a/watch=?v=evil&a", "https://www.youtube.a/watch:?v=evil&a", "https://www.youtube.a/watch/?v=evil&a", "https://www.youtube.a/watch.?v=evil&a", "https://www.youtube.a/watch&?v=evil&a", "https://www.youtube.a/watcheVil?v=evil&a", "https://www.youtube.a/watchEVIL?v=evil&a", "https://www.youtube.a/watchev_il?v=evil&a", "https://www.youtube.a/watchev il?v=evil&a", "https://www.youtube.a/watchev4il?v=evil&a", "https://www.youtube.a/watche?v=evil&a", "https://www.youtube.a/watch ?v=evil&a", "https://www.youtube.a/watch6?v=evil&a", "https://www.youtube.a/watch_?v=evil&a", "https://www.youtube.a/watch?v=evil&a", "https://www.youtube.aa/watchevil?v=evil&a", "https://www.youtu.a/watchevil?v=evil&a", "https://youtube.a/watchevil?v=evil&a", "www.youtube.a/watchevil?v=evil&a", "http://www.youtube.a/watchevil?v=evil&a", "youtu.a/", "https://www.youtube.a/watchevil&v=evil&a", "https://www.youtube.a/watchevil?v=evil&a"], "nonMatches": ["https://www.youtube./watchevil?v=evil&a", "https://www.youtubebe.a/watchevil?v=evil&a", "https://www.www.youtube.a/watchevil?v=evil&a", "https://https://www.youtube.a/watchevil?v=evil&a", "httpss://www.youtube.a/watchevil?v=evil&a"]}, {"regex": "^([9]{1})([234789]{1})([0-9]{8})$", "exceptionStackTrace": null, "matches": ["9800000000", "9700000000", "9400000000", "9300000000", "9200000000", "9900000000"], "nonMatches": ["99000000000", "990000000", "9000000000", "99900000000", "900000000"]}, {"regex": "[\\w\\-_\\+\\(\\)]{0,}[\\.png|\\.PNG]{4}", "exceptionStackTrace": null, "matches": ["evilGGGGG", "evil|GGG", "evilpGGG", "evilnGGG", "evilgGGG", "evilPGGG", "evilNGGG", "evil.GGG", "|GGGG", ".GGGG", "-GGGG", "+GGGG", ")GGGG", "(GGGG", "eVilGGGG", "EVILGGGG", "ev_ilGGGG", "ev ilGGGG", "ev4ilGGGG", "eGGGG", " GGGG", "6GGGG", "_GGGG", "GGGG", "evilGGGG"], "nonMatches": ["evilGGG", "evilaGGG", "evilAGGG"]}, {"regex": "(http://)?(www\\.)?(youtube|yimg|youtu)\\.([A-Za-z]{2,4}|[A-Za-z]{2}\\.[A-Za-z]{2})/(watch\\?v=)?[A-Za-z0-9\\-_]{6,12}(&[A-Za-z0-9\\-_]{1,}=[A-Za-z0-9\\-_]{1,})*", "exceptionStackTrace": null, "matches": ["http://www.youtube.aa.Aa/watch?v=______&evil=evil", "http://www.youtube.Aa.aa/watch?v=______&evil=evil", "http://www.youtube.aa/watch?v=______&evil=evil&evil=evil", "http://www.youtube.aa/watch?v=______", "http://www.youtube.aa/watch?v=______&evil=?", "http://www.youtube.aa/watch?v=______&evil==", "http://www.youtube.aa/watch?v=______&evil=:", "http://www.youtube.aa/watch?v=______&evil=/", "http://www.youtube.aa/watch?v=______&evil=.", "http://www.youtube.aa/watch?v=______&evil=-", "http://www.youtube.aa/watch?v=______&evil=&", "http://www.youtube.aa/watch?v=______&evil=eVil", "http://www.youtube.aa/watch?v=______&evil=EVIL", "http://www.youtube.aa/watch?v=______&evil=ev_il", "http://www.youtube.aa/watch?v=______&evil=ev il", "http://www.youtube.aa/watch?v=______&evil=ev4il", "http://www.youtube.aa/watch?v=______&evil=e", "http://www.youtube.aa/watch?v=______&evil= ", "http://www.youtube.aa/watch?v=______&evil=6", "http://www.youtube.aa/watch?v=______&evil=_", "http://www.youtube.aa/watch?v=______&evil=", "http://www.youtube.aa/watch?v=______&?=evil", "http://www.youtube.aa/watch?v=______&==evil", "http://www.youtube.aa/watch?v=______&:=evil", "http://www.youtube.aa/watch?v=______&/=evil", "http://www.youtube.aa/watch?v=______&.=evil", "http://www.youtube.aa/watch?v=______&-=evil", "http://www.youtube.aa/watch?v=______&&=evil", "http://www.youtube.aa/watch?v=______&eVil=evil", "http://www.youtube.aa/watch?v=______&EVIL=evil", "http://www.youtube.aa/watch?v=______&ev_il=evil", "http://www.youtube.aa/watch?v=______&ev il=evil", "http://www.youtube.aa/watch?v=______&ev4il=evil", "http://www.youtube.aa/watch?v=______&e=evil", "http://www.youtube.aa/watch?v=______& =evil", "http://www.youtube.aa/watch?v=______&6=evil", "http://www.youtube.aa/watch?v=______&_=evil", "http://www.youtube.aa/watch?v=______&=evil", "http://www.youtube.aa/watch?v=_____________&evil=evil", "http://www.youtube.aa/watch?v=____________&evil=evil", "http://www.youtube.aa/watch?v=a_____&evil=evil", "http://www.youtube.aa/watch?v=A_____&evil=evil", "http://www.youtube.aa/watch?v=0_____&evil=evil", "http://www.youtube.aa/watch?v=-_____&evil=evil", "http://www.youtube.aa/______&evil=evil", "http://www.youtube.aaaa/watch?v=______&evil=evil", "http://www.youtube.Aa/watch?v=______&evil=evil", "http://www.www.youtube.aa/watch?v=______&evil=evil", "http://youtube.aa/watch?v=______&evil=evil", "http://http://www.youtube.aa/watch?v=______&evil=evil", "www.youtube.aa/watch?v=______&evil=evil", "youtu.aa/______", "yimg.aa/______", "youtube.aa.aa/______", "youtube.aa/______", "http://www.youtu.aa/watch?v=______&evil=evil", "http://www.yimg.aa/watch?v=______&evil=evil", "http://www.youtube.aa.aa/watch?v=______&evil=evil", "http://www.youtube.aa/watch?v=______&evil=evil"], "nonMatches": ["http://www.youtube.aa.aaa/watch?v=______&evil=evil", "http://www.youtube.aa.a/watch?v=______&evil=evil", "http://www.youtube.aaa.aa/watch?v=______&evil=evil", "http://www.youtube.a.aa/watch?v=______&evil=evil", "http://www.youtube.aa/watch?v=_____&evil=evil", "http://www.youtube.aa/watch?v=watch?v=______&evil=evil", "http://www.youtube.aaaaa/watch?v=______&evil=evil", "http://www.youtube.a/watch?v=______&evil=evil"]}, {"regex": "^[1-9]+[0-9]*$", "exceptionStackTrace": null, "matches": ["100", "110", "1", "10"], "nonMatches": ["0", "00"]}, {"regex": "^[a-zA-Z]{1}[-][0-9]{7}[-][a-zA-Z]{1}$", "exceptionStackTrace": null, "matches": ["A-0000000-a", "a-0000000-A", "A-0000000-A"], "nonMatches": ["A-0000000-AA", "A-0000000-", "A-00000000-A", "A-000000-A", "AA-0000000-A", "-0000000-A"]}, {"regex": "^[0-9+]{5}-[0-9+]{7}-[0-9]{1}$", "exceptionStackTrace": null, "matches": ["+++++-0++++++-0", "0++++-+++++++-0", "+++++-+++++++-0"], "nonMatches": ["+++++-+++++++-00", "+++++-+++++++-", "+++++-++++++++-0", "+++++-++++++-0", "++++++-+++++++-0", "++++-+++++++-0"]}, {"regex": "^\\s*-?((\\d{1,3}(\\.(\\d){3})*)|\\d*)(,\\d{1,2})?\\s?(\\u20AC)?\\s*$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 8364"}, "matches": [], "nonMatches": []}, {"regex": "^(([a-z])+.)+[A-Z]([a-z])+$", "exceptionStackTrace": null, "matches": ["aaAaa", "aaaaAa", "a_Aa", "aAAa", "a0Aa", "a Aa", "aaaAa", "aaAa"], "nonMatches": ["aaA", "Aa", "aAa"]}, {"regex": "^(http|https|ftp)\\://(((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])|([a-zA-Z0-9_\\-\\.])+\\.(com|net|org|edu|int|mil|gov|arpa|biz|aero|name|coop|info|pro|museum|uk|me))((:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\\-\\._\\?\\,\\&#39;/\\\\\\+&amp;%\\$#\\=~])*)$", "exceptionStackTrace": null, "matches": ["http://...com:evil/~", "http://a.com:evil/~", "http://_.com:evil/~", "http://A.com:evil/~", "http://0.com:evil/~", "http://-.com:evil/~", "http://250.200.200.250:evil/~", "http://250.250.250.250:evil/~~", "http://250.250.250.250:evil/", "http://250.250.250.250:evil/p", "http://250.250.250.250:evil/m", "http://250.250.250.250:evil/b", "http://250.250.250.250:evil/a", "http://250.250.250.250:evil/_", "http://250.250.250.250:evil/\\", "http://250.250.250.250:evil/A", "http://250.250.250.250:evil/?", "http://250.250.250.250:evil/=", "http://250.250.250.250:evil/;", "http://250.250.250.250:evil/9", "http://250.250.250.250:evil/3", "http://250.250.250.250:evil/0", "http://250.250.250.250:evil//", "http://250.250.250.250:evil/.", "http://250.250.250.250:evil/-", "http://250.250.250.250:evil/,", "http://250.250.250.250:evil/+", "http://250.250.250.250:evil/&", "http://250.250.250.250:evil/%", "http://250.250.250.250:evil/$", "http://250.250.250.250:evil/#", "http://250.250.250.250:evil//~", "http://250.250.250.250:evil~", "http://250.250.250.250/~", "http://250.250.250.250:eVil/~", "http://250.250.250.250:EVIL/~", "http://250.250.250.250:ev_il/~", "http://250.250.250.250:ev4il/~", "http://250.250.250.250:e/~", "http://250.250.250.250:6/~", "http://250.250.250.250:_/~", "http://250.250.250.250:/~", "ftp://250.250.250.250", "https://250.250.250.250", "http://..me", "http://..uk", "http://..museum", "http://..pro", "http://..info", "http://..coop", "http://..name", "http://..aero", "http://..biz", "http://..arpa", "http://..gov", "http://..mil", "http://..int", "http://..edu", "http://..org", "http://..net", "http://..com", "http://0.250.250.250", "http://10.250.250.250", "http://100.250.250.250", "http://200.250.250.250", "http://250.250.250.0", "http://250.250.250.10", "http://250.250.250.100", "http://250.250.250.200", "http://250.250.250.250", "ftp://250.250.250.250:evil/~", "https://250.250.250.250:evil/~", "http://..me:evil/~", "http://..uk:evil/~", "http://..museum:evil/~", "http://..pro:evil/~", "http://..info:evil/~", "http://..coop:evil/~", "http://..name:evil/~", "http://..aero:evil/~", "http://..biz:evil/~", "http://..arpa:evil/~", "http://..gov:evil/~", "http://..mil:evil/~", "http://..int:evil/~", "http://..edu:evil/~", "http://..org:evil/~", "http://..net:evil/~", "http://..com:evil/~", "http://0.0.0.250:evil/~", "http://10.10.10.250:evil/~", "http://100.100.100.250:evil/~", "http://200.200.200.250:evil/~", "http://250.250.250.0:evil/~", "http://250.250.250.10:evil/~", "http://250.250.250.100:evil/~", "http://250.250.250.200:evil/~", "http://250.250.250.250:evil/~"], "nonMatches": ["http://.com:evil/~", "http://00.10.10.250:evil/~", "http://250.250.250.00:evil/~", "http://250.250.250.250:evil:evil/~", "http://250.250.250.250:ev il/~", "http://250.250.250.250: /~", "http://250.250.250.256:evil/~", "http://250.250.250.250.250:evil/~", "http://250.250.250:evil/~", "http://256.250.250.250:evil/~"]}, {"regex": "^.*(yourdomain.com).*$", "exceptionStackTrace": null, "matches": ["evilyourdomainacomeVil", "evilyourdomainacomEVIL", "evilyourdomainacomev_il", "evilyourdomainacomev il", "evilyourdomainacomev4il", "evilyourdomainacome", "evilyourdomainacom ", "evilyourdomainacom6", "evilyourdomainacom_", "evilyourdomainacom", "evilyourdomain_comevil", "evilyourdomainAcomevil", "evilyourdomain0comevil", "evilyourdomain comevil", "eVilyourdomainacomevil", "EVILyourdomainacomevil", "ev_ilyourdomainacomevil", "ev ilyourdomainacomevil", "ev4ilyourdomainacomevil", "eyourdomainacomevil", " yourdomainacomevil", "6yourdomainacomevil", "_yourdomainacomevil", "yourdomainacomevil", "yourdomainacom", "evilyourdomainacomevil"], "nonMatches": []}, {"regex": "^(Jan(uary)?|Feb(ruary)?|Mar(ch)?|Apr(il)?|May|Jun(e)?|Jul(y)?|Aug(ust)?|Sep(tember)?|Sept|Oct(ober)?|Nov(ember)?|Dec(ember)?)$", "exceptionStackTrace": null, "matches": ["Dec", "Nov", "Oct", "Sep", "Aug", "Jul", "Jun", "Apr", "Mar", "Feb", "Jan", "December", "November", "October", "Sept", "September", "August", "July", "June", "May", "April", "March", "February", "January"], "nonMatches": ["Decemberember", "Novemberember", "Octoberober", "Septembertember", "Augustust", "Julyy", "Junee", "Aprilil", "Marchch", "Februaryruary", "Januaryuary"]}, {"regex": "(?<=(?:^|,)&quot;)(?:[^&quot;]|&quot;&quot;)+", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "look-behind requires fixed-width pattern"}, "matches": []}, {"regex": "^((\\+)?(\\d{2}[-]))?(\\d{10}){1}?$", "exceptionStackTrace": null, "matches": ["00-0000000000", "0000000000", "+00-0000000000"], "nonMatches": ["+00-00000000000000000000", "+00-", "+00-00000000000", "+00-000000000", "+00-+00-0000000000", "+000-0000000000", "+0-0000000000", "++00-0000000000"]}, {"regex": "^(([1][0-2])|([0]?[1-9]{1}))\\/(([0-2]?\\d{1})|([3][0,1]{1}))\\/(([1]{1}[9]{1}[9]{1}\\d{1})|([2-9]{1}\\d{3}))$", "exceptionStackTrace": null, "matches": ["1/00/1990", "10/3/1990", "10/3,/1990", "10/30/1990", "1/0/1990", "10/0/2000", "10/0/1990", "01/00/1990", "10/31/1990", "10/00/2000", "10/00/1990"], "nonMatches": ["011/00/1990", "0/00/1990", "00/00/1990", "001/00/1990", "10/311/1990", "10/32/1990", "10/00/20000", "10/00/200", "10/00/22000", "10/00/000", "10/00/0000", "10/00/19900", "10/00/199", "10/00/19990", "10/00/190", "10/00/11990", "10/00/990", "10/000/1990", "13/00/1990"]}, {"regex": "(^([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9])$)|(^([0-9]|[1][0-9]|[2][0-3])$)", "exceptionStackTrace": null, "matches": ["20", "10", "0", "20:00", "00:00", "0:00"], "nonMatches": ["24", "24:00", "0:60"]}, {"regex": "^\\s+|\\s+$", "exceptionStackTrace": null, "matches": ["  ", " "], "nonMatches": [""]}, {"regex": "[0][x][0-9a-fA-F]+", "exceptionStackTrace": null, "matches": ["0xAA", "0xa", "0x0", "0xA"], "nonMatches": ["0x", "0xg", "0xG"]}, {"regex": "(?<=[\\w\\s](?:[\\.\\!\\? ]+[\\x20]*[\\x22\\xBB]*))(?:\\s+(?![\\x22\\xBB](?!\\w)))", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "look-behind requires fixed-width pattern"}, "matches": []}, {"regex": "gfdhgdfh", "exceptionStackTrace": null, "matches": ["gfdhgdfh"], "nonMatches": []}, {"regex": "\\d{4}-\\d{4}-\\d{2}|\\d{5}-\\d{3}-\\d{2}|\\d{5}-\\d{4}-\\d{1}|\\d{5}-\\*\\d{3}-\\d{2}", "exceptionStackTrace": null, "matches": ["00000-*000-000", "000000-*000-00", "000000-0000-0", "00000-000-000", "000000-000-00", "0000-0000-000", "00000-0000-00", "00000-*000-00", "00000-0000-0", "00000-000-00", "0000-0000-00"], "nonMatches": ["00000-*000-0", "00000-*0000-00", "00000-*00-00", "0000-*000-00", "00000-0000-", "00000-00000-0", "00000-000-0", "00000-00-00", "0000-0000-0", "0000-00000-00", "0000-000-00", "000-0000-00"]}, {"regex": "wwwwwwww", "exceptionStackTrace": null, "matches": ["wwwwwwww"], "nonMatches": []}, {"regex": "^((([0]?[1-9]|1[0-2])(:|\\.)(00|15|30|45)?( )?(AM|am|aM|Am|PM|pm|pM|Pm))|(([0]?[0-9]|1[0-9]|2[0-3])(:|\\.)(00|15|30|45)?))$", "exceptionStackTrace": null, "matches": ["00:", "0:00", "01:00AM", "01: AM", "1:00 AM", "20:", "10:", "0.", "0:", "10:AM", "1.AM", "1:Pm", "1:pM", "1:pm", "1:PM", "1:Am", "1:aM", "1:am", "1:AM", "20:00", "10:00", "00.00", "00:45", "00:30", "00:15", "00:00", "10:00 AM", "01.00 AM", "01:45 AM", "01:30 AM", "01:15 AM", "01:00 Pm", "01:00 pM", "01:00 pm", "01:00 PM", "01:00 Am", "01:00 aM", "01:00 am", "01:00 AM"], "nonMatches": ["24:00", "00:0000", "000:00", "13:00 AM", "01:00  AM", "01:0000 AM", "00:00 AM", "001:00 AM"]}, {"regex": "^[0]|[0-3]\\.(\\d?\\d?)|[4].[0]$", "exceptionStackTrace": null, "matches": ["4A0", "400", "4.0", "4 0", "0.000", "0.0", "0.", "4a0", "0.00", "0"], "nonMatches": ["4.00"]}, {"regex": "^(\\w(([.-])*)(\\s)?)+$", "exceptionStackTrace": null, "matches": ["a- a- ", "a-", "a-- ", "a ", "a. ", "_- ", "A- ", "0- ", "a", "a- "], "nonMatches": ["", "a-  "]}, {"regex": "^(0[1-9]|[12]\\d|3[01])(0[1-9]|1[0-2])([5-9]\\d\\+|\\d\\d-|[01]\\dA)\\d{3}[\\dABCDEFHJKLMNPRSTUVWXY]$", "exceptionStackTrace": null, "matches": ["300150+000Y", "100150+000Y", "010100A000Y", "010150+000X", "010150+000W", "010150+000V", "010150+000U", "010150+000T", "010150+000S", "010150+000R", "010150+000P", "010150+000N", "010150+000M", "010150+000L", "010150+000K", "010150+000J", "010150+000H", "010150+000F", "010150+000E", "010150+000D", "010150+000C", "010150+000B", "010150+000A", "010150+0000", "310150+000Y", "200150+000Y", "011050+000Y", "010110A000Y", "010100-000Y", "010150+000Y"], "nonMatches": ["320150+000Y", "011350+000Y", "010120A000Y", "010150+000G", "010150+0000Y", "010150+00Y", "010100+000Y", "010050+000Y", "000150+000Y"]}, {"regex": "https://alphajackedhelp.com/tryvexin-singapore/", "exceptionStackTrace": null, "matches": ["https://alphajackedhelpAcom/tryvexin-singapore/", "https://alphajackedhelp:com/tryvexin-singapore/", "https://alphajackedhelp0com/tryvexin-singapore/", "https://alphajackedhelp/com/tryvexin-singapore/", "https://alphajackedhelp-com/tryvexin-singapore/", "https://alphajackedhelp com/tryvexin-singapore/", "https://alphajackedhelpacom/tryvexin-singapore/"], "nonMatches": []}, {"regex": "^(000000[1-9])$|^(00000[1-9][0-9])$|^(0000[1-9][0-9][0-9])$|^(000[1-9][0-9][0-9][0-9])$|^(00[1-9][0-9][0-9][0-9][0-9])$|^(0[1-9][0-9][0-9][0-9][0-9][0-9])$|^([1-9][0-9][0-9][0-9][0-9][0-9][0-9])$", "exceptionStackTrace": null, "matches": ["1000000", "0100000", "0010000", "0001000", "0000100", "0000010", "0000001"], "nonMatches": ["0000000"]}, {"regex": "^((0[1-9])|(1[0-2]))\\/((0[1-9])|(1[0-9])|(2[0-9])|(3[0-1]))\\/(\\d{4})$", "exceptionStackTrace": null, "matches": ["10/01/0000", "01/30/0000", "01/20/0000", "01/10/0000", "01/01/0000"], "nonMatches": ["13/01/0000", "01/32/0000", "01/01/00000", "01/01/000", "01/00/0000", "00/01/0000"]}, {"regex": "^(((\\d{4}((0[13578]|1[02])(0[1-9]|[12]\\d|3[01])|(0[13456789]|1[012])(0[1-9]|[12]\\d|30)|02(0[1-9]|1\\d|2[0-8])))|((\\d{2}[02468][048]|\\d{2}[13579][26]))0229)){0,8}$", "exceptionStackTrace": null, "matches": ["00920229", "00760229", "00560229", "00360229", "00160229", "00840229", "00800229", "00680229", "00480229", "00280229", "00080229", "00000229", "00000910", "00000601", "00000401", "00001101", "00001001", "00000830", "00000810", "0000080100000801000008010000080100000801000008010000080100000801", "00000701", "00000501", "00000301", "00000101", "", "00960229", "00880229", "00000220", "00000210", "00000201", "00000930", "00000920", "00000901", "00001201", "00000831", "00000820", "00000801"], "nonMatches": ["00900229", "00060229", "000960229", "0960229", "00810229", "00180229", "000880229", "0880229", "00000200", "00001301", "00000900", "00000832", "000008010000080100000801000008010000080100000801000008010000080100000801", "00000800", "00000001", "000000801", "0000801"]}, {"regex": "([a-z\\s.\\-_&#39;])*<\\w+([-+.&#39;]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*\\>", "exceptionStackTrace": null, "matches": [";<evil;evil@evil.evil.evil.eVil>", ";<evil;evil@evil.evil.evil.EVIL>", ";<evil;evil@evil.evil.evil.ev_il>", ";<evil;evil@evil.evil.evil.ev4il>", ";<evil;evil@evil.evil.evil.e>", ";<evil;evil@evil.evil.evil.6>", ";<evil;evil@evil.evil.evil._>", ";<evil;evil@evil.evil.evil-evil>", ";<evil;evil@evil.evil.eVil.evil>", ";<evil;evil@evil.evil.EVIL.evil>", ";<evil;evil@evil.evil.ev_il.evil>", ";<evil;evil@evil.evil.ev4il.evil>", ";<evil;evil@evil.evil.e.evil>", ";<evil;evil@evil.evil.6.evil>", ";<evil;evil@evil.evil._.evil>", ";<evil;evil@evil.evil.evil.evil.evil>", ";<evil;evil@evil.evil.evil>", ";<evil;evil@evil.eVil.evil.evil>", ";<evil;evil@evil.EVIL.evil.evil>", ";<evil;evil@evil.ev_il.evil.evil>", ";<evil;evil@evil.ev4il.evil.evil>", ";<evil;evil@evil.e.evil.evil>", ";<evil;evil@evil.6.evil.evil>", ";<evil;evil@evil._.evil.evil>", ";<evil;evil@evil-evil.evil.evil>", ";<evil;evil@eVil.evil.evil.evil>", ";<evil;evil@EVIL.evil.evil.evil>", ";<evil;evil@ev_il.evil.evil.evil>", ";<evil;evil@ev4il.evil.evil.evil>", ";<evil;evil@e.evil.evil.evil>", ";<evil;evil@6.evil.evil.evil>", ";<evil;evil@_.evil.evil.evil>", ";<evil;evil;evil@evil.evil.evil.evil>", ";<evil@evil.evil.evil.evil>", ";<evil;eVil@evil.evil.evil.evil>", ";<evil;EVIL@evil.evil.evil.evil>", ";<evil;ev_il@evil.evil.evil.evil>", ";<evil;ev4il@evil.evil.evil.evil>", ";<evil;e@evil.evil.evil.evil>", ";<evil;6@evil.evil.evil.evil>", ";<evil;_@evil.evil.evil.evil>", ";<evil9evil@evil.evil.evil.evil>", ";<evil3evil@evil.evil.evil.evil>", ";<evil0evil@evil.evil.evil.evil>", ";<evil.evil@evil.evil.evil.evil>", ";<evil-evil@evil.evil.evil.evil>", ";<evil+evil@evil.evil.evil.evil>", ";<evil&evil@evil.evil.evil.evil>", ";<evil#evil@evil.evil.evil.evil>", ";<eVil;evil@evil.evil.evil.evil>", ";<EVIL;evil@evil.evil.evil.evil>", ";<ev_il;evil@evil.evil.evil.evil>", ";<ev4il;evil@evil.evil.evil.evil>", ";<e;evil@evil.evil.evil.evil>", ";<6;evil@evil.evil.evil.evil>", ";<_;evil@evil.evil.evil.evil>", ";;<evil;evil@evil.evil.evil.evil>", "<evil;evil@evil.evil.evil.evil>", "a<evil;evil@evil.evil.evil.evil>", "_<evil;evil@evil.evil.evil.evil>", "9<evil;evil@evil.evil.evil.evil>", "3<evil;evil@evil.evil.evil.evil>", "0<evil;evil@evil.evil.evil.evil>", ".<evil;evil@evil.evil.evil.evil>", "-<evil;evil@evil.evil.evil.evil>", "&<evil;evil@evil.evil.evil.evil>", "#<evil;evil@evil.evil.evil.evil>", " <evil;evil@evil.evil.evil.evil>", "<evil@evil.evil>", ";<evil;evil@evil.evil.evil.evil>"], "nonMatches": [";<evil;evil@evil.evil.evil.ev il>", ";<evil;evil@evil.evil.evil. >", ";<evil;evil@evil.evil.evil.>", ";<evil;evil@evil.evil.ev il.evil>", ";<evil;evil@evil.evil. .evil>", ";<evil;evil@evil.evil..evil>", ";<evil;evil@evil.ev il.evil.evil>", ";<evil;evil@evil. .evil.evil>", ";<evil;evil@evil..evil.evil>", ";<evil;evil@ev il.evil.evil.evil>", ";<evil;evil@ .evil.evil.evil>", ";<evil;evil@.evil.evil.evil>", ";<evil;ev il@evil.evil.evil.evil>", ";<evil; @evil.evil.evil.evil>", ";<evil;@evil.evil.evil.evil>", ";<ev il;evil@evil.evil.evil.evil>", ";< ;evil@evil.evil.evil.evil>", ";<;evil@evil.evil.evil.evil>"]}, {"regex": "([a-z\\s.\\-_&#39;])*<\\w+([-+.&#39;]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*\\>|^\\w+([-+.&#39;]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*", "exceptionStackTrace": null, "matches": ["evil;evil@evil.evil.evil.eVil", "evil;evil@evil.evil.evil.EVIL", "evil;evil@evil.evil.evil.ev_il", "evil;evil@evil.evil.evil.ev il", "evil;evil@evil.evil.evil.ev4il", "evil;evil@evil.evil.evil.e", "evil;evil@evil.evil.evil. ", "evil;evil@evil.evil.evil.6", "evil;evil@evil.evil.evil._", "evil;evil@evil.evil.evil.", "evil;evil@evil.evil.evil-evil", "evil;evil@evil.evil.eVil.evil", "evil;evil@evil.evil.EVIL.evil", "evil;evil@evil.evil.ev_il.evil", "evil;evil@evil.evil.ev il.evil", "evil;evil@evil.evil.ev4il.evil", "evil;evil@evil.evil.e.evil", "evil;evil@evil.evil. .evil", "evil;evil@evil.evil.6.evil", "evil;evil@evil.evil._.evil", "evil;evil@evil.evil..evil", "evil;evil@evil.evil.evil.evil.evil", "evil;evil@evil.evil.evil", "evil;evil@evil.eVil.evil.evil", "evil;evil@evil.EVIL.evil.evil", "evil;evil@evil.ev_il.evil.evil", "evil;evil@evil.ev il.evil.evil", "evil;evil@evil.ev4il.evil.evil", "evil;evil@evil.e.evil.evil", "evil;evil@evil.6.evil.evil", "evil;evil@evil._.evil.evil", "evil;evil@evil-evil.evil.evil", "evil;evil@eVil.evil.evil.evil", "evil;evil@EVIL.evil.evil.evil", "evil;evil@ev_il.evil.evil.evil", "evil;evil@ev4il.evil.evil.evil", "evil;evil@e.evil.evil.evil", "evil;evil@6.evil.evil.evil", "evil;evil@_.evil.evil.evil", "evil;evil;evil@evil.evil.evil.evil", "evil@evil.evil.evil.evil", "evil;eVil@evil.evil.evil.evil", "evil;EVIL@evil.evil.evil.evil", "evil;ev_il@evil.evil.evil.evil", "evil;ev4il@evil.evil.evil.evil", "evil;e@evil.evil.evil.evil", "evil;6@evil.evil.evil.evil", "evil;_@evil.evil.evil.evil", "evil9evil@evil.evil.evil.evil", "evil3evil@evil.evil.evil.evil", "evil0evil@evil.evil.evil.evil", "evil.evil@evil.evil.evil.evil", "evil-evil@evil.evil.evil.evil", "evil+evil@evil.evil.evil.evil", "evil&evil@evil.evil.evil.evil", "evil#evil@evil.evil.evil.evil", "eVil;evil@evil.evil.evil.evil", "EVIL;evil@evil.evil.evil.evil", "ev_il;evil@evil.evil.evil.evil", "ev4il;evil@evil.evil.evil.evil", "e;evil@evil.evil.evil.evil", "6;evil@evil.evil.evil.evil", "_;evil@evil.evil.evil.evil", ";<evil;evil@evil.evil.evil.eVil>", ";<evil;evil@evil.evil.evil.EVIL>", ";<evil;evil@evil.evil.evil.ev_il>", ";<evil;evil@evil.evil.evil.ev4il>", ";<evil;evil@evil.evil.evil.e>", ";<evil;evil@evil.evil.evil.6>", ";<evil;evil@evil.evil.evil._>", ";<evil;evil@evil.evil.evil-evil>", ";<evil;evil@evil.evil.eVil.evil>", ";<evil;evil@evil.evil.EVIL.evil>", ";<evil;evil@evil.evil.ev_il.evil>", ";<evil;evil@evil.evil.ev4il.evil>", ";<evil;evil@evil.evil.e.evil>", ";<evil;evil@evil.evil.6.evil>", ";<evil;evil@evil.evil._.evil>", ";<evil;evil@evil.evil.evil.evil.evil>", ";<evil;evil@evil.evil.evil>", ";<evil;evil@evil.eVil.evil.evil>", ";<evil;evil@evil.EVIL.evil.evil>", ";<evil;evil@evil.ev_il.evil.evil>", ";<evil;evil@evil.ev4il.evil.evil>", ";<evil;evil@evil.e.evil.evil>", ";<evil;evil@evil.6.evil.evil>", ";<evil;evil@evil._.evil.evil>", ";<evil;evil@evil-evil.evil.evil>", ";<evil;evil@eVil.evil.evil.evil>", ";<evil;evil@EVIL.evil.evil.evil>", ";<evil;evil@ev_il.evil.evil.evil>", ";<evil;evil@ev4il.evil.evil.evil>", ";<evil;evil@e.evil.evil.evil>", ";<evil;evil@6.evil.evil.evil>", ";<evil;evil@_.evil.evil.evil>", ";<evil;evil;evil@evil.evil.evil.evil>", ";<evil@evil.evil.evil.evil>", ";<evil;eVil@evil.evil.evil.evil>", ";<evil;EVIL@evil.evil.evil.evil>", ";<evil;ev_il@evil.evil.evil.evil>", ";<evil;ev4il@evil.evil.evil.evil>", ";<evil;e@evil.evil.evil.evil>", ";<evil;6@evil.evil.evil.evil>", ";<evil;_@evil.evil.evil.evil>", ";<evil9evil@evil.evil.evil.evil>", ";<evil3evil@evil.evil.evil.evil>", ";<evil0evil@evil.evil.evil.evil>", ";<evil.evil@evil.evil.evil.evil>", ";<evil-evil@evil.evil.evil.evil>", ";<evil+evil@evil.evil.evil.evil>", ";<evil&evil@evil.evil.evil.evil>", ";<evil#evil@evil.evil.evil.evil>", ";<eVil;evil@evil.evil.evil.evil>", ";<EVIL;evil@evil.evil.evil.evil>", ";<ev_il;evil@evil.evil.evil.evil>", ";<ev4il;evil@evil.evil.evil.evil>", ";<e;evil@evil.evil.evil.evil>", ";<6;evil@evil.evil.evil.evil>", ";<_;evil@evil.evil.evil.evil>", ";;<evil;evil@evil.evil.evil.evil>", "<evil;evil@evil.evil.evil.evil>", "a<evil;evil@evil.evil.evil.evil>", "_<evil;evil@evil.evil.evil.evil>", "9<evil;evil@evil.evil.evil.evil>", "3<evil;evil@evil.evil.evil.evil>", "0<evil;evil@evil.evil.evil.evil>", ".<evil;evil@evil.evil.evil.evil>", "-<evil;evil@evil.evil.evil.evil>", "&<evil;evil@evil.evil.evil.evil>", "#<evil;evil@evil.evil.evil.evil>", " <evil;evil@evil.evil.evil.evil>", "evil@evil.evil", "<evil@evil.evil>", "evil;evil@evil.evil.evil.evil", ";<evil;evil@evil.evil.evil.evil>"], "nonMatches": ["evil;evil@evil. .evil.evil", "evil;evil@evil..evil.evil", "evil;evil@ev il.evil.evil.evil", "evil;evil@ .evil.evil.evil", "evil;evil@.evil.evil.evil", "evil;ev il@evil.evil.evil.evil", "evil; @evil.evil.evil.evil", "evil;@evil.evil.evil.evil", "ev il;evil@evil.evil.evil.evil", " ;evil@evil.evil.evil.evil", ";evil@evil.evil.evil.evil", ";<evil;evil@evil.evil.evil.ev il>", ";<evil;evil@evil.evil.evil. >", ";<evil;evil@evil.evil.evil.>", ";<evil;evil@evil.evil.ev il.evil>", ";<evil;evil@evil.evil. .evil>", ";<evil;evil@evil.evil..evil>", ";<evil;evil@evil.ev il.evil.evil>", ";<evil;evil@evil. .evil.evil>", ";<evil;evil@evil..evil.evil>", ";<evil;evil@ev il.evil.evil.evil>", ";<evil;evil@ .evil.evil.evil>", ";<evil;evil@.evil.evil.evil>", ";<evil;ev il@evil.evil.evil.evil>", ";<evil; @evil.evil.evil.evil>", ";<evil;@evil.evil.evil.evil>", ";<ev il;evil@evil.evil.evil.evil>", ";< ;evil@evil.evil.evil.evil>", ";<;evil@evil.evil.evil.evil>"]}, {"regex": "^\\d*$|^\\d+$*[a-zA-Z]*$;^\\d+$|^\\d+$*[a-zA-Z]+$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "nothing to repeat"}, "matches": []}, {"regex": "^[a-zA-Z \\u0600-\\u065F\\u066A-\\u06EF\\u06FA-\\u06FF]+$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 1536"}, "matches": [], "nonMatches": []}, {"regex": "(?<=[[]tex[]]).*?(?=[[]/tex[]])", "exceptionStackTrace": null, "matches": [], "nonMatches": ["]", "[", "/", "eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", " ", "6", "_", "", "evil"]}, {"regex": "(?<!aaa((?!bbb)[\\s\\S])*)SomeText", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "look-behind requires fixed-width pattern"}, "matches": []}, {"regex": "<script type=&quot;text/javascript&quot;>\nfunction fin_city() {   city_c=document.frm_naccnt.City.value;   var toreplace=/(st )|(st.)|(St )|(St.)|(ST )|(saint)|(sant)|(siant)|(SANT)|(SIANT)/mg;   city_d=city_c.replace(toreplace,&quot;Saint &quot;);   document.frm_naccnt.City.value=city_d;   fin_cityb(); } </script>", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (parse error): expected character type but received RIGHT_PAREN"}, "matches": [], "nonMatches": []}, {"regex": "^(\\d{5}-\\d{4}|\\d{5}|\\d{9})$|^([a-zA-Z]\\d[a-zA-Z]( )?\\d[a-zA-Z]\\d)$", "exceptionStackTrace": null, "matches": ["A0A 0a0", "A0a 0A0", "a0A 0A0", "A0A0A0", "A0A 0A0", "000000000", "00000", "00000-0000"], "nonMatches": ["A0A  0A0", "0000000000", "00000000", "000000", "0000", "00000-00000", "00000-000", "000000-0000", "0000-0000"]}, {"regex": "[a-zA-Z0-9]*", "exceptionStackTrace": null, "matches": ["eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", " ", "6", "_", "", "evil"], "nonMatches": []}, {"regex": "^(([a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,6}/(DC=[&#39;\\w\\d\\s\\-\\&amp;]+[,]*){2,})|((\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])/(DC=[&#39;\\w\\d\\s\\-\\&amp;]+[,]*){2,})|((DC=[&#39;\\w\\d\\s\\-\\&amp;]+[,]*){2,})$", "exceptionStackTrace": null, "matches": ["DC=evil,,DC=evil,", "DC=;,DC=evil,", "DC=-,DC=evil,", "DC=&,DC=evil,", "DC=#,DC=evil,", "DC=eVil,DC=evil,", "DC=EVIL,DC=evil,", "DC=ev_il,DC=evil,", "DC=ev il,DC=evil,", "DC=ev4il,DC=evil,", "DC=e,DC=evil,", "DC= ,DC=evil,", "DC=6,DC=evil,", "DC=_,DC=evil,", "256.0.0.0/DC=evil,DC=evil,", "0.256.0.0/DC=evil,DC=evil,", "0.0.256.0/DC=evil,DC=evil,", "0.0.0.256/DC=evil,DC=evil,", "0.0.0.0/DC=evil,,DC=evil,", "0.0.0.0/DC=;,DC=evil,", "0.0.0.0/DC=-,DC=evil,", "0.0.0.0/DC=&,DC=evil,", "0.0.0.0/DC=#,DC=evil,", "0.0.0.0/DC=eVil,DC=evil,", "0.0.0.0/DC=EVIL,DC=evil,", "0.0.0.0/DC=ev_il,DC=evil,", "0.0.0.0/DC=ev il,DC=evil,", "0.0.0.0/DC=ev4il,DC=evil,", "0.0.0.0/DC=e,DC=evil,", "0.0.0.0/DC= ,DC=evil,", "0.0.0.0/DC=6,DC=evil,", "0.0.0.0/DC=_,DC=evil,", "0.0.0.000/DC=evil,DC=evil,", "0.0.0.00/DC=evil,DC=evil,", "0.0.0./DC=evil,DC=evil,", "0.0.000.0/DC=evil,DC=evil,", "0.0.00.0/DC=evil,DC=evil,", "0.0..0/DC=evil,DC=evil,", "0.000.0.0/DC=evil,DC=evil,", "0.00.0.0/DC=evil,DC=evil,", "0..0.0/DC=evil,DC=evil,", "000.0.0.0/DC=evil,DC=evil,", "00.0.0.0/DC=evil,DC=evil,", ".0.0.0/DC=evil,DC=evil,", "0-0.AA/DC=evil,,DC=evil,", "0-0.AA/DC=evilDC=evil,", "0-0.AA/DC=;,DC=evil,", "0-0.AA/DC=-,DC=evil,", "0-0.AA/DC=&,DC=evil,", "0-0.AA/DC=#,DC=evil,", "0-0.AA/DC=eVil,DC=evil,", "0-0.AA/DC=EVIL,DC=evil,", "0-0.AA/DC=ev_il,DC=evil,", "0-0.AA/DC=ev il,DC=evil,", "0-0.AA/DC=ev4il,DC=evil,", "0-0.AA/DC=e,DC=evil,", "0-0.AA/DC= ,DC=evil,", "0-0.AA/DC=6,DC=evil,", "0-0.AA/DC=_,DC=evil,", "0-0.AAAAAAA/DC=evil,DC=evil,", "0-0.AAAAAA/DC=evil,DC=evil,", "0-0.A/DC=evil,DC=evil,", "0-0.aA/DC=evil,DC=evil,", "0-0.0-0.AA/DC=evil,DC=evil,", "AA/DC=evil,DC=evil,", "0-0-0.AA/DC=evil,DC=evil,", "0.AA/DC=evil,DC=evil,", "0-a.AA/DC=evil,DC=evil,", "0-A.AA/DC=evil,DC=evil,", "0--------------------------------------------------------------0.AA/DC=evil,DC=evil,", "0-------------------------------------------------------------0.AA/DC=evil,DC=evil,", "00.AA/DC=evil,DC=evil,", "0a0.AA/DC=evil,DC=evil,", "0A0.AA/DC=evil,DC=evil,", "000.AA/DC=evil,DC=evil,", "a-0.AA/DC=evil,DC=evil,", "A-0.AA/DC=evil,DC=evil,", "DC=evilDC=evil,", "250.0.0.0/DC=evilDC=evil,", "200.0.0.0/DC=evilDC=evil,", "100.0.0.0/DC=evilDC=evil,", "0.250.0.0/DC=evilDC=evil,", "0.200.0.0/DC=evilDC=evil,", "0.100.0.0/DC=evilDC=evil,", "0.0.250.0/DC=evilDC=evil,", "0.0.200.0/DC=evilDC=evil,", "0.0.100.0/DC=evilDC=evil,", "0.0.0.250/DC=evilDC=evil,", "0.0.0.200/DC=evilDC=evil,", "0.0.0.100/DC=evilDC=evil,", "0.0.0.0/DC=evilDC=evil,", "0.AA/DC=evilDC=evil,", "DC=evil,DC=evil,", "250.0.0.0/DC=evil,DC=evil,", "200.0.0.0/DC=evil,DC=evil,", "100.0.0.0/DC=evil,DC=evil,", "0.250.0.0/DC=evil,DC=evil,", "0.200.0.0/DC=evil,DC=evil,", "0.100.0.0/DC=evil,DC=evil,", "0.0.250.0/DC=evil,DC=evil,", "0.0.200.0/DC=evil,DC=evil,", "0.0.100.0/DC=evil,DC=evil,", "0.0.0.250/DC=evil,DC=evil,", "0.0.0.200/DC=evil,DC=evil,", "0.0.0.100/DC=evil,DC=evil,", "0.0.0.0/DC=evil,DC=evil,", "0-0.AA/DC=evil,DC=evil,"], "nonMatches": ["DC=evil,", "DC==,DC=evil,", "DC=/,DC=evil,", "DC=.,DC=evil,", "DC=,,DC=evil,", "DC=,DC=evil,", "0.0.0.0/DC=evil,", "0.0.0.0/DC==,DC=evil,", "0.0.0.0/DC=/,DC=evil,", "0.0.0.0/DC=.,DC=evil,", "0.0.0.0/DC=,,DC=evil,", "0.0.0.0/DC=,DC=evil,", "0-0.AA/DC=evil,", "0-0.AA/DC==,DC=evil,", "0-0.AA/DC=/,DC=evil,", "0-0.AA/DC=.,DC=evil,", "0-0.AA/DC=,,DC=evil,", "0-0.AA/DC=,DC=evil,"]}, {"regex": "^(http\\:\\/\\/[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,3}(?:\\/\\S*)?(?:[a-zA-Z0-9_])+\\.(?:[a-zA-Z])+)$", "exceptionStackTrace": null, "matches": ["http://evil.AA/evil_.AA", "http://evil.AA/evil_.a", "http://evil.AA/evil__.A", "http://evil.AA/evil.A", "http://evil.AA/evila.A", "http://evil.AA/evilA.A", "http://evil.AA/evil0.A", "http://evil.AA/evil/evil_.A", "http://evil.AA/:_.A", "http://evil.AA//_.A", "http://evil.AA/._.A", "http://evil.AA/-_.A", "http://evil.AA/eVil_.A", "http://evil.AA/EVIL_.A", "http://evil.AA/ev_il_.A", "http://evil.AA/ev4il_.A", "http://evil.AA/e_.A", "http://evil.AA/6_.A", "http://evil.AA/__.A", "http://evil.AA/_.A", "http://evil.AAA/evil_.A", "http://evil.aA/evil_.A", "http://..AA/evil_.A", "http://-.AA/evil_.A", "http://eVil.AA/evil_.A", "http://EVIL.AA/evil_.A", "http://ev4il.AA/evil_.A", "http://e.AA/evil_.A", "http://6.AA/evil_.A", "http://evil.AA_.A", "http://evil.AA/evil_.A"], "nonMatches": ["http://evil.AA/evil_.", "http://evil.AA/ev il_.A", "http://evil.AA/ _.A", "http://evil.AAAA/evil_.A", "http://evil.A/evil_.A", "http://:.AA/evil_.A", "http:///.AA/evil_.A", "http://ev_il.AA/evil_.A", "http://ev il.AA/evil_.A", "http:// .AA/evil_.A", "http://_.AA/evil_.A", "http://.AA/evil_.A"]}, {"regex": "[^\\u0009\\u000A\\u000D\\u0020-\\uD7FF\\uE000-\\uFFFD\\u10000-\\u10FFFF]", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 9"}, "matches": [], "nonMatches": []}, {"regex": "^-?\\d+(\\.\\d+)?$", "exceptionStackTrace": null, "matches": ["-0", "-0.00", "-00.0", "0.0", "0", "-0.0"], "nonMatches": ["-0.0.0", "-0.", "-.0", "--0.0"]}, {"regex": "^\\d+(\\.\\d+)?$", "exceptionStackTrace": null, "matches": ["0.00", "00.0", "0", "0.0"], "nonMatches": ["0.0.0", "0.", ".0"]}, {"regex": "[+]346[0-9]{8}", "exceptionStackTrace": null, "matches": ["+346000000000", "+34600000000"], "nonMatches": ["+3460000000"]}, {"regex": "^[\\(]? ([^0-1]){1}([0-9]){2}([-,\\),/,\\.])*([ ])?([^0-1]){1}([0-9]){2}[ ]?[-]?[/]?[\\.]? ([0-9]){4}$", "exceptionStackTrace": null, "matches": ["( a00. a00 -/ 0000", "( a00. a00 -. 0000", "( a00. a00 /. 0000", "( a00. a00-/. 0000", "( a00. 00 -/. 0000", "( a00. A00 -/. 0000", "( a00. 200 -/. 0000", "( a00. /00 -/. 0000", "( a00. .00 -/. 0000", "( a00. -00 -/. 0000", "( a00. ,00 -/. 0000", "( a00. )00 -/. 0000", "( a00. (00 -/. 0000", "( a00.  00 -/. 0000", "( a00.a00 -/. 0000", "( a00.. a00 -/. 0000", "( a00 a00 -/. 0000", "( a00/ a00 -/. 0000", "( a00- a00 -/. 0000", "( a00, a00 -/. 0000", "( a00) a00 -/. 0000", "( A00. a00 -/. 0000", "( 200. a00 -/. 0000", "( /00. a00 -/. 0000", "( .00. a00 -/. 0000", "( -00. a00 -/. 0000", "( ,00. a00 -/. 0000", "( )00. a00 -/. 0000", "( (00. a00 -/. 0000", "(  00. a00 -/. 0000", " a00. a00 -/. 0000", " a00a00 0000", "( a00. a00 -/. 0000"], "nonMatches": ["( a00. a00 -/. 00000", "( a00. a00 -/. 000", "( a00. a00 -/.. 0000", "( a00. a00 -//. 0000", "( a00. a00 --/. 0000", "( a00. a00  -/. 0000", "( a00. a000 -/. 0000", "( a00. a0 -/. 0000", "( a00. aa00 -/. 0000", "( a00. 000 -/. 0000", "( a00.  a00 -/. 0000", "( a000. a00 -/. 0000", "( a0. a00 -/. 0000", "( aa00. a00 -/. 0000", "( 00. a00 -/. 0000", "( 000. a00 -/. 0000", "(( a00. a00 -/. 0000"]}, {"regex": "\\.(?=([^&quot;]*&quot;[^&quot;]*&quot;)*(?![^&quot;]*&quot;))", "exceptionStackTrace": null, "matches": ["."], "nonMatches": []}, {"regex": "[^.]*\\((?>[^()]+|\\((?<DEPTH>)|\\)(?<-DEPTH>))*(?(DEPTH)(?!))\\)[^.]*|[^.]+", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?>"}, "matches": []}, {"regex": "^100$|^\\s*(\\d{0,2})((\\.|\\,)(\\d*))?\\s*\\%?\\s*$", "exceptionStackTrace": null, "matches": [" 0.0 %  ", " 0.0 %", " 0.0  ", " 0.0  % ", " 0.0% ", " 0 % ", " 0.00 % ", " 0. % ", " 00.0 % ", " .0 % ", "  0.0 % ", "0.0 % ", "", " 0,0 % ", " 0.0 % ", "100"], "nonMatches": [" 0.0 %% ", " 0.0.0 % ", " 000.0 % "]}, {"regex": "^[0-9]{1,}(,[0-9]+){0,}$", "exceptionStackTrace": null, "matches": ["0,0,0", "0,00", "00,0", "0", "0,0"], "nonMatches": ["0,", ",0"]}, {"regex": "^(1|2|3)((\\d{2}((0[13578]|1[02])(0[1-9]|[12]\\d|3[01])|(0[13456789]|1[012])(0[1-9]|[12]\\d|30)|02(0[1-9]|1\\d|2[0-8])))|([02468][048]|[13579][26])0229)(\\d{5})$", "exceptionStackTrace": null, "matches": ["192022900000", "176022900000", "156022900000", "136022900000", "116022900000", "184022900000", "180022900000", "168022900000", "148022900000", "128022900000", "108022900000", "100022900000", "100091000000", "100060100000", "100040100000", "100110100000", "100100100000", "100083000000", "100081000000", "100070100000", "100050100000", "100030100000", "100010100000", "300080100000", "200080100000", "196022900000", "188022900000", "100022000000", "100021000000", "100020100000", "100093000000", "100092000000", "100090100000", "100120100000", "100083100000", "100082000000", "100080100000"], "nonMatches": ["190022900000", "106022900000", "181022900000", "118022900000", "100020000000", "100130100000", "100090000000", "100083200000", "1000801000000", "10008010000", "100080000000", "100000100000", "1000080100000", "10080100000"]}, {"regex": "^([A-Z&#196;&#214;&#220;][a-z&#228;&#246;&#252;&#223;]+(([.] )|( )|([-])))+[1-9][0-9]{0,3}[a-z]?$", "exceptionStackTrace": null, "matches": [";evil. 10", ";evil. 1000a", ";evil. 1a", ";evil. ;evil. 10a", ";;. 10a", ";&. 10a", ";#. 10a", ";ev4il. 10a", ";e. 10a", ";6. 10a", "Aevil. 10a", "9evil. 10a", "6evil. 10a", "4evil. 10a", "2evil. 10a", "1evil. 10a", "0evil. 10a", "&evil. 10a", "#evil. 10a", ";evil-1", ";evil 1", ";evil. 1", ";evil-10a", ";evil 10a", ";evil. 10a"], "nonMatches": [";evil. 10aa", ";evil. 10000a", ";evil. 00a", "10a", ";.. 10a", ";-. 10a", ";eVil. 10a", ";EVIL. 10a", ";ev_il. 10a", ";ev il. 10a", "; . 10a", ";_. 10a", ";. 10a", "3evil. 10a"]}, {"regex": "^[-+]?\\d+([.,]\\d{0,2}){0,1}$", "exceptionStackTrace": null, "matches": ["+0", "+0,00", "+0,", "+0.0", "+00,0", "0,0", "-0,0", "0", "+0,0"], "nonMatches": ["+0,0,0", "+0,000", "+,0", "++0,0"]}, {"regex": "^[^<^>]*$", "exceptionStackTrace": null, "matches": ["eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", " ", "6", "_", "", "evil"], "nonMatches": ["^", ">", "<"]}, {"regex": "(?<!%)(?:%%)*%(?(([1-9]\\d?)!([\\-\\+0\\ \\#])?(\\d+|\\*)?(\\.\\*|\\.\\d+)?([hLIw]|l{1,2}|I32|I64)?([cCdiouxXeEfgGaAnpsSZ])!)|(?:([1-9]\\d?)(?![!\\d])))", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character in group name '([1-9]\\\\d?'"}, "matches": []}, {"regex": "(?<!%)(?:%%)*%([\\-\\+0\\ \\#])?(\\d+|\\*)?(\\.\\*|\\.\\d+)?([hLIw]|l{1,2}|I32|I64)?([cCdiouxXeEfgGaAnpsSZ])", "exceptionStackTrace": null, "matches": ["%%%#0.00wZ", "%%%#0.*llZ", "%%%#0.*wx", "%%%#0.*wu", "%%%#0.*ws", "%%%#0.*wp", "%%%#0.*wo", "%%%#0.*wn", "%%%#0.*wi", "%%%#0.*wg", "%%%#0.*wf", "%%%#0.*we", "%%%#0.*wd", "%%%#0.*wc", "%%%#0.*wa", "%%%#0.*wX", "%%%#0.*wS", "%%%#0.*wG", "%%%#0.*wE", "%%%#0.*wC", "%%%#0.*wA", "%%%#0.*Z", "%%%#0.*hZ", "%%%#0.*aZ", "%%%#0.*LZ", "%%%#0.*IZ", "%%%#0.*AZ", "%%%#0wZ", "%%%#00.*wZ", "%%%#.*wZ", "%%%0.*wZ", "%%%10.*wZ", "%%%00.*wZ", "%%%-0.*wZ", "%%%+0.*wZ", "%%% 0.*wZ", "%%%%%#0.*wZ", "%#0.*wZ", "%Z", "%%%#*.*wZ", "%%%#0.0wZ", "%%%#0.*I64Z", "%%%#0.*I32Z", "%%%#0.*lZ", "%%%#0.*wZ"], "nonMatches": ["%%%#0.wZ", "%%%#0.*lllZ", "%%%#0.*wb", "%%%#0.*wB", "%%%#0.*wwZ", "%%%#0.*.*wZ", "%%%##0.*wZ"]}, {"regex": "<!--(?!\\s*\\[if[^]]+]>[^<]*<!\\[endif\\]).*?-->", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (parse error): expected character type but received RIGHT_BRACKET"}, "matches": [], "nonMatches": []}, {"regex": "\\{\\\\\\*\\\\bkmkstart\\s(.*?)\\}", "exceptionStackTrace": null, "matches": ["{\\*\\bkmkstart }}", "{\\*\\bkmkstart {}", "{\\*\\bkmkstart \\}", "{\\*\\bkmkstart *}", "{\\*\\bkmkstart eVil}", "{\\*\\bkmkstart EVIL}", "{\\*\\bkmkstart ev_il}", "{\\*\\bkmkstart ev il}", "{\\*\\bkmkstart ev4il}", "{\\*\\bkmkstart e}", "{\\*\\bkmkstart  }", "{\\*\\bkmkstart 6}", "{\\*\\bkmkstart _}", "{\\*\\bkmkstart }", "{\\*\\bkmkstart evil}"], "nonMatches": []}, {"regex": "^([9]{1})+(6|3|2|1{1})+([0-9]{7})$", "exceptionStackTrace": null, "matches": ["9110000000", "9660000000", "9960000000", "910000000", "920000000", "930000000", "960000000"], "nonMatches": ["9600000000", "96000000", "90000000", "60000000"]}, {"regex": "^([(]?[+]{1}[0-9]{1,3}[)]?[ .\\-]?)?[(]?[0-9]{3}[)]?[ .\\-]?([0-9]{3}[ .\\-]?[0-9]{4}|[a-zA-Z0-9]{7})([ .\\-]?[/]{1}[ .\\-]?[0-9]{2,4})?$", "exceptionStackTrace": null, "matches": ["(+0)-(000)-a000000-/-00", "(+0)-(000)-A000000-/-00", "(+0)-(000)-000-0000", "(+0)-(000)-000-0000-/-0000", "(+0)-(000)-000-0000-/00", "(+0)-(000)-000-0000-/.00", "(+0)-(000)-000-0000-/ 00", "(+0)-(000)-000-0000/-00", "(+0)-(000)-000-0000./-00", "(+0)-(000)-000-0000 /-00", "(+0)-(000)-000.0000-/-00", "(+0)-(000)-000 0000-/-00", "(+0)-(000)000-0000-/-00", "(+0)-(000).000-0000-/-00", "(+0)-(000) 000-0000-/-00", "(+0)-(000-000-0000-/-00", "(+0)-000)-000-0000-/-00", "(000)-000-0000-/-00", "(+0)(000)-000-0000-/-00", "(+0).(000)-000-0000-/-00", "(+0) (000)-000-0000-/-00", "(+0-(000)-000-0000-/-00", "(+000)-(000)-000-0000-/-00", "+0)-(000)-000-0000-/-00", "0000000000", "(+0)-(000)-0000000-/-00", "(+0)-(000)-000-0000-/-00"], "nonMatches": ["(+0)-(000)-00000000-/-00", "(+0)-(000)-000000-/-00", "(+0)-(000)-000-0000-/-00-/-00", "(+0)-(000)-000-0000-/-00000", "(+0)-(000)-000-0000-/-0", "(+0)-(000)-000-0000-/--00", "(+0)-(000)-000-0000-//-00", "(+0)-(000)-000-0000--00", "(+0)-(000)-000-0000--/-00", "(+0)-(000)-000-00000-/-00", "(+0)-(000)-000-000-/-00", "(+0)-(000)-000--0000-/-00", "(+0)-(000)-0000-0000-/-00", "(+0)-(000)-00-0000-/-00", "(+0)-(000)--000-0000-/-00", "(+0)-(000))-000-0000-/-00", "(+0)-(0000)-000-0000-/-00", "(+0)-(00)-000-0000-/-00", "(+0)-((000)-000-0000-/-00", "(+0)-(+0)-(000)-000-0000-/-00", "(+0)--(000)-000-0000-/-00", "(+0))-(000)-000-0000-/-00", "(+0000)-(000)-000-0000-/-00", "(+)-(000)-000-0000-/-00", "(++0)-(000)-000-0000-/-00", "(0)-(000)-000-0000-/-00", "((+0)-(000)-000-0000-/-00"]}, {"regex": "(1 )?\\d{3} \\d{3}-\\d{4}", "exceptionStackTrace": null, "matches": ["1 000 000-00000", "1 0000 000-0000", "1 1 000 000-0000", "000 000-0000", "1 000 000-0000"], "nonMatches": ["1 000 000-000", "1 000 0000-0000", "1 000 00-0000", "1 00 000-0000"]}, {"regex": "^([0]\\d|[1][0-2])\\/([0-2]\\d|[3][0-1])\\/([2][01]|[1][6-9])\\d{2}(\\s([0-1]\\d|[2][0-3])(\\:[0-5]\\d){1,2})?$", "exceptionStackTrace": null, "matches": ["00/00/2100 00:00:00", "00/00/2000 00:00", "10/00/2100", "00/30/2100", "00/00/1600", "00/00/2100", "10/00/2100 00:00", "00/30/2100 00:00", "00/00/1600 00:00", "00/00/2100 20:00", "00/00/2100 00:00"], "nonMatches": ["13/00/2100 00:00", "00/32/2100 00:00", "00/00/1000 00:00", "00/00/2100 24:00", "00/00/2100 00:00 00:00", "00/00/2100 00:00:00:00", "00/00/2100 00", "00/00/2100 00:60", "00/00/21000 00:00", "00/00/210 00:00", "00/00/2200 00:00"]}, {"regex": "((^((1[8-9]\\d{2})|([2-9]\\d{3}))(10|12|0?[13578])(3[01]|[12][0-9]|0?[1-9])$)|(^((1[8-9]\\d{2})|([2-9]\\d{3}))(11|0?[469])(30|[12][0-9]|0?[1-9])$)|(^((1[8-9]\\d{2})|([2-9]\\d{3}))(0?2)(2[0-8]|1[0-9]|0?[1-9])$)|(^([2468][048]00)(0?2)(29)$)|(^([3579][26]00)(0?2)(29)$)|(^([1][89][0][48])(0?2)(29)$)|(^([2-9][0-9][0][48])(0?2)(29)$)|(^([1][89][2468][048])(0?2)(29)$)|(^([2-9][0-9][2468][048])(0?2)(29)$)|(^([1][89][13579][26])(0?2)(29)$)|(^([2-9][0-9][13579][26])(0?2)(29)$))", "exceptionStackTrace": null, "matches": ["20920229", "20760229", "20560229", "20360229", "20160229", "19920229", "19760229", "19560229", "19360229", "19160229", "18960229", "20840229", "20800229", "20680229", "20480229", "20280229", "19840229", "19800229", "19680229", "19480229", "19280229", "18880229", "20040229", "20000229", "19040229", "18080229", "92000229", "76000229", "56000229", "36000229", "84000229", "80000229", "68000229", "48000229", "28000229", "1800021", "2001130", "18000630", "18000430", "18001110", "1801130", "2001031", "18000731", "18000531", "18000331", "18000131", "18001010", "18001030", "1801031", "2096229", "1996229", "2088229", "1988229", "2008229", "1908229", "9600229", "8800229", "2000220", "180021", "1800210", "1800220", "1800930", "1800111", "1800831", "1800101", "20960229", "19960229", "20880229", "19880229", "20080229", "19080229", "96000229", "88000229", "20000220", "18000201", "18000210", "18000220", "20001130", "18000930", "18001101", "18001120", "18001130", "20001031", "18000831", "18001231", "18001001", "18001020", "18001031"], "nonMatches": ["209600229", "20900229", "20060229", "00960229", "199600229", "19900229", "19060229", "10960229", "208800229", "20810229", "00880229", "198800229", "19810229", "10880229", "200800229", "00080229", "190800229", "19000229", "10080229", "960000229", "90000229", "06000229", "880000229", "81000229", "08000229", "200000220", "00000220", "18000200", "180002001", "18000229", "180000220", "10000220", "200001130", "00001130", "18000030", "180000930", "180011001", "18001100", "180001130", "10001130", "200001031", "00001031", "18000031", "180000831", "180010001", "18001000", "18001032", "180001031", "10001031"]}, {"regex": "http://www.rainsprayers.com/", "exceptionStackTrace": null, "matches": ["http://wwwarainsprayersAcom/", "http://wwwarainsprayers:com/", "http://wwwarainsprayers0com/", "http://wwwarainsprayers/com/", "http://wwwarainsprayers com/", "http://wwwArainsprayersacom/", "http://www:rainsprayersacom/", "http://www0rainsprayersacom/", "http://www/rainsprayersacom/", "http://www rainsprayersacom/", "http://wwwarainsprayersacom/"], "nonMatches": []}, {"regex": "(^[0]{1}$|^[-]?[1-9]{1}\\d*$)", "exceptionStackTrace": null, "matches": ["-100", "-1", "-110", "10", "1", "-10", "0"], "nonMatches": ["-0", "-00", "--10", "00", ""]}, {"regex": "(^((?<salutation>[MRD]\\S+)[ ]+)?(?<first>\\S+)[ ]+((?<middle>\\S+)[ ]+)??(?<last>\\S+)([ ]+(?<suffix>(PHD|MD|RN|JR|II|SR|III)))?)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<s"}, "matches": []}, {"regex": "^.*(?=.{6,})(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[\\W]).*$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["evileVil", "evilEVIL", "evilev_il", "evilev il", "evilev4il", "evile", "evil ", "evil6", "evil_", "eVilevil", "EVILevil", "ev_ilevil", "ev ilevil", "ev4ilevil", "eevil", " evil", "6evil", "_evil", "evil", "", "evilevil"]}, {"regex": "^([\\(]{1}[0-9]{3}[\\)]{1}[ |\\-]{0,1}|^[0-9]{3}[\\-| ])?[0-9]{3}(\\-| ){1}[0-9]{4}(([ ]{0,1})|([ ]{1}[0-9]{3,4}|))$", "exceptionStackTrace": null, "matches": ["000|000-0000 ", "000-000-0000 ", "(000)-000-0000 0000", "(000)-000-0000", "000-0000 ", "(000)000-0000 ", "(000)|000-0000 ", "(000) 000-0000 ", "000 0000", "000-0000", "000 000-0000 ", "(000)-000 0000 ", "(000)-000-0000 000", "(000)-000-0000 "], "nonMatches": ["0000 000-0000 ", "00 000-0000 ", "(000)-000-0000 000 000", "(000)-000-0000 00000", "(000)-000-0000 00", "(000)-000-0000  000", "(000)-000-0000000", "(000)-000-0000  ", "(000)-000-00000 ", "(000)-000-000 ", "(000)-000--0000 ", "(000)-0000000 ", "(000)-0000-0000 ", "(000)-00-0000 ", "(000)-(000)-000-0000 ", "(000)--000-0000 ", "(000))-000-0000 ", "(000-000-0000 ", "(0000)-000-0000 ", "(00)-000-0000 ", "((000)-000-0000 ", "000)-000-0000 "]}, {"regex": "^[0-9a-fA-F]+$", "exceptionStackTrace": null, "matches": ["AA", "a", "0", "A"], "nonMatches": ["", "g", "G"]}, {"regex": "\\b([0-1]?\\d{1,2}|2[0-4]\\d|25[0-5])(\\.([0-1]?\\d{1,2}|2[0-4]\\d|25[0-5])){3}\\b", "exceptionStackTrace": null, "matches": ["00.250.200.200", "00.00.00.00.00", "00.000.00.00", "00.0.00.00", "00.20.00.00", "000.00.00.00", "0.00.00.00", "20.00.00.00", "250.0.00.00", "200.0.00.00", "0.250.00.00", "0.200.00.00", "0.0.00.00", "250.00.00.00", "200.00.00.00", "00.250.250.250", "00.200.200.200", "00.00.00.00"], "nonMatches": ["256.00.00.00", "00.256.250.250", "00.00.00", "00.0000.00.00", "0000.00.00.00"]}, {"regex": "^[-+]?\\d+(\\.\\d{2})?$", "exceptionStackTrace": null, "matches": ["+0", "+00.00", "0.00", "-0.00", "0", "+0.00"], "nonMatches": ["+0.00.00", "+0.000", "+0.0", "+.00", "++0.00"]}, {"regex": "^[a-zA-Z0-9]+([_.-]?[a-zA-Z0-9]+)?@[a-zA-Z0-9]+([_-]?[a-zA-Z0-9]+)*([.]{1})[a-zA-Z0-9]+([.]?[a-zA-Z0-9]+)*$", "exceptionStackTrace": null, "matches": ["evil-evil@evil-evil.evil.evil.evil", "evil-evil@evil-evil.evil", "evil-evil@evil-evil.evil.eVil", "evil-evil@evil-evil.evil.EVIL", "evil-evil@evil-evil.evil.ev4il", "evil-evil@evil-evil.evil.e", "evil-evil@evil-evil.evil.6", "evil-evil@evil-evil.evilevil", "evil-evil@evil-evil.eVil.evil", "evil-evil@evil-evil.EVIL.evil", "evil-evil@evil-evil.ev4il.evil", "evil-evil@evil-evil.e.evil", "evil-evil@evil-evil.6.evil", "evil-evil@evil-evilevil.evil", "evil-evil@evil-evil-evil.evil.evil", "evil-evil@evil.evil.evil", "evil-evil@evil-eVil.evil.evil", "evil-evil@evil-EVIL.evil.evil", "evil-evil@evil-ev_il.evil.evil", "evil-evil@evil-ev4il.evil.evil", "evil-evil@evil-e.evil.evil", "evil-evil@evil-6.evil.evil", "evil-evil@evilevil.evil.evil", "evil-evil@evil_evil.evil.evil", "evil-evil@eVil-evil.evil.evil", "evil-evil@EVIL-evil.evil.evil", "evil-evil@ev_il-evil.evil.evil", "evil-evil@ev4il-evil.evil.evil", "evil-evil@e-evil.evil.evil", "evil-evil@6-evil.evil.evil", "evil@evil-evil.evil.evil", "evil-eVil@evil-evil.evil.evil", "evil-EVIL@evil-evil.evil.evil", "evil-ev4il@evil-evil.evil.evil", "evil-e@evil-evil.evil.evil", "evil-6@evil-evil.evil.evil", "evilevil@evil-evil.evil.evil", "evil_evil@evil-evil.evil.evil", "evil.evil@evil-evil.evil.evil", "eVil-evil@evil-evil.evil.evil", "EVIL-evil@evil-evil.evil.evil", "ev4il-evil@evil-evil.evil.evil", "e-evil@evil-evil.evil.evil", "6-evil@evil-evil.evil.evil", "evil@evil.evil", "evil-evil@evil-evil.evil.evil"], "nonMatches": ["evil-evil@evil-evil.evil.ev_il", "evil-evil@evil-evil.evil.ev il", "evil-evil@evil-evil.evil. ", "evil-evil@evil-evil.evil._", "evil-evil@evil-evil.evil.", "evil-evil@evil-evil.evil..evil", "evil-evil@evil-evil.ev_il.evil", "evil-evil@evil-evil.ev il.evil", "evil-evil@evil-evil. .evil", "evil-evil@evil-evil._.evil", "evil-evil@evil-evil..evil", "evil-evil@evil-evil..evil.evil", "evil-evil@evil-ev il.evil.evil", "evil-evil@evil- .evil.evil", "evil-evil@evil-_.evil.evil", "evil-evil@evil-.evil.evil", "evil-evil@evil--evil.evil.evil", "evil-evil@ev il-evil.evil.evil", "evil-evil@ -evil.evil.evil", "evil-evil@_-evil.evil.evil", "evil-evil@-evil.evil.evil", "evil-evil-evil@evil-evil.evil.evil", "evil-ev_il@evil-evil.evil.evil", "evil-ev il@evil-evil.evil.evil", "evil- @evil-evil.evil.evil", "evil-_@evil-evil.evil.evil", "evil-@evil-evil.evil.evil", "evil--evil@evil-evil.evil.evil", "ev_il-evil@evil-evil.evil.evil", "ev il-evil@evil-evil.evil.evil", " -evil@evil-evil.evil.evil", "_-evil@evil-evil.evil.evil", "-evil@evil-evil.evil.evil"]}, {"regex": "^[^<>&~\\s^%A-Za-z\\\\][^A-Za-z%^\\\\<>]{1,25}$", "exceptionStackTrace": null, "matches": ["00000000000000000000000000", "0~", "0&", "0 ", "00"], "nonMatches": ["000000000000000000000000000", "0", "0a", "0^", "0\\", "0A", "0>", "0<", "0%", "~0", "a0", "^0", "\\0", "A0", ">0", "<0", "&0", "%0", " 0"]}, {"regex": "^[1-9]{1}[0-9]{3}\\s{0,1}?[a-zA-Z]{2}$", "exceptionStackTrace": null, "matches": ["1000 aA", "1000AA", "1000 AA"], "nonMatches": ["1000 AAA", "1000 A", "1000  AA", "10000 AA", "100 AA", "11000 AA", "000 AA", "0000 AA"]}, {"regex": "^(\\(\\d{3}\\)|\\d{3})[\\s.-]?\\d{3}[\\s.-]?\\d{4}$", "exceptionStackTrace": null, "matches": ["(000)-0000000", "(000)-000.0000", "(000)-000 0000", "(000)000-0000", "(000).000-0000", "(000) 000-0000", "0000000000", "(000)0000000", "000-000-0000", "(000)-000-0000"], "nonMatches": ["0000-000-0000", "00-000-0000", "(000)-000-00000", "(000)-000-000", "(000)-000--0000", "(000)-0000-0000", "(000)-00-0000", "(000)--000-0000", "(0000)-000-0000", "(00)-000-0000"]}, {"regex": "^(?:(?<Contry>\\d{1,1})(?<5>[- ]?)?)?(?:(?<1>[(])?(?<AreaCode>[2-9]\\d{2})(?(1)[)])(?(1)(?<2>[ ])|(?:(?<3>[-])|(?<4>[ ])))?)?(?<Prefix>[1-9]\\d{2})(?(AreaCode)(?:(?(1)(?(2)[- ]|[-]?))|(?(3)[-])|(?(4)[- ]))|[- ]?)(?<Suffix>\\d{4})(?:[ ]?[#xXeE]?(?<Ext>\\d{2,4}))?$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<C"}, "matches": []}, {"regex": "^[A-Za-z0-9]{2}[-][A-Za-z0-9]{2}[-][A-Za-z0-9]{2}$", "exceptionStackTrace": null, "matches": ["00-00-a0", "00-00-A0", "00-a0-00", "00-A0-00", "a0-00-00", "A0-00-00", "00-00-00"], "nonMatches": ["00-00-000", "00-00-0", "00-000-00", "00-0-00", "000-00-00", "0-00-00"]}, {"regex": "((\\d{1,5})*\\.*(\\d{0,3})&quot;[W|D|H|DIA][X|\\s]).*", "exceptionStackTrace": null, "matches": ["0.0&quot;A||", "0.0&quot;A|;", "0.0&quot;A|.", "0.0&quot;A|&", "0.0&quot;A|eVil", "0.0&quot;A|EVIL", "0.0&quot;A|ev_il", "0.0&quot;A|ev il", "0.0&quot;A|ev4il", "0.0&quot;A|e", "0.0&quot;A| ", "0.0&quot;A|6", "0.0&quot;A|_", "0.0&quot;A|", "0.0&quot;AXevil", "0.0&quot;A evil", "0.0&quot;||evil", "0.0&quot;W|evil", "0.0&quot;I|evil", "0.0&quot;H|evil", "0.0&quot;D|evil", "0.0000&quot;A|evil", "0.000&quot;A|evil", "0.&quot;A|evil", "0..0&quot;A|evil", "00&quot;A|evil", "00.0&quot;A|evil", "000000.0&quot;A|evil", "00000.0&quot;A|evil", ".0&quot;A|evil", "&quot;A|", "0.0&quot;A|evil"], "nonMatches": ["0.0&quot;AAevil", "0.0&quot;B|evil"]}, {"regex": "(^\\+?1[0-7]\\d(\\.\\d+)?$)|(^\\+?([1-9])?\\d(\\.\\d+)?$)|(^-180$)|(^-1[1-7]\\d(\\.\\d+)?$)|(^-[1-9]\\d(\\.\\d+)?$)|(^\\-\\d(\\.\\d+)?$)", "exceptionStackTrace": null, "matches": ["-0.00", "-10.00", "-110.00", "+10", "+10.00", "+110.0", "+0.0", "10.0", "+100", "+100.00", "100.0", "-0", "-10", "-110", "0", "100", "-0.0", "-10.0", "-110.0", "-180", "+10.0", "+100.0"], "nonMatches": ["-0.0.0", "-0.", "-10.0.0", "-10.", "-00.0", "-110.0.0", "-110.", "-100.0", "+10.0.0", "+10.", "+00.0", "++10.0", "+100.0.0", "+100.", "+180.0", "++100.0"]}, {"regex": "(^\\+?([1-8])?\\d(\\.\\d+)?$)|(^-90$)|(^-(([1-8])?\\d(\\.\\d+)?$))", "exceptionStackTrace": null, "matches": ["-10", "-10.00", "-0.0", "+10", "+10.00", "+0.0", "10.0", "-0", "0", "-10.0", "-90", "+10.0"], "nonMatches": ["-10.0.0", "-10.", "-110.0", "-00.0", "+10.0.0", "+10.", "+110.0", "+00.0", "++10.0"]}, {"regex": "^((1[01])|(\\d)):[0-5]\\d(:[0-5]\\d)?\\s?([apAP][Mm])?$", "exceptionStackTrace": null, "matches": ["11:00:00 ", "11:00:00 PM", "11:00:00 pm", "11:00:00 am", "11:00:00 Am", "11:00:00Pm", "11:00 Pm", "10:00:00 Pm", "0:00", "11:00", "0:00:00 Pm", "11:00:00 Pm"], "nonMatches": ["11:00:00 PmPm", "11:00:00 Pa", "11:00:00 PA", "11:00:00 bm", "11:00:00 Bm", "11:00:00  Pm", "11:00:00:00 Pm", "11:00:60 Pm", "11:60:00 Pm", "12:00:00 Pm"]}, {"regex": "^<\\s*(td|TD)\\s*(\\w|\\W)*\\s*>(\\w|\\W)*</(td|TD)>$", "exceptionStackTrace": null, "matches": ["< td > >a</td>", "< td < >a</td>", "< td / >a</td>", "< td   >a</td>", "< td a >></td>", "< td a ><</td>", "< td a >/</td>", "< td a > </td>", "< td a >aa</td>", "< td a ></td>", "< td a >_</td>", "< td a >A</td>", "< td a >0</td>", "< td a  >a</td>", "< td a>a</td>", "< td aa >a</td>", "< td  >a</td>", "< td _ >a</td>", "< td A >a</td>", "< td 0 >a</td>", "< td  a >a</td>", "< tda >a</td>", "<  td a >a</td>", "<td a >a</td>", "<TD></td>", "<td></TD>", "<td></td>", "< TD a >a</td>", "< td ; >a</td>", "< td a >;</td>", "< td a >a</TD>", "< td a >a</td>"], "nonMatches": []}, {"regex": "^((([1]\\d{2})|(22[0-3])|([1-9]\\d)|(2[01]\\d)|[1-9]).(([1]\\d{2})|(2[0-4]\\d)|(25[0-5])|([1-9]\\d)|\\d).(([1]\\d{2})|(2[0-4]\\d)|(25[0-5])|([1-9]\\d)|\\d).(([1]\\d{2})|(2[0-4]\\d)|(25[0-5])|([1-9]\\d)|\\d))$", "exceptionStackTrace": null, "matches": ["200a100a100a100", "100a100a100_100", "100a100a100A100", "100a100a1000100", "100a100a100 100", "100a100_100a100", "100a100A100a100", "100a1000100a100", "100a100 100a100", "100_100a100a100", "100A100a100a100", "1000100a100a100", "100 100a100a100", "1a100a100a100", "210a100a100a100", "10a100a100a100", "220a100a100a100", "100a0a100a100", "100a10a100a100", "100a250a100a100", "100a200a100a100", "100a100a0a100", "100a100a10a100", "100a100a250a100", "100a100a200a100", "100a100a100a0", "100a100a100a10", "100a100a100a250", "100a100a100a200", "100a100a100a100"], "nonMatches": ["0a100a100a100", "00a100a100a100", "224a100a100a100", "100a00a100a100", "100a256a100a100", "100a100a00a100", "100a100a256a100", "100a100a100a00", "100a100a100a256", "100a100a100a1000", "100a100a1000a100", "100a1000a100a100", "1000a100a100a100"]}, {"regex": "(.*\\.([wW][mM][aA])|([mM][pP][3])$)", "exceptionStackTrace": null, "matches": ["Mp3", "mP3", "evil.WMa", "evil.WmA", "evil.wMA", "..WMA", "eVil.WMA", "EVIL.WMA", "ev_il.WMA", "ev il.WMA", "ev4il.WMA", "e.WMA", " .WMA", "6.WMA", "_.WMA", ".WMA", "MP3", "evil.WMA"], "nonMatches": ["Ma3", "MA3", "aP3", "AP3", "evil.WMb", "evil.WMB", "evil.WaA", "evil.WAA", "evil.aMA", "evil.AMA"]}, {"regex": "fc", "exceptionStackTrace": null, "matches": ["fc"], "nonMatches": []}, {"regex": "([0-9]|[0-9][0-9])\\.\\s", "exceptionStackTrace": null, "matches": ["00. ", "0. "], "nonMatches": []}, {"regex": "^[-]?P(?!$)(?:(?<year>\\d+)+Y)?(?:(?<month>\\d+)+M)?(?:(?<days>\\d+)+D)?(?:T(?!$)(?:(?<hours>\\d+)+H)?(?:(?<minutes>\\d+)+M)? (?:(?<seconds>\\d+(?:\\.\\d+)?)+S)?)?$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<y"}, "matches": []}, {"regex": "(\\s*\\S*){2}(ipsum)(\\S*\\s*){2}", "exceptionStackTrace": null, "matches": [" evil evilipsumevil evil evil ", " evil evilipsumevil ", " evil evilipsumevil  evil ", " evil evilipsumevilevil ", " evil evilipsumeVil evil ", " evil evilipsumEVIL evil ", " evil evilipsumev_il evil ", " evil evilipsumev il evil ", " evil evilipsumev4il evil ", " evil evilipsume evil ", " evil evilipsum  evil ", " evil evilipsum6 evil ", " evil evilipsum_ evil ", " evil evilipsum evil ", " evil evil evilipsumevil evil ", " evilipsumevil evil ", " eVil evilipsumevil evil ", " EVIL evilipsumevil evil ", " ev_il evilipsumevil evil ", " ev il evilipsumevil evil ", " ev4il evilipsumevil evil ", " e evilipsumevil evil ", "   evilipsumevil evil ", " 6 evilipsumevil evil ", " _ evilipsumevil evil ", "  evilipsumevil evil ", "  evil evilipsumevil evil ", "evil evilipsumevil evil ", " evilipsumevil ", " evil evilipsumevil evil "], "nonMatches": []}, {"regex": "^(0|([1-9]\\d{0,3}|[1-5]\\d{4}|[6][0-5][0-5]([0-2]\\d|[3][0-5])))$", "exceptionStackTrace": null, "matches": ["1000", "1", "60030", "60000", "10000", "10", "0"], "nonMatches": ["60036", "60600", "66000", "100000", "00000", "00"]}, {"regex": "\\*.+?\\*", "exceptionStackTrace": null, "matches": ["***", "*eVil*", "*EVIL*", "*ev_il*", "*ev il*", "*ev4il*", "*e*", "* *", "*6*", "*_*", "*evil*"], "nonMatches": ["**"]}, {"regex": "^([1-9]{1}(([0-9])?){2})+(,[0-9]{1}[0-9]{2})*$", "exceptionStackTrace": null, "matches": ["100,000,000", "100", "100100,000", "10,000", "1100,000", "10", "100,000"], "nonMatches": ["100,0000", "100,00", ",000", "1000,000", "00,000", "000,000"]}, {"regex": "^((?>[a-zA-Z\\d!#$%&&#39;*+\\-/=?^_`{|}~]+\\x20*|&quot;((?=[\\x01-\\x7f])[^&quot;\\\\]|\\\\[\\x01-\\x7f])*&quot;\\x20*)*(?<angle><))?((?!\\.)(?>\\.?[a-zA-Z\\d!#$%&&#39;*+\\-/=?^_`{|}~]+)+|&quot;((?=[\\x01-\\x7f])[^&quot;\\\\]|\\\\[\\x01-\\x7f])*&quot;)@(((?!-)[a-zA-Z\\d\\-]+(?<!-)\\.)+[a-zA-Z]{2,}|\\[(((?(?<!\\[)\\.)(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)){4}|[a-zA-Z\\d\\-]*[a-zA-Z\\d]:((?=[\\x01-\\x7f])[^\\\\\\[\\]]|\\\\[\\x01-\\x7f])+)\\])(?(angle)>)$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?>"}, "matches": []}, {"regex": "^[a-zA-Z]+(\\.[a-zA-Z]+)+$", "exceptionStackTrace": null, "matches": ["evil.evil.evil", "evil.eVil", "evil.EVIL", "evil.e", "eVil.evil", "EVIL.evil", "e.evil", "evil.evil"], "nonMatches": ["evil", "evil.ev_il", "evil.ev il", "evil.ev4il", "evil. ", "evil.6", "evil._", "evil.", "ev_il.evil", "ev il.evil", "ev4il.evil", " .evil", "6.evil", "_.evil", ".evil"]}, {"regex": "WordPress Technical Support 1 877 863 5655", "exceptionStackTrace": null, "matches": ["WordPress Technical Support 1 877 863 5655"], "nonMatches": []}, {"regex": "WordPress Technical Support 1 877 863 5655", "exceptionStackTrace": null, "matches": ["WordPress Technical Support 1 877 863 5655"], "nonMatches": []}, {"regex": "^(.)+\\.(jpg|jpeg|JPG|JPEG)$", "exceptionStackTrace": null, "matches": ["aa.jpg", "A.jpg", "0.jpg", "..jpg", " .jpg", "a.JPEG", "a.JPG", "a.jpeg", "a.jpg"], "nonMatches": [".jpg"]}, {"regex": "^((2[0-5][0-5]|1[\\d][\\d]|[\\d][\\d]|[\\d])\\.){3}(2[0-5][0-5]|1[\\d][\\d]|[\\d][\\d]|[\\d])$", "exceptionStackTrace": null, "matches": ["00.0.0.200", "100.0.0.200", "200.0.0.0", "200.0.0.00", "200.0.0.100", "200.0.0.200", "0.0.0.200", "00.00.00.200", "100.100.100.200", "200.200.200.0", "200.200.200.00", "200.200.200.100", "200.200.200.200"], "nonMatches": ["200.200.200.206", "200.200.200.260", "200.200.200.200.200", "200.200.200", "206.200.200.200", "260.200.200.200"]}, {"regex": "^([\\w\\._-]){3,}\\@([\\w\\-_.]){3,}\\.(\\w){2,4}$", "exceptionStackTrace": null, "matches": ["---@....aaaa", "---@...._a", "---@....Aa", "---@....0a", "---@a...aa", "---@_...aa", "---@A...aa", "---@0...aa", "---@-...aa", "a--@....aa", "_--@....aa", "A--@....aa", "0--@....aa", ".--@....aa", "---@....aa"], "nonMatches": ["---@....aaaaa", "---@....a", "---@...aa", "--@....aa"]}, {"regex": "^\\<(\\w){1,}\\>(.){0,}([\\</]|[\\<])(\\w){1,}\\>$", "exceptionStackTrace": null, "matches": ["<a>a/aa>", "<a>a/_>", "<a>a/A>", "<a>a/0>", "<a>aa/a>", "<a>A/a>", "<a>>/a>", "<a></a>", "<a>0/a>", "<a>//a>", "<a> /a>", "<aa>a/a>", "<_>a/a>", "<A>a/a>", "<0>a/a>", "<a><a>", "<a>/a>", "<a>a<a>", "<a>a/a>"], "nonMatches": ["<a>a/>", "<>a/a>"]}, {"regex": "^(\\w+=[^\\s,=]+,)*(\\w+=[^\\s,=]+,?)?$", "exceptionStackTrace": null, "matches": ["evil=evil,evil=evil", "evil=evil,evil=eVil,", "evil=evil,evil=EVIL,", "evil=evil,evil=ev_il,", "evil=evil,evil=ev4il,", "evil=evil,evil=e,", "evil=evil,evil=6,", "evil=evil,evil=_,", "evil=evil,eVil=evil,", "evil=evil,EVIL=evil,", "evil=evil,ev_il=evil,", "evil=evil,ev4il=evil,", "evil=evil,e=evil,", "evil=evil,6=evil,", "evil=evil,_=evil,", "evil=evil,evil=evil,evil=evil,", "evil=evil,", "evil=eVil,evil=evil,", "evil=EVIL,evil=evil,", "evil=ev_il,evil=evil,", "evil=ev4il,evil=evil,", "evil=e,evil=evil,", "evil=6,evil=evil,", "evil=_,evil=evil,", "eVil=evil,evil=evil,", "EVIL=evil,evil=evil,", "ev_il=evil,evil=evil,", "ev4il=evil,evil=evil,", "e=evil,evil=evil,", "6=evil,evil=evil,", "_=evil,evil=evil,", "", "evil=evil,evil=evil,"], "nonMatches": ["evil=evil,evil=evil,,", "evil=evil,evil==,", "evil=evil,evil=,,", "evil=evil,evil=ev il,", "evil=evil,evil= ,", "evil=evil,evil=,", "evil=evil,ev il=evil,", "evil=evil, =evil,", "evil=evil,=evil,", "evil==,evil=evil,", "evil=,,evil=evil,", "evil=ev il,evil=evil,", "evil= ,evil=evil,", "evil=,evil=evil,", "ev il=evil,evil=evil,", " =evil,evil=evil,", "=evil,evil=evil,"]}, {"regex": "(?:(?:(?<=[\\s^,(])\\*(?=\\S)(?!_)(?<bold>.+?)(?<!_)(?<=\\S)\\*(?=[\\s$,.?!]))|(?:(?<=[\\s^,(])_(?=\\S)(?!\\*)(?<underline>.+?)(?<!\\*)(?<=\\S)_(?=[\\s$,.?!]))|(?:(?<=[\\s^,(])(?:\\*_|_\\*)(?=\\S)(?<boldunderline>.+?)(?<=\\S)(?:\\*_|_\\*)(?=[\\s$,.?!])))", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<b"}, "matches": []}, {"regex": "&quot;^[A-Z]{1}\\d{7}$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["&quot;A00000000", "&quot;A000000", "&quot;AA0000000", "&quot;0000000", "&quot;A0000000"]}, {"regex": "^\\d{1,6}\\040([A-Z]{1}[a-z]{1,}\\040[A-Z]{1}[a-z]{1,})$|^\\d{1,6}\\040([A-Z]{1}[a-z]{1,}\\040[A-Z]{1}[a-z]{1,}\\040[A-Z]{1}[a-z]{1,})$|^\\d{1,6}\\040([A-Z]{1}[a-z]{1,}\\040[A-Z]{1}[a-z]{1,}\\040[A-Z]{1}[a-z]{1,}\\040[A-Z]{1}[a-z]{1,})$", "exceptionStackTrace": null, "matches": ["0 Aevil Aevil Aevil Ae", "0 Aevil Aevil Ae Aevil", "0 Aevil Ae Aevil Aevil", "0 Ae Aevil Aevil Aevil", "000000 Aevil Aevil Aevil Aevil", "0 Aevil Aevil Ae", "0 Aevil Ae Aevil", "0 Ae Aevil Aevil", "000000 Aevil Aevil Aevil", "0 Aevil Ae", "0 Ae Aevil", "000000 Aevil Aevil", "0 Aevil Aevil Aevil Aevil", "0 Aevil Aevil Aevil", "0 Aevil Aevil"], "nonMatches": ["0 Aevil Aevil Aevil AeVil", "0 Aevil Aevil Aevil AEVIL", "0 Aevil Aevil Aevil Aev_il", "0 Aevil Aevil Aevil Aev il", "0 Aevil Aevil Aevil Aev4il", "0 Aevil Aevil Aevil A ", "0 Aevil Aevil Aevil A6", "0 Aevil Aevil Aevil A_", "0 Aevil Aevil Aevil A", "0 Aevil Aevil Aevil AAevil", "0 Aevil Aevil Aevil evil", "0 Aevil Aevil AeVil Aevil", "0 Aevil Aevil AEVIL Aevil", "0 Aevil Aevil Aev_il Aevil", "0 Aevil Aevil Aev il Aevil", "0 Aevil Aevil Aev4il Aevil", "0 Aevil Aevil A  Aevil", "0 Aevil Aevil A6 Aevil", "0 Aevil Aevil A_ Aevil", "0 Aevil Aevil A Aevil", "0 Aevil Aevil AAevil Aevil", "0 Aevil Aevil evil Aevil", "0 Aevil AeVil Aevil Aevil", "0 Aevil AEVIL Aevil Aevil", "0 Aevil Aev_il Aevil Aevil", "0 Aevil Aev il Aevil Aevil", "0 Aevil Aev4il Aevil Aevil", "0 Aevil A  Aevil Aevil", "0 Aevil A6 Aevil Aevil", "0 Aevil A_ Aevil Aevil", "0 Aevil A Aevil Aevil", "0 Aevil AAevil Aevil Aevil", "0 Aevil evil Aevil Aevil", "0 AeVil Aevil Aevil Aevil", "0 AEVIL Aevil Aevil Aevil", "0 Aev_il Aevil Aevil Aevil", "0 Aev il Aevil Aevil Aevil", "0 Aev4il Aevil Aevil Aevil", "0 A  Aevil Aevil Aevil", "0 A6 Aevil Aevil Aevil", "0 A_ Aevil Aevil Aevil", "0 A Aevil Aevil Aevil", "0 AAevil Aevil Aevil Aevil", "0 evil Aevil Aevil Aevil", "0000000 Aevil Aevil Aevil Aevil", " Aevil Aevil Aevil Aevil", "0 Aevil Aevil AeVil", "0 Aevil Aevil AEVIL", "0 Aevil Aevil Aev_il", "0 Aevil Aevil Aev il", "0 Aevil Aevil Aev4il", "0 Aevil Aevil A ", "0 Aevil Aevil A6", "0 Aevil Aevil A_", "0 Aevil Aevil A", "0 Aevil Aevil AAevil", "0 Aevil Aevil evil", "0 Aevil AeVil Aevil", "0 Aevil AEVIL Aevil", "0 Aevil Aev_il Aevil", "0 Aevil Aev il Aevil", "0 Aevil Aev4il Aevil", "0 Aevil A  Aevil", "0 Aevil A6 Aevil", "0 Aevil A_ Aevil", "0 Aevil A Aevil", "0 Aevil AAevil Aevil", "0 Aevil evil Aevil", "0 AeVil Aevil Aevil", "0 AEVIL Aevil Aevil", "0 Aev_il Aevil Aevil", "0 Aev il Aevil Aevil", "0 Aev4il Aevil Aevil", "0 A  Aevil Aevil", "0 A6 Aevil Aevil", "0 A_ Aevil Aevil", "0 A Aevil Aevil", "0 AAevil Aevil Aevil", "0 evil Aevil Aevil", "0000000 Aevil Aevil Aevil", " Aevil Aevil Aevil", "0 Aevil AeVil", "0 Aevil AEVIL", "0 Aevil Aev_il", "0 Aevil Aev il", "0 Aevil Aev4il", "0 Aevil A ", "0 Aevil A6", "0 Aevil A_", "0 Aevil A", "0 Aevil AAevil", "0 Aevil evil", "0 AeVil Aevil", "0 AEVIL Aevil", "0 Aev_il Aevil", "0 Aev il Aevil", "0 Aev4il Aevil", "0 A  Aevil", "0 A6 Aevil", "0 A_ Aevil", "0 A Aevil", "0 AAevil Aevil", "0 evil Aevil", "0000000 Aevil Aevil", " Aevil Aevil"]}, {"regex": "\\(\\d{3}\\)\\040\\d{3}-\\d{4}", "exceptionStackTrace": null, "matches": ["(000) 000-00000", "(000) 000-0000"], "nonMatches": ["(000) 000-000", "(000) 0000-0000", "(000) 00-0000", "(0000) 000-0000", "(00) 000-0000"]}, {"regex": "\\(714|760|949|619|909|951|818|310|323|213|323|562|626\\)\\040\\d{3}-\\d{4}", "exceptionStackTrace": null, "matches": ["626) 000-00000", "626) 000-0000", "562", "213", "323", "310", "818", "951", "909", "619", "949", "760", "(714"], "nonMatches": ["626) 000-000", "626) 0000-0000", "626) 00-0000"]}, {"regex": "714|760|949|619|909|951|818|310|323|213|323|562|626-\\d{3}-\\d{4}", "exceptionStackTrace": null, "matches": ["626-000-00000", "626-000-0000", "562", "213", "323", "310", "818", "951", "909", "619", "949", "760", "714"], "nonMatches": ["626-000-000", "626-0000-0000", "626-00-0000"]}, {"regex": "\\d{6}", "exceptionStackTrace": null, "matches": ["0000000", "000000"], "nonMatches": ["00000"]}, {"regex": "^\\d{1,5}(\\.\\d{1,2})?$", "exceptionStackTrace": null, "matches": ["0.00", "00000.0", "0", "0.0"], "nonMatches": ["0.0.0", "0.000", "0.", "000000.0", ".0"]}, {"regex": "(?!^0*$)(?!^0*\\.0*$)^\\d{1,5}(\\.\\d{1,2})?$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["0.0.0", "0.000", "0.00", "0.", "000000.0", "00000.0", ".0", "0", "0.0"]}, {"regex": "(00356)?(99|79|77|21|27|22|25)[0-9]{6}", "exceptionStackTrace": null, "matches": ["00356990000000", "003560035699000000", "25000000", "22000000", "27000000", "21000000", "77000000", "79000000", "99000000", "0035625000000", "0035622000000", "0035627000000", "0035621000000", "0035677000000", "0035679000000", "0035699000000"], "nonMatches": ["003569900000"]}, {"regex": "(?<=[\\?&])[^=&]+(?=[&]|$)", "exceptionStackTrace": null, "matches": [], "nonMatches": ["?", "=", "&", "eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", " ", "6", "_", "", "evil"]}, {"regex": "http://www.ibrowhenna.com/", "exceptionStackTrace": null, "matches": ["http://wwwaibrowhennaAcom/", "http://wwwaibrowhenna:com/", "http://wwwaibrowhenna0com/", "http://wwwaibrowhenna/com/", "http://wwwaibrowhenna com/", "http://wwwAibrowhennaacom/", "http://www:ibrowhennaacom/", "http://www0ibrowhennaacom/", "http://www/ibrowhennaacom/", "http://www ibrowhennaacom/", "http://wwwaibrowhennaacom/"], "nonMatches": []}, {"regex": "^[0-9A-Za-z_ ]+(.[jJ][pP][gG]|.[gG][iI][fF])$", "exceptionStackTrace": null, "matches": ["evilaGIf", "evilaGiF", "evilagIF", "evil_GIF", "evilAGIF", "evil0GIF", "evil GIF", "evilaJPg", "evilaJpG", "evilajPG", "evil_JPG", "evilAJPG", "evil0JPG", "evil JPG", "eVilaJPG", "EVILaJPG", "ev_ilaJPG", "ev ilaJPG", "ev4ilaJPG", "eaJPG", " aJPG", "6aJPG", "_aJPG", "evilaGIF", "evilaJPG"], "nonMatches": ["evilaGIa", "evilaGIA", "evilaGaF", "evilaGAF", "evilaaIF", "evilaAIF", "evilaJPa", "evilaJPA", "evilaJaG", "evilaJAG", "evilaaPG", "evilaAPG", "aJPG"]}, {"regex": "^\\$?\\d+(\\.(\\d{2}))?$", "exceptionStackTrace": null, "matches": ["$0", "$00.00", "0.00", "0", "$0.00"], "nonMatches": ["$0.00.00", "$0.000", "$0.0", "$.00", "$$0.00"]}, {"regex": "&lt;script[\\s\\S]*?&lt;/script([\\s\\S]*?)&gt;", "exceptionStackTrace": null, "matches": ["&lt;scriptevil&lt;/script;&gt;", "&lt;scriptevil&lt;/script/&gt;", "&lt;scriptevil&lt;/script&&gt;", "&lt;scriptevil&lt;/scripteVil&gt;", "&lt;scriptevil&lt;/scriptEVIL&gt;", "&lt;scriptevil&lt;/scriptev_il&gt;", "&lt;scriptevil&lt;/scriptev il&gt;", "&lt;scriptevil&lt;/scriptev4il&gt;", "&lt;scriptevil&lt;/scripte&gt;", "&lt;scriptevil&lt;/script &gt;", "&lt;scriptevil&lt;/script6&gt;", "&lt;scriptevil&lt;/script_&gt;", "&lt;scriptevil&lt;/script&gt;", "&lt;script;&lt;/scriptevil&gt;", "&lt;script/&lt;/scriptevil&gt;", "&lt;script&&lt;/scriptevil&gt;", "&lt;scripteVil&lt;/scriptevil&gt;", "&lt;scriptEVIL&lt;/scriptevil&gt;", "&lt;scriptev_il&lt;/scriptevil&gt;", "&lt;scriptev il&lt;/scriptevil&gt;", "&lt;scriptev4il&lt;/scriptevil&gt;", "&lt;scripte&lt;/scriptevil&gt;", "&lt;script &lt;/scriptevil&gt;", "&lt;script6&lt;/scriptevil&gt;", "&lt;script_&lt;/scriptevil&gt;", "&lt;script&lt;/scriptevil&gt;", "&lt;script&lt;/script&gt;", "&lt;scriptevil&lt;/scriptevil&gt;"], "nonMatches": []}, {"regex": "https://www.thelivechat.com/", "exceptionStackTrace": null, "matches": ["https://wwwathelivechatAcom/", "https://wwwathelivechat:com/", "https://wwwathelivechat0com/", "https://wwwathelivechat/com/", "https://wwwathelivechat com/", "https://wwwAthelivechatacom/", "https://www:thelivechatacom/", "https://www0thelivechatacom/", "https://www/thelivechatacom/", "https://www thelivechatacom/", "https://wwwathelivechatacom/"], "nonMatches": []}, {"regex": "^(\\+|-)?(\\d\\.\\d{1,6}|[1-8]\\d\\.\\d{1,6}|90\\.0{1,6})$", "exceptionStackTrace": null, "matches": ["+90.000000", "+10.000000", "+0.000000", "90.0", "10.0", "0.0", "-0.0", "+90.0", "+10.0", "+0.0"], "nonMatches": ["+90.0000000", "+90.", "+10.0000000", "+10.", "+00.0", "+0.0000000", "+0.", "++0.0"]}, {"regex": "^(\\+|-)?(\\d\\.\\d{1,6}|[1-9]\\d\\.\\d{1,6}|1[1-7]\\d\\.\\d{1,6}|180\\.0{1,6})$", "exceptionStackTrace": null, "matches": ["+180.000000", "+110.000000", "+10.000000", "+0.000000", "180.0", "110.0", "10.0", "0.0", "-0.0", "+180.0", "+110.0", "+10.0", "+0.0"], "nonMatches": ["+180.0000000", "+180.", "+110.0000000", "+110.", "+100.0", "+10.0000000", "+10.", "+00.0", "+0.0000000", "+0.", "++0.0"]}, {"regex": "((^(?<property>\\S+):)|(\\s(?<property>)))(?<value>.*)\\n", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<p"}, "matches": []}, {"regex": "sbfvgtjhnj", "exceptionStackTrace": null, "matches": ["sbfvgtjhnj"], "nonMatches": []}, {"regex": "^[A-Z0-9]{8}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{12}$", "exceptionStackTrace": null, "matches": ["00000000-0000-0000-0000-A00000000000", "00000000-0000-0000-A000-000000000000", "00000000-0000-A000-0000-000000000000", "00000000-A000-0000-0000-000000000000", "A0000000-0000-0000-0000-000000000000", "00000000-0000-0000-0000-000000000000"], "nonMatches": ["00000000-0000-0000-0000-0000000000000", "00000000-0000-0000-0000-00000000000", "00000000-0000-0000-00000-000000000000", "00000000-0000-0000-000-000000000000", "00000000-0000-00000-0000-000000000000", "00000000-0000-000-0000-000000000000", "00000000-00000-0000-0000-000000000000", "00000000-000-0000-0000-000000000000", "000000000-0000-0000-0000-000000000000", "0000000-0000-0000-0000-000000000000"]}, {"regex": "(?!219( |\\.|\\-|)??09( |\\.|\\-|)??9999|078( |\\.|\\-|)??05( |\\.|\\-|)??1120)(?!666|000|9\\d{2})\\d{3}( |\\.|\\-|)??(?!00)\\d{2}( |\\.|\\-|)??(?!0{4})\\d{4}", "exceptionStackTrace": null, "matches": [], "nonMatches": ["000--00 0000", "000 00--0000", "000 00 00000", "000 00 000", "000 00  0000", "000 000000", "000 000 0000", "000 0 0000", "000  00 0000", "00000 0000", "0000 00 0000", "00 00 0000", "000000000", "000-00 0000", "000.00 0000", "000 00-0000", "000 00.0000", "000 00 0000"]}, {"regex": "&quot;{0,2}(?:(?:\\\\\\\\(?:\\w+)\\\\(?:\\w+\\$?)|(?:[A-Z]):)(?:\\\\(?:[^\\\\:*?&quot;&#39;&lt;&gt;|\\r\\n]+))+|(?:[^\\\\:*?&quot;&#39;&lt;&gt;|\\r\\n]+))\\.exe&quot;?\\ (?&lt;commandstring&gt;(?:[^\\r\\n]*(?=&quot;)|[^\\r\\n]*))", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?&"}, "matches": []}, {"regex": "https://testosteronesboosterweb.com/bioflex-xl/", "exceptionStackTrace": null, "matches": ["https://testosteronesboosterwebAcom/bioflex-xl/", "https://testosteronesboosterweb:com/bioflex-xl/", "https://testosteronesboosterweb0com/bioflex-xl/", "https://testosteronesboosterweb/com/bioflex-xl/", "https://testosteronesboosterweb-com/bioflex-xl/", "https://testosteronesboosterweb com/bioflex-xl/", "https://testosteronesboosterwebacom/bioflex-xl/"], "nonMatches": []}, {"regex": "5", "exceptionStackTrace": null, "matches": ["5"], "nonMatches": []}, {"regex": "(((\\+44)? ?(\\(0\\))? ?)|(0))( ?[0-9]{3,4}){3}", "exceptionStackTrace": null, "matches": ["+44 (0)  000 000 000 000", "+44 (0)  00000 000 000", "+44 (0)  0000 000 000", "+44 (0)   000 000 000", "+44 (0) 000 000 000", "+44 (0)(0)  000 000 000", "+44   000 000 000", "+44  (0)  000 000 000", "+44(0)  000 000 000", "+44+44 (0)  000 000 000", " (0)  000 000 000", "0000 000 000", "000 000 000", "0 000 000 000", "+44 (0)  000 000 000"], "nonMatches": ["+44 (0)  000 000", "+44 (0)  00 000 000"]}, {"regex": "^public\\b\\s+?\\w+?\\s+?(?&lt;propertyname&gt;\\w+)[^{]+?{\n[\\s\\S]*?\nget\\s*?{[\\s\\S]*?}\n[\\s\\S]*?\n(?:set??[\\s\\S]*?{[\\s\\S]*?})?\n[\\s\\S]*?}$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?&"}, "matches": []}, {"regex": "&lt;asp:requiredfieldvalidator(\\s*\\w+\\s*=\\s*\\&quot;?\\s*\\w+\\s*\\&quot;?\\s*)+\\s*&gt;\\s*&lt;\\/asp:requiredfieldvalidator&gt;", "exceptionStackTrace": null, "matches": ["&lt;asp:requiredfieldvalidator evil = &quot; evil &quot;  &gt;  &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator evil = &quot; evil &quot;  &gt;&lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator evil = &quot; evil &quot;  evil = &quot; evil &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator evil = &quot; evil &quot;   &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator evil = &quot; evil &quot; &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator evil = &quot; evil &quot  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator evil = &quot; evil  &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator evil = &quot; evil&quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator evil = &quot; eVil &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator evil = &quot; EVIL &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator evil = &quot; ev_il &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator evil = &quot; ev4il &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator evil = &quot; e &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator evil = &quot; 6 &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator evil = &quot; _ &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator evil = &quot;  evil &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator evil = &quot;evil &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator evil = &quot evil &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator evil =  &quot; evil &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator evil =&quot; evil &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator evil  = &quot; evil &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator evil= &quot; evil &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator eVil = &quot; evil &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator EVIL = &quot; evil &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator ev_il = &quot; evil &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator ev4il = &quot; evil &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator e = &quot; evil &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator 6 = &quot; evil &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator _ = &quot; evil &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator  evil = &quot; evil &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidatorevil = &quot; evil &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidatorevil=&quotevil&quot&gt;&lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator evil = &quot; evil &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;"], "nonMatches": ["&lt;asp:requiredfieldvalidator &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator evil = &quot; evil &quot;;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator evil = &quot; ev il &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator evil = &quot;   &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator evil = &quot;  &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator evil = &quot;; evil &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator ev il = &quot; evil &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator   = &quot; evil &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;", "&lt;asp:requiredfieldvalidator  = &quot; evil &quot;  &gt; &lt;/asp:requiredfieldvalidator&gt;"]}, {"regex": "\\b((([&quot;&#39;/,&amp;%\\:\\(\\)\\$\\+\\-\\*\\w\\000-\\032])|(-*\\d+\\.\\d+[%]*))+[\\s]+)+\\b[\\w&quot;&#39;,%\\(\\)]+[.!?]([&#39;&quot;\\s]|$)", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported octal value 0"}, "matches": [], "nonMatches": []}, {"regex": "^([\\(]{1}[0-9]{3}[\\)]{1}[ |\\-]{0,1}|^[0-9]{3}[\\-| ])?[0-9]{3}(\\-| ){1}[0-9]{4}$", "exceptionStackTrace": null, "matches": ["000|000-0000", "000-000-0000", "(000)000-0000", "(000)|000-0000", "(000) 000-0000", "000 0000", "000-0000", "000 000-0000", "(000)-000 0000", "(000)-000-0000"], "nonMatches": ["0000 000-0000", "00 000-0000", "(000)-000-00000", "(000)-000-000", "(000)-000--0000", "(000)-0000000", "(000)-0000-0000", "(000)-00-0000", "(000)-(000)-000-0000", "(000)--000-0000", "(000))-000-0000", "(000-000-0000", "(0000)-000-0000", "(00)-000-0000", "((000)-000-0000", "000)-000-0000"]}, {"regex": "^(((0?[1-9]|1\\d|2[0-8])|(0?[13456789]|1[012])/(29|30)|(0?[13578]|1[02])/31)/(0?[1-9]|1[012])/(19|[2-9]\\d)\\d{2}|0?29/0?2/((19|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|(([2468][048]|[3579][26])00)))$", "exceptionStackTrace": null, "matches": ["029/02/9200", "029/02/7600", "029/02/5600", "029/02/3600", "029/02/8400", "029/02/8000", "029/02/6800", "029/02/4800", "029/02/2800", "029/02/1992", "029/02/1976", "029/02/1956", "029/02/1936", "029/02/1916", "029/02/1984", "029/02/1980", "029/02/1968", "029/02/1948", "029/02/1928", "029/02/1904", "029/2/1908", "29/02/1908", "10/31/01/1900", "07/31/01/1900", "05/31/01/1900", "03/31/01/1900", "01/31/01/1900", "8/31/01/1900", "11/29/01/1900", "10/29/01/1900", "08/29/01/1900", "07/29/01/1900", "06/29/01/1900", "05/29/01/1900", "04/29/01/1900", "03/29/01/1900", "01/29/01/1900", "9/29/01/1900", "01/11/1900", "01/10/1900", "01/1/1900", "1/01/1900", "29/2/9600", "29/2/8800", "29/2/2008", "29/2/1996", "29/2/1988", "29/2/1908", "12/31/1/1900", "8/31/1/1900", "12/29/1/1900", "9/30/1/1900", "9/29/1/1900", "20/1/1900", "10/1/1900", "1/12/1900", "1/1/2000", "1/1/1900", "029/02/9600", "029/02/8800", "029/02/2008", "029/02/1996", "029/02/1988", "029/02/1908", "12/31/01/1900", "08/31/01/1900", "12/29/01/1900", "09/30/01/1900", "09/29/01/1900", "20/01/1900", "10/01/1900", "01/12/1900", "01/01/2000", "01/01/1900"], "nonMatches": ["029/02/9000", "029/02/0600", "029/02/8100", "029/02/0800", "029/02/0008", "029/02/1990", "029/02/1906", "029/02/1981", "029/02/1900", "029/002/1908", "0029/02/1908", "11/31/01/1900", "00/31/01/1900", "008/31/01/1900", "13/29/01/1900", "00/29/01/1900", "009/29/01/1900", "29/01/1900", "01/13/1900", "01/01/0000", "01/01/19000", "01/01/190", "01/00/1900", "01/001/1900", "00/01/1900", "001/01/1900"]}, {"regex": "&quot;(?\\d{5})(-(?[a-zA-Z0-9])(-)&quot;", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?\\d"}, "matches": []}, {"regex": "^([1-9]{1}[\\d]{0,2}(\\,[\\d]{3})*(\\.[\\d]{0,2})?|[1-9]{1}[\\d]{0,}(\\.[\\d]{0,2})?|0(\\.[\\d]{0,2})?|(\\.[\\d]{1,2})?)$", "exceptionStackTrace": null, "matches": [".00", "0.00", "0.", "10", "10.00", "10.", "100.0", "1.0", "110.0", "10,000", "10,000.00", "10,000.", "10,000,000.0", "100,000.0", "1,000.0", "110,000.0", "", "0", "1", ".0", "0.0", "10.0", "10,000.0"], "nonMatches": [".0.0", ".000", ".", "0.0.0", "0.000", "10.0.0", "10.000", "00.0", "10,000.0.0", "10,000.000", "10,0000.0", "10,00.0", "1000,000.0", "0,000.0", "00,000.0"]}, {"regex": "^([1-9][0-9]?|100)%$", "exceptionStackTrace": null, "matches": ["1%", "100%", "10%"], "nonMatches": ["00%"]}, {"regex": "^([\\(]{1}[0-9]{3}[\\)]{1}[\\.| |\\-]{0,1}|^[0-9]{3}[\\.|\\-| ]?)?[0-9]{3}(\\.|\\-| )?[0-9]{4}$", "exceptionStackTrace": null, "matches": ["000000.0000", "000|000.0000", "000.000.0000", "000-000.0000", "(000)-0000000", "000.0000", "(000)000.0000", "(000)|000.0000", "(000).000.0000", "(000) 000.0000", "0000000", "000 000.0000", "(000)-000 0000", "(000)-000-0000", "(000)-000.0000"], "nonMatches": ["000  000.0000", "0000 000.0000", "00 000.0000", "(000)-000.00000", "(000)-000.000", "(000)-000..0000", "(000)-0000.0000", "(000)-00.0000", "(000)-(000)-000.0000", "(000)--000.0000", "(000))-000.0000", "(000-000.0000", "(0000)-000.0000", "(00)-000.0000", "((000)-000.0000", "000)-000.0000"]}, {"regex": "^(http|https|ftp|ftps)\\://([a-zA-Z0-9\\-]+)(\\.[a-zA-Z0-9\\-]+)*(\\.[a-zA-Z]{2,3})(:[0-9]*)?(/[a-zA-Z0-9_\\-]*)*(\\.?[a-zA-Z0-9#]{1,10})?([\\?][a-zA-Z0-9\\-\\._\\,\\&#39;\\+&amp;%\\$#\\=~]*)?$", "exceptionStackTrace": null, "matches": ["http://evil.evil.AA:0/evil.#", "http://evil.evil.AA:0/evil.#?~", "http://evil.evil.AA:0/evil.#?=", "http://evil.evil.AA:0/evil.#?;", "http://evil.evil.AA:0/evil.#?.", "http://evil.evil.AA:0/evil.#?-", "http://evil.evil.AA:0/evil.#?,", "http://evil.evil.AA:0/evil.#?+", "http://evil.evil.AA:0/evil.#?&", "http://evil.evil.AA:0/evil.#?%", "http://evil.evil.AA:0/evil.#?$", "http://evil.evil.AA:0/evil.#?#", "http://evil.evil.AA:0/evil.#?eVil", "http://evil.evil.AA:0/evil.#?EVIL", "http://evil.evil.AA:0/evil.#?ev_il", "http://evil.evil.AA:0/evil.#?ev4il", "http://evil.evil.AA:0/evil.#?e", "http://evil.evil.AA:0/evil.#?6", "http://evil.evil.AA:0/evil.#?_", "http://evil.evil.AA:0/evil.#?", "http://evil.evil.AA:0/evil?evil", "http://evil.evil.AA:0/evil.##########?evil", "http://evil.evil.AA:0/evil.a?evil", "http://evil.evil.AA:0/evil.A?evil", "http://evil.evil.AA:0/evil.0?evil", "http://evil.evil.AA:0/evil#?evil", "http://evil.evil.AA:0/evil/evil.#?evil", "http://evil.evil.AA:0.#?evil", "http://evil.evil.AA:0//.#?evil", "http://evil.evil.AA:0/-.#?evil", "http://evil.evil.AA:0/eVil.#?evil", "http://evil.evil.AA:0/EVIL.#?evil", "http://evil.evil.AA:0/ev_il.#?evil", "http://evil.evil.AA:0/ev4il.#?evil", "http://evil.evil.AA:0/e.#?evil", "http://evil.evil.AA:0/6.#?evil", "http://evil.evil.AA:0/_.#?evil", "http://evil.evil.AA:0/.#?evil", "http://evil.evil.AA/evil.#?evil", "http://evil.evil.AA:00/evil.#?evil", "http://evil.evil.AA:/evil.#?evil", "http://evil.evil.AAA:0/evil.#?evil", "http://evil.evil.aA:0/evil.#?evil", "http://evil.evil.evil.AA:0/evil.#?evil", "http://evil.AA:0/evil.#?evil", "http://evil.-.AA:0/evil.#?evil", "http://evil.eVil.AA:0/evil.#?evil", "http://evil.EVIL.AA:0/evil.#?evil", "http://evil.ev4il.AA:0/evil.#?evil", "http://evil.e.AA:0/evil.#?evil", "http://evil.6.AA:0/evil.#?evil", "http://-.evil.AA:0/evil.#?evil", "http://eVil.evil.AA:0/evil.#?evil", "http://EVIL.evil.AA:0/evil.#?evil", "http://ev4il.evil.AA:0/evil.#?evil", "http://e.evil.AA:0/evil.#?evil", "http://6.evil.AA:0/evil.#?evil", "ftps://evil.AA", "ftp://evil.AA", "https://evil.AA", "http://evil.AA", "ftps://evil.evil.AA:0/evil.#?evil", "ftp://evil.evil.AA:0/evil.#?evil", "https://evil.evil.AA:0/evil.#?evil", "http://evil.evil.AA:0/evil.#?evil"], "nonMatches": ["http://evil.evil.AA:0/evil.#?evil?evil", "http://evil.evil.AA:0/evil.#??", "http://evil.evil.AA:0/evil.#?:", "http://evil.evil.AA:0/evil.#?/", "http://evil.evil.AA:0/evil.#?ev il", "http://evil.evil.AA:0/evil.#? ", "http://evil.evil.AA:0/evil.#.#?evil", "http://evil.evil.AA:0/evil.###########?evil", "http://evil.evil.AA:0/evil.?evil", "http://evil.evil.AA:0/evil..#?evil", "http://evil.evil.AA:0/~.#?evil", "http://evil.evil.AA:0/?.#?evil", "http://evil.evil.AA:0/=.#?evil", "http://evil.evil.AA:0/;.#?evil", "http://evil.evil.AA:0/:.#?evil", "http://evil.evil.AA:0/..#?evil", "http://evil.evil.AA:0/,.#?evil", "http://evil.evil.AA:0/+.#?evil", "http://evil.evil.AA:0/&.#?evil", "http://evil.evil.AA:0/%.#?evil", "http://evil.evil.AA:0/$.#?evil", "http://evil.evil.AA:0/#.#?evil", "http://evil.evil.AA:0/ev il.#?evil", "http://evil.evil.AA:0/ .#?evil", "http://evil.evil.AA:0:0/evil.#?evil", "http://evil.evil.AAAA:0/evil.#?evil", "http://evil.evil.A:0/evil.#?evil", "http://evil.~.AA:0/evil.#?evil", "http://evil.?.AA:0/evil.#?evil", "http://evil.=.AA:0/evil.#?evil", "http://evil.;.AA:0/evil.#?evil", "http://evil.:.AA:0/evil.#?evil", "http://evil./.AA:0/evil.#?evil", "http://evil...AA:0/evil.#?evil", "http://evil.,.AA:0/evil.#?evil", "http://evil.+.AA:0/evil.#?evil", "http://evil.&.AA:0/evil.#?evil", "http://evil.%.AA:0/evil.#?evil", "http://evil.$.AA:0/evil.#?evil", "http://evil.#.AA:0/evil.#?evil", "http://evil.ev_il.AA:0/evil.#?evil", "http://evil.ev il.AA:0/evil.#?evil", "http://evil. .AA:0/evil.#?evil", "http://evil._.AA:0/evil.#?evil", "http://evil..AA:0/evil.#?evil", "http://~.evil.AA:0/evil.#?evil", "http://?.evil.AA:0/evil.#?evil", "http://=.evil.AA:0/evil.#?evil", "http://;.evil.AA:0/evil.#?evil", "http://:.evil.AA:0/evil.#?evil", "http:///.evil.AA:0/evil.#?evil", "http://..evil.AA:0/evil.#?evil", "http://,.evil.AA:0/evil.#?evil", "http://+.evil.AA:0/evil.#?evil", "http://&.evil.AA:0/evil.#?evil", "http://%.evil.AA:0/evil.#?evil", "http://$.evil.AA:0/evil.#?evil", "http://#.evil.AA:0/evil.#?evil", "http://ev_il.evil.AA:0/evil.#?evil", "http://ev il.evil.AA:0/evil.#?evil", "http:// .evil.AA:0/evil.#?evil", "http://_.evil.AA:0/evil.#?evil", "http://.evil.AA:0/evil.#?evil"]}, {"regex": "^(0?[1-9]|1[012])$", "exceptionStackTrace": null, "matches": ["11", "10", "1", "12", "01"], "nonMatches": ["13", "00", "001"]}, {"regex": "^([12]?[0-9]|3[01])$", "exceptionStackTrace": null, "matches": ["30", "10", "0", "31", "20"], "nonMatches": ["32", "220", "00"]}, {"regex": "^((18[5-9][0-9])|((19|20)[0-9]{2})|(2100))$", "exceptionStackTrace": null, "matches": ["2100", "2000", "1900", "1850"], "nonMatches": ["19000", "190", "1800"]}, {"regex": "(([\\n,  ])*((<+)([^<>]+)(>*))+([\\n,  ])*)+", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\n"}, "matches": [], "nonMatches": []}, {"regex": "^((29\\/0?2\\/[0-9]{0,2}(04|08|92|96|([1|3|5|7][2|6])|[2|4|6|8][0|4|8]))|(((28|[12][0-7]|0?[1-9])\\/0?2)|((30|[12][0-9]|0?[1-9])\\/(0?(4|6|9)|11))|((31|[12][0-9]|0?[1-9])\\/(0?(1|3|5|7|8))|(10|12)))\\/(\\d{2}|\\d{4}))$", "exceptionStackTrace": null, "matches": ["1/01/00", "10/01/00", "1/04/00", "10/04/00", "1/02/00", "10/02/00", "29/02/08|", "29/02/084", "29/02/080", "29/02/0|8", "29/02/068", "29/02/048", "29/02/028", "29/02/07|", "29/02/072", "29/02/0|6", "29/02/056", "29/02/036", "29/02/016", "29/02/0004", "29/02/04", "29/2/004", "1/1/00", "20/1/00", "31/8/00", "31/7/00", "31/5/00", "31/3/00", "31/1/00", "1/4/00", "20/4/00", "30/9/00", "30/6/00", "30/4/00", "1/2/00", "20/2/00", "28/2/0000", "28/2/00", "29/2/88", "29/2/76", "29/2/96", "29/2/92", "29/2/08", "29/2/04", "12/00", "10/00", "01/01/00", "20/01/00", "31/08/00", "31/07/00", "31/05/00", "31/03/00", "31/01/00", "01/04/00", "20/04/00", "30/11/00", "30/09/00", "30/06/00", "30/04/00", "01/02/00", "20/02/00", "28/02/0000", "28/02/00", "29/02/088", "29/02/076", "29/02/096", "29/02/092", "29/02/008", "29/02/004"], "nonMatches": ["001/01/00", "00/01/00", "31/001/00", "001/04/00", "00/04/00", "30/004/00", "001/02/00", "00/02/00", "28/02/00000", "28/02/000", "28/02/0", "28/002/00", "29/02/081", "29/02/070", "29/02/006", "29/02/00004", "29/002/004"]}, {"regex": "^(\\(\\d{2}\\)?\\s?|\\d{2}(\\-|\\s))?\\d{2,4}(\\-|\\s)?\\d{4,5}$", "exceptionStackTrace": null, "matches": ["(00) 00-00000", "(00) 000000", "(00) 0000-0000", "00-0000", "(00)00-0000", "(00 00-0000", "000000", "00 00-0000", "00-00-0000", "(00) 00 0000", "(00) 00-0000"], "nonMatches": ["000-00-0000", "0-00-0000", "(00) 00-000000", "(00) 00-000", "(00) 00--0000", "(00) 00000-0000", "(00) 0-0000", "(00) (00) 00-0000", "(00)  00-0000", "(00)) 00-0000", "(000) 00-0000", "(0) 00-0000"]}, {"regex": "^\\s*(?<sign>[+-]?)(?:0*?)(?<abs_value>(?:(?:[1-9]\\d*)|0)?(?:(?<=\\d)\\.|\\.(?=\\d))(?:(?:(?:\\d*[1-9])|0)?)?|(?:(?:[1-9]\\d*)|0)?)(?:0*)\\s*$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<s"}, "matches": []}, {"regex": "(\\w+?@\\w+?\\x2E.+)", "exceptionStackTrace": null, "matches": ["evil@evil.@", "evil@evil..", "evil@evil.eVil", "evil@evil.EVIL", "evil@evil.ev_il", "evil@evil.ev il", "evil@evil.ev4il", "evil@evil.e", "evil@evil. ", "evil@evil.6", "evil@evil._", "evil@eVil.evil", "evil@EVIL.evil", "evil@ev_il.evil", "evil@ev4il.evil", "evil@e.evil", "evil@6.evil", "evil@_.evil", "eVil@evil.evil", "EVIL@evil.evil", "ev_il@evil.evil", "ev il@evil.evil", "ev4il@evil.evil", "e@evil.evil", "6@evil.evil", "_@evil.evil", "evil@evil.evil"], "nonMatches": ["evil@evil.", "evil@ev il.evil", "evil@ .evil", "evil@.evil", " @evil.evil", "@evil.evil"]}, {"regex": "Last.*?(\\d+.?\\d*)", "exceptionStackTrace": null, "matches": ["Lastevil0a00", "Lastevil0a", "Lastevil0aa0", "Lastevil00", "Lastevil0_0", "Lastevil0A0", "Lastevil000", "Lastevil0 0", "Lastevil00a0", "Lastevila0", "LasteVil0a0", "LastEVIL0a0", "Lastev_il0a0", "Lastev il0a0", "Lastev4il0a0", "Laste0a0", "Last 0a0", "Last60a0", "Last_0a0", "Last0a0", "Last0", "Lastevil0a0"], "nonMatches": []}, {"regex": "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\\s).{4,8}$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["aaaaaaaaa", "aaaaaaaa", "aaa", "_aaa", "Aaaa", "0aaa", " aaa", "aaaa"]}, {"regex": "^(GIR ?0AA|(?:[A-PR-UWYZ](?:\\d|\\d{2}|[A-HK-Y]\\d|[A-HK-Y]\\d\\d|\\d[A-HJKSTUW]|[A-HK-Y]\\d[ABEHMNPRV-Y])) ?\\d[ABD-HJLNP-UW-Z]{2})$", "exceptionStackTrace": null, "matches": ["ZK0V 0NN", "ZK0P 0NN", "ZK0N 0NN", "ZK0M 0NN", "ZK0H 0NN", "ZK0E 0NN", "ZK0B 0NN", "ZK0A 0NN", "ZA0R 0NN", "Z0U 0NN", "Z0T 0NN", "Z0S 0NN", "Z0K 0NN", "Z0J 0NN", "Z0A 0NN", "ZA00 0NN", "ZA0 0NN", "Z0 0WN", "Z0 0PN", "Z0 0LN", "Z0 0JN", "Z0 0DN", "Z0 0BN", "Z0 0AN", "Y0 0NN", "W0 0NN", "R0 0NN", "A0 0NN", "ZK0R0NN", "Z0W0NN", "ZK000NN", "ZK00NN", "Z000NN", "Z00NN", "GIR0AA", "ZK0R 0NN", "Z0W 0NN", "ZK00 0NN", "ZK0 0NN", "Z00 0NN", "Z0 0NN", "GIR 0AA"], "nonMatches": ["ZK0C 0NN", "ZI0R 0NN", "Z0I 0NN", "ZI00 0NN", "ZI0 0NN", "Z000 0NN", "Z0 0NNN", "Z0 0N", "Z0 0CN", "Z0  0NN", "Q0 0NN", "GIR  0AA"]}, {"regex": "^([0-9]{2})(00[1-9]|0[1-9][0-9]|[1-2][0-9][0-9]|3[0-5][0-9]|36[0-6])$", "exceptionStackTrace": null, "matches": ["00360", "00300", "00100", "00010", "00001"], "nonMatches": ["00367", "00000", "000001", "0001"]}, {"regex": "fghdtfh", "exceptionStackTrace": null, "matches": ["fghdtfh"], "nonMatches": []}, {"regex": "fcsfgvre", "exceptionStackTrace": null, "matches": ["fcsfgvre"], "nonMatches": []}, {"regex": "(?ix-ms:[\\w&#246;&#228;&#252;&#223;]{2,}[\\.]?)*", "exceptionStackTrace": null, "matches": [""], "nonMatches": []}, {"regex": "^([0-1]?\\d|2[0-3])([:]?[0-5]\\d)?([:]?|[0-5]\\d)?\\s?(A|AM|P|p|a|PM|am|pm|pM|aM|Am|Pm)?$", "exceptionStackTrace": null, "matches": ["00:00: ", "00:00:A", "00:00 A", "00: A", "0000: A", "0:00: A", "20", "0", "20:00: A", "00:0000 A", "00:00: Pm", "00:00: Am", "00:00: aM", "00:00: pM", "00:00: pm", "00:00: am", "00:00: PM", "00:00: a", "00:00: p", "00:00: P", "00:00: AM", "00:00: A"], "nonMatches": ["24:00: A", "00:0060 A", "00:00: AA", "00:00:  A", "00:00:: A", "00:00:00: A", "00:60: A", "00::00: A", "000:00: A"]}, {"regex": "^(\\d{5}((|-)-\\d{4})?)|([A-Za-z]\\d[A-Za-z][\\s\\.\\-]?(|-)\\d[A-Za-z]\\d)|[A-Za-z]{1,2}\\d{1,2}[A-Za-z]? \\d[A-Za-z]{2}$", "exceptionStackTrace": null, "matches": ["a0a 0Aa", "a0A 0aa", "a00a 0aa", "aaa0a 0aa", "aa0a 0aa", "A0a 0aa", "a0a--0A0", "a0a-0a0", "a0a.-0a0", "a0a -0a0", "a0A--0a0", "A0a--0a0", "00000--0000--0000", "00000--00000", "00000--000", "00000---0000", "00000-0000", "000000--0000", "a0 0aa", "a0a0a0", "00000", "a0a 0aa", "a0a--0a0", "00000--0000"], "nonMatches": ["a0a 0aaa", "a0a 0a", "a0aa 0aa", "a000a 0aa", "aa 0aa", "0a 0aa", "a0a---0a0", "0000--0000"]}, {"regex": "^0?[0-9]?[0-9]$|^(100)$", "exceptionStackTrace": null, "matches": ["00", "0", "100", "000"], "nonMatches": ["0000"]}, {"regex": "^((unit|u|)\\s*)?(?<unit>\\d*\\w?)?(\\s+|/)?(?<streetNo>\\d+(\\-\\d+)?)\\s+(?<streetName>\\w+)\\s+(?<streetType>\\w+)\\s+(?<suburb>\\w+(\\s+\\w+)?)\\s+(?<state>\\w+)\\s+(?<postcode>\\d{4})$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<u"}, "matches": []}, {"regex": "^\\d{1,3}((\\.\\d{1,3}){3}|(\\.\\d{1,3}){5})$", "exceptionStackTrace": null, "matches": ["0.000.0.0.0.0", "0.000.0.0", "000.0.0.0", "0.0.0.0.0.0", "0.0.0.0"], "nonMatches": ["0.0.0.0.0.0.0", "0.0000.0.0.0.0", "0..0.0.0.0", "0.0.0.0.0", "0.0.0", "0.0000.0.0", "0..0.0", "0000.0.0.0", ".0.0.0"]}, {"regex": "((\\(\\d{3}\\) ?)|(\\d{3}-))?\\d{3}-\\d{4}", "exceptionStackTrace": null, "matches": ["0000-000-0000", "00-000-0000", "(000) 000-00000", "(000) 0000-0000", "(000) (000) 000-0000", "(000)  000-0000", "(000)000-0000", "(0000) 000-0000", "(00) 000-0000", "000-0000", "000-000-0000", "(000) 000-0000"], "nonMatches": ["(000) 000-000", "(000) 00-0000"]}, {"regex": "^\\d{4}(\\/|-)([0][1-9]|[1][0-2])(\\/|-)([0][1-9]|[1-2][0-9]|[3][0-1])$", "exceptionStackTrace": null, "matches": ["0000-01/01", "0000/10/01", "0000/01-01", "0000/01/30", "0000/01/10", "0000/01/01"], "nonMatches": ["0000/13/01", "0000/01/32", "0000/01/00", "0000/00/01", "00000/01/01", "000/01/01"]}, {"regex": "http://www.hotmailcontactnumber.co.uk/", "exceptionStackTrace": null, "matches": ["http://wwwahotmailcontactnumberacoAuk/", "http://wwwahotmailcontactnumberaco:uk/", "http://wwwahotmailcontactnumberaco0uk/", "http://wwwahotmailcontactnumberaco/uk/", "http://wwwahotmailcontactnumberaco uk/", "http://wwwahotmailcontactnumberAcoauk/", "http://wwwahotmailcontactnumber:coauk/", "http://wwwahotmailcontactnumber0coauk/", "http://wwwahotmailcontactnumber/coauk/", "http://wwwahotmailcontactnumber coauk/", "http://wwwAhotmailcontactnumberacoauk/", "http://www:hotmailcontactnumberacoauk/", "http://www0hotmailcontactnumberacoauk/", "http://www/hotmailcontactnumberacoauk/", "http://www hotmailcontactnumberacoauk/", "http://wwwahotmailcontactnumberacoauk/"], "nonMatches": []}, {"regex": "^([2-9])(\\d{2})(-?|\\040?)(\\d{4})( ?|\\040?)(\\d{1,4}?|\\040?)$", "exceptionStackTrace": null, "matches": ["200-0000 0000", "200-0000 ", "200-00000", "2000000 0", "2000000", "20000000", "200 0000 0", "200-0000  ", "200-0000 0"], "nonMatches": ["200  0000 0", "200-0000   ", "200-0000 00000", "200-0000  0", "200-00000 0", "200-000 0", "200--0000 0", "2000-0000 0", "20-0000 0", "000-0000 0"]}, {"regex": "^([8-9])([1-9])(\\d{2})(-?|\\040?)(\\d{4})$", "exceptionStackTrace": null, "matches": ["81000000", "8100 0000", "8100-0000"], "nonMatches": ["8100  0000", "8100-00000", "8100-000", "8100--0000", "81000-0000", "810-0000", "8000-0000", "0100-0000"]}, {"regex": "^([A-Za-z]{6}[0-9lmnpqrstuvLMNPQRSTUV]{2}[abcdehlmprstABCDEHLMPRST]{1}[0-9lmnpqrstuvLMNPQRSTUV]{2}[A-Za-z]{1}[0-9lmnpqrstuvLMNPQRSTUV]{3}[A-Za-z]{1})|([0-9]{11})$", "exceptionStackTrace": null, "matches": ["000000000000", "aaaaaaVVTVVaVVVaa", "aaaaaaVVTVVaVVVA", "aaaaaaVVTVVaVVVVa", "aaaaaaVVTVVavVVa", "aaaaaaVVTVVauVVa", "aaaaaaVVTVVatVVa", "aaaaaaVVTVVasVVa", "aaaaaaVVTVVarVVa", "aaaaaaVVTVVaqVVa", "aaaaaaVVTVVapVVa", "aaaaaaVVTVVanVVa", "aaaaaaVVTVVamVVa", "aaaaaaVVTVValVVa", "aaaaaaVVTVVaUVVa", "aaaaaaVVTVVaTVVa", "aaaaaaVVTVVaSVVa", "aaaaaaVVTVVaRVVa", "aaaaaaVVTVVaQVVa", "aaaaaaVVTVVaPVVa", "aaaaaaVVTVVaNVVa", "aaaaaaVVTVVaMVVa", "aaaaaaVVTVVaLVVa", "aaaaaaVVTVVa0VVa", "aaaaaaVVTVVAVVVa", "aaaaaaVVTvVaVVVa", "aaaaaaVVTuVaVVVa", "aaaaaaVVTtVaVVVa", "aaaaaaVVTsVaVVVa", "aaaaaaVVTrVaVVVa", "aaaaaaVVTqVaVVVa", "aaaaaaVVTpVaVVVa", "aaaaaaVVTnVaVVVa", "aaaaaaVVTmVaVVVa", "aaaaaaVVTlVaVVVa", "aaaaaaVVTUVaVVVa", "aaaaaaVVTTVaVVVa", "aaaaaaVVTSVaVVVa", "aaaaaaVVTRVaVVVa", "aaaaaaVVTQVaVVVa", "aaaaaaVVTPVaVVVa", "aaaaaaVVTNVaVVVa", "aaaaaaVVTMVaVVVa", "aaaaaaVVTLVaVVVa", "aaaaaaVVT0VaVVVa", "aaaaaaVVtVVaVVVa", "aaaaaaVVsVVaVVVa", "aaaaaaVVrVVaVVVa", "aaaaaaVVpVVaVVVa", "aaaaaaVVmVVaVVVa", "aaaaaaVVlVVaVVVa", "aaaaaaVVhVVaVVVa", "aaaaaaVVeVVaVVVa", "aaaaaaVVdVVaVVVa", "aaaaaaVVcVVaVVVa", "aaaaaaVVbVVaVVVa", "aaaaaaVVaVVaVVVa", "aaaaaaVVSVVaVVVa", "aaaaaaVVRVVaVVVa", "aaaaaaVVPVVaVVVa", "aaaaaaVVMVVaVVVa", "aaaaaaVVLVVaVVVa", "aaaaaaVVHVVaVVVa", "aaaaaaVVEVVaVVVa", "aaaaaaVVDVVaVVVa", "aaaaaaVVCVVaVVVa", "aaaaaaVVBVVaVVVa", "aaaaaaVVAVVaVVVa", "aaaaaavVTVVaVVVa", "aaaaaauVTVVaVVVa", "aaaaaatVTVVaVVVa", "aaaaaasVTVVaVVVa", "aaaaaarVTVVaVVVa", "aaaaaaqVTVVaVVVa", "aaaaaapVTVVaVVVa", "aaaaaanVTVVaVVVa", "aaaaaamVTVVaVVVa", "aaaaaalVTVVaVVVa", "aaaaaaUVTVVaVVVa", "aaaaaaTVTVVaVVVa", "aaaaaaSVTVVaVVVa", "aaaaaaRVTVVaVVVa", "aaaaaaQVTVVaVVVa", "aaaaaaPVTVVaVVVa", "aaaaaaNVTVVaVVVa", "aaaaaaMVTVVaVVVa", "aaaaaaLVTVVaVVVa", "aaaaaa0VTVVaVVVa", "AaaaaaVVTVVaVVVa", "00000000000", "aaaaaaVVTVVaVVVa"], "nonMatches": ["0000000000", "aaaaaaVVTVVaVVV", "aaaaaaVVTVVaVVa", "aaaaaaVVTVVaaVVa", "aaaaaaVVTVVaAVVa", "aaaaaaVVTVVaaVVVa", "aaaaaaVVTVVVVVa", "aaaaaaVVTVVVaVVVa", "aaaaaaVVTVaVVVa", "aaaaaaVVTaVaVVVa", "aaaaaaVVTAVaVVVa", "aaaaaaVVTTVVaVVVa", "aaaaaaVVVVaVVVa", "aaaaaaVVfVVaVVVa", "aaaaaaVVFVVaVVVa", "aaaaaaVVVTVVaVVVa", "aaaaaaVTVVaVVVa", "aaaaaaaVTVVaVVVa", "aaaaaaAVTVVaVVVa", "aaaaaaaVVTVVaVVVa", "aaaaaVVTVVaVVVa"]}, {"regex": "^[0-9a-zA-Z]+([0-9a-zA-Z]*[-._+])*[0-9a-zA-Z]+@[0-9a-zA-Z]+([-.][0-9a-zA-Z]+)*([0-9a-zA-Z]*[.])[a-zA-Z]{2,6}$", "exceptionStackTrace": null, "matches": ["evilevil+evil@evil.evilevil.AAAAAA", "evilevil+evil@evil.evilevil.aA", "evilevil+evil@evil.evileVil.AA", "evilevil+evil@evil.evilEVIL.AA", "evilevil+evil@evil.evilev4il.AA", "evilevil+evil@evil.evile.AA", "evilevil+evil@evil.evil6.AA", "evilevil+evil@evil.evil.evilevil.AA", "evilevil+evil@evilevil.AA", "evilevil+evil@evil.eVilevil.AA", "evilevil+evil@evil.EVILevil.AA", "evilevil+evil@evil.ev4ilevil.AA", "evilevil+evil@evil.eevil.AA", "evilevil+evil@evil.6evil.AA", "evilevil+evil@evil.evil.AA", "evilevil+evil@evil-evilevil.AA", "evilevil+evil@eVil.evilevil.AA", "evilevil+evil@EVIL.evilevil.AA", "evilevil+evil@ev4il.evilevil.AA", "evilevil+evil@e.evilevil.AA", "evilevil+evil@6.evilevil.AA", "evilevil+eVil@evil.evilevil.AA", "evilevil+EVIL@evil.evilevil.AA", "evilevil+ev_il@evil.evilevil.AA", "evilevil+ev4il@evil.evilevil.AA", "evilevil+e@evil.evilevil.AA", "evilevil+6@evil.evilevil.AA", "evilevil+evil+evil@evil.evilevil.AA", "evilevil@evil.evilevil.AA", "evilevil_evil@evil.evilevil.AA", "evilevil.evil@evil.evilevil.AA", "evilevil-evil@evil.evilevil.AA", "evileVil+evil@evil.evilevil.AA", "evilEVIL+evil@evil.evilevil.AA", "evilev_il+evil@evil.evilevil.AA", "evilev4il+evil@evil.evilevil.AA", "evile+evil@evil.evilevil.AA", "evil6+evil@evil.evilevil.AA", "evil_+evil@evil.evilevil.AA", "eVilevil+evil@evil.evilevil.AA", "EVILevil+evil@evil.evilevil.AA", "ev_ilevil+evil@evil.evilevil.AA", "ev4ilevil+evil@evil.evilevil.AA", "eevil+evil@evil.evilevil.AA", "6evil+evil@evil.evilevil.AA", "evil+evil@evil.evilevil.AA", "evilevil@evil.AA", "evilevil+evil@evil.evilevil.AA"], "nonMatches": ["evilevil+evil@evil.evilevil.AAAAAAA", "evilevil+evil@evil.evilevil.A", "evilevil+evil@evil.evilev_il.AA", "evilevil+evil@evil.evilev il.AA", "evilevil+evil@evil.evil .AA", "evilevil+evil@evil.evil_.AA", "evilevil+evil@evil.ev_ilevil.AA", "evilevil+evil@evil.ev ilevil.AA", "evilevil+evil@evil. evil.AA", "evilevil+evil@evil._evil.AA", "evilevil+evil@ev_il.evilevil.AA", "evilevil+evil@ev il.evilevil.AA", "evilevil+evil@ .evilevil.AA", "evilevil+evil@_.evilevil.AA", "evilevil+evil@.evilevil.AA", "evilevil+ev il@evil.evilevil.AA", "evilevil+ @evil.evilevil.AA", "evilevil+_@evil.evilevil.AA", "evilevil+@evil.evilevil.AA", "evilev il+evil@evil.evilevil.AA", "evil +evil@evil.evilevil.AA", "ev ilevil+evil@evil.evilevil.AA", " evil+evil@evil.evilevil.AA", "_evil+evil@evil.evilevil.AA"]}, {"regex": "^[A-z]?\\d{8}[A-z]$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (bad range): Invalid range: A-z"}, "matches": [], "nonMatches": []}, {"regex": "(?<cmd>^&quot;[^&quot;]*&quot;|\\S*) *(?<prm>.*)?", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<c"}, "matches": []}, {"regex": "(?<Year>(?:\\d{4}|\\d{2}))-(?<Month>\\d{1,2})-(?<Day>\\d{1,2})", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<Y"}, "matches": []}, {"regex": "\\b[A-Z-[DFIOQUWZ]]\\d[A-Z-[DFIOQU]]\\ +\\d[A-Z-[DFIOQU]]\\d\\b", "exceptionStackTrace": null, "matches": ["Z]0U] 0[]0", "Z]0U] 0Q]0", "Z]0U] 0O]0", "Z]0U] 0I]0", "Z]0U] 0F]0", "Z]0U] 0D]0", "Z]0U] 0A]0", "Z]0U] 0-]0", "Z]0U]  0U]0", "Z]0[] 0U]0", "Z]0Q] 0U]0", "Z]0O] 0U]0", "Z]0I] 0U]0", "Z]0F] 0U]0", "Z]0D] 0U]0", "Z]0A] 0U]0", "Z]0-] 0U]0", "W]0U] 0U]0", "U]0U] 0U]0", "Q]0U] 0U]0", "O]0U] 0U]0", "I]0U] 0U]0", "F]0U] 0U]0", "D]0U] 0U]0", "A]0U] 0U]0", "Z]0U] 0U]0"], "nonMatches": ["Z]0U]0U]0", "[]0U] 0U]0", "-]0U] 0U]0"]}, {"regex": "frgvrdg", "exceptionStackTrace": null, "matches": ["frgvrdg"], "nonMatches": []}, {"regex": "^[-+]?([0-9]{1,3}[,]?)?([0-9]{3}[,]?)*[.]?[0-9]*$", "exceptionStackTrace": null, "matches": ["+0,000,.00", "+0,000,.", "+0,000,0", "+0,000,000,.0", "+0,.0", "+0,000.0", "+000,.0", "+0000,.0", "+0000,000,.0", "+000,000,.0", "0,000,.0", "-0,000,.0", "", "+0,000,.0"], "nonMatches": ["+0,000,..0", "+0,000,,.0", "+0,0000,.0", "+0,00,.0", "+0,0,000,.0", "+0,,000,.0", "+,000,.0", "++0,000,.0"]}, {"regex": "^[0-9]{5}([- /]?[0-9]{4})?$", "exceptionStackTrace": null, "matches": ["000000000", "00000-0000", "00000 0000", "00000", "00000/0000"], "nonMatches": ["00000/0000/0000", "00000/00000", "00000/000", "00000//0000", "000000/0000", "0000/0000"]}, {"regex": "^(\\d{1,2})(\\s?(H|h)?)(:([0-5]\\d))?$", "exceptionStackTrace": null, "matches": ["0 H", "0 :00", "0H:00", "00 H:00", "0", "0 h:00", "0 H:00"], "nonMatches": ["0 H:00:00", "0 H:60", "0 HH:00", "0  H:00", "000 H:00", " H:00"]}, {"regex": "(0\\d|1\\d|2[0-4]) ?: ?([0-5]\\d)( ?: ?[0-5]\\d)?", "exceptionStackTrace": null, "matches": ["25 : 00 : 00", "00 : 00 : 00 : 00", "00 : 00", "00 : 00 : 60", "00 : 00 :  00", "00 : 00 :00", "00 : 00  : 00", "00 : 00: 00", "00 :  00 : 00", "00 :00 : 00", "00  : 00 : 00", "00: 00 : 00", "20:00", "10:00", "00:00", "20 : 00 : 00", "10 : 00 : 00", "00 : 00 : 00"], "nonMatches": ["00 : 60 : 00"]}, {"regex": "Error Troubleshooting with Norton Antivirus", "exceptionStackTrace": null, "matches": ["Error Troubleshooting with Norton Antivirus"], "nonMatches": []}, {"regex": "Quicken", "exceptionStackTrace": null, "matches": ["Quicken"], "nonMatches": []}, {"regex": "https://www.ifirmationeyeserumblog.com/tryvexin-it/", "exceptionStackTrace": null, "matches": ["https://wwwaifirmationeyeserumblogAcom/tryvexin-it/", "https://wwwaifirmationeyeserumblog:com/tryvexin-it/", "https://wwwaifirmationeyeserumblog0com/tryvexin-it/", "https://wwwaifirmationeyeserumblog/com/tryvexin-it/", "https://wwwaifirmationeyeserumblog-com/tryvexin-it/", "https://wwwaifirmationeyeserumblog com/tryvexin-it/", "https://wwwAifirmationeyeserumblogacom/tryvexin-it/", "https://www:ifirmationeyeserumblogacom/tryvexin-it/", "https://www0ifirmationeyeserumblogacom/tryvexin-it/", "https://www/ifirmationeyeserumblogacom/tryvexin-it/", "https://www-ifirmationeyeserumblogacom/tryvexin-it/", "https://www ifirmationeyeserumblogacom/tryvexin-it/", "https://wwwaifirmationeyeserumblogacom/tryvexin-it/"], "nonMatches": []}, {"regex": "^[0-9]{5}(-[0-9]{4})?$", "exceptionStackTrace": null, "matches": ["00000", "00000-0000"], "nonMatches": ["00000-0000-0000", "00000-00000", "00000-000", "000000-0000", "0000-0000"]}, {"regex": "\\D", "exceptionStackTrace": null, "matches": ["_", "A", " ", "a"], "nonMatches": ["0"]}, {"regex": "(?:\\+\\s*\\d{2}[\\s-]*)?(?:\\d[-\\s]*){10}", "exceptionStackTrace": null, "matches": ["+ 00-0-0-0-0-0-0-0-0-0-0-0-", "+ 00-0-0-0-0-0-0-0-0-0-", "+ 00-0--0-0-0-0-0-0-0-0-0-", "+ 00-00-0-0-0-0-0-0-0-0-", "+ 00-0 0-0-0-0-0-0-0-0-0-", "+ 00-+ 00-0-0-0-0-0-0-0-0-0-0-", "0-0-0-0-0-0-0-0-0-0-", "+ 00--0-0-0-0-0-0-0-0-0-0-", "+ 000-0-0-0-0-0-0-0-0-0-", "+ 00 0-0-0-0-0-0-0-0-0-0-", "+ 000-0-0-0-0-0-0-0-0-0-0-", "+ 0-0-0-0-0-0-0-0-0-0-0-", "+  00-0-0-0-0-0-0-0-0-0-0-", "+00-0-0-0-0-0-0-0-0-0-0-", "00-0-0-0-0-0-0-0-0-", "+ 00-0-0-0-0-0-0-0-0-0-0-"], "nonMatches": []}, {"regex": "([A-Z]|[a-z])|\\/|\\?|\\-|\\+|\\=|\\&|\\%|\\$|\\#|\\@|\\!|\\||\\\\|\\}|\\]|\\[|\\{|\\;|\\:|\\&#39;|\\&quot;|\\,|\\.|\\>|\\<|\\*|([0-9])|\\(|\\)|\\s", "exceptionStackTrace": null, "matches": [" ", ")", "(", "0", "*", "<", ">", ".", ",", "&quot;", "&#39;", ":", ";", "{", "[", "]", "}", "\\", "|", "!", "@", "#", "$", "%", "&", "=", "+", "-", "?", "/", "a", "A"], "nonMatches": []}, {"regex": "(\\<(.*?)\\>)(.*?)(\\<\\/(.*?)\\>)", "exceptionStackTrace": null, "matches": ["<evil>evil</>>", "<evil>evil</<>", "<evil>evil<//>", "<evil>evil</eVil>", "<evil>evil</EVIL>", "<evil>evil</ev_il>", "<evil>evil</ev il>", "<evil>evil</ev4il>", "<evil>evil</e>", "<evil>evil</ >", "<evil>evil</6>", "<evil>evil</_>", "<evil>evil</>", "<evil>></evil>", "<evil><</evil>", "<evil>/</evil>", "<evil>eVil</evil>", "<evil>EVIL</evil>", "<evil>ev_il</evil>", "<evil>ev il</evil>", "<evil>ev4il</evil>", "<evil>e</evil>", "<evil> </evil>", "<evil>6</evil>", "<evil>_</evil>", "<evil></evil>", "<>>evil</evil>", "<<>evil</evil>", "</>evil</evil>", "<eVil>evil</evil>", "<EVIL>evil</evil>", "<ev_il>evil</evil>", "<ev il>evil</evil>", "<ev4il>evil</evil>", "<e>evil</evil>", "< >evil</evil>", "<6>evil</evil>", "<_>evil</evil>", "<>evil</evil>", "<></>", "<evil>evil</evil>"], "nonMatches": []}, {"regex": "\\b([A-Za-z0-9]+)(-|_|\\.)?(\\w+)?@\\w+\\.(\\w+)?(\\.)?(\\w+)?(\\.)?(\\w+)?\\b", "exceptionStackTrace": null, "matches": ["evil-evil@evil.evil.evil.evilevil", "evil-evil@evil.evil.evil.eVil", "evil-evil@evil.evil.evil.EVIL", "evil-evil@evil.evil.evil.ev_il", "evil-evil@evil.evil.evil.ev il", "evil-evil@evil.evil.evil.ev4il", "evil-evil@evil.evil.evil.e", "evil-evil@evil.evil.evil. ", "evil-evil@evil.evil.evil.6", "evil-evil@evil.evil.evil._", "evil-evil@evil.evil.evil.", "evil-evil@evil.evil.evil..evil", "evil-evil@evil.evil.evilevil", "evil-evil@evil.evil.evilevil.evil", "evil-evil@evil.evil.eVil.evil", "evil-evil@evil.evil.EVIL.evil", "evil-evil@evil.evil.ev_il.evil", "evil-evil@evil.evil.ev il.evil", "evil-evil@evil.evil.ev4il.evil", "evil-evil@evil.evil.e.evil", "evil-evil@evil.evil. .evil", "evil-evil@evil.evil.6.evil", "evil-evil@evil.evil._.evil", "evil-evil@evil.evil..evil", "evil-evil@evil.evil..evil.evil", "evil-evil@evil.evilevil.evil", "evil-evil@evil.evilevil.evil.evil", "evil-evil@evil.eVil.evil.evil", "evil-evil@evil.EVIL.evil.evil", "evil-evil@evil.ev_il.evil.evil", "evil-evil@evil.ev il.evil.evil", "evil-evil@evil.ev4il.evil.evil", "evil-evil@evil.e.evil.evil", "evil-evil@evil.6.evil.evil", "evil-evil@evil._.evil.evil", "evil-evil@evil..evil.evil", "evil-evil@eVil.evil.evil.evil", "evil-evil@EVIL.evil.evil.evil", "evil-evil@ev_il.evil.evil.evil", "evil-evil@ev4il.evil.evil.evil", "evil-evil@e.evil.evil.evil", "evil-evil@6.evil.evil.evil", "evil-evil@_.evil.evil.evil", "evil-evilevil@evil.evil.evil.evil", "evil-eVil@evil.evil.evil.evil", "evil-EVIL@evil.evil.evil.evil", "evil-ev_il@evil.evil.evil.evil", "evil-ev il@evil.evil.evil.evil", "evil-ev4il@evil.evil.evil.evil", "evil-e@evil.evil.evil.evil", "evil-6@evil.evil.evil.evil", "evil-_@evil.evil.evil.evil", "evil-@evil.evil.evil.evil", "evil--evil@evil.evil.evil.evil", "evilevil@evil.evil.evil.evil", "eVil-evil@evil.evil.evil.evil", "EVIL-evil@evil.evil.evil.evil", "ev_il-evil@evil.evil.evil.evil", "ev il-evil@evil.evil.evil.evil", "ev4il-evil@evil.evil.evil.evil", "e-evil@evil.evil.evil.evil", " -evil@evil.evil.evil.evil", "6-evil@evil.evil.evil.evil", "_-evil@evil.evil.evil.evil", "-evil@evil.evil.evil.evil", "evil.evil@evil.evil.evil.evil", "evil_evil@evil.evil.evil.evil", "evil-evil@evil.evil.evil.evil"], "nonMatches": ["evil-evil@evil. .evil.evil", "evil-evil@ev il.evil.evil.evil", "evil-evil@ .evil.evil.evil", "evil-evil@.evil.evil.evil", "evil- @evil.evil.evil.evil", "evil@evil."]}, {"regex": "\\b([A-Za-z0-9]+)( )([A-Za-z0-9]+)\\b", "exceptionStackTrace": null, "matches": ["evil eVil", "evil EVIL", "evil ev il", "evil ev4il", "evil e", "evil 6", "eVil evil", "EVIL evil", "ev il evil", "ev4il evil", "e evil", "6 evil", "evil evil"], "nonMatches": ["evil ev_il", "evil  ", "evil _", "evil ", "ev_il evil", "  evil", "_ evil", " evil"]}, {"regex": "\\b([A-Za-z]+) +\\1\\b", "exceptionStackTrace": null, "matches": ["evil  evil", "evil evil"], "nonMatches": ["evilevil", "eVil evil", "EVIL evil", "ev_il evil", "ev il evil", "ev4il evil", "e evil", "  evil", "6 evil", "_ evil", " evil"]}, {"regex": "\\b([0-9]+) +\\1\\b", "exceptionStackTrace": null, "matches": ["0  0", "0 0"], "nonMatches": ["00", "00 0", " 0"]}, {"regex": "\\b([A-Za-z0-9]+) +\\1\\b", "exceptionStackTrace": null, "matches": ["evil  evil", "evil evil"], "nonMatches": ["evilevil", "eVil evil", "EVIL evil", "ev_il evil", "ev il evil", "ev4il evil", "e evil", "  evil", "6 evil", "_ evil", " evil"]}, {"regex": "\\b([A-Za-z0-9]+) +\\1\\b   replacement string--->$1", "exceptionStackTrace": null, "matches": [], "nonMatches": ["evil  evil   replacement string--->1", "evilevil   replacement string--->1", "eVil evil   replacement string--->1", "EVIL evil   replacement string--->1", "ev_il evil   replacement string--->1", "ev il evil   replacement string--->1", "ev4il evil   replacement string--->1", "e evil   replacement string--->1", "  evil   replacement string--->1", "6 evil   replacement string--->1", "_ evil   replacement string--->1", " evil   replacement string--->1", "evil evil   replacement string--->1"]}, {"regex": "(\\n\\r)   replacement string---->\\n", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\n"}, "matches": [], "nonMatches": []}, {"regex": "((?i)(?<=\\b(^to |^to:|^to;):?)[^:].+?$)+(\\b[-\\w]{2,40}(\\.[-\\w]{1,40}){0,5}@[-\\w]{2,40}(\\.[-0-9a-zA-Z]{2,20}))*\\b", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "look-behind requires fixed-width pattern"}, "matches": []}, {"regex": "^\\({0,1}0(2|3|7|8)\\){0,1}(\\ |-){0,1}[0-9]{4}(\\ |-){0,1}[0-9]{4}$", "exceptionStackTrace": null, "matches": ["(02) 00000000", "(02)0000 0000", "(02 0000 0000", "02) 0000 0000", "0800000000", "0700000000", "0300000000", "0200000000", "(08) 0000 0000", "(07) 0000 0000", "(03) 0000 0000", "(02)-0000 0000", "(02) 0000-0000", "(02) 0000 0000"], "nonMatches": ["(02) 0000 00000", "(02) 0000 000", "(02) 0000  0000", "(02) 00000 0000", "(02) 000 0000", "(02)  0000 0000", "(02)) 0000 0000", "((02) 0000 0000"]}, {"regex": "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*", "exceptionStackTrace": null, "matches": [], "nonMatches": ["eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", " ", "6", "_", "", "evil"]}, {"regex": "^[6]\\d{7}$", "exceptionStackTrace": null, "matches": ["60000000"], "nonMatches": ["600000000", "6000000"]}, {"regex": "^[SFTG]\\d{7}[A-Z]$", "exceptionStackTrace": null, "matches": ["T0000000A", "S0000000A", "F0000000A", "G0000000A"], "nonMatches": ["G00000000A", "G000000A", "A0000000A"]}, {"regex": "^&quot;[^&quot;]+&quot;$", "exceptionStackTrace": null, "matches": ["&quot;eVil&quot;", "&quot;EVIL&quot;", "&quot;ev_il&quot;", "&quot;ev il&quot;", "&quot;ev4il&quot;", "&quot;e&quot;", "&quot; &quot;", "&quot;6&quot;", "&quot;_&quot;", "&quot;evil&quot;"], "nonMatches": ["&quot;;&quot;", "&quot;&&quot;", "&quot;&quot;"]}, {"regex": "https://purelifegreencoffeebeanadvice.com/vitrixa-select/", "exceptionStackTrace": null, "matches": ["https://purelifegreencoffeebeanadviceAcom/vitrixa-select/", "https://purelifegreencoffeebeanadvice:com/vitrixa-select/", "https://purelifegreencoffeebeanadvice0com/vitrixa-select/", "https://purelifegreencoffeebeanadvice/com/vitrixa-select/", "https://purelifegreencoffeebeanadvice-com/vitrixa-select/", "https://purelifegreencoffeebeanadvice com/vitrixa-select/", "https://purelifegreencoffeebeanadviceacom/vitrixa-select/"], "nonMatches": []}, {"regex": "^[\\w]{1,}$", "exceptionStackTrace": null, "matches": ["eVil", "EVIL", "ev_il", "ev4il", "e", "6", "_", "evil"], "nonMatches": ["ev il", " ", ""]}, {"regex": "^\\$?([A-Za-z]{0,2})\\$?([0-9]{0,5}):?\\$?([A-Za-z]{0,2})\\$?([0-9]{0,5})$", "exceptionStackTrace": null, "matches": ["$a$0:$a$00000", "$a$0:$a$", "$a$0:$a0", "$a$0:$aa$0", "$a$0:$$0", "$a$0:$A$0", "$a$0:a$0", "$a$0$a$0", "$a$00000:$a$0", "$a$:$a$0", "$a0:$a$0", "$aa$0:$a$0", "$$0:$a$0", "$A$0:$a$0", "a$0:$a$0", "", "$a$0:$a$0"], "nonMatches": ["$a$0:$a$000000", "$a$0:$a$$0", "$a$0:$aaa$0", "$a$0:$$a$0", "$a$0::$a$0", "$a$000000:$a$0", "$a$$0:$a$0", "$aaa$0:$a$0", "$$a$0:$a$0"]}, {"regex": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$", "exceptionStackTrace": null, "matches": ["evil@evil.AAAAA", "evil@evil.aA", "evil@..AA", "evil@-.AA", "evil@eVil.AA", "evil@EVIL.AA", "evil@ev_il.AA", "evil@ev4il.AA", "evil@e.AA", "evil@6.AA", "evil@_.AA", ".@evil.AA", "-@evil.AA", "eVil@evil.AA", "EVIL@evil.AA", "ev_il@evil.AA", "ev4il@evil.AA", "e@evil.AA", "6@evil.AA", "_@evil.AA", "evil@evil.AA"], "nonMatches": ["evil@evil.AAAAAA", "evil@evil.A", "evil@@.AA", "evil@ev il.AA", "evil@ .AA", "evil@.AA", "@@evil.AA", "ev il@evil.AA", " @evil.AA", "@evil.AA"]}, {"regex": "^(?:\\s*(Sun|Mon|Tue|Wed|Thu|Fri|Sat)\\s*)(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s+?(0?[1-9]|[1-2][0-9]|3[01])\\s+(2[0-3]|[0-1][0-9]):([0-5][0-9]):(60|[0-5][0-9])\\s+((?:E|C|M|P)(?:ST|DT))\\s+(19[0-9]{2}|[2-9][0-9]{3}|[0-9]{2})", "exceptionStackTrace": null, "matches": [" Sun Jan 30 20:00:60 EST 1900", " Sun Jan 01 20:00:60 EST 000", " Sun Jan 01 20:00:60 EST 20000", " Sun Jan 01 20:00:60 EST 200", " Sun Jan 01 20:00:60 EST 0000", " Sun Jan 01 20:00:60 EST 19000", " Sun Jan 01 20:00:60 EST 190", " Sun Jan 01 20:00:60 EST  1900", " Sun Jan 01 20:00:60  EST 1900", " Sun Jan 01  20:00:60 EST 1900", " Sun Jan 1 20:00:60 EST 1900", " Sun Jan  01 20:00:60 EST 1900", " Sun  Jan 01 20:00:60 EST 1900", " SunJan 01 20:00:60 EST 1900", "  Sun Jan 01 20:00:60 EST 1900", "Sun Jan 01 20:00:60 EST 1900", "SatJan 1 20:00:60 EST 1900", "FriJan 1 20:00:60 EST 1900", "ThuJan 1 20:00:60 EST 1900", "WedJan 1 20:00:60 EST 1900", "TueJan 1 20:00:60 EST 1900", "MonJan 1 20:00:60 EST 1900", "SunDec 1 20:00:60 EST 1900", "SunNov 1 20:00:60 EST 1900", "SunOct 1 20:00:60 EST 1900", "SunSep 1 20:00:60 EST 1900", "SunAug 1 20:00:60 EST 1900", "SunJul 1 20:00:60 EST 1900", "SunJun 1 20:00:60 EST 1900", "SunMay 1 20:00:60 EST 1900", "SunApr 1 20:00:60 EST 1900", "SunMar 1 20:00:60 EST 1900", "SunFeb 1 20:00:60 EST 1900", "SunJan 31 20:00:60 EST 1900", "SunJan 10 20:00:60 EST 1900", "SunJan 1 00:00:60 EST 1900", "SunJan 1 20:00:00 EST 1900", "SunJan 1 20:00:60 PST 1900", "SunJan 1 20:00:60 MST 1900", "SunJan 1 20:00:60 CST 1900", "SunJan 1 20:00:60 EDT 1900", "SunJan 1 20:00:60 EST 00", "SunJan 1 20:00:60 EST 2000", "SunJan 1 20:00:60 EST 1900", " Sat Jan 01 20:00:60 EST 1900", " Fri Jan 01 20:00:60 EST 1900", " Thu Jan 01 20:00:60 EST 1900", " Wed Jan 01 20:00:60 EST 1900", " Tue Jan 01 20:00:60 EST 1900", " Mon Jan 01 20:00:60 EST 1900", " Sun Dec 01 20:00:60 EST 1900", " Sun Nov 01 20:00:60 EST 1900", " Sun Oct 01 20:00:60 EST 1900", " Sun Sep 01 20:00:60 EST 1900", " Sun Aug 01 20:00:60 EST 1900", " Sun Jul 01 20:00:60 EST 1900", " Sun Jun 01 20:00:60 EST 1900", " Sun May 01 20:00:60 EST 1900", " Sun Apr 01 20:00:60 EST 1900", " Sun Mar 01 20:00:60 EST 1900", " Sun Feb 01 20:00:60 EST 1900", " Sun Jan 31 20:00:60 EST 1900", " Sun Jan 10 20:00:60 EST 1900", " Sun Jan 01 00:00:60 EST 1900", " Sun Jan 01 20:00:00 EST 1900", " Sun Jan 01 20:00:60 PST 1900", " Sun Jan 01 20:00:60 MST 1900", " Sun Jan 01 20:00:60 CST 1900", " Sun Jan 01 20:00:60 EDT 1900", " Sun Jan 01 20:00:60 EST 00", " Sun Jan 01 20:00:60 EST 2000", " Sun Jan 01 20:00:60 EST 1900"], "nonMatches": [" Sun Jan 32 20:00:60 EST 1900", " Sun Jan 01 20:00:60 EST 0", " Sun Jan 01 20:00:60 EST1900", " Sun Jan 01 20:00:60EST 1900", " Sun Jan 01 20:60:60 EST 1900", " Sun Jan 01 24:00:60 EST 1900", " Sun Jan 0120:00:60 EST 1900", " Sun Jan 00 20:00:60 EST 1900", " Sun Jan 001 20:00:60 EST 1900", " Sun Jan01 20:00:60 EST 1900"]}, {"regex": "^(\\$|)([1-9]+\\d{0,2}(\\,\\d{3})*|([1-9]+\\d*))(\\.\\d{2})?$", "exceptionStackTrace": null, "matches": ["$100.00", "$1.00", "$110.00", "$10,000", "$10,000,000.00", "$100,000.00", "$1,000.00", "$110,000.00", "10,000.00", "1", "$10.00", "$10,000.00"], "nonMatches": ["$0.00", "$00.00", "$10,000.00.00", "$10,000.000", "$10,000.0", "$10,0000.00", "$10,00.00", "$1000,000.00", "$0,000.00", "$00,000.00", "$$10,000.00"]}, {"regex": "^(\\$|)([1-9]\\d{0,2}(\\,\\d{3})*|([1-9]\\d*))(\\.\\d{2})?$", "exceptionStackTrace": null, "matches": ["$100.00", "$1.00", "$10,000", "$10,000,000.00", "$100,000.00", "$1,000.00", "10,000.00", "1", "$10.00", "$10,000.00"], "nonMatches": ["$00.00", "$10,000.00.00", "$10,000.000", "$10,000.0", "$10,0000.00", "$10,00.00", "$1000,000.00", "$00,000.00", "$$10,000.00"]}, {"regex": "^(?<Drive>([a-zA-Z]:)|(\\\\{2}\\w+)\\$?)(\\\\(\\w[\\w].*))(?<Year>\\d{4})-(?<Month>\\d{1,2})-(?<Day>\\d{1,2})(?<ExtraText>.*)(?<Extension>.csv|.CSV)$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<D"}, "matches": []}, {"regex": "^[0-9]{4}((0[1-9])|(1[0-2]))$", "exceptionStackTrace": null, "matches": ["000010", "000001"], "nonMatches": ["000013", "000000", "0000001", "00001"]}, {"regex": "^[A-Za-z0-9](([_\\.\\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\\.\\-]?[a-zA-Z0-9]+)*)\\.([A-Za-z]{2,})$", "exceptionStackTrace": null, "matches": ["0-evil@evil-evil.Aa", "0-evil@evil-evil-evil.aa", "0-evil@evil.aa", "0-evil@evil-eVil.aa", "0-evil@evil-EVIL.aa", "0-evil@evil-ev4il.aa", "0-evil@evil-e.aa", "0-evil@evil-6.aa", "0-evil@evilevil.aa", "0-evil@evil.evil.aa", "0-evil@eVil-evil.aa", "0-evil@EVIL-evil.aa", "0-evil@ev4il-evil.aa", "0-evil@e-evil.aa", "0-evil@6-evil.aa", "0-evil-evil@evil-evil.aa", "0@evil-evil.aa", "0-eVil@evil-evil.aa", "0-EVIL@evil-evil.aa", "0-ev_il@evil-evil.aa", "0-ev4il@evil-evil.aa", "0-e@evil-evil.aa", "0-6@evil-evil.aa", "0evil@evil-evil.aa", "0_evil@evil-evil.aa", "0.evil@evil-evil.aa", "a-evil@evil-evil.aa", "A-evil@evil-evil.aa", "0@evil.aa", "0-evil@evil-evil.aa"], "nonMatches": ["0-evil@evil-evil.a", "0-evil@evil-ev_il.aa", "0-evil@evil-ev il.aa", "0-evil@evil- .aa", "0-evil@evil-_.aa", "0-evil@evil-.aa", "0-evil@evil--evil.aa", "0-evil@ev_il-evil.aa", "0-evil@ev il-evil.aa", "0-evil@ -evil.aa", "0-evil@_-evil.aa", "0-evil@-evil.aa", "0-ev il@evil-evil.aa", "0- @evil-evil.aa", "0-_@evil-evil.aa", "0-@evil-evil.aa", "0--evil@evil-evil.aa"]}, {"regex": "^(((\\.\\.){1}/)*|(/){1})?(([a-zA-Z0-9]*)/)*([a-zA-Z0-9]*)+([.jpg]|[.gif])+$", "exceptionStackTrace": null, "matches": ["//evil/evilg", "../evil/evili", "../evil/evilgg", "../evil/evilp", "../evil/evilj", "../evil/evil.", "../evil/evilevilg", "../evil/eVilg", "../evil/EVILg", "../evil/ev4ilg", "../evil/eg", "../evil/6g", "../evil/g", "../evil/evil/evilg", "../evilg", "../eVil/evilg", "../EVIL/evilg", "../ev4il/evilg", "../e/evilg", "../6/evilg", "..//evilg", "../../evil/evilg", "evil/evilg", "f", "g", "/evil/evilg", "../evil/evilf", "../evil/evilg"], "nonMatches": ["../evil/evil", "../evil/evila", "../evil/ev_ilg", "../evil/ev ilg", "../evil/ g", "../evil/_g", "../ev_il/evilg", "../ev il/evilg", "../ /evilg", "../_/evilg", "..../evil/evilg"]}, {"regex": "(\\+989|9|09)(0[1-3]|1[0-9]|2[0-2]|3[0-9]|90|9[8-9])\\d{7}", "exceptionStackTrace": null, "matches": ["+9890100000000", "09010000000", "9010000000", "+989980000000", "+989900000000", "+989300000000", "+989200000000", "+989100000000", "+989010000000"], "nonMatches": ["+989230000000", "+98901000000", "+989000000000"]}, {"regex": "^\\w[a-zA-Z0-9&#246;&#228;&#252;&#214;&#196;&#220;\\.\\-_]+@[a-zA-Z0-9&#246;&#228;&#252;&#214;&#196;&#220;\\-_]+?\\.[a-zA-Z]{2,3}$", "exceptionStackTrace": null, "matches": ["aevil@evil.AAA", "aevil@evil.aA", "aevil@;.AA", "aevil@-.AA", "aevil@&.AA", "aevil@#.AA", "aevil@eVil.AA", "aevil@EVIL.AA", "aevil@ev_il.AA", "aevil@ev4il.AA", "aevil@e.AA", "aevil@6.AA", "aevil@_.AA", "a;@evil.AA", "a.@evil.AA", "a-@evil.AA", "a&@evil.AA", "a#@evil.AA", "aeVil@evil.AA", "aEVIL@evil.AA", "aev_il@evil.AA", "aev4il@evil.AA", "ae@evil.AA", "a6@evil.AA", "a_@evil.AA", "_evil@evil.AA", "Aevil@evil.AA", "0evil@evil.AA", "aevil@evil.AA"], "nonMatches": ["aevil@evil.AAAA", "aevil@evil.A", "aevil@@.AA", "aevil@..AA", "aevil@ev il.AA", "aevil@ .AA", "aevil@.AA", "a@@evil.AA", "aev il@evil.AA", "a @evil.AA", "a@evil.AA"]}, {"regex": "gvfdhbf", "exceptionStackTrace": null, "matches": ["gvfdhbf"], "nonMatches": []}, {"regex": "^([a-z|A-Z]{1}[0-9]{3})[-]([0-9]{3})[-]([0-9]{2})[-]([0-9]{3})[-]([0-9]{1})", "exceptionStackTrace": null, "matches": ["|000-000-00-000-00", "a000-000-00-000-0", "A000-000-00-000-0", "|000-000-00-000-0"], "nonMatches": ["|000-000-00-000-", "|000-000-00-0000-0", "|000-000-00-00-0", "|000-000-000-000-0", "|000-000-0-000-0", "|000-0000-00-000-0", "|000-00-00-000-0", "|0000-000-00-000-0", "|00-000-00-000-0", "||000-000-00-000-0", "000-000-00-000-0"]}, {"regex": "[^\\t]+|\\t(?=\\t)|\\t$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\t"}, "matches": [], "nonMatches": []}, {"regex": "^(?(FirstString|SecondString)yes|.*)$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character in group name 'FirstString|SecondString'"}, "matches": []}, {"regex": "^(?(FirstString|SecondString)yes|.*)$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character in group name 'FirstString|SecondString'"}, "matches": []}, {"regex": "xsfcgv", "exceptionStackTrace": null, "matches": ["xsfcgv"], "nonMatches": []}, {"regex": "^]:\\\\[^:\\*\\?&quot;<>|\\/\\\\]+(\\.[^:\\*\\?&quot;<>|\\/\\\\]+|[^:\\*\\?&quot;<>|\\/]+[^:\\*\\?&quot;<>|\\/\\\\]+\\.[^:\\*\\?&quot;<>|\\/\\\\]+)$", "exceptionStackTrace": null, "matches": ["]:\\evilevilevil.]", "]:\\evilevilevil..", "]:\\evilevilevil.eVil", "]:\\evilevilevil.EVIL", "]:\\evilevilevil.ev_il", "]:\\evilevilevil.ev il", "]:\\evilevilevil.ev4il", "]:\\evilevilevil.e", "]:\\evilevilevil. ", "]:\\evilevilevil.6", "]:\\evilevilevil._", "]:\\evilevil].evil", "]:\\evilevil..evil", "]:\\evilevileVil.evil", "]:\\evilevilEVIL.evil", "]:\\evilevilev_il.evil", "]:\\evilevilev il.evil", "]:\\evilevilev4il.evil", "]:\\evilevile.evil", "]:\\evilevil .evil", "]:\\evilevil6.evil", "]:\\evilevil_.evil", "]:\\evil]evil.evil", "]:\\evil\\evil.evil", "]:\\evil.evil.evil", "]:\\evileVilevil.evil", "]:\\evilEVILevil.evil", "]:\\evilev_ilevil.evil", "]:\\evilev ilevil.evil", "]:\\evilev4ilevil.evil", "]:\\evileevil.evil", "]:\\evil evil.evil", "]:\\evil6evil.evil", "]:\\evil_evil.evil", "]:\\evilevil.evil", "]:\\evil.]", "]:\\evil..", "]:\\evil.eVil", "]:\\evil.EVIL", "]:\\evil.ev_il", "]:\\evil.ev il", "]:\\evil.ev4il", "]:\\evil.e", "]:\\evil. ", "]:\\evil.6", "]:\\evil._", "]:\\].evil", "]:\\..evil", "]:\\eVil.evil", "]:\\EVIL.evil", "]:\\ev_il.evil", "]:\\ev il.evil", "]:\\ev4il.evil", "]:\\e.evil", "]:\\ .evil", "]:\\6.evil", "]:\\_.evil", "]:\\evilevilevil.evil", "]:\\evil.evil"], "nonMatches": ["]:\\evilevilevil.|", "]:\\evilevilevil.\\", "]:\\evilevilevil.?", "]:\\evilevilevil.>", "]:\\evilevilevil.<", "]:\\evilevilevil.;", "]:\\evilevilevil.:", "]:\\evilevilevil./", "]:\\evilevilevil.*", "]:\\evilevilevil.&", "]:\\evilevilevil.", "]:\\evilevil|.evil", "]:\\evilevil\\.evil", "]:\\evilevil?.evil", "]:\\evilevil>.evil", "]:\\evilevil<.evil", "]:\\evilevil;.evil", "]:\\evilevil:.evil", "]:\\evilevil/.evil", "]:\\evilevil*.evil", "]:\\evilevil&.evil", "]:\\evil|evil.evil", "]:\\evil?evil.evil", "]:\\evil>evil.evil", "]:\\evil<evil.evil", "]:\\evil;evil.evil", "]:\\evil:evil.evil", "]:\\evil/evil.evil", "]:\\evil*evil.evil", "]:\\evil&evil.evil", "]:\\evil.|", "]:\\evil.\\", "]:\\evil.?", "]:\\evil.>", "]:\\evil.<", "]:\\evil.;", "]:\\evil.:", "]:\\evil./", "]:\\evil.*", "]:\\evil.&", "]:\\evil.", "]:\\|.evil", "]:\\\\.evil", "]:\\?.evil", "]:\\>.evil", "]:\\<.evil", "]:\\;.evil", "]:\\:.evil", "]:\\/.evil", "]:\\*.evil", "]:\\&.evil", "]:\\.evil"]}, {"regex": "^(NT|SD2|S?(0T|D[01]|BR|K[1-9][0-9]{0,5}|[1-9][0-9]{0,5}[LMNT]))$", "exceptionStackTrace": null, "matches": ["S10N", "S10M", "S10L", "S100000T", "S1T", "SK100000", "SK1", "SD0", "1T", "K1", "BR", "D1", "0T", "S10T", "SK10", "SBR", "SD1", "S0T", "SD2", "NT"], "nonMatches": ["S10A", "S1000000T", "S00T", "SK1000000", "SK00", "SS0T"]}, {"regex": "^(NT|SD2|[SC]?(0T|D[01]|BR|K[1-9][0-9]{0,5}|[1-9][0-9]{0,5}[LMNT]))$", "exceptionStackTrace": null, "matches": ["C10N", "C10M", "C10L", "C100000T", "C1T", "CK100000", "CK1", "CD0", "S0T", "1T", "K1", "BR", "D1", "0T", "C10T", "CK10", "CBR", "CD1", "C0T", "SD2", "NT"], "nonMatches": ["C10A", "C1000000T", "C00T", "CK1000000", "CK00", "CD2", "CC0T", "A0T"]}, {"regex": "(\\d?\\s?\\w+),(\\d+),(\\d+),(/d*),/\\1 \\2:\\3-\\4", "exceptionStackTrace": null, "matches": ["0 evil,0,0,/,/0 evil 0:0-/d", "00 evil,0,0,/d,/0 evil 0:0-/d", "0 evil,0,0,/d,/0 evil 0:0-/d"], "nonMatches": ["0 evil,0,0,/dd,/0 evil 0:0-/d", "0 evil,0,00,/d,/0 evil 0:0-/d", "0 evil,0,,/d,/0 evil 0:0-/d", "0 evil,00,0,/d,/0 evil 0:0-/d", "0 evil,,0,/d,/0 evil 0:0-/d", "0 eVil,0,0,/d,/0 evil 0:0-/d", "0 EVIL,0,0,/d,/0 evil 0:0-/d", "0 ev_il,0,0,/d,/0 evil 0:0-/d", "0 ev il,0,0,/d,/0 evil 0:0-/d", "0 ev4il,0,0,/d,/0 evil 0:0-/d", "0 e,0,0,/d,/0 evil 0:0-/d", "0  ,0,0,/d,/0 evil 0:0-/d", "0 6,0,0,/d,/0 evil 0:0-/d", "0 _,0,0,/d,/0 evil 0:0-/d", "0 ,0,0,/d,/0 evil 0:0-/d", "0  evil,0,0,/d,/0 evil 0:0-/d", "0evil,0,0,/d,/0 evil 0:0-/d", " evil,0,0,/d,/0 evil 0:0-/d", "evil,0,0,/,/0 evil 0:0-/d"]}, {"regex": "^(?!.*\\n.*)(?:([^:]*)(?::(.*?))?@)?([^:]*)(?::([^:]*?))?$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\n"}, "matches": [], "nonMatches": []}, {"regex": "([\\&quot;&#39;]).*?[^\\\\]\\1", "exceptionStackTrace": null, "matches": [";evilA;", ";evil;;", ";evil0;", ";evil&;", ";evil#;", ";evil ;", ";\\a;", ";;a;", ";&a;", ";#a;", ";eVila;", ";EVILa;", ";ev_ila;", ";ev ila;", ";ev4ila;", ";ea;", "; a;", ";6a;", ";_a;", ";a;", ";evila;"], "nonMatches": [";evil\\;", "uevila;", "tevila;", "qevila;", "oevila;", "aevila;", "9evila;", "3evila;", "0evila;", "&evila;", "#evila;"]}, {"regex": "^((?:.*(?!\\d))*(?:\\D*)?)(\\d+)$", "exceptionStackTrace": null, "matches": ["evilevil00", "evileVil0", "evilEVIL0", "evilev_il0", "evilev il0", "evilev4il0", "evile0", "evil 0", "evil60", "evil_0", "evilevilevil0", "eVilevil0", "EVILevil0", "ev_ilevil0", "ev ilevil0", "ev4ilevil0", "eevil0", " evil0", "6evil0", "_evil0", "evil0", "0", "evilevil0"], "nonMatches": ["evilevil"]}, {"regex": "[\\\\s+,]", "exceptionStackTrace": null, "matches": ["s", "\\", "+", ","], "nonMatches": ["a"]}, {"regex": "<[a-zA-Z]+(\\s+[a-zA-Z]+\\s*=\\s*(&quot;([^&quot;]*)&quot;|&#39;([^&#39;]*)&#39;))*\\s*/>", "exceptionStackTrace": null, "matches": ["<evil evil = &#39;>&#39; />", "<evil evil = &#39;=&#39; />", "<evil evil = &#39;<&#39; />", "<evil evil = &#39;/&#39; />", "<evil evil = &#39;eVil&#39; />", "<evil evil = &#39;EVIL&#39; />", "<evil evil = &#39;ev_il&#39; />", "<evil evil = &#39;ev il&#39; />", "<evil evil = &#39;ev4il&#39; />", "<evil evil = &#39;e&#39; />", "<evil evil = &#39; &#39; />", "<evil evil = &#39;6&#39; />", "<evil evil = &#39;_&#39; />", "<evil evil = &#39;&#39; />", "<evil evil = &quot;evil&quot;  />", "<evil evil = &quot;evil&quot;/>", "<evil evil = &quot;evil&quot; evil = &quot;evil&quot; />", "<evil />", "<evil evil = &quot;>&quot; />", "<evil evil = &quot;=&quot; />", "<evil evil = &quot;<&quot; />", "<evil evil = &quot;/&quot; />", "<evil evil = &quot;#&quot; />", "<evil evil = &quot;eVil&quot; />", "<evil evil = &quot;EVIL&quot; />", "<evil evil = &quot;ev_il&quot; />", "<evil evil = &quot;ev il&quot; />", "<evil evil = &quot;ev4il&quot; />", "<evil evil = &quot;e&quot; />", "<evil evil = &quot; &quot; />", "<evil evil = &quot;6&quot; />", "<evil evil = &quot;_&quot; />", "<evil evil = &quot;&quot; />", "<evil evil =  &quot;evil&quot; />", "<evil evil =&quot;evil&quot; />", "<evil evil  = &quot;evil&quot; />", "<evil evil= &quot;evil&quot; />", "<evil eVil = &quot;evil&quot; />", "<evil EVIL = &quot;evil&quot; />", "<evil e = &quot;evil&quot; />", "<evil  evil = &quot;evil&quot; />", "<eVil evil = &quot;evil&quot; />", "<EVIL evil = &quot;evil&quot; />", "<e evil = &quot;evil&quot; />", "<evil/>", "<evil evil = &#39;evil&#39; />", "<evil evil = &quot;evil&quot; />"], "nonMatches": ["<evil evil = &#39;;&#39; />", "<evil evil = &#39;&&#39; />", "<evil evil = &#39;#&#39; />", "<evil evil = &quot;;&quot; />", "<evil evil = &quot;&&quot; />", "<evil ev_il = &quot;evil&quot; />", "<evil ev il = &quot;evil&quot; />", "<evil ev4il = &quot;evil&quot; />", "<evil   = &quot;evil&quot; />", "<evil 6 = &quot;evil&quot; />", "<evil _ = &quot;evil&quot; />", "<evil  = &quot;evil&quot; />", "<evilevil = &quot;evil&quot; />", "<ev_il evil = &quot;evil&quot; />", "<ev il evil = &quot;evil&quot; />", "<ev4il evil = &quot;evil&quot; />", "<  evil = &quot;evil&quot; />", "<6 evil = &quot;evil&quot; />", "<_ evil = &quot;evil&quot; />", "< evil = &quot;evil&quot; />"]}, {"regex": "(\\+)?([-\\._\\(\\) ]?[\\d]{3,20}[-\\._\\(\\) ]?){2,10}", "exceptionStackTrace": null, "matches": ["+ 000  000  000  000  000  000  000  000  000  000  000 ", "+ 000  000  000  000  000  000  000  000  000  000 ", "+ 000 000 ", "+ 000_ 000 ", "+ 000. 000 ", "+ 000- 000 ", "+ 000) 000 ", "+ 000( 000 ", "+ 000000000000000000000  000 ", "+ 00000000000000000000  000 ", "+  000  000 ", "+000  000 ", "+_000  000 ", "+.000  000 ", "+-000  000 ", "+)000  000 ", "+(000  000 ", "++ 000  000 ", " 000  000 ", "000 000 ", "+ 000  000 "], "nonMatches": ["+ 000 ", "+ 000   000 ", "+ 00  000 "]}, {"regex": "^([\\w-]+\\.)*?[\\w-]+@[\\w-]+\\.([\\w-]+\\.)*?[\\w]+$", "exceptionStackTrace": null, "matches": ["evil.evil@evil.evil.eVil", "evil.evil@evil.evil.EVIL", "evil.evil@evil.evil.ev_il", "evil.evil@evil.evil.ev4il", "evil.evil@evil.evil.e", "evil.evil@evil.evil.6", "evil.evil@evil.evil._", "evil.evil@evil.evil.evil.evil", "evil.evil@evil.evil", "evil.evil@evil.-.evil", "evil.evil@evil.eVil.evil", "evil.evil@evil.EVIL.evil", "evil.evil@evil.ev_il.evil", "evil.evil@evil.ev4il.evil", "evil.evil@evil.e.evil", "evil.evil@evil.6.evil", "evil.evil@evil._.evil", "evil.evil@-.evil.evil", "evil.evil@eVil.evil.evil", "evil.evil@EVIL.evil.evil", "evil.evil@ev_il.evil.evil", "evil.evil@ev4il.evil.evil", "evil.evil@e.evil.evil", "evil.evil@6.evil.evil", "evil.evil@_.evil.evil", "evil.-@evil.evil.evil", "evil.eVil@evil.evil.evil", "evil.EVIL@evil.evil.evil", "evil.ev_il@evil.evil.evil", "evil.ev4il@evil.evil.evil", "evil.e@evil.evil.evil", "evil.6@evil.evil.evil", "evil._@evil.evil.evil", "evil.evil.evil@evil.evil.evil", "evil@evil.evil.evil", "-.evil@evil.evil.evil", "eVil.evil@evil.evil.evil", "EVIL.evil@evil.evil.evil", "ev_il.evil@evil.evil.evil", "ev4il.evil@evil.evil.evil", "e.evil@evil.evil.evil", "6.evil@evil.evil.evil", "_.evil@evil.evil.evil", "evil@evil.evil", "evil.evil@evil.evil.evil"], "nonMatches": ["evil.evil@evil.evil.ev il", "evil.evil@evil.evil. ", "evil.evil@evil.evil.", "evil.evil@evil.@.evil", "evil.evil@evil...evil", "evil.evil@evil.ev il.evil", "evil.evil@evil. .evil", "evil.evil@evil..evil", "evil.evil@@.evil.evil", "evil.evil@..evil.evil", "evil.evil@ev il.evil.evil", "evil.evil@ .evil.evil", "evil.evil@.evil.evil", "evil.@@evil.evil.evil", "evil..@evil.evil.evil", "evil.ev il@evil.evil.evil", "evil. @evil.evil.evil", "evil.@evil.evil.evil", "@.evil@evil.evil.evil", "..evil@evil.evil.evil", "ev il.evil@evil.evil.evil", " .evil@evil.evil.evil", ".evil@evil.evil.evil"]}, {"regex": "&lt;!--[\\w\\W]*?--&gt;", "exceptionStackTrace": null, "matches": ["&lt;!--eVil--&gt;", "&lt;!--EVIL--&gt;", "&lt;!--ev_il--&gt;", "&lt;!--ev il--&gt;", "&lt;!--ev4il--&gt;", "&lt;!--e--&gt;", "&lt;!-- --&gt;", "&lt;!--6--&gt;", "&lt;!--_--&gt;", "&lt;!----&gt;", "&lt;!--evil--&gt;"], "nonMatches": []}, {"regex": "^[ \\w]{3,}([A-Za-z]\\.)?([ \\w]*\\#\\d+)?(\\r\\n| )[ \\w]{3,},\\x20[A-Za-z]{2}\\x20\\d{5}(-\\d{4})?$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\r"}, "matches": [], "nonMatches": []}, {"regex": "(^\\d{1,2}\\.\\d{1,2}\\.\\d{4})|(^\\d{1,2}\\.\\d{1,2})|(^\\d{1,2})$", "exceptionStackTrace": null, "matches": ["00", "0.000", "0.00", "00.0", "0.0.00000", "0.0.000", "0.000.0000", "0.00.0000", "00.0.0000", "0", "0.0", "0.0.0000"], "nonMatches": ["000", "", "0.", "000.0", ".0", "0..0000", "000.0.0000", ".0.0000"]}, {"regex": "^07[789]-\\d{7}$", "exceptionStackTrace": null, "matches": ["078-0000000", "077-0000000", "079-0000000"], "nonMatches": ["079-00000000", "079-000000", "070-0000000"]}, {"regex": "(?s)(?:\\e\\[(?:(\\d+);?)*([A-Za-z])(.*?))(?=\\e\\[|\\z)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad escape \\e"}, "matches": []}, {"regex": "^[\\\\(]{0,1}[0-9]{3}([\\\\)]{0,1}|-|\\s){0,1}[0-9]{3}(-|\\s){0,1}[0-9]{4}$", "exceptionStackTrace": null, "matches": ["(000)0000000", "(000000-0000", "(000\\000-0000", "000)000-0000", "\\000)000-0000", "0000000000", "(000 000-0000", "(000-000-0000", "(000)000 0000", "(000)000-0000"], "nonMatches": ["(000)000-00000", "(000)000-000", "(000)000--0000", "(000)0000-0000", "(000)00-0000", "(000))000-0000", "(0000)000-0000", "(00)000-0000", "((000)000-0000"]}, {"regex": "https://elliskinantiaging.com/derma-mira/", "exceptionStackTrace": null, "matches": ["https://elliskinantiagingAcom/derma-mira/", "https://elliskinantiaging:com/derma-mira/", "https://elliskinantiaging0com/derma-mira/", "https://elliskinantiaging/com/derma-mira/", "https://elliskinantiaging-com/derma-mira/", "https://elliskinantiaging com/derma-mira/", "https://elliskinantiagingacom/derma-mira/"], "nonMatches": []}, {"regex": "^(([a-zA-Z&#228;&#246;&#252;&#196;&#214;&#220;]\\D*)\\s+\\d+?\\s*.*)$", "exceptionStackTrace": null, "matches": [";evil 0 ;", ";evil 0 &", ";evil 0 #", ";evil 0 eVil", ";evil 0 EVIL", ";evil 0 ev_il", ";evil 0 ev il", ";evil 0 ev4il", ";evil 0 e", ";evil 0  ", ";evil 0 6", ";evil 0 _", ";evil 0 ", ";evil 0  evil", ";evil 0evil", ";evil 00 evil", ";evil  0 evil", ";; 0 evil", ";& 0 evil", ";# 0 evil", ";eVil 0 evil", ";EVIL 0 evil", ";ev_il 0 evil", ";ev il 0 evil", ";e 0 evil", ";  0 evil", ";_ 0 evil", "; 0 evil", "aevil 0 evil", "Aevil 0 evil", "9evil 0 evil", "8evil 0 evil", "6evil 0 evil", "5evil 0 evil", "4evil 0 evil", "2evil 0 evil", "1evil 0 evil", "0evil 0 evil", "&evil 0 evil", "#evil 0 evil", "; 0", ";evil 0 evil"], "nonMatches": [";evil  evil", ";evil0 evil", ";ev4il 0 evil", ";6 0 evil", "3evil 0 evil"]}, {"regex": "^([^ \\x21-\\x26\\x28-\\x2C\\x2E-\\x40\\x5B-\\x60\\x7B-\\xAC\\xAE-\\xBF\\xF7\\xFE]+)$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 172"}, "matches": [], "nonMatches": []}, {"regex": "^((0(1\\d\\d[1-9])|([2-9]\\d\\d\\d))|(?(?=^(^9{5}))|[1-9]\\d{4}))$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character in group name '?=^(^9{5}'"}, "matches": []}, {"regex": "^(((((((00|\\+)49[ \\-/]?)|0)[1-9][0-9]{1,4})[ \\-/]?)|((((00|\\+)49\\()|\\(0)[1-9][0-9]{1,4}\\)[ \\-/]?))[0-9]{1,7}([ \\-/]?[0-9]{1,5})?)$", "exceptionStackTrace": null, "matches": ["0049(10)0/0", "0049(10)-0/0", "0049(10) 0/0", "0049(10000)/0/0", "0049/10/0", "0049/10/0/00000", "0049/10/00", "0049/10/0-0", "0049/10/0 0", "0049/10/0000000/0", "0049/100/0", "0049/10-0/0", "0049/10 0/0", "0049/10000/0/0", "004910/0/0", "0049-10/0/0", "0049 10/0/0", "(010)0", "+49(10)0", "0049(10)0", "0100", "+49100", "0049100", "(010)/0/0", "+49(10)/0/0", "0049(10)/0/0", "010/0/0", "+49/10/0/0", "0049/10/0/0"], "nonMatches": ["0049(10)//0/0", "0049(100000)/0/0", "0049(1)/0/0", "0049(00)/0/0", "0049/10/0/0/0", "0049/10/0/000000", "0049/10/0/", "0049/10/0//0", "0049/10/00000000/0", "0049/10//0", "0049/10//0/0", "0049/100000/0/0", "0049/1/0/0", "0049/00/0/0", "0049//10/0/0"]}, {"regex": "^([0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*@(([0-9a-zA-Z])+([-\\w]*[0-9a-zA-Z])*\\.)+[a-zA-Z]{2,9})$", "exceptionStackTrace": null, "matches": ["AevilA@AevilA.AAAAAAAAA", "AevilA@AevilA.aA", "AevilA@AevilA.AevilA.AA", "AevilA@AevilAevilA.AA", "AevilA@A.AA", "AevilA@Aevila.AA", "AevilA@Aevil0.AA", "AevilA@A.A.AA", "AevilA@A-A.AA", "AevilA@AeVilA.AA", "AevilA@AEVILA.AA", "AevilA@Aev_ilA.AA", "AevilA@Aev4ilA.AA", "AevilA@AeA.AA", "AevilA@A6A.AA", "AevilA@A_A.AA", "AevilA@AA.AA", "AevilA@AAevilA.AA", "AevilA@evilA.AA", "AevilA@aevilA.AA", "AevilA@0evilA.AA", "AevilAevilA@AevilA.AA", "A@AevilA.AA", "Aevila@AevilA.AA", "Aevil0@AevilA.AA", "A.A@AevilA.AA", "A-A@AevilA.AA", "AeVilA@AevilA.AA", "AEVILA@AevilA.AA", "Aev_ilA@AevilA.AA", "Aev4ilA@AevilA.AA", "AeA@AevilA.AA", "A6A@AevilA.AA", "A_A@AevilA.AA", "AA@AevilA.AA", "aevilA@AevilA.AA", "0evilA@AevilA.AA", "A@A.AA", "AevilA@AevilA.AA"], "nonMatches": ["AevilA@AevilA.AAAAAAAAAA", "AevilA@AevilA.A", "AevilA@AA", "AevilA@A@A.AA", "AevilA@Aev ilA.AA", "AevilA@A A.AA", "A@A@AevilA.AA", "Aev ilA@AevilA.AA", "A A@AevilA.AA"]}, {"regex": "amazon prime phone number, amazon prime customer service number", "exceptionStackTrace": null, "matches": ["amazon prime phone number, amazon prime customer service number"], "nonMatches": []}, {"regex": "amazon prime phone number, amazon prime customer service number", "exceptionStackTrace": null, "matches": ["amazon prime phone number, amazon prime customer service number"], "nonMatches": []}, {"regex": "amazon prime customer service number ,amazon prime phone number ", "exceptionStackTrace": null, "matches": ["amazon prime customer service number ,amazon prime phone number "], "nonMatches": []}, {"regex": "amazon prime customer service number ,amazon prime phone number ", "exceptionStackTrace": null, "matches": ["amazon prime customer service number ,amazon prime phone number "], "nonMatches": []}, {"regex": "amazon prime customer service number ,amazon prime phone number ", "exceptionStackTrace": null, "matches": ["amazon prime customer service number ,amazon prime phone number "], "nonMatches": []}, {"regex": "amazon prime customer service number ,amazon prime phone number ", "exceptionStackTrace": null, "matches": ["amazon prime customer service number ,amazon prime phone number "], "nonMatches": []}, {"regex": "amazon prime customer service number ,amazon prime phone number ", "exceptionStackTrace": null, "matches": ["amazon prime customer service number ,amazon prime phone number "], "nonMatches": []}, {"regex": "amazon prime customer service number ,amazon prime phone number ", "exceptionStackTrace": null, "matches": ["amazon prime customer service number ,amazon prime phone number "], "nonMatches": []}, {"regex": "amazon prime customer service number ,amazon prime phone number ", "exceptionStackTrace": null, "matches": ["amazon prime customer service number ,amazon prime phone number "], "nonMatches": []}, {"regex": "Quicken Support Number , Quicken Phone Number ", "exceptionStackTrace": null, "matches": ["Quicken Support Number , Quicken Phone Number "], "nonMatches": []}, {"regex": "Quicken Support Number, Quicken Support", "exceptionStackTrace": null, "matches": ["Quicken Support Number, Quicken Support"], "nonMatches": []}, {"regex": "Quicken Support Number, Quicken Support", "exceptionStackTrace": null, "matches": ["Quicken Support Number, Quicken Support"], "nonMatches": []}, {"regex": "Quicken Support Number, Quicken Support", "exceptionStackTrace": null, "matches": ["Quicken Support Number, Quicken Support"], "nonMatches": []}, {"regex": "Quicken Support Number, Quicken Support", "exceptionStackTrace": null, "matches": ["Quicken Support Number, Quicken Support"], "nonMatches": []}, {"regex": "Quicken Support Number, Quicken Support", "exceptionStackTrace": null, "matches": ["Quicken Support Number, Quicken Support"], "nonMatches": []}, {"regex": "Quicken Support number, Quicken Support ", "exceptionStackTrace": null, "matches": ["Quicken Support number, Quicken Support "], "nonMatches": []}, {"regex": "Quicken Support number, Quicken Support ", "exceptionStackTrace": null, "matches": ["Quicken Support number, Quicken Support "], "nonMatches": []}, {"regex": "Quicken Support number, Quicken Support ", "exceptionStackTrace": null, "matches": ["Quicken Support number, Quicken Support "], "nonMatches": []}, {"regex": "Quicken Support number, Quicken Support ", "exceptionStackTrace": null, "matches": ["Quicken Support number, Quicken Support "], "nonMatches": []}, {"regex": "Quicken Support Number ", "exceptionStackTrace": null, "matches": ["Quicken Support Number "], "nonMatches": []}, {"regex": "Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number ", "exceptionStackTrace": null, "matches": ["Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number "], "nonMatches": []}, {"regex": "Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number ", "exceptionStackTrace": null, "matches": ["Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number "], "nonMatches": []}, {"regex": "Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number ", "exceptionStackTrace": null, "matches": ["Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number "], "nonMatches": []}, {"regex": "Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number ", "exceptionStackTrace": null, "matches": ["Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number "], "nonMatches": []}, {"regex": "Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number ", "exceptionStackTrace": null, "matches": ["Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number "], "nonMatches": []}, {"regex": "Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number ", "exceptionStackTrace": null, "matches": ["Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number "], "nonMatches": []}, {"regex": "Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number ", "exceptionStackTrace": null, "matches": ["Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number "], "nonMatches": []}, {"regex": "Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number ", "exceptionStackTrace": null, "matches": ["Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number "], "nonMatches": []}, {"regex": "Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number ", "exceptionStackTrace": null, "matches": ["Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number "], "nonMatches": []}, {"regex": "Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number ", "exceptionStackTrace": null, "matches": ["Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number "], "nonMatches": []}, {"regex": "Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number ", "exceptionStackTrace": null, "matches": ["Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number "], "nonMatches": []}, {"regex": "Quicken Support Number ", "exceptionStackTrace": null, "matches": ["Quicken Support Number "], "nonMatches": []}, {"regex": "Quicken Support Number ", "exceptionStackTrace": null, "matches": ["Quicken Support Number "], "nonMatches": []}, {"regex": "Quicken Support Number ", "exceptionStackTrace": null, "matches": ["Quicken Support Number "], "nonMatches": []}, {"regex": "Quicken Support Number ", "exceptionStackTrace": null, "matches": ["Quicken Support Number "], "nonMatches": []}, {"regex": "Quicken Support Number ", "exceptionStackTrace": null, "matches": ["Quicken Support Number "], "nonMatches": []}, {"regex": "#QuickenSupportPhoneNumber,QuickenPhoneNumber#QiuckenHelp#QuickenCustomerService", "exceptionStackTrace": null, "matches": ["#QuickenSupportPhoneNumber,QuickenPhoneNumber#QiuckenHelp#QuickenCustomerService"], "nonMatches": []}, {"regex": "Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number ", "exceptionStackTrace": null, "matches": ["Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number "], "nonMatches": []}, {"regex": "Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number ", "exceptionStackTrace": null, "matches": ["Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number "], "nonMatches": []}, {"regex": "Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number ", "exceptionStackTrace": null, "matches": ["Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number "], "nonMatches": []}, {"regex": "Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number ", "exceptionStackTrace": null, "matches": ["Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number "], "nonMatches": []}, {"regex": "Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number ", "exceptionStackTrace": null, "matches": ["Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number "], "nonMatches": []}, {"regex": "Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number ", "exceptionStackTrace": null, "matches": ["Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number "], "nonMatches": []}, {"regex": "Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number ", "exceptionStackTrace": null, "matches": ["Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number "], "nonMatches": []}, {"regex": "Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number ", "exceptionStackTrace": null, "matches": ["Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number "], "nonMatches": []}, {"regex": "Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number ", "exceptionStackTrace": null, "matches": ["Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number "], "nonMatches": []}, {"regex": "Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number ", "exceptionStackTrace": null, "matches": ["Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number "], "nonMatches": []}, {"regex": "Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number ", "exceptionStackTrace": null, "matches": ["Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number "], "nonMatches": []}, {"regex": "Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number ", "exceptionStackTrace": null, "matches": ["Quicken Support Number ,Quicken Support , Quicken , Quicken Phone Number "], "nonMatches": []}]