[{"regex": "(02\\d\\s?\\d{4}\\s?\\d{4})|(01\\d{2}\\s?\\d{3}\\s?\\d{4})|(01\\d{3}\\s?\\d{5,6})|(01\\d{4}\\s?\\d{4,5})", "exceptionStackTrace": null, "matches": ["010000 000000", "01000 0000000", "01000 000000", "010000 00000", "0100 000 00000", "0100 0000000", "0100000 0000", "020 0000 00000", "020 00000000", "0200000 0000", "0100000000", "01000000000", "02000000000", "010000 0000", "01000 00000", "0100 000 0000", "020 0000 0000"], "nonMatches": ["010000 000", "010000  0000", "01000 0000", "01000  00000", "0100 00000", "0100 000 000", "0100 000  0000", "0100 0000 0000", "0100 00 0000", "0100  000 0000", "01000 000 0000", "010 000 0000", "020 0000 000", "020 0000  0000", "020 00000 0000", "020 000 0000", "020  0000 0000"]}, {"regex": "(077|078|079)\\s?\\d{2}\\s?\\d{6}", "exceptionStackTrace": null, "matches": ["077 00 0000000", "077 00000000", "07700 000000", "07900000000", "07800000000", "07700000000", "079 00 000000", "078 00 000000", "077 00 000000"], "nonMatches": ["077 00 00000", "077 00  000000", "077 000 000000", "077 0 000000", "077  00 000000"]}, {"regex": "Facebookcustomerservice,Facebookcustomerservicenumber", "exceptionStackTrace": null, "matches": ["Facebookcustomerservice,Facebookcustomerservicenumber"], "nonMatches": []}, {"regex": "Facebookcustomerservice,Facebookcustomerservicenumber", "exceptionStackTrace": null, "matches": ["Facebookcustomerservice,Facebookcustomerservicenumber"], "nonMatches": []}, {"regex": "Facebookcustomerservice,Facebookcustomerservicenumber", "exceptionStackTrace": null, "matches": ["Facebookcustomerservice,Facebookcustomerservicenumber"], "nonMatches": []}, {"regex": "Facebookcustomerservice,Facebookcustomerservicenumber", "exceptionStackTrace": null, "matches": ["Facebookcustomerservice,Facebookcustomerservicenumber"], "nonMatches": []}, {"regex": "Facebookcustomerservice,Facebookcustomerservicenumber", "exceptionStackTrace": null, "matches": ["Facebookcustomerservice,Facebookcustomerservicenumber"], "nonMatches": []}, {"regex": "Facebookcustomerservice,Facebookcustomerservicenumber", "exceptionStackTrace": null, "matches": ["Facebookcustomerservice,Facebookcustomerservicenumber"], "nonMatches": []}, {"regex": "Facebookcustomerservice,Facebookcustomerservicenumber", "exceptionStackTrace": null, "matches": ["Facebookcustomerservice,Facebookcustomerservicenumber"], "nonMatches": []}, {"regex": "^([a-z0-9])(([\\-.]|[_]+)?([a-z0-9]+))*(@)([a-z0-9])((([-]+)?([a-z0-9]+))?)*((.[a-z]{2,3})?(.[a-z]{2,6}))$", "exceptionStackTrace": null, "matches": ["0__evil@0-evilaaaaaa", "0.evil@0-evilaaaaaaaaaaa", "0.evil@0-evilaaaaaaaaaa", "0.evil@0-evilaaa_aa", "0.evil@0-evilaaaAaa", "0.evil@0-evilaaa@aa", "0.evil@0-evilaaa0aa", "0.evil@0-evilaaa.aa", "0.evil@0-evilaaa-aa", "0.evil@0-evilaaa aa", "0.evil@0-evilaaaaaaaaa", "0.evil@0-evilaaa", "0.evil@0-evilaaaaaaaa", "0.evil@0-evilaaaaaaa", "0.evil@0-evilaaaaa", "0.evil@0-evil_aaaaa", "0.evil@0-evilAaaaaa", "0.evil@0-evil@aaaaa", "0.evil@0-evil0aaaaa", "0.evil@0-evil.aaaaa", "0.evil@0-evil-aaaaa", "0.evil@0-evil aaaaa", "0.evil@0-evil-evilaaaaaa", "0.evil@0aaaaaa", "0.evil@0-eVilaaaaaa", "0.evil@0-ev_ilaaaaaa", "0.evil@0-ev ilaaaaaa", "0.evil@0-ev4ilaaaaaa", "0.evil@0-eaaaaaa", "0.evil@0-6aaaaaa", "0.evil@0-aaaaaa", "0.evil@0--evilaaaaaa", "0.evil@0evilaaaaaa", "0.evil@a-evilaaaaaa", "0.evil.evil@0-evilaaaaaa", "0@0-evilaaaaaa", "0.ev_il@0-evilaaaaaa", "0.ev4il@0-evilaaaaaa", "0.e@0-evilaaaaaa", "0.6@0-evilaaaaaa", "0evil@0-evilaaaaaa", "0-evil@0-evilaaaaaa", "a.evil@0-evilaaaaaa", "0@0aaa", "0_evil@0-evilaaaaaa", "0.evil@0-evilaaaaaa"], "nonMatches": ["0.evil@0-EVILaaaaaa", "0.evil@0- aaaaaa", "0.evil@0-_aaaaaa", "0.eVil@0-evilaaaaaa", "0.EVIL@0-evilaaaaaa", "0.ev il@0-evilaaaaaa", "0. @0-evilaaaaaa", "0._@0-evilaaaaaa", "0.@0-evilaaaaaa", "0..evil@0-evilaaaaaa"]}, {"regex": "^((\\d{8})|(\\d{10})|(\\d{11})|(\\d{6}-\\d{5}))?$", "exceptionStackTrace": null, "matches": ["", "000000-00000", "00000000000", "0000000000", "00000000"], "nonMatches": ["000000-000000", "000000-0000", "0000000-00000", "00000-00000", "000000000000", "0000000000000000", "000000000", "0000000"]}, {"regex": "[\\x01-\\x08,\\x0A-\\x1F,\\x7F,\\x81,\\x8D,\\x8F,\\x90,\\x9D]", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 1"}, "matches": [], "nonMatches": []}, {"regex": "^(([a-zA-Z]:)|((\\\\|/){1,2}\\w+)\\$?)((\\\\|/)(\\w[\\w ]*.*))+\\.([a-zA-Z0-9]+)$", "exceptionStackTrace": null, "matches": ["\\evil\\aevilevil.evil", "\\eVil$\\aevilevil.evil", "\\EVIL$\\aevilevil.evil", "\\ev_il$\\aevilevil.evil", "\\ev4il$\\aevilevil.evil", "\\e$\\aevilevil.evil", "\\6$\\aevilevil.evil", "\\_$\\aevilevil.evil", "\\\\evil$\\aevilevil.evil", "A:\\aevilevil.eVil", "A:\\aevilevil.EVIL", "A:\\aevilevil.ev4il", "A:\\aevilevil.e", "A:\\aevilevil.6", "A:\\aevilevil\\aevilevil.evil", "A:\\aevil\\.evil", "A:\\aevil:.evil", "A:\\aevil/.evil", "A:\\aevil..evil", "A:\\aevil$.evil", "A:\\aevileVil.evil", "A:\\aevilEVIL.evil", "A:\\aevilev_il.evil", "A:\\aevilev il.evil", "A:\\aevilev4il.evil", "A:\\aevile.evil", "A:\\aevil .evil", "A:\\aevil6.evil", "A:\\aevil_.evil", "A:\\aeVilevil.evil", "A:\\aEVILevil.evil", "A:\\aev_ilevil.evil", "A:\\aev ilevil.evil", "A:\\aev4ilevil.evil", "A:\\aeevil.evil", "A:\\a evil.evil", "A:\\a6evil.evil", "A:\\a_evil.evil", "A:\\aevil.evil", "A:\\_evilevil.evil", "A:\\Aevilevil.evil", "A:\\0evilevil.evil", "a:\\aevilevil.evil", "/evil\\a.evil", "\\evil\\a.evil", "A:/a.evil", "A:\\a.evil", "/evil$\\aevilevil.evil", "\\evil$\\aevilevil.evil", "A:/aevilevil.evil", "A:\\aevilevil.evil"], "nonMatches": ["\\evil$$\\aevilevil.evil", "\\ev il$\\aevilevil.evil", "\\ $\\aevilevil.evil", "\\$\\aevilevil.evil", "\\\\\\evil$\\aevilevil.evil", "evil$\\aevilevil.evil", "A:\\aevilevil.ev_il", "A:\\aevilevil.ev il", "A:\\aevilevil. ", "A:\\aevilevil._", "A:\\aevilevil.", "A:.evil"]}, {"regex": "test", "exceptionStackTrace": null, "matches": ["test"], "nonMatches": []}, {"regex": "^([L|U]{1})([0-9]{5})([A-Za-z]{2})([0-9]{4})([A-Za-z]{3})([0-9]{6})$", "exceptionStackTrace": null, "matches": ["U00000aa0000Aaa000000", "U00000Aa0000aaa000000", "|00000aa0000aaa000000", "L00000aa0000aaa000000", "U00000aa0000aaa000000"], "nonMatches": ["U00000aa0000aaa0000000", "U00000aa0000aaa00000", "U00000aa0000aaaa000000", "U00000aa0000aa000000", "U00000aa00000aaa000000", "U00000aa000aaa000000", "U00000aaa0000aaa000000", "U00000a0000aaa000000", "U000000aa0000aaa000000", "U0000aa0000aaa000000", "UU00000aa0000aaa000000", "00000aa0000aaa000000", "A00000aa0000aaa000000"]}, {"regex": "^([0-9]{4})([0-9]{5})([0-9]{1})$", "exceptionStackTrace": null, "matches": ["0000000000"], "nonMatches": ["00000000000", "000000000"]}, {"regex": "^([0-9]{1})([0-9]{2})([0-9]{2})([0-9]{7})([0-9]{1})$", "exceptionStackTrace": null, "matches": ["0000000000000"], "nonMatches": ["00000000000000", "000000000000"]}, {"regex": "^([A-Za-z]{5})([0-9]{4})([A-Za-z]{1})$", "exceptionStackTrace": null, "matches": ["aaaaa0000A", "Aaaaa0000a", "aaaaa0000a"], "nonMatches": ["aaaaa0000aa", "aaaaa0000", "aaaaa00000a", "aaaaa000a", "aaaaaa0000a", "aaaa0000a"]}, {"regex": "^([a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,6}$", "exceptionStackTrace": null, "matches": ["0-0.AAAAAA", "0-0.aA", "0-0.0-0.AA", "0-0-0.AA", "0-a.AA", "0-A.AA", "0-------------------------------------------------------------0.AA", "00.AA", "0a0.AA", "0A0.AA", "000.AA", "a-0.AA", "A-0.AA", "0.AA", "0-0.AA"], "nonMatches": ["0-0.AAAAAAA", "0-0.A", "AA", "0--------------------------------------------------------------0.AA"]}, {"regex": "^07([\\d]{3})[(\\D\\s)]?[\\d]{3}[(\\D\\s)]?[\\d]{3}$", "exceptionStackTrace": null, "matches": ["07000)000000", "07000)000a000", "07000)000_000", "07000)000A000", "07000)000(000", "07000)000 000", "07000000)000", "07000a000)000", "07000_000)000", "07000A000)000", "07000(000)000", "07000 000)000", "07000000000", "07000)000)000"], "nonMatches": ["07000)000)0000", "07000)000)00", "07000)000))000", "07000)0000000", "07000)0000)000", "07000)00)000", "07000))000)000", "070000000)000", "070000)000)000", "0700)000)000"]}, {"regex": "\\<img ((src|height|width|border)=:q:Wh*)*/\\>", "exceptionStackTrace": null, "matches": ["<img src=:q:Whsrc=:q:Wh/>", "<img src=:q:Whh/>", "<img src=:q:W/>", "<img />", "<img border=:q:Wh/>", "<img width=:q:Wh/>", "<img height=:q:Wh/>", "<img src=:q:Wh/>"], "nonMatches": []}, {"regex": "^([0-1](?:\\.\\d)|[0-1](?:\\,\\d)|(2\\.0)|(2\\,0))$", "exceptionStackTrace": null, "matches": ["2,0", "2.0", "0,0", "0.0"], "nonMatches": []}, {"regex": "(((0[123456789]|10|11|12)([/])(([1][9][0-9][0-9])|([2][0-9][0-9][0-9]))))", "exceptionStackTrace": null, "matches": ["08/1900", "07/1900", "06/1900", "05/1900", "04/1900", "03/1900", "02/1900", "01/1900", "12/1900", "11/1900", "10/1900", "09/2000", "09/1900"], "nonMatches": ["00/1900"]}, {"regex": "(((0[1-9]|[12][0-9]|3[01])([/])(0[13578]|10|12)([/])([1-2][0,9][0-9][0-9]))|(([0][1-9]|[12][0-9]|30)([/])(0[469]|11)([/])([1-2][0,9][0-9][0-9]))|((0[1-9]|1[0-9]|2[0-8])([/])(02)([/])([1-2][0,9][0-9][0-9]))|((29)(\\.|-|\\/)(02)([/])([02468][048]00))|((29)([/])(02)([/])([13579][26]00))|((29)([/])(02)([/])([0-9][0-9][0][48]))|((29)([/])(02)([/])([0-9][0-9][2468][048]))|((29)([/])(02)([/])([0-9][0-9][13579][26])))", "exceptionStackTrace": null, "matches": ["29/02/0092", "29/02/0076", "29/02/0056", "29/02/0036", "29/02/0016", "29/02/0084", "29/02/0080", "29/02/0068", "29/02/0048", "29/02/0028", "29/02/0004", "29/02/0000", "29/02/9200", "29/02/7600", "29/02/5600", "29/02/3600", "29/02/1600", "29.02/8400", "29.02/8000", "29.02/6800", "29.02/4800", "29.02/2800", "29.02/0800", "01/02/1000", "01/02/1,00", "10/09/1900", "01/09/1000", "01/09/1,00", "01/06/1900", "01/04/1900", "30/08/1900", "10/08/1900", "01/08/1000", "01/08/1,00", "01/07/1900", "01/05/1900", "01/03/1900", "01/01/1900", "29/02/0096", "29/02/0088", "29/02/0008", "29/02/9600", "29/02/8800", "29-02/8800", "29.02/8800", "20/02/1900", "10/02/1900", "01/02/1900", "30/09/1900", "20/09/1900", "01/11/1900", "01/09/1900", "31/08/1900", "20/08/1900", "01/12/1900", "01/10/1900", "01/08/1900"], "nonMatches": ["29/02/0090", "29/02/0006", "29/02/0081", "29/02/9000", "29/02/0600", "29.02/8100", "29.02/1800", "29/02/1900", "01/02/1100", "01/02/0900", "00/02/1900", "01/09/1100", "01/09/0900", "00/09/1900", "32/08/1900", "01/08/1100", "01/08/0900", "01/00/1900", "00/08/1900"]}, {"regex": "(^\\d{3,5}\\,\\d{2}$)|(^\\d{3,5}$)", "exceptionStackTrace": null, "matches": ["00000", "00000,00", "000", "000,00"], "nonMatches": ["000000", "00", "000,000", "000,0", "000000,00", "00,00"]}, {"regex": "^\\+?[a-z0-9](([-+.]|[_]+)?[a-z0-9]+)*@([a-z0-9]+(\\.|\\-))+[a-z]{2,6}$", "exceptionStackTrace": null, "matches": ["+0__evil@evil.aa", "+0.evil@evil.aaaaaa", "+0.evil@evil.evil.aa", "+0.evil@ev4il.aa", "+0.evil@e.aa", "+0.evil@6.aa", "+0.evil.evil@evil.aa", "+0@evil.aa", "+0.ev_il@evil.aa", "+0.ev4il@evil.aa", "+0.e@evil.aa", "+0.6@evil.aa", "+0evil@evil.aa", "+0-evil@evil.aa", "+0+evil@evil.aa", "+a.evil@evil.aa", "0.evil@evil.aa", "0@evil-aa", "0@evil.aa", "+0_evil@evil.aa", "+0.evil@evil-aa", "+0.evil@evil.aa"], "nonMatches": ["+0.evil@evil.aaaaaaa", "+0.evil@evil.a", "+0.evil@aa", "+0.evil@eVil.aa", "+0.evil@EVIL.aa", "+0.evil@ev_il.aa", "+0.evil@ev il.aa", "+0.evil@ .aa", "+0.evil@_.aa", "+0.evil@.aa", "+0.eVil@evil.aa", "+0.EVIL@evil.aa", "+0.ev il@evil.aa", "+0. @evil.aa", "+0._@evil.aa", "+0.@evil.aa", "+0..evil@evil.aa", "++0.evil@evil.aa"]}, {"regex": "^\\d{0,2}(\\.\\d{1,2})?$", "exceptionStackTrace": null, "matches": ["0", "0.00", "00.0", ".0", "", "0.0"], "nonMatches": ["0.0.0", "0.000", "0.", "000.0"]}, {"regex": "\\\\red([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\\\green([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\\\blue([01]?\\d\\d?|2[0-4]\\d|25[0-5]);", "exceptionStackTrace": null, "matches": ["\\red100\\green100\\blue10;", "\\red100\\green100\\blue00;", "\\red100\\green100\\blue000;", "\\red100\\green10\\blue100;", "\\red100\\green00\\blue100;", "\\red100\\green000\\blue100;", "\\red10\\green100\\blue100;", "\\red00\\green100\\blue100;", "\\red000\\green100\\blue100;", "\\red250\\green0\\blue0;", "\\red200\\green0\\blue0;", "\\red0\\green250\\blue0;", "\\red0\\green200\\blue0;", "\\red0\\green0\\blue250;", "\\red0\\green0\\blue200;", "\\red0\\green0\\blue0;", "\\red250\\green100\\blue100;", "\\red200\\green100\\blue100;", "\\red100\\green250\\blue100;", "\\red100\\green200\\blue100;", "\\red100\\green100\\blue250;", "\\red100\\green100\\blue200;", "\\red100\\green100\\blue100;"], "nonMatches": ["\\red256\\green100\\blue100;", "\\red100\\green256\\blue100;", "\\red100\\green100\\blue256;", "\\red100\\green100\\blue1000;", "\\red100\\green100\\blue1100;", "\\red100\\green1000\\blue100;", "\\red100\\green1100\\blue100;", "\\red1000\\green100\\blue100;", "\\red1100\\green100\\blue100;"]}, {"regex": "^http\\://[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,3}(/\\S*)?$", "exceptionStackTrace": null, "matches": ["http://evil.AA/evil/evil", "http://evil.AA/:", "http://evil.AA//", "http://evil.AA/.", "http://evil.AA/-", "http://evil.AA/eVil", "http://evil.AA/EVIL", "http://evil.AA/ev_il", "http://evil.AA/ev4il", "http://evil.AA/e", "http://evil.AA/6", "http://evil.AA/_", "http://evil.AA/", "http://evil.AAA/evil", "http://evil.aA/evil", "http://..AA/evil", "http://-.AA/evil", "http://eVil.AA/evil", "http://EVIL.AA/evil", "http://ev4il.AA/evil", "http://e.AA/evil", "http://6.AA/evil", "http://evil.AA", "http://evil.AA/evil"], "nonMatches": ["http://evil.AA/ev il", "http://evil.AA/ ", "http://evil.AAAA/evil", "http://evil.A/evil", "http://:.AA/evil", "http:///.AA/evil", "http://ev_il.AA/evil", "http://ev il.AA/evil", "http:// .AA/evil", "http://_.AA/evil", "http://.AA/evil"]}, {"regex": "Google Chrome ", "exceptionStackTrace": null, "matches": ["Google Chrome "], "nonMatches": []}, {"regex": "1-800-644-5716", "exceptionStackTrace": null, "matches": ["1-800-644-5716"], "nonMatches": []}, {"regex": "\n1-844-788-4223", "exceptionStackTrace": null, "matches": ["\n1-844-788-4223"], "nonMatches": []}, {"regex": "^[http|ftp|wap|https]{3,5}:\\//\\www\\.\\w*\\.[com|net]{2,3}$", "exceptionStackTrace": null, "matches": ["sss://aww.evil.ttt", "sss://aww.evil.|t", "sss://aww.evil.ot", "sss://aww.evil.nt", "sss://aww.evil.mt", "sss://aww.evil.et", "sss://aww.evil.ct", "sss://aww.eVil.tt", "sss://aww.EVIL.tt", "sss://aww.ev_il.tt", "sss://aww.ev4il.tt", "sss://aww.e.tt", "sss://aww.6.tt", "sss://aww._.tt", "sss://_ww.evil.tt", "sss://Aww.evil.tt", "sss://0ww.evil.tt", "sssss://aww.evil.tt", "|ss://aww.evil.tt", "wss://aww.evil.tt", "tss://aww.evil.tt", "pss://aww.evil.tt", "hss://aww.evil.tt", "fss://aww.evil.tt", "ass://aww.evil.tt", "sss://aww..tt", "sss://aww.evil.tt"], "nonMatches": ["sss://aww.evil.tttt", "sss://aww.evil.t", "sss://aww.evil.at", "sss://aww.ev il.tt", "sss://aww. .tt", "ssssss://aww.evil.tt", "ss://aww.evil.tt", "bss://aww.evil.tt"]}, {"regex": "^(([0-9]{2})|([a-zA-Z][0-9])|([a-zA-Z]{2}))[0-9]{6}$", "exceptionStackTrace": null, "matches": ["aA000000", "a0000000", "AA000000", "A0000000", "00000000"], "nonMatches": ["AAA000000", "A000000", "000000000", "0000000"]}, {"regex": "^([0-9]{8})|(R[0-9]{7})|((AC|FC|GE|GN|GS|IC|IP|LP|NA|NF|NI|NL|NO|NP|NR|NZ|OC|RC|SA|SC|SF|SI|SL|SO|SP|SR)[0-9]{6})$", "exceptionStackTrace": null, "matches": ["R00000000", "000000000", "SR000000", "SP000000", "SO000000", "SL000000", "SI000000", "SF000000", "SC000000", "SA000000", "RC000000", "OC000000", "NZ000000", "NR000000", "NP000000", "NO000000", "NL000000", "NI000000", "NF000000", "NA000000", "LP000000", "IP000000", "IC000000", "GS000000", "GN000000", "GE000000", "FC000000", "AC000000", "R0000000", "00000000"], "nonMatches": ["AC0000000", "AC00000", "R000000", "0000000"]}, {"regex": "desfre", "exceptionStackTrace": null, "matches": ["desfre"], "nonMatches": []}, {"regex": "^([a-zA-Z])(?=.*\\d)\\w{4,9}$", "exceptionStackTrace": null, "matches": ["A0aaa"], "nonMatches": ["Aaaaaaaaaaa", "Aaaaaaaaaa", "Aaaa", "A_aaa", "AAaaa", "aaaaa", "Aaaaa"]}, {"regex": "^([A-Z0-9]{5})$", "exceptionStackTrace": null, "matches": ["A0000", "00000"], "nonMatches": ["000000", "0000"]}, {"regex": "(1[8,9]|20)[0-9]{2}", "exceptionStackTrace": null, "matches": ["19000", "1800", "1,00", "2000", "1900"], "nonMatches": ["190", "1000"]}, {"regex": "(refs|references|re|closes|closed|close|see|fixes|fixed|fix|addresses) #(\\d+)(( and |, | & | )#(\\d+))*", "exceptionStackTrace": null, "matches": ["refs #0 and #0 and #0", "refs #0 and #00", "refs #0 and #", "refs #00 and #0", "addresses #0", "fix #0", "fixed #0", "fixes #0", "see #0", "close #0", "closed #0", "closes #0", "re #0", "references #0", "refs #0", "addresses #0 and #0", "fix #0 and #0", "fixed #0 and #0", "fixes #0 and #0", "see #0 and #0", "close #0 and #0", "closed #0 and #0", "closes #0 and #0", "re #0 and #0", "references #0 and #0", "refs #0 #0", "refs #0 & #0", "refs #0, #0", "refs #0 and #0"], "nonMatches": ["refs # and #0"]}, {"regex": "(((((0[1-9]|[12][0-9]|3[01])/(0[13578]|1[02]))|((0[1-9]|[12][0-9]|30)/(0[469]|11))|((0[1-9]|[1][0-9]|2[0-8]))/02)/([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3}) ((([0-1][0-9])|([2][0-3]))[:][0-5][0-9]$))|(29/02/(([0-9]{2})(0[48]|[2468][048]|[13579][26])|((0[48]|[2468][048]|[3579][26])00)) ((([0-1][0-9])|([2][0-3]))[:][0-5][0-9]$)))", "exceptionStackTrace": null, "matches": ["29/02/9200 00:00", "29/02/7600 00:00", "29/02/5600 00:00", "29/02/3600 00:00", "29/02/8400 00:00", "29/02/8000 00:00", "29/02/6800 00:00", "29/02/4800 00:00", "29/02/2800 00:00", "29/02/0400 00:00", "29/02/0092 00:00", "29/02/0076 00:00", "29/02/0056 00:00", "29/02/0036 00:00", "29/02/0016 00:00", "29/02/0084 00:00", "29/02/0080 00:00", "29/02/0068 00:00", "29/02/0048 00:00", "29/02/0028 00:00", "29/02/0004 00:00", "10/09/0001 00:00", "01/06/0001 00:00", "01/04/0001 00:00", "30/08/0001 00:00", "10/08/0001 00:00", "01/10/0001 00:00", "01/07/0001 00:00", "01/05/0001 00:00", "01/03/0001 00:00", "01/01/0001 00:00", "29/02/9600 00:00", "29/02/8800 00:00", "29/02/0800 00:00", "29/02/0096 00:00", "29/02/0088 00:00", "29/02/0008 20:00", "29/02/0008 00:00", "20/02/0001 00:00", "10/02/0001 00:00", "01/02/0001 00:00", "30/09/0001 00:00", "20/09/0001 00:00", "01/11/0001 00:00", "01/09/0001 00:00", "31/08/0001 00:00", "20/08/0001 00:00", "01/12/0001 00:00", "01/08/1000 00:00", "01/08/0100 00:00", "01/08/0010 00:00", "01/08/0001 20:00", "01/08/0001 00:00"], "nonMatches": ["29/02/9000 00:00", "29/02/0600 00:00", "29/02/8100 00:00", "29/02/0090 00:00", "29/02/0006 00:00", "29/02/0081 00:00", "29/02/0008 24:00", "29/02/0008 00:60", "29/02/0000 00:00", "29/02/00008 00:00", "29/02/008 00:00", "29/02/0001 00:00", "00/02/0001 00:00", "00/09/0001 00:00", "32/08/0001 00:00", "01/08/10000 00:00", "01/08/01000 00:00", "01/08/100 00:00", "01/08/00100 00:00", "01/08/00010 00:00", "01/08/010 00:00", "01/08/0001 24:00", "01/08/0001 00:60", "01/08/0000 00:00", "01/08/00001 00:00", "01/08/001 00:00", "01/00/0001 00:00", "00/08/0001 00:00"]}, {"regex": "^[1-9]\\d*\\.?[0]*$", "exceptionStackTrace": null, "matches": ["10.00", "10.", "100", "100.0", "1.0", "1", "10.0"], "nonMatches": ["10..0", "00.0"]}, {"regex": "\\b[^aeiou]+[aeiou][^aeiou]+\\b", "exceptionStackTrace": null, "matches": ["eviluev il"], "nonMatches": ["evilueVil", "eviluEVIL", "eviluev_il", "eviluev4il", "evilue", "evilu ", "evilu6", "evilu_", "evilu", "eviloevil", "evilievil", "evileevil", "evilbevil", "evilaevil", "eViluevil", "EVILuevil", "ev_iluevil", "ev iluevil", "ev4iluevil", "euevil", " uevil", "6uevil", "_uevil", "uevil", "eviluevil"]}, {"regex": "^([0-9A-Za-z@.]{1,255})$", "exceptionStackTrace": null, "matches": ["...............................................................................................................................................................................................................................................................", "a", "A", "@", "0", "."], "nonMatches": ["................................................................................................................................................................................................................................................................", ""]}, {"regex": "zdhdry", "exceptionStackTrace": null, "matches": ["zdhdry"], "nonMatches": []}, {"regex": "(&#192;|&#193;|&#194;|&#195;|&#196;|&#197;|&#224;|&#225;|&#226;|&#227;|&#228;|&#229;|&amp;#097;|&amp;#065;|&amp;#064;|&amp;commat;|&amp;alpha;|&amp;#192;|&amp;#193;|&amp;#194;|&amp;#195;|&amp;#196;|&amp;#197;|&amp;Agrave;|&amp;Aacute;|&amp;Acirc;|&amp;Atilde;|&amp;Auml;|&amp;Aring;|&amp;#224;|&amp;#225;|&amp;#226;|&amp;#227;|&amp;#228;|&amp;#229;|&amp;agrave;|&amp;aacute;|&amp;acirc;|&amp;atilde;|&amp;auml;|&amp;aring;)", "exceptionStackTrace": null, "matches": ["&amp;aring;", "&amp;auml;", "&amp;atilde;", "&amp;acirc;", "&amp;aacute;", "&amp;agrave;", "&amp;#229;", "&amp;#228;", "&amp;#227;", "&amp;#226;", "&amp;#225;", "&amp;#224;", "&amp;Aring;", "&amp;Auml;", "&amp;Atilde;", "&amp;Acirc;", "&amp;Aacute;", "&amp;Agrave;", "&amp;#197;", "&amp;#196;", "&amp;#195;", "&amp;#194;", "&amp;#193;", "&amp;#192;", "&amp;alpha;", "&amp;commat;", "&amp;#064;", "&amp;#065;", "&amp;#097;", "&#229;", "&#228;", "&#227;", "&#226;", "&#225;", "&#224;", "&#197;", "&#196;", "&#195;", "&#194;", "&#193;", "&#192;"], "nonMatches": []}, {"regex": "(&#200;|&#201;|&#202;|&#203;|&#232;|&#233;|&#234;|&#235;|&amp;#069;|&amp;#101;|&amp;#200;|&amp;#201;|&amp;#202;|&amp;#203;|&amp;Egrave;|&amp;Eacute;|&amp;Ecirc;|&amp;Euml;|&amp;#232;|&amp;#233;|&amp;#234;|&amp;#235;|&amp;egrave;|&amp;eacute;|&amp;ecirc;|&amp;euml;)", "exceptionStackTrace": null, "matches": ["&amp;euml;", "&amp;ecirc;", "&amp;eacute;", "&amp;egrave;", "&amp;#235;", "&amp;#234;", "&amp;#233;", "&amp;#232;", "&amp;Euml;", "&amp;Ecirc;", "&amp;Eacute;", "&amp;Egrave;", "&amp;#203;", "&amp;#202;", "&amp;#201;", "&amp;#200;", "&amp;#101;", "&amp;#069;", "&#235;", "&#234;", "&#233;", "&#232;", "&#203;", "&#202;", "&#201;", "&#200;"], "nonMatches": []}, {"regex": "(&#161;|&#204;|&#205;|&#206;|&#207;|&#236;|&#237;|&#238;|&#239;|&amp;#033;|&amp;#161;|&amp;iexcl;|&amp;#185;|&amp;sup1;|&amp;brvbar;|&amp;Igrave;|&amp;Iacute;|&amp;Icirc;|&amp;Iuml;|&amp;igrave;|&amp;iacute;|&amp;iuml;|&amp;#204;|&amp;#205;|&amp;#206;|&amp;#207;|&amp;#236;|&amp;#237;|&amp;#238;|&amp;#239;|&amp;#073;|&amp;#105;)", "exceptionStackTrace": null, "matches": ["&amp;#105;", "&amp;#073;", "&amp;#239;", "&amp;#238;", "&amp;#237;", "&amp;#236;", "&amp;#207;", "&amp;#206;", "&amp;#205;", "&amp;#204;", "&amp;iuml;", "&amp;iacute;", "&amp;igrave;", "&amp;Iuml;", "&amp;Icirc;", "&amp;Iacute;", "&amp;Igrave;", "&amp;brvbar;", "&amp;sup1;", "&amp;#185;", "&amp;iexcl;", "&amp;#161;", "&amp;#033;", "&#239;", "&#238;", "&#237;", "&#236;", "&#207;", "&#206;", "&#205;", "&#204;", "&#161;"], "nonMatches": []}, {"regex": "(&#210;|&#211;|&#212;|&#213;|&#214;|&#216;|&#240;|&#242;|&#243;|&#244;|&#245;|&#246;|&#248;|&amp;#048;|&amp;#079;|&amp;#111;|&amp;#210;|&amp;#211;|&amp;#212;|&amp;#213;|&amp;#214;|&amp;#216;|&amp;Ograve;|&amp;Oacute;|&amp;Ocirc;|&amp;Otilde;|&amp;Ouml;|&amp;Oslash;|&amp;#242;|&amp;#243;|&amp;#244;|&amp;#245;|&amp;ograve;|&amp;oacute;|&amp;ocirc;|&amp;otilde;|&amp;ouml;|&amp;oslash;)", "exceptionStackTrace": null, "matches": ["&amp;oslash;", "&amp;ouml;", "&amp;otilde;", "&amp;ocirc;", "&amp;oacute;", "&amp;ograve;", "&amp;#245;", "&amp;#244;", "&amp;#243;", "&amp;#242;", "&amp;Oslash;", "&amp;Ouml;", "&amp;Otilde;", "&amp;Ocirc;", "&amp;Oacute;", "&amp;Ograve;", "&amp;#216;", "&amp;#214;", "&amp;#213;", "&amp;#212;", "&amp;#211;", "&amp;#210;", "&amp;#111;", "&amp;#079;", "&amp;#048;", "&#248;", "&#246;", "&#245;", "&#244;", "&#243;", "&#242;", "&#240;", "&#216;", "&#214;", "&#213;", "&#212;", "&#211;", "&#210;"], "nonMatches": []}, {"regex": "(&#217;|&#218;|&#219;|&#220;|&#249;|&#250;|&#251;|&#252;|&#181;|&amp;#085;|&amp;#117;|&amp;#181;|&amp;micro;|&amp;#217;|&amp;#218;|&amp;#219;|&amp;#220;|&amp;Ugrave;|&amp;Uacute;|&amp;Ucirc;|&amp;Uuml;|&amp;#249;|&amp;#250;|&amp;#251;&amp;#252;|&amp;ugrave;|&amp;uacute;|&amp;ucirc;|&amp;uuml;)", "exceptionStackTrace": null, "matches": ["&amp;uuml;", "&amp;ucirc;", "&amp;uacute;", "&amp;ugrave;", "&amp;#251;&amp;#252;", "&amp;#250;", "&amp;#249;", "&amp;Uuml;", "&amp;Ucirc;", "&amp;Uacute;", "&amp;Ugrave;", "&amp;#220;", "&amp;#219;", "&amp;#218;", "&amp;#217;", "&amp;micro;", "&amp;#181;", "&amp;#117;", "&amp;#085;", "&#181;", "&#252;", "&#251;", "&#250;", "&#249;", "&#220;", "&#219;", "&#218;", "&#217;"], "nonMatches": []}, {"regex": ".*[\\$Ss]pecia[l1]\\W[Oo0]ffer.*", "exceptionStackTrace": null, "matches": ["evilspecia1;0ffer$", "evilspecia1;0ffereVil", "evilspecia1;0fferEVIL", "evilspecia1;0fferev_il", "evilspecia1;0fferev il", "evilspecia1;0fferev4il", "evilspecia1;0ffere", "evilspecia1;0ffer ", "evilspecia1;0ffer6", "evilspecia1;0ffer_", "evilspecia1;0ffer", "evilspecia1;offerevil", "evilspecia1;Offerevil", "evilspecia1$0fferevil", "evilspecia1 0fferevil", "evilspecial;0fferevil", "evilSpecia1;0fferevil", "evil$pecia1;0fferevil", "$specia1;0fferevil", "eVilspecia1;0fferevil", "EVILspecia1;0fferevil", "ev_ilspecia1;0fferevil", "ev ilspecia1;0fferevil", "ev4ilspecia1;0fferevil", "especia1;0fferevil", " specia1;0fferevil", "6specia1;0fferevil", "_specia1;0fferevil", "specia1;0fferevil", "specia1;0ffer", "evilspecia1;0fferevil"], "nonMatches": ["evilspecia1;afferevil", "evilspecia1;Afferevil", "evilspecia1;1fferevil", "evilspecia1a0fferevil", "evilspecia1_0fferevil", "evilspecia1A0fferevil", "evilspecia100fferevil", "evilspeciaa;0fferevil", "evilspecia0;0fferevil", "evilapecia1;0fferevil", "evilApecia1;0fferevil"]}, {"regex": ".*[Vv][Ii1]agr.*", "exceptionStackTrace": null, "matches": ["evilv1agreVil", "evilv1agrEVIL", "evilv1agrev_il", "evilv1agrev il", "evilv1agrev4il", "evilv1agre", "evilv1agr ", "evilv1agr6", "evilv1agr_", "evilv1agr", "evilviagrevil", "evilvIagrevil", "evilV1agrevil", "eVilv1agrevil", "EVILv1agrevil", "ev_ilv1agrevil", "ev ilv1agrevil", "ev4ilv1agrevil", "ev1agrevil", " v1agrevil", "6v1agrevil", "_v1agrevil", "v1agrevil", "v1agr", "evilv1agrevil"], "nonMatches": ["evilvaagrevil", "evilvAagrevil", "evilv0agrevil", "evila1agrevil", "evilA1agrevil"]}, {"regex": ".*[Oo0][Ee][Mm].*", "exceptionStackTrace": null, "matches": ["evil0emeVil", "evil0emEVIL", "evil0emev_il", "evil0emev il", "evil0emev4il", "evil0eme", "evil0em ", "evil0em6", "evil0em_", "evil0em", "evil0eMevil", "evil0Emevil", "eviloemevil", "evilOemevil", "eVil0emevil", "EVIL0emevil", "ev_il0emevil", "ev il0emevil", "ev4il0emevil", "e0emevil", " 0emevil", "60emevil", "_0emevil", "0emevil", "0em", "evil0emevil"], "nonMatches": ["evil0eaevil", "evil0eAevil", "evil0amevil", "evil0Amevil", "evilaemevil", "evilAemevil", "evil1emevil"]}, {"regex": ".*\\$AVE|\\$ave.*", "exceptionStackTrace": null, "matches": ["$ave$", "$aveeVil", "$aveEVIL", "$aveev_il", "$aveev il", "$aveev4il", "$avee", "$ave ", "$ave6", "$ave_", "$$AVE", "eVil$AVE", "EVIL$AVE", "ev_il$AVE", "ev il$AVE", "ev4il$AVE", "e$AVE", " $AVE", "6$AVE", "_$AVE", "$ave", "$AVE", "$aveevil", "evil$AVE"], "nonMatches": []}, {"regex": ".*[Pp]re[Ss\\$]cr[iI1]pt.*", "exceptionStackTrace": null, "matches": ["evilpre$cr1pt$", "evilpre$cr1pteVil", "evilpre$cr1ptEVIL", "evilpre$cr1ptev_il", "evilpre$cr1ptev il", "evilpre$cr1ptev4il", "evilpre$cr1pte", "evilpre$cr1pt ", "evilpre$cr1pt6", "evilpre$cr1pt_", "evilpre$cr1pt", "evilpre$criptevil", "evilpre$crIptevil", "evilprescr1ptevil", "evilpreScr1ptevil", "evilPre$cr1ptevil", "$pre$cr1ptevil", "eVilpre$cr1ptevil", "EVILpre$cr1ptevil", "ev_ilpre$cr1ptevil", "ev ilpre$cr1ptevil", "ev4ilpre$cr1ptevil", "epre$cr1ptevil", " pre$cr1ptevil", "6pre$cr1ptevil", "_pre$cr1ptevil", "pre$cr1ptevil", "pre$cr1pt", "evilpre$cr1ptevil"], "nonMatches": ["evilpre$craptevil", "evilpre$crAptevil", "evilpre$cr0ptevil", "evilpreacr1ptevil", "evilpreAcr1ptevil", "evilare$cr1ptevil", "evilAre$cr1ptevil"]}, {"regex": ".*[Pp]en[Ii1][\\$s].*", "exceptionStackTrace": null, "matches": ["evilpen1s$", "evilpen1seVil", "evilpen1sEVIL", "evilpen1sev_il", "evilpen1sev il", "evilpen1sev4il", "evilpen1se", "evilpen1s ", "evilpen1s6", "evilpen1s_", "evilpen1s", "evilpen1$evil", "evilpenisevil", "evilpenIsevil", "evilPen1sevil", "$pen1sevil", "eVilpen1sevil", "EVILpen1sevil", "ev_ilpen1sevil", "ev ilpen1sevil", "ev4ilpen1sevil", "epen1sevil", " pen1sevil", "6pen1sevil", "_pen1sevil", "pen1sevil", "pen1s", "evilpen1sevil"], "nonMatches": ["evilpen1aevil", "evilpenasevil", "evilpenAsevil", "evilpen0sevil", "evilaen1sevil", "evilAen1sevil"]}, {"regex": "^[-+]?\\d+(\\.\\d+)?|[-+]?\\.\\d+?$", "exceptionStackTrace": null, "matches": ["+.00", "++.0", "-.0", "+0.0.0", "+0", "+0.00", "+0.", "+00.0", "++0.0", "0.0", "-0.0", ".0", "0", "+.0", "+0.0"], "nonMatches": ["+."]}, {"regex": "^(\\d|,)*\\d*$", "exceptionStackTrace": null, "matches": ["000", "0", "", ",0", "00"], "nonMatches": []}, {"regex": "\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([0-1][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])(?:.\\d{7})?[+|-](0[0-9]|1[0-2]):(00|15|30|45)", "exceptionStackTrace": null, "matches": ["0000-01-01T00:00:00a0000000|00:00", "0000-01-01T00:00:00a0000000+00:00", "0000-01-01T00:00:00|0000000-00:00", "0000-01-01T00:00:00A0000000-00:00", "0000-01-01T00:00:00:0000000-00:00", "0000-01-01T00:00:0000000000-00:00", "0000-01-01T00:00:00-0000000-00:00", "0000-01-01T00:00:00+0000000-00:00", "0000-01-01T00:00:00 0000000-00:00", "00000-01-01T00:00:00a0000000-00:00", "0000-10-01T00:00:00-00:00", "0000-01-30T00:00:00-00:00", "0000-01-10T00:00:00-00:00", "0000-01-01T20:00:00-00:00", "0000-01-01T00:00:00-10:00", "0000-01-01T00:00:00-00:45", "0000-01-01T00:00:00-00:30", "0000-01-01T00:00:00-00:15", "0000-01-01T00:00:00-00:00", "0000-10-01T00:00:00a0000000-00:00", "0000-01-30T00:00:00a0000000-00:00", "0000-01-10T00:00:00a0000000-00:00", "0000-01-01T20:00:00a0000000-00:00", "0000-01-01T00:00:00a0000000-10:00", "0000-01-01T00:00:00a0000000-00:45", "0000-01-01T00:00:00a0000000-00:30", "0000-01-01T00:00:00a0000000-00:15", "0000-01-01T00:00:00a0000000-00:00"], "nonMatches": ["0000-13-01T00:00:00a0000000-00:00", "0000-01-32T00:00:00a0000000-00:00", "0000-01-01T24:00:00a0000000-00:00", "0000-01-01T00:00:00a0000000-13:00", "0000-01-01T00:00:00a0000000a0000000-00:00", "0000-01-01T00:00:00a00000000-00:00", "0000-01-01T00:00:00a000000-00:00", "0000-01-01T00:00:60a0000000-00:00", "0000-01-01T00:60:00a0000000-00:00", "0000-01-00T00:00:00a0000000-00:00", "0000-00-01T00:00:00a0000000-00:00", "000-01-01T00:00:00a0000000-00:00"]}, {"regex": "^[^-]{1}?[^\\&quot;\\&#39;]*$", "exceptionStackTrace": null, "matches": ["a-", "aeVil", "aEVIL", "aev_il", "aev il", "aev4il", "ae", "a ", "a6", "a_", "aaevil", "evil", "Aevil", ";evil", "0evil", "&evil", "#evil", " evil", "a", "aevil"], "nonMatches": ["a;", "a&", "a#", "-evil"]}, {"regex": "([^a-zA-Z0-9])", "exceptionStackTrace": null, "matches": ["_", " "], "nonMatches": ["a", "A", "0"]}, {"regex": "^(\\d?)*\\.?(\\d{1}|\\d{2})?$", "exceptionStackTrace": null, "matches": ["0.", "00", "00.0", ".0", "", "0.00", "0.0"], "nonMatches": ["0.000", "0..0"]}, {"regex": "^(((\\+|00)?44|0)([123578]{1}))(((\\d{1}\\s?\\d{4}|\\d{2}\\s?\\d{3})\\s?\\d{4})|(\\d{3}\\s?\\d{2,3}\\s?\\d{3})|(\\d{4}\\s?\\d{4,5}))$", "exceptionStackTrace": null, "matches": ["+4480000 00000", "+44800000000", "+448000 00000", "+448000 000 000", "+44800000 000", "+4480 00000000", "+44800000 0000", "+4470 0000 0000", "+4450 0000 0000", "+4430 0000 0000", "+4420 0000 0000", "+4410 0000 0000", "4480 0000 0000", "08000000000", "44800000000", "448000000000", "080 0000 0000", "004480 0000 0000", "+4480000 0000", "+448000 00 000", "+44800 000 0000", "+4480 0000 0000"], "nonMatches": ["+4480000 000000", "+4480000 000", "+4480000  0000", "+448000 0000", "+448000 00 0000", "+448000 00 00", "+448000 00  000", "+448000 0000 000", "+448000 0 000", "+448000  00 000", "+4480000 00 000", "+44800 00 000", "+44800 00 0000", "+44800  000 0000", "+448000 000 0000", "+4480 0000 00000", "+4480 0000 000", "+4480 0000  0000", "+4480 00000 0000", "+4480 000 0000", "+4480  0000 0000", "+44800 0000 0000", "+448 0000 0000", "+44880 0000 0000", "+440 0000 0000", "+4400 0000 0000", "++4480 0000 0000"]}, {"regex": "(?![A-Z](\\d)\\1{5,})(^[A-Z]{1,3}(\\d{6}|\\d{9})$)|(^\\d{9}[A-Z][0-9|A-Z]?$)", "exceptionStackTrace": null, "matches": ["000000000AA", "000000000A0", "AAA000000", "000000000A", "000000000A|"], "nonMatches": ["000000000A||", "0000000000A|", "00000000A|", "A0000000000", "A00000000", "A0000000", "A00000", "AAAA000000", "000000", "A000000000", "A000000"]}, {"regex": "clipvn", "exceptionStackTrace": null, "matches": ["clipvn"], "nonMatches": []}, {"regex": "clipvn", "exceptionStackTrace": null, "matches": ["clipvn"], "nonMatches": []}, {"regex": "http://www.customerhelpnumber.co.uk", "exceptionStackTrace": null, "matches": ["http://wwwacustomerhelpnumberacoAuk", "http://wwwacustomerhelpnumberaco:uk", "http://wwwacustomerhelpnumberaco0uk", "http://wwwacustomerhelpnumberaco/uk", "http://wwwacustomerhelpnumberaco uk", "http://wwwacustomerhelpnumberAcoauk", "http://wwwacustomerhelpnumber:coauk", "http://wwwacustomerhelpnumber0coauk", "http://wwwacustomerhelpnumber/coauk", "http://wwwacustomerhelpnumber coauk", "http://wwwAcustomerhelpnumberacoauk", "http://www:customerhelpnumberacoauk", "http://www0customerhelpnumberacoauk", "http://www/customerhelpnumberacoauk", "http://www customerhelpnumberacoauk", "http://wwwacustomerhelpnumberacoauk"], "nonMatches": []}, {"regex": "^(0[1-9]|1[0-2])\\/((0[1-9]|2\\d)|3[0-1])\\/(19\\d\\d|200[0-3])$", "exceptionStackTrace": null, "matches": ["10/01/1900", "01/30/1900", "01/20/1900", "01/01/2000", "01/01/1900"], "nonMatches": ["13/01/1900", "01/32/1900", "01/01/2004", "01/00/1900", "00/01/1900"]}, {"regex": "^((\\+)?(\\d{2}[-]))?(\\d{10}){1}?$", "exceptionStackTrace": null, "matches": ["00-0000000000", "0000000000", "+00-0000000000"], "nonMatches": ["+00-00000000000000000000", "+00-", "+00-00000000000", "+00-000000000", "+00-+00-0000000000", "+000-0000000000", "+0-0000000000", "++00-0000000000"]}, {"regex": "^((\\+)?(\\d{2})[-])?(([\\(])?((\\d){3,5})([\\)])?[-])|(\\d{3,5})(\\d{5,8}){1}?$", "exceptionStackTrace": null, "matches": ["0000000000000", "000000000000", "00000000000", "0000000000", "+00-(000-", "+00-(00000)-", "+00-000)-", "(000)-", "00-(000)-", "000-", "00000000", "+00-(000)-"], "nonMatches": ["000", "0000000", "+00-(000))-", "+00-(000000)-", "+00-(00)-", "+00-((000)-", "+00-+00-(000)-", "+000-(000)-", "+0-(000)-", "++00-(000)-"]}, {"regex": "^([a-zA-Z](?:(?:(?:\\w[\\.\\_]?)*)\\w)+)([a-zA-Z0-9])$", "exceptionStackTrace": null, "matches": ["Aa_aa", "Aa_aA", "Aa_aa_a0", "Aa__0", "Aa_A0", "Aa_00", "Aa_a_a0", "Aa__a0", "Aaa0", "Aa.a0", "A__a0", "AA_a0", "A0_a0", "aa_a0", "Aa0", "Aa_a0"], "nonMatches": ["A0"]}, {"regex": "^[a-zA-Z]([a-zA-Z[._][\\d]])*[@][a-zA-Z[.][\\d]]*[.][a-z[.][\\d]]*", "exceptionStackTrace": null, "matches": ["A_0]@.0]..0]]", "A_0]@.0]..0", "A_0]@.0].a0]", "A_0]@.0].[0]", "A_0]@.0]]..0]", "A_0]@.0..0]", "A_0]@a0]..0]", "A_0]@[0]..0]", "A_0]@A0]..0]", "A_0]_0]@.0]..0]", "A@.0]..0]", "Aa0]@.0]..0]", "A[0]@.0]..0]", "AA0]@.0]..0]", "A.0]@.0]..0]", "a_0]@.0]..0]", "A@.0..0", "A_0]@.0]..0]"], "nonMatches": []}, {"regex": "^([a-zA-Z0-9])+(([a-zA-Z0-9\\s])+[_-//&a-zA-Z0-9]([a-zA-Z0-9\\s])+)*([a-zA-Z0-9])+$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character range _-/"}, "matches": []}, {"regex": "^((31(?!\\ (Apr(il)?|June?|(Sept|Nov)(ember)?)))|((30|29)(?!\\ Feb(ruary)?))|(29(?=\\ Feb(ruary)?\\ (((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\\d|2[0-8])\\ (Jan(uary)?|Feb(ruary)?|Ma(r(ch)?|y)|Apr(il)?|Ju((ly?)|(ne?))|Aug(ust)?|Oct(ober)?|(Sept|Nov|Dec)(ember)?)\\ ((1[6-9]|[2-9]\\d)\\d{2})$", "exceptionStackTrace": null, "matches": ["1 January 1600", "20 Jan 1600", "10 Jan 1600", "1 Jan 1600", "29 Jan 1600", "30 Jan 1600", "31 Dec 1600", "31 Oct 1600", "31 Aug 1600", "31 Jul 1600", "31 Mar 1600", "31 Feb 1600", "31 Jan 2000", "31 Jan 1600", "20 January 1600", "10 January 1600", "01 January 1600", "29 January 1600", "30 January 1600", "31 December 1600", "31 October 1600", "31 August 1600", "31 July 1600", "31 May 1600", "31 March 1600", "31 February 1600", "31 January 2000", "31 January 1600"], "nonMatches": ["00 January 1600", "001 January 1600", "31 Septemberember 1600", "31 Octoberober 1600", "31 Augustust 1600", "31 Junee 1600", "31 Julyy 1600", "31 Aprilil 1600", "31 Marchch 1600", "31 Februaryruary 1600", "31 January 0000", "31 January 16000", "31 January 160", "31 January 1000", "31 Januaryuary 1600", "31 Nov 1600", "31 Sept 1600", "31 Jun 1600", "31 Apr 1600", "31 November 1600", "31 September 1600", "31 June 1600", "31 April 1600"]}, {"regex": "\\b((?<![&quot;&#39;>])(?:https?://)?(?<![-@>])(?:[a-z0-9](?:[-a-z0-9]*[a-z0-9])\\.)+(?:com|org|net|gov|mil|biz|info|name|aero|mobi|jobs|museum|[A-Z]{2})(?:/[-A-Z0-9\\/_.]+)?(?:\\?[-A-Z0-9&\\._%=,]+)?(?![&#39;&quot;<]))\\b", "exceptionStackTrace": null, "matches": ["https://0evil0.com/evil?evil?evil", "https://0evil0.com/evil", "https://0evil0.com/evil?@", "https://0evil0.com/evil??", "https://0evil0.com/evil?>", "https://0evil0.com/evil?=", "https://0evil0.com/evil?<", "https://0evil0.com/evil?;", "https://0evil0.com/evil?:", "https://0evil0.com/evil?/", "https://0evil0.com/evil?.", "https://0evil0.com/evil?-", "https://0evil0.com/evil?,", "https://0evil0.com/evil?&", "https://0evil0.com/evil?%", "https://0evil0.com/evil?#", "https://0evil0.com/evil?eVil", "https://0evil0.com/evil?EVIL", "https://0evil0.com/evil?ev_il", "https://0evil0.com/evil?ev il", "https://0evil0.com/evil?ev4il", "https://0evil0.com/evil?e", "https://0evil0.com/evil? ", "https://0evil0.com/evil?6", "https://0evil0.com/evil?_", "https://0evil0.com/evil?", "https://0evil0.com/evil/evil?evil", "https://0evil0.com?evil", "https://0evil0.com/@?evil", "https://0evil0.com/??evil", "https://0evil0.com/>?evil", "https://0evil0.com/=?evil", "https://0evil0.com/<?evil", "https://0evil0.com/;?evil", "https://0evil0.com/:?evil", "https://0evil0.com//?evil", "https://0evil0.com/.?evil", "https://0evil0.com/-?evil", "https://0evil0.com/,?evil", "https://0evil0.com/&?evil", "https://0evil0.com/%?evil", "https://0evil0.com/#?evil", "https://0evil0.com/eVil?evil", "https://0evil0.com/EVIL?evil", "https://0evil0.com/ev_il?evil", "https://0evil0.com/ev il?evil", "https://0evil0.com/ev4il?evil", "https://0evil0.com/e?evil", "https://0evil0.com/ ?evil", "https://0evil0.com/6?evil", "https://0evil0.com/_?evil", "https://0evil0.com/?evil", "https://0evil0.0evil0.com/evil?evil", "https://0evila.com/evil?evil", "https://0-0.com/evil?evil", "https://0ev il0.com/evil?evil", "https://0ev4il0.com/evil?evil", "https://0e0.com/evil?evil", "https://060.com/evil?evil", "https://00.com/evil?evil", "https://aevil0.com/evil?evil", "https://https://0evil0.com/evil?evil", "0evil0.com/evil?evil", "httpss://0evil0.com/evil?evil", "http://0evil0.com/evil?evil", "00.AA", "00.museum", "00.jobs", "00.mobi", "00.aero", "00.name", "00.info", "00.biz", "00.mil", "00.gov", "00.net", "00.org", "00.com", "https://0evil0.AA/evil?evil", "https://0evil0.museum/evil?evil", "https://0evil0.jobs/evil?evil", "https://0evil0.mobi/evil?evil", "https://0evil0.aero/evil?evil", "https://0evil0.name/evil?evil", "https://0evil0.info/evil?evil", "https://0evil0.biz/evil?evil", "https://0evil0.mil/evil?evil", "https://0evil0.gov/evil?evil", "https://0evil0.net/evil?evil", "https://0evil0.org/evil?evil", "https://0evil0.com/evil?evil"], "nonMatches": ["https://0evil0.AAA/evil?evil", "https://0evil0.A/evil?evil", "https://com/evil?evil", "https://0@0.com/evil?evil", "https://0?0.com/evil?evil", "https://0>0.com/evil?evil", "https://0=0.com/evil?evil", "https://0<0.com/evil?evil", "https://0;0.com/evil?evil", "https://0:0.com/evil?evil", "https://0/0.com/evil?evil", "https://0.0.com/evil?evil", "https://0,0.com/evil?evil", "https://0&0.com/evil?evil", "https://0%0.com/evil?evil", "https://0#0.com/evil?evil", "https://0eVil0.com/evil?evil", "https://0EVIL0.com/evil?evil", "https://0ev_il0.com/evil?evil", "https://0 0.com/evil?evil", "https://0_0.com/evil?evil"]}, {"regex": "^(ht|f)tp(s?)\\:\\/\\/[a-zA-Z0-9\\-\\._]+(\\.[a-zA-Z0-9\\-\\._]+){2,}(\\/?)([a-zA-Z0-9\\-\\.\\?\\,\\&#39;\\/\\\\\\+&amp;%\\$#_]*)?$", "exceptionStackTrace": null, "matches": ["https://evil.evil.evil/evilevil", "https://evil.evil.evil/\\", "https://evil.evil.evil/?", "https://evil.evil.evil/;", "https://evil.evil.evil//", "https://evil.evil.evil/.", "https://evil.evil.evil/-", "https://evil.evil.evil/,", "https://evil.evil.evil/+", "https://evil.evil.evil/&", "https://evil.evil.evil/%", "https://evil.evil.evil/$", "https://evil.evil.evil/#", "https://evil.evil.evil/eVil", "https://evil.evil.evil/EVIL", "https://evil.evil.evil/ev_il", "https://evil.evil.evil/ev4il", "https://evil.evil.evil/e", "https://evil.evil.evil/6", "https://evil.evil.evil/_", "https://evil.evil.evil/", "https://evil.evil.evil//evil", "https://evil.evil.evilevil", "https://evil...evil/evil", "https://evil.-.evil/evil", "https://evil.eVil.evil/evil", "https://evil.EVIL.evil/evil", "https://evil.ev_il.evil/evil", "https://evil.ev4il.evil/evil", "https://evil.e.evil/evil", "https://evil.6.evil/evil", "https://evil._.evil/evil", "https://..evil.evil/evil", "https://-.evil.evil/evil", "https://eVil.evil.evil/evil", "https://EVIL.evil.evil/evil", "https://ev_il.evil.evil/evil", "https://ev4il.evil.evil/evil", "https://e.evil.evil/evil", "https://6.evil.evil/evil", "https://_.evil.evil/evil", "http://evil.evil.evil/evil", "ftp://evil.evil.evil", "http://evil.evil.evil", "ftps://evil.evil.evil/evil", "https://evil.evil.evil/evil"], "nonMatches": ["https://evil.evil.evil/:", "https://evil.evil.evil/ev il", "https://evil.evil.evil/ ", "https://evil.evil/evil", "https://evil.\\.evil/evil", "https://evil.?.evil/evil", "https://evil.;.evil/evil", "https://evil.:.evil/evil", "https://evil./.evil/evil", "https://evil.,.evil/evil", "https://evil.+.evil/evil", "https://evil.&.evil/evil", "https://evil.%.evil/evil", "https://evil.$.evil/evil", "https://evil.#.evil/evil", "https://evil.ev il.evil/evil", "https://evil. .evil/evil", "https://evil..evil/evil", "https://\\.evil.evil/evil", "https://?.evil.evil/evil", "https://;.evil.evil/evil", "https://:.evil.evil/evil", "https:///.evil.evil/evil", "https://,.evil.evil/evil", "https://+.evil.evil/evil", "https://&.evil.evil/evil", "https://%.evil.evil/evil", "https://$.evil.evil/evil", "https://#.evil.evil/evil", "https://ev il.evil.evil/evil", "https:// .evil.evil/evil", "https://.evil.evil/evil", "httpss://evil.evil.evil/evil"]}, {"regex": "Celiac management", "exceptionStackTrace": null, "matches": ["Celiac management"], "nonMatches": []}, {"regex": "Celiac management", "exceptionStackTrace": null, "matches": ["Celiac management"], "nonMatches": []}, {"regex": "xxx@xxx.com", "exceptionStackTrace": null, "matches": ["xxx@xxxAcom", "xxx@xxx@com", "xxx@xxx0com", "xxx@xxx com", "xxx@xxxacom"], "nonMatches": []}, {"regex": "(?<=[[]).*?(?=[]])", "exceptionStackTrace": null, "matches": [], "nonMatches": ["]", "[", "eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", " ", "6", "_", "", "evil"]}, {"regex": "^([1-9]+[0-9]*|\\d*[.,]\\d)$", "exceptionStackTrace": null, "matches": ["0.0", "00,0", "100", "110", ",0", "1", "0,0", "10"], "nonMatches": ["0", "00"]}, {"regex": "cxc", "exceptionStackTrace": null, "matches": ["cxc"], "nonMatches": []}, {"regex": "^(([a-zA-Z]\\:)|(\\\\))(\\\\{1}|((\\\\{1})[^\\\\]([^/:*?<>&quot;|]*))+)$", "exceptionStackTrace": null, "matches": ["A:\\aevil\\aevil", "A:\\a\\", "A:\\aeVil", "A:\\aEVIL", "A:\\aev_il", "A:\\aev il", "A:\\aev4il", "A:\\ae", "A:\\a ", "A:\\a6", "A:\\a_", "A:\\|evil", "A:\\Aevil", "A:\\?evil", "A:\\>evil", "A:\\<evil", "A:\\;evil", "A:\\:evil", "A:\\0evil", "A:\\/evil", "A:\\*evil", "A:\\&evil", "A:\\ evil", "a:\\", "A:\\a", "\\\\", "A:\\aevil", "A:\\"], "nonMatches": ["A:\\a|", "A:\\a?", "A:\\a>", "A:\\a<", "A:\\a;", "A:\\a:", "A:\\a/", "A:\\a*", "A:\\a&", "A:\\\\evil", "A:\\\\aevil", "A:aevil", "A:\\\\", "A:"]}, {"regex": "(?n:^(?=\\d)((?&lt;month&gt;(0?[13578])|1[02]|(0?[469]|11)(?!.31)|0\n?2(?(.29)(?=.29.((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][\n26])|(16|[2468][048]|[3579][26])00))|(?!.3[01])))(?&lt;sep&gt;[-./\n])(?&lt;day&gt;0?[1-9]|[12]\\d|3[01])\\k&lt;sep&gt;(?&lt;year&gt;(1[6-9]|[2-9]\\d\n)\\d{2})(?(?=\\x20\\d)\\x20|$))?(?&lt;time&gt;((0?[1-9]|1[012])(:[0-5]\n\\d){0,2}(?i:\\x20[AP]M))|([01]\\d|2[0-3])(:[0-5]\\d){1,2})?$)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?n"}, "matches": []}, {"regex": "^(^(100{1,1}$)|^(100{1,1}\\.[0]+?$))|(^([0]*\\d{0,2}$)|^([0]*\\d{0,2}\\.(([0][1-9]{1,1}[0]*)|([1-9]{1,1}[0]*)|([0]*)|([1-9]{1,2}[0]*)))$)$", "exceptionStackTrace": null, "matches": ["00.", "00.100", "00.1", "00.110", "00.0100", "00.01", "00.00", "00.000", "0000.010", "000.010", "0.010", "0000", "000", "0", "100.00", "10.0", "10", ".", ".1", ".01", "", "00.0", "00.10", "00.010", "00", "100.0", "100"], "nonMatches": ["00.1110", "00.0110", "100.", "1000.0", "1000"]}, {"regex": "((\\d|([a-f]|[A-F])){2}:){5}(\\d|([a-f]|[A-F])){2}", "exceptionStackTrace": null, "matches": ["00:00:00:00:00:000", "00:00:00:00:00:00:00", "000:00:00:00:00:00", "aA:AA:AA:AA:AA:00", "0A:AA:AA:AA:AA:A0", "0A:AA:AA:AA:AA:a0", "0A:AA:AA:AA:AA:00", "AA:AA:AA:AA:AA:00", "aa:aa:aa:aa:aa:00", "00:00:00:00:00:AA", "00:00:00:00:00:aa", "00:00:00:00:00:00"], "nonMatches": ["GA:AA:AA:AA:AA:00", "ga:aa:aa:aa:aa:00", "00:00:00:00:00:GA", "00:00:00:00:00:ga", "00:00:00:00:00:0", "00:00:00:00:00", "0:00:00:00:00:00"]}, {"regex": "(?<!\\\\)\\[(\\\\\\[|\\\\\\]|[^\\[\\]]|(?<!\\\\)\\[.*(?<!\\\\)\\])*(?<!\\\\)\\]", "exceptionStackTrace": null, "matches": ["[[]]]", "[[\\]]", "[[[]]", "[[eVil]]", "[[EVIL]]", "[[ev_il]]", "[[ev il]]", "[[ev4il]]", "[[e]]", "[[ ]]", "[[6]]", "[[_]]", "[[]]", "[]]", "[[]", "[A]", "[0]", "[ ]", "[\\[\\[]", "[]", "[[evil]]", "[a]", "[\\]]", "[\\[]"], "nonMatches": ["[\\]"]}, {"regex": "(\\+1 )?\\d{3} \\d{3} \\d{4} ", "exceptionStackTrace": null, "matches": ["+1 0000 000 0000 ", "+1 +1 000 000 0000 ", "000 000 0000 ", "+1 000 000 0000 "], "nonMatches": ["+1 000 000 00000 ", "+1 000 000 000 ", "+1 000 0000 0000 ", "+1 000 00 0000 ", "+1 00 000 0000 "]}, {"regex": "\\+44\\s\\(0\\)\\s\\d{2}\\s\\d{4}\\s\\d{4}", "exceptionStackTrace": null, "matches": ["+44 (0) 00 0000 00000", "+44 (0) 00 0000 0000"], "nonMatches": ["+44 (0) 00 0000 000", "+44 (0) 00 00000 0000", "+44 (0) 00 000 0000", "+44 (0) 000 0000 0000", "+44 (0) 0 0000 0000"]}, {"regex": "\\+353\\(0\\)\\s\\d\\s\\d{3}\\s\\d{4}", "exceptionStackTrace": null, "matches": ["+353(0) 0 000 00000", "+353(0) 0 000 0000"], "nonMatches": ["+353(0) 0 000 000", "+353(0) 0 0000 0000", "+353(0) 0 00 0000"]}, {"regex": "\\/\\*[\\d\\D]*?\\*\\/", "exceptionStackTrace": null, "matches": ["/*/*/", "/***/", "/*eVil*/", "/*EVIL*/", "/*ev_il*/", "/*ev il*/", "/*ev4il*/", "/*e*/", "/* */", "/*6*/", "/*_*/", "/**/", "/*evil*/"], "nonMatches": []}, {"regex": "^(((\\+{1})|(0{2}))98|(0{1}))9[1-9]{1}\\d{8}\\Z$", "exceptionStackTrace": null, "matches": ["09100000000", "00989100000000", "+989100000000"], "nonMatches": ["009100000000", "9100000000", "000989100000000", "0989100000000", "+9891000000000", "+98910000000", "+9891100000000", "+98900000000", "+989000000000", "++989100000000", "989100000000"]}, {"regex": "[v,V,(\\\\/)](\\W|)[i,I,1,l,L](\\W|)[a,A,@,(\\/\\\\)](\\W|)[g,G](\\W|)[r,R](\\W|)[a,A,@,(\\/\\\\))]", "exceptionStackTrace": null, "matches": [");L;);G;R;a", ");L;);G;R;\\", ");L;);G;R;A", ");L;);G;R;@", ");L;);G;R;/", ");L;);G;R;,", ");L;);G;R;(", ");L;);G;R)", ");L;);G;Ra)", ");L;);G;R\\)", ");L;);G;RA)", ");L;);G;R@)", ");L;);G;R/)", ");L;);G;R,)", ");L;);G;R))", ");L;);G;R()", ");L;);G;R )", ");L;);G;r;)", ");L;);G;,;)", ");L;);GR;)", ");L;);G\\R;)", ");L;);G@R;)", ");L;);G/R;)", ");L;);G,R;)", ");L;);G)R;)", ");L;);G(R;)", ");L;);G R;)", ");L;);g;R;)", ");L;);,;R;)", ");L;)G;R;)", ");L;)\\G;R;)", ");L;)@G;R;)", ");L;)/G;R;)", ");L;),G;R;)", ");L;))G;R;)", ");L;)(G;R;)", ");L;) G;R;)", ");L;a;G;R;)", ");L;\\;G;R;)", ");L;A;G;R;)", ");L;@;G;R;)", ");L;/;G;R;)", ");L;,;G;R;)", ");L;(;G;R;)", ");L);G;R;)", ");L\\);G;R;)", ");L@);G;R;)", ");L/);G;R;)", ");L,);G;R;)", ");L));G;R;)", ");L();G;R;)", ");L );G;R;)", ");l;);G;R;)", ");i;);G;R;)", ");I;);G;R;)", ");1;);G;R;)", ");,;);G;R;)", ")L;);G;R;)", ")\\L;);G;R;)", ")@L;);G;R;)", ")/L;);G;R;)", "),L;);G;R;)", "))L;);G;R;)", ")(L;);G;R;)", ") L;);G;R;)", "v;L;);G;R;)", "\\;L;);G;R;)", "V;L;);G;R;)", "/;L;);G;R;)", ",;L;);G;R;)", "(;L;);G;R;)", ")L)GR)", ");L;);G;R;)"], "nonMatches": [");L;);G;R;b", ");L;);G;R;B", ");L;);G;R;;)", ");L;);G;R_)", ");L;);G;R0)", ");L;);G;a;)", ");L;);G;A;)", ");L;);G;;R;)", ");L;);GaR;)", ");L;);G_R;)", ");L;);GAR;)", ");L;);G0R;)", ");L;);a;R;)", ");L;);A;R;)", ");L;);;G;R;)", ");L;)aG;R;)", ");L;)_G;R;)", ");L;)AG;R;)", ");L;)0G;R;)", ");L;b;G;R;)", ");L;B;G;R;)", ");L;;);G;R;)", ");La);G;R;)", ");L_);G;R;)", ");LA);G;R;)", ");L0);G;R;)", ");a;);G;R;)", ");A;);G;R;)", ");0;);G;R;)", ");;L;);G;R;)", ")aL;);G;R;)", ")_L;);G;R;)", ")AL;);G;R;)", ")0L;);G;R;)", "a;L;);G;R;)", "A;L;);G;R;)"]}, {"regex": "^0$|^[1-9][0-9]*$|^[1-9][0-9]{0,2}(,[0-9]{3})$", "exceptionStackTrace": null, "matches": ["100,000", "100", "1,000", "1", "10,000", "10", "0"], "nonMatches": ["10,0000", "10,00", "1000,000", "00,000", "00"]}, {"regex": "^(429496729[0-6]|42949672[0-8]\\d|4294967[01]\\d{2}|429496[0-6]\\d{3}|42949[0-5]\\d{4}|4294[0-8]\\d{5}|429[0-3]\\d{6}|42[0-8]\\d{7}|4[01]\\d{8}|[1-3]\\d{9}|[1-9]\\d{8}|[1-9]\\d{7}|[1-9]\\d{6}|[1-9]\\d{5}|[1-9]\\d{4}|[1-9]\\d{3}|[1-9]\\d{2}|[1-9]\\d|\\d)$", "exceptionStackTrace": null, "matches": ["410000000", "4000000000", "420000000", "429000000", "429400000", "429490000", "429496000", "429496710", "4294967000", "0", "10", "100", "1000", "10000", "100000", "1000000", "10000000", "100000000", "1000000000", "4100000000", "4200000000", "4290000000", "4294000000", "4294900000", "4294960000", "4294967100", "4294967200", "4294967290"], "nonMatches": ["00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "10000000000", "0000000000", "41000000000", "42000000000", "42900000000", "42940000000", "42949000000", "42949600000", "42949671000", "4294967297"]}, {"regex": "Gmail Password Recovery     ", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery     "], "nonMatches": []}, {"regex": "Gmail Password Recovery     ", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery     "], "nonMatches": []}, {"regex": "Gmail Password Recovery     ", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery     "], "nonMatches": []}, {"regex": "Gmail Password Recovery     ", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery     "], "nonMatches": []}, {"regex": "Gmail Password Recovery     ", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery     "], "nonMatches": []}, {"regex": "Gmail Password Recovery ", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery "], "nonMatches": []}, {"regex": "Gmail Password Recovery ", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery "], "nonMatches": []}, {"regex": "Gmail Password Recovery ", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery "], "nonMatches": []}, {"regex": "Gmail Password Recovery ", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery "], "nonMatches": []}, {"regex": "Gmail Password Recovery ", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery "], "nonMatches": []}, {"regex": "Gmail Password Recovery ", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery "], "nonMatches": []}, {"regex": "Gmail Password Recovery ", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery "], "nonMatches": []}, {"regex": "Gmail Password Recovery ", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery "], "nonMatches": []}, {"regex": "Gmail Password Recovery ", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery "], "nonMatches": []}, {"regex": "Gmail Password Recovery ", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery "], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "<\\s*[\\/]?(?<tag>[a-z:_][-a-z0-9._:]*)(\\s+(?<attributes>[a-z:_]*[-a-z0-9._:]*[^\\s=><]*)\\s*=?\\s*(&quot;[^&quot;]*&quot;|&#39;[^&#39;]*&#39;|&quot;|&#39;)*[^\\s><]*)*\\s*[\\/]?>?", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<t"}, "matches": []}, {"regex": "(?<=\\r\\n)\\[.*\\]", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\r"}, "matches": [], "nonMatches": []}, {"regex": "(?<=\\r\\n)\\[.*\\]", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\r"}, "matches": [], "nonMatches": []}, {"regex": "(?<!\\[)\\[(?!\\[).*(?<!\\])\\](?!\\])", "exceptionStackTrace": null, "matches": ["[eVil]", "[EVIL]", "[ev_il]", "[ev il]", "[ev4il]", "[e]", "[ ]", "[6]", "[_]", "[]", "[evil]"], "nonMatches": ["[]]", "[[]"]}, {"regex": "<a.*?href=[&quot;&quot;&#39;](?<uri>(?<path>.*?)file:(?<file>.*?))[&quot;&quot;&#39;].*?>(?<description>.*?)</a>", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<u"}, "matches": []}, {"regex": "(?&lt;HTML&gt;&lt;a[^&gt;]*href\\s*=\\s*[\\&quot;\\&#39;]?(?&lt;HRef&gt;[^&quot;&#39;&gt;\\s]*)[\\&quot;\\&#39;]?[^&gt;]*&gt;(?&lt;Title&gt;[^&lt;]+|.*?)?&lt;/a\\s*&gt;)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?&"}, "matches": []}, {"regex": "<script.*/*>|</script>|<[a-zA-Z][^>]*=[&#39;&quot;]+javascript:\\w+.*[&#39;&quot;]+>|<\\w+[^>]*\\son\\w+=.*[ /]*>", "exceptionStackTrace": null, "matches": ["<evilevil onevil=evil//>", "<evilevil onevil=evil>", "<evilevil onevil=evil >", "<evilevil onevil=>/>", "<evilevil onevil==/>", "<evilevil onevil=</>", "<evilevil onevil=;/>", "<evilevil onevil=:/>", "<evilevil onevil=//>", "<evilevil onevil=&/>", "<evilevil onevil=#/>", "<evilevil onevil=eVil/>", "<evilevil onevil=EVIL/>", "<evilevil onevil=ev_il/>", "<evilevil onevil=ev il/>", "<evilevil onevil=ev4il/>", "<evilevil onevil=e/>", "<evilevil onevil= />", "<evilevil onevil=6/>", "<evilevil onevil=_/>", "<evilevil onevil=/>", "<evilevil oneVil=evil/>", "<evilevil onEVIL=evil/>", "<evilevil onev_il=evil/>", "<evilevil onev4il=evil/>", "<evilevil one=evil/>", "<evilevil on6=evil/>", "<evilevil on_=evil/>", "<evil= onevil=evil/>", "<evil< onevil=evil/>", "<evil; onevil=evil/>", "<evil: onevil=evil/>", "<evil/ onevil=evil/>", "<evil& onevil=evil/>", "<evil# onevil=evil/>", "<evileVil onevil=evil/>", "<evilEVIL onevil=evil/>", "<evilev_il onevil=evil/>", "<evilev il onevil=evil/>", "<evilev4il onevil=evil/>", "<evile onevil=evil/>", "<evil  onevil=evil/>", "<evil6 onevil=evil/>", "<evil_ onevil=evil/>", "<eVilevil onevil=evil/>", "<EVILevil onevil=evil/>", "<ev_ilevil onevil=evil/>", "<ev ilevil onevil=evil/>", "<ev4ilevil onevil=evil/>", "<eevil onevil=evil/>", "<6evil onevil=evil/>", "<_evil onevil=evil/>", "<evil onevil=evil/>", "<Aevil=;javascript:evilevil;;>", "<Aevil=;javascript:evilevilu>", "<Aevil=;javascript:evilevilt>", "<Aevil=;javascript:evilevilq>", "<Aevil=;javascript:evilevilo>", "<Aevil=;javascript:evilevil9>", "<Aevil=;javascript:evilevil3>", "<Aevil=;javascript:evilevil&>", "<Aevil=;javascript:evilevil#>", "<Aevil=;javascript:evil>;>", "<Aevil=;javascript:evil=;>", "<Aevil=;javascript:evil<;>", "<Aevil=;javascript:evil;;>", "<Aevil=;javascript:evil:;>", "<Aevil=;javascript:evil/;>", "<Aevil=;javascript:evil&;>", "<Aevil=;javascript:evil#;>", "<Aevil=;javascript:evileVil;>", "<Aevil=;javascript:evilEVIL;>", "<Aevil=;javascript:evilev_il;>", "<Aevil=;javascript:evilev il;>", "<Aevil=;javascript:evilev4il;>", "<Aevil=;javascript:evile;>", "<Aevil=;javascript:evil ;>", "<Aevil=;javascript:evil6;>", "<Aevil=;javascript:evil_;>", "<Aevil=;javascript:eVilevil;>", "<Aevil=;javascript:EVILevil;>", "<Aevil=;javascript:ev_ilevil;>", "<Aevil=;javascript:ev ilevil;>", "<Aevil=;javascript:ev4ilevil;>", "<Aevil=;javascript:eevil;>", "<Aevil=;javascript:6evil;>", "<Aevil=;javascript:_evil;>", "<Aevil=;javascript:evil;>", "<Aevil=;;javascript:evilevil;>", "<Aevil=ujavascript:evilevil;>", "<Aevil=tjavascript:evilevil;>", "<Aevil=qjavascript:evilevil;>", "<Aevil=ojavascript:evilevil;>", "<Aevil=9javascript:evilevil;>", "<Aevil=3javascript:evilevil;>", "<Aevil=&javascript:evilevil;>", "<Aevil=#javascript:evilevil;>", "<A==;javascript:evilevil;>", "<A<=;javascript:evilevil;>", "<A;=;javascript:evilevil;>", "<A:=;javascript:evilevil;>", "<A/=;javascript:evilevil;>", "<A&=;javascript:evilevil;>", "<A#=;javascript:evilevil;>", "<AeVil=;javascript:evilevil;>", "<AEVIL=;javascript:evilevil;>", "<Aev_il=;javascript:evilevil;>", "<Aev il=;javascript:evilevil;>", "<Aev4il=;javascript:evilevil;>", "<Ae=;javascript:evilevil;>", "<A =;javascript:evilevil;>", "<A6=;javascript:evilevil;>", "<A_=;javascript:evilevil;>", "<A=;javascript:evilevil;>", "<aevil=;javascript:evilevil;>", "<scriptevil//>", "<scriptevil>", "<script>/>", "<script=/>", "<script</>", "<script;/>", "<script:/>", "<script//>", "<script&/>", "<script#/>", "<scripteVil/>", "<scriptEVIL/>", "<scriptev_il/>", "<scriptev il/>", "<scriptev4il/>", "<scripte/>", "<script />", "<script6/>", "<script_/>", "<script/>", "<evil onevil=>", "<A=;javascript:evil;>", "<script>", "<evilevil onevil=evil/>", "<Aevil=;javascript:evilevil;>", "</script>", "<scriptevil/>"], "nonMatches": ["<evilevil onev il=evil/>", "<evilevil on =evil/>", "<evilevil on=evil/>", "<evil> onevil=evil/>", "< evil onevil=evil/>", "<Aevil=;javascript:evilevil>", "<Aevil=;javascript:evilevila>", "<Aevil=;javascript:evilevil0>", "<Aevil=;javascript: evil;>", "<Aevil=javascript:evilevil;>", "<Aevil=ajavascript:evilevil;>", "<Aevil=0javascript:evilevil;>", "<A>=;javascript:evilevil;>"]}, {"regex": "<\\?xml.*</note>", "exceptionStackTrace": null, "matches": ["<?xml?</note>", "<?xml></note>", "<?xml<</note>", "<?xml/</note>", "<?xmleVil</note>", "<?xmlEVIL</note>", "<?xmlev_il</note>", "<?xmlev il</note>", "<?xmlev4il</note>", "<?xmle</note>", "<?xml </note>", "<?xml6</note>", "<?xml_</note>", "<?xml</note>", "<?xmlevil</note>"], "nonMatches": []}, {"regex": "^(b|B)(f|F)(p|P)(o|O)(\\s*||\\s*C(/|)O\\s*)[0-9]{1,4}", "exceptionStackTrace": null, "matches": ["bfpo C/O  0", "bfpo C/O0", "bfpo CO 0", "bfpo  C/O 0", "bfpoC/O 0", "bfpo 00000", "bfpo 0000", "bfpo  0", "Bfpo0", "bFpo0", "bfPo0", "bfpO0", "bfpo0", "Bfpo 0", "bFpo 0", "bfPo 0", "bfpO 0", "bfpo C/O 0", "bfpo 0"], "nonMatches": ["bfpo C/O  C/O 0", "bfpo C//O 0", "bfpo "]}, {"regex": "^(b|B)(f|F)(p|P)(o|O)(\\s|\\sC/O\\s)[0-9]{1,4}", "exceptionStackTrace": null, "matches": ["bfpo 00000", "bfpo 0000", "Bfpo 0", "bFpo 0", "bfPo 0", "bfpO 0", "bfpo C/O 0", "bfpo 0"], "nonMatches": ["bfpo "]}, {"regex": "^(([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5}){1,25})+(\\s*[;.]\\s*(([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5}){1,25})+)*$", "exceptionStackTrace": null, "matches": ["evil@evil.AA . evil@evil.AA . evil@evil.AA", "evil@evil.AA . evil@evil.AAevil@evil.AA", "evil@evil.AA . evil@evil.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "evil@evil.AA . evil@evil.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "evil@evil.AA . evil@evil.AAAAAA", "evil@evil.AA . evil@evil.AAAAA", "evil@evil.AA . evil@evil.aA", "evil@evil.AA . evil@..AA", "evil@evil.AA . evil@-.AA", "evil@evil.AA . evil@eVil.AA", "evil@evil.AA . evil@EVIL.AA", "evil@evil.AA . evil@ev_il.AA", "evil@evil.AA . evil@ev4il.AA", "evil@evil.AA . evil@e.AA", "evil@evil.AA . evil@6.AA", "evil@evil.AA . evil@_.AA", "evil@evil.AA . .@evil.AA", "evil@evil.AA . -@evil.AA", "evil@evil.AA . eVil@evil.AA", "evil@evil.AA . EVIL@evil.AA", "evil@evil.AA . ev_il@evil.AA", "evil@evil.AA . ev4il@evil.AA", "evil@evil.AA . e@evil.AA", "evil@evil.AA . 6@evil.AA", "evil@evil.AA . _@evil.AA", "evil@evil.AA .  evil@evil.AA", "evil@evil.AA .evil@evil.AA", "evil@evil.AA ; evil@evil.AA", "evil@evil.AA  . evil@evil.AA", "evil@evil.AA. evil@evil.AA", "evil@evil.AAevil@evil.AA . evil@evil.AA", "evil@evil.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA . evil@evil.AA", "evil@evil.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA . evil@evil.AA", "evil@evil.AAAAAA . evil@evil.AA", "evil@evil.AAAAA . evil@evil.AA", "evil@evil.aA . evil@evil.AA", "evil@..AA . evil@evil.AA", "evil@-.AA . evil@evil.AA", "evil@eVil.AA . evil@evil.AA", "evil@EVIL.AA . evil@evil.AA", "evil@ev_il.AA . evil@evil.AA", "evil@ev4il.AA . evil@evil.AA", "evil@e.AA . evil@evil.AA", "evil@6.AA . evil@evil.AA", "evil@_.AA . evil@evil.AA", ".@evil.AA . evil@evil.AA", "-@evil.AA . evil@evil.AA", "eVil@evil.AA . evil@evil.AA", "EVIL@evil.AA . evil@evil.AA", "ev_il@evil.AA . evil@evil.AA", "ev4il@evil.AA . evil@evil.AA", "e@evil.AA . evil@evil.AA", "6@evil.AA . evil@evil.AA", "_@evil.AA . evil@evil.AA", "evil@evil.AA", "evil@evil.AA . evil@evil.AA"], "nonMatches": ["evil@evil.AA . ", "evil@evil.AA . evil@evil.", "evil@evil.AA . evil@evil.A", "evil@evil.AA . evil@@.AA", "evil@evil.AA . evil@;.AA", "evil@evil.AA . evil@ev il.AA", "evil@evil.AA . evil@ .AA", "evil@evil.AA . evil@.AA", "evil@evil.AA . @@evil.AA", "evil@evil.AA . ;@evil.AA", "evil@evil.AA . ev il@evil.AA", "evil@evil.AA .  @evil.AA", "evil@evil.AA . @evil.AA", " . evil@evil.AA", "evil@evil. . evil@evil.AA", "evil@evil.A . evil@evil.AA", "evil@@.AA . evil@evil.AA", "evil@;.AA . evil@evil.AA", "evil@ev il.AA . evil@evil.AA", "evil@ .AA . evil@evil.AA", "evil@.AA . evil@evil.AA", "@@evil.AA . evil@evil.AA", ";@evil.AA . evil@evil.AA", "ev il@evil.AA . evil@evil.AA", " @evil.AA . evil@evil.AA", "@evil.AA . evil@evil.AA"]}, {"regex": "([0-8]?\\d[0-5]?\\d[0-5]?\\d|900000)[NS]([0-1]?[0-7]?\\d[0-5]?\\d[0-5]?\\d|1800000)[EW]\\d{3}", "exceptionStackTrace": null, "matches": ["000000S0000000W0000", "000000S0000000E000", "000000S000000W000", "000000N0000000W000", "000060S0000000W000", "006000S0000000W000", "0000000S0000000W000", "00000S0000000W000", "900000S000W000", "000S1800000W000", "000S000W000", "900000S0000000W000", "000000S1800000W000", "000000S0000000W000"], "nonMatches": ["000000S0000000W00", "000000S0000000A000", "000000S0000060W000", "000000S0006000W000", "000000S0800000W000", "000000S00000000W000", "000000S2000000W000", "000000A0000000W000"]}, {"regex": "([0-8]?\\d(&#176;|\\s)[0-5]?\\d(&#39;|\\s)[0-5]?\\d(\\.\\d{1,6})?&quot;?|90(&#176;|\\s)0?0(&#39;|\\s)0?0&quot;?)\\s{0,}[NnSs]\\s{1,}([0-1]?[0-7]?\\d(&#176;|\\s)[0-5]?\\d(&#39;|\\s)[0-5]?\\d(\\.\\d{1,6})?&quot;?|180(&#176;|\\s)0?0(&#39;|\\s)0?0&quot;?)\\s{0,}[EeOoWw]", "exceptionStackTrace": null, "matches": ["90&#176;00&#39;00&quot s 000&#176;00&#39;00.0&quot; w", "90&#176;00&#39;0&quot; s 000&#176;00&#39;00.0&quot; w", "90&#176;0&#39;00&quot; s 000&#176;00&#39;00.0&quot; w", "00&#176;00&#39;00.0&quot; s 180&#176;00&#39;00&quot w", "00&#176;00&#39;00.0&quot; s 180&#176;00&#39;0&quot; w", "00&#176;00&#39;00.0&quot; s 180&#176;0&#39;00&quot; w", "00&#176;00&#39;00.0&quot; s 000&#176;00&#39;00.0&quot; o", "00&#176;00&#39;00.0&quot; s 000&#176;00&#39;00.0&quot; e", "00&#176;00&#39;00.0&quot; s 000&#176;00&#39;00.0&quot; W", "00&#176;00&#39;00.0&quot; s 000&#176;00&#39;00.0&quot; O", "00&#176;00&#39;00.0&quot; s 000&#176;00&#39;00.0&quot; E", "00&#176;00&#39;00.0&quot; s 000&#176;00&#39;00.0&quot;  w", "00&#176;00&#39;00.0&quot; s 000&#176;00&#39;00.0&quot;w", "00&#176;00&#39;00.0&quot; s 000&#176;00&#39;00.0&quot w", "00&#176;00&#39;00.0&quot; s 000&#176;00&#39;00&quot; w", "00&#176;00&#39;00.0&quot; s 000&#176;00&#39;00.000000&quot; w", "00&#176;00&#39;00.0&quot; s 000&#176;00&#39;0.0&quot; w", "00&#176;00&#39;00.0&quot; s 000&#176;0&#39;00.0&quot; w", "00&#176;00&#39;00.0&quot; s 00&#176;00&#39;00.0&quot; w", "00&#176;00&#39;00.0&quot; s  000&#176;00&#39;00.0&quot; w", "00&#176;00&#39;00.0&quot; n 000&#176;00&#39;00.0&quot; w", "00&#176;00&#39;00.0&quot; S 000&#176;00&#39;00.0&quot; w", "00&#176;00&#39;00.0&quot; N 000&#176;00&#39;00.0&quot; w", "00&#176;00&#39;00.0&quot;  s 000&#176;00&#39;00.0&quot; w", "00&#176;00&#39;00.0&quot;s 000&#176;00&#39;00.0&quot; w", "00&#176;00&#39;00.0&quot s 000&#176;00&#39;00.0&quot; w", "00&#176;00&#39;00&quot; s 000&#176;00&#39;00.0&quot; w", "00&#176;00&#39;00.000000&quot; s 000&#176;00&#39;00.0&quot; w", "00&#176;00&#39;0.0&quot; s 000&#176;00&#39;00.0&quot; w", "00&#176;0&#39;00.0&quot; s 000&#176;00&#39;00.0&quot; w", "000&#176;00&#39;00.0&quot; s 000&#176;00&#39;00.0&quot; w", "0&#176;00&#39;00.0&quot; s 000&#176;00&#39;00.0&quot; w", "90&#176;00&#39;00.0&quot; s 000&#176;00&#39;00.0&quot; w", "90 0&#39;0&quots 0&#176;0&#39;0&quotw", "90&#176;0 0&quots 0&#176;0&#39;0&quotw", "90&#176;0&#39;0&quots 0&#176;0&#39;0&quotw", "0 0&#39;0&quots 0&#176;0&#39;0&quotw", "0&#176;0 0&quots 0&#176;0&#39;0&quotw", "0&#176;0&#39;0&quots 180 0&#39;0&quotw", "0&#176;0&#39;0&quots 180&#176;0 0&quotw", "0&#176;0&#39;0&quots 180&#176;0&#39;0&quotw", "0&#176;0&#39;0&quots 0 0&#39;0&quotw", "0&#176;0&#39;0&quots 0&#176;0 0&quotw", "0&#176;0&#39;0&quots 0&#176;0&#39;0&quotw", "90 00&#39;00&quot; s 000&#176;00&#39;00.0&quot; w", "90&#176;00 00&quot; s 000&#176;00&#39;00.0&quot; w", "90&#176;00&#39;00&quot; s 000&#176;00&#39;00.0&quot; w", "00 00&#39;00.0&quot; s 000&#176;00&#39;00.0&quot; w", "00&#176;00 00.0&quot; s 000&#176;00&#39;00.0&quot; w", "00&#176;00&#39;00.0&quot; s 180 00&#39;00&quot; w", "00&#176;00&#39;00.0&quot; s 180&#176;00 00&quot; w", "00&#176;00&#39;00.0&quot; s 180&#176;00&#39;00&quot; w", "00&#176;00&#39;00.0&quot; s 000 00&#39;00.0&quot; w", "00&#176;00&#39;00.0&quot; s 000&#176;00 00.0&quot; w", "00&#176;00&#39;00.0&quot; s 000&#176;00&#39;00.0&quot; w"], "nonMatches": ["90&#176;00&#39;00&quot;; s 000&#176;00&#39;00.0&quot; w", "90&#176;00&#39;000&quot; s 000&#176;00&#39;00.0&quot; w", "90&#176;000&#39;00&quot; s 000&#176;00&#39;00.0&quot; w", "00&#176;00&#39;00.0&quot; s 180&#176;00&#39;00&quot;; w", "00&#176;00&#39;00.0&quot; s 180&#176;00&#39;000&quot; w", "00&#176;00&#39;00.0&quot; s 180&#176;000&#39;00&quot; w", "00&#176;00&#39;00.0&quot; s 000&#176;00&#39;00.0&quot; a", "00&#176;00&#39;00.0&quot; s 000&#176;00&#39;00.0&quot; A", "00&#176;00&#39;00.0&quot; s 000&#176;00&#39;00.0&quot;; w", "00&#176;00&#39;00.0&quot; s 000&#176;00&#39;00.0.0&quot; w", "00&#176;00&#39;00.0&quot; s 000&#176;00&#39;00.0000000&quot; w", "00&#176;00&#39;00.0&quot; s 000&#176;00&#39;00.&quot; w", "00&#176;00&#39;00.0&quot; s 000&#176;00&#39;000.0&quot; w", "00&#176;00&#39;00.0&quot; s 000&#176;00&#39;60.0&quot; w", "00&#176;00&#39;00.0&quot; s 000&#176;000&#39;00.0&quot; w", "00&#176;00&#39;00.0&quot; s 000&#176;60&#39;00.0&quot; w", "00&#176;00&#39;00.0&quot; s 080&#176;00&#39;00.0&quot; w", "00&#176;00&#39;00.0&quot; s 0000&#176;00&#39;00.0&quot; w", "00&#176;00&#39;00.0&quot; s 200&#176;00&#39;00.0&quot; w", "00&#176;00&#39;00.0&quot; s000&#176;00&#39;00.0&quot; w", "00&#176;00&#39;00.0&quot; a 000&#176;00&#39;00.0&quot; w", "00&#176;00&#39;00.0&quot; A 000&#176;00&#39;00.0&quot; w", "00&#176;00&#39;00.0&quot;; s 000&#176;00&#39;00.0&quot; w", "00&#176;00&#39;00.0.0&quot; s 000&#176;00&#39;00.0&quot; w", "00&#176;00&#39;00.0000000&quot; s 000&#176;00&#39;00.0&quot; w", "00&#176;00&#39;00.&quot; s 000&#176;00&#39;00.0&quot; w", "00&#176;00&#39;000.0&quot; s 000&#176;00&#39;00.0&quot; w", "00&#176;00&#39;60.0&quot; s 000&#176;00&#39;00.0&quot; w", "00&#176;000&#39;00.0&quot; s 000&#176;00&#39;00.0&quot; w", "00&#176;60&#39;00.0&quot; s 000&#176;00&#39;00.0&quot; w"]}, {"regex": "^[A-Za-z]{1,2}[0-9A-Za-z]{1,2}[ ]?[0-9]{0,1}[A-Za-z]{2}$", "exceptionStackTrace": null, "matches": ["aa 0Aa", "aa aa", "aa0aa", "aA 0aa", "a0 0aa", "aaaa 0aa", "aaa 0aa", "Aa 0aa", "aaaa", "aa 0aa"], "nonMatches": ["aa 0aaa", "aa 0a", "aa 00aa", "aa  0aa", "a 0aa"]}, {"regex": "^[A-Za-z]{2}[0-9]{6}[A-Za-z]{1}$", "exceptionStackTrace": null, "matches": ["aa000000A", "Aa000000a", "aa000000a"], "nonMatches": ["aa000000aa", "aa000000", "aa0000000a", "aa00000a", "aaa000000a", "a000000a"]}, {"regex": "^(\\d{4},?)+$", "exceptionStackTrace": null, "matches": ["0000,0000,", "0000", "0000,"], "nonMatches": ["", "0000,,", "00000,", "000,"]}, {"regex": "^[\\+\\-]?[0-9]+([\\,\\.][0-9]+)?$", "exceptionStackTrace": null, "matches": ["-0", "-0.00", "-0,0", "-00.0", "0.0", "+0.0", "0", "-0.0"], "nonMatches": ["-0.0.0", "-0.", "-.0", "--0.0"]}, {"regex": "[0-9]{4}\\s*[a-zA-Z]{2}", "exceptionStackTrace": null, "matches": ["0000 AAA", "0000 aA", "0000  AA", "00000 AA", "0000AA", "0000 AA"], "nonMatches": ["0000 A", "000 AA"]}, {"regex": "^([A-Z]{1,}[a-z]{1,}[A-Z]{0,}[a-z]{0,}[A-Z]{0,}[a-z]{0,}[A-Z]{0,}[a-z]{0,}[A-Z]{0,}[a-z]{0,}[A-Z]{0,}[a-z]{0,}[A-Z]{0,}[a-z]{0,}[A-Z]{0,}[a-z]{0,}[A-Z]{0,}[a-z]{0,}[A-Z]{0,}[a-z]{0,}[A-Z]{0,}[a-z]{0,}[A-Z]{0,}[a-z]{0,})$", "exceptionStackTrace": null, "matches": ["EVILevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil"], "nonMatches": ["evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevileVil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilEVIL", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilev_il", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilev il", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilev4il", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevile", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil ", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil6", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil_", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevileVilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilEVILevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilev_ilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilev ilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilev4ilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevileevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil evil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil6evil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil_evil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevileVilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilEVILevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilev_ilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilev ilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilev4ilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevileevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil evilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil6evilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil_evilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevileVilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilEVILevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilev_ilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilev ilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilev4ilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevileevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil evilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil6evilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil_evilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevileVilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilEVILevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilev_ilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilev ilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilev4ilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevileevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil evilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil6evilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil_evilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevileVilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilEVILevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilev_ilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilev ilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilev4ilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevileevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil evilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil6evilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil_evilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevileVilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilEVILevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilev_ilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilev ilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilev4ilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevileevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil evilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil6evilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil_evilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevileVilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilEVILevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilev_ilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilev ilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilev4ilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevileevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil evilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil6evilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil_evilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevileVilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilEVILevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilev_ilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilev ilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilev4ilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevileevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevil evilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevil6evilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevil_evilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevileVilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilEVILevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilev_ilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilev ilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilev4ilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevileevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevil evilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevil6evilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevil_evilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevileVilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilEVILevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilev_ilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilev ilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilev4ilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevileevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevil evilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevil6evilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevil_evilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevileVilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilEVILevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilev_ilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilev ilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilev4ilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevileevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevil evilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevil6evilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevil_evilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevileVilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilEVILevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilev_ilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilev ilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilev4ilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevileevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevil evilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevil6evilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevil_evilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevileVilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilEVILevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilev_ilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilev ilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilev4ilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevileevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevil evilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevil6evilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevil_evilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevileVilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilEVILevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilev_ilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilev ilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilev4ilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevileevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevil evilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevil6evilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevil_evilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevileVilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilEVILevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilev_ilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilev ilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilev4ilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevileevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevil evilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevil6evilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevil_evilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevileVilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilEVILevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilev_ilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilev ilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilev4ilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevileevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevil evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevil6evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevil_evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevileVilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilEVILevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilev_ilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilev ilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilev4ilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevileevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevil evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevil6evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevil_evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevileVilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilEVILevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilev_ilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilev ilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilev4ilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevileevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevil evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevil6evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevil_evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevileVilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilEVILevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilev_ilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilev ilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilev4ilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevileevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevil evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevil6evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevil_evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevileVilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilEVILevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilev_ilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilev ilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilev4ilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevileevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevil evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevil6evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevil_evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevileVilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilEVILevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilev_ilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilev ilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilev4ilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevileevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevil evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevil6evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevil_evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evileVilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilEVILevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilev_ilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilev ilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilev4ilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evileevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evil evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evil6evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evil_evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "eVilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "ev_ilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "ev ilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "ev4ilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "eevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", " evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "6evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "_evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil", "evilevil", "evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil"]}, {"regex": "^[+-]?([0-9]*\\.?[0-9]+|[0-9]+\\.?[0-9]*)([eE][+-]?[0-9]+)?$", "exceptionStackTrace": null, "matches": ["-0.0", "-0.0E-00", "-0.0E0", "-0.0E+0", "-0.0e-0", "-0.00E-0", "-0.E-0", "-00E-0", "-00.0E-0", "-.0E-0", "0.0E-0", "+0.0E-0", "0", "-0.0E-0"], "nonMatches": ["-0.0E-0E-0", "-0.0E-", "-0.0E--0", "-0.0a-0", "-0.0A-0", "-0..0E-0", "--0.0E-0"]}, {"regex": "^[^\\~\\`\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\-\\_\\=\\+\\\\\\|\\[\\]\\{\\}\\;\\:\\&quot;\\&#39;\\,\\<\\./\\>\\?\\s](([a-zA-Z0-9]*[-_\\./]?[a-zA-Z0-9]{1,})*)$", "exceptionStackTrace": null, "matches": ["aevil/evilevil/evil", "aevil/eVil", "aevil/EVIL", "aevil/ev_il", "aevil/ev4il", "aevil/e", "aevil/6", "aevilevil", "aevil_evil", "aevil.evil", "aevil-evil", "aeVil/evil", "aEVIL/evil", "aev_il/evil", "aev4il/evil", "ae/evil", "a6/evil", "a/evil", "Aevil/evil", "0evil/evil", "a", "aevil/evil"], "nonMatches": ["aevil/ev il", "aevil/ ", "aevil/_", "aevil/", "aevil//evil", "aev il/evil", "a /evil", "a_/evil", "~evil/evil", "}evil/evil", "|evil/evil", "{evil/evil", "uevil/evil", "tevil/evil", "qevil/evil", "oevil/evil", "`evil/evil", "_evil/evil", "^evil/evil", "]evil/evil", "\\evil/evil", "[evil/evil", "@evil/evil", "?evil/evil", ">evil/evil", "=evil/evil", "<evil/evil", ";evil/evil", ":evil/evil", "9evil/evil", "3evil/evil", "/evil/evil", ".evil/evil", "-evil/evil", ",evil/evil", "+evil/evil", "*evil/evil", ")evil/evil", "(evil/evil", "&evil/evil", "%evil/evil", "$evil/evil", "#evil/evil", "!evil/evil", " evil/evil"]}, {"regex": "(&#39;(?:(?:\\\\&#39;|[^&#39;])*)&#39;|NULL)", "exceptionStackTrace": null, "matches": ["&#39;\\&#39;", "&#39;A&#39;", "&#39;0&#39;", "&#39; &#39;", "&#39;\\&#39;\\&#39;&#39;", "&#39;&#39;", "NULL", "&#39;a&#39;", "&#39;\\&#39;&#39;"], "nonMatches": ["&#39;;&#39;", "&#39;9&#39;", "&#39;3&#39;", "&#39;&&#39;", "&#39;#&#39;"]}, {"regex": "(\\(0\\d\\d\\)\\s\\d{3}[\\s-]+\\d{4})|(0\\d\\d[\\s-]+\\d{3}[\\s-]+\\d{4})|(0\\d{9})|(\\+\\d\\d\\s?[\\(\\s]\\d\\d[\\)\\s]\\s?\\d{3}[\\s-]?\\d{4})", "exceptionStackTrace": null, "matches": ["+00 (00) 000-00000", "+00 (00) 0000000", "+00 (00) 000 0000", "+00 (00)000-0000", "+00 (00  000-0000", "+00  00) 000-0000", "+00(00) 000-0000", "00000000000", "000-000-00000", "000-000--0000", "000-000 0000", "000--000-0000", "000 000-0000", "(000) 000-00000", "(000) 000--0000", "(000) 000 0000", "+00(00)0000000", "+00 (00) 000-0000", "0000000000", "000-000-0000", "(000) 000-0000"], "nonMatches": ["+00 (00) 000-000", "+00 (00) 000--0000", "+00 (00) 0000-0000", "+00 (00) 00-0000", "+00 (00)  000-0000", "+00  (00) 000-0000", "000000000", "000-000-000", "000-0000000", "000-0000-0000", "000-00-0000", "000000-0000", "(000) 000-000", "(000) 0000000", "(000) 0000-0000", "(000) 00-0000"]}, {"regex": "<(\\s*/?\\s*)\\w+?(\\s*(([\\w-]+=&quot;[^&quot;]*?&quot;)|([\\w-]+=&#39;[^&#39;]*?&#39;)|([\\w-]+=[^&#39;&quot;<>\\s]+)))*(\\s*/?\\s*)>", "exceptionStackTrace": null, "matches": ["< / evil evil== / >", "< / evil evil=/ / >", "< / evil evil=- / >", "< / evil evil=eVil / >", "< / evil evil=EVIL / >", "< / evil evil=ev_il / >", "< / evil evil=ev4il / >", "< / evil evil=e / >", "< / evil evil=6 / >", "< / evil evil=_ / >", "< / evil >=evil / >", "< / evil -=evil / >", "< / evil eVil=evil / >", "< / evil EVIL=evil / >", "< / evil ev_il=evil / >", "< / evil ev4il=evil / >", "< / evil e=evil / >", "< / evil 6=evil / >", "< / evil _=evil / >", "< / evil evil=&#39;>&#39; / >", "< / evil evil=&#39;=&#39; / >", "< / evil evil=&#39;<&#39; / >", "< / evil evil=&#39;/&#39; / >", "< / evil evil=&#39;-&#39; / >", "< / evil evil=&#39;eVil&#39; / >", "< / evil evil=&#39;EVIL&#39; / >", "< / evil evil=&#39;ev_il&#39; / >", "< / evil evil=&#39;ev il&#39; / >", "< / evil evil=&#39;ev4il&#39; / >", "< / evil evil=&#39;e&#39; / >", "< / evil evil=&#39; &#39; / >", "< / evil evil=&#39;6&#39; / >", "< / evil evil=&#39;_&#39; / >", "< / evil evil=&#39;&#39; / >", "< / evil >=&#39;evil&#39; / >", "< / evil -=&#39;evil&#39; / >", "< / evil eVil=&#39;evil&#39; / >", "< / evil EVIL=&#39;evil&#39; / >", "< / evil ev_il=&#39;evil&#39; / >", "< / evil ev4il=&#39;evil&#39; / >", "< / evil e=&#39;evil&#39; / >", "< / evil 6=&#39;evil&#39; / >", "< / evil _=&#39;evil&#39; / >", "< / evil evil=&quot;evil&quot; /  >", "< / evil evil=&quot;evil&quot; />", "< / evil evil=&quot;evil&quot;  >", "< / evil evil=&quot;evil&quot;  / >", "< / evil evil=&quot;evil&quot;/ >", "< / evil evil=&quot;evil&quot; evil=&quot;evil&quot; / >", "< / evil / >", "< / evil evil=&quot;>&quot; / >", "< / evil evil=&quot;=&quot; / >", "< / evil evil=&quot;<&quot; / >", "< / evil evil=&quot;/&quot; / >", "< / evil evil=&quot;-&quot; / >", "< / evil evil=&quot;#&quot; / >", "< / evil evil=&quot;eVil&quot; / >", "< / evil evil=&quot;EVIL&quot; / >", "< / evil evil=&quot;ev_il&quot; / >", "< / evil evil=&quot;ev il&quot; / >", "< / evil evil=&quot;ev4il&quot; / >", "< / evil evil=&quot;e&quot; / >", "< / evil evil=&quot; &quot; / >", "< / evil evil=&quot;6&quot; / >", "< / evil evil=&quot;_&quot; / >", "< / evil evil=&quot;&quot; / >", "< / evil >=&quot;evil&quot; / >", "< / evil -=&quot;evil&quot; / >", "< / evil eVil=&quot;evil&quot; / >", "< / evil EVIL=&quot;evil&quot; / >", "< / evil ev_il=&quot;evil&quot; / >", "< / evil ev4il=&quot;evil&quot; / >", "< / evil e=&quot;evil&quot; / >", "< / evil 6=&quot;evil&quot; / >", "< / evil _=&quot;evil&quot; / >", "< / evil  evil=&quot;evil&quot; / >", "< / evilevil=&quot;evil&quot; / >", "< / eVil evil=&quot;evil&quot; / >", "< / EVIL evil=&quot;evil&quot; / >", "< / ev_il evil=&quot;evil&quot; / >", "< / ev4il evil=&quot;evil&quot; / >", "< / e evil=&quot;evil&quot; / >", "< /   evil=&quot;evil&quot; / >", "< / 6 evil=&quot;evil&quot; / >", "< / _ evil=&quot;evil&quot; / >", "< /  evil=&quot;evil&quot; / >", "< /  evil evil=&quot;evil&quot; / >", "< /evil evil=&quot;evil&quot; / >", "<  evil evil=&quot;evil&quot; / >", "<  / evil evil=&quot;evil&quot; / >", "</ evil evil=&quot;evil&quot; / >", "<evil>", "< / evil evil=evil / >", "< / evil evil=&#39;evil&#39; / >", "< / evil evil=&quot;evil&quot; / >"], "nonMatches": ["< / evil evil=> / >", "< / evil evil=< / >", "< / evil evil=; / >", "< / evil evil=& / >", "< / evil evil=# / >", "< / evil evil=ev il / >", "< / evil evil=  / >", "< / evil evil= / >", "< / evil ==evil / >", "< / evil <=evil / >", "< / evil ;=evil / >", "< / evil /=evil / >", "< / evil &=evil / >", "< / evil #=evil / >", "< / evil ev il=evil / >", "< / evil  =evil / >", "< / evil =evil / >", "< / evil evil=&#39;;&#39; / >", "< / evil evil=&#39;&&#39; / >", "< / evil evil=&#39;#&#39; / >", "< / evil ==&#39;evil&#39; / >", "< / evil <=&#39;evil&#39; / >", "< / evil ;=&#39;evil&#39; / >", "< / evil /=&#39;evil&#39; / >", "< / evil &=&#39;evil&#39; / >", "< / evil #=&#39;evil&#39; / >", "< / evil ev il=&#39;evil&#39; / >", "< / evil  =&#39;evil&#39; / >", "< / evil =&#39;evil&#39; / >", "< / evil evil=&quot;evil&quot; // >", "< / evil evil=&quot;;&quot; / >", "< / evil evil=&quot;&&quot; / >", "< / evil ==&quot;evil&quot; / >", "< / evil <=&quot;evil&quot; / >", "< / evil ;=&quot;evil&quot; / >", "< / evil /=&quot;evil&quot; / >", "< / evil &=&quot;evil&quot; / >", "< / evil #=&quot;evil&quot; / >", "< / evil ev il=&quot;evil&quot; / >", "< / evil  =&quot;evil&quot; / >", "< / evil =&quot;evil&quot; / >", "< / ev il evil=&quot;evil&quot; / >", "< // evil evil=&quot;evil&quot; / >"]}, {"regex": "dcesfsef", "exceptionStackTrace": null, "matches": ["dcesfsef"], "nonMatches": []}, {"regex": "((0[1-9])|(1[0-9])|(2[0-9])|(3[0]))/((0[1-9])|(1[0-2]))/14[3-9]{2}", "exceptionStackTrace": null, "matches": ["01/01/14333", "30/01/1433", "20/01/1433", "10/01/1433", "01/10/1433", "01/01/1433"], "nonMatches": ["01/13/1433", "01/01/143", "01/01/1403", "01/00/1433", "00/01/1433"]}, {"regex": "^.+@[^\\.].+\\.[a-z]{2,}(\\.[a-z]{2,}$|$)", "exceptionStackTrace": null, "matches": ["evil@aevil.a.aa", "evil@a@.aa.aa", "evil@a..aa.aa", "evil@aeVil.aa.aa", "evil@aEVIL.aa.aa", "evil@aev_il.aa.aa", "evil@aev il.aa.aa", "evil@aev4il.aa.aa", "evil@ae.aa.aa", "evil@a .aa.aa", "evil@a6.aa.aa", "evil@a_.aa.aa", "evil@a.aa.aa", "evil@Aevil.aa.aa", "evil@@evil.aa.aa", "evil@0evil.aa.aa", "evil@ evil.aa.aa", "@@aevil.aa.aa", ".@aevil.aa.aa", "eVil@aevil.aa.aa", "EVIL@aevil.aa.aa", "ev_il@aevil.aa.aa", "ev il@aevil.aa.aa", "ev4il@aevil.aa.aa", "e@aevil.aa.aa", " @aevil.aa.aa", "6@aevil.aa.aa", "_@aevil.aa.aa", "evil@aevil.aa", "evil@aevil.aa.aa"], "nonMatches": ["evil@aevil.aa.a", "evil@.evil.aa.aa", "@aevil.aa.aa"]}, {"regex": "[A-Z][a-zA-Z]+ [A-Z][a-zA-Z]+", "exceptionStackTrace": null, "matches": ["Aevil AeVil", "Aevil AEVIL", "Aevil Aev_il", "Aevil Aev il", "Aevil Aev4il", "Aevil Ae", "AeVil Aevil", "AEVIL Aevil", "Ae Aevil", "Aevil Aevil"], "nonMatches": ["Aevil A ", "Aevil A6", "Aevil A_", "Aevil A", "Aev_il Aevil", "Aev il Aevil", "Aev4il Aevil", "A  Aevil", "A6 Aevil", "A_ Aevil", "A Aevil"]}, {"regex": "^\\$\\d{1,3}(,?\\d{3})*(\\.\\d{2})?$", "exceptionStackTrace": null, "matches": ["$0,000", "$0,000,000.00", "$0.00", "$0000.00", "$0000,000.00", "$000,000.00", "$0", "$0,000.00"], "nonMatches": ["$0,000.00.00", "$0,000.000", "$0,000.0", "$0,0000.00", "$0,00.00", "$0,,000.00", "$,000.00"]}, {"regex": "^\\S{2}\\d{7}$", "exceptionStackTrace": null, "matches": ["_a0000000", "Aa0000000", "0a0000000", "aa0000000"], "nonMatches": ["aa00000000", "aa000000", "aaa0000000", "a0000000", " a0000000"]}, {"regex": "(?!000)(?!666)^([0-8]\\d{2})(\\d{2})(\\d{4})$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["0000000000", "00000000", "900000000", "000000000"]}, {"regex": "(?n:^(?=\\d)((?<day>31(?!(.0?[2469]|11))|30(?!.0?2)|29(?(.0?2)(?=.{3,4}(19|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|(16|[2468][048]|[3579][26])00))|0?[1-9]|1\\d|2[0-8])(?<sep>[/.-])(?<month>0?[1-9]|1[012])\\2(?<year>(19|[2-9]\\d)\\d{2})(?:(?=\\x20\\d)\\x20|$))?(?<time>([01]\\d|2[0-3])(:[0-5]\\d){1})$)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?n"}, "matches": []}, {"regex": "(^[A-Za-z])|(\\s)([A-Za-z])", "exceptionStackTrace": null, "matches": [" A", "A", " a", "a"], "nonMatches": []}, {"regex": "^(\\d{5})$|^([a-zA-Z]\\d[a-zA-Z]( )?\\d[a-zA-Z]\\d)$", "exceptionStackTrace": null, "matches": ["A0A 0a0", "A0a 0A0", "a0A 0A0", "A0A0A0", "A0A 0A0", "00000"], "nonMatches": ["A0A  0A0", "000000", "0000"]}, {"regex": "[:;]{1}[-~+o]?[(&lt;\\[]+", "exceptionStackTrace": null, "matches": [";o[[", ";ot", ";ol", ";o;", ";o(", ";o&", ";~[", ";-[", ";+[", ";;o[", ":o[", ";[", ";o["], "nonMatches": [";o", ";oa", ";oo[", ";a[", "o["]}, {"regex": "[:]{1}[-~+o]?[)&gt;]+", "exceptionStackTrace": null, "matches": [":o;;", ":ot", ":og", ":o)", ":o&", ":~;", ":-;", ":+;", "::o;", ":;", ":o;"], "nonMatches": [":o", ":oa", ":oo;", ":a;", "o;"]}, {"regex": "^\\$([0]|([1-9]\\d{1,2})|([1-9]\\d{0,1},\\d{3,3})|([1-9]\\d{2,2},\\d{3,3})|([1-9],\\d{3,3},\\d{3,3}))([.]\\d{1,2})?$|^\\(\\$([0]|([1-9]\\d{1,2})|([1-9]\\d{0,1},\\d{3,3})|([1-9]\\d{2,2},\\d{3,3})|([1-9],\\d{3,3},\\d{3,3}))([.]\\d{1,2})?\\)$|^(\\$)?(-)?([0]|([1-9]\\d{0,6}))([.]\\d{1,2})?$", "exceptionStackTrace": null, "matches": ["$-1000000.0", "$-1.0", "$-0", "$-0.00", "-0.0", "($1,000.0)", "($100.0)", "($0.00)", "$1,000.0", "$1000.0", "$100.0", "$1.0", "$0.00", "1", "0", "($1,000,000)", "($100,000)", "($1,000)", "($10)", "($0)", "$1,000,000", "$100,000", "$1,000", "$10", "$0", "$-10.0", "$-0.0", "($1,000,000.0)", "($100,000.0)", "($10,000.0)", "($10.0)", "($0.0)", "$1,000,000.0", "$100,000.0", "$10,000.0", "$10.0", "$0.0"], "nonMatches": ["$-10000000.0", "$-00.0", "$-0.0.0", "$-0.000", "$-0.", "$--0.0", "$$-0.0", "($1,000,0000.0)", "($1,000,00.0)", "($1,0000,000.0)", "($1,00,000.0)", "($0,000,000.0)", "($100,0000.0)", "($100,00.0)", "($1000,000.0)", "($000,000.0)", "($10,0000.0)", "($10,00.0)", "($00,000.0)", "($1000.0)", "($1.0)", "($00.0)", "($0.0.0)", "($0.000)", "($0.)", "$1,000,0000.0", "$1,000,00.0", "$1,0000,000.0", "$1,00,000.0", "$0,000,000.0", "$100,0000.0", "$100,00.0", "$1000,000.0", "$000,000.0", "$10,0000.0", "$10,00.0", "$00,000.0", "$00.0", "$0.0.0", "$0.000", "$0."]}, {"regex": "^(1[89]|[2-9]\\d)$", "exceptionStackTrace": null, "matches": ["18", "20", "19"], "nonMatches": ["00", "10"]}, {"regex": "^[\\+\\-]?\\d+(,\\d+)?$", "exceptionStackTrace": null, "matches": ["-0", "-0,00", "-00,0", "0,0", "+0,0", "0", "-0,0"], "nonMatches": ["-0,0,0", "-0,", "-,0", "--0,0"]}, {"regex": "^(www\\.regxlib\\.com)$", "exceptionStackTrace": null, "matches": ["www.regxlib.com"], "nonMatches": []}, {"regex": "^((\\+989)|(989)|(00989)|(09|9))([1|2|3][0-9]\\d{7}$)", "exceptionStackTrace": null, "matches": ["+989|00000000", "+989200000000", "+989100000000", "9300000000", "09300000000", "00989300000000", "989300000000", "+989300000000"], "nonMatches": ["+9893000000000", "+98930000000", "+989000000000"]}, {"regex": "^(0?[1-9]|1[012])/([012][0-9]|[1-9]|3[01])/([12][0-9]{3})$", "exceptionStackTrace": null, "matches": ["11/20/2000", "10/20/2000", "01/20/1000", "01/30/2000", "01/10/2000", "01/00/2000", "1/31/2000", "1/1/2000", "1/20/2000", "12/20/2000", "01/31/2000", "01/1/2000", "01/20/2000"], "nonMatches": ["13/20/2000", "01/32/2000", "01/0/2000", "01/20/20000", "01/20/200", "01/20/0000", "00/20/2000", "001/20/2000"]}, {"regex": "DFdrg", "exceptionStackTrace": null, "matches": ["DFdrg"], "nonMatches": []}, {"regex": " \\A[1-9][0-9]{3}([A-RT-Z][A-Z])|([S]([BC]|[E-R]|[T-Z]))\\z", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad escape \\z"}, "matches": []}, {"regex": "[^A-Za-z0-9_@\\.]|@{2,}|\\.{5,}", "exceptionStackTrace": null, "matches": [".....", "@@", " "], "nonMatches": ["....", "a", "_", "A", "@", "0", "."]}, {"regex": "^(Function|Sub)(\\s+[\\w]+)\\([^\\(\\)]*\\)", "exceptionStackTrace": null, "matches": ["Function evil())", "Function evil(eVil)", "Function evil(EVIL)", "Function evil(ev_il)", "Function evil(ev il)", "Function evil(ev4il)", "Function evil(e)", "Function evil( )", "Function evil(6)", "Function evil(_)", "Function eVil(evil)", "Function EVIL(evil)", "Function ev_il(evil)", "Function ev4il(evil)", "Function e(evil)", "Function 6(evil)", "Function _(evil)", "Function  evil(evil)", "Sub evil()", "Function evil()", "Sub evil(evil)", "Function evil(evil)"], "nonMatches": ["Function evil(()", "Function ev il(evil)", "Function  (evil)", "Function (evil)", "Functionevil(evil)"]}, {"regex": "2", "exceptionStackTrace": null, "matches": ["2"], "nonMatches": []}, {"regex": " @&quot;^((((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)))\\,?)*$&quot;", "exceptionStackTrace": null, "matches": [], "nonMatches": [" @&quot;1000.250.250.250,&quot;", " @&quot;10.250.250.250,&quot;", " @&quot;1100.250.250.250,&quot;", " @&quot;00.250.250.250,&quot;", " @&quot;000.250.250.250,&quot;", " @&quot;250.1000.250.250,&quot;", " @&quot;250.10.250.250,&quot;", " @&quot;250.1100.250.250,&quot;", " @&quot;250.00.250.250,&quot;", " @&quot;250.000.250.250,&quot;", " @&quot;250.250.1000.250,&quot;", " @&quot;250.250.10.250,&quot;", " @&quot;250.250.1100.250,&quot;", " @&quot;250.250.00.250,&quot;", " @&quot;250.250.000.250,&quot;", " @&quot;250.250.250.1000,&quot;", " @&quot;250.250.250.10,&quot;", " @&quot;250.250.250.1100,&quot;", " @&quot;250.250.250.00,&quot;", " @&quot;250.250.250.000,&quot;", " @&quot;250.250.250.250,250.250.250.250,&quot;", " @&quot;250.250.250.250,,&quot;", " @&quot;250.250.250.250&quot;", " @&quot;250.250.250.256,&quot;", " @&quot;250.250.256.250,&quot;", " @&quot;250.256.250.250,&quot;", " @&quot;256.250.250.250,&quot;", " @&quot;&quot;", " @&quot;100.250.250.250,&quot;", " @&quot;200.250.250.250,&quot;", " @&quot;250.100.250.250,&quot;", " @&quot;250.200.250.250,&quot;", " @&quot;250.250.100.250,&quot;", " @&quot;250.250.200.250,&quot;", " @&quot;250.250.250.100,&quot;", " @&quot;250.250.250.200,&quot;", " @&quot;250.250.250.250,&quot;"]}, {"regex": "^(\\d{1,3},)?(\\d{3},)+\\d{3}(\\.\\d*)?$|^(\\d*)(\\.\\d*)?$", "exceptionStackTrace": null, "matches": ["0", "0.00", "0.", "00.0", ".0", "0,000,000", "0,000,000.00", "0,000,000.", "0,000,000,000.0", "000,000.0", "000,000,000.0", "", "000,000", "0.0", "0,000,000.0"], "nonMatches": ["0.0.0", "0,000,000.0.0", "0,000,0000.0", "0,000,00.0", "0,000.0", "0,0000,000.0", "0,00,000.0", "0,0,000,000.0", "0000,000,000.0", ",000,000.0"]}, {"regex": "^(?!^(PRN|AUX|CLOCK\\$|NUL|CON|COM\\d|LPT\\d|\\..*)(\\..+)?$)[^\\x00-\\x1f\\\\?*&lt;&gt;:\\;|\\&quot;/]+$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 0"}, "matches": [], "nonMatches": []}, {"regex": "^.*[_A-Za-z0-9]+[\\t ]+[\\*&]?[\\t ]*[_A-Za-z0-9](::)?[_A-Za-z0-9:]+[\\t ]*\\(( *[ \\[\\]\\*&A-Za-z0-9_]+ *,? *)*\\).*$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\t"}, "matches": [], "nonMatches": []}, {"regex": "^((67\\d{2})|(4\\d{3})|(5[1-5]\\d{2})|(6011))-?\\s?\\d{4}-?\\s?\\d{4}-?\\s?\\d{4}|3[4,7]\\d{13}$", "exceptionStackTrace": null, "matches": ["340000000000000", "3,0000000000000", "6700- 0000- 0000- 00000", "6700- 0000- 0000-0000", "6700- 0000- 0000 0000", "6700- 0000-0000- 0000", "6700- 0000 0000- 0000", "6700-0000- 0000- 0000", "6700 0000- 0000- 0000", "6011000000000000", "5100000000000000", "4000000000000000", "6700000000000000", "370000000000000", "6011- 0000- 0000- 0000", "5100- 0000- 0000- 0000", "4000- 0000- 0000- 0000", "6700- 0000- 0000- 0000"], "nonMatches": ["3700000000000000", "37000000000000", "300000000000000", "51000- 0000- 0000- 0000", "510- 0000- 0000- 0000", "5000- 0000- 0000- 0000", "40000- 0000- 0000- 0000", "400- 0000- 0000- 0000", "6700- 0000- 0000- 000", "6700- 0000- 0000-  0000", "6700- 0000- 0000-- 0000", "6700- 0000- 00000- 0000", "6700- 0000- 000- 0000", "6700- 0000-  0000- 0000", "6700- 0000-- 0000- 0000", "6700- 00000- 0000- 0000", "6700- 000- 0000- 0000", "6700-  0000- 0000- 0000", "6700-- 0000- 0000- 0000", "67000- 0000- 0000- 0000", "670- 0000- 0000- 0000"]}, {"regex": "^((67\\d{2})|(4\\d{3})|(5[1-5]\\d{2})|(6011))(-?\\s?\\d{4}){3}|(3[4,7])\\d{2}-?\\s?\\d{6}-?\\s?\\d{5}$", "exceptionStackTrace": null, "matches": ["3700- 000000-00000", "3700- 000000 00000", "3700-000000- 00000", "3700 000000- 00000", "3400- 000000- 00000", "3,00- 000000- 00000", "6700- 0000- 0000- 0000- 0000", "6700-0000- 0000- 0000", "6700 0000- 0000- 0000", "370000000000000", "60110000- 0000- 0000", "51000000- 0000- 0000", "40000000- 0000- 0000", "67000000- 0000- 0000", "3700- 000000- 00000", "6011- 0000- 0000- 0000", "5100- 0000- 0000- 0000", "4000- 0000- 0000- 0000", "6700- 0000- 0000- 0000"], "nonMatches": ["3700- 000000- 000000", "3700- 000000- 0000", "3700- 000000-  00000", "3700- 000000-- 00000", "3700- 0000000- 00000", "3700- 00000- 00000", "3700-  000000- 00000", "3700-- 000000- 00000", "37000- 000000- 00000", "370- 000000- 00000", "3000- 000000- 00000", "51000- 0000- 0000- 0000", "510- 0000- 0000- 0000", "5000- 0000- 0000- 0000", "40000- 0000- 0000- 0000", "400- 0000- 0000- 0000", "6700- 0000- 0000", "6700- 00000- 0000- 0000", "6700- 000- 0000- 0000", "6700-  0000- 0000- 0000", "6700-- 0000- 0000- 0000", "67000- 0000- 0000- 0000", "670- 0000- 0000- 0000"]}, {"regex": "^[a-z\\.]*\\s?([a-z\\-\\&#39;]+\\s)+[a-z\\-\\&#39;]+$", "exceptionStackTrace": null, "matches": ["evil evil ;", "evil evil -", "evil evil &", "evil evil #", "evil evil ev il", "evil evil e", "evil evil evil evil", "evil ; evil", "evil - evil", "evil & evil", "evil # evil", "evil ev il evil", "evil e evil", "evilevil evil", "; evil evil", ". evil evil", "- evil evil", "& evil evil", "# evil evil", "ev il evil evil", "e evil evil", " evil evil", "evil evil", "evil evil evil"], "nonMatches": ["evil evil .", "evil evil eVil", "evil evil EVIL", "evil evil ev_il", "evil evil ev4il", "evil evil  ", "evil evil 6", "evil evil _", "evil evil ", "evil . evil", "evil eVil evil", "evil EVIL evil", "evil ev_il evil", "evil ev4il evil", "evil   evil", "evil 6 evil", "evil _ evil", "evil  evil", "evil  evil evil", "eVil evil evil", "EVIL evil evil", "ev_il evil evil", "ev4il evil evil", "  evil evil", "6 evil evil", "_ evil evil"]}, {"regex": "((\\s*([^,{]+)\\s*,?\\s*)*?){((\\s*([^:]+)\\s*:\\s*([^;]+?)\\s*;\\s*)*?)}", "exceptionStackTrace": null, "matches": [" evil , { evil : evil ;  evil : evil ; }", " evil , {}", " evil , { evil : evil ;  }", " evil , { evil : evil ;}", " evil , { evil : evil  ; }", " evil , { evil : evil; }", " evil , { evil : } ; }", " evil , { evil : { ; }", " evil , { evil : : ; }", " evil , { evil : , ; }", " evil , { evil : eVil ; }", " evil , { evil : EVIL ; }", " evil , { evil : ev_il ; }", " evil , { evil : ev il ; }", " evil , { evil : ev4il ; }", " evil , { evil : e ; }", " evil , { evil :   ; }", " evil , { evil : 6 ; }", " evil , { evil : _ ; }", " evil , { evil :  ; }", " evil , { evil :  evil ; }", " evil , { evil :evil ; }", " evil , { evil  : evil ; }", " evil , { evil: evil ; }", " evil , { } : evil ; }", " evil , { { : evil ; }", " evil , { ; : evil ; }", " evil , { : : evil ; }", " evil , { , : evil ; }", " evil , { eVil : evil ; }", " evil , { EVIL : evil ; }", " evil , { ev_il : evil ; }", " evil , { ev il : evil ; }", " evil , { ev4il : evil ; }", " evil , { e : evil ; }", " evil , {   : evil ; }", " evil , { 6 : evil ; }", " evil , { _ : evil ; }", " evil , {  : evil ; }", " evil , {  evil : evil ; }", " evil , {evil : evil ; }", " evil ,  evil , { evil : evil ; }", "{ evil : evil ; }", " evil ,  { evil : evil ; }", " evil ,{ evil : evil ; }", " evil ,, { evil : evil ; }", " evil  { evil : evil ; }", " evil  , { evil : evil ; }", " evil, { evil : evil ; }", " } , { evil : evil ; }", " { , { evil : evil ; }", " ; , { evil : evil ; }", " : , { evil : evil ; }", " , , { evil : evil ; }", " eVil , { evil : evil ; }", " EVIL , { evil : evil ; }", " ev_il , { evil : evil ; }", " ev il , { evil : evil ; }", " ev4il , { evil : evil ; }", " e , { evil : evil ; }", "   , { evil : evil ; }", " 6 , { evil : evil ; }", " _ , { evil : evil ; }", "  , { evil : evil ; }", "  evil , { evil : evil ; }", "evil , { evil : evil ; }", "{}", " evil , { evil : evil ; }"], "nonMatches": [" evil , { evil : ; ; }"]}, {"regex": "(^[a-zA-Z0-9]+://)", "exceptionStackTrace": null, "matches": ["eVil://", "EVIL://", "ev4il://", "e://", "6://", "evil://"], "nonMatches": ["ev_il://", "ev il://", " ://", "_://", "://"]}, {"regex": "(?:/\\*[\\w\\W]*?\\*/|//[^\\n]*?$|\\#[^\\n]*?$)", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\n"}, "matches": [], "nonMatches": []}, {"regex": "^((?!.*//.*)(?!.*/ .*)/{1}([^\\\\(){}:\\*\\?<>\\|\\&quot;\\&#39;])+\\.(csv|jpg|txt|pdf|dat|xls|doc))$", "exceptionStackTrace": null, "matches": ["/aa.csv", "/A.csv", "/0.csv", "/..csv", "/a.doc", "/a.xls", "/a.dat", "/a.pdf", "/a.txt", "/a.jpg", "/a.csv"], "nonMatches": ["/.csv", "/}.csv", "/|.csv", "/{.csv", "/u.csv", "/t.csv", "/q.csv", "/o.csv", "/\\.csv", "/?.csv", "/>.csv", "/<.csv", "/;.csv", "/:.csv", "/9.csv", "/3.csv", "//.csv", "/*.csv", "/).csv", "/(.csv", "/&.csv", "/#.csv", "/ .csv", "//a.csv", "a.csv"]}, {"regex": "^((\\b[A-Z0-9](\\w)*\\b)|\\s)*$", "exceptionStackTrace": null, "matches": ["0a0a", "0aa", "0", "0_", "0A", "00", "Aa", "", " ", "0a"], "nonMatches": []}, {"regex": "(^|\\s|\\()((([1-9]){1}|([0][1-9]){1}|([1][012]){1}){1}[\\/-]((2[0-9]){1}|(3[01]){1}|([01][1-9]){1}|([1-9]){1}){1}[\\/-](((19|20)([0-9][0-9]){1}|([0-9][0-9]){1})){1}(([\\s|\\)|:])|(^|\\s|\\()((([0-9]){1}|([0][1-9]){1}|([1][012]){1}){1}[\\/-](([11-31]){1}|([01][1-9]){1}|([1-9]){1}){1}[\\/-](((19|20)([0-9][0-9]){1}|([0-9][0-9]){1})){1}(([\\s|\\)|:|$|\\&gt;])){1}){1}){1}){1}", "exceptionStackTrace": null, "matches": ["10-20-1900:", "1-21-1900:", "1-01-1900:", "1-30-1900:", "1-20-1900:1-20-1900:", "1-20-1900::", "1-20-1900|", "1-20-1900)", "1-20-1900 ", "1-20-19:", "1-20/1900:", "1/20-1900:", "11-20-1900:", "(1-20-1900:", " 1-20-1900:", "12-20-1900:", "01-20-1900:", "1-1-1900:", "1-11-1900:", "1-31-1900:", "1-20-00:", "1-20-2000:", "1-20-1900(0-1-1900;", "1-20-1900 0-1-1900;", "1-20-1900:"], "nonMatches": ["1212-20-1900:", "13-20-1900:", "0101-20-1900:", "00-20-1900:", "1-0-1900:", "1-1111-1900:", "1-10-1900:", "1-3131-1900:", "1-32-1900:", "1-20-0000:", "1-20-19001212-1-1900;", "1-20-190013-1-1900;", "1-20-190011-1-1900;", "1-20-190010-1-1900;", "1-20-19000101-1-1900;", "1-20-19000-1111-1900;", "1-20-19000-10-1900;", "1-20-19000-21-1900;", "1-20-19000-01-1900;", "1-20-19000-1-0000;", "1-20-19000-1-1900;0-1-1900;", "1-20-19000-1-1900;;", "1-20-19000-1-1900", "1-20-19000-1-1900|", "1-20-19000-1-1900t", "1-20-19000-1-1900g", "1-20-19000-1-1900a", "1-20-19000-1-1900:", "1-20-19000-1-1900)", "1-20-19000-1-1900&", "1-20-19000-1-1900$", "1-20-19000-1-1900 ", "1-20-19000-1-19001900;", "1-20-19000-1-;", "1-20-19000-1-190000;", "1-20-19000-1-19;", "1-20-19000-1/1900;", "1-20-19000--1900;", "1-20-19000-2-1900;", "1-20-19000-0-1900;", "1-20-19000/1-1900;", "1-20-190000-1-1900;", "1-20-1900-1-1900;", "", "1-20-1900", "1-20-19001900:", "1-20-:", "1-20-190000:", "1-2020-1900:", "1--1900:", "-20-1900:", "0-20-1900:", "1-20-190012-1-1900;", "1-20-190001-1-1900;", "1-20-19000-11-1900;", "1-20-19000-1-00;", "1-20-19000-1-2000;", "1-20-19000-1-1900;"]}, {"regex": "(\\w(\\s)?)+", "exceptionStackTrace": null, "matches": ["a a ", "a  ", "_ ", "A ", "0 ", "a", "a "], "nonMatches": [""]}, {"regex": "^[\\u0600-\\u06ff0-9\\s]+$|[\\u0750-\\u077f0-9\\s]+$|[\\ufb50-\\ufc3f0-9\\s]+$|[\\ufe70-\\ufefc0-9\\s]+$|[\\u06cc0-9\\s]+$|[\\u067e0-9\\s]+$|[\\u06af0-9\\s]$|[\\u06910-9\\s]+$|^$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 1536"}, "matches": [], "nonMatches": []}, {"regex": "\\x1f\\x8b\\x08\\x00.+\\x00\\x00", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 31"}, "matches": [], "nonMatches": []}, {"regex": "^([V|E|J|G|v|e|j|g])([0-9]{5,8})$", "exceptionStackTrace": null, "matches": ["g00000000", "|00000", "v00000", "j00000", "e00000", "V00000", "J00000", "G00000", "E00000", "g00000"], "nonMatches": ["g000000000", "g0000", "a00000", "A00000"]}, {"regex": "^0[0-9]{3}-[0-9]{7}$", "exceptionStackTrace": null, "matches": ["0000-0000000"], "nonMatches": ["0000-00000000", "0000-000000", "00000-0000000", "000-0000000"]}, {"regex": " https://testosteronesboosterweb.com/decabolan/", "exceptionStackTrace": null, "matches": [" https://testosteronesboosterwebAcom/decabolan/", " https://testosteronesboosterweb:com/decabolan/", " https://testosteronesboosterweb0com/decabolan/", " https://testosteronesboosterweb/com/decabolan/", " https://testosteronesboosterweb com/decabolan/", " https://testosteronesboosterwebacom/decabolan/"], "nonMatches": []}, {"regex": "[+-]?+(?>\\d++\\.?+\\d*+|\\d*+\\.?+\\d++)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "multiple repeat"}, "matches": []}, {"regex": "(\\+?1[- .]?)?[.\\(]?[\\d^01]\\d{2}\\)?[- .]?\\d{3}[- .]?\\d{4}", "exceptionStackTrace": null, "matches": ["+1.(100).000.00000", "+1.(100).0000000", "+1.(100).000-0000", "+1.(100).000 0000", "+1.(100)000.0000", "+1.(100)-000.0000", "+1.(100) 000.0000", "+1.(100.000.0000", "+1.(1000).000.0000", "+1.(^00).000.0000", "+1.(200).000.0000", "+1.(000).000.0000", "+1.((100).000.0000", "+1.100).000.0000", "+1..100).000.0000", "+1.+1.(100).000.0000", "(100).000.0000", "+1..(100).000.0000", "+1(100).000.0000", "+1-(100).000.0000", "+1 (100).000.0000", "++1.(100).000.0000", "1.(100).000.0000", "1000000000", "+1.(100).000.0000"], "nonMatches": ["+1.(100).000.000", "+1.(100).000..0000", "+1.(100).0000.0000", "+1.(100).00.0000", "+1.(100)..000.0000", "+1.(100)).000.0000", "+1.(10).000.0000"]}, {"regex": "^(20|23|27|30|33)-[0-9]{8}-[0-9]$", "exceptionStackTrace": null, "matches": ["33-00000000-0", "30-00000000-0", "27-00000000-0", "23-00000000-0", "20-00000000-0"], "nonMatches": ["20-000000000-0", "20-0000000-0"]}, {"regex": "^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,3}$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character range \\w-\\."}, "matches": []}, {"regex": "\\d{1,3}[.]\\d{1,3}[.]\\d{1,3}[.]\\d{1,3}\\s.\\s.\\s\\[\\d{2}\\/\\D{3}\\/\\d{4}:\\d{1,2}:\\d{1,2}:\\d{1,2}\\s.\\d{4}\\]\\s\\&quot;\\S*\\s\\S*\\s\\S*\\&quot;\\s\\d{1,3}\\s\\S*\\s\\&quot;.*\\&quot;\\s\\&quot;.*\\&quot;", "exceptionStackTrace": null, "matches": ["0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;]&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;[&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;;&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;:&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;/&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;.&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;&&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;eVil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;EVIL&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;ev_il&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;ev il&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;ev4il&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;e&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot; &quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;6&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;_&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;]&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;[&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;;&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;:&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;/&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;.&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;&&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;eVil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;EVIL&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;ev_il&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;ev il&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;ev4il&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;e&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot; &quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;6&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;_&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 ] &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 [ &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 ; &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 : &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 / &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 . &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 & &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 eVil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 EVIL &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 ev_il &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 ev4il &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 e &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 6 &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 _ &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0  &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 000 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil ]&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil [&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil ;&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil :&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil /&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil .&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil &&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil eVil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil EVIL&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil ev_il&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil ev4il&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil e&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil 6&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil _&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil &quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil ] evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil [ evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil ; evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil : evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil / evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil . evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil & evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil eVil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil EVIL evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil ev_il evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil ev4il evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil e evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil 6 evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil _ evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil  evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;] evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;[ evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;; evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;: evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;/ evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;. evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;& evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;eVil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;EVIL evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;ev_il evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;ev4il evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;e evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;6 evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;_ evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot; evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 ]0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 [0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 A0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 ;0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 :0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 00000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 /0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 .0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 &0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0  0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:00 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:00:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:00:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/_aa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/]aa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/[aa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/Aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/;aa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/:aa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00//aa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/.aa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/&aa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/ aa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a ] [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a [ [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a A [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a ; [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a : [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a 0 [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a / [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a . [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a & [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a   [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 ] a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 [ a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 A a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 ; a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 : a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 0 a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 / a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 . a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 & a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0   a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.000 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.000.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.000.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0000.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "000.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;  &quot; 0  &quot;&quot; &quot;&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;"], "nonMatches": ["0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 ev il &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0   &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0000 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot;  evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil ev il&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil  &quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil ev il evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil   evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;ev il evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;  evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a00000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:0 a000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0:000 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:0: a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0:000:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:0::0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000:000:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/0000::0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/00000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaa/000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aaaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/aa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [00/0aa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [000/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0 a a [0/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0.0000 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0. a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0.0000.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0..0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0.0000.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", "0..0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;", ".0.0.0 a a [00/aaa/0000:0:0:0 a0000] &quot;evil evil evil&quot; 0 evil &quot;evil&quot; &quot;evil&quot;"]}, {"regex": "(ISBN[-]*(1[03])*[ ]*(: ){0,1})*(([0-9Xx][- ]*){13}|([0-9Xx][- ]*){10})", "exceptionStackTrace": null, "matches": ["ISBN-13 : x x x x x x x x x x x ", "ISBN-13 : x  x x x x x x x x x ", "ISBN-13 : xx x x x x x x x x ", "ISBN-13 : x-x x x x x x x x x ", "ISBN-13 : X x x x x x x x x x ", "ISBN-13 : 0 x x x x x x x x x ", "ISBN-13 : x x x x x x x x x x x x x x ", "ISBN-13 : x x x x x x x x x x x x ", "ISBN-13 : x  x x x x x x x x x x x x ", "ISBN-13 : xx x x x x x x x x x x x ", "ISBN-13 : x-x x x x x x x x x x x x ", "ISBN-13 : a x x x x x x x x x x x x ", "ISBN-13 : X x x x x x x x x x x x x ", "ISBN-13 : A x x x x x x x x x x x x ", "ISBN-13 : 0 x x x x x x x x x x x x ", "ISBN-13 : ISBN-13 : x x x x x x x x x x x x x ", "x x x x x x x x x x x x x ", "ISBN-13 : : x x x x x x x x x x x x x ", "ISBN-13 x x x x x x x x x x x x x ", "ISBN-13  : x x x x x x x x x x x x x ", "ISBN-13: x x x x x x x x x x x x x ", "ISBN-1313 : x x x x x x x x x x x x x ", "ISBN- : x x x x x x x x x x x x x ", "ISBN-11 : x x x x x x x x x x x x x ", "ISBN-10 : x x x x x x x x x x x x x ", "ISBN--13 : x x x x x x x x x x x x x ", "ISBN13 : x x x x x x x x x x x x x ", "xx x x x x x x x x ", "xx x x x x x x x x x x x ", "ISBN-13 : x x x x x x x x x x ", "ISBN-13 : x x x x x x x x x x x x x "], "nonMatches": ["ISBN-13 : x x x x x x x x x ", "ISBN-13 : a x x x x x x x x x ", "ISBN-13 : A x x x x x x x x x "]}, {"regex": "\\(?\\s*(?<area>\\d{3})\\s*[\\)\\.\\-]?\\s*(?<first>\\d{3})\\s*[\\-\\.]?\\s*(?<second>\\d{4})\\D*(?<ext>\\d*)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<a"}, "matches": []}, {"regex": "^([1-9]|1[0-2]):[0-5]\\d ?(a|A|p|P)(m|M)$", "exceptionStackTrace": null, "matches": ["10:00am", "1:00Pm", "1:00pm", "1:00Am", "1:00aM", "1:00am", "10:00 am", "1:00 Pm", "1:00 pm", "1:00 Am", "1:00 aM", "1:00 am"], "nonMatches": ["13:00 am", "1:00  am", "1:60 am", "0:00 am"]}, {"regex": "[\\w*|\\W*]*<[[\\w*|\\W*]*|/[\\w*|\\W*]]>[\\w*|\\W*]*", "exceptionStackTrace": null, "matches": ["/*]>|", "/*]>]", "/*]>[", "/*]>>", "/*]><", "/*]>/", "/*]>*", "/*]>eVil", "/*]>EVIL", "/*]>ev_il", "/*]>ev il", "/*]>ev4il", "/*]>e", "/*]> ", "/*]>6", "/*]>_", "/|]>evil", "/a]>evil", "/_]>evil", "/]]>evil", "/[]>evil", "/A]>evil", "/>]>evil", "/<]>evil", "/0]>evil", "//]>evil", "/ ]>evil", "evil<|", "evil<]", "evil<[", "evil<>", "evil<<", "evil</", "evil<*", "evil<eVil", "evil<EVIL", "evil<ev_il", "evil<ev il", "evil<ev4il", "evil<e", "evil< ", "evil<6", "evil<_", "evil<", "|<evil", "]<evil", "[<evil", "><evil", "<<evil", "/<evil", "*<evil", "eVil<evil", "EVIL<evil", "ev_il<evil", "ev il<evil", "ev4il<evil", "e<evil", " <evil", "6<evil", "_<evil", "<evil", "/*]>", "<", "/*]>evil", "evil<evil"], "nonMatches": []}, {"regex": "10 years", "exceptionStackTrace": null, "matches": ["10 years"], "nonMatches": []}, {"regex": "[a-zA-Z]{1}[a-zA-Z0-9\\-._]+@([a-zA-Z0-9-]+\\.)+\\w+", "exceptionStackTrace": null, "matches": ["Aevil@evil.eVil", "Aevil@evil.EVIL", "Aevil@evil.ev_il", "Aevil@evil.ev il", "Aevil@evil.ev4il", "Aevil@evil.e", "Aevil@evil.6", "Aevil@evil._", "Aevil@evil.evil.evil", "Aevil@-.evil", "Aevil@eVil.evil", "Aevil@EVIL.evil", "Aevil@ev4il.evil", "Aevil@e.evil", "Aevil@6.evil", "A.@evil.evil", "A-@evil.evil", "AeVil@evil.evil", "AEVIL@evil.evil", "Aev_il@evil.evil", "Aev il@evil.evil", "Aev4il@evil.evil", "Ae@evil.evil", "A6@evil.evil", "A_@evil.evil", "AAevil@evil.evil", "evil@evil.evil", "aevil@evil.evil", "Aevil@evil.evil"], "nonMatches": ["Aevil@evil. ", "Aevil@evil.", "Aevil@evil", "Aevil@@.evil", "Aevil@..evil", "Aevil@ev_il.evil", "Aevil@ev il.evil", "Aevil@ .evil", "Aevil@_.evil", "Aevil@.evil", "A@@evil.evil", "A @evil.evil", "A@evil.evil"]}, {"regex": "sample", "exceptionStackTrace": null, "matches": ["sample"], "nonMatches": []}, {"regex": "^((0[1-9]|1[0-9]|2[0-4])[0-59]\\\\d{7}(00[1-9]|[0-9][1-9][0-9]|[1-9][0-9][0-9]))|((0[1-9]|1[0-9]|2[0-4])6\\\\d{6}(000[1-9]|[0-9][0-9][1-9][0-9]|[0-9][1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]))$", "exceptionStackTrace": null, "matches": ["010\\ddddddd001", "206\\dddddd0001", "106\\dddddd0001", "016\\dddddd1000", "016\\dddddd0100", "016\\dddddd0010", "016\\dddddd0001", "209\\ddddddd001", "109\\ddddddd001", "019\\ddddddd100", "019\\ddddddd010", "019\\ddddddd001"], "nonMatches": ["256\\dddddd0001", "016\\dddddd0000", "016\\ddddddd0001", "016\\ddddd0001", "006\\dddddd0001", "259\\ddddddd001", "019\\ddddddd000", "019\\dddddddd001", "019\\dddddd001", "016\\ddddddd001", "009\\ddddddd001"]}, {"regex": "[\\x80-\\xFF]", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 128"}, "matches": [], "nonMatches": []}, {"regex": "(((^[BEGLMNS][1-9]\\d?)|(^W[2-9])|(^(A[BL]|B[ABDHLNRST]|C[ABFHMORTVW]|D[ADEGHLNTY]|E[HNX]|F[KY]|G[LUY]|H[ADGPRSUX]|I[GMPV]|JE|K[ATWY]|L[ADELNSU]|M[EKL]|N[EGNPRW]|O[LX]|P[AEHLOR]|R[GHM]|S[AEGKL-PRSTWY]|T[ADFNQRSW]|UB|W[ADFNRSV]|YO|ZE)\\d\\d?)|(^W1[A-HJKSTUW0-9])|(((^WC[1-2])|(^EC[1-4])|(^SW1))[ABEHMNPRVWXY]))(\\s*)?([0-9][ABD-HJLNP-UW-Z]{2}))$|(^GIR\\s?0AA$)", "exceptionStackTrace": null, "matches": ["WC1X 0NN", "WC1W 0NN", "WC1V 0NN", "WC1R 0NN", "WC1P 0NN", "WC1N 0NN", "WC1M 0NN", "WC1H 0NN", "WC1E 0NN", "WC1B 0NN", "WC1A 0NN", "W1U 0NN", "W1T 0NN", "W1S 0NN", "W1K 0NN", "W1J 0NN", "W1A 0NN", "W10 0NN", "WS00 0NN", "WR00 0NN", "WN00 0NN", "WF00 0NN", "WD00 0NN", "WA00 0NN", "TS00 0NN", "TR00 0NN", "TQ00 0NN", "TN00 0NN", "TF00 0NN", "TD00 0NN", "TA00 0NN", "SW00 0NN", "ST00 0NN", "SS00 0NN", "SR00 0NN", "SL00 0NN", "SK00 0NN", "SG00 0NN", "SE00 0NN", "SA00 0NN", "RH00 0NN", "RG00 0NN", "PO00 0NN", "PL00 0NN", "PH00 0NN", "PE00 0NN", "PA00 0NN", "OL00 0NN", "NR00 0NN", "NP00 0NN", "NN00 0NN", "NG00 0NN", "NE00 0NN", "MK00 0NN", "ME00 0NN", "LS00 0NN", "LN00 0NN", "LL00 0NN", "LE00 0NN", "LD00 0NN", "LA00 0NN", "KW00 0NN", "KT00 0NN", "KA00 0NN", "IP00 0NN", "IM00 0NN", "IG00 0NN", "HU00 0NN", "HS00 0NN", "HR00 0NN", "HP00 0NN", "HG00 0NN", "HD00 0NN", "HA00 0NN", "GU00 0NN", "GL00 0NN", "FK00 0NN", "EN00 0NN", "EH00 0NN", "DT00 0NN", "DN00 0NN", "DL00 0NN", "DH00 0NN", "DG00 0NN", "DE00 0NN", "DD00 0NN", "DA00 0NN", "CV00 0NN", "CT00 0NN", "CR00 0NN", "CO00 0NN", "CM00 0NN", "CH00 0NN", "CF00 0NN", "CB00 0NN", "CA00 0NN", "BS00 0NN", "BR00 0NN", "BN00 0NN", "BL00 0NN", "BH00 0NN", "BD00 0NN", "BB00 0NN", "BA00 0NN", "AL0 0NN", "AB00 0NN", "S10 0WN", "S10 0PN", "S10 0LN", "S10 0JN", "S10 0DN", "S10 0BN", "S10 0AN", "S10  0NN", "S100NN", "S1 0NN", "N10 0NN", "M10 0NN", "L10 0NN", "G10 0NN", "E10 0NN", "B10 0NN", "GIR0AA", "SW1Y0NN", "EC1Y0NN", "WC1Y0NN", "W1W0NN", "ZE00NN", "YO00NN", "WV00NN", "UB00NN", "TW00NN", "SY00NN", "RM00NN", "PR00NN", "OX00NN", "NW00NN", "ML00NN", "LU00NN", "KY00NN", "JE00NN", "IV00NN", "HX00NN", "GY00NN", "FY00NN", "EX00NN", "DY00NN", "CW00NN", "BT00NN", "AL00NN", "W20NN", "S10NN", "GIR 0AA", "SW1Y 0NN", "EC1Y 0NN", "WC1Y 0NN", "W1W 0NN", "ZE00 0NN", "YO00 0NN", "WV00 0NN", "UB00 0NN", "TW00 0NN", "SY00 0NN", "RM00 0NN", "PR00 0NN", "OX00 0NN", "NW00 0NN", "ML00 0NN", "LU00 0NN", "KY00 0NN", "JE00 0NN", "IV00 0NN", "HX00 0NN", "GY00 0NN", "FY00 0NN", "EX00 0NN", "DY00 0NN", "CW00 0NN", "BT00 0NN", "AL00 0NN", "W2 0NN", "S10 0NN"], "nonMatches": ["GIR  0AA", "EC0Y 0NN", "WC1C 0NN", "WC0Y 0NN", "W1I 0NN", "WB00 0NN", "TB00 0NN", "SB00 0NN", "RA00 0NN", "PB00 0NN", "OA00 0NN", "NA00 0NN", "MA00 0NN", "LB00 0NN", "KB00 0NN", "IA00 0NN", "HB00 0NN", "GA00 0NN", "FA00 0NN", "EA00 0NN", "DB00 0NN", "CC00 0NN", "BC00 0NN", "AL000 0NN", "AA00 0NN", "W0 0NN", "S10 0NNN", "S10 0N", "S10 0CN", "S100 0NN", "S00 0NN", "A10 0NN"]}, {"regex": "(((^[BEGLMNS][1-9]\\d?) | (^W[2-9] ) | ( ^( A[BL] | B[ABDHLNRST] | C[ABFHMORTVW] | D[ADEGHLNTY] | E[HNX] | F[KY] | G[LUY] | H[ADGPRSUX] | I[GMPV] | JE | K[ATWY] | L[ADELNSU] | M[EKL] | N[EGNPRW] | O[LX] | P[AEHLOR] | R[GHM] | S[AEGKL-PRSTWY] | T[ADFNQRSW] | UB | W[ADFNRSV] | YO | ZE ) \\d\\d?) | (^W1[A-HJKSTUW0-9]) | ((  (^WC[1-2])  |  (^EC[1-4]) | (^SW1)  ) [ABEHMNPRVWXY] ) ) (\\s*)?  ([0-9][ABD-HJLNP-UW-Z]{2})) | (^GIR\\s?0AA)", "exceptionStackTrace": null, "matches": ["S10     0WN ", "S10     0PN ", "S10     0LN ", "S10     0JN ", "S10     0DN ", "S10     0BN ", "S10     0AN ", "S10      0NN ", "S10    0NN ", "S1     0NN ", "N10     0NN ", "M10     0NN ", "L10     0NN ", "G10     0NN ", "E10     0NN ", "B10     0NN ", "S1    0NN ", "S10     0NN "], "nonMatches": [" GIR  0AA", "   EC0  Y      0NN ", "   WC1   X      0NN ", "   WC1   W      0NN ", "   WC1   V      0NN ", "   WC1   R      0NN ", "   WC1   P      0NN ", "   WC1   N      0NN ", "   WC1   M      0NN ", "   WC1   H      0NN ", "   WC1   E      0NN ", "   WC1   C      0NN ", "   WC1   B      0NN ", "   WC1   A      0NN ", "   WC0   Y      0NN ", " W1U     0NN ", " W1T     0NN ", " W1S     0NN ", " W1K     0NN ", " W1J     0NN ", " W1I     0NN ", " W1A     0NN ", " W10     0NN ", "   WS  00     0NN ", "   WR  00     0NN ", "   WN  00     0NN ", "   WF  00     0NN ", "   WD  00     0NN ", "   WB  00     0NN ", "   WA  00     0NN ", "   TS  00     0NN ", "   TR  00     0NN ", "   TQ  00     0NN ", "   TN  00     0NN ", "   TF  00     0NN ", "   TD  00     0NN ", "   TB  00     0NN ", "   TA  00     0NN ", "   SW  00     0NN ", "   ST  00     0NN ", "   SS  00     0NN ", "   SR  00     0NN ", "   SL  00     0NN ", "   SK  00     0NN ", "   SG  00     0NN ", "   SE  00     0NN ", "   SB  00     0NN ", "   SA  00     0NN ", "   RH  00     0NN ", "   RG  00     0NN ", "   RA  00     0NN ", "   PO  00     0NN ", "   PL  00     0NN ", "   PH  00     0NN ", "   PE  00     0NN ", "   PB  00     0NN ", "   PA  00     0NN ", "   OL  00     0NN ", "   OA  00     0NN ", "   NR  00     0NN ", "   NP  00     0NN ", "   NN  00     0NN ", "   NG  00     0NN ", "   NE  00     0NN ", "   NA  00     0NN ", "   MK  00     0NN ", "   ME  00     0NN ", "   MA  00     0NN ", "   LS  00     0NN ", "   LN  00     0NN ", "   LL  00     0NN ", "   LE  00     0NN ", "   LD  00     0NN ", "   LB  00     0NN ", "   LA  00     0NN ", "   KW  00     0NN ", "   KT  00     0NN ", "   KB  00     0NN ", "   KA  00     0NN ", "   IP  00     0NN ", "   IM  00     0NN ", "   IG  00     0NN ", "   IA  00     0NN ", "   HU  00     0NN ", "   HS  00     0NN ", "   HR  00     0NN ", "   HP  00     0NN ", "   HG  00     0NN ", "   HD  00     0NN ", "   HB  00     0NN ", "   HA  00     0NN ", "   GU  00     0NN ", "   GL  00     0NN ", "   GA  00     0NN ", "   FK  00     0NN ", "   FA  00     0NN ", "   EN  00     0NN ", "   EH  00     0NN ", "   EA  00     0NN ", "   DT  00     0NN ", "   DN  00     0NN ", "   DL  00     0NN ", "   DH  00     0NN ", "   DG  00     0NN ", "   DE  00     0NN ", "   DD  00     0NN ", "   DB  00     0NN ", "   DA  00     0NN ", "   CV  00     0NN ", "   CT  00     0NN ", "   CR  00     0NN ", "   CO  00     0NN ", "   CM  00     0NN ", "   CH  00     0NN ", "   CF  00     0NN ", "   CC  00     0NN ", "   CB  00     0NN ", "   CA  00     0NN ", "   BS  00     0NN ", "   BR  00     0NN ", "   BN  00     0NN ", "   BL  00     0NN ", "   BH  00     0NN ", "   BD  00     0NN ", "   BC  00     0NN ", "   BB  00     0NN ", "   BA  00     0NN ", "   AL  000     0NN ", "   AL  0     0NN ", "   AB  00     0NN ", "   AA  00     0NN ", " W0      0NN ", "S10     0NNN ", "S10     0N ", "S10     0CN ", "S100     0NN ", "S00     0NN ", "A10     0NN ", " GIR0AA", "  SW1   Y     0NN ", "   EC1  Y     0NN ", "   WC1   Y     0NN ", " W1W    0NN ", "   ZE  0    0NN ", "   YO  0    0NN ", "   WV  0    0NN ", "   UB  0    0NN ", "   TW  0    0NN ", "   SY  0    0NN ", "   RM  0    0NN ", "   PR  0    0NN ", "   OX  0    0NN ", "   NW  0    0NN ", "   ML  0    0NN ", "   LU  0    0NN ", "   KY  0    0NN ", "   JE  0    0NN ", "   IV  0    0NN ", "   HX  0    0NN ", "   GY  0    0NN ", "   FY  0    0NN ", "   EX  0    0NN ", "   DY  0    0NN ", "   CW  0    0NN ", "   BT  0    0NN ", "   AL  0    0NN ", " W2     0NN ", " GIR 0AA", "  SW1   Y      0NN ", "   EC1  Y      0NN ", "   WC1   Y      0NN ", " W1W     0NN ", "   ZE  00     0NN ", "   YO  00     0NN ", "   WV  00     0NN ", "   UB  00     0NN ", "   TW  00     0NN ", "   SY  00     0NN ", "   RM  00     0NN ", "   PR  00     0NN ", "   OX  00     0NN ", "   NW  00     0NN ", "   ML  00     0NN ", "   LU  00     0NN ", "   KY  00     0NN ", "   JE  00     0NN ", "   IV  00     0NN ", "   HX  00     0NN ", "   GY  00     0NN ", "   FY  00     0NN ", "   EX  00     0NN ", "   DY  00     0NN ", "   CW  00     0NN ", "   BT  00     0NN ", "   AL  00     0NN ", " W2      0NN "]}, {"regex": "((v|[\\\\/])\\W*[i1]\\W*[a@]\\W*g\\W*r\\W*[a@]|v\\W*[i1]\\W*[c]\\W*[o0]\\W*d\\W*[i1]\\W*n)", "exceptionStackTrace": null, "matches": ["v;1;c;0;d;1;;n", "v;1;c;0;d;1n", "v;1;c;0;d;1\\n", "v;1;c;0;d;1@n", "v;1;c;0;d;1/n", "v;1;c;0;d;1 n", "v;1;c;0;d;i;n", "v;1;c;0;d;;1;n", "v;1;c;0;d1;n", "v;1;c;0;d\\1;n", "v;1;c;0;d@1;n", "v;1;c;0;d/1;n", "v;1;c;0;d 1;n", "v;1;c;0;;d;1;n", "v;1;c;0d;1;n", "v;1;c;0\\d;1;n", "v;1;c;0@d;1;n", "v;1;c;0/d;1;n", "v;1;c;0 d;1;n", "v;1;c;o;d;1;n", "v;1;c;;0;d;1;n", "v;1;c0;d;1;n", "v;1;c\\0;d;1;n", "v;1;c@0;d;1;n", "v;1;c/0;d;1;n", "v;1;c 0;d;1;n", "v;1;;c;0;d;1;n", "v;1c;0;d;1;n", "v;1\\c;0;d;1;n", "v;1@c;0;d;1;n", "v;1/c;0;d;1;n", "v;1 c;0;d;1;n", "v;i;c;0;d;1;n", "v;;1;c;0;d;1;n", "v1;c;0;d;1;n", "v\\1;c;0;d;1;n", "v@1;c;0;d;1;n", "v/1;c;0;d;1;n", "v 1;c;0;d;1;n", "\\;1;@;g;r;@", "v;1;@;g;r;a", "v;1;@;g;r;;@", "v;1;@;g;r@", "v;1;@;g;ra@", "v;1;@;g;r\\@", "v;1;@;g;r@@", "v;1;@;g;r/@", "v;1;@;g;r @", "v;1;@;g;;r;@", "v;1;@;gr;@", "v;1;@;g\\r;@", "v;1;@;g@r;@", "v;1;@;g/r;@", "v;1;@;g r;@", "v;1;@;;g;r;@", "v;1;@g;r;@", "v;1;@ag;r;@", "v;1;@\\g;r;@", "v;1;@@g;r;@", "v;1;@/g;r;@", "v;1;@ g;r;@", "v;1;a;g;r;@", "v;1;;@;g;r;@", "v;1@;g;r;@", "v;1a@;g;r;@", "v;1\\@;g;r;@", "v;1@@;g;r;@", "v;1/@;g;r;@", "v;1 @;g;r;@", "v;i;@;g;r;@", "v;;1;@;g;r;@", "v1;@;g;r;@", "v\\1;@;g;r;@", "v@1;@;g;r;@", "v/1;@;g;r;@", "v 1;@;g;r;@", "v1c0d1n", "/1@gr@", "v1@gr@", "v;1;c;0;d;1;n", "/;1;@;g;r;@", "v;1;@;g;r;@"], "nonMatches": ["v;1;c;0;d;1an", "v;1;c;0;d;1_n", "v;1;c;0;d;1An", "v;1;c;0;d;10n", "v;1;c;0;d;a;n", "v;1;c;0;d;0;n", "v;1;c;0;da1;n", "v;1;c;0;d_1;n", "v;1;c;0;dA1;n", "v;1;c;0;d01;n", "v;1;c;0ad;1;n", "v;1;c;0_d;1;n", "v;1;c;0Ad;1;n", "v;1;c;00d;1;n", "v;1;c;a;d;1;n", "v;1;c;1;d;1;n", "v;1;ca0;d;1;n", "v;1;c_0;d;1;n", "v;1;cA0;d;1;n", "v;1;c00;d;1;n", "v;1ac;0;d;1;n", "v;1_c;0;d;1;n", "v;1Ac;0;d;1;n", "v;10c;0;d;1;n", "v;a;c;0;d;1;n", "v;0;c;0;d;1;n", "va1;c;0;d;1;n", "v_1;c;0;d;1;n", "vA1;c;0;d;1;n", "v01;c;0;d;1;n", "v;1;@;g;r;b", "v;1;@;g;r_@", "v;1;@;g;rA@", "v;1;@;g;r0@", "v;1;@;gar;@", "v;1;@;g_r;@", "v;1;@;gAr;@", "v;1;@;g0r;@", "v;1;@_g;r;@", "v;1;@Ag;r;@", "v;1;@0g;r;@", "v;1;b;g;r;@", "v;1_@;g;r;@", "v;1A@;g;r;@", "v;10@;g;r;@", "v;a;@;g;r;@", "v;0;@;g;r;@", "va1;@;g;r;@", "v_1;@;g;r;@", "vA1;@;g;r;@", "v01;@;g;r;@"]}, {"regex": "^(([A-Z])([a-zA-Z0-9]+)?)(\\:)(\\d+)$", "exceptionStackTrace": null, "matches": ["Aevil:00", "Aevilevil:0", "AeVil:0", "AEVIL:0", "Aev4il:0", "Ae:0", "A6:0", "A:0", "Aevil:0"], "nonMatches": ["Aevil:", "Aev_il:0", "Aev il:0", "A :0", "A_:0"]}, {"regex": "^\\d+\\*\\d+\\*\\d+$", "exceptionStackTrace": null, "matches": ["0*0*00", "0*00*0", "00*0*0", "0*0*0"], "nonMatches": ["0*0*", "0**0", "*0*0"]}, {"regex": "<a.+?href\\=(?<link>.+?)(?=[>\\s]).*?>(?<lnkText>.+?)</a>", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<l"}, "matches": []}, {"regex": "<style.*?>(?<StyledText>.*)<\\s*?/\\s*?style.*?>", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<S"}, "matches": []}, {"regex": "(?<Time>^(?:0?[1-9]:[0-5]|1(?=[012])\\d:[0-5])\\d(?:[ap]m)?)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<T"}, "matches": []}, {"regex": "(?:(?<protocol>http(?:s?)|ftp)(?:\\:\\/\\/))\n(?:(?<usrpwd>\\w+\\:\\w+)(?:\\@))?\n(?<domain>[^/\\r\\n\\:]+)?\n(?<port>\\:\\d+)?\n(?<path>(?:\\/.*)*\\/)?\n(?<filename>.*?\\.(?<ext>\\w{2,4}))?\n(?<qrystr>\\??(?:\\w+\\=[^\\#]+)(?:\\&?\\w+\\=\\w+)*)*\n(?<bkmrk>\\#.*)?", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<p"}, "matches": []}, {"regex": "^\\({0,1}((0|\\+61)(2|4|3|7|8)){0,1}\\){0,1}(\\ |-){0,1}[0-9]{2}(\\ |-){0,1}[0-9]{2}(\\ |-){0,1}[0-9]{1}(\\ |-){0,1}[0-9]{3}$", "exceptionStackTrace": null, "matches": ["(02) 00 00 0000", "(02) 00 000 000", "(02) 0000 0 000", "(02)00 00 0 000", "(02 00 00 0 000", "() 00 00 0 000", "02) 00 00 0 000", "00000000", "(+612) 00 00 0 000", "(08) 00 00 0 000", "(07) 00 00 0 000", "(03) 00 00 0 000", "(04) 00 00 0 000", "(02)-00 00 0 000", "(02) 00-00 0 000", "(02) 00 00-0 000", "(02) 00 00 0-000", "(02) 00 00 0 000"], "nonMatches": ["(02) 00 00 0 0000", "(02) 00 00 0 00", "(02) 00 00 0  000", "(02) 00 00 00 000", "(02) 00 00  000", "(02) 00 00  0 000", "(02) 00 000 0 000", "(02) 00 0 0 000", "(02) 00  00 0 000", "(02) 000 00 0 000", "(02) 0 00 0 000", "(02)  00 00 0 000", "(02)) 00 00 0 000", "(0202) 00 00 0 000", "((02) 00 00 0 000"]}, {"regex": "^[0-9#\\*abcdABCD]+$", "exceptionStackTrace": null, "matches": ["DD", "d", "c", "b", "a", "C", "B", "A", "0", "*", "#", "D"], "nonMatches": ["", "e", "E"]}, {"regex": "^[0-9]+(,[0-9]+)*$", "exceptionStackTrace": null, "matches": ["0,0,0", "0,00", "00,0", "0", "0,0"], "nonMatches": ["0,", ",0"]}, {"regex": "([0-9]+)\\s(d)\\s(([0-1][0-9])|([2][0-3])):([0-5][0-9]):([0-5][0-9])", "exceptionStackTrace": null, "matches": ["00 d 00:00:00", "0 d 20:00:00", "0 d 00:00:00"], "nonMatches": ["0 d 24:00:00", "0 d 00:00:60", "0 d 00:60:00", " d 00:00:00"]}, {"regex": "Mireage Imperial", "exceptionStackTrace": null, "matches": ["Mireage Imperial"], "nonMatches": []}, {"regex": "Removed", "exceptionStackTrace": null, "matches": ["Removed"], "nonMatches": []}, {"regex": "Herbal extract medicine for diabetes ", "exceptionStackTrace": null, "matches": ["Herbal extract medicine for diabetes "], "nonMatches": []}, {"regex": "LED Test Laboratories", "exceptionStackTrace": null, "matches": ["LED Test Laboratories"], "nonMatches": []}, {"regex": "herbal diabetes medicine", "exceptionStackTrace": null, "matches": ["herbal diabetes medicine"], "nonMatches": []}, {"regex": "Herbal Extract Medicine", "exceptionStackTrace": null, "matches": ["Herbal Extract Medicine"], "nonMatches": []}, {"regex": "Building Material Testing", "exceptionStackTrace": null, "matches": ["Building Material Testing"], "nonMatches": []}, {"regex": "RO Water purifier ", "exceptionStackTrace": null, "matches": ["RO Water purifier "], "nonMatches": []}, {"regex": "herbal diabetes medicine", "exceptionStackTrace": null, "matches": ["herbal diabetes medicine"], "nonMatches": []}, {"regex": "^[a-zA-Z]{3}[uU]{1}[0-9]{7}$", "exceptionStackTrace": null, "matches": ["AAAu0000000", "aAAU0000000", "AAAU0000000"], "nonMatches": ["AAAU00000000", "AAAU000000", "AAAUU0000000", "AAA0000000", "AAAa0000000", "AAAA0000000", "AAAAU0000000", "AAU0000000"]}, {"regex": "^\\+?\\d{2}|\\0(?:\\-?|\\ ?)(?:\\([2-9]\\d{2}\\)\\ ?|[2-9]\\d{2}(?:\\-?|\\ ?))[2-9]\\d{2}[- ]?\\d{4}$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\0"}, "matches": [], "nonMatches": []}, {"regex": "^[1-4]{1}[0-9]{4}(-)?[0-9]{7}(-)?[0-9]{1}$", "exceptionStackTrace": null, "matches": ["10000-00000000", "100000000000-0", "1000000000000", "10000-0000000-0"], "nonMatches": ["10000-0000000-00", "10000-0000000-", "10000-0000000--0", "10000-00000000-0", "10000-000000-0", "10000--0000000-0", "100000-0000000-0", "1000-0000000-0", "110000-0000000-0", "0000-0000000-0", "00000-0000000-0"]}, {"regex": "src[^&gt;]*[^/].(?:jpg|bmp|gif)(?:\\&quot;|\\&#39;)", "exceptionStackTrace": null, "matches": ["srcevilaAjpg&quot;", "srcevila;jpg&quot;", "srcevila0jpg&quot;", "srcevila/jpg&quot;", "srcevila&jpg&quot;", "srcevila#jpg&quot;", "srcevila jpg&quot;", "srcevilAajpg&quot;", "srcevil;ajpg&quot;", "srcevil0ajpg&quot;", "srcevil&ajpg&quot;", "srcevil#ajpg&quot;", "srcevil ajpg&quot;", "src/aajpg&quot;", "src#aajpg&quot;", "srceVilaajpg&quot;", "srcEVILaajpg&quot;", "srcev_ilaajpg&quot;", "srcev ilaajpg&quot;", "srcev4ilaajpg&quot;", "srceaajpg&quot;", "src aajpg&quot;", "src6aajpg&quot;", "src_aajpg&quot;", "srcaagif&quot;", "srcaabmp&quot;", "srcaajpg&#39;", "srcaajpg&quot;", "srcevilaagif&quot;", "srcevilaabmp&quot;", "srcevilaajpg&#39;", "srcevilaajpg&quot;"], "nonMatches": ["srcevil/ajpg&quot;", "src;aajpg&quot;", "src&aajpg&quot;"]}, {"regex": "\\[bible[=]?([a-z&#228;&#235;&#239;&#246;&#252;&#230;&#248;]*)\\]((([0-9][[:space:]]?)?[a-z&#228;&#235;&#239;&#246;&#252;&#230;&#248;]*[[:space:]]{1}([a-z&#228;&#235;&#239;&#246;&#252;&#230;&#248;]*[[:space:]]?[a-z&#228;&#235;&#239;&#246;&#252;&#230;&#248;]*[[:space:]]{1})?)([0-9]{1,3})(:{1}([0-9]{1,3})(-{1}([0-9]{1,3}))?)?)\\[\\\\/bible\\]", "exceptionStackTrace": null, "matches": ["[bible=evil]0:]evil:]evil:]evil:]0[\\/bible]", "[bible=evil]0:]evil:]evil:]evil:]0:0[\\/bible]", "[bible=evil]0:]evil:]evil:]evil:]0:0-000[\\/bible]", "[bible=evil]0:]evil:]evil:]evil:]0:00[\\/bible]", "[bible=evil]0:]evil:]evil:]evil:]0:000-0[\\/bible]", "[bible=evil]0:]evil:]evil:]evil:]000:0-0[\\/bible]", "[bible=evil]0:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]evils]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]evilp]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]evile]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]evilc]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]evila]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]evil[]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:];:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]&:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]#:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]ev4il:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]e:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]6:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evils]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evilp]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evile]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evilc]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evila]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil[]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:];:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]&:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]#:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]ev4il:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]e:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]6:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evils]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evilp]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evile]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evilc]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evila]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil[]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:];:]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]&:]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]#:]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]ev4il:]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]e:]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]6:]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]:]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:evil:]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0s]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0p]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0e]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0c]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0a]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0[]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible=;]0:]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible=&]0:]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible=#]0:]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible=ev4il]0:]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible=e]0:]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible=6]0:]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible=]0:]evil:]evil:]evil:]0:0-0[\\/bible]", "[bibleevil]0:]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible]:]0[\\/bible]", "[bible=evil]0:]evil:]evil:]evil:]0:0-0[\\/bible]"], "nonMatches": ["[bible=evil]0:]evil:]evil:]evil:]0:0-0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]evil:]0:0-0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]evil:]0:0-0000[\\/bible]", "[bible=evil]0:]evil:]evil:]evil:]0:0-[\\/bible]", "[bible=evil]0:]evil:]evil:]evil:]0:0--0[\\/bible]", "[bible=evil]0:]evil:]evil:]evil:]0:0000-0[\\/bible]", "[bible=evil]0:]evil:]evil:]evil:]0:-0[\\/bible]", "[bible=evil]0:]evil:]evil:]evil:]0::0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]evil:]00-0[\\/bible]", "[bible=evil]0:]evil:]evil:]evil:]0000:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]evil:]:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]evil:]]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]evil:0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]evilb]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]]:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]\\:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:][:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]=:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]::]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]/:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]-:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]eVil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]EVIL:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]ev_il:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]ev il:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:] :]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]_:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evil:]]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]evilb]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]]:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]\\:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:][:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]=:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]::]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]/:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]-:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]eVil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]EVIL:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]ev_il:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]ev il:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:] :]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]_:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:]]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evil:evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]evilb]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]]:]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]\\:]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:][:]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]=:]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]::]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]/:]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]-:]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]eVil:]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]EVIL:]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]ev_il:]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]ev il:]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:] :]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]_:]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]0:]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0:]]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible=evil]0b]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible=]]0:]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible=\\]0:]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible=[]0:]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible==]0:]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible=:]0:]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible=/]0:]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible=-]0:]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible=eVil]0:]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible=EVIL]0:]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible=ev_il]0:]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible=ev il]0:]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible= ]0:]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible=_]0:]evil:]evil:]evil:]0:0-0[\\/bible]", "[bible==evil]0:]evil:]evil:]evil:]0:0-0[\\/bible]"]}, {"regex": "^(\\d|-)?(\\d|,)*\\.?\\d*$", "exceptionStackTrace": null, "matches": ["00.00", "00.", "000", "000.0", "0.0", "", "-0.0", "0,.0", "00.0"], "nonMatches": ["00..0"]}, {"regex": "^(\\d|,)*\\.?\\d*$", "exceptionStackTrace": null, "matches": ["0.00", "0.", "00", "00.0", ".0", "", ",.0", "0.0"], "nonMatches": ["0..0"]}, {"regex": "^(([1-9][0-9]{0,3}|[1-4][0-9]{4}|5([0-8][0-9]{3}|9([0-2][0-9]{2}|3([0-8][0-9]|9[01]))))|(6(4(5(1[2-9]|[2-9][0-9])|[6-9][0-9]{2})|5([0-4][0-9]{2}|5([0-2][0-9]|3[0-4]))))|(1(3(1(0(7[2-9]|[89][0-9])|[1-9][0-9]{2})|[2-9][0-9]{3})|[4-9][0-9]{4})|[2-9][0-9]{5}|[1-9][0-9]{6,8}|[1-3][0-9]{9}|4([01][0-9]{8}|2([0-8][0-9]{7}|9([0-3][0-9]{6}|4([0-8][0-9]{5}|9([0-5][0-9]{4}|6([0-6][0-9]{3}|7([01][0-9]{2}|2([0-8][0-9]|9[0-4]))))))))))$", "exceptionStackTrace": null, "matches": ["429496710", "429496000", "4294967000", "429490000", "429400000", "429000000", "420000000", "410000000", "4000000000", "100000000", "2000000", "20000", "1400000", "14000", "1320000", "13200", "1311000", "13110", "131080", "650000", "6500", "646000", "6460", "59390", "590000", "5900", "500000", "5000", "1000", "1", "4294967290", "4294967200", "4294967100", "4294960000", "4294900000", "4294000000", "4290000000", "4200000000", "4100000000", "1000000000", "1000000", "200000", "140000", "132000", "131100", "131090", "131072", "65530", "65500", "65000", "64600", "64520", "64512", "59391", "59300", "59000", "50000", "10000", "10"], "nonMatches": ["4294967295", "42949671000", "42949600000", "42949000000", "42940000000", "42900000000", "42000000000", "41000000000", "10000000000", "0000000000", "0000000", "000000", "130000", "131000", "131070", "65535", "64000", "64500", "64510", "59392", "100000", "00000", "00"]}, {"regex": "^((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))$", "exceptionStackTrace": null, "matches": ["250.0.0.0", "200.0.0.0", "100.0.0.0", "10.0.0.0", "0.250.0.0", "0.200.0.0", "0.100.0.0", "0.10.0.0", "0.0.250.0", "0.0.200.0", "0.0.100.0", "0.0.10.0", "0.0.0.250", "0.0.0.200", "0.0.0.100", "0.0.0.10", "0.0.0.0"], "nonMatches": ["256.0.0.0", "00.0.0.0", "0.256.0.0", "0.00.0.0", "0.0.256.0", "0.0.00.0", "0.0.0.256", "0.0.0.00"]}, {"regex": "^([0-1]?[0-9]{1}/[0-3]?[0-9]{1}/20[0-9]{2})$", "exceptionStackTrace": null, "matches": ["00/0/2000", "0/00/2000", "0/0/2000", "00/00/2000"], "nonMatches": ["00/00/20000", "00/00/200", "00/000/2000", "00/40/2000", "000/00/2000", "20/00/2000"]}, {"regex": "1?(?:[.\\s-]?[2-9]\\d{2}[.\\s-]?|\\s?\\([2-9]\\d{2}\\)\\s?)(?:[1-9]\\d{2}[.\\s-]?\\d{4}\\s?(?:\\s?([xX]|[eE][xX]|[eE][xX]\\.|[eE][xX][tT]|[eE][xX][tT]\\.)\\s?\\d{3,4})?|[a-zA-Z]{7})", "exceptionStackTrace": null, "matches": ["1 (200)100-0000  X 000", "1  (200) 100-0000  X 000", "1(200) 100-0000  X 000", "1-200-AAAAAAAA", "1-200-aAAAAAA", "1-200-100-0000  EXt. 000", "1-200-100-0000  EXa. 000", "1-200-100-0000  EXA. 000", "1-200-100-0000  ExT. 000", "1-200-100-0000  EaT. 000", "1-200-100-0000  EAT. 000", "1-200-100-0000  eXT. 000", "1-200-100-0000  aXT. 000", "1-200-100-0000  AXT. 000", "1-200-100-0000  EXt 000", "1-200-100-0000  EXa 000", "1-200-100-0000  EXA 000", "1-200-100-0000  ExT 000", "1-200-100-0000  EaT 000", "1-200-100-0000  EAT 000", "1-200-100-0000  eXT 000", "1-200-100-0000  aXT 000", "1-200-100-0000  AXT 000", "1-200-100-0000  Ex. 000", "1-200-100-0000  Ea. 000", "1-200-100-0000  EA. 000", "1-200-100-0000  eX. 000", "1-200-100-0000  aX. 000", "1-200-100-0000  AX. 000", "1-200-100-0000  Ex 000", "1-200-100-0000  Ea 000", "1-200-100-0000  EA 000", "1-200-100-0000  eX 000", "1-200-100-0000  aX 000", "1-200-100-0000  AX 000", "1-200-100-0000  X 000 X 000", "1-200-100-0000 ", "1-200-100-0000  X 00000", "1-200-100-0000  X 0000", "1-200-100-0000  X 00", "1-200-100-0000  X  000", "1-200-100-0000  X000", "1-200-100-0000  x 000", "1-200-100-0000  a 000", "1-200-100-0000  A 000", "1-200-100-0000   X 000", "1-200-100-0000 X 000", "1-200-100-00000  X 000", "1-200-1000000  X 000", "1-200-100.0000  X 000", "1-200-100 0000  X 000", "1-200100-0000  X 000", "1-200.100-0000  X 000", "1-200 100-0000  X 000", "1--200-100-0000  X 000", "1200-100-0000  X 000", "1.200-100-0000  X 000", "1 200-100-0000  X 000", "11-200-100-0000  X 000", "-200-100-0000  X 000", "(200)1000000", "200AAAAAAA", "2001000000", "1 (200) 100-0000  X 000", "1-200-AAAAAAA", "1-200-100-0000  EXT. 000", "1-200-100-0000  EXT 000", "1-200-100-0000  EX. 000", "1-200-100-0000  EX 000", "1-200-100-0000  X 000"], "nonMatches": ["1 (200)  100-0000  X 000", "1 (2000) 100-0000  X 000", "1 (20) 100-0000  X 000", "1 (000) 100-0000  X 000", "1-200-AAAAAA", "1-200-100-000  X 000", "1-200-100--0000  X 000", "1-200-1000-0000  X 000", "1-200-10-0000  X 000", "1-200-000-0000  X 000", "1-200--100-0000  X 000", "1-2000-100-0000  X 000", "1-20-100-0000  X 000", "1-000-100-0000  X 000"]}, {"regex": "for an extended time.", "exceptionStackTrace": null, "matches": ["for an extended time_", "for an extended timeA", "for an extended time0", "for an extended time ", "for an extended timea"], "nonMatches": []}, {"regex": "^\\d(\\.\\d{1,2})?$", "exceptionStackTrace": null, "matches": ["0.00", "0", "0.0"], "nonMatches": ["0.0.0", "0.000", "0."]}, {"regex": "^(-?)(((\\d{1,3})(,\\d{3})*)|(\\d+))(\\.\\d{1,2})?$", "exceptionStackTrace": null, "matches": ["-00.0", "-0,000", "-0,000.00", "-0,000,000.0", "-000,000.0", "0,000.0", "0", "-0.0", "-0,000.0"], "nonMatches": ["-.0", "-0,000.0.0", "-0,000.000", "-0,000.", "-0,0000.0", "-0,00.0", "-0000,000.0", "-,000.0", "--0,000.0"]}, {"regex": "^((((19[0-9][0-9])|(2[0-9][0-9][0-9]))([-])(0[13578]|10|12)([-])(0[1-9]|[12][0-9]|3[01]))|(((19[0-9][0-9])|(2[0-9][0-9][0-9]))([-])(0[469]|11)([-])([0][1-9]|[12][0-9]|30))|(((19[0-9][0-9])|(2[0-9][0-9][0-9]))([-])(02)([-])(0[1-9]|1[0-9]|2[0-8]))|(([02468][048]00)([-])(02)([-])(29))|(([13579][26]00)([-])(02)([-])(29))|(([0-9][0-9][0][48])([-])(02)([-])(29))|(([0-9][0-9][2468][048])([-])(02)([-])(29))|(([0-9][0-9][13579][26])([-])(02)([-])(29)))$", "exceptionStackTrace": null, "matches": ["0092-02-29", "0076-02-29", "0056-02-29", "0036-02-29", "0016-02-29", "0084-02-29", "0080-02-29", "0068-02-29", "0048-02-29", "0028-02-29", "0004-02-29", "0000-02-29", "9200-02-29", "7600-02-29", "5600-02-29", "3600-02-29", "1600-02-29", "8400-02-29", "8000-02-29", "6800-02-29", "4800-02-29", "2800-02-29", "0800-02-29", "1900-09-10", "1900-06-01", "1900-04-01", "1900-08-30", "1900-08-10", "1900-07-01", "1900-05-01", "1900-03-01", "1900-01-01", "0096-02-29", "0088-02-29", "0008-02-29", "9600-02-29", "8800-02-29", "2000-02-01", "1900-02-20", "1900-02-10", "1900-02-01", "2000-09-01", "1900-11-01", "1900-09-30", "1900-09-20", "1900-09-01", "2000-08-01", "1900-12-01", "1900-10-01", "1900-08-31", "1900-08-20", "1900-08-01"], "nonMatches": ["0090-02-29", "0006-02-29", "0081-02-29", "9000-02-29", "0600-02-29", "8100-02-29", "1800-02-29", "1900-02-29", "1900-02-00", "1900-09-00", "1900-08-32", "1900-08-00", "1900-00-01"]}, {"regex": "^(((0[1-9]|[12][0-9]|3[01])([\\.])(0[13578]|10|12)([\\.])((19[0-9][0-9])|(2[0-9][0-9][0-9])))|(([0][1-9]|[12][0-9]|30)([\\.])(0[469]|11)([\\.])((19[0-9][0-9])|(2[0-9][0-9][0-9])))|((0[1-9]|1[0-9]|2[0-8])([\\.])(02)([\\.])((19[0-9][0-9])|(2[0-9][0-9][0-9])))|((29)([\\.])(02)([\\.])([02468][048]00))|((29)([\\.])(02)([\\.])([13579][26]00))|((29)([\\.])(02)([\\.])([0-9][0-9][0][48]))|((29)([\\.])(02)([\\.])([0-9][0-9][2468][048]))|((29)([\\.])(02)([\\.])([0-9][0-9][13579][26])))$", "exceptionStackTrace": null, "matches": ["29.02.0092", "29.02.0076", "29.02.0056", "29.02.0036", "29.02.0016", "29.02.0084", "29.02.0080", "29.02.0068", "29.02.0048", "29.02.0028", "29.02.0004", "29.02.0000", "29.02.9200", "29.02.7600", "29.02.5600", "29.02.3600", "29.02.1600", "29.02.8400", "29.02.8000", "29.02.6800", "29.02.4800", "29.02.2800", "29.02.0800", "10.09.1900", "01.06.1900", "01.04.1900", "30.08.1900", "10.08.1900", "01.07.1900", "01.05.1900", "01.03.1900", "01.01.1900", "29.02.0096", "29.02.0088", "29.02.0008", "29.02.9600", "29.02.8800", "20.02.1900", "10.02.1900", "01.02.2000", "01.02.1900", "30.09.1900", "20.09.1900", "01.11.1900", "01.09.2000", "01.09.1900", "31.08.1900", "20.08.1900", "01.12.1900", "01.10.1900", "01.08.2000", "01.08.1900"], "nonMatches": ["29.02.0090", "29.02.0006", "29.02.0081", "29.02.9000", "29.02.0600", "29.02.8100", "29.02.1800", "29.02.1900", "00.02.1900", "00.09.1900", "32.08.1900", "01.00.1900", "00.08.1900"]}, {"regex": "([0-9]{11}$)|(^[7-9][0-9]{9}$)", "exceptionStackTrace": null, "matches": ["70000000000", "000000000000", "7000000000", "00000000000"], "nonMatches": ["700000000", "0000000000"]}, {"regex": "(?!\\b(xx|yy)\\b)\\b[\\w]+\\b", "exceptionStackTrace": null, "matches": ["eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", "6", "_", "evil"], "nonMatches": [" ", ""]}, {"regex": "^(?:[2-9]\\d\\d\\d)-(?:1[012]|0?[1-9])?-(?:31(?!.(?:0?[2469]|11))|(?:30|29)(?!.0?2)|29(?=.0?2.(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(?:T))|(?:2[0-8]|1\\d|0?[1-9]))T(2[01234]|[01]\\d):[0-5]\\d:[0-5]\\d[+-][01]\\d:[0-5]\\d$", "exceptionStackTrace": null, "matches": ["2000-12-1T24:00:00-10:00", "2000-12-31T00:00:00-10:00", "2000--1T24:00:00-10:00", "2000--10T24:00:00-10:00", "2000--20T24:00:00-10:00", "2000--31T10:00:00-10:00", "2000-12-01T24:00:00-10:00", "2000-12-10T24:00:00-10:00", "2000-12-20T24:00:00-10:00", "2000-12-31T10:00:00-10:00"], "nonMatches": ["2000-00-31T24:00:00-10:00", "2000-001-31T24:00:00-10:00", "2000-1-31T24:00:00-10:00", "2000-12-00T24:00:00-10:00", "2000-12-001T24:00:00-10:00", "2000-12-31T24:00:00-10:60", "2000-12-31T24:00:00-20:00", "2000-12-31T24:00:00-00:00", "2000-12-31T24:00:00+10:00", "2000-12-31T24:00:60-10:00", "2000-12-31T24:60:00-10:00", "2000-12-31T25:00:00-10:00", "2000-12-31T23:00:00-10:00", "2000-12-31T22:00:00-10:00", "2000-12-31T21:00:00-10:00", "2000-12-31T20:00:00-10:00", "2000-1212-31T24:00:00-10:00", "2000-13-31T24:00:00-10:00", "2000-11-31T24:00:00-10:00", "2000-10-31T24:00:00-10:00", "0000-12-31T24:00:00-10:00", "2000--29T24:00:00-10:00", "2000--30T24:00:00-10:00", "2000--31T24:00:00-10:00", "2000-01-31T24:00:00-10:00", "2000-12-29T24:00:00-10:00", "2000-12-30T24:00:00-10:00", "2000-12-31T24:00:00-10:00"]}, {"regex": "^[a-zA-Z\\d]+(([\\&#39;\\,\\.\\- #][a-zA-Z\\d ])?[a-zA-Z\\d]*[\\.]*)*$", "exceptionStackTrace": null, "matches": ["evil# evil.# evil.", "evil# evil..", "evil# evil", "evil# eVil.", "evil# EVIL.", "evil# ev il.", "evil# ev4il.", "evil# e.", "evil# 6.", "evil# .", "evil# # evil.", "evilevil.", "evil#aevil.", "evil#Aevil.", "evil#0evil.", "evil; evil.", "evil9 evil.", "evil3 evil.", "evil0 evil.", "evil. evil.", "evil- evil.", "evil, evil.", "evil& evil.", "evil  evil.", "eVil# evil.", "EVIL# evil.", "ev il# evil.", "ev4il# evil.", "e# evil.", "6# evil.", "evil", "evil# evil."], "nonMatches": ["evil# ev_il.", "evil#  .", "evil# _.", "ev_il# evil.", " # evil.", "_# evil.", "# evil."]}, {"regex": "^([a-zA-Z]+(.)?[\\s]*)$", "exceptionStackTrace": null, "matches": ["evila  ", "evila", "evilaa ", "evil ", "evil_ ", "evilA ", "evil0 ", "evil  ", "eVila ", "EVILa ", "ea ", "a ", "evil", "evila "], "nonMatches": ["ev_ila ", "ev ila ", "ev4ila ", " a ", "6a ", "_a "]}, {"regex": "https://www.ifirmationeyeserumblog.com/tryvexan-es/", "exceptionStackTrace": null, "matches": ["https://wwwaifirmationeyeserumblogAcom/tryvexan-es/", "https://wwwaifirmationeyeserumblog:com/tryvexan-es/", "https://wwwaifirmationeyeserumblog0com/tryvexan-es/", "https://wwwaifirmationeyeserumblog/com/tryvexan-es/", "https://wwwaifirmationeyeserumblog-com/tryvexan-es/", "https://wwwaifirmationeyeserumblog com/tryvexan-es/", "https://wwwAifirmationeyeserumblogacom/tryvexan-es/", "https://www:ifirmationeyeserumblogacom/tryvexan-es/", "https://www0ifirmationeyeserumblogacom/tryvexan-es/", "https://www/ifirmationeyeserumblogacom/tryvexan-es/", "https://www-ifirmationeyeserumblogacom/tryvexan-es/", "https://www ifirmationeyeserumblogacom/tryvexan-es/", "https://wwwaifirmationeyeserumblogacom/tryvexan-es/"], "nonMatches": []}, {"regex": "^([0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z]))$", "exceptionStackTrace": null, "matches": ["Aevila", "Aevil0", "A.A", "A-A", "AeVilA", "AEVILA", "Aev_ilA", "Aev4ilA", "AeA", "A6A", "A_A", "aevilA", "0evilA", "AA", "AevilA"], "nonMatches": ["Aev ilA", "A A"]}, {"regex": "^(.*?)([^/\\\\]*?)(\\.[^/\\\\.]*)?$", "exceptionStackTrace": null, "matches": ["evilevil.evil.evil", "evilevil", "evilevil.\\", "evilevil./", "evilevil..", "evilevil.eVil", "evilevil.EVIL", "evilevil.ev_il", "evilevil.ev il", "evilevil.ev4il", "evilevil.e", "evilevil. ", "evilevil.6", "evilevil._", "evilevil.", "evil\\.evil", "evil/.evil", "evil..evil", "evileVil.evil", "evilEVIL.evil", "evilev_il.evil", "evilev il.evil", "evilev4il.evil", "evile.evil", "evil .evil", "evil6.evil", "evil_.evil", "\\evil.evil", "/evil.evil", ".evil.evil", "eVilevil.evil", "EVILevil.evil", "ev_ilevil.evil", "ev ilevil.evil", "ev4ilevil.evil", "eevil.evil", " evil.evil", "6evil.evil", "_evil.evil", "evil.evil", "", "evilevil.evil"], "nonMatches": []}, {"regex": "(23:59:59)|([01]{1}[0-9]|2[0-3]):((00)|(15)|(30)|(45))+:(00)", "exceptionStackTrace": null, "matches": ["10:0000:00", "110:00:00", "00:00:00", "20:00:00", "10:45:00", "10:30:00", "10:15:00", "10:00:00", "23:59:59"], "nonMatches": ["24:00:00", "10::00", "0:00:00"]}, {"regex": "((0?[13578]|10|12)(-|\\/)((0[0-9])|([12])([0-9]?)|(3[01]?))(-|\\/)((\\d{4})|(\\d{2}))|(0?[2469]|11)(-|\\/)((0[0-9])|([12])([0-9]?)|(3[0]?))(-|\\/)((\\d{4}|\\d{2})))", "exceptionStackTrace": null, "matches": ["09-3-0000", "09-2-0000", "09-10-0000", "09-00-00000", "09-00-000", "06-00-0000", "04-00-0000", "02-00-0000", "009-00-0000", "08-3-0000", "08-30-0000", "08-2-0000", "08-10-0000", "08-00-00000", "08-00-000", "07-00-0000", "05-00-0000", "03-00-0000", "01-00-0000", "008-00-0000", "9/00-0000", "9-3-0000", "9-2-0000", "9-00/0000", "9-00-00", "9-00-0000", "8/00-0000", "8-3-0000", "8-2-0000", "8-00/0000", "8-00-00", "8-00-0000", "11-00-0000", "09/00-0000", "09-30-0000", "09-20-0000", "09-00/0000", "09-00-00", "09-00-0000", "12-00-0000", "10-00-0000", "08/00-0000", "08-31-0000", "08-20-0000", "08-00/0000", "08-00-00", "08-00-0000"], "nonMatches": ["09-300-0000", "09-200-0000", "09-00-0", "08-311-0000", "08-32-0000", "08-200-0000", "08-00-0", "00-00-0000"]}, {"regex": "^100$|^[0-9]{1,2}$|^[0-9]{1,2}\\,[0-9]{1,3}$", "exceptionStackTrace": null, "matches": ["0,000", "00,0", "00", "0,0", "0", "100"], "nonMatches": ["0,0000", "0,", "000,0", ",0", "000", ""]}, {"regex": "^(([0-2]\\d|[3][0-1])\\/([0]\\d|[1][0-2])\\/[2][0]\\d{2})$|^(([0-2]\\d|[3][0-1])\\/([0]\\d|[1][0-2])\\/[2][0]\\d{2}\\s([0-1]\\d|[2][0-3])\\:[0-5]\\d\\:[0-5]\\d)$", "exceptionStackTrace": null, "matches": ["30/00/2000 00:00:00", "00/10/2000 00:00:00", "00/00/2000 20:00:00", "00/00/2000 00:00:00", "30/00/2000", "00/10/2000", "00/00/2000"], "nonMatches": ["32/00/2000 00:00:00", "00/13/2000 00:00:00", "00/00/2000 24:00:00", "00/00/2000 00:00:60", "00/00/2000 00:60:00", "00/00/20000 00:00:00", "00/00/200 00:00:00", "32/00/2000", "00/13/2000", "00/00/20000", "00/00/200"]}, {"regex": "https://cleanserenewdenmark.com/perlelux/", "exceptionStackTrace": null, "matches": ["https://cleanserenewdenmarkAcom/perlelux/", "https://cleanserenewdenmark:com/perlelux/", "https://cleanserenewdenmark0com/perlelux/", "https://cleanserenewdenmark/com/perlelux/", "https://cleanserenewdenmark com/perlelux/", "https://cleanserenewdenmarkacom/perlelux/"], "nonMatches": []}, {"regex": "^((61|\\+61)?\\s?)04[0-9]{2}\\s?([0-9]{3}\\s?[0-9]{3}|[0-9]{2}\\s?[0-9]{2}\\s?[0-9]{2})$", "exceptionStackTrace": null, "matches": ["61 0400 00 0000", "61 0400 0000 00", "61 0400 000000", "61 0400000 000", "610400 000 000", " 0400 000 000", "0400000000", "+61 0400 000 000", "61 0400 00 00 00", "61 0400 000 000"], "nonMatches": ["61 0400 00 00 000", "61 0400 00 00 0", "61 0400 00 00  00", "61 0400 00 000 00", "61 0400 00 0 00", "61 0400 00  00 00", "61 0400 000 00 00", "61 0400 0 00 00", "61 0400 000 0000", "61 0400 000 00", "61 0400 000  000", "61 0400 0000 000", "61 0400 00 000", "61 0400  000 000", "61 04000 000 000", "61 040 000 000", "61  0400 000 000", "6161 0400 000 000"]}, {"regex": "oid starvation and planning hungry because you-can&#39;t find something balanced to consume.", "exceptionStackTrace": null, "matches": ["oid starvation and planning hungry because you-can&#39;t find something balanced to consumeA", "oid starvation and planning hungry because you-can&#39;t find something balanced to consume;", "oid starvation and planning hungry because you-can&#39;t find something balanced to consume0", "oid starvation and planning hungry because you-can&#39;t find something balanced to consume-", "oid starvation and planning hungry because you-can&#39;t find something balanced to consume&", "oid starvation and planning hungry because you-can&#39;t find something balanced to consume#", "oid starvation and planning hungry because you-can&#39;t find something balanced to consume ", "oid starvation and planning hungry because you-can&#39;t find something balanced to consumea"], "nonMatches": []}, {"regex": "^([0-9a-zA-Z]+(?:[_\\.\\-]?[0-9a-zA-Z]+)*[@](?:[0-9a-zA-Z]+(?:[_\\.\\-]?[0-9a-zA-Z]+)*\\.[a-zA-Z]{2,}|(?:\\d{1,}\\.){3}\\d{1,}))$", "exceptionStackTrace": null, "matches": ["evil-evil@0.0.0.00", "evil-evil@00.0.0.0", "evil-evil@evil-evil.aA", "evil-evil@evil-evil-evil.AA", "evil-evil@evil.AA", "evil-evil@evil-eVil.AA", "evil-evil@evil-EVIL.AA", "evil-evil@evil-ev_il.AA", "evil-evil@evil-ev4il.AA", "evil-evil@evil-e.AA", "evil-evil@evil-6.AA", "evil-evil@evilevil.AA", "evil-evil@evil_evil.AA", "evil-evil@evil.evil.AA", "evil-evil@eVil-evil.AA", "evil-evil@EVIL-evil.AA", "evil-evil@ev_il-evil.AA", "evil-evil@ev4il-evil.AA", "evil-evil@e-evil.AA", "evil-evil@6-evil.AA", "evil-evil-evil@evil-evil.AA", "evil@evil-evil.AA", "evil-eVil@evil-evil.AA", "evil-EVIL@evil-evil.AA", "evil-ev_il@evil-evil.AA", "evil-ev4il@evil-evil.AA", "evil-e@evil-evil.AA", "evil-6@evil-evil.AA", "evilevil@evil-evil.AA", "evil_evil@evil-evil.AA", "evil.evil@evil-evil.AA", "eVil-evil@evil-evil.AA", "EVIL-evil@evil-evil.AA", "ev_il-evil@evil-evil.AA", "ev4il-evil@evil-evil.AA", "e-evil@evil-evil.AA", "6-evil@evil-evil.AA", "evil@0.0.0.0", "evil@evil.AA", "evil-evil@0.0.0.0", "evil-evil@evil-evil.AA"], "nonMatches": ["evil-evil@0.0.0.", "evil-evil@0.0.0.0.0", "evil-evil@0.0.0", "evil-evil@.0.0.0", "evil-evil@evil-evil.A", "evil-evil@evil-ev il.AA", "evil-evil@evil- .AA", "evil-evil@evil-_.AA", "evil-evil@evil-.AA", "evil-evil@evil--evil.AA", "evil-evil@ev il-evil.AA", "evil-evil@ -evil.AA", "evil-evil@_-evil.AA", "evil-evil@-evil.AA", "evil-ev il@evil-evil.AA", "evil- @evil-evil.AA", "evil-_@evil-evil.AA", "evil-@evil-evil.AA", "evil--evil@evil-evil.AA", "ev il-evil@evil-evil.AA", " -evil@evil-evil.AA", "_-evil@evil-evil.AA", "-evil@evil-evil.AA"]}, {"regex": "(?<tagname>[^\\s]*)=&quot;(?<tagvalue>[^&quot;]*)&quot;", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<t"}, "matches": []}, {"regex": "^((\\.\\./|[a-zA-Z0-9_/\\-\\\\])*\\.[a-zA-Z0-9]+)$", "exceptionStackTrace": null, "matches": ["a.evil", "_.evil", "A.evil", "0.evil", "/.evil", "-.evil", "../.eVil", "../.EVIL", "../.ev4il", "../.e", "../.6", "../../.evil", ".evil", "\\.evil", "../.evil"], "nonMatches": ["../.ev_il", "../.ev il", "../. ", "../._", "../."]}, {"regex": "^(0?[1-9]|[12][0-9]|3[01])[- /.](0?[1-9]|1[012])[- /.](19|20)?[0-9]{2}? ?((([0-1]?\\d)|(2[0-3])):[0-5]\\d)?(:[0-5]\\d)? ?([a,p,A,P][m,M])?$", "exceptionStackTrace": null, "matches": ["30.01.1900 00:00:00 PM", "10.01.1900 00:00:00 PM", "01.11.1900 00:00:00 PM", "01.10.1900 00:00:00 PM", "01.01.1900 00:00:00 ", "01.01.1900 00:00:00 Pm", "01.01.1900 00:00:00 P,", "01.01.1900 00:00:00 pM", "01.01.1900 00:00:00 aM", "01.01.1900 00:00:00 AM", "01.01.1900 00:00:00 ,M", "01.01.1900 00:00:00PM", "01.01.1900 00:00 PM", "01.01.1900 :00 PM", "01.01.1900 0:00:00 PM", "01.01.190000:00:00 PM", "01.01.00 00:00:00 PM", "01.01/1900 00:00:00 PM", "01.01-1900 00:00:00 PM", "01.01 1900 00:00:00 PM", "01.1.1900 00:00:00 PM", "01/01.1900 00:00:00 PM", "01-01.1900 00:00:00 PM", "01 01.1900 00:00:00 PM", "1.01.1900 00:00:00 PM", "31.1.00", "20.1.00", "1.12.00", "1.1.00", "31.01.1900 00:00:00 PM", "20.01.1900 00:00:00 PM", "01.12.1900 00:00:00 PM", "01.01.2000 00:00:00 PM", "01.01.1900 20:00:00 PM", "01.01.1900 00:00:00 PM"], "nonMatches": ["32.01.1900 00:00:00 PM", "01.13.1900 00:00:00 PM", "01.01.1900 24:00:00 PM", "01.01.1900 00:00:00 PMPM", "01.01.1900 00:00:00 Pa", "01.01.1900 00:00:00 PA", "01.01.1900 00:00:00 bM", "01.01.1900 00:00:00 BM", "01.01.1900 00:00:00  PM", "01.01.1900 00:00:00:00 PM", "01.01.1900 00:00:60 PM", "01.01.1900 00:0000:00:00 PM", "01.01.1900 00:60:00 PM", "01.01.1900 000:00:00 PM", "01.01.1900  00:00:00 PM", "01.01.19000 00:00:00 PM", "01.01.190 00:00:00 PM", "01.01.191900 00:00:00 PM", "01.00.1900 00:00:00 PM", "01.001.1900 00:00:00 PM", "00.01.1900 00:00:00 PM", "001.01.1900 00:00:00 PM"]}, {"regex": "\\.?[a-zA-Z0-9]{1,}$", "exceptionStackTrace": null, "matches": [".eVil", ".EVIL", ".ev_il", ".ev il", ".ev4il", ".e", ".6", "..evil", "evil", ".evil"], "nonMatches": [". ", "._", "."]}, {"regex": "(http:\\/\\/|www\\.).+?(?=\\s|[[:punct:]]\\s)", "exceptionStackTrace": null, "matches": ["http://ev il"], "nonMatches": ["http://]", "http://[", "http://:", "http:///", "http://.", "http://eVil", "http://EVIL", "http://ev_il", "http://ev4il", "http://e", "http:// ", "http://6", "http://_", "http://", "www.evil", "http://evil"]}, {"regex": "^[\\w ]{0,}$", "exceptionStackTrace": null, "matches": ["eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", " ", "6", "_", "", "evil"], "nonMatches": []}, {"regex": "CEO", "exceptionStackTrace": null, "matches": ["CEO"], "nonMatches": []}, {"regex": "fregrtgrt", "exceptionStackTrace": null, "matches": ["fregrtgrt"], "nonMatches": []}, {"regex": "Dell Inspiron 1545 batteria del computer portatile", "exceptionStackTrace": null, "matches": ["Dell Inspiron 1545 batteria del computer portatile"], "nonMatches": []}, {"regex": "^[a-zA-Z]+(([\\&#39;\\,\\.\\- ][a-zA-Z ])?[a-zA-Z]*)*$", "exceptionStackTrace": null, "matches": ["evil  evil  evil", "evil  eVil", "evil  EVIL", "evil  ev il", "evil  e", "evil  ", "evil    evil", "evilevil", "evil aevil", "evil Aevil", "evil; evil", "evil9 evil", "evil3 evil", "evil. evil", "evil- evil", "evil, evil", "evil& evil", "evil# evil", "eVil  evil", "EVIL  evil", "ev il  evil", "e  evil", "evil", "evil  evil"], "nonMatches": ["evil  ev_il", "evil  ev4il", "evil   ", "evil  6", "evil  _", "evil0 evil", "ev_il  evil", "ev4il  evil", "   evil", "6  evil", "_  evil", "  evil"]}, {"regex": "(0?[1-9]|[12][0-9]|3[01])[/ -](0?[1-9]|1[12])[/ -](19[0-9]{2}|[2][0-9][0-9]{2})", "exceptionStackTrace": null, "matches": ["32-01-1900", "30-01-1900", "10-01-1900", "01-11-1900", "01-01-20000", "01-01-19000", "01-01/1900", "01-01 1900", "01-1-1900", "01/01-1900", "01 01-1900", "001-01-1900", "1-01-1900", "31-1-1900", "20-1-1900", "1-12-1900", "1-1-2000", "1-1-1900", "31-01-1900", "20-01-1900", "01-12-1900", "01-01-2000", "01-01-1900"], "nonMatches": ["01-10-1900", "01-01-200", "01-01-190", "01-00-1900", "01-001-1900", "00-01-1900"]}, {"regex": "test", "exceptionStackTrace": null, "matches": ["test"], "nonMatches": []}, {"regex": "^(?<CountryCode>[1]?)\\s?\\(?(?<AreaCode>[2-9]{1}\\d{2})\\)?\\s?(?<Prefix>[0-9]{3})(?:[-]|\\s)?(?<Postfix>\\d{4})\\s?(?:ext|x\\s?)(?<Extension>[1-9]{1}\\d*)?$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<C"}, "matches": []}, {"regex": "^((\\(?\\+45\\)?)?)(\\s?\\d{2}\\s?\\d{2}\\s?\\d{2}\\s?\\d{2})$", "exceptionStackTrace": null, "matches": ["(+45) 00 00 0000", "(+45) 00 0000 00", "(+45) 0000 00 00", "(+45)00 00 00 00", " 00 00 00 00", "(+45 00 00 00 00", "+45) 00 00 00 00", "00000000", "(+45) 00 00 00 00"], "nonMatches": ["(+45) 00 00 00 000", "(+45) 00 00 00 0", "(+45) 00 00 00  00", "(+45) 00 00 000 00", "(+45) 00 00 0 00", "(+45) 00 00  00 00", "(+45) 00 000 00 00", "(+45) 00 0 00 00", "(+45) 00  00 00 00", "(+45) 000 00 00 00", "(+45) 0 00 00 00", "(+45)  00 00 00 00", "(+45)(+45) 00 00 00 00", "(+45)) 00 00 00 00", "((+45) 00 00 00 00"]}, {"regex": "^(?=((0[1-9]0)|([1-7][1-7]\\d)|(00[1-9])|(0[1-9][1-9]))-(?=(([1-9]0)|(0[1-9])|([1-9][1-9]))-(?=((\\d{3}[1-9])$|([1-9]\\d{3})$|(\\d[1-9]\\d{2})$|(\\d{2}[1-9]\\d)$))))", "exceptionStackTrace": null, "matches": [], "nonMatches": [""]}, {"regex": "\\d{2}[.]{1}\\d{2}[.]{1}[0-9A-Za-z]{1}", "exceptionStackTrace": null, "matches": ["00.00.aa", "00.00.A", "00.00.0", "000.00.a", "00.00.a"], "nonMatches": ["00.00.", "00.00..a", "00.00a", "00.000.a", "00.0.a", "00..00.a", "0000.a", "0.00.a"]}, {"regex": "IT\\d{2}[ ][a-zA-Z]\\d{3}[ ]\\d{4}[ ]\\d{4}[ ]\\d{4}[ ]\\d{4}[ ]\\d{3}|IT\\d{2}[a-zA-Z]\\d{22}", "exceptionStackTrace": null, "matches": ["IT00A00000000000000000000000", "IT00a0000000000000000000000", "IT00 A000 0000 0000 0000 0000 0000", "IT00 a000 0000 0000 0000 0000 000", "IT00A0000000000000000000000", "IT00 A000 0000 0000 0000 0000 000"], "nonMatches": ["IT00A000000000000000000000", "IT000A0000000000000000000000", "IT0A0000000000000000000000", "IT00 A000 0000 0000 0000 0000 00", "IT00 A000 0000 0000 0000 00000 000", "IT00 A000 0000 0000 0000 000 000", "IT00 A000 0000 0000 00000 0000 000", "IT00 A000 0000 0000 000 0000 000", "IT00 A000 0000 00000 0000 0000 000", "IT00 A000 0000 000 0000 0000 000", "IT00 A000 00000 0000 0000 0000 000", "IT00 A000 000 0000 0000 0000 000", "IT00 A0000 0000 0000 0000 0000 000", "IT00 A00 0000 0000 0000 0000 000", "IT000 A000 0000 0000 0000 0000 000", "IT0 A000 0000 0000 0000 0000 000"]}, {"regex": " ^(0{0,1}[1-9]|[12][0-9]|3[01])[- /.](0{0,1}[1-9]|1[012])[- /.](\\d{2}|\\d{4})$", "exceptionStackTrace": null, "matches": [], "nonMatches": [" 32.01.00", " 30.01.00", " 10.01.00", " 01.13.00", " 01.11.00", " 01.10.00", " 01.01.00000", " 01.01.000", " 01.01.0", " 01.01/00", " 01.01-00", " 01.01 00", " 01.00.00", " 01.001.00", " 01.1.00", " 01/01.00", " 01-01.00", " 01 01.00", " 00.01.00", " 001.01.00", " 1.01.00", " 31.1.00", " 20.1.00", " 1.12.00", " 1.1.0000", " 1.1.00", " 31.01.00", " 20.01.00", " 01.12.00", " 01.01.0000", " 01.01.00"]}, {"regex": "^~/[0-9a-zA-Z_][0-9a-zA-Z/_-]*\\.[0-9a-zA-Z_-]+$", "exceptionStackTrace": null, "matches": ["~/_evil.-", "~/_evil.eVil", "~/_evil.EVIL", "~/_evil.ev_il", "~/_evil.ev4il", "~/_evil.e", "~/_evil.6", "~/_evil._", "~/_/.evil", "~/_-.evil", "~/_eVil.evil", "~/_EVIL.evil", "~/_ev_il.evil", "~/_ev4il.evil", "~/_e.evil", "~/_6.evil", "~/__.evil", "~/aevil.evil", "~/Aevil.evil", "~/0evil.evil", "~/_.evil", "~/_evil.evil"], "nonMatches": ["~/_evil.~", "~/_evil./", "~/_evil..", "~/_evil.ev il", "~/_evil. ", "~/_evil.", "~/_~.evil", "~/_..evil", "~/_ev il.evil", "~/_ .evil"]}, {"regex": "^A-?|[BCD][+-]?|[SN]?F|W$", "exceptionStackTrace": null, "matches": ["NNF", "SF", "AF", "D--", "D+", "C-", "B-", "A--", "F", "D", "A", "W", "NF", "D-", "A-"], "nonMatches": []}, {"regex": "^\\d+\\.\\d\\.\\d[01]\\d[0-3]\\d\\.[1-9]\\d*$", "exceptionStackTrace": null, "matches": ["0.0.01000.100", "0.0.00000.10", "00.0.01000.10", "0.0.01000.1", "0.0.01000.10"], "nonMatches": ["0.0.01000.00", "0.0.01040.10", "0.0.02000.10", ".0.01000.10"]}, {"regex": "^\\d+(\\.\\d{2})?$", "exceptionStackTrace": null, "matches": ["00.00", "0", "0.00"], "nonMatches": ["0.00.00", "0.000", "0.0", ".00"]}, {"regex": "^[A-Z]$", "exceptionStackTrace": null, "matches": ["A"], "nonMatches": []}, {"regex": "^[1-9]\\d?-\\d{7}$", "exceptionStackTrace": null, "matches": ["1-0000000", "10-0000000"], "nonMatches": ["10-00000000", "10-000000", "100-0000000", "00-0000000"]}, {"regex": "^([a-zA-Z]+[\\&#39;\\,\\.\\-]?[a-zA-Z ]*)+[ ]([a-zA-Z]+[\\&#39;\\,\\.\\-]?[a-zA-Z ]+)+$", "exceptionStackTrace": null, "matches": ["evil-evil evil-evilevil-evil", "evil-evil evil-eVil", "evil-evil evil-EVIL", "evil-evil evil-ev il", "evil-evil evil-e", "evil-evil evil- ", "evil-evil evilevil", "evil-evil evil;evil", "evil-evil evil9evil", "evil-evil evil3evil", "evil-evil evil.evil", "evil-evil evil,evil", "evil-evil evil&evil", "evil-evil evil#evil", "evil-evil eVil-evil", "evil-evil EVIL-evil", "evil-evil ev il-evil", "evil-evil e-evil", "evil-evilevil-evil evil-evil", "evil-eVil evil-evil", "evil-EVIL evil-evil", "evil-ev il evil-evil", "evil-e evil-evil", "evil-  evil-evil", "evil- evil-evil", "evilevil evil-evil", "evil;evil evil-evil", "evil9evil evil-evil", "evil3evil evil-evil", "evil.evil evil-evil", "evil,evil evil-evil", "evil&evil evil-evil", "evil#evil evil-evil", "eVil-evil evil-evil", "EVIL-evil evil-evil", "ev il-evil evil-evil", "e-evil evil-evil", "evil evilevil", "evil-evil evil-evil"], "nonMatches": ["evil-evil ", "evil-evil evil-ev_il", "evil-evil evil-ev4il", "evil-evil evil-6", "evil-evil evil-_", "evil-evil evil-", "evil-evil evil--evil", "evil-evil evil0evil", "evil-evil ev_il-evil", "evil-evil ev4il-evil", "evil-evil  -evil", "evil-evil 6-evil", "evil-evil _-evil", "evil-evil -evil", " evil-evil", "evil-ev_il evil-evil", "evil-ev4il evil-evil", "evil-6 evil-evil", "evil-_ evil-evil", "evil--evil evil-evil", "evil0evil evil-evil", "ev_il-evil evil-evil", "ev4il-evil evil-evil", " -evil evil-evil", "6-evil evil-evil", "_-evil evil-evil", "-evil evil-evil"]}, {"regex": "(?<!/)/(\\w+\\.\\w+)?$", "exceptionStackTrace": null, "matches": ["/evil.eVil", "/evil.EVIL", "/evil.ev_il", "/evil.ev4il", "/evil.e", "/evil.6", "/evil._", "/eVil.evil", "/EVIL.evil", "/ev_il.evil", "/ev4il.evil", "/e.evil", "/6.evil", "/_.evil", "/", "/evil.evil"], "nonMatches": ["/evil.evilevil.evil", "/evil.ev il", "/evil. ", "/evil.", "/ev il.evil", "/ .evil", "/.evil"]}, {"regex": "\\[(.+)\\].+\\[n?varchar\\].+NULL,", "exceptionStackTrace": null, "matches": ["[evil]evil[nvarchar]]NULL,", "[evil]evil[nvarchar][NULL,", "[evil]evil[nvarchar],NULL,", "[evil]evil[nvarchar]eVilNULL,", "[evil]evil[nvarchar]EVILNULL,", "[evil]evil[nvarchar]ev_ilNULL,", "[evil]evil[nvarchar]ev ilNULL,", "[evil]evil[nvarchar]ev4ilNULL,", "[evil]evil[nvarchar]eNULL,", "[evil]evil[nvarchar] NULL,", "[evil]evil[nvarchar]6NULL,", "[evil]evil[nvarchar]_NULL,", "[evil]][nvarchar]evilNULL,", "[evil][[nvarchar]evilNULL,", "[evil],[nvarchar]evilNULL,", "[evil]eVil[nvarchar]evilNULL,", "[evil]EVIL[nvarchar]evilNULL,", "[evil]ev_il[nvarchar]evilNULL,", "[evil]ev il[nvarchar]evilNULL,", "[evil]ev4il[nvarchar]evilNULL,", "[evil]e[nvarchar]evilNULL,", "[evil] [nvarchar]evilNULL,", "[evil]6[nvarchar]evilNULL,", "[evil]_[nvarchar]evilNULL,", "[]]evil[nvarchar]evilNULL,", "[[]evil[nvarchar]evilNULL,", "[,]evil[nvarchar]evilNULL,", "[eVil]evil[nvarchar]evilNULL,", "[EVIL]evil[nvarchar]evilNULL,", "[ev_il]evil[nvarchar]evilNULL,", "[ev il]evil[nvarchar]evilNULL,", "[ev4il]evil[nvarchar]evilNULL,", "[e]evil[nvarchar]evilNULL,", "[ ]evil[nvarchar]evilNULL,", "[6]evil[nvarchar]evilNULL,", "[_]evil[nvarchar]evilNULL,", "[evil]evil[varchar]evilNULL,", "[evil]evil[nvarchar]evilNULL,"], "nonMatches": ["[evil]evil[nvarchar]NULL,", "[evil]evil[nnvarchar]evilNULL,", "[evil][nvarchar]evilNULL,", "[]evil[nvarchar]evilNULL,"]}, {"regex": "^[a-zA-Z0-9]+$", "exceptionStackTrace": null, "matches": ["eVil", "EVIL", "ev4il", "e", "6", "evil"], "nonMatches": ["ev_il", "ev il", " ", "_", ""]}, {"regex": "^(([1-9]|[0-2]\\d|[3][0-1])\\.([1-9]|[0]\\d|[1][0-2])\\.[2][0]\\d{2})$|^(([1-9]|[0-2]\\d|[3][0-1])\\.([1-9]|[0]\\d|[1][0-2])\\.[2][0]\\d{2}\\s([1-9]|[0-1]\\d|[2][0-3])\\:[0-5]\\d)$", "exceptionStackTrace": null, "matches": ["30.1.2000 1:00", "00.1.2000 1:00", "1.10.2000 1:00", "1.00.2000 1:00", "1.1.2000 20:00", "1.1.2000 00:00", "1.1.2000 1:00", "30.1.2000", "00.1.2000", "1.10.2000", "1.00.2000", "1.1.2000"], "nonMatches": ["32.1.2000 1:00", "1.13.2000 1:00", "1.1.2000 24:00", "1.1.2000 1:60", "1.1.2000 0:00", "1.1.20000 1:00", "1.1.200 1:00", "1.0.2000 1:00", "0.1.2000 1:00", "32.1.2000", "1.13.2000", "1.1.20000", "1.1.200", "1.0.2000", "0.1.2000"]}, {"regex": "^[\\u0600-\\u06ff\\s]+$|[\\u0750-\\u077f\\s]+$|[\\ufb50-\\ufc3f\\s]+$|[\\ufe70-\\ufefc\\s]+$|[\\u06cc\\s]+$|[\\u067e\\s]+$|[\\u06af\\s]$|[\\u0691\\s]+$|^$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 1536"}, "matches": [], "nonMatches": []}, {"regex": "(^[0][.]{1}[0-9]{0,}[1-9]+[0-9]{0,}$)|(^[1-9]+[0-9]{0,}[.]?[0-9]{0,}$)", "exceptionStackTrace": null, "matches": ["10.00", "10.", "100", "100.0", "1.0", "110.0", "0.0100", "0.01", "0.0110", "0.0010", "0.10", "1", "0.1", "10.0", "0.010"], "nonMatches": ["10..0", "0.0", "00.0", "0.00", "0.000", "0..010", "0010"]}, {"regex": "(?!.*([abcde]).*\\1)^[abcde]{5}$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["eeeeee", "eeee", "feeee", "deeee", "ceeee", "beeee", "aeeee", "eeeee"]}, {"regex": "\\S*?[\\[&quot;].*?[\\]&quot;]|\\S+", "exceptionStackTrace": null, "matches": ["]", "[", ";", "&", "eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", "6", "_", "evil;evilu", "evil;evilt", "evil;evilq", "evil;evilo", "evil;evila", "evil;evil]", "evil;evil&", "evil;];", "evil;[;", "evil;;;", "evil;&;", "evil;eVil;", "evil;EVIL;", "evil;ev_il;", "evil;ev il;", "evil;ev4il;", "evil;e;", "evil; ;", "evil;6;", "evil;_;", "evil;;", "eviluevil;", "eviltevil;", "evilqevil;", "eviloevil;", "evilaevil;", "evil[evil;", "evil&evil;", "];evil;", "[;evil;", ";;evil;", "&;evil;", "eVil;evil;", "EVIL;evil;", "ev_il;evil;", "ev il;evil;", "ev4il;evil;", "e;evil;", " ;evil;", "6;evil;", "_;evil;", ";evil;", ";;", "evil", "evil;evil;"], "nonMatches": [" ", ""]}, {"regex": "(^10\\.)|(^172\\.1[6-9]\\.)|(^172\\.2[0-9]\\.)|(^172\\.3[0-1]\\.)|(^192\\.168\\.)|(^127\\.0\\.0\\.1)", "exceptionStackTrace": null, "matches": ["127.0.0.1", "192.168.", "172.30.", "172.20.", "172.16.", "10."], "nonMatches": ["172.32.", "172.10."]}, {"regex": "(((0[1-9]|[12][0-9]|3[01])([.])(0[13578]|10|12)([.])([1-2][0,9][0-9][0-9]))|(([0][1-9]|[12][0-9]|30)([.])(0[469]|11)([.])([1-2][0,9][0-9][0-9]))|((0[1-9]|1[0-9]|2[0-8])([.])(02)([.])([1-2][0,9][0-9][0-9]))|((29)(\\.|-|\\/)(02)([.])([02468][048]00))|((29)([.])(02)([.])([13579][26]00))|((29)([.])(02)([.])([0-9][0-9][0][48]))|((29)([.])(02)([.])([0-9][0-9][2468][048]))|((29)([.])(02)([.])([0-9][0-9][13579][26])))", "exceptionStackTrace": null, "matches": ["29.02.0092", "29.02.0076", "29.02.0056", "29.02.0036", "29.02.0016", "29.02.0084", "29.02.0080", "29.02.0068", "29.02.0048", "29.02.0028", "29.02.0004", "29.02.0000", "29.02.9200", "29.02.7600", "29.02.5600", "29.02.3600", "29.02.1600", "29.02.8400", "29.02.8000", "29.02.6800", "29.02.4800", "29.02.2800", "29.02.0800", "01.02.1000", "01.02.1,00", "10.09.1900", "01.09.1000", "01.09.1,00", "01.06.1900", "01.04.1900", "30.08.1900", "10.08.1900", "01.08.1000", "01.08.1,00", "01.07.1900", "01.05.1900", "01.03.1900", "01.01.1900", "29.02.0096", "29.02.0088", "29.02.0008", "29.02.9600", "29/02.8800", "29-02.8800", "29.02.8800", "20.02.1900", "10.02.1900", "01.02.1900", "30.09.1900", "20.09.1900", "01.11.1900", "01.09.1900", "31.08.1900", "20.08.1900", "01.12.1900", "01.10.1900", "01.08.1900"], "nonMatches": ["29.02.0090", "29.02.0006", "29.02.0081", "29.02.9000", "29.02.0600", "29.02.8100", "29.02.1800", "29.02.1900", "01.02.1100", "01.02.0900", "00.02.1900", "01.09.1100", "01.09.0900", "00.09.1900", "32.08.1900", "01.08.1100", "01.08.0900", "01.00.1900", "00.08.1900"]}, {"regex": "(?:[0-9]{4}-){3}[0-9]{4})", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unbalanced parenthesis"}, "matches": []}, {"regex": "(((^\\s*)*\\S+\\s+)|(\\S+)){1,5} ", "exceptionStackTrace": null, "matches": ["eVil ", "EVIL ", "ev_il ", "ev il ", "ev4il ", "e ", "6 ", "_ ", " evil  evil  evil  evil  evil  evil  ", " evil  evil  evil  evil  evil  ", " evil   ", " evil ", " eVil  ", " EVIL  ", " ev_il  ", " ev il  ", " ev4il  ", " e  ", " 6  ", " _  ", "  evil  ", "evil  ", "evil ", " evil  "], "nonMatches": ["  ", " ", "    ", "   "]}, {"regex": "((?<=,\\s*\\&quot;)([^\\&quot;]*|([^\\&quot;]*\\&quot;\\&quot;[^&quot;&quot;]*\\&quot;\\&quot;[^\\&quot;]*)+)(?=\\&quot;\\s*,))|((?<=,)[^,\\&quot;]*(?=,))", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "look-behind requires fixed-width pattern"}, "matches": []}, {"regex": "http://www.captainmarketing.com/", "exceptionStackTrace": null, "matches": ["http://wwwacaptainmarketingAcom/", "http://wwwacaptainmarketing:com/", "http://wwwacaptainmarketing0com/", "http://wwwacaptainmarketing/com/", "http://wwwacaptainmarketing com/", "http://wwwAcaptainmarketingacom/", "http://www:captainmarketingacom/", "http://www0captainmarketingacom/", "http://www/captainmarketingacom/", "http://www captainmarketingacom/", "http://wwwacaptainmarketingacom/"], "nonMatches": []}, {"regex": "http://www.captainmarketing.com/", "exceptionStackTrace": null, "matches": ["http://wwwacaptainmarketingAcom/", "http://wwwacaptainmarketing:com/", "http://wwwacaptainmarketing0com/", "http://wwwacaptainmarketing/com/", "http://wwwacaptainmarketing com/", "http://wwwAcaptainmarketingacom/", "http://www:captainmarketingacom/", "http://www0captainmarketingacom/", "http://www/captainmarketingacom/", "http://www captainmarketingacom/", "http://wwwacaptainmarketingacom/"], "nonMatches": []}, {"regex": "^[1-9][0-9]{3}[ ]?(([a-rt-zA-RT-Z]{2})|([sS][^dasDAS]))$", "exceptionStackTrace": null, "matches": ["1000 S_", "1000 SB", "1000 S0", "1000 S ", "1000 sb", "1000 ab", "1000 Ab", "1000 tT", "1000 sT", "1000 aT", "1000 ST", "1000 AT", "1000Sb", "1000TT", "1000 Sb", "1000 TT"], "nonMatches": ["1000 Ss", "1000 Sd", "1000 Sa", "1000 SS", "1000 SD", "1000 SA", "1000 TTT", "1000 T", "1000  TT", "10000 TT", "100 TT", "0000 TT"]}, {"regex": "^[0-9]{11}$", "exceptionStackTrace": null, "matches": ["00000000000"], "nonMatches": ["000000000000", "0000000000"]}, {"regex": "^[0-9]{11}$", "exceptionStackTrace": null, "matches": ["00000000000"], "nonMatches": ["000000000000", "0000000000"]}, {"regex": "http://\\([a-zA-Z0-9_\\-]\\+\\(\\.[a-zA-Z0-9_\\-]\\+\\)\\+\\)\\+:\\?[0-9]\\?\\(/*[a-zA-Z0-9_\\-#]*\\.*\\)*?\\?\\(&*[a-zA-Z0-9;_+/.\\-%]*-*=*[a-zA-Z0-9;_+/.\\-%]*-*\\)*", "exceptionStackTrace": null, "matches": ["http://(-+(.-+)+)+:?0?(/evil.)?(&evil-=evil-))", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil-=evil-", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil-=evil--)", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil-=evil)", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil-=?-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil-==-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil-=;-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil-=:-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil-=/-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil-=.-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil-=--)", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil-=+-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil-=)-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil-=(-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil-=&-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil-=%-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil-=#-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil-=eVil-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil-=EVIL-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil-=ev_il-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil-=ev il-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil-=ev4il-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil-=e-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil-= -)", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil-=6-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil-=_-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil-=-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil-==evil-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil-evil-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil--=evil-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil=evil-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&?-=evil-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&=-=evil-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&;-=evil-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&:-=evil-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&/-=evil-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&.-=evil-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&--=evil-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&+-=evil-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&)-=evil-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&(-=evil-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&&-=evil-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&%-=evil-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&#-=evil-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&eVil-=evil-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&EVIL-=evil-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&ev_il-=evil-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&ev il-=evil-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&ev4il-=evil-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&e-=evil-)", "http://(-+(.-+)+)+:?0?(/evil.)?(& -=evil-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&6-=evil-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&_-=evil-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&-=evil-)", "http://(-+(.-+)+)+:?0?(/evil.)?(&&evil-=evil-)", "http://(-+(.-+)+)+:?0?(/evil.)?(evil-=evil-)", "http://(-+(.-+)+)+:?0?(/evil.))?(&evil-=evil-)", "http://(-+(.-+)+)+:?0?(/evil.?(&evil-=evil-)", "http://(-+(.-+)+)+:?0?(/evil..)?(&evil-=evil-)", "http://(-+(.-+)+)+:?0?(/evil)?(&evil-=evil-)", "http://(-+(.-+)+)+:?0?(//.)?(&evil-=evil-)", "http://(-+(.-+)+)+:?0?(/..)?(&evil-=evil-)", "http://(-+(.-+)+)+:?0?(/-.)?(&evil-=evil-)", "http://(-+(.-+)+)+:?0?(/#.)?(&evil-=evil-)", "http://(-+(.-+)+)+:?0?(/eVil.)?(&evil-=evil-)", "http://(-+(.-+)+)+:?0?(/EVIL.)?(&evil-=evil-)", "http://(-+(.-+)+)+:?0?(/ev_il.)?(&evil-=evil-)", "http://(-+(.-+)+)+:?0?(/ev4il.)?(&evil-=evil-)", "http://(-+(.-+)+)+:?0?(/e.)?(&evil-=evil-)", "http://(-+(.-+)+)+:?0?(/6.)?(&evil-=evil-)", "http://(-+(.-+)+)+:?0?(/_.)?(&evil-=evil-)", "http://(-+(.-+)+)+:?0?(/.)?(&evil-=evil-)", "http://(-+(.-+)+)+:?0?(//evil.)?(&evil-=evil-)", "http://(-+(.-+)+)+:?0?(evil.)?(&evil-=evil-)", "http://(-+(.a+)+)+:?0?(/evil.)?(&evil-=evil-)", "http://(-+(._+)+)+:?0?(/evil.)?(&evil-=evil-)", "http://(-+(.A+)+)+:?0?(/evil.)?(&evil-=evil-)", "http://(-+(.0+)+)+:?0?(/evil.)?(&evil-=evil-)", "http://(a+(.-+)+)+:?0?(/evil.)?(&evil-=evil-)", "http://(_+(.-+)+)+:?0?(/evil.)?(&evil-=evil-)", "http://(A+(.-+)+)+:?0?(/evil.)?(&evil-=evil-)", "http://(0+(.-+)+)+:?0?(/evil.)?(&evil-=evil-)", "http://(-+(.-+)+)+:?0?(?(", "http://(-+(.-+)+)+:?0?(/evil.)?(&evil-=evil-)"], "nonMatches": ["http://(-+(.-+)+)+:?0?(/?.)?(&evil-=evil-)", "http://(-+(.-+)+)+:?0?(/=.)?(&evil-=evil-)", "http://(-+(.-+)+)+:?0?(/;.)?(&evil-=evil-)", "http://(-+(.-+)+)+:?0?(/:.)?(&evil-=evil-)", "http://(-+(.-+)+)+:?0?(/+.)?(&evil-=evil-)", "http://(-+(.-+)+)+:?0?(/).)?(&evil-=evil-)", "http://(-+(.-+)+)+:?0?(/(.)?(&evil-=evil-)", "http://(-+(.-+)+)+:?0?(/&.)?(&evil-=evil-)", "http://(-+(.-+)+)+:?0?(/%.)?(&evil-=evil-)", "http://(-+(.-+)+)+:?0?(/ev il.)?(&evil-=evil-)", "http://(-+(.-+)+)+:?0?(/ .)?(&evil-=evil-)"]}, {"regex": "^(1[0-2]|0[1-9]|[1-9])\\/(1[0-9]|2[0-9]|3[0-1]|0[1-9]|[1-9])\\/\\d{4}$", "exceptionStackTrace": null, "matches": ["1/10/0000", "01/10/0000", "10/1/0000", "10/01/0000", "10/30/0000", "10/20/0000", "10/10/0000"], "nonMatches": ["0/10/0000", "00/10/0000", "10/0/0000", "10/00/0000", "10/32/0000", "10/10/00000", "10/10/000", "13/10/0000"]}, {"regex": "^\\d{10}$", "exceptionStackTrace": null, "matches": ["0000000000"], "nonMatches": ["00000000000", "000000000"]}, {"regex": "^[\\u0600-\\u06ff\\s]+$|[\\u0750-\\u077f\\s]+$|[\\ufb50-\\ufc3f\\s]+$|[\\ufe70-\\ufefc\\s]+$|^$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 1536"}, "matches": [], "nonMatches": []}, {"regex": "^[5,6]\\d{7}|^$", "exceptionStackTrace": null, "matches": ["600000000", "50000000", ",0000000", "", "60000000"], "nonMatches": ["6000000", "00000000"]}, {"regex": "[a-z&#224;-&#239;&#242;-&#246;&#249;-&#252;]+$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character range ;-&"}, "matches": []}, {"regex": "\\d[\\d\\,\\.]+", "exceptionStackTrace": null, "matches": ["0..", "00", "0,", "0."], "nonMatches": ["0"]}, {"regex": "^(\\+86)(13[0-9]|145|147|15[0-3,5-9]|18[0,2,5-9])(\\d{8})$", "exceptionStackTrace": null, "matches": ["+8618500000000", "+8618200000000", "+8618000000000", "+8615500000000", "+8615000000000", "+8618,00000000", "+8615,00000000", "+8614700000000", "+8614500000000", "+8613000000000"], "nonMatches": ["+8618100000000", "+8615400000000", "+86130000000000", "+861300000000"]}, {"regex": "^(\\+)?([9]{1}[2]{1})?-? ?(\\()?([0]{1})?[1-9]{2,4}(\\))?-? ??(\\()?[1-9]{4,7}(\\))?$", "exceptionStackTrace": null, "matches": ["+92- (011)- (1111", "+92- (011)- (1111111)", "+92- (011)- 1111)", "+92- (011)-(1111)", "+92- (011) (1111)", "+92- (011- (1111)", "+92- (01111)- (1111)", "+92- (11)- (1111)", "+92- 011)- (1111)", "+92-(011)- (1111)", "+92 (011)- (1111)", "+- (011)- (1111)", "92- (011)- (1111)", "111111", "+92- (011)- (1111)"], "nonMatches": ["+92- (011)- (1111))", "+92- (011)- (11111111)", "+92- (011)- (111)", "+92- (011)- (0111)", "+92- (011)- ((1111)", "+92- (011)-  (1111)", "+92- (011)-- (1111)", "+92- (011))- (1111)", "+92- (011111)- (1111)", "+92- (01)- (1111)", "+92- (001)- (1111)", "+92- (0011)- (1111)", "+92- ((011)- (1111)", "+92-  (011)- (1111)", "+92-- (011)- (1111)", "+9292- (011)- (1111)", "+922- (011)- (1111)", "+9- (011)- (1111)", "+992- (011)- (1111)", "+2- (011)- (1111)", "++92- (011)- (1111)"]}, {"regex": "^[ABCEGHJKLMNPRSTVXYabceghjklmnprstvxy]{1}\\d{1}[A-Za-z]{1}[ ]{0,1}\\d{1}[A-Za-z]{1}\\d{1}$", "exceptionStackTrace": null, "matches": ["y0a 0A0", "y0A 0a0", "x0a 0a0", "v0a 0a0", "t0a 0a0", "s0a 0a0", "r0a 0a0", "p0a 0a0", "n0a 0a0", "m0a 0a0", "l0a 0a0", "k0a 0a0", "j0a 0a0", "h0a 0a0", "g0a 0a0", "e0a 0a0", "c0a 0a0", "b0a 0a0", "a0a 0a0", "Y0a 0a0", "X0a 0a0", "V0a 0a0", "T0a 0a0", "S0a 0a0", "R0a 0a0", "P0a 0a0", "N0a 0a0", "M0a 0a0", "L0a 0a0", "K0a 0a0", "J0a 0a0", "H0a 0a0", "G0a 0a0", "E0a 0a0", "C0a 0a0", "B0a 0a0", "A0a 0a0", "y0a0a0", "y0a 0a0"], "nonMatches": ["y0a 0a00", "y0a 0a", "y0a 0aa0", "y0a 00", "y0a 00a0", "y0a a0", "y0a  0a0", "y0aa 0a0", "y0 0a0", "y00a 0a0", "ya 0a0", "yy0a 0a0", "0a 0a0", "d0a 0a0", "D0a 0a0"]}, {"regex": "^([0-1]([\\s-./\\\\])?)?(\\(?[2-9]\\d{2}\\)?|[2-9]\\d{3})([\\s-./\\\\])?(\\d{3}([\\s-./\\\\])?\\d{4}|[a-zA-Z0-9]{7})$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character range \\s-."}, "matches": []}, {"regex": "^([0-1]([\\s-./\\\\])?)?(\\(?[2-9]\\d{2}\\)?|[2-9]\\d{3})([\\s-./\\\\])?([0-9]{3}([\\s-./\\\\])?[0-9]{4}|[a-zA-Z0-9]{7}|([0-9]{3}[-][a-zA-Z0-9]{4}))", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character range \\s-."}, "matches": []}, {"regex": "^N[1-9][0-9]{0,4}$|^N[1-9][0-9]{0,3}[A-Z]$|^N[1-9][0-9]{0,2}[A-Z]{2}$", "exceptionStackTrace": null, "matches": ["N100AA", "N1000A", "N10000", "N1AA", "N1A", "N1", "N10AA", "N10A", "N10"], "nonMatches": ["N10AAA", "N1000AA", "N00AA", "N10000A", "N00A", "N100000", "N00"]}, {"regex": "^\\([0-9]{3}\\)[0-9]{3}(-)[0-9]{4}", "exceptionStackTrace": null, "matches": ["(000)000-00000", "(000)000-0000"], "nonMatches": ["(000)000-000", "(000)0000-0000", "(000)00-0000", "(0000)000-0000", "(00)000-0000"]}, {"regex": "((0[1-9])|(1[0-2]))\\/((0[1-9])|(1[0-9])|(2[0-9])|(3[0-1]))/\\(([1][9][0-9][0-9])|([2][0-9][0-9][0-9])))", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unbalanced parenthesis"}, "matches": []}, {"regex": "muscle, I comprehend why, the review tells me you ", "exceptionStackTrace": null, "matches": ["muscle, I comprehend why, the review tells me you "], "nonMatches": []}, {"regex": "1", "exceptionStackTrace": null, "matches": ["1"], "nonMatches": []}, {"regex": "^\\d*\\.?(((5)|(0)|))?$", "exceptionStackTrace": null, "matches": ["0.", "05", "00.5", ".5", "", "0.0", "0.5"], "nonMatches": ["0.00", "0.55", "0..5"]}, {"regex": "^(\\-)?\\d*(\\.\\d+)?$", "exceptionStackTrace": null, "matches": ["-0", "-0.00", "-00.0", "-.0", "0.0", "", "-0.0"], "nonMatches": ["-0.0.0", "-0.", "--0.0"]}, {"regex": "^(?<tipo>.{1,3})\\s+(?<endereco>.+),\\s+(?<numero>\\w{1,10})\\s*(?<complemento>.*)$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<t"}, "matches": []}, {"regex": "((0[1-9]|[12]\\d|3[01])(0[1-9]|1[0-2])\\d{3}\\d{2}\\d{4})", "exceptionStackTrace": null, "matches": ["3001000000000", "1001000000000", "01010000000000", "3101000000000", "2001000000000", "0110000000000", "0101000000000"], "nonMatches": ["3201000000000", "0113000000000", "010100000000", "0100000000000", "0001000000000"]}, {"regex": "(\\$\\d)|(\\\u20ac\\d)|(\\&#163;\\d)", "exceptionStackTrace": null, "matches": ["&#163;0", "\u20ac0", "$0"], "nonMatches": []}, {"regex": "^[1-9][0-9][0-9][0-9][0-9][0-9]$", "exceptionStackTrace": null, "matches": ["100000"], "nonMatches": ["000000"]}, {"regex": "^((00)?\\+?[389]{3})?[\\/\\-\\s*\\.]?(((\\(0\\))|0)?\\s*7\\d{1})[\\/\\-\\s*\\.\\,]?([\\d]{3})[\\/\\-\\s*\\.\\,]?([\\d]{3})$", "exceptionStackTrace": null, "matches": ["00+999.(0) 70,000000", "00+999.(0) 70,000/000", "00+999.(0) 70,000.000", "00+999.(0) 70,000-000", "00+999.(0) 70,000*000", "00+999.(0) 70,000 000", "00+999.(0) 70000,000", "00+999.(0) 70/000,000", "00+999.(0) 70.000,000", "00+999.(0) 70-000,000", "00+999.(0) 70*000,000", "00+999.(0) 70 000,000", "00+999.(0)  70,000,000", "00+999.(0)70,000,000", "00+999. 70,000,000", "00+999(0) 70,000,000", "00+999/(0) 70,000,000", "00+999-(0) 70,000,000", "00+999*(0) 70,000,000", "00+999 (0) 70,000,000", ".(0) 70,000,000", "00+899.(0) 70,000,000", "00+399.(0) 70,000,000", "00999.(0) 70,000,000", "+999.(0) 70,000,000", "70000000", "00+999.0 70,000,000", "00+999.(0) 70,000,000"], "nonMatches": ["00+999.(0) 70,000,0000", "00+999.(0) 70,000,00", "00+999.(0) 70,000,,000", "00+999.(0) 70,0000,000", "00+999.(0) 70,00,000", "00+999.(0) 70,,000,000", "00+999.(0) 700,000,000", "00+999.(0) 7,000,000", "00+999.(0)(0) 70,000,000", "00+999..(0) 70,000,000", "00+99900+999.(0) 70,000,000", "00+9999.(0) 70,000,000", "00+99.(0) 70,000,000", "00+099.(0) 70,000,000", "00++999.(0) 70,000,000", "0000+999.(0) 70,000,000"]}, {"regex": "^[a-zA-Z]:\\\\(([\\w]|[\\u0621-\\u064A\\s])+\\\\)+([\\w]|[\\u0621-\\u064A\\s])+(.jpg|.JPG|.gif|.GIF|.BNG|.bng)$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 1569"}, "matches": [], "nonMatches": []}, {"regex": "^(eth[0-9]$)|(^eth[0-9]:[1-9]$)", "exceptionStackTrace": null, "matches": ["eth0:1", "eth0"], "nonMatches": ["eth0:0"]}, {"regex": "\\b([\\d\\w\\.\\/\\+\\-\\?\\:]*)((ht|f)tp(s|)\\:\\/\\/|[\\d\\d\\d|\\d\\d]\\.[\\d\\d\\d|\\d\\d]\\.|www\\.|\\.tv|\\.ac|\\.com|\\.edu|\\.gov|\\.int|\\.mil|\\.net|\\.org|\\.biz|\\.info|\\.name|\\.pro|\\.museum|\\.co)([\\d\\w\\.\\/\\%\\+\\-\\=\\&amp;\\?\\:\\\\\\&quot;\\&#39;\\,\\|\\~\\;]*)\\b", "exceptionStackTrace": null, "matches": ["evil|.0.evil", "evil0.|.evil", "evilhttps://eVil", "evilhttps://EVIL", "evilhttps://ev_il", "evilhttps://ev il", "evilhttps://ev4il", "evilhttps://e", "evilhttps://6", "evilhttps://_", "evilhttp://evil", "~https://evil", "|https://evil", "\\https://evil", "?https://evil", "=https://evil", ";https://evil", ":https://evil", "/https://evil", ".https://evil", "-https://evil", ",https://evil", "+https://evil", "&https://evil", "%https://evil", "#https://evil", "eVilhttps://evil", "EVILhttps://evil", "ev_ilhttps://evil", "ev ilhttps://evil", "ev4ilhttps://evil", "ehttps://evil", " https://evil", "6https://evil", "_https://evil", "https://evil", "evil.coevil", "evil.museumevil", "evil.proevil", "evil.nameevil", "evil.infoevil", "evil.bizevil", "evil.orgevil", "evil.netevil", "evil.milevil", "evil.intevil", "evil.govevil", "evil.eduevil", "evil.comevil", "evil.acevil", "evil.tvevil", "evilwww.evil", "evil|.|.evil", "evilftps://evil", "evilhttps://evil"], "nonMatches": ["evilhttps://~", "evilhttps://|", "evilhttps://\\", "evilhttps://?", "evilhttps://=", "evilhttps://;", "evilhttps://:", "evilhttps:///", "evilhttps://.", "evilhttps://-", "evilhttps://,", "evilhttps://+", "evilhttps://&", "evilhttps://%", "evilhttps://#", "evilhttps:// ", "evilhttps://", "evilhttpss://evil", ".co", ".museum", ".pro", ".name", ".info", ".biz", ".org", ".net", ".mil", ".int", ".gov", ".edu", ".com", ".ac", ".tv", "www.", "|.|.", "ftp://", "http://"]}, {"regex": "(?<value>([\\+-]?((\\d*\\.\\d+)|\\d+))(E[\\+-]?\\d+)?)( (?<prefix>[PTGMkmunpf])?(?<unit>[a-zA-Z]+)?)?", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<v"}, "matches": []}, {"regex": "^[a-z]+([a-z0-9-]*[a-z0-9]+)?(\\.([a-z]+([a-z0-9-]*[a-z0-9]+)?)+)*$", "exceptionStackTrace": null, "matches": ["evilevilevil.evilevilevil.evilevilevil", "evilevilevil", "evilevilevil.evilevilevilevilevilevil", "evilevilevil.evilevilevilevilevil", "evilevilevil.evil", "evilevilevil.evilevilev4il", "evilevilevil.evilevile", "evilevilevil.evilevil6", "evilevilevil.evil.evil", "evilevilevil.evil-evil", "evilevilevil.evilev4ilevil", "evilevilevil.evileevil", "evilevilevil.evil6evil", "evilevilevil.ev4ilevilevil", "evilevilevil.eevilevil", "evilevilevil.evilevil", "evilevilevilevilevil.evilevilevil", "evil.evilevilevil", "evilevilev4il.evilevilevil", "evilevile.evilevilevil", "evilevil6.evilevilevil", "evil.evil.evilevilevil", "evil-evil.evilevilevil", "evilev4ilevil.evilevilevil", "evileevil.evilevilevil", "evil6evil.evilevilevil", "ev4ilevilevil.evilevilevil", "eevilevil.evilevilevil", "evilevil.evilevilevil", "evil", "evilevilevil.evilevilevil"], "nonMatches": ["evilevilevil.", "evilevilevil.evilevileVil", "evilevilevil.evilevilEVIL", "evilevilevil.evilevilev_il", "evilevilevil.evilevilev il", "evilevilevil.evilevil ", "evilevilevil.evilevil_", "evilevilevil.evileVilevil", "evilevilevil.evilEVILevil", "evilevilevil.evilev_ilevil", "evilevilevil.evilev ilevil", "evilevilevil.evil evil", "evilevilevil.evil_evil", "evilevilevil.eVilevilevil", "evilevilevil.EVILevilevil", "evilevilevil.ev_ilevilevil", "evilevilevil.ev ilevilevil", "evilevilevil. evilevil", "evilevilevil.6evilevil", "evilevilevil._evilevil", "evilevileVil.evilevilevil", "evilevilEVIL.evilevilevil", "evilevilev_il.evilevilevil", "evilevilev il.evilevilevil", "evilevil .evilevilevil", "evilevil_.evilevilevil", "evileVilevil.evilevilevil", "evilEVILevil.evilevilevil", "evilev_ilevil.evilevilevil", "evilev ilevil.evilevilevil", "evil evil.evilevilevil", "evil_evil.evilevilevil", "eVilevilevil.evilevilevil", "EVILevilevil.evilevilevil", "ev_ilevilevil.evilevilevil", "ev ilevilevil.evilevilevil", " evilevil.evilevilevil", "6evilevil.evilevilevil", "_evilevil.evilevilevil"]}, {"regex": "^\\$?(?(?=[0-9])[0-9]{1,5}:\\$?[0-9]{1,5}|[A-Za-z]{1,2}(?(?=:):\\$?[A-Za-z]{1,2}|(?(?!(\\$?[0-9])):/$[A-Za-z]{1,2}|\\$?[0-9]{1,5})(?(?=:):\\$?[A-Za-z]{1,2}\\$?[0-9]{1,5}|.)))", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character in group name '?=[0-9]'"}, "matches": []}, {"regex": "^[\\w-]+(?:\\.[\\w-]+)*@(?:[\\w-]+\\.)+[a-zA-Z]{2,7}$", "exceptionStackTrace": null, "matches": ["evil.evil@evil.AAAAAAA", "evil.evil@evil.aA", "evil.evil@evil.evil.AA", "evil.evil@-.AA", "evil.evil@eVil.AA", "evil.evil@EVIL.AA", "evil.evil@ev_il.AA", "evil.evil@ev4il.AA", "evil.evil@e.AA", "evil.evil@6.AA", "evil.evil@_.AA", "evil.evil.evil@evil.AA", "evil.-@evil.AA", "evil.eVil@evil.AA", "evil.EVIL@evil.AA", "evil.ev_il@evil.AA", "evil.ev4il@evil.AA", "evil.e@evil.AA", "evil.6@evil.AA", "evil._@evil.AA", "-.evil@evil.AA", "eVil.evil@evil.AA", "EVIL.evil@evil.AA", "ev_il.evil@evil.AA", "ev4il.evil@evil.AA", "e.evil@evil.AA", "6.evil@evil.AA", "_.evil@evil.AA", "evil@evil.AA", "evil.evil@evil.AA"], "nonMatches": ["evil.evil@evil.AAAAAAAA", "evil.evil@evil.A", "evil.evil@AA", "evil.evil@@.AA", "evil.evil@..AA", "evil.evil@ev il.AA", "evil.evil@ .AA", "evil.evil@.AA", "evil.@@evil.AA", "evil..@evil.AA", "evil.ev il@evil.AA", "evil. @evil.AA", "evil.@evil.AA", "@.evil@evil.AA", "..evil@evil.AA", "ev il.evil@evil.AA", " .evil@evil.AA", ".evil@evil.AA"]}, {"regex": "(?=^.{7,51}$)([A-Za-z]{1})([A-Za-z0-9!@#$%_\\^\\&\\*\\-\\.\\?]{5,49})$", "exceptionStackTrace": null, "matches": ["a?????????????????????????????????????????????????", "aa?????"], "nonMatches": ["a??????????????????????????????????????????????????", "a????", "aa????", "a_????", "a^????", "aA????", "a@????", "a0????", "a.????", "a-????", "a*????", "a&????", "a%????", "a$????", "a#????", "a!????", "?????", "A?????", "a?????"]}, {"regex": "^[^\\\\/:*?&quot;&quot;<>|.][^\\\\/:*?&quot;&quot;<>|]*(?<!\\.)(^[^\\\\/:*?&quot;&quot;<>|]|$)|^$", "exceptionStackTrace": null, "matches": ["aevilA", "aevil0", "aevil ", "a.a", "aeVila", "aEVILa", "aev_ila", "aev ila", "aev4ila", "aea", "a a", "a6a", "a_a", "Aevila", "0evila", " evila", "a", "aa", "", "aevil", "aevila"], "nonMatches": ["aevil|", "aevilu", "aevilt", "aevilq", "aevilo", "aevil\\", "aevil?", "aevil>", "aevil<", "aevil;", "aevil:", "aevil/", "aevil.", "aevil*", "aevil&", "a|a", "a\\a", "a?a", "a>a", "a<a", "a;a", "a:a", "a/a", "a*a", "a&a", "|evila", "uevila", "tevila", "qevila", "oevila", "\\evila", "?evila", ">evila", "<evila", ";evila", ":evila", "/evila", ".evila", "*evila", "&evila"]}, {"regex": "^([1-9]|[1-9]\\d|[1-2]\\d{2}|3[0-6][0-6])$", "exceptionStackTrace": null, "matches": ["300", "100", "10", "1"], "nonMatches": ["307", "370", "1000", "000", "00", "0"]}, {"regex": ".*[a-zA-Z]$", "exceptionStackTrace": null, "matches": ["evila", "eVilA", "EVILA", "ev_ilA", "ev ilA", "ev4ilA", "eA", " A", "6A", "_A", "A", "evilA"], "nonMatches": []}, {"regex": "9397538159", "exceptionStackTrace": null, "matches": ["9397538159"], "nonMatches": []}, {"regex": "^(([0-9])|([0-2][0-9])|([3][0-1]))\\/(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\/\\d{4}$", "exceptionStackTrace": null, "matches": ["30/Jan/0000", "00/Jan/0000", "0/Dec/0000", "0/Nov/0000", "0/Oct/0000", "0/Sep/0000", "0/Aug/0000", "0/Jul/0000", "0/Jun/0000", "0/May/0000", "0/Apr/0000", "0/Mar/0000", "0/Feb/0000", "0/Jan/0000"], "nonMatches": ["32/Jan/0000", "0/Jan/00000", "0/Jan/000"]}, {"regex": "^(?:((31\\/(Jan|Mar|May|Jul|Aug|Oct|Dec))|((([0-2]\\d)|30)\\/(Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))|(([01]\\d|2[0-8])\\/Feb))|(29\\/Feb(?=\\/((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))\\/((1[6-9]|[2-9]\\d)\\d{2})$", "exceptionStackTrace": null, "matches": ["00/Feb/1600", "29/Feb/1600", "20/Feb/1600", "10/Feb/1600", "30/Jan/1600", "00/Dec/1600", "00/Nov/1600", "00/Oct/1600", "00/Sep/1600", "00/Aug/1600", "00/Jul/1600", "00/Jun/1600", "00/May/1600", "00/Apr/1600", "00/Mar/1600", "00/Jan/1600", "31/Dec/1600", "31/Oct/1600", "31/Aug/1600", "31/Jul/1600", "31/May/1600", "31/Mar/1600", "31/Jan/2000", "31/Jan/1600"], "nonMatches": ["31/Jan/0000", "31/Jan/16000", "31/Jan/160", "31/Jan/1000"]}, {"regex": "(?<=(?:\\\\))[a-zA-Z0-9\\-\\s_]*(?=(?:\\.\\w*$))", "exceptionStackTrace": null, "matches": [], "nonMatches": ["\\", ".", "-", "eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", " ", "6", "_", "", "evil"]}, {"regex": "^(?=.*[A-E]).{1,1}$|^(?=.*[A-E]).(?=.*[+-]).{1,1}$", "exceptionStackTrace": null, "matches": ["A"], "nonMatches": ["aaa", "aA", "a0", "a-", "a+", "a ", "Aa", "0a", "-a", "+a", " a", "", "0", "-", "+", " ", "aa", "a"]}, {"regex": "#([1-9]){2}([1-9]){2}([1-9]){2}", "exceptionStackTrace": null, "matches": ["#1111111", "#111111"], "nonMatches": ["#111101", "#110111", "#11111", "#011111"]}, {"regex": "((?:[^&quot;,]|(?:&quot;(?:\\\\{2}|\\\\&quot;|[^&quot;])*?&quot;))*)", "exceptionStackTrace": null, "matches": ["&quot;u&quot;", "&quot;t&quot;", "&quot;q&quot;", "&quot;o&quot;", "&quot;A&quot;", "&quot;;&quot;", "&quot;0&quot;", "&quot;,&quot;", "&quot;&&quot;", "&quot; &quot;", "&quot;\\\\\\\\&quot;", "&quot;&quot;", "&quot;\\\\\\&quot;", "&quot;\\&quot;", "aa", "u", "t", "q", "o", "\\", "A", ";", "0", ",", "&", " ", "", "&quot;a&quot;", "&quot;\\&quot;&quot;", "&quot;\\\\&quot;", "a"], "nonMatches": []}, {"regex": "&(?!amp;)", "exceptionStackTrace": null, "matches": ["&"], "nonMatches": []}, {"regex": "^[a-zA-Z]+(([\\&#39;\\,\\.\\-][a-zA-Z])?[a-zA-Z]*)*$", "exceptionStackTrace": null, "matches": ["evil-Aevil-Aevil", "evil-AeVil", "evil-AEVIL", "evil-Ae", "evil-A", "evil-A-Aevil", "evilevil", "evil-aevil", "evil;Aevil", "evil9Aevil", "evil3Aevil", "evil.Aevil", "evil,Aevil", "evil&Aevil", "evil#Aevil", "eVil-Aevil", "EVIL-Aevil", "e-Aevil", "evil", "evil-Aevil"], "nonMatches": ["evil-Aev_il", "evil-Aev il", "evil-Aev4il", "evil-A ", "evil-A6", "evil-A_", "evil0Aevil", "ev_il-Aevil", "ev il-Aevil", "ev4il-Aevil", " -Aevil", "6-Aevil", "_-Aevil", "-Aevil"]}, {"regex": "^([\\+][0-9]{1,3}[\\.][0-9]{1,12})([x]?[0-9]{1,4}?)$", "exceptionStackTrace": null, "matches": ["+0.0x0000", "+0.000000000000x0", "+000.0x0", "+0.00", "+0.0x0"], "nonMatches": ["+0.0x00000", "+0.0x", "+0.0xx0", "+0.0000000000000x0", "+0.x0", "+0000.0x0", "+.0x0"]}, {"regex": "[du]{2}|[gu]{2}|[tu]{2}|[ds]{2}|[gs]{2}|[da]{2}|[ga]{2}|[ta]{2}|[dq]{2}|[gq]{2}|[tq]{2}|[DU]{2}|[GU]{2}|[TU]{2}|[DS]{2}|[GS]{2}|[DA]{2}|[GA]{2}|[TA]{2}|[DQ]{2}|[GQ]{2}|[TQ]{2}", "exceptionStackTrace": null, "matches": ["TQ", "GQ", "QQQ", "DQ", "TA", "GA", "AAA", "DA", "GS", "SSS", "DS", "TU", "GU", "UUU", "DU", "tq", "gq", "qqq", "dq", "ta", "ga", "aaa", "da", "gs", "sss", "ds", "tu", "gu", "uuu", "du", "QQ", "AA", "SS", "UU", "qq", "aa", "ss", "uu"], "nonMatches": ["Q", "AQ", "A", "BA", "S", "AS", "U", "AU", "q", "aq", "a", "ba", "s", "as", "u", "au"]}, {"regex": "[du]{2}|[gu]{2}|[tu]{2}|[ds]{2}|[gs]{2}|[da]{2}|[ga]{2}|[ta]{2}|[dq]{2}|[gq]{2}|[tq]{2}|[DU]{2}|[GU]{2}|[TU]{2}|[DS]{2}|[GS]{2}|[DA]{2}|[GA]{2}|[TA]{2}|[DQ]{2}|[GQ]{2}|[TQ]{2}", "exceptionStackTrace": null, "matches": ["TQ", "GQ", "QQQ", "DQ", "TA", "GA", "AAA", "DA", "GS", "SSS", "DS", "TU", "GU", "UUU", "DU", "tq", "gq", "qqq", "dq", "ta", "ga", "aaa", "da", "gs", "sss", "ds", "tu", "gu", "uuu", "du", "QQ", "AA", "SS", "UU", "qq", "aa", "ss", "uu"], "nonMatches": ["Q", "AQ", "A", "BA", "S", "AS", "U", "AU", "q", "aq", "a", "ba", "s", "as", "u", "au"]}, {"regex": "$(\\n|\\r\\n)", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\n"}, "matches": [], "nonMatches": []}, {"regex": "\\.\\s|$(\\n|\\r\\n)", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\n"}, "matches": [], "nonMatches": []}, {"regex": "\\b(1(?!27\\.0\\.0\\.1)\\d{1,2}|2[0-4][0-9]|25[0-4]|\\d{1,2})\\.(?:\\d{1,3}\\.){2}(25[0-5]|2[0-4][0-9]|1\\d{2}|\\d{2}|[1-9])\\b", "exceptionStackTrace": null, "matches": ["00.0.0.250", "10.0.0.10", "10.0.0.0.250", "10.000.0.250", "100.0.0.250", "1.0.0.250", "0.0.0.250", "250.0.0.250", "200.0.0.250", "10.0.0.1", "10.0.0.00", "10.0.0.100", "10.0.0.200", "10.0.0.250"], "nonMatches": ["000.0.0.250", ".0.0.250", "255.0.0.250", "10.0.0.000", "10.0.0.0", "10.0.0.1000", "10.0.0.256", "10.0.250", "10.0000.0.250", "10..0.250", "1000.0.0.250"]}, {"regex": "[\\\\&quot;&quot;=:;,](([\\w][\\w\\-\\.]*)\\.)?([\\w][\\w\\-]+)(\\.([\\w][\\w\\.]*))?\\\\sql\\d{1,3}[\\\\&quot;&quot;=:;,]", "exceptionStackTrace": null, "matches": [",aevil.aevil.aevil\\sql0u", ",aevil.aevil.aevil\\sql0t", ",aevil.aevil.aevil\\sql0q", ",aevil.aevil.aevil\\sql0o", ",aevil.aevil.aevil\\sql0\\", ",aevil.aevil.aevil\\sql0=", ",aevil.aevil.aevil\\sql0;", ",aevil.aevil.aevil\\sql0:", ",aevil.aevil.aevil\\sql0&", ",aevil.aevil.aevil\\sql000,", ",aevil.aevil.a.\\sql0,", ",aevil.aevil.a-\\sql0,", ",aevil.aevil.aeVil\\sql0,", ",aevil.aevil.aEVIL\\sql0,", ",aevil.aevil.aev_il\\sql0,", ",aevil.aevil.aev4il\\sql0,", ",aevil.aevil.ae\\sql0,", ",aevil.aevil.a6\\sql0,", ",aevil.aevil.a_\\sql0,", ",aevil.aevil.a\\sql0,", ",aevil.aevil._evil\\sql0,", ",aevil.aevil.Aevil\\sql0,", ",aevil.aevil.0evil\\sql0,", ",aevil.a..aevil\\sql0,", ",aevil.a-.aevil\\sql0,", ",aevil.aeVil.aevil\\sql0,", ",aevil.aEVIL.aevil\\sql0,", ",aevil.aev_il.aevil\\sql0,", ",aevil.aev4il.aevil\\sql0,", ",aevil.ae.aevil\\sql0,", ",aevil.a6.aevil\\sql0,", ",aevil.a_.aevil\\sql0,", ",aevil.a.aevil\\sql0,", ",aevil._evil.aevil\\sql0,", ",aevil.Aevil.aevil\\sql0,", ",aevil.0evil.aevil\\sql0,", ",aevil.aevil.aevil.aevil\\sql0,", ",aevil.aevil\\sql0,", ",a..aevil.aevil\\sql0,", ",a-.aevil.aevil\\sql0,", ",aeVil.aevil.aevil\\sql0,", ",aEVIL.aevil.aevil\\sql0,", ",aev_il.aevil.aevil\\sql0,", ",aev4il.aevil.aevil\\sql0,", ",ae.aevil.aevil\\sql0,", ",a6.aevil.aevil\\sql0,", ",a_.aevil.aevil\\sql0,", ",a.aevil.aevil\\sql0,", ",_evil.aevil.aevil\\sql0,", ",Aevil.aevil.aevil\\sql0,", ",0evil.aevil.aevil\\sql0,", "uaevil.aevil.aevil\\sql0,", "taevil.aevil.aevil\\sql0,", "qaevil.aevil.aevil\\sql0,", "oaevil.aevil.aevil\\sql0,", "\\aevil.aevil.aevil\\sql0,", "=aevil.aevil.aevil\\sql0,", ";aevil.aevil.aevil\\sql0,", ":aevil.aevil.aevil\\sql0,", "&aevil.aevil.aevil\\sql0,", ",aevil\\sql0,", ",aevil.aevil.aevil\\sql0,"], "nonMatches": [",aevil.aevil.aevil\\sql0a", ",aevil.aevil.aevil\\sql0000,", ",aevil.aevil.aevil\\sql,", ",aevil.aevil.a\\\\sql0,", ",aevil.aevil.a=\\sql0,", ",aevil.aevil.a;\\sql0,", ",aevil.aevil.a:\\sql0,", ",aevil.aevil.a,\\sql0,", ",aevil.aevil.a&\\sql0,", ",aevil.aevil.aev il\\sql0,", ",aevil.aevil.a \\sql0,", ",aevil.a\\.aevil\\sql0,", ",aevil.a=.aevil\\sql0,", ",aevil.a;.aevil\\sql0,", ",aevil.a:.aevil\\sql0,", ",aevil.a,.aevil\\sql0,", ",aevil.a&.aevil\\sql0,", ",aevil.aev il.aevil\\sql0,", ",aevil.a .aevil\\sql0,", ",a\\.aevil.aevil\\sql0,", ",a=.aevil.aevil\\sql0,", ",a;.aevil.aevil\\sql0,", ",a:.aevil.aevil\\sql0,", ",a,.aevil.aevil\\sql0,", ",a&.aevil.aevil\\sql0,", ",aev il.aevil.aevil\\sql0,", ",a .aevil.aevil\\sql0,", "aaevil.aevil.aevil\\sql0,"]}, {"regex": "[\\\\&quot;&quot;=/>](25[0-4]|2[0-4][0-9]|1\\d{2}|\\d{2})\\.((25[0-4]|2[0-4][0-9]|1\\d{2}|\\d{1,2})\\.){2}(25[0-4]|2[0-4][0-9]|1\\d{2}|\\d{2}|[1-9])\\b[\\\\&quot;&quot;=:;,/<]", "exceptionStackTrace": null, "matches": [">10.250.250.250<", ">250.00.0.250<", ">250.10.100.250<", ">250.250.200.250<", ">250.250.250.10<", ">250.250.250.250\\", ">250.250.250.250=", ">250.250.250.250;", ">250.250.250.250:", ">250.250.250.250/", ">250.250.250.250,", ">250.250.250.250&", "u250.250.250.250<", "t250.250.250.250<", "q250.250.250.250<", "o250.250.250.250<", "\\250.250.250.250<", "=250.250.250.250<", ";250.250.250.250<", "/250.250.250.250<", "&250.250.250.250<", ">250.0.250.250<", ">250.100.250.250<", ">250.200.250.250<", ">00.250.250.250<", ">100.250.250.250<", ">200.250.250.250<", ">250.0.0.250<", ">250.100.100.250<", ">250.200.200.250<", ">250.250.250.1<", ">250.250.250.00<", ">250.250.250.100<", ">250.250.250.200<", ">250.250.250.250<"], "nonMatches": [">000.250.250.250<", ">0.250.250.250<", ">1000.250.250.250<", ">250.000.0.250<", ">250..0.250<", ">250.1000.100.250<", ">250.250.250.000<", ">250.250.250.0<", ">250.250.250.1000<", ">250.250.250.250u", ">250.250.250.250t", ">250.250.250.250q", ">250.250.250.250o", ">250.250.250.250a", ">250.250.250.255<", ">250.250.250.250.250<", ">250.250.250<", ">250.255.250.250<", ">255.250.250.250<", "a250.250.250.250<"]}, {"regex": "^(([1-9]\\d{0,2}(\\,\\d{3})*|([1-9]\\d*))(\\.\\d{2})?)|([0]\\.(([0][1-9])|([1-9]\\d)))$", "exceptionStackTrace": null, "matches": ["100.00", "1.00", "10,000.00.00", "10,000", "10,000.000", "10,000.0", "10,000,000.00", "10,0000.00", "10,00.00", "1000,000.00", "100,000.00", "1,000.00", "1", "0.10", "0.01", "10.00", "10,000.00"], "nonMatches": ["0.00", "00.00", "00,000.00"]}, {"regex": "^([01]\\d|2[0123])([0-5]\\d){2}([0-99]\\d)$", "exceptionStackTrace": null, "matches": ["22000090", "21000090", "10000000", "20000090", "00000090", "23000090", "10000090"], "nonMatches": ["24000090", "1000000090", "100090", "10600090"]}, {"regex": "^\\d{8,8}$|^[SC]{2,2}\\d{6,6}$", "exceptionStackTrace": null, "matches": ["SC000000", "CC000000", "00000000"], "nonMatches": ["CC0000000", "CC00000", "CCC000000", "C000000", "AC000000", "000000000", "0000000"]}, {"regex": "^\\w*[-]*\\w*\\\\\\w*$", "exceptionStackTrace": null, "matches": ["evil-evil\\eVil", "evil-evil\\EVIL", "evil-evil\\ev_il", "evil-evil\\ev4il", "evil-evil\\e", "evil-evil\\6", "evil-evil\\_", "evil-evil\\", "evil-eVil\\evil", "evil-EVIL\\evil", "evil-ev_il\\evil", "evil-ev4il\\evil", "evil-e\\evil", "evil-6\\evil", "evil-_\\evil", "evil-\\evil", "evil--evil\\evil", "evilevil\\evil", "eVil-evil\\evil", "EVIL-evil\\evil", "ev_il-evil\\evil", "ev4il-evil\\evil", "e-evil\\evil", "6-evil\\evil", "_-evil\\evil", "-evil\\evil", "\\", "evil-evil\\evil"], "nonMatches": ["evil-evil\\ev il", "evil-evil\\ ", "evil-ev il\\evil", "evil- \\evil", "ev il-evil\\evil", " -evil\\evil"]}, {"regex": "^(([0-1]?[0-9])|([2][0-3])):([0-5][0-9])$", "exceptionStackTrace": null, "matches": ["0:00", "20:00", "00:00"], "nonMatches": ["24:00", "00:60", "000:00"]}, {"regex": "^(([1-9]{1})|([0-1][0-9])|([1-2][0-3])):([0-5][0-9])$", "exceptionStackTrace": null, "matches": ["14:00", "20:00", "11:00", "10:00", "00:00", "1:00"], "nonMatches": ["1:60", ":00", "0:00"]}, {"regex": "^(([1-9]{1})|([0-1][1-2])|(0[1-9])|([1][0-2])):([0-5][0-9])(([aA])|([pP]))[mM]$", "exceptionStackTrace": null, "matches": ["1:00pM", "1:00Am", "1:00aM", "11:00AM", "10:00AM", "01:00AM", "1:00PM", "1:00AM"], "nonMatches": ["13:00AM", "00:00AM", "21:00AM", "1:00Aa", "1:00AA", "1:00bM", "1:00BM", "1:60AM", ":00AM", "0:00AM"]}, {"regex": "\\.txt$", "exceptionStackTrace": null, "matches": [".txt"], "nonMatches": []}, {"regex": "^([0-9]{10})(|)(-[0-9]{3}|)$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (pointless alternation): both clauses are empty"}, "matches": [], "nonMatches": []}, {"regex": "^(?-i:A[DEFGILMNOQRSTUWZ]|B[ABDEFGHIJMNORSTVWYZ]|C[ACDFGHIKLMNORSUVXYZ]|D[EJKMOZ]|E[CEGHRST]|F[IJKMOR]|G[ABDEFHILMNPQRSTUWY]|H[KMNRTU]|I[DELNOQRST]|J[MOP]|K[EGHIMNPRWYZ]|L[ABCIKRSTUVY]|M[ACDGHKLMNOPQRSTUVWXYZ]|N[ACEFGILOPRUZ]|O[M]|P[AEFGHKLMNRSTWY]|QA|R[EOUW]|S[ABCDEGHIJKLMNORTVYZ]|T[CDFGHJKLMNORTVWZ]|U[AGMSYZ]|V[ACEGINU]|W[FS]|Y[ET]|Z[AMW])$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (internal): Unexpected extension ?-"}, "matches": [], "nonMatches": []}, {"regex": "^-?\\d{1,3}\\.(\\d{3}\\.)*\\d{3},\\d\\d$|^-?\\d{1,3},\\d\\d$", "exceptionStackTrace": null, "matches": ["-000,00", "-0.000.000.000,00", "-0.000,00", "-000.000.000,00", "0.000.000,00", "0,00", "0.000,00", "-0,00", "-0.000.000,00"], "nonMatches": ["-0000,00", "-,00", "--0,00", "-0.000.0000,00", "-0.000.00,00", "-0.0000.000,00", "-0.00.000,00", "-0000.000.000,00", "-.000.000,00", "--0.000.000,00"]}, {"regex": "^(([A-Za-z0-9\\!\\#\\$\\%\\&\\&#39;\\*\\+\\-\\/\\=\\?\\^_\\`\\{\\|\\}\\~]+\\.*)*[A-Za-z0-9\\!\\#\\$\\%\\&\\&#39;\\*\\+\\-\\/\\=\\?\\^_\\`\\{\\|\\}\\~]+@((\\w+\\-+)|(\\w+\\.))*\\w{1,63}\\.[a-zA-Z]{2,6})$", "exceptionStackTrace": null, "matches": ["evil.evil@eVil.a.AA", "evil.evil@EVIL.a.AA", "evil.evil@ev_il.a.AA", "evil.evil@ev4il.a.AA", "evil.evil@e.a.AA", "evil.evil@6.a.AA", "evil.evil@_.a.AA", "evil.evil@evil-a.AAAAAA", "evil.evil@evil-a.aA", "evil.evil@evil-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.AA", "evil.evil@evil-_.AA", "evil.evil@evil-A.AA", "evil.evil@evil-0.AA", "evil.evil@evil-evil-a.AA", "evil.evil@a.AA", "evil.evil@evil--a.AA", "evil.evil@evila.AA", "evil.evil@eVil-a.AA", "evil.evil@EVIL-a.AA", "evil.evil@ev_il-a.AA", "evil.evil@ev4il-a.AA", "evil.evil@e-a.AA", "evil.evil@6-a.AA", "evil.evil@_-a.AA", "evil.~@evil-a.AA", "evil.}@evil-a.AA", "evil.|@evil-a.AA", "evil.{@evil-a.AA", "evil.`@evil-a.AA", "evil.^@evil-a.AA", "evil.?@evil-a.AA", "evil.=@evil-a.AA", "evil.;@evil-a.AA", "evil./@evil-a.AA", "evil.-@evil-a.AA", "evil.+@evil-a.AA", "evil.*@evil-a.AA", "evil.&@evil-a.AA", "evil.%@evil-a.AA", "evil.$@evil-a.AA", "evil.#@evil-a.AA", "evil.!@evil-a.AA", "evil.eVil@evil-a.AA", "evil.EVIL@evil-a.AA", "evil.ev_il@evil-a.AA", "evil.ev4il@evil-a.AA", "evil.e@evil-a.AA", "evil.6@evil-a.AA", "evil._@evil-a.AA", "evil.evil.evil@evil-a.AA", "evil@evil-a.AA", "evil..evil@evil-a.AA", "evilevil@evil-a.AA", "~.evil@evil-a.AA", "}.evil@evil-a.AA", "|.evil@evil-a.AA", "{.evil@evil-a.AA", "`.evil@evil-a.AA", "^.evil@evil-a.AA", "?.evil@evil-a.AA", "=.evil@evil-a.AA", ";.evil@evil-a.AA", "/.evil@evil-a.AA", "-.evil@evil-a.AA", "+.evil@evil-a.AA", "*.evil@evil-a.AA", "&.evil@evil-a.AA", "%.evil@evil-a.AA", "$.evil@evil-a.AA", "#.evil@evil-a.AA", "!.evil@evil-a.AA", "eVil.evil@evil-a.AA", "EVIL.evil@evil-a.AA", "ev_il.evil@evil-a.AA", "ev4il.evil@evil-a.AA", "e.evil@evil-a.AA", "6.evil@evil-a.AA", "_.evil@evil-a.AA", "evil@a.AA", "evil.evil@evil.a.AA", "evil.evil@evil-a.AA"], "nonMatches": ["evil.evil@ev il.a.AA", "evil.evil@ .a.AA", "evil.evil@.a.AA", "evil.evil@evil-a.AAAAAAA", "evil.evil@evil-a.A", "evil.evil@evil-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.AA", "evil.evil@evil-.AA", "evil.evil@ev il-a.AA", "evil.evil@ -a.AA", "evil.evil@-a.AA", "evil.@@evil-a.AA", "evil..@evil-a.AA", "evil.ev il@evil-a.AA", "evil. @evil-a.AA", "evil.@evil-a.AA", "@.evil@evil-a.AA", "..evil@evil-a.AA", "ev il.evil@evil-a.AA", " .evil@evil-a.AA", ".evil@evil-a.AA"]}, {"regex": "^((Fred|Wilma)\\s+Flintstone|(Barney|Betty)\\s+Rubble)$", "exceptionStackTrace": null, "matches": ["Barney  Rubble", "Fred  Flintstone", "Betty Rubble", "Barney Rubble", "Wilma Flintstone", "Fred Flintstone"], "nonMatches": ["BarneyRubble", "FredFlintstone"]}, {"regex": "\\<script[^>]*>[\\w|\\t|\\r\\|\\W]*?</script>", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\t"}, "matches": [], "nonMatches": []}, {"regex": "(^(((\\d)|(\\d\\d)|(\\d\\d\\d))(\\xA0|\\x20))*((\\d)|(\\d\\d)|(\\d\\d\\d))([,.]\\d*)?$)", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 160"}, "matches": [], "nonMatches": []}, {"regex": "^((\\d(\\x20)\\d{2}(\\x20)\\d{2}(\\x20)\\d{2}(\\x20)\\d{3}(\\x20)\\d{3}((\\x20)\\d{2}|))|(\\d\\d{2}\\d{2}\\d{2}\\d{3}\\d{3}(\\d{2}|)))$", "exceptionStackTrace": null, "matches": ["0000000000000", "0 00 00 00 000 000", "000000000000000", "0 00 00 00 000 000 00"], "nonMatches": ["00000000000000000", "0000000000000000", "00000000000000", "0 00 00 00 000 000 00 00", "0 00 00 00 000 000 000", "0 00 00 00 000 000 0", "0 00 00 00 000 0000 00", "0 00 00 00 000 00 00", "0 00 00 00 0000 000 00", "0 00 00 00 00 000 00", "0 00 00 000 000 000 00", "0 00 00 0 000 000 00", "0 00 000 00 000 000 00", "0 00 0 00 000 000 00", "0 000 00 00 000 000 00", "0 0 00 00 000 000 00"]}, {"regex": "^[_a-z0-9-]+(\\.[_a-z0-9-]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)+$", "exceptionStackTrace": null, "matches": ["evil.evil@evil.evil.evil", "evil.evil@evil.-", "evil.evil@evil.ev4il", "evil.evil@evil.e", "evil.evil@evil.6", "evil.evil@-.evil", "evil.evil@ev4il.evil", "evil.evil@e.evil", "evil.evil@6.evil", "evil.evil.evil@evil.evil", "evil.-@evil.evil", "evil.ev_il@evil.evil", "evil.ev4il@evil.evil", "evil.e@evil.evil", "evil.6@evil.evil", "evil._@evil.evil", "-.evil@evil.evil", "ev_il.evil@evil.evil", "ev4il.evil@evil.evil", "e.evil@evil.evil", "6.evil@evil.evil", "_.evil@evil.evil", "evil@evil.evil", "evil.evil@evil.evil"], "nonMatches": ["evil.evil@evil", "evil.evil@evil.@", "evil.evil@evil..", "evil.evil@evil.eVil", "evil.evil@evil.EVIL", "evil.evil@evil.ev_il", "evil.evil@evil.ev il", "evil.evil@evil. ", "evil.evil@evil._", "evil.evil@evil.", "evil.evil@@.evil", "evil.evil@..evil", "evil.evil@eVil.evil", "evil.evil@EVIL.evil", "evil.evil@ev_il.evil", "evil.evil@ev il.evil", "evil.evil@ .evil", "evil.evil@_.evil", "evil.evil@.evil", "evil.@@evil.evil", "evil..@evil.evil", "evil.eVil@evil.evil", "evil.EVIL@evil.evil", "evil.ev il@evil.evil", "evil. @evil.evil", "evil.@evil.evil", "@.evil@evil.evil", "..evil@evil.evil", "eVil.evil@evil.evil", "EVIL.evil@evil.evil", "ev il.evil@evil.evil", " .evil@evil.evil", ".evil@evil.evil"]}, {"regex": "^[ \\w\\.]{3,}([A-Za-z]\\.)?([ \\w]*\\##\\d+)?(\\r\\n| )[ \\w]{3,},\\x20([A-Z]{2}\\.)\\x20\\d{5}(-\\d{4})?$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\r"}, "matches": [], "nonMatches": []}, {"regex": "href\\s*=\\s*(?:(?:\\&quot;(?&lt;url&gt;[^\\&quot;]*)\\&quot;)|(?&lt;url&gt;[^\\s*] ))&gt;(?&lt;title&gt;[^&lt;]+)&lt;/\\w&gt;", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?&"}, "matches": []}, {"regex": "<(?<tag>.*).*>(?<text>.*)</\\k<tag>>", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<t"}, "matches": []}, {"regex": "(^(?=.*\\S).*\\n)*", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\n"}, "matches": [], "nonMatches": []}, {"regex": "fgrdgvdr", "exceptionStackTrace": null, "matches": ["fgrdgvdr"], "nonMatches": []}, {"regex": " ^(?<BRACE>\\{)?[a-fA-F\\d]{8}-(?:[a-fA-F\\d]{4}-){3}[a-fA-F\\d]{12}(?<-BRACE>\\})?(?(BRACE)^.)$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<B"}, "matches": []}, {"regex": "^[2-9]{1}[0-9]{1}((?<!1)[1]|[0]|[2-9]){1}\\b", "exceptionStackTrace": null, "matches": ["202", "200", "201"], "nonMatches": ["2011", "20", "2001", "21", "2201", "01", "001"]}, {"regex": "^[1-4]\\d{3}\\/((0?[1-6]\\/((3[0-1])|([1-2][0-9])|(0?[1-9])))|((1[0-2]|(0?[7-9]))\\/(30|([1-2][0-9])|(0?[1-9]))))$", "exceptionStackTrace": null, "matches": ["1000/01/1", "1000/7/30", "1000/10/1", "1000/1/1", "1000/1/10", "1000/1/30", "1000/07/30", "1000/10/01", "1000/10/10", "1000/10/30", "1000/01/01", "1000/01/10", "1000/01/30"], "nonMatches": ["1000/007/30", "1000/10/001", "1000/10/00", "1000/13/30", "1000/01/001", "1000/01/00", "1000/01/32", "1000/00/30", "1000/001/30", "10000/01/30", "100/01/30", "0000/01/30"]}, {"regex": "^((0[1-9]|1[0-9]|2[0-4])([0-5]\\d){2})$", "exceptionStackTrace": null, "matches": ["200000", "100000", "010000"], "nonMatches": ["250000", "01000000", "0100", "016000", "000000"]}, {"regex": "^(\\+[1-9][0-9]*(\\([0-9]*\\)|-[0-9]*-))?[0]?[1-9][0-9\\- ]*$", "exceptionStackTrace": null, "matches": ["+10-00-01 ", "+10--01 ", "+10(0)01  ", "+10(0)01", "+10(0)010", "+10(0)01-", "+10(0)1 ", "01 ", "+10(00)01 ", "+10()01 ", "+100(0)01 ", "+1(0)01 ", "1", "+10-0-01 ", "+10(0)01 "], "nonMatches": ["+10(0)00 ", "+10(0)001 ", "+10(0)+10(0)01 ", "+00(0)01 "]}, {"regex": "[1-9][0-9]{3}[ ]?(([a-rt-zA-RT-Z][a-zA-Z])|([sS][bce-rt-xBCE-RT-X]))", "exceptionStackTrace": null, "matches": ["1000 St", "1000 Se", "1000 Sc", "1000 Sb", "1000 ST", "1000 SE", "1000 SB", "1000 sC", "1000 aC", "1000 AC", "1000 Ta", "1000 tA", "1000 aA", "1000 AA", "1000SC", "1000TA", "1000 SC", "1000 TA"], "nonMatches": ["1000 Sa", "1000 sA", "1000 SA", "1000  TA", "10000 TA", "100 TA", "0000 TA"]}, {"regex": "myInstance\\.myMethod(.*)\\(.*myParam.*\\)", "exceptionStackTrace": null, "matches": ["myInstance.myMethodevil(evilmyParam.)", "myInstance.myMethodevil(evilmyParam))", "myInstance.myMethodevil(evilmyParam()", "myInstance.myMethodevil(evilmyParameVil)", "myInstance.myMethodevil(evilmyParamEVIL)", "myInstance.myMethodevil(evilmyParamev_il)", "myInstance.myMethodevil(evilmyParamev il)", "myInstance.myMethodevil(evilmyParamev4il)", "myInstance.myMethodevil(evilmyParame)", "myInstance.myMethodevil(evilmyParam )", "myInstance.myMethodevil(evilmyParam6)", "myInstance.myMethodevil(evilmyParam_)", "myInstance.myMethodevil(evilmyParam)", "myInstance.myMethodevil(.myParamevil)", "myInstance.myMethodevil()myParamevil)", "myInstance.myMethodevil((myParamevil)", "myInstance.myMethodevil(eVilmyParamevil)", "myInstance.myMethodevil(EVILmyParamevil)", "myInstance.myMethodevil(ev_ilmyParamevil)", "myInstance.myMethodevil(ev ilmyParamevil)", "myInstance.myMethodevil(ev4ilmyParamevil)", "myInstance.myMethodevil(emyParamevil)", "myInstance.myMethodevil( myParamevil)", "myInstance.myMethodevil(6myParamevil)", "myInstance.myMethodevil(_myParamevil)", "myInstance.myMethodevil(myParamevil)", "myInstance.myMethod.(evilmyParamevil)", "myInstance.myMethod)(evilmyParamevil)", "myInstance.myMethod((evilmyParamevil)", "myInstance.myMethodeVil(evilmyParamevil)", "myInstance.myMethodEVIL(evilmyParamevil)", "myInstance.myMethodev_il(evilmyParamevil)", "myInstance.myMethodev il(evilmyParamevil)", "myInstance.myMethodev4il(evilmyParamevil)", "myInstance.myMethode(evilmyParamevil)", "myInstance.myMethod (evilmyParamevil)", "myInstance.myMethod6(evilmyParamevil)", "myInstance.myMethod_(evilmyParamevil)", "myInstance.myMethod(evilmyParamevil)", "myInstance.myMethod(myParam)", "myInstance.myMethodevil(evilmyParamevil)"], "nonMatches": []}, {"regex": "Get-ChildItem  -rec -exclude *.exe,*.dll |select-string  &quot;\\b(?!000)(?!666)(?!9)[0-9]{3}[ |-]*[ -]?(?!00)[0-9]{2}[ |-]*[ -]?(?!0000)[0-9]{4}\\b|[0-9]{3}[-| ][0-9]{2}[-| ][0-9]{4}&quot;", "exceptionStackTrace": null, "matches": ["000 00|0000&quot;", "000 00-0000&quot;", "000|00 0000&quot;", "000-00 0000&quot;", "0000 00 0000&quot;", "Get-ChildItem  -rec -exclude aexe,|dll ", "Get-ChildItem  -rec -exclude aexe,Adll ", "Get-ChildItem  -rec -exclude aexe,;dll ", "Get-ChildItem  -rec -exclude aexe,0dll ", "Get-ChildItem  -rec -exclude aexe,-dll ", "Get-ChildItem  -rec -exclude aexe,,dll ", "Get-ChildItem  -rec -exclude aexe,&dll ", "Get-ChildItem  -rec -exclude aexe, dll ", "Get-ChildItem  -rec -exclude aexe,,adll ", "Get-ChildItem  -rec -exclude aexeadll ", "Get-ChildItem  -rec -exclude |exe,adll ", "Get-ChildItem  -rec -exclude Aexe,adll ", "Get-ChildItem  -rec -exclude ;exe,adll ", "Get-ChildItem  -rec -exclude 0exe,adll ", "Get-ChildItem  -rec -exclude -exe,adll ", "Get-ChildItem  -rec -exclude ,exe,adll ", "Get-ChildItem  -rec -exclude &exe,adll ", "Get-ChildItem  -rec -exclude  exe,adll ", "Get-ChildItem  -rec -exclude  aexe,adll ", "Get-ChildItem  -rec -excludeaexe,adll ", "Get-ChildItem  -rec -excludeaexeadll ", "000 00 0000&quot;", "Get-ChildItem  -rec -exclude aexe,adll "], "nonMatches": ["000 00 00000&quot;", "000 00 000&quot;", "000 000 0000&quot;", "000 0 0000&quot;", "00 00 0000&quot;", "select-string  &quot;000--00--00000", "select-string  &quot;000--00--000", "select-string  &quot;000--00- 0000", "select-string  &quot;000--00---0000", "select-string  &quot;000--00-0000", "select-string  &quot;000--00|-0000", "select-string  &quot;000--00 -0000", "select-string  &quot;000--000--0000", "select-string  &quot;000--0--0000", "select-string  &quot;000- 00--0000", "select-string  &quot;000---00--0000", "select-string  &quot;000-00--0000", "select-string  &quot;000|-00--0000", "select-string  &quot;000 -00--0000", "select-string  &quot;0000--00--0000", "select-string  &quot;00--00--0000", "select-string  &quot;000000000", "select-string  &quot;000--00--0000"]}, {"regex": "(\\{\\\\f\\d*)\\\\([^;]+;)", "exceptionStackTrace": null, "matches": ["{\\f0\\{;", "{\\f0\\\\;", "{\\f0\\eVil;", "{\\f0\\EVIL;", "{\\f0\\ev_il;", "{\\f0\\ev il;", "{\\f0\\ev4il;", "{\\f0\\e;", "{\\f0\\ ;", "{\\f0\\6;", "{\\f0\\_;", "{\\f00\\evil;", "{\\f\\evil;", "{\\f0\\evil;"], "nonMatches": ["{\\f0\\;;", "{\\f0\\;"]}, {"regex": "\\d{1,3}.?\\d{0,3}\\s[a-zA-Z]{2,30}\\s[a-zA-Z]{2,15}", "exceptionStackTrace": null, "matches": ["0a0 AA AAAAAAAAAAAAAAAA", "0a0 AA AAAAAAAAAAAAAAA", "0a0 AA aA", "0a0 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AA", "0a0 aA AA", "0a0000 AA AA", "0a000 AA AA", "0a AA AA", "0aa0 AA AA", "00 AA AA", "0_0 AA AA", "0A0 AA AA", "000 AA AA", "0 0 AA AA", "0000a0 AA AA", "000a0 AA AA", "a0 AA AA", "0 AA AA", "0a0 AA AA"], "nonMatches": ["0a0 AA A", "0a0 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AA", "0a0 A AA"]}, {"regex": "^[0-3][0-9][0-1]\\d{3}-\\d{4}?", "exceptionStackTrace": null, "matches": ["000000-00000", "000000-0000"], "nonMatches": ["000000-000", "0000000-0000", "00000-0000", "002000-0000", "400000-0000"]}, {"regex": "(^|\\s)(00[1-9]|0[1-9]0|0[1-9][1-9]|[1-6]\\d{2}|7[0-6]\\d|77[0-2])(-?|[\\. ])([1-9]0|0[1-9]|[1-9][1-9])\\3(\\d{3}[1-9]|[1-9]\\d{3}|\\d[1-9]\\d{2}|\\d{2}[1-9]\\d)($|\\s|[;:,!\\.\\?])", "exceptionStackTrace": null, "matches": ["001-10-0001;", "001-10-0001:", "001-10-0001.", "001-10-0001,", "001-10-0001!", " 001-10-0001", "770-10-0001", "700-10-0001", "100-10-0001", "011-10-0001", "010-10-0001", "001-11-0001", "001-01-0001", "001-10-0010", "001-10-0100", "001-10-1000", "001-10-0001?", "001-10-0001 ", "001-10-0001"], "nonMatches": ["773-10-0001", "1000-10-0001", "10-10-0001", "001.10-0001", "001-10-00010", "001-10-01000", "001-10-010", "001-10-10000", "001-10-100", "001-10-0000", "001-10-00001", "001-10-001", "001-00-0001", "001--10-0001", "000-10-0001", " 00110-0001", "77010-0001", "70010-0001", "10010-0001", "01110-0001", "01010-0001", "00111-0001", "00101-0001", "00110-0010", "00110-0100", "00110-1000", "00110-0001?", "00110-0001 ", "00110-0001", "001 10-0001"]}, {"regex": "\\[\\w+\\]\\s+((.*=.*\\s+)*|[^\\[])", "exceptionStackTrace": null, "matches": ["[evil] ]", "[evil] [", "[evil] A", "[evil] =", "[evil] 0", "[evil]  ", "[evil] evil=evil evil=evil ", "[evil] evil=evil  ", "[evil] evil=evil", "[evil] evil=] ", "[evil] evil=[ ", "[evil] evil== ", "[evil] evil=eVil ", "[evil] evil=EVIL ", "[evil] evil=ev_il ", "[evil] evil=ev il ", "[evil] evil=ev4il ", "[evil] evil=e ", "[evil] evil=  ", "[evil] evil=6 ", "[evil] evil=_ ", "[evil] evil= ", "[evil] ]=evil ", "[evil] [=evil ", "[evil] ==evil ", "[evil] eVil=evil ", "[evil] EVIL=evil ", "[evil] ev_il=evil ", "[evil] ev il=evil ", "[evil] ev4il=evil ", "[evil] e=evil ", "[evil]  =evil ", "[evil] 6=evil ", "[evil] _=evil ", "[evil] =evil ", "[evil]  evil=evil ", "[eVil] evil=evil ", "[EVIL] evil=evil ", "[ev_il] evil=evil ", "[ev4il] evil=evil ", "[e] evil=evil ", "[6] evil=evil ", "[_] evil=evil ", "[evil] ", "[evil] a", "[evil] evil=evil "], "nonMatches": ["[evil]evil=evil ", "[ev il] evil=evil ", "[ ] evil=evil ", "[] evil=evil "]}, {"regex": "^((https?|ftp)\\://((\\[?(\\d{1,3}\\.){3}\\d{1,3}\\]?)|(([-a-zA-Z0-9]+\\.)+[a-zA-Z]{2,4}))(\\:\\d+)?(/[-a-zA-Z0-9._?,&#39;+&amp;%$#=~\\\\]+)*/?)$", "exceptionStackTrace": null, "matches": ["https://evil.AAAA:0/evil/", "https://evil.aA:0/evil/", "https://evil.evil.AA:0/evil/", "https://-.AA:0/evil/", "https://eVil.AA:0/evil/", "https://EVIL.AA:0/evil/", "https://ev4il.AA:0/evil/", "https://e.AA:0/evil/", "https://6.AA:0/evil/", "https://[0.0.0.0]:0/evil", "https://[0.0.0.0]:0/evil/evil/", "https://[0.0.0.0]:0/", "https://[0.0.0.0]:0/~/", "https://[0.0.0.0]:0/\\/", "https://[0.0.0.0]:0/?/", "https://[0.0.0.0]:0/=/", "https://[0.0.0.0]:0/;/", "https://[0.0.0.0]:0/./", "https://[0.0.0.0]:0/-/", "https://[0.0.0.0]:0/,/", "https://[0.0.0.0]:0/+/", "https://[0.0.0.0]:0/&/", "https://[0.0.0.0]:0/%/", "https://[0.0.0.0]:0/$/", "https://[0.0.0.0]:0/#/", "https://[0.0.0.0]:0/eVil/", "https://[0.0.0.0]:0/EVIL/", "https://[0.0.0.0]:0/ev_il/", "https://[0.0.0.0]:0/ev4il/", "https://[0.0.0.0]:0/e/", "https://[0.0.0.0]:0/6/", "https://[0.0.0.0]:0/_/", "https://[0.0.0.0]/evil/", "https://[0.0.0.0]:00/evil/", "https://[0.0.0.0:0/evil/", "https://[0.0.0.000]:0/evil/", "https://[000.0.0.0]:0/evil/", "https://0.0.0.0]:0/evil/", "http://[0.0.0.0]:0/evil/", "ftp://0.0.0.0", "http://evil.AA", "http://0.0.0.0", "ftp://[0.0.0.0]:0/evil/", "https://evil.AA:0/evil/", "https://[0.0.0.0]:0/evil/"], "nonMatches": ["https://evil.AAAAA:0/evil/", "https://evil.A:0/evil/", "https://AA:0/evil/", "https://~.AA:0/evil/", "https://].AA:0/evil/", "https://\\.AA:0/evil/", "https://[.AA:0/evil/", "https://?.AA:0/evil/", "https://=.AA:0/evil/", "https://;.AA:0/evil/", "https://:.AA:0/evil/", "https:///.AA:0/evil/", "https://..AA:0/evil/", "https://,.AA:0/evil/", "https://+.AA:0/evil/", "https://&.AA:0/evil/", "https://%.AA:0/evil/", "https://$.AA:0/evil/", "https://#.AA:0/evil/", "https://ev_il.AA:0/evil/", "https://ev il.AA:0/evil/", "https:// .AA:0/evil/", "https://_.AA:0/evil/", "https://.AA:0/evil/", "https://[0.0.0.0]:0/evil//", "https://[0.0.0.0]:0/]/", "https://[0.0.0.0]:0/[/", "https://[0.0.0.0]:0/:/", "https://[0.0.0.0]:0///", "https://[0.0.0.0]:0/ev il/", "https://[0.0.0.0]:0/ /", "https://[0.0.0.0]:0//", "https://[0.0.0.0]:0:0/evil/", "https://[0.0.0.0]:/evil/", "https://[0.0.0.0]]:0/evil/", "https://[0.0.0.0000]:0/evil/", "https://[0.0.0.]:0/evil/", "https://[0.0.0.0.0]:0/evil/", "https://[0.0.0]:0/evil/", "https://[0000.0.0.0]:0/evil/", "https://[.0.0.0]:0/evil/", "https://[[0.0.0.0]:0/evil/", "httpss://[0.0.0.0]:0/evil/"]}, {"regex": "[^abc]", "exceptionStackTrace": null, "matches": ["_", "A", "0", " ", "d"], "nonMatches": ["c", "b", "a"]}, {"regex": "^[+]?((\\d*[1-9]+\\d*\\.?\\d*)|(\\d*\\.\\d*[1-9]+\\d*))$", "exceptionStackTrace": null, "matches": ["+0.0100", "+0.01", "+0.0110", "+0.0010", "+0.10", "+00.010", "+.010", "+010.00", "+010.", "+0100", "+0100.0", "+01.0", "+0110.0", "+0010.0", "+10.0", "010.0", ".1", "1", "+0.010", "+010.0"], "nonMatches": ["+0.00", "+0.000", "+010..0", "+00.0", "+000.0", "++010.0"]}, {"regex": "(^(?!0{5})(\\d{5})(?!-?0{4})(-?\\d{4})?$)", "exceptionStackTrace": null, "matches": [], "nonMatches": ["00000-0000-0000", "00000-00000", "00000-000", "00000--0000", "000000000", "000000-0000", "0000-0000", "00000", "00000-0000"]}, {"regex": "^(\\[a-zA-Z &#39;\\]+)$", "exceptionStackTrace": null, "matches": ["[a-zA-Z &#39;]]", "[a-zA-Z &#39;]"], "nonMatches": ["[a-zA-Z &#39;"]}, {"regex": "actionID=&url=&load_frameset=1&autologin=0&anchor_string=&server_key=imap&imapuser=(.*)&pass=(.*)&new_lang=pt_BR&select_view=imp", "exceptionStackTrace": null, "matches": ["actionID=&url=&load_frameset=1&autologin=0&anchor_string=&server_key=imap&imapuser=evil&pass==&new_lang=pt_BR&select_view=imp", "actionID=&url=&load_frameset=1&autologin=0&anchor_string=&server_key=imap&imapuser=evil&pass=&&new_lang=pt_BR&select_view=imp", "actionID=&url=&load_frameset=1&autologin=0&anchor_string=&server_key=imap&imapuser=evil&pass=eVil&new_lang=pt_BR&select_view=imp", "actionID=&url=&load_frameset=1&autologin=0&anchor_string=&server_key=imap&imapuser=evil&pass=EVIL&new_lang=pt_BR&select_view=imp", "actionID=&url=&load_frameset=1&autologin=0&anchor_string=&server_key=imap&imapuser=evil&pass=ev_il&new_lang=pt_BR&select_view=imp", "actionID=&url=&load_frameset=1&autologin=0&anchor_string=&server_key=imap&imapuser=evil&pass=ev il&new_lang=pt_BR&select_view=imp", "actionID=&url=&load_frameset=1&autologin=0&anchor_string=&server_key=imap&imapuser=evil&pass=ev4il&new_lang=pt_BR&select_view=imp", "actionID=&url=&load_frameset=1&autologin=0&anchor_string=&server_key=imap&imapuser=evil&pass=e&new_lang=pt_BR&select_view=imp", "actionID=&url=&load_frameset=1&autologin=0&anchor_string=&server_key=imap&imapuser=evil&pass= &new_lang=pt_BR&select_view=imp", "actionID=&url=&load_frameset=1&autologin=0&anchor_string=&server_key=imap&imapuser=evil&pass=6&new_lang=pt_BR&select_view=imp", "actionID=&url=&load_frameset=1&autologin=0&anchor_string=&server_key=imap&imapuser=evil&pass=_&new_lang=pt_BR&select_view=imp", "actionID=&url=&load_frameset=1&autologin=0&anchor_string=&server_key=imap&imapuser=evil&pass=&new_lang=pt_BR&select_view=imp", "actionID=&url=&load_frameset=1&autologin=0&anchor_string=&server_key=imap&imapuser==&pass=evil&new_lang=pt_BR&select_view=imp", "actionID=&url=&load_frameset=1&autologin=0&anchor_string=&server_key=imap&imapuser=&&pass=evil&new_lang=pt_BR&select_view=imp", "actionID=&url=&load_frameset=1&autologin=0&anchor_string=&server_key=imap&imapuser=eVil&pass=evil&new_lang=pt_BR&select_view=imp", "actionID=&url=&load_frameset=1&autologin=0&anchor_string=&server_key=imap&imapuser=EVIL&pass=evil&new_lang=pt_BR&select_view=imp", "actionID=&url=&load_frameset=1&autologin=0&anchor_string=&server_key=imap&imapuser=ev_il&pass=evil&new_lang=pt_BR&select_view=imp", "actionID=&url=&load_frameset=1&autologin=0&anchor_string=&server_key=imap&imapuser=ev il&pass=evil&new_lang=pt_BR&select_view=imp", "actionID=&url=&load_frameset=1&autologin=0&anchor_string=&server_key=imap&imapuser=ev4il&pass=evil&new_lang=pt_BR&select_view=imp", "actionID=&url=&load_frameset=1&autologin=0&anchor_string=&server_key=imap&imapuser=e&pass=evil&new_lang=pt_BR&select_view=imp", "actionID=&url=&load_frameset=1&autologin=0&anchor_string=&server_key=imap&imapuser= &pass=evil&new_lang=pt_BR&select_view=imp", "actionID=&url=&load_frameset=1&autologin=0&anchor_string=&server_key=imap&imapuser=6&pass=evil&new_lang=pt_BR&select_view=imp", "actionID=&url=&load_frameset=1&autologin=0&anchor_string=&server_key=imap&imapuser=_&pass=evil&new_lang=pt_BR&select_view=imp", "actionID=&url=&load_frameset=1&autologin=0&anchor_string=&server_key=imap&imapuser=&pass=evil&new_lang=pt_BR&select_view=imp", "actionID=&url=&load_frameset=1&autologin=0&anchor_string=&server_key=imap&imapuser=&pass=&new_lang=pt_BR&select_view=imp", "actionID=&url=&load_frameset=1&autologin=0&anchor_string=&server_key=imap&imapuser=evil&pass=evil&new_lang=pt_BR&select_view=imp"], "nonMatches": []}, {"regex": "\\d{2}\\s?[A-Z]{1,3}\\s?\\d{2,4} ", "exceptionStackTrace": null, "matches": ["00 A 0000 ", "00 A00 ", "00 AAA 00 ", "00A 00 ", "000 A 00 ", "00A00 ", "00 A 00 "], "nonMatches": ["00 A 00000 ", "00 A 0 ", "00 A  00 ", "00 AAAA 00 ", "00  00 ", "00  A 00 ", "0 A 00 "]}, {"regex": "\\s*((a|b|c)\\s+(?!.*\\2.*))*(a|b|c)\\s*", "exceptionStackTrace": null, "matches": [" a a  ", " a a", " a a a ", " a ", " a  a ", " aa ", "  a a ", "a a ", "c", "b", "a", " c a ", " b a ", " a c ", " a b ", " a a "], "nonMatches": []}, {"regex": "^[ 1(]{0,3}?([02-9][0-9]{2})\\D{0,2}([0-9]{3})\\D?([0-9]{4})($|\\D+.+$)", "exceptionStackTrace": null, "matches": ["(000a000a0000evil(", "(000a000a0000evileVil", "(000a000a0000evilEVIL", "(000a000a0000evilev_il", "(000a000a0000evilev il", "(000a000a0000evilev4il", "(000a000a0000evile", "(000a000a0000evil ", "(000a000a0000evil6", "(000a000a0000evil_", "(000a000a0000(evil", "(000a000a0000eVilevil", "(000a000a0000EVILevil", "(000a000a0000ev_ilevil", "(000a000a0000ev ilevil", "(000a000a0000ev4ilevil", "(000a000a0000eevil", "(000a000a0000 evil", "(000a000a0000_evil", "(000a000a0000evil", "(000a0000000", "(000a000_0000", "(000a000A0000", "(000a000(0000", "(000a000 0000", "(000aa000a0000", "(000000a0000", "(000_000a0000", "(000A000a0000", "(000(000a0000", "(000 000a0000", "(200a000a0000", "(((000a000a0000", "000a000a0000", "1000a000a0000", " 000a000a0000", "0000000000evilevil", "0000000000", "(000a000a0000evilevil", "(000a000a0000"], "nonMatches": ["(000a000a00006evil", "(000a000a00000", "(000a000a000", "(000a000aa0000", "(000a00000000", "(000a0000a0000", "(000a00a0000", "(000aaa000a0000", "(0000000a0000", "(0000a000a0000", "(00a000a0000", "(100a000a0000", "((((000a000a0000", "0000a000a0000"]}, {"regex": "^[0-9\\s\\(\\)\\+\\-]+$", "exceptionStackTrace": null, "matches": ["--", "0", "+", ")", "(", " ", "-"], "nonMatches": [""]}, {"regex": "^[a-zA-Z]+((\\s|\\-|\\&#39;)[a-zA-Z]+)?$", "exceptionStackTrace": null, "matches": ["evil eVil", "evil EVIL", "evil e", "eVil evil", "EVIL evil", "e evil", "evil", "evil&#39;evil", "evil-evil", "evil evil"], "nonMatches": ["evil evil evil", "evil ev_il", "evil ev il", "evil ev4il", "evil  ", "evil 6", "evil _", "evil ", "ev_il evil", "ev il evil", "ev4il evil", "  evil", "6 evil", "_ evil", " evil"]}, {"regex": "^(([0-9]{5})*-([0-9]{4}))|([0-9]{5})$", "exceptionStackTrace": null, "matches": ["000000", "00000-00000", "0000000000-0000", "-0000", "00000", "00000-0000"], "nonMatches": ["0000", "00000-000", "000000-0000", "0000-0000"]}, {"regex": "^(?:(?:(?:0?[13578]|1[02])(\\/|-)31)|(?:(?:0?[1,3-9]|1[0-2])(\\/|-)(?:29|30)))(\\/|-)(?:[1-9]\\d\\d\\d|\\d[1-9]\\d\\d|\\d\\d[1-9]\\d|\\d\\d\\d[1-9])$|^(?:(?:0?[1-9]|1[0-2])(\\/|-)(?:0?[1-9]|1\\d|2[0-8]))(\\/|-)(?:[1-9]\\d\\d\\d|\\d[1-9]\\d\\d|\\d\\d[1-9]\\d|\\d\\d\\d[1-9])$|^(0?2(\\/|-)29)(\\/|-)(?:(?:0[48]00|[13579][26]00|[2468][048]00)|(?:\\d\\d)?(?:0[48]|[2468][048]|[13579][26]))$", "exceptionStackTrace": null, "matches": ["02/29/0092", "02/29/0076", "02/29/0056", "02/29/0036", "02/29/0016", "02/29/0084", "02/29/0080", "02/29/0068", "02/29/0048", "02/29/0028", "02/29/0004", "02/29/08", "02/29/8400", "02/29/8000", "02/29/6800", "02/29/4800", "02/29/2800", "02/29/9200", "02/29/7600", "02/29/5600", "02/29/3600", "02/29/1600", "02/29/0400", "01/1/1000", "1/01/1000", "03/29/1000", "01/29/1000", "10/31/1000", "07/31/1000", "05/31/1000", "03/31/1000", "01/31/1000", "2-29/0800", "2/29-0800", "2/29/96", "2/29/88", "2/29/08", "2/29/8800", "2/29/9600", "2/29/0800", "10/1/1000", "1-1/1000", "1/20/1000", "1/10/1000", "1/1-1000", "1/1/0001", "1/1/0010", "1/1/0100", "1/1/1000", ",-29/1000", ",/30/1000", ",/29/1000", "8-31/1000", "8/31-1000", "8/31/0001", "8/31/0010", "8/31/0100", "8/31/1000", "02-29/0800", "02/29-0800", "02/29/0096", "02/29/0088", "02/29/0008", "02/29/8800", "02/29/9600", "02/29/0800", "10/01/1000", "01-01/1000", "01/20/1000", "01/10/1000", "01/01-1000", "01/01/0001", "01/01/0010", "01/01/0100", "01/01/1000", "10/29/1000", "0,-29/1000", "0,/30/1000", "0,/29/1000", "12/31/1000", "08-31/1000", "08/31-1000", "08/31/0001", "08/31/0010", "08/31/0100", "08/31/1000"], "nonMatches": ["02/29/0090", "02/29/0006", "02/29/0081", "02/29/000008", "02/29/8100", "02/29/9000", "02/29/0600", "02/29/0000", "002/29/0800", "13/01/1000", "01/01/0000", "01/00/1000", "01/001/1000", "00/01/1000", "001/01/1000", "13/29/1000", "00/29/1000", "00,/29/1000", "11/31/1000", "08/31/0000", "00/31/1000", "008/31/1000"]}, {"regex": "\\d{10,12}@[a-zA-Z].[a-zA-Z].*", "exceptionStackTrace": null, "matches": ["0000000000@AaA@", "0000000000@AaAeVil", "0000000000@AaAEVIL", "0000000000@AaAev_il", "0000000000@AaAev il", "0000000000@AaAev4il", "0000000000@AaAe", "0000000000@AaA ", "0000000000@AaA6", "0000000000@AaA_", "0000000000@Aaaevil", "0000000000@AAAevil", "0000000000@A@Aevil", "0000000000@A0Aevil", "0000000000@A Aevil", "0000000000@aaAevil", "0000000000000@AaAevil", "000000000000@AaAevil", "0000000000@AaA", "0000000000@AaAevil"], "nonMatches": ["000000000@AaAevil"]}, {"regex": "^[a-zA-Z]{4}\\d{7}$", "exceptionStackTrace": null, "matches": ["aAAA0000000", "AAAA0000000"], "nonMatches": ["AAAA00000000", "AAAA000000", "AAAAA0000000", "AAA0000000"]}, {"regex": "^[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[- ]{0,1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}", "exceptionStackTrace": null, "matches": ["A0A 0A00", "A0A 0a0", "A0A-0A0", "A0a 0A0", "a0A 0A0", "A0A0A0", "A0A 0A0"], "nonMatches": ["A0A 0A", "A0A 0AA0", "A0A 00", "A0A 00A0", "A0A A0", "A0A  0A0", "A0AA 0A0", "A0 0A0", "A00A 0A0", "AA 0A0", "AA0A 0A0", "0A 0A0"]}, {"regex": "^\\D{0,2}[0]{0,3}[1]{0,1}\\D{0,2}([2-9])(\\d{2})\\D{0,2}(\\d{3})\\D{0,2}(\\d{3})\\D{0,2}(\\d{1})\\D{0,2}$", "exceptionStackTrace": null, "matches": ["a01a200a000a000a0aa", "a01a200a000a000a0", "a01a200a000a000a0_", "a01a200a000a000a0A", "a01a200a000a000a0 ", "a01a200a000a000aa0a", "a01a200a000a0000a", "a01a200a000a000_0a", "a01a200a000a000A0a", "a01a200a000a000 0a", "a01a200a000aa000a0a", "a01a200a000000a0a", "a01a200a000_000a0a", "a01a200a000A000a0a", "a01a200a000 000a0a", "a01a200aa000a000a0a", "a01a200000a000a0a", "a01a200_000a000a0a", "a01a200A000a000a0a", "a01a200 000a000a0a", "a01aa200a000a000a0a", "a01200a000a000a0a", "a01_200a000a000a0a", "a01A200a000a000a0a", "a01 200a000a000a0a", "a0a200a000a000a0a", "a0001a200a000a000a0a", "a1a200a000a000a0a", "aa01a200a000a000a0a", "01a200a000a000a0a", "_01a200a000a000a0a", "A01a200a000a000a0a", "001a200a000a000a0a", " 01a200a000a000a0a", "2000000000", "a01a200a000a000a0a"], "nonMatches": ["a01a200a000a000a0aaa", "a01a200a000a000a00", "a01a200a000a000a00a", "a01a200a000a000aa", "a01a200a000a000aaa0a", "a01a200a000a00000a", "a01a200a000a0000a0a", "a01a200a000a00a0a", "a01a200a000aaa000a0a", "a01a200a0000000a0a", "a01a200a0000a000a0a", "a01a200a00a000a0a", "a01a200aaa000a000a0a", "a01a2000000a000a0a", "a01a2000a000a000a0a", "a01a20a000a000a0a", "a01a000a000a000a0a", "a01aaa200a000a000a0a", "a010200a000a000a0a", "a011a200a000a000a0a", "a00001a200a000a000a0a", "aaa01a200a000a000a0a"]}, {"regex": "sdgdfh", "exceptionStackTrace": null, "matches": ["sdgdfh"], "nonMatches": []}, {"regex": "Are you looking for Tech Help?", "exceptionStackTrace": null, "matches": ["Are you looking for Tech Helpp", "Are you looking for Tech Hel", "Are you looking for Tech Help"], "nonMatches": []}, {"regex": "hfgjhyj", "exceptionStackTrace": null, "matches": ["hfgjhyj"], "nonMatches": []}, {"regex": "href[\\s]*=[\\s]*&quot;[^\\n&quot;]*&quot;", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\n"}, "matches": [], "nonMatches": []}, {"regex": "(INSERT INTO\\s+)(\\w+)(\\s+\\()([\\w+,?\\s*]+)(\\)\\s+VALUES\\s+\\()([&#39;?\\w+&#39;?,?\\s*]+)(\\))", "exceptionStackTrace": null, "matches": ["INSERT INTO evil (evil) VALUES (?)", "INSERT INTO evil (evil) VALUES (;)", "INSERT INTO evil (evil) VALUES (,)", "INSERT INTO evil (evil) VALUES (+)", "INSERT INTO evil (evil) VALUES (*)", "INSERT INTO evil (evil) VALUES (&)", "INSERT INTO evil (evil) VALUES (#)", "INSERT INTO evil (evil) VALUES (eVil)", "INSERT INTO evil (evil) VALUES (EVIL)", "INSERT INTO evil (evil) VALUES (ev_il)", "INSERT INTO evil (evil) VALUES (ev il)", "INSERT INTO evil (evil) VALUES (ev4il)", "INSERT INTO evil (evil) VALUES (e)", "INSERT INTO evil (evil) VALUES ( )", "INSERT INTO evil (evil) VALUES (6)", "INSERT INTO evil (evil) VALUES (_)", "INSERT INTO evil (evil) VALUES  (evil)", "INSERT INTO evil (evil)  VALUES (evil)", "INSERT INTO evil (?) VALUES (evil)", "INSERT INTO evil (,) VALUES (evil)", "INSERT INTO evil (+) VALUES (evil)", "INSERT INTO evil (*) VALUES (evil)", "INSERT INTO evil (eVil) VALUES (evil)", "INSERT INTO evil (EVIL) VALUES (evil)", "INSERT INTO evil (ev_il) VALUES (evil)", "INSERT INTO evil (ev il) VALUES (evil)", "INSERT INTO evil (ev4il) VALUES (evil)", "INSERT INTO evil (e) VALUES (evil)", "INSERT INTO evil ( ) VALUES (evil)", "INSERT INTO evil (6) VALUES (evil)", "INSERT INTO evil (_) VALUES (evil)", "INSERT INTO evil  (evil) VALUES (evil)", "INSERT INTO eVil (evil) VALUES (evil)", "INSERT INTO EVIL (evil) VALUES (evil)", "INSERT INTO ev_il (evil) VALUES (evil)", "INSERT INTO ev4il (evil) VALUES (evil)", "INSERT INTO e (evil) VALUES (evil)", "INSERT INTO 6 (evil) VALUES (evil)", "INSERT INTO _ (evil) VALUES (evil)", "INSERT INTO  evil (evil) VALUES (evil)", "INSERT INTO evil (evil) VALUES (evil)"], "nonMatches": ["INSERT INTO evil (evil) VALUES ())", "INSERT INTO evil (evil) VALUES (()", "INSERT INTO evil (evil) VALUES ()", "INSERT INTO evil (evil) VALUES(evil)", "INSERT INTO evil (evil)VALUES (evil)", "INSERT INTO evil (;) VALUES (evil)", "INSERT INTO evil ()) VALUES (evil)", "INSERT INTO evil (() VALUES (evil)", "INSERT INTO evil (&) VALUES (evil)", "INSERT INTO evil (#) VALUES (evil)", "INSERT INTO evil () VALUES (evil)", "INSERT INTO evil(evil) VALUES (evil)", "INSERT INTO ev il (evil) VALUES (evil)", "INSERT INTO   (evil) VALUES (evil)", "INSERT INTO  (evil) VALUES (evil)", "INSERT INTOevil (evil) VALUES (evil)"]}, {"regex": "(INSERT INTO\\s+)(\\w+)(\\s+\\()([\\w+,?\\s*]+)(\\)\\s+VALUES\\s+)((\\([&#39;?\\w+&#39;?,?\\s*]+\\)\\,?;?\\s*)+)", "exceptionStackTrace": null, "matches": ["INSERT INTO evil (evil) VALUES (evil),; (evil),; ", "INSERT INTO evil (evil) VALUES (evil),;  ", "INSERT INTO evil (evil) VALUES (evil),;", "INSERT INTO evil (evil) VALUES (evil),;; ", "INSERT INTO evil (evil) VALUES (evil), ", "INSERT INTO evil (evil) VALUES (evil),,; ", "INSERT INTO evil (evil) VALUES (evil); ", "INSERT INTO evil (evil) VALUES (?),; ", "INSERT INTO evil (evil) VALUES (;),; ", "INSERT INTO evil (evil) VALUES (,),; ", "INSERT INTO evil (evil) VALUES (+),; ", "INSERT INTO evil (evil) VALUES (*),; ", "INSERT INTO evil (evil) VALUES (&),; ", "INSERT INTO evil (evil) VALUES (#),; ", "INSERT INTO evil (evil) VALUES (eVil),; ", "INSERT INTO evil (evil) VALUES (EVIL),; ", "INSERT INTO evil (evil) VALUES (ev_il),; ", "INSERT INTO evil (evil) VALUES (ev il),; ", "INSERT INTO evil (evil) VALUES (ev4il),; ", "INSERT INTO evil (evil) VALUES (e),; ", "INSERT INTO evil (evil) VALUES ( ),; ", "INSERT INTO evil (evil) VALUES (6),; ", "INSERT INTO evil (evil) VALUES (_),; ", "INSERT INTO evil (evil) VALUES  (evil),; ", "INSERT INTO evil (evil)  VALUES (evil),; ", "INSERT INTO evil (?) VALUES (evil),; ", "INSERT INTO evil (,) VALUES (evil),; ", "INSERT INTO evil (+) VALUES (evil),; ", "INSERT INTO evil (*) VALUES (evil),; ", "INSERT INTO evil (eVil) VALUES (evil),; ", "INSERT INTO evil (EVIL) VALUES (evil),; ", "INSERT INTO evil (ev_il) VALUES (evil),; ", "INSERT INTO evil (ev il) VALUES (evil),; ", "INSERT INTO evil (ev4il) VALUES (evil),; ", "INSERT INTO evil (e) VALUES (evil),; ", "INSERT INTO evil ( ) VALUES (evil),; ", "INSERT INTO evil (6) VALUES (evil),; ", "INSERT INTO evil (_) VALUES (evil),; ", "INSERT INTO evil  (evil) VALUES (evil),; ", "INSERT INTO eVil (evil) VALUES (evil),; ", "INSERT INTO EVIL (evil) VALUES (evil),; ", "INSERT INTO ev_il (evil) VALUES (evil),; ", "INSERT INTO ev4il (evil) VALUES (evil),; ", "INSERT INTO e (evil) VALUES (evil),; ", "INSERT INTO 6 (evil) VALUES (evil),; ", "INSERT INTO _ (evil) VALUES (evil),; ", "INSERT INTO  evil (evil) VALUES (evil),; ", "INSERT INTO evil (evil) VALUES (evil)", "INSERT INTO evil (evil) VALUES (evil),; "], "nonMatches": ["INSERT INTO evil (evil) VALUES ", "INSERT INTO evil (evil) VALUES ()),; ", "INSERT INTO evil (evil) VALUES ((),; ", "INSERT INTO evil (evil) VALUES (),; ", "INSERT INTO evil (evil) VALUES(evil),; ", "INSERT INTO evil (evil)VALUES (evil),; ", "INSERT INTO evil (;) VALUES (evil),; ", "INSERT INTO evil ()) VALUES (evil),; ", "INSERT INTO evil (() VALUES (evil),; ", "INSERT INTO evil (&) VALUES (evil),; ", "INSERT INTO evil (#) VALUES (evil),; ", "INSERT INTO evil () VALUES (evil),; ", "INSERT INTO evil(evil) VALUES (evil),; ", "INSERT INTO ev il (evil) VALUES (evil),; ", "INSERT INTO   (evil) VALUES (evil),; ", "INSERT INTO  (evil) VALUES (evil),; ", "INSERT INTOevil (evil) VALUES (evil),; "]}, {"regex": "(UPDATE\\s+)(\\w+)\\s+(SET)\\s+([\\w+\\s*=\\s*\\w+,?\\s*]+)\\s+(WHERE.+)", "exceptionStackTrace": null, "matches": ["UPDATE evil SET evil WHERE?", "UPDATE evil SET evil WHERE=", "UPDATE evil SET evil WHERE,", "UPDATE evil SET evil WHERE+", "UPDATE evil SET evil WHERE*", "UPDATE evil SET evil WHEREeVil", "UPDATE evil SET evil WHEREEVIL", "UPDATE evil SET evil WHEREev_il", "UPDATE evil SET evil WHEREev il", "UPDATE evil SET evil WHEREev4il", "UPDATE evil SET evil WHEREe", "UPDATE evil SET evil WHERE ", "UPDATE evil SET evil WHERE6", "UPDATE evil SET evil WHERE_", "UPDATE evil SET evil  WHEREevil", "UPDATE evil SET ? WHEREevil", "UPDATE evil SET = WHEREevil", "UPDATE evil SET , WHEREevil", "UPDATE evil SET + WHEREevil", "UPDATE evil SET * WHEREevil", "UPDATE evil SET eVil WHEREevil", "UPDATE evil SET EVIL WHEREevil", "UPDATE evil SET ev_il WHEREevil", "UPDATE evil SET ev il WHEREevil", "UPDATE evil SET ev4il WHEREevil", "UPDATE evil SET e WHEREevil", "UPDATE evil SET   WHEREevil", "UPDATE evil SET 6 WHEREevil", "UPDATE evil SET _ WHEREevil", "UPDATE evil SET  evil WHEREevil", "UPDATE evil  SET evil WHEREevil", "UPDATE eVil SET evil WHEREevil", "UPDATE EVIL SET evil WHEREevil", "UPDATE ev_il SET evil WHEREevil", "UPDATE ev4il SET evil WHEREevil", "UPDATE e SET evil WHEREevil", "UPDATE 6 SET evil WHEREevil", "UPDATE _ SET evil WHEREevil", "UPDATE  evil SET evil WHEREevil", "UPDATE evil SET evil WHEREevil"], "nonMatches": ["UPDATE evil SET evil WHERE", "UPDATE evil SET evilWHEREevil", "UPDATE evil SET  WHEREevil", "UPDATE evil SETevil WHEREevil", "UPDATE evilSET evil WHEREevil", "UPDATE ev il SET evil WHEREevil", "UPDATE   SET evil WHEREevil", "UPDATE  SET evil WHEREevil", "UPDATEevil SET evil WHEREevil"]}, {"regex": "^(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\,*\\s\\s*\\d{4}$|^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\\,*\\s\\d{4}$|^(January|February|March|April|May|June|July|August|September|October|November|December)\\,*\\s\\d{4}$|^(january|february|march|april|may|june|july|august|september|october|november|december)\\,*\\s\\d{4}$", "exceptionStackTrace": null, "matches": ["january,, 0000", "January,, 0000", "jan,, 0000", "Jan,   0000", "Jan, 0000", "Jan,,  0000", "Jan  0000", "december 0000", "november 0000", "october 0000", "september 0000", "august 0000", "july 0000", "june 0000", "april 0000", "march 0000", "february 0000", "january 0000", "December 0000", "November 0000", "October 0000", "September 0000", "August 0000", "July 0000", "June 0000", "April 0000", "March 0000", "February 0000", "January 0000", "dec 0000", "nov 0000", "oct 0000", "sep 0000", "aug 0000", "jul 0000", "jun 0000", "may 0000", "apr 0000", "mar 0000", "feb 0000", "jan 0000", "Dec 0000", "Nov 0000", "Oct 0000", "Sep 0000", "Aug 0000", "Jul 0000", "Jun 0000", "May 0000", "Apr 0000", "Mar 0000", "Feb 0000", "Jan 0000", "december, 0000", "november, 0000", "october, 0000", "september, 0000", "august, 0000", "july, 0000", "june, 0000", "april, 0000", "march, 0000", "february, 0000", "january, 0000", "December, 0000", "November, 0000", "October, 0000", "September, 0000", "August, 0000", "July, 0000", "June, 0000", "May, 0000", "April, 0000", "March, 0000", "February, 0000", "January, 0000", "dec, 0000", "nov, 0000", "oct, 0000", "sep, 0000", "aug, 0000", "jul, 0000", "jun, 0000", "may, 0000", "apr, 0000", "mar, 0000", "feb, 0000", "jan, 0000", "Dec,  0000", "Nov,  0000", "Oct,  0000", "Sep,  0000", "Aug,  0000", "Jul,  0000", "Jun,  0000", "May,  0000", "Apr,  0000", "Mar,  0000", "Feb,  0000", "Jan,  0000"], "nonMatches": ["january, 00000", "january, 000", "January, 00000", "January, 000", "jan, 00000", "jan, 000", "Jan,  00000", "Jan,  000"]}, {"regex": "src=(?:\\&quot;|\\&#39;)?(?<imgSrc>[^>]*[^/].(?:jpg|bmp|gif|png))(?:\\&quot;|\\&#39;)?", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<i"}, "matches": []}, {"regex": "^(((((0[1-9])|(1\\d)|(2[0-8]))-((0[1-9])|(1[0-2])))|((31-((0[13578])|(1[02])))|((29|30)-((0[1,3-9])|(1[0-2])))))-((20[0-9][0-9]))|(29-02-20(([02468][048])|([13579][26]))))$", "exceptionStackTrace": null, "matches": ["29-02-2092", "29-02-2076", "29-02-2056", "29-02-2036", "29-02-2016", "29-02-2084", "29-02-2080", "29-02-2068", "29-02-2048", "29-02-2028", "29-02-2008", "29-03-2000", "31-10-2000", "31-07-2000", "31-05-2000", "31-03-2000", "31-01-2000", "29-01-2000", "29-02-2096", "29-02-2088", "30-0,-2000", "29-10-2000", "29-0,-2000", "31-12-2000", "31-08-2000", "20-01-2000", "10-01-2000", "01-10-2000", "01-01-2000"], "nonMatches": ["29-02-2090", "29-02-2006", "29-02-2081", "29-02-2018", "29-13-2000", "29-00-2000", "31-11-2000", "31-00-2000", "01-13-2000", "01-00-2000", "00-01-2000"]}, {"regex": "([0-9a-z_-]+[\\.][0-9a-z_-]{1,3})$", "exceptionStackTrace": null, "matches": ["evil.---", "evil.a", "evil._", "evil.0", "-.-", "eVil.-", "ev_il.-", "ev il.-", "ev4il.-", "e.-", "6.-", "_.-", "evil.-"], "nonMatches": ["evil.----", "evil.", "..-", "EVIL.-", " .-", ".-"]}, {"regex": "^(([1-9]{1}\\d{0,2},(\\d{3},)*\\d{3})|([1-9]{1}\\d{0,}))$", "exceptionStackTrace": null, "matches": ["100", "110", "10,000,000,000", "10,000", "100,000,000", "1,000,000", "110,000,000", "1", "1,000", "10", "10,000,000"], "nonMatches": ["0", "00", "10,000,0000", "10,000,00", "10,0000,000", "10,00,000", "1000,000,000", "0,000,000", "00,000,000"]}, {"regex": "^[A-Za-z]{1}[0-9]{7}$", "exceptionStackTrace": null, "matches": ["A0000000", "a0000000"], "nonMatches": ["a00000000", "a000000", "aa0000000", "0000000"]}, {"regex": "^(\\+?1(-|\\.|\\s)?)?((\\(((8(00|22|33|44|55|66|77|[8[0-9]))|900)\\)|((8(00|22|33|44|55|66|77|[8[0-9]))|900))(-|\\.|\\s)?\\d{3}(-|\\.|\\s)?\\d{4}|(\\([2-9]([02-9]\\d|1[02-9])\\)|[2-9]([02-9]\\d|1[02-9]))(-|\\.|\\s)?[2-9]([02-9]\\d|1[02-9](-|\\.|\\s)?\\d{4}))$", "exceptionStackTrace": null, "matches": ["+1-212-200", "+1-220-200", "+1-(212)-200", "+1-(200)-2100000", "+1-(200)-212-0000", "+1-(200)-220", "+1-(200)200", "+1-(220)-200", "+1-88-000-0000", "+1-80-000-0000", "+1-(88)-000-0000", "+1-(80)-000-0000", "+1-(800)-0000000", "+1-(800)000-0000", "(800)-000-0000", "+1(800)-000-0000", "1-(800)-000-0000", "210200", "200200", "(210)200", "(200)2100000", "(200)200", "9000000000", "8[0000000", "8770000000", "8660000000", "8550000000", "8440000000", "8330000000", "8220000000", "8000000000", "(900)0000000", "(8[)0000000", "(877)0000000", "(866)0000000", "(855)0000000", "(844)0000000", "(833)0000000", "(822)0000000", "(800)0000000", "+1 (800)-000-0000", "+1.(800)-000-0000", "+1-210-200", "+1-200-200", "+1-(210)-200", "+1-(200) 200", "+1-(200).200", "+1-(200)-210 0000", "+1-(200)-210.0000", "+1-(200)-210-0000", "+1-(200)-200", "+1-900-000-0000", "+1-8[-000-0000", "+1-877-000-0000", "+1-866-000-0000", "+1-855-000-0000", "+1-844-000-0000", "+1-833-000-0000", "+1-822-000-0000", "+1-800-000-0000", "+1-(900)-000-0000", "+1-(8[)-000-0000", "+1-(877)-000-0000", "+1-(866)-000-0000", "+1-(855)-000-0000", "+1-(844)-000-0000", "+1-(833)-000-0000", "+1-(822)-000-0000", "+1-(800) 000-0000", "+1-(800).000-0000", "+1-(800)-000 0000", "+1-(800)-000.0000", "+1-(800)-000-0000"], "nonMatches": ["+1-211-200", "+1-000-200", "+1-(211)-200", "+1-(200)-210-00000", "+1-(200)-210-000", "+1-(200)-210--0000", "+1-(200)-211-0000", "+1-(200)-210", "+1-(200)-000", "+1-(200)--200", "+1-(000)-200", "+1-(800)-000-00000", "+1-(800)-000-000", "+1-(800)-000--0000", "+1-(800)-0000-0000", "+1-(800)-00-0000", "+1-(800)--000-0000", "+1-+1-(800)-000-0000", "+1--(800)-000-0000", "++1-(800)-000-0000"]}, {"regex": "Norton", "exceptionStackTrace": null, "matches": ["Norton"], "nonMatches": []}, {"regex": "^(\\+27|27|0)[0-9]{2}( |-)?[0-9]{3}( |-)?[0-9]{4}( |-)?(x[0-9]+)?(ext[0-9]+)?", "exceptionStackTrace": null, "matches": ["+2700 000 0000 x0ext0ext0", "+2700 000 0000 x0", "+2700 000 0000 x0ext00", "+2700 000 0000 x0ext", "+2700 000 0000 x0x0ext0", "+2700 000 0000 ext0", "+2700 000 0000 x00ext0", "+2700 000 0000 xext0", "+2700 000 0000  x0ext0", "+2700 000 0000x0ext0", "+2700 000 00000 x0ext0", "+2700 0000000 x0ext0", "+2700000 0000 x0ext0", "0000000000", "27000000000", "+27000000000", "000 000 0000 x0ext0", "2700 000 0000 x0ext0", "+2700-000 0000 x0ext0", "+2700 000-0000 x0ext0", "+2700 000 0000-x0ext0", "+2700 000 0000 x0ext0"], "nonMatches": ["+2700 000 000 x0ext0", "+2700 000  0000 x0ext0", "+2700 0000 0000 x0ext0", "+2700 00 0000 x0ext0", "+2700  000 0000 x0ext0", "+27000 000 0000 x0ext0", "+270 000 0000 x0ext0"]}, {"regex": "^(?<From>(JANUARY|FEBRUARY|MARCH|APRIL|MAY|JUNE|JULY|AUGUST|SEPTEMBER|OCTOBER|NOVEMBER|DECEMBER|[ ]|,|/|[0-9])+)(-|\u2013|:|TO)?(?<To>(JANUARY|FEBRUARY|MARCH|APRIL|MAY|JUNE|JULY|AUGUST|SEPTEMBER|OCTOBER|NOVEMBER|DECEMBER|[ ]|,|/|[0-9]|PRESENT)+)+(:)*", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<F"}, "matches": []}, {"regex": "(?<Telephone>([0-9]|[ ]|[-]|[\\(]|[\\)]|ext.|[,])+)([ ]|[:]|\\t|[-])*(?<Where>Home|Office|Work|Away|Fax|FAX|Phone)|(?<Where>Home|Office|Work|Away|Fax|FAX|Phone|Daytime|Evening)([ ]|[:]|\\t|[-])*(?<Telephone>([0-9]|[ ]|[-]|[\\(]|[\\)]|ext.|[,])+)|(?<Telephone>([(]([0-9]){3}[)]([ ])?([0-9]){3}([ ]|-)([0-9]){4}))", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<T"}, "matches": []}, {"regex": "(?<http>(http:[/][/]|www.)([a-z]|[A-Z]|[0-9]|[/.]|[~])*)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<h"}, "matches": []}, {"regex": "(?<email>(?![ ])(\\w|[.])*@(\\w|[.])*)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<e"}, "matches": []}, {"regex": "bfgthb", "exceptionStackTrace": null, "matches": ["bfgthb"], "nonMatches": []}, {"regex": "[\\s0-9a-zA-Z\\;\\&quot;\\,\\<\\>\\\\?\\+\\=\\)\\(\\\\*\\&\\%\\\\$\\#\\.]*", "exceptionStackTrace": null, "matches": ["\\", "?", ">", "=", "<", ";", ".", ",", "+", "*", ")", "(", "&", "%", "$", "#", "eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", " ", "6", "_", "", "evil"], "nonMatches": []}, {"regex": "^((f|ht)tp(s)?)\\://([a-zA-Z0-9\\-]+\\.)*[a-zA-Z0-9\\-]+\\.[a-zA-Z]{2,6}((/|\\?)[a-zA-Z0-9\\.\\?=/#%&\\+-]+|/|)$", "exceptionStackTrace": null, "matches": ["ftps://evil.evil.AA", "ftps://evil.evil.AA/?", "ftps://evil.evil.AA/=", "ftps://evil.evil.AA//", "ftps://evil.evil.AA/.", "ftps://evil.evil.AA/-", "ftps://evil.evil.AA/+", "ftps://evil.evil.AA/&", "ftps://evil.evil.AA/%", "ftps://evil.evil.AA/#", "ftps://evil.evil.AA/eVil", "ftps://evil.evil.AA/EVIL", "ftps://evil.evil.AA/ev4il", "ftps://evil.evil.AA/e", "ftps://evil.evil.AA/6", "ftps://evil.evil.AAAAAA/evil", "ftps://evil.evil.aA/evil", "ftps://evil.-.AA/evil", "ftps://evil.eVil.AA/evil", "ftps://evil.EVIL.AA/evil", "ftps://evil.ev4il.AA/evil", "ftps://evil.e.AA/evil", "ftps://evil.6.AA/evil", "ftps://evil.evil.evil.AA/evil", "ftps://evil.AA/evil", "ftps://-.evil.AA/evil", "ftps://eVil.evil.AA/evil", "ftps://EVIL.evil.AA/evil", "ftps://ev4il.evil.AA/evil", "ftps://e.evil.AA/evil", "ftps://6.evil.AA/evil", "ftp://evil.evil.AA/evil", "http://evil.AA/evil", "ftp://evil.AA", "ftp://evil.AA?evil", "ftp://evil.AA/evil", "https://evil.evil.AA/evil", "ftps://evil.evil.AA/", "ftps://evil.evil.AA?evil", "ftps://evil.evil.AA/evil"], "nonMatches": ["ftps://evil.evil.AA/:", "ftps://evil.evil.AA/ev_il", "ftps://evil.evil.AA/ev il", "ftps://evil.evil.AA/ ", "ftps://evil.evil.AA/_", "ftps://evil.evil.AAAAAAA/evil", "ftps://evil.evil.A/evil", "ftps://evil.?.AA/evil", "ftps://evil.=.AA/evil", "ftps://evil.:.AA/evil", "ftps://evil./.AA/evil", "ftps://evil...AA/evil", "ftps://evil.+.AA/evil", "ftps://evil.&.AA/evil", "ftps://evil.%.AA/evil", "ftps://evil.#.AA/evil", "ftps://evil.ev_il.AA/evil", "ftps://evil.ev il.AA/evil", "ftps://evil. .AA/evil", "ftps://evil._.AA/evil", "ftps://evil..AA/evil", "ftps://?.evil.AA/evil", "ftps://=.evil.AA/evil", "ftps://:.evil.AA/evil", "ftps:///.evil.AA/evil", "ftps://..evil.AA/evil", "ftps://+.evil.AA/evil", "ftps://&.evil.AA/evil", "ftps://%.evil.AA/evil", "ftps://#.evil.AA/evil", "ftps://ev_il.evil.AA/evil", "ftps://ev il.evil.AA/evil", "ftps:// .evil.AA/evil", "ftps://_.evil.AA/evil", "ftps://.evil.AA/evil", "ftpss://evil.evil.AA/evil"]}, {"regex": "^\\s*-?(\\d{0,7}|10[0-5]\\d{0,5}|106[0-6]\\d{0,4}|1067[0-4]\\d{0,3}|10675[0-1]\\d{0,2}|((\\d{0,7}|10[0-5]\\d{0,5}|106[0-6]\\d{0,4}|1067[0-4]\\d{0,3}|10675[0-1]\\d{0,2})\\.)?([0-1]?[0-9]|2[0-3]):[0-5]?[0-9](:[0-5]?[0-9](\\.\\d{1,7})?)?)\\s*$", "exceptionStackTrace": null, "matches": [" -10675000.00:00:00.0 ", " -1067520.00:00:00.0 ", " -10670000.00:00:00.0 ", " -106750.00:00:00.0 ", " -10600000.00:00:00.0 ", " -10670.00:00:00.0 ", " -10000000.00:00:00.0 ", " -100.00:00:00.0 ", " -1060.00:00:00.0 ", " -0.00:00 ", " -0.00:00:00 ", " -0.00:00:00.0000000 ", " -0.00:00:0.0 ", " -0.00:0:00.0 ", " -0.0:00:00.0 ", " -00:00:00.0 ", " -0000000.00:00:00.0 ", " -.00:00:00.0 ", " -10675000 ", " -1067520 ", " -10670000 ", " -106750 ", " -10600000 ", " -10670 ", " -10000000 ", " -100 ", " -1060 ", " -0  ", " -0", " -0000000 ", " - ", " 0 ", "  -0 ", "-0 ", "20:0", "0:0", "106750", "10670", "1060", "100", "", " -1067500.00:00:00.0 ", " -106700.00:00:00.0 ", " -10600.00:00:00.0 ", " -1000.00:00:00.0 ", " -0.20:00:00.0 ", " -0.00:00:00.0 ", " -1067500 ", " -106700 ", " -10600 ", " -1000 ", " -0 "], "nonMatches": [" -106750000.00:00:00.0 ", " -106700000.00:00:00.0 ", " -106000000.00:00:00.0 ", " -100000000.00:00:00.0 ", " -0.24:00:00.0 ", " -0.00:00:00.0:00.0 ", " -0.00:00:00.0.0 ", " -0.00:00:00.00000000 ", " -0.00:00:00. ", " -0.00:00:000.0 ", " -0.00:00:60.0 ", " -0.00:000:00.0 ", " -0.00:60:00.0 ", " -0.000:00:00.0 ", " -0.0.00:00:00.0 ", " -00000000.00:00:00.0 ", " -106750000 ", " -106700000 ", " -106000000 ", " -100000000 ", " -00000000 ", " --0 "]}, {"regex": "^[\\s]*(?:(Public|Private)[\\s]+(?:[_][\\s]*[\\n\\r]+)?)?(Function|Sub)[\\s]+(?:[_][\\s]*[\\n\\r]+)?([a-zA-Z][\\w]{0,254})(?:[\\s\\n\\r_]*\\((?:[\\s\\n\\r_]*([a-zA-Z][\\w]{0,254})[,]?[\\s]*)*\\))?", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\n"}, "matches": [], "nonMatches": []}, {"regex": "([0-9]+:)?[0-9]+\\s*(am|pm)|[0-9]+:[0-9]+\\s*(am|pm)?", "exceptionStackTrace": null, "matches": ["0:0 amam", "0:0 ", "0:0  am", "0:0am", "0:00 am", "0:0:0 am", "0 am", "00:0 am", ":0 am", "0:0", "0pm", "0am", "0:0 pm", "0:0 am"], "nonMatches": ["0: am"]}, {"regex": "[0-9]+[stndrh]*\\s*(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)[a-z]*\\s*([0-9][0-9][0-9][0-9])?|(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)[a-z]*\\s*[0-9]+[stndrh]*|[0-9]+[\\/.-][0-9]+[\\/.-][0-9]+[0-9]+|[saturnmoewdhfi]*day", "exceptionStackTrace": null, "matches": ["iiday", "wday", "uday", "tday", "sday", "rday", "oday", "nday", "mday", "hday", "fday", "eday", "dday", "bday", "aday", "0-0-000", "0-0/00", "0-0.00", "0-00-00", "0/0-00", "0.0-00", "00-0-00", "janevil 0hh", "janevil 0", "janevil 0t", "janevil 0s", "janevil 0r", "janevil 0n", "janevil 0d", "janevil 0a", "janevil 00h", "janevil  0h", "janevil0h", "janev4il 0h", "jane 0h", "jan  0h", "jan6 0h", "jan 0h", "0h janevil 00000000", "0h janevil ", "0h janevil  0000", "0h janevil0000", "0h janeVil 0000", "0h janEVIL 0000", "0h janev_il 0000", "0h janev il 0000", "0h janev4il 0000", "0h jane 0000", "0h jan  0000", "0h jan6 0000", "0h jan_ 0000", "0h jan 0000", "0h  janevil 0000", "0hjanevil 0000", "0hh janevil 0000", "0 janevil 0000", "0t janevil 0000", "0s janevil 0000", "0r janevil 0000", "0n janevil 0000", "0d janevil 0000", "0a janevil 0000", "00h janevil 0000", "h janevil 0000", "day", "dec0", "nov0", "oct0", "sep0", "aug0", "jul0", "jun0", "may0", "apr0", "mar0", "feb0", "jan0", "0dec", "0nov", "0oct", "0sep", "0aug", "0jul", "0jun", "0may", "0apr", "0mar", "0feb", "0jan", "iday", "0-0-00", "decevil 0h", "novevil 0h", "octevil 0h", "sepevil 0h", "augevil 0h", "julevil 0h", "junevil 0h", "mayevil 0h", "aprevil 0h", "marevil 0h", "febevil 0h", "janevil 0h", "0h decevil 0000", "0h novevil 0000", "0h octevil 0000", "0h sepevil 0000", "0h augevil 0000", "0h julevil 0000", "0h junevil 0000", "0h mayevil 0000", "0h aprevil 0000", "0h marevil 0000", "0h febevil 0000", "0h janevil 0000"], "nonMatches": ["0-0-0", "0--00", "-0-00", "janevil h", "janeVil 0h", "janEVIL 0h", "janev_il 0h", "janev il 0h", "jan_ 0h"]}, {"regex": "\\b(?([A-Z])[^DFIOQUWZ])\\d(?([A-Z])[^DFIOQU])\\d(?([A-Z])[^DFIOQUWZ])\\d\\b", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character in group name '[A-Z]'"}, "matches": []}, {"regex": "^(N[BLSTU]|[AMN]B|[BQ]C|ON|PE|SK)$", "exceptionStackTrace": null, "matches": ["BC", "MB", "AB", "NT", "NS", "NL", "SK", "PE", "ON", "QC", "NB", "NU"], "nonMatches": ["AC", "BB", "NA"]}, {"regex": "((\\d{2})|(\\d))\\/((\\d{2})|(\\d))\\/((\\d{4})|(\\d{2}))", "exceptionStackTrace": null, "matches": ["00/00/00000", "00/00/000", "000/00/0000", "0/00/0000", "00/0/0000", "00/00/00", "00/00/0000"], "nonMatches": ["00/00/0", "00/000/0000"]}, {"regex": "^(([0]?[1-9]|1[0-2])(:)([0-5][0-9]))$", "exceptionStackTrace": null, "matches": ["1:00", "10:00", "01:00"], "nonMatches": ["13:00", "01:60", "00:00", "001:00"]}, {"regex": "1", "exceptionStackTrace": null, "matches": ["1"], "nonMatches": []}, {"regex": "http://www.livetechnicianhelp.com/gmail-customer-service.html", "exceptionStackTrace": null, "matches": ["http://wwwalivetechnicianhelpacom/gmail-customer-serviceAhtml", "http://wwwalivetechnicianhelpacom/gmail-customer-service:html", "http://wwwalivetechnicianhelpacom/gmail-customer-service0html", "http://wwwalivetechnicianhelpacom/gmail-customer-service/html", "http://wwwalivetechnicianhelpacom/gmail-customer-service-html", "http://wwwalivetechnicianhelpacom/gmail-customer-service html", "http://wwwalivetechnicianhelpAcom/gmail-customer-serviceahtml", "http://wwwalivetechnicianhelp:com/gmail-customer-serviceahtml", "http://wwwalivetechnicianhelp0com/gmail-customer-serviceahtml", "http://wwwalivetechnicianhelp/com/gmail-customer-serviceahtml", "http://wwwalivetechnicianhelp-com/gmail-customer-serviceahtml", "http://wwwalivetechnicianhelp com/gmail-customer-serviceahtml", "http://wwwAlivetechnicianhelpacom/gmail-customer-serviceahtml", "http://www:livetechnicianhelpacom/gmail-customer-serviceahtml", "http://www0livetechnicianhelpacom/gmail-customer-serviceahtml", "http://www/livetechnicianhelpacom/gmail-customer-serviceahtml", "http://www-livetechnicianhelpacom/gmail-customer-serviceahtml", "http://www livetechnicianhelpacom/gmail-customer-serviceahtml", "http://wwwalivetechnicianhelpacom/gmail-customer-serviceahtml"], "nonMatches": []}, {"regex": "2", "exceptionStackTrace": null, "matches": ["2"], "nonMatches": []}, {"regex": "Adlento", "exceptionStackTrace": null, "matches": ["Adlento"], "nonMatches": []}, {"regex": "Steve Smith", "exceptionStackTrace": null, "matches": ["Steve Smith"], "nonMatches": []}, {"regex": "^[+][0-9]\\d{2}-\\d{3}-\\d{4}$", "exceptionStackTrace": null, "matches": ["+000-000-0000"], "nonMatches": ["+000-000-00000", "+000-000-000", "+000-0000-0000", "+000-00-0000", "+0000-000-0000", "+00-000-0000"]}, {"regex": "&quot;((\\\\&quot;)|[^&quot;(\\\\&quot;)])+&quot;", "exceptionStackTrace": null, "matches": ["&quot;A&quot;", "&quot;0&quot;", "&quot; &quot;", "&quot;\\&quot;\\&quot;&quot;", "&quot;a&quot;", "&quot;\\&quot;&quot;"], "nonMatches": ["&quot;u&quot;", "&quot;t&quot;", "&quot;q&quot;", "&quot;o&quot;", "&quot;\\&quot;", "&quot;;&quot;", "&quot;)&quot;", "&quot;(&quot;", "&quot;&&quot;", "&quot;&quot;"]}, {"regex": "http://www.emailcontactnumber.co.uk/ ", "exceptionStackTrace": null, "matches": ["http://wwwaemailcontactnumberacoAuk/ ", "http://wwwaemailcontactnumberaco:uk/ ", "http://wwwaemailcontactnumberaco0uk/ ", "http://wwwaemailcontactnumberaco/uk/ ", "http://wwwaemailcontactnumberaco uk/ ", "http://wwwaemailcontactnumberAcoauk/ ", "http://wwwaemailcontactnumber:coauk/ ", "http://wwwaemailcontactnumber0coauk/ ", "http://wwwaemailcontactnumber/coauk/ ", "http://wwwaemailcontactnumber coauk/ ", "http://wwwAemailcontactnumberacoauk/ ", "http://www:emailcontactnumberacoauk/ ", "http://www0emailcontactnumberacoauk/ ", "http://www/emailcontactnumberacoauk/ ", "http://www emailcontactnumberacoauk/ ", "http://wwwaemailcontactnumberacoauk/ "], "nonMatches": []}, {"regex": "^((((0?[13578])|(1[02]))[\\/|\\-]?((0?[1-9]|[0-2][0-9])|(3[01])))|(((0?[469])|(11))[\\/|\\-]?((0?[1-9]|[0-2][0-9])|(30)))|(0?[2][\\/\\-]?(0?[1-9]|[0-2][0-9])))[\\/\\-]?\\d{2,4}$", "exceptionStackTrace": null, "matches": ["02-1-00", "0201-00", "02/01-00", "2-01-00", "09-1-00", "0901-00", "09|01-00", "09/01-00", "06-01-00", "04-01-00", "9-01-00", "10-01-00", "08-30-00", "08-01-0000", "08-0100", "08-01/00", "08-1-00", "0801-00", "08|01-00", "08/01-00", "07-01-00", "05-01-00", "03-01-00", "01-01-00", "8-01-00", "20000", "2100", "11100", "93000", "90000", "9100", "12100", "83100", "80000", "8100", "02-00-00", "02-01-00", "11-01-00", "09-30-00", "09-00-00", "09-01-00", "12-01-00", "08-31-00", "08-00-00", "08-01-00"], "nonMatches": ["02-30-00", "02-001-00", "02--01-00", "002-01-00", "09-001-00", "09--01-00", "009-01-00", "08-32-00", "08-01-00000", "08-01-0", "08-01--00", "08-001-00", "08--01-00", "00-01-00", "008-01-00"]}, {"regex": "^(1[0-2]|0?[1-9]):([0-5]?[0-9])( AM| PM)$", "exceptionStackTrace": null, "matches": ["1:00 AM", "1:0 AM", "10:0 PM", "10:0 AM", "01:00 AM", "10:00 PM", "10:00 AM"], "nonMatches": ["00:00 AM", "001:00 AM", "10:000 AM", "10:60 AM", "13:00 AM"]}, {"regex": "^(2[0-3]|[01]?[0-9]):([0-5]?[0-9]):([0-5]?[0-9])$", "exceptionStackTrace": null, "matches": ["0:00:00", "00:00:00", "20:00:0", "20:0:00", "0:0:0", "20:0:0", "10:00:00", "20:00:00"], "nonMatches": ["110:00:00", "20:00:000", "20:00:60", "20:000:00", "20:60:00", "24:00:00"]}]