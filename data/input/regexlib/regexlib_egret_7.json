[{"regex": "(?:\\s*)(?<=[-|/])(?<name>\\w*)[:|=](&quot;((?<value>.*?)(?<!\\\\)&quot;)|(?<value>[\\w]*))", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<n"}, "matches": []}, {"regex": "^([\\w\\-\\.]+)\\s.*$", "exceptionStackTrace": null, "matches": ["evil .", "evil -", "evil eVil", "evil EVIL", "evil ev_il", "evil ev il", "evil ev4il", "evil e", "evil  ", "evil 6", "evil _", ". evil", "- evil", "eVil evil", "EVIL evil", "ev_il evil", "ev il evil", "ev4il evil", "e evil", "6 evil", "_ evil", "evil ", "evil evil"], "nonMatches": ["  evil", " evil"]}, {"regex": "<body[\\d\\sa-z\\W\\S\\s]*>", "exceptionStackTrace": null, "matches": ["<body>>", "<body<>", "<bodyeVil>", "<bodyEVIL>", "<bodyev_il>", "<bodyev il>", "<bodyev4il>", "<bodye>", "<body >", "<body6>", "<body_>", "<body>", "<bodyevil>"], "nonMatches": []}, {"regex": "^[A-Za-z]{3,4}[ |\\-]{0,1}[0-9]{6}[ |\\-]{0,1}[0-9A-Za-z]{3}$", "exceptionStackTrace": null, "matches": ["aaa-000000-Aaa", "aaa-000000-0aa", "aaa-000000aaa", "aaa-000000|aaa", "aaa-000000 aaa", "aaa000000-aaa", "aaa|000000-aaa", "aaa 000000-aaa", "aaaa-000000-aaa", "Aaa-000000-aaa", "aaa000000aaa", "aaa-000000-aaa"], "nonMatches": ["aaa-000000-aaaa", "aaa-000000-aa", "aaa-000000--aaa", "aaa-0000000-aaa", "aaa-00000-aaa", "aaa--000000-aaa", "aaaaa-000000-aaa", "aa-000000-aaa"]}, {"regex": "^[A-Za-z]{4}[ |\\-]{0,1}[0-9]{6}[ |\\-]{0,1}[0-9A-Za-z]{3}$", "exceptionStackTrace": null, "matches": ["aaaa-000000-Aaa", "aaaa-000000-0aa", "aaaa-000000aaa", "aaaa-000000|aaa", "aaaa-000000 aaa", "aaaa000000-aaa", "aaaa|000000-aaa", "aaaa 000000-aaa", "Aaaa-000000-aaa", "aaaa000000aaa", "aaaa-000000-aaa"], "nonMatches": ["aaaa-000000-aaaa", "aaaa-000000-aa", "aaaa-000000--aaa", "aaaa-0000000-aaa", "aaaa-00000-aaa", "aaaa--000000-aaa", "aaaaa-000000-aaa", "aaa-000000-aaa"]}, {"regex": "^\\[assembly: AssemblyVersion\\(\\&quot;([0-9]+)\\.([0-9]+)\\.([0-9]+)\\.([0-9]+)", "exceptionStackTrace": null, "matches": ["[assembly: AssemblyVersion(&quot;0.0.0.00", "[assembly: AssemblyVersion(&quot;0.0.00.0", "[assembly: AssemblyVersion(&quot;0.00.0.0", "[assembly: AssemblyVersion(&quot;00.0.0.0", "[assembly: AssemblyVersion(&quot;0.0.0.0"], "nonMatches": ["[assembly: AssemblyVersion(&quot;0.0.0.", "[assembly: AssemblyVersion(&quot;0.0..0", "[assembly: AssemblyVersion(&quot;0..0.0", "[assembly: AssemblyVersion(&quot;.0.0.0"]}, {"regex": "\\d{2}.?\\d{3}.?\\d{3}/?\\d{4}-?\\d{2}", "exceptionStackTrace": null, "matches": ["00a000a000/0000-000", "00a000a000/000000", "00a000a0000000-00", "00a000000/0000-00", "00a000A000/0000-00", "00a0000000/0000-00", "00a000/000/0000-00", "00a000-000/0000-00", "00a000 000/0000-00", "00000a000/0000-00", "00A000a000/0000-00", "000000a000/0000-00", "00/000a000/0000-00", "00-000a000/0000-00", "00 000a000/0000-00", "000a000a000/0000-00", "00000000000000", "00a000a000/0000-00"], "nonMatches": ["00a000a000/0000-0", "00a000a000/0000--00", "00a000a000/00000-00", "00a000a000/000-00", "00a000a000//0000-00", "00a000a0000/0000-00", "00a000a00/0000-00", "00a000aa000/0000-00", "00a0000a000/0000-00", "00a00a000/0000-00", "00aa000a000/0000-00", "0a000a000/0000-00"]}, {"regex": "(SELECT\\s[\\w\\*\\)\\(\\,\\s]+\\sFROM\\s[\\w]+)|\n(UPDATE\\s[\\w]+\\sSET\\s[\\w\\,\\&#39;\\=]+)|\n(INSERT\\sINTO\\s[\\d\\w]+[\\s\\w\\d\\)\\(\\,]*\\sVALUES\\s\\([\\d\\w\\&#39;\\,\\)]+)|\n(DELETE\\sFROM\\s[\\d\\w\\&#39;\\=]+)", "exceptionStackTrace": null, "matches": ["\nDELETE FROM =", "\nDELETE FROM ;", "\nDELETE FROM &", "\nDELETE FROM #", "\nDELETE FROM eVil", "\nDELETE FROM EVIL", "\nDELETE FROM ev_il", "\nDELETE FROM ev il", "\nDELETE FROM ev4il", "\nDELETE FROM e", "\nDELETE FROM 6", "\nDELETE FROM _", "\nINSERT INTO evilevil VALUES (;", "\nINSERT INTO evilevil VALUES (,", "\nINSERT INTO evilevil VALUES ()", "\nINSERT INTO evilevil VALUES (&", "\nINSERT INTO evilevil VALUES (#", "\nINSERT INTO evilevil VALUES (eVil", "\nINSERT INTO evilevil VALUES (EVIL", "\nINSERT INTO evilevil VALUES (ev_il", "\nINSERT INTO evilevil VALUES (ev il", "\nINSERT INTO evilevil VALUES (ev4il", "\nINSERT INTO evilevil VALUES (e", "\nINSERT INTO evilevil VALUES (6", "\nINSERT INTO evilevil VALUES (_", "\nINSERT INTO evil, VALUES (evil", "\nINSERT INTO evil) VALUES (evil", "\nINSERT INTO evil( VALUES (evil", "\nINSERT INTO evileVil VALUES (evil", "\nINSERT INTO evilEVIL VALUES (evil", "\nINSERT INTO evilev_il VALUES (evil", "\nINSERT INTO evilev il VALUES (evil", "\nINSERT INTO evilev4il VALUES (evil", "\nINSERT INTO evile VALUES (evil", "\nINSERT INTO evil  VALUES (evil", "\nINSERT INTO evil6 VALUES (evil", "\nINSERT INTO evil_ VALUES (evil", "\nINSERT INTO eVilevil VALUES (evil", "\nINSERT INTO EVILevil VALUES (evil", "\nINSERT INTO ev_ilevil VALUES (evil", "\nINSERT INTO ev ilevil VALUES (evil", "\nINSERT INTO ev4ilevil VALUES (evil", "\nINSERT INTO eevil VALUES (evil", "\nINSERT INTO 6evil VALUES (evil", "\nINSERT INTO _evil VALUES (evil", "\nUPDATE evil SET =", "\nUPDATE evil SET ;", "\nUPDATE evil SET ,", "\nUPDATE evil SET &", "\nUPDATE evil SET #", "\nUPDATE evil SET eVil", "\nUPDATE evil SET EVIL", "\nUPDATE evil SET ev_il", "\nUPDATE evil SET ev il", "\nUPDATE evil SET ev4il", "\nUPDATE evil SET e", "\nUPDATE evil SET 6", "\nUPDATE evil SET _", "\nUPDATE eVil SET evil", "\nUPDATE EVIL SET evil", "\nUPDATE ev_il SET evil", "\nUPDATE ev4il SET evil", "\nUPDATE e SET evil", "\nUPDATE 6 SET evil", "\nUPDATE _ SET evil", "SELECT evil FROM eVil", "SELECT evil FROM EVIL", "SELECT evil FROM ev_il", "SELECT evil FROM ev il", "SELECT evil FROM ev4il", "SELECT evil FROM e", "SELECT evil FROM 6", "SELECT evil FROM _", "SELECT , FROM evil", "SELECT * FROM evil", "SELECT ) FROM evil", "SELECT ( FROM evil", "SELECT eVil FROM evil", "SELECT EVIL FROM evil", "SELECT ev_il FROM evil", "SELECT ev il FROM evil", "SELECT ev4il FROM evil", "SELECT e FROM evil", "SELECT   FROM evil", "SELECT 6 FROM evil", "SELECT _ FROM evil", "\nINSERT INTO evil VALUES (evil", "\nDELETE FROM evil", "\nINSERT INTO evilevil VALUES (evil", "\nUPDATE evil SET evil", "SELECT evil FROM evil"], "nonMatches": ["\nDELETE FROM ,", "\nDELETE FROM *", "\nDELETE FROM )", "\nDELETE FROM (", "\nDELETE FROM  ", "\nDELETE FROM ", "\nINSERT INTO evilevil VALUES (=", "\nINSERT INTO evilevil VALUES (*", "\nINSERT INTO evilevil VALUES ((", "\nINSERT INTO evilevil VALUES ( ", "\nINSERT INTO evilevil VALUES (", "\nINSERT INTO evil= VALUES (evil", "\nINSERT INTO evil; VALUES (evil", "\nINSERT INTO evil* VALUES (evil", "\nINSERT INTO evil& VALUES (evil", "\nINSERT INTO evil# VALUES (evil", "\nINSERT INTO  evil VALUES (evil", "\nUPDATE evil SET *", "\nUPDATE evil SET )", "\nUPDATE evil SET (", "\nUPDATE evil SET  ", "\nUPDATE evil SET ", "\nUPDATE ev il SET evil", "\nUPDATE   SET evil", "\nUPDATE  SET evil", "SELECT evil FROM  ", "SELECT evil FROM ", "SELECT = FROM evil", "SELECT ; FROM evil", "SELECT & FROM evil", "SELECT # FROM evil", "SELECT  FROM evil"]}, {"regex": "^[-+]?\\d+(\\.\\d)?\\d*$", "exceptionStackTrace": null, "matches": ["+0.000", "+0.0", "+00", "+00.00", "0.00", "-0.00", "0", "+0.00"], "nonMatches": ["+0.0.00", "+.00", "++0.00"]}, {"regex": "\\b([0]?[1-9]|[1,2]\\d|3[0,1])[-/]([0]?[1-9]|[1][0,1,2])[-/](\\d{1,2}|[1][9]\\d\\d|[2][0]\\d\\d)\\b", "exceptionStackTrace": null, "matches": ["30/01/0", "3,/01/0", "10/01/0", "01/11/0", "01/10/0", "01/1,/0", "01/01/00", "01/01-0", "01/1/0", "01-01/0", "1/01/0", "31/1/0", "20/1/0", "1/12/0", "1/1/2000", "1/1/1900", "1/1/0", "31/01/0", "20/01/0", "01/12/0", "01/01/2000", "01/01/1900", "01/01/0"], "nonMatches": ["32/01/0", ",0/01/0", "01/13/0", "01/01/000", "01/01/", "01/00/0", "01/001/0", "00/01/0", "001/01/0"]}, {"regex": "^(\\d{5}-\\d{2}-\\d{7})*$", "exceptionStackTrace": null, "matches": ["00000-00-000000000000-00-0000000", "", "00000-00-0000000"], "nonMatches": ["00000-00-00000000", "00000-00-000000", "00000-000-0000000", "00000-0-0000000", "000000-00-0000000", "0000-00-0000000"]}, {"regex": "gvdgbfhd", "exceptionStackTrace": null, "matches": ["gvdgbfhd"], "nonMatches": []}, {"regex": ".*(\\.[Jj][Pp][Gg]|\\.[Gg][Ii][Ff]|\\.[Jj][Pp][Ee][Gg]|\\.[Pp][Nn][Gg])", "exceptionStackTrace": null, "matches": ["evil.pnG", "evil.pNg", "evil.Png", "evil.jpeG", "evil.jpEg", "evil.jPeg", "evil.Jpeg", "evil.giF", "evil.gIf", "evil.Gif", "evil.jpG", "evil.jPg", "evil.Jpg", "..jpg", "eVil.jpg", "EVIL.jpg", "ev_il.jpg", "ev il.jpg", "ev4il.jpg", "e.jpg", " .jpg", "6.jpg", "_.jpg", ".png", ".jpeg", ".gif", ".jpg", "evil.png", "evil.jpeg", "evil.gif", "evil.jpg"], "nonMatches": ["evil.pna", "evil.pnA", "evil.pag", "evil.pAg", "evil.ang", "evil.Ang", "evil.jpea", "evil.jpeA", "evil.jpag", "evil.jpAg", "evil.jaeg", "evil.jAeg", "evil.apeg", "evil.Apeg", "evil.gia", "evil.giA", "evil.gaf", "evil.gAf", "evil.aif", "evil.Aif", "evil.jpa", "evil.jpA", "evil.jag", "evil.jAg", "evil.apg", "evil.Apg"]}, {"regex": "^[$]?[0-9]*(\\.)?[0-9]?[0-9]?$", "exceptionStackTrace": null, "matches": ["$0.0", "$000", "$00.00", "$.00", "0.00", "", "$0.00"], "nonMatches": ["$0.000", "$0..00", "$$0.00"]}, {"regex": "[A-Z][a-z]+", "exceptionStackTrace": null, "matches": ["AeVil", "Aev_il", "Aev il", "Aev4il", "Ae", "Aevil"], "nonMatches": ["AEVIL", "A ", "A6", "A_", "A"]}, {"regex": "^\\d{9}[\\d|X]$", "exceptionStackTrace": null, "matches": ["000000000|", "0000000000", "000000000X"], "nonMatches": ["000000000A", "0000000000X", "00000000X"]}, {"regex": "(\\w+)\\s+\\1", "exceptionStackTrace": null, "matches": ["evil  evil", "e evil", "evil evil"], "nonMatches": ["evilevil", "eVil evil", "EVIL evil", "ev_il evil", "ev il evil", "ev4il evil", "  evil", "6 evil", "_ evil", " evil"]}, {"regex": "^(\\d{4}[- ]){3}\\d{4}|\\d{16}$", "exceptionStackTrace": null, "matches": ["00000000000000000", "0000 0000 0000 00000", "0000 0000 0000 0000 0000", "0000-0000 0000 0000", "0000000000000000", "0000 0000 0000 0000"], "nonMatches": ["000000000000000", "0000 0000 0000 000", "0000 0000 0000", "00000 0000 0000 0000", "000 0000 0000 0000"]}, {"regex": "^((4\\d{3})|(5[1-5]\\d{2})|(6011))-?\\d{4}-?\\d{4}-?\\d{4}|3[4,7]\\d{13}$", "exceptionStackTrace": null, "matches": ["340000000000000", "3,0000000000000", "4000-0000-0000-00000", "4000-0000-00000000", "4000-00000000-0000", "40000000-0000-0000", "6011000000000000", "5100000000000000", "4000000000000000", "370000000000000", "6011-0000-0000-0000", "5100-0000-0000-0000", "4000-0000-0000-0000"], "nonMatches": ["3700000000000000", "37000000000000", "300000000000000", "51000-0000-0000-0000", "510-0000-0000-0000", "5000-0000-0000-0000", "4000-0000-0000-000", "4000-0000-0000--0000", "4000-0000-00000-0000", "4000-0000-000-0000", "4000-0000--0000-0000", "4000-00000-0000-0000", "4000-000-0000-0000", "4000--0000-0000-0000", "40000-0000-0000-0000", "400-0000-0000-0000"]}, {"regex": "^.{4,8}$", "exceptionStackTrace": null, "matches": ["aaaaaaaa", "_aaa", "Aaaa", "0aaa", " aaa", "aaaa"], "nonMatches": ["aaaaaaaaa", "aaa"]}, {"regex": "^\\d*$", "exceptionStackTrace": null, "matches": ["00", "", "0"], "nonMatches": []}, {"regex": "^[-+]?\\d*$", "exceptionStackTrace": null, "matches": ["+00", "+", "0", "-0", "", "+0"], "nonMatches": ["++0"]}, {"regex": "^\\d*\\.?\\d*$", "exceptionStackTrace": null, "matches": ["0.00", "0.", "00", "00.0", ".0", "", "0.0"], "nonMatches": ["0..0"]}, {"regex": "^[-+]?\\d*\\.?\\d*$", "exceptionStackTrace": null, "matches": ["+0.00", "+0.", "+00", "+00.0", "+.0", "0.0", "-0.0", "", "+0.0"], "nonMatches": ["+0..0", "++0.0"]}, {"regex": "^[a-zA-Z]$", "exceptionStackTrace": null, "matches": ["a", "A"], "nonMatches": []}, {"regex": "^[a-zA-Z]+$", "exceptionStackTrace": null, "matches": ["eVil", "EVIL", "e", "evil"], "nonMatches": ["ev_il", "ev il", "ev4il", " ", "6", "_", ""]}, {"regex": "^[a-zA-Z0-9]+$", "exceptionStackTrace": null, "matches": ["eVil", "EVIL", "ev4il", "e", "6", "evil"], "nonMatches": ["ev_il", "ev il", " ", "_", ""]}, {"regex": "^\\d+$", "exceptionStackTrace": null, "matches": ["00", "0"], "nonMatches": [""]}, {"regex": "^(\\+|-)?\\d+$", "exceptionStackTrace": null, "matches": ["+00", "0", "-0", "+0"], "nonMatches": ["+", "++0"]}, {"regex": "^[a-zA-Z]\\w{3,14}$", "exceptionStackTrace": null, "matches": ["Aaaaaaaaaaaaaaa", "A_aa", "AAaa", "A0aa", "aaaa", "Aaaa"], "nonMatches": ["Aaaaaaaaaaaaaaaa", "Aaa"]}, {"regex": "^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$", "exceptionStackTrace": null, "matches": ["evil@evil.AAA", "evil@evil.aA", "evil@eVil.AA", "evil@EVIL.AA", "evil@ev_il.AA", "evil@e.AA", "evil@_.AA", "eVil@evil.AA", "EVIL@evil.AA", "ev_il@evil.AA", "ev4il@evil.AA", "e@evil.AA", "6@evil.AA", "_@evil.AA", "evil@evil.AA"], "nonMatches": ["evil@evil.AAAA", "evil@evil.A", "evil@@.AA", "evil@..AA", "evil@ev il.AA", "evil@ev4il.AA", "evil@ .AA", "evil@6.AA", "evil@.AA", "ev il@evil.AA", " @evil.AA", "@evil.AA"]}, {"regex": "^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$", "exceptionStackTrace": null, "matches": ["0/00/0000", "00/0/0000", "0/0/0000"], "nonMatches": ["0/0/00000", "0/0/000", "0/000/0000", "0//0000", "000/0/0000", "/0/0000"]}, {"regex": "foo", "exceptionStackTrace": null, "matches": ["foo"], "nonMatches": []}, {"regex": "^[1-5]$", "exceptionStackTrace": null, "matches": ["1"], "nonMatches": ["0"]}, {"regex": "^[12345]$", "exceptionStackTrace": null, "matches": ["4", "3", "2", "1", "5"], "nonMatches": ["0"]}, {"regex": "^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character range \\w-\\."}, "matches": []}, {"regex": "^[2-9]\\d{2}-\\d{3}-\\d{4}$", "exceptionStackTrace": null, "matches": ["200-000-0000"], "nonMatches": ["200-000-00000", "200-000-000", "200-0000-0000", "200-00-0000", "2000-000-0000", "20-000-0000", "000-000-0000"]}, {"regex": "^\\d{5}-\\d{4}|\\d{5}|[A-Z]\\d[A-Z] \\d[A-Z]\\d$", "exceptionStackTrace": null, "matches": ["000000", "00000-00000", "00000-000", "000000-0000", "A0A 0A0", "00000", "00000-0000"], "nonMatches": ["0000", "0000-0000"]}, {"regex": "^\\d$", "exceptionStackTrace": null, "matches": ["0"], "nonMatches": []}, {"regex": "^\\d{5}$", "exceptionStackTrace": null, "matches": ["00000"], "nonMatches": ["000000", "0000"]}, {"regex": "^\\d{5}-\\d{4}$", "exceptionStackTrace": null, "matches": ["00000-0000"], "nonMatches": ["00000-00000", "00000-000", "000000-0000", "0000-0000"]}, {"regex": "^\\d{5}$|^\\d{5}-\\d{4}$", "exceptionStackTrace": null, "matches": ["00000-0000", "00000"], "nonMatches": ["00000-00000", "00000-000", "000000-0000", "0000-0000", "000000", "0000"]}, {"regex": "((\\(\\d{3}\\) ?)|(\\d{3}-))?\\d{3}-\\d{4}", "exceptionStackTrace": null, "matches": ["0000-000-0000", "00-000-0000", "(000) 000-00000", "(000) 0000-0000", "(000) (000) 000-0000", "(000)  000-0000", "(000)000-0000", "(0000) 000-0000", "(00) 000-0000", "000-0000", "000-000-0000", "(000) 000-0000"], "nonMatches": ["(000) 000-000", "(000) 00-0000"]}, {"regex": "[\\w-]+@([\\w-]+\\.)+[\\w-]+", "exceptionStackTrace": null, "matches": ["evil@evil.-", "evil@evil.eVil", "evil@evil.EVIL", "evil@evil.ev_il", "evil@evil.ev il", "evil@evil.ev4il", "evil@evil.e", "evil@evil.6", "evil@evil._", "evil@evil.evil.evil", "evil@-.evil", "evil@eVil.evil", "evil@EVIL.evil", "evil@ev_il.evil", "evil@ev4il.evil", "evil@e.evil", "evil@6.evil", "evil@_.evil", "-@evil.evil", "eVil@evil.evil", "EVIL@evil.evil", "ev_il@evil.evil", "ev il@evil.evil", "ev4il@evil.evil", "e@evil.evil", "6@evil.evil", "_@evil.evil", "evil@evil.evil"], "nonMatches": ["evil@evil.@", "evil@evil..", "evil@evil. ", "evil@evil.", "evil@evil", "evil@@.evil", "evil@..evil", "evil@ev il.evil", "evil@ .evil", "evil@.evil", "@@evil.evil", ".@evil.evil", " @evil.evil", "@evil.evil"]}, {"regex": "\\d{4}-?\\d{4}-?\\d{4}-?\\d{4}", "exceptionStackTrace": null, "matches": ["0000-0000-0000-00000", "0000-0000-00000000", "0000-00000000-0000", "00000000-0000-0000", "00000-0000-0000-0000", "0000000000000000", "0000-0000-0000-0000"], "nonMatches": ["0000-0000-0000-000", "0000-0000-0000--0000", "0000-0000-00000-0000", "0000-0000-000-0000", "0000-0000--0000-0000", "0000-00000-0000-0000", "0000-000-0000-0000", "0000--0000-0000-0000", "000-0000-0000-0000"]}, {"regex": "^(?=.*\\d).{4,8}$", "exceptionStackTrace": null, "matches": ["0aaa"], "nonMatches": ["aaaaaaaaa", "aaaaaaaa", "aaa", "_aaa", "Aaaa", " aaa", "aaaa"]}, {"regex": "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{4,8}$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["aaaaaaaaa", "aaaaaaaa", "aaa", "_aaa", "Aaaa", "0aaa", " aaa", "aaaa"]}, {"regex": "^[-+]?\\d+(\\.\\d+)?$", "exceptionStackTrace": null, "matches": ["+0", "+0.00", "+00.0", "0.0", "-0.0", "0", "+0.0"], "nonMatches": ["+0.0.0", "+0.", "+.0", "++0.0"]}, {"regex": "^(20|21|22|23|[0-1]\\d)[0-5]\\d$", "exceptionStackTrace": null, "matches": ["0000", "2300", "2200", "2100", "2000"], "nonMatches": ["2060"]}, {"regex": "^( [1-9]|[1-9]|0[1-9]|10|11|12)[0-5]\\d$", "exceptionStackTrace": null, "matches": ["1200", "1100", "1000", "0100", "100", " 100"], "nonMatches": ["0000", "000", " 160", " 000"]}, {"regex": "^(|(0[1-9])|(1[0-2]))\\/((0[1-9])|(1\\d)|(2\\d)|(3[0-1]))\\/((\\d{4}))$", "exceptionStackTrace": null, "matches": ["/30/0000", "/20/0000", "/10/0000", "/01/0000", "10/01/0000", "01/30/0000", "01/20/0000", "01/10/0000", "01/01/0000"], "nonMatches": ["13/01/0000", "01/32/0000", "01/01/00000", "01/01/000", "01/00/0000", "0101/01/0000", "00/01/0000"]}, {"regex": "^((((0[13578])|(1[02]))[\\/]?(([0-2][0-9])|(3[01])))|(((0[469])|(11))[\\/]?(([0-2][0-9])|(30)))|(02[\\/]?[0-2][0-9]))[\\/]?\\d{4}$", "exceptionStackTrace": null, "matches": ["0200/0000", "0900/0000", "06/00/0000", "04/00/0000", "10/00/0000", "08/000000", "08/30/0000", "0800/0000", "07/00/0000", "05/00/0000", "03/00/0000", "01/00/0000", "02000000", "11000000", "09300000", "09000000", "12000000", "08310000", "08000000", "02/00/0000", "11/00/0000", "09/30/0000", "09/00/0000", "12/00/0000", "08/31/0000", "08/00/0000"], "nonMatches": ["02/30/0000", "02//00/0000", "09//00/0000", "08/32/0000", "08/00/00000", "08/00/000", "08/00//0000", "08//00/0000", "00/00/0000"]}, {"regex": "^DOMAIN\\\\\\w+$", "exceptionStackTrace": null, "matches": ["DOMAIN\\eVil", "DOMAIN\\EVIL", "DOMAIN\\ev_il", "DOMAIN\\ev4il", "DOMAIN\\e", "DOMAIN\\6", "DOMAIN\\_", "DOMAIN\\evil"], "nonMatches": ["DOMAIN\\ev il", "DOMAIN\\ ", "DOMAIN\\"]}, {"regex": "\\.com/(\\d+)$", "exceptionStackTrace": null, "matches": [".com/00", ".com/0"], "nonMatches": [".com/"]}, {"regex": "^([\\s\\S]){1,20}([\\s\\.])", "exceptionStackTrace": null, "matches": ["a ", "aaaaaaaaaaaaaaaaaaaa.", "_.", "A.", "0.", "..", " .", "a."], "nonMatches": ["aaaaaaaaaaaaaaaaaaaaa.", "."]}, {"regex": "&quot;<[ \\t]*[iI][mM][gG][ \\t]*[sS][rR][cC][ \\t]*=[ \\t]*[&#39;\\&quot;]([^&#39;\\&quot;]+)&quot;", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\t"}, "matches": [], "nonMatches": []}, {"regex": "^([a-zA-Z][a-zA-Z\\&amp;amp;\\-\\.\\&#39;\\s]*|)$", "exceptionStackTrace": null, "matches": ["AevilAevil", "A;", "A.", "A-", "A&", "A#", "AeVil", "AEVIL", "Aev il", "Ae", "A ", "A", "aevil", "", "Aevil"], "nonMatches": ["Aev_il", "Aev4il", "A6", "A_"]}, {"regex": "5", "exceptionStackTrace": null, "matches": ["5"], "nonMatches": []}, {"regex": "^(((?:(?:f|ht)tps?(?!\\:\\/\\/[-\\.\\w]+@)|mailto(?=\\:\\/\\/[-\\.\\w]+@))\\:\\/\\/)?(?:((?:(?:(?:2(?:[0-4]\\d|5[0-5])|[01]?\\d?\\d))(?:\\.(?:2(?:[0-4]\\d|5[0-5])|[01]?\\d?\\d)){3})|(?:(?:[a-zA-Z0-9](?:[-\\w]*[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,6}(?:(?:\\/[-\\w]+(?=\\/))*)?)|(?:[0-9a-zA-Z](?:[-.\\w]*[0-9a-zA-Z])?@(?:[0-9a-zA-Z](?:[-\\w]*[0-9a-zA-Z])?\\.)+[a-zA-Z]{2,6}(?![\\/\\?])))(\\/[-\\w]+)?(?:(?<=\\w)\\.([a-zA-Z0-9]{2,4}))?(?:(?<=\\w)\\?([a-zA-Z][-\\w]*=[-\\w]+(?:&[a-zA-Z][-\\w]*=[-\\w]+)*))?))$", "exceptionStackTrace": null, "matches": ["ftps://0evil0.AA/evil/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://0evil0.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://0evil0.AA/-/evil.00?Aevil=evil&Aevil=evil", "ftps://0evil0.AA/eVil/evil.00?Aevil=evil&Aevil=evil", "ftps://0evil0.AA/EVIL/evil.00?Aevil=evil&Aevil=evil", "ftps://0evil0.AA/ev_il/evil.00?Aevil=evil&Aevil=evil", "ftps://0evil0.AA/ev4il/evil.00?Aevil=evil&Aevil=evil", "ftps://0evil0.AA/e/evil.00?Aevil=evil&Aevil=evil", "ftps://0evil0.AA/6/evil.00?Aevil=evil&Aevil=evil", "ftps://0evil0.AA/_/evil.00?Aevil=evil&Aevil=evil", "ftps://0evil0.AAAAAA/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://0evil0.aA/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://0evil0.0evil0.AA/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://0evil0evil0.AA/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://0.AA/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://0evila.AA/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://0evilA.AA/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://0.0.AA/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://0-0.AA/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://0eVil0.AA/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://0EVIL0.AA/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://0ev_il0.AA/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://0ev4il0.AA/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://0e0.AA/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://060.AA/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://0_0.AA/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://00.AA/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://aevil0.AA/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://Aevil0.AA/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://10.200.200.200/evil.00?Aevil=evil&Aevil=evil", "ftps://00.200.200.200/evil.00?Aevil=evil&Aevil=evil", "ftps://000.200.200.200/evil.00?Aevil=evil&Aevil=evil", "ftps://200.10.100.100/evil.00?Aevil=evil&Aevil=evil", "ftps://200.00.100.100/evil.00?Aevil=evil&Aevil=evil", "ftps://200.200.100.100/evil.00?Aevil=evil&Aevil=evil", "ftps://200.000.100.100/evil.00?Aevil=evil&Aevil=evil", "ftps://200.200.200.200/evil.00", "ftps://200.200.200.200/evil.00?Aevil=evil&Aevil=evil&Aevil=evil", "ftps://200.200.200.200/evil.00?Aevil=evil", "ftps://200.200.200.200/evil.00?Aevil=evil&Aevil=-", "ftps://200.200.200.200/evil.00?Aevil=evil&Aevil=eVil", "ftps://200.200.200.200/evil.00?Aevil=evil&Aevil=EVIL", "ftps://200.200.200.200/evil.00?Aevil=evil&Aevil=ev_il", "ftps://200.200.200.200/evil.00?Aevil=evil&Aevil=ev4il", "ftps://200.200.200.200/evil.00?Aevil=evil&Aevil=e", "ftps://200.200.200.200/evil.00?Aevil=evil&Aevil=6", "ftps://200.200.200.200/evil.00?Aevil=evil&Aevil=_", "ftps://200.200.200.200/evil.00?Aevil=evil&A-=evil", "ftps://200.200.200.200/evil.00?Aevil=evil&AeVil=evil", "ftps://200.200.200.200/evil.00?Aevil=evil&AEVIL=evil", "ftps://200.200.200.200/evil.00?Aevil=evil&Aev_il=evil", "ftps://200.200.200.200/evil.00?Aevil=evil&Aev4il=evil", "ftps://200.200.200.200/evil.00?Aevil=evil&Ae=evil", "ftps://200.200.200.200/evil.00?Aevil=evil&A6=evil", "ftps://200.200.200.200/evil.00?Aevil=evil&A_=evil", "ftps://200.200.200.200/evil.00?Aevil=evil&A=evil", "ftps://200.200.200.200/evil.00?Aevil=evil&aevil=evil", "ftps://200.200.200.200/evil.00?Aevil=-&Aevil=evil", "ftps://200.200.200.200/evil.00?Aevil=eVil&Aevil=evil", "ftps://200.200.200.200/evil.00?Aevil=EVIL&Aevil=evil", "ftps://200.200.200.200/evil.00?Aevil=ev_il&Aevil=evil", "ftps://200.200.200.200/evil.00?Aevil=ev4il&Aevil=evil", "ftps://200.200.200.200/evil.00?Aevil=e&Aevil=evil", "ftps://200.200.200.200/evil.00?Aevil=6&Aevil=evil", "ftps://200.200.200.200/evil.00?Aevil=_&Aevil=evil", "ftps://200.200.200.200/evil.00?A-=evil&Aevil=evil", "ftps://200.200.200.200/evil.00?AeVil=evil&Aevil=evil", "ftps://200.200.200.200/evil.00?AEVIL=evil&Aevil=evil", "ftps://200.200.200.200/evil.00?Aev_il=evil&Aevil=evil", "ftps://200.200.200.200/evil.00?Aev4il=evil&Aevil=evil", "ftps://200.200.200.200/evil.00?Ae=evil&Aevil=evil", "ftps://200.200.200.200/evil.00?A6=evil&Aevil=evil", "ftps://200.200.200.200/evil.00?A_=evil&Aevil=evil", "ftps://200.200.200.200/evil.00?A=evil&Aevil=evil", "ftps://200.200.200.200/evil.00?aevil=evil&Aevil=evil", "ftps://200.200.200.200/evil?Aevil=evil&Aevil=evil", "ftps://200.200.200.200/evil.0000?Aevil=evil&Aevil=evil", "ftps://200.200.200.200/evil.a0?Aevil=evil&Aevil=evil", "ftps://200.200.200.200/evil.A0?Aevil=evil&Aevil=evil", "ftps://200.200.200.200.00?Aevil=evil&Aevil=evil", "ftps://200.200.200.200/eVil.00?Aevil=evil&Aevil=evil", "ftps://200.200.200.200/EVIL.00?Aevil=evil&Aevil=evil", "ftps://200.200.200.200/ev_il.00?Aevil=evil&Aevil=evil", "ftps://200.200.200.200/ev4il.00?Aevil=evil&Aevil=evil", "ftps://200.200.200.200/e.00?Aevil=evil&Aevil=evil", "ftps://200.200.200.200/6.00?Aevil=evil&Aevil=evil", "ftps://200.200.200.200/_.00?Aevil=evil&Aevil=evil", "ftps://200.250.200.200/evil.00?Aevil=evil&Aevil=evil", "200.200.200.200/evil.00?Aevil=evil&Aevil=evil", "ftp://200.200.200.200/evil.00?Aevil=evil&Aevil=evil", "A@A.AA", "0.AA", "0.200.200.200", "250.200.200.200", "200.0.200.200", "200.250.200.200", "200.200.200.200", "https://200.200.200.200/evil.00?Aevil=evil&Aevil=evil", "ftps://0evil0.AA/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://100.200.200.200/evil.00?Aevil=evil&Aevil=evil", "ftps://250.200.200.200/evil.00?Aevil=evil&Aevil=evil", "ftps://200.100.100.100/evil.00?Aevil=evil&Aevil=evil", "ftps://200.250.250.250/evil.00?Aevil=evil&Aevil=evil", "ftps://200.200.200.200/evil.00?Aevil=evil&Aevil=evil"], "nonMatches": ["ftps://AevilA@AevilA.AAAAAAA/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilA@AevilA.AAAAAA/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilA@AevilA.A/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilA@AevilA.aA/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilA@AevilA.AevilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilA@AA/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilA@AevilAevilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilA@A.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilA@Aevila.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilA@Aevil0.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilA@A@A.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilA@A?A.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilA@A=A.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilA@A:A.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilA@A/A.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilA@A.A.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilA@A-A.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilA@A&A.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilA@AeVilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilA@AEVILA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilA@Aev_ilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilA@Aev ilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilA@Aev4ilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilA@AeA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilA@A A.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilA@A6A.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilA@A_A.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilA@AA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilA@aevilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilA@0evilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilAevilA@AevilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://A@AevilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://Aevila@AevilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://Aevil0@AevilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://A@A@AevilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://A?A@AevilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://A=A@AevilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://A:A@AevilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://A/A@AevilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://A.A@AevilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://A-A@AevilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://A&A@AevilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://AeVilA@AevilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://AEVILA@AevilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://Aev_ilA@AevilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://Aev ilA@AevilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://Aev4ilA@AevilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://AeA@AevilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://A A@AevilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://A6A@AevilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://A_A@AevilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://AA@AevilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://aevilA@AevilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://0evilA@AevilA.AA/evil.00?Aevil=evil&Aevil=evil", "ftps://0evil0.AA/@/evil.00?Aevil=evil&Aevil=evil", "ftps://0evil0.AA/?/evil.00?Aevil=evil&Aevil=evil", "ftps://0evil0.AA/=/evil.00?Aevil=evil&Aevil=evil", "ftps://0evil0.AA/:/evil.00?Aevil=evil&Aevil=evil", "ftps://0evil0.AA///evil.00?Aevil=evil&Aevil=evil", "ftps://0evil0.AA/./evil.00?Aevil=evil&Aevil=evil", "ftps://0evil0.AA/&/evil.00?Aevil=evil&Aevil=evil", "ftps://0evil0.AA/ev il/evil.00?Aevil=evil&Aevil=evil", "ftps://0evil0.AA/ /evil.00?Aevil=evil&Aevil=evil", "ftps://0evil0.AA//evil.00?Aevil=evil&Aevil=evil", "ftps://0evil0.AAAAAAA/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://0evil0.A/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://AA/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://0@0.AA/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://0?0.AA/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://0=0.AA/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://0:0.AA/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://0/0.AA/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://0&0.AA/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://0ev il0.AA/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://0 0.AA/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://1000.200.200.200/evil.00?Aevil=evil&Aevil=evil", "ftps://1100.200.200.200/evil.00?Aevil=evil&Aevil=evil", "ftps://256.200.200.200/evil.00?Aevil=evil&Aevil=evil", "ftps://200.1000.100.100/evil.00?Aevil=evil&Aevil=evil", "ftps://200.1100.100.100/evil.00?Aevil=evil&Aevil=evil", "ftps://200.256.250.250/evil.00?Aevil=evil&Aevil=evil", "ftps://200.200.200.200/evil.00?Aevil=evil&Aevil=evil?Aevil=evil&Aevil=evil", "ftps://200.200.200.200/evil.00?Aevil=evil&Aevil=@", "ftps://200.200.200.200/evil.00?Aevil=evil&Aevil=?", "ftps://200.200.200.200/evil.00?Aevil=evil&Aevil==", "ftps://200.200.200.200/evil.00?Aevil=evil&Aevil=:", "ftps://200.200.200.200/evil.00?Aevil=evil&Aevil=/", "ftps://200.200.200.200/evil.00?Aevil=evil&Aevil=.", "ftps://200.200.200.200/evil.00?Aevil=evil&Aevil=&", "ftps://200.200.200.200/evil.00?Aevil=evil&Aevil=ev il", "ftps://200.200.200.200/evil.00?Aevil=evil&Aevil= ", "ftps://200.200.200.200/evil.00?Aevil=evil&Aevil=", "ftps://200.200.200.200/evil.00?Aevil=evil&A@=evil", "ftps://200.200.200.200/evil.00?Aevil=evil&A?=evil", "ftps://200.200.200.200/evil.00?Aevil=evil&A==evil", "ftps://200.200.200.200/evil.00?Aevil=evil&A:=evil", "ftps://200.200.200.200/evil.00?Aevil=evil&A/=evil", "ftps://200.200.200.200/evil.00?Aevil=evil&A.=evil", "ftps://200.200.200.200/evil.00?Aevil=evil&A&=evil", "ftps://200.200.200.200/evil.00?Aevil=evil&Aev il=evil", "ftps://200.200.200.200/evil.00?Aevil=evil&A =evil", "ftps://200.200.200.200/evil.00?Aevil=@&Aevil=evil", "ftps://200.200.200.200/evil.00?Aevil=?&Aevil=evil", "ftps://200.200.200.200/evil.00?Aevil==&Aevil=evil", "ftps://200.200.200.200/evil.00?Aevil=:&Aevil=evil", "ftps://200.200.200.200/evil.00?Aevil=/&Aevil=evil", "ftps://200.200.200.200/evil.00?Aevil=.&Aevil=evil", "ftps://200.200.200.200/evil.00?Aevil=&&Aevil=evil", "ftps://200.200.200.200/evil.00?Aevil=ev il&Aevil=evil", "ftps://200.200.200.200/evil.00?Aevil= &Aevil=evil", "ftps://200.200.200.200/evil.00?Aevil=&Aevil=evil", "ftps://200.200.200.200/evil.00?A@=evil&Aevil=evil", "ftps://200.200.200.200/evil.00?A?=evil&Aevil=evil", "ftps://200.200.200.200/evil.00?A==evil&Aevil=evil", "ftps://200.200.200.200/evil.00?A:=evil&Aevil=evil", "ftps://200.200.200.200/evil.00?A/=evil&Aevil=evil", "ftps://200.200.200.200/evil.00?A.=evil&Aevil=evil", "ftps://200.200.200.200/evil.00?A&=evil&Aevil=evil", "ftps://200.200.200.200/evil.00?Aev il=evil&Aevil=evil", "ftps://200.200.200.200/evil.00?A =evil&Aevil=evil", "ftps://200.200.200.200/evil.00.00?Aevil=evil&Aevil=evil", "ftps://200.200.200.200/evil.00000?Aevil=evil&Aevil=evil", "ftps://200.200.200.200/evil.0?Aevil=evil&Aevil=evil", "ftps://200.200.200.200/evil/evil.00?Aevil=evil&Aevil=evil", "ftps://200.200.200.200/@.00?Aevil=evil&Aevil=evil", "ftps://200.200.200.200/?.00?Aevil=evil&Aevil=evil", "ftps://200.200.200.200/=.00?Aevil=evil&Aevil=evil", "ftps://200.200.200.200/:.00?Aevil=evil&Aevil=evil", "ftps://200.200.200.200//.00?Aevil=evil&Aevil=evil", "ftps://200.200.200.200/..00?Aevil=evil&Aevil=evil", "ftps://200.200.200.200/-.00?Aevil=evil&Aevil=evil", "ftps://200.200.200.200/&.00?Aevil=evil&Aevil=evil", "ftps://200.200.200.200/ev il.00?Aevil=evil&Aevil=evil", "ftps://200.200.200.200/ .00?Aevil=evil&Aevil=evil", "ftps://200.200.200.200/.00?Aevil=evil&Aevil=evil", "ftps://200.200.200.200.200/evil.00?Aevil=evil&Aevil=evil", "ftps://200.200.200/evil.00?Aevil=evil&Aevil=evil", "ftps://ftps://200.200.200.200/evil.00?Aevil=evil&Aevil=evil", "ftpss://200.200.200.200/evil.00?Aevil=evil&Aevil=evil", "mailto://200.200.200.200/evil.00?Aevil=evil&Aevil=evil", "ftps://AevilA@AevilA.AA/evil.00?Aevil=evil&Aevil=evil"]}, {"regex": "fsedgsdrhgtr", "exceptionStackTrace": null, "matches": ["fsedgsdrhgtr"], "nonMatches": []}, {"regex": "^\\s*\\(?((\\+0?44)?\\)?[ \\-]?(\\(0\\))|0)((20[7,8]{1}\\)?[ \\-]?[1-9]{1}[0-9]{2}[ \\-]?[0-9]{4})|([1-8]{1}[0-9]{3}\\)?[ \\-]?[1-9]{1}[0-9]{2}[ \\-]?[0-9]{3}))\\s*$", "exceptionStackTrace": null, "matches": [" (+044)-(0)1000)-100000 ", " (+044)-(0)1000)-100 000 ", " (+044)-(0)1000)100-000 ", " (+044)-(0)1000) 100-000 ", " (+044)-(0)1000-100-000 ", " (+044)-(0)208)-100-0000  ", " (+044)-(0)208)-100-0000", " (+044)-(0)208)-1000000 ", " (+044)-(0)208)-100 0000 ", " (+044)-(0)208)100-0000 ", " (+044)-(0)208) 100-0000 ", " (+044)-(0)208-100-0000 ", " (+044)-(0)207)-100-0000 ", " (+044)-(0)20,)-100-0000 ", " (+044)(0)208)-100-0000 ", " (+044) (0)208)-100-0000 ", " (+044-(0)208)-100-0000 ", " ()-(0)208)-100-0000 ", " (+44)-(0)208)-100-0000 ", " +044)-(0)208)-100-0000 ", "  (+044)-(0)208)-100-0000 ", "(+044)-(0)208)-100-0000 ", "02081000000", "(0)1000100000", "(0)2081000000", " (0208)-100-0000 ", " (+044)-(0)1000)-100-000 ", " (+044)-(0)208)-100-0000 "], "nonMatches": [" (+044)-(0)1000)-100-0000 ", " (+044)-(0)1000)-100-00 ", " (+044)-(0)1000)-100--000 ", " (+044)-(0)1000)-1000-000 ", " (+044)-(0)1000)-10-000 ", " (+044)-(0)1000)-1100-000 ", " (+044)-(0)1000)-00-000 ", " (+044)-(0)1000)-000-000 ", " (+044)-(0)1000)--100-000 ", " (+044)-(0)1000))-100-000 ", " (+044)-(0)10000)-100-000 ", " (+044)-(0)100)-100-000 ", " (+044)-(0)11000)-100-000 ", " (+044)-(0)000)-100-000 ", " (+044)-(0)0000)-100-000 ", " (+044)-(0)208)-100-00000 ", " (+044)-(0)208)-100-000 ", " (+044)-(0)208)-100--0000 ", " (+044)-(0)208)-1000-0000 ", " (+044)-(0)208)-10-0000 ", " (+044)-(0)208)-1100-0000 ", " (+044)-(0)208)-00-0000 ", " (+044)-(0)208)-000-0000 ", " (+044)-(0)208)--100-0000 ", " (+044)-(0)208))-100-0000 ", " (+044)-(0)2088)-100-0000 ", " (+044)-(0)20)-100-0000 ", " (+044)-(0)200)-100-0000 ", " (+044)--(0)208)-100-0000 ", " (+044))-(0)208)-100-0000 ", " (+044+044)-(0)208)-100-0000 ", " (+0044)-(0)208)-100-0000 ", " ((+044)-(0)208)-100-0000 "]}, {"regex": "&amp;\\#x0*(0|1|2|3|4|5|6|7|8|B|C|E|F|10|11|12|13|14|15|16|17|18|19|1A|1B|1C|1D|1E|1F);", "exceptionStackTrace": null, "matches": ["&amp;#x000;", "&amp;#x1F;", "&amp;#x1E;", "&amp;#x1D;", "&amp;#x1C;", "&amp;#x1B;", "&amp;#x1A;", "&amp;#x19;", "&amp;#x18;", "&amp;#x17;", "&amp;#x16;", "&amp;#x15;", "&amp;#x14;", "&amp;#x13;", "&amp;#x12;", "&amp;#x11;", "&amp;#x10;", "&amp;#xF;", "&amp;#xE;", "&amp;#xC;", "&amp;#xB;", "&amp;#x8;", "&amp;#x7;", "&amp;#x6;", "&amp;#x5;", "&amp;#x4;", "&amp;#x3;", "&amp;#x2;", "&amp;#x1;", "&amp;#x0;", "&amp;#x01F;", "&amp;#x01E;", "&amp;#x01D;", "&amp;#x01C;", "&amp;#x01B;", "&amp;#x01A;", "&amp;#x019;", "&amp;#x018;", "&amp;#x017;", "&amp;#x016;", "&amp;#x015;", "&amp;#x014;", "&amp;#x013;", "&amp;#x012;", "&amp;#x011;", "&amp;#x010;", "&amp;#x0F;", "&amp;#x0E;", "&amp;#x0C;", "&amp;#x0B;", "&amp;#x08;", "&amp;#x07;", "&amp;#x06;", "&amp;#x05;", "&amp;#x04;", "&amp;#x03;", "&amp;#x02;", "&amp;#x01;", "&amp;#x00;"], "nonMatches": []}, {"regex": "^\\s*[a-zA-Z0-9_%+#&&#39;*/=^`{|}~-](?:\\.?[a-zA-Z0-9_%+#&&#39;*/=^`{|}~-])*@(?!yahoo.|hotmail.|gmail.|outlook.|aol.|email.)(?:[a-zA-Z0-9_-]+\\.)*(?:[a-zA-Z]{2,9}|\\[(?:2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.(?:2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.(?:2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.(?:2[0-4]\\d|25[0-5]|[01]?\\d\\d?)])\\s*$", "exceptionStackTrace": null, "matches": [" -.-@evil.[10.200.200.200] ", " -.-@evil.[00.200.200.200] ", " -.-@evil.[000.200.200.200] ", " -.-@evil.[200.10.200.200] ", " -.-@evil.[200.00.200.200] ", " -.-@evil.[200.000.200.200] ", " -.-@evil.[200.200.10.200] ", " -.-@evil.[200.200.00.200] ", " -.-@evil.[200.200.000.200] ", " -.-@evil.[200.200.200.10] ", " -.-@evil.[200.200.200.00] ", " -.-@evil.[200.200.200.000] ", " -.-@evil.AA  ", " -.-@evil.AA", " -.-@evil.AAAAAAAAA ", " -.-@evil.aA ", " -.-@evil.evil.AA ", " -.-@AA ", " -.-@-.AA ", " -.-@eVil.AA ", " -.-@EVIL.AA ", " -.-@ev_il.AA ", " -.-@ev4il.AA ", " -.-@e.AA ", " -.-@6.AA ", " -.-@_.AA ", " -.-.-@evil.AA ", " -@evil.AA ", " -.~@evil.AA ", " -.}@evil.AA ", " -.|@evil.AA ", " -.{@evil.AA ", " -.a@evil.AA ", " -.`@evil.AA ", " -._@evil.AA ", " -.^@evil.AA ", " -.A@evil.AA ", " -.=@evil.AA ", " -.;@evil.AA ", " -.9@evil.AA ", " -.3@evil.AA ", " -.0@evil.AA ", " -./@evil.AA ", " -.+@evil.AA ", " -.*@evil.AA ", " -.&@evil.AA ", " -.%@evil.AA ", " -.#@evil.AA ", " --@evil.AA ", " ~.-@evil.AA ", " }.-@evil.AA ", " |.-@evil.AA ", " {.-@evil.AA ", " a.-@evil.AA ", " `.-@evil.AA ", " _.-@evil.AA ", " ^.-@evil.AA ", " A.-@evil.AA ", " =.-@evil.AA ", " ;.-@evil.AA ", " 9.-@evil.AA ", " 3.-@evil.AA ", " 0.-@evil.AA ", " /.-@evil.AA ", " +.-@evil.AA ", " *.-@evil.AA ", " &.-@evil.AA ", " %.-@evil.AA ", " #.-@evil.AA ", "  -.-@evil.AA ", "-.-@evil.AA ", "-@[0.200.200.200]", "-@[250.200.200.200]", "-@[200.0.200.200]", "-@[200.250.200.200]", "-@[200.200.0.200]", "-@[200.200.250.200]", "-@[200.200.200.0]", "-@[200.200.200.250]", "-@[200.200.200.200]", "-@AA", " -.-@evil.[100.200.200.200] ", " -.-@evil.[250.200.200.200] ", " -.-@evil.[200.100.200.200] ", " -.-@evil.[200.250.200.200] ", " -.-@evil.[200.200.100.200] ", " -.-@evil.[200.200.250.200] ", " -.-@evil.[200.200.200.100] ", " -.-@evil.[200.200.200.250] ", " -.-@evil.[200.200.200.200] ", " -.-@evil.AA "], "nonMatches": [" -.-@evil.[1000.200.200.200] ", " -.-@evil.[1100.200.200.200] ", " -.-@evil.[256.200.200.200] ", " -.-@evil.[200.1000.200.200] ", " -.-@evil.[200.1100.200.200] ", " -.-@evil.[200.256.200.200] ", " -.-@evil.[200.200.1000.200] ", " -.-@evil.[200.200.1100.200] ", " -.-@evil.[200.200.256.200] ", " -.-@evil.[200.200.200.1000] ", " -.-@evil.[200.200.200.1100] ", " -.-@evil.[200.200.200.256] ", " -.-@evil.AAAAAAAAAA ", " -.-@evil.A ", " -.-@~.AA ", " -.-@}.AA ", " -.-@|.AA ", " -.-@{.AA ", " -.-@`.AA ", " -.-@^.AA ", " -.-@].AA ", " -.-@[.AA ", " -.-@@.AA ", " -.-@=.AA ", " -.-@;.AA ", " -.-@/.AA ", " -.-@..AA ", " -.-@+.AA ", " -.-@*.AA ", " -.-@&.AA ", " -.-@%.AA ", " -.-@#.AA ", " -.-@ev il.AA ", " -.-@ .AA ", " -.-@.AA ", " -..-@evil.AA "]}, {"regex": "^\\.([rR]([aA][rR]|\\d{2})|(\\d{3})?)$", "exceptionStackTrace": null, "matches": [".RAr", ".RaR", ".rAR", ".", ".000", ".R00", ".RAR"], "nonMatches": [".000000", ".0000", ".00", ".R000", ".R0", ".RAa", ".RAA", ".RbR", ".RBR", ".aAR", ".AAR"]}, {"regex": "(?<STag><)[/\\?\\s]*(?<Prefix>\\w*:)*(?<TagName>\\w*)\\s*(?<Attributes>(?<Attribute>((?<AttributePrefix>\\w*)\\s*:\\s*)*(?<AttributeName>\\w*)\\s*=\\s*(?<AttributeValue>&quot;[^&quot;]*&quot;|&#39;[^&#39;]*&#39;|[^>\\s]*)\\s*)*)\\s*/?(?<ETag>>)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<S"}, "matches": []}, {"regex": "^([10-99]{2})+\\s?([\\u0600-\\u06FF]\\s{1})+\\s?([100-999]{3})$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 1536"}, "matches": [], "nonMatches": []}, {"regex": "^0(6[045679][0469]){1}(\\-)?(1)?[^0\\D]{1}\\d{6}$", "exceptionStackTrace": null, "matches": ["0699-1100000", "0699-1000000", "069911000000", "0696-11000000", "0694-11000000", "0690-11000000", "0679-11000000", "0669-11000000", "0659-11000000", "0649-11000000", "0609-11000000", "06991000000", "0699-11000000"], "nonMatches": ["0699-110000000", "0699-1a000000", "0699-1_000000", "0699-1A000000", "0699-10000000", "0699-1-000000", "0699-1 000000", "0699-111000000", "0699--11000000", "0699699-11000000", "0-11000000", "0691-11000000", "0619-11000000"]}, {"regex": "^.{2,}$", "exceptionStackTrace": null, "matches": ["_a", "Aa", "0a", " a", "aa"], "nonMatches": ["a"]}, {"regex": "^\\d?\\d([./-])\\d?\\d\\1(?:\\d\\d|\\d{4})$", "exceptionStackTrace": null, "matches": ["00-0-00", "0-00-00", "0-0-0000", "0-0-00", "00-00-0000", "00-00-00"], "nonMatches": ["00-00-00000", "00-00-000", "00-000-00", "00/00-00", "00.00-00", "000-00-00"]}, {"regex": "^([a-yA-Y]{3,4}(?:\\.?|[a-yA-Y]{1,6}?)\\s?\\d?\\d(?:[d-tD-T]{2})?\\,?\\s?(?:\\&#39;?\\d\\d|\\d{4}))$", "exceptionStackTrace": null, "matches": ["AAAAAAAAAA 00DD, &#39;00", "AAAAAAAAA 00DD, &#39;00", "AAAa 00DD, &#39;00", "AAA. 00DD, &#3900", "AAA. 00DD,&#39;00", "AAA. 00DD &#39;00", "AAA. 00, &#39;00", "AAA. 00dD, &#39;00", "AAA. 0DD, &#39;00", "AAA.00DD, &#39;00", "AAA 00DD, &#39;00", "AAAA. 00DD, &#39;00", "aAA. 00DD, &#39;00", "AAAA0&#3900", "AAA00000", "AAA0&#3900", "AAAA 00DD, &#39;00", "AAA. 00DD, 0000", "AAA. 00DD, &#39;00"], "nonMatches": ["AAAz 00DD, &#39;00", "AAAZ 00DD, &#39;00", "AAA. 00DD, 00000", "AAA. 00DD, 000", "AAA. 00DD, &#39;;00", "AAA. 00DD,  &#39;00", "AAA. 00DD,, &#39;00", "AAA. 00DDDD, &#39;00", "AAA. 00DDD, &#39;00", "AAA. 00D, &#39;00", "AAA. 00aD, &#39;00", "AAA. 00AD, &#39;00", "AAA. 000DD, &#39;00", "AAA.  00DD, &#39;00", "AAA.. 00DD, &#39;00", "AAAAA. 00DD, &#39;00", "AA. 00DD, &#39;00", "zAA. 00DD, &#39;00", "ZAA. 00DD, &#39;00"]}, {"regex": "(?:[a-zA-Z0-9]+(?:(?:_|\\-|\\.)[a-zA-Z0-9]+)*)", "exceptionStackTrace": null, "matches": ["evil_evil_evil", "evil_eVil", "evil_EVIL", "evil_ev_il", "evil_ev il", "evil_ev4il", "evil_e", "evil_ ", "evil_6", "evil__", "evil_", "eVil_evil", "EVIL_evil", "ev_il_evil", "ev il_evil", "ev4il_evil", "e_evil", " _evil", "6_evil", "__evil", "_evil", "evil", "evil.evil", "evil-evil", "evil_evil"], "nonMatches": []}, {"regex": "(?:[^0-9][a-zA-Z0-9]+(?:(?:\\-|\\.)[a-zA-Z0-9]+)*)", "exceptionStackTrace": null, "matches": ["aevil-evil-evil", "aevil-eVil", "aevil-EVIL", "aevil-ev_il", "aevil-ev il", "aevil-ev4il", "aevil-e", "aevil- ", "aevil-6", "aevil-_", "aevil-", "aeVil-evil", "aEVIL-evil", "aev_il-evil", "aev il-evil", "aev4il-evil", "ae-evil", "a -evil", "a6-evil", "a_-evil", "a-evil", "Aevil-evil", "0evil-evil", ".evil-evil", "-evil-evil", " evil-evil", "aevil", "aevil.evil", "aevil-evil"], "nonMatches": []}, {"regex": "^(\\w{3,6}\\:\\/\\/[\\w\\-]+(?:\\.[\\w\\-]+)+(?:\\:\\d{2,4})*(?:\\/?|(?:\\/[\\w\\-]+)*)(?:\\/?|\\/\\w+\\.\\w{2,4}(?:\\?[\\w]+\\=[\\w\\-]+)?)?(?:\\&[\\w]+\\=[\\w\\-]+)*)$", "exceptionStackTrace": null, "matches": ["aaa://evil.evil:00/evil/evil/&evil=evil", "aaa://evil.evil:00/-/&evil=evil", "aaa://evil.evil:00/eVil/&evil=evil", "aaa://evil.evil:00/EVIL/&evil=evil", "aaa://evil.evil:00/ev_il/&evil=evil", "aaa://evil.evil:00/ev4il/&evil=evil", "aaa://evil.evil:00/e/&evil=evil", "aaa://evil.evil:00/6/&evil=evil", "aaa://evil.evil:00/_/&evil=evil", "aaa://evil.evil:00//evil.aa&evil=evil", "aaa://evil.evil:00//evil.aa?evil=-&evil=evil", "aaa://evil.evil:00//evil.aa?evil=eVil&evil=evil", "aaa://evil.evil:00//evil.aa?evil=EVIL&evil=evil", "aaa://evil.evil:00//evil.aa?evil=ev_il&evil=evil", "aaa://evil.evil:00//evil.aa?evil=ev4il&evil=evil", "aaa://evil.evil:00//evil.aa?evil=e&evil=evil", "aaa://evil.evil:00//evil.aa?evil=6&evil=evil", "aaa://evil.evil:00//evil.aa?evil=_&evil=evil", "aaa://evil.evil:00//evil.aa?eVil=evil&evil=evil", "aaa://evil.evil:00//evil.aa?EVIL=evil&evil=evil", "aaa://evil.evil:00//evil.aa?ev_il=evil&evil=evil", "aaa://evil.evil:00//evil.aa?ev4il=evil&evil=evil", "aaa://evil.evil:00//evil.aa?e=evil&evil=evil", "aaa://evil.evil:00//evil.aa?6=evil&evil=evil", "aaa://evil.evil:00//evil.aa?_=evil&evil=evil", "aaa://evil.evil:00//evil.aaaa?evil=evil&evil=evil", "aaa://evil.evil:00//evil._a?evil=evil&evil=evil", "aaa://evil.evil:00//evil.Aa?evil=evil&evil=evil", "aaa://evil.evil:00//evil.0a?evil=evil&evil=evil", "aaa://evil.evil:00//eVil.aa?evil=evil&evil=evil", "aaa://evil.evil:00//EVIL.aa?evil=evil&evil=evil", "aaa://evil.evil:00//ev_il.aa?evil=evil&evil=evil", "aaa://evil.evil:00//ev4il.aa?evil=evil&evil=evil", "aaa://evil.evil:00//e.aa?evil=evil&evil=evil", "aaa://evil.evil:00//6.aa?evil=evil&evil=evil", "aaa://evil.evil:00//_.aa?evil=evil&evil=evil", "aaa://evil.evil:00//&evil=evil&evil=evil", "aaa://evil.evil:00//", "aaa://evil.evil:00//&evil=-", "aaa://evil.evil:00//&evil=eVil", "aaa://evil.evil:00//&evil=EVIL", "aaa://evil.evil:00//&evil=ev_il", "aaa://evil.evil:00//&evil=ev4il", "aaa://evil.evil:00//&evil=e", "aaa://evil.evil:00//&evil=6", "aaa://evil.evil:00//&evil=_", "aaa://evil.evil:00//&eVil=evil", "aaa://evil.evil:00//&EVIL=evil", "aaa://evil.evil:00//&ev_il=evil", "aaa://evil.evil:00//&ev4il=evil", "aaa://evil.evil:00//&e=evil", "aaa://evil.evil:00//&6=evil", "aaa://evil.evil:00//&_=evil", "aaa://evil.evil:00/&evil=evil", "aaa://evil.evil:00:00//&evil=evil", "aaa://evil.evil//&evil=evil", "aaa://evil.evil:0000//&evil=evil", "aaa://evil.evil.evil:00//&evil=evil", "aaa://evil.-:00//&evil=evil", "aaa://evil.eVil:00//&evil=evil", "aaa://evil.EVIL:00//&evil=evil", "aaa://evil.ev_il:00//&evil=evil", "aaa://evil.ev4il:00//&evil=evil", "aaa://evil.e:00//&evil=evil", "aaa://evil.6:00//&evil=evil", "aaa://evil._:00//&evil=evil", "aaa://-.evil:00//&evil=evil", "aaa://eVil.evil:00//&evil=evil", "aaa://EVIL.evil:00//&evil=evil", "aaa://ev_il.evil:00//&evil=evil", "aaa://ev4il.evil:00//&evil=evil", "aaa://e.evil:00//&evil=evil", "aaa://6.evil:00//&evil=evil", "aaa://_.evil:00//&evil=evil", "aaaaaa://evil.evil:00//&evil=evil", "_aa://evil.evil:00//&evil=evil", "Aaa://evil.evil:00//&evil=evil", "0aa://evil.evil:00//&evil=evil", "aaa://evil.evil", "aaa://evil.evil:00/evil/&evil=evil", "aaa://evil.evil:00//evil.aa?evil=evil&evil=evil", "aaa://evil.evil:00//&evil=evil"], "nonMatches": ["aaa://evil.evil:00/?/&evil=evil", "aaa://evil.evil:00/=/&evil=evil", "aaa://evil.evil:00/:/&evil=evil", "aaa://evil.evil:00/./&evil=evil", "aaa://evil.evil:00/&/&evil=evil", "aaa://evil.evil:00/ev il/&evil=evil", "aaa://evil.evil:00/ /&evil=evil", "aaa://evil.evil:00//evil.aa?evil=evil?evil=evil&evil=evil", "aaa://evil.evil:00//evil.aa?evil=?&evil=evil", "aaa://evil.evil:00//evil.aa?evil==&evil=evil", "aaa://evil.evil:00//evil.aa?evil=:&evil=evil", "aaa://evil.evil:00//evil.aa?evil=/&evil=evil", "aaa://evil.evil:00//evil.aa?evil=.&evil=evil", "aaa://evil.evil:00//evil.aa?evil=&&evil=evil", "aaa://evil.evil:00//evil.aa?evil=ev il&evil=evil", "aaa://evil.evil:00//evil.aa?evil= &evil=evil", "aaa://evil.evil:00//evil.aa?evil=&evil=evil", "aaa://evil.evil:00//evil.aa?ev il=evil&evil=evil", "aaa://evil.evil:00//evil.aa? =evil&evil=evil", "aaa://evil.evil:00//evil.aa?=evil&evil=evil", "aaa://evil.evil:00//evil.aaaaa?evil=evil&evil=evil", "aaa://evil.evil:00//evil.a?evil=evil&evil=evil", "aaa://evil.evil:00//ev il.aa?evil=evil&evil=evil", "aaa://evil.evil:00// .aa?evil=evil&evil=evil", "aaa://evil.evil:00//.aa?evil=evil&evil=evil", "aaa://evil.evil:00//&evil=?", "aaa://evil.evil:00//&evil==", "aaa://evil.evil:00//&evil=:", "aaa://evil.evil:00//&evil=/", "aaa://evil.evil:00//&evil=.", "aaa://evil.evil:00//&evil=&", "aaa://evil.evil:00//&evil=ev il", "aaa://evil.evil:00//&evil= ", "aaa://evil.evil:00//&evil=", "aaa://evil.evil:00//&ev il=evil", "aaa://evil.evil:00//& =evil", "aaa://evil.evil:00//&=evil", "aaa://evil.evil:00///&evil=evil", "aaa://evil.evil:00000//&evil=evil", "aaa://evil.evil:0//&evil=evil", "aaa://evil:00//&evil=evil", "aaa://evil.?:00//&evil=evil", "aaa://evil.=:00//&evil=evil", "aaa://evil.::00//&evil=evil", "aaa://evil./:00//&evil=evil", "aaa://evil..:00//&evil=evil", "aaa://evil.&:00//&evil=evil", "aaa://evil.ev il:00//&evil=evil", "aaa://evil. :00//&evil=evil", "aaa://evil.:00//&evil=evil", "aaa://?.evil:00//&evil=evil", "aaa://=.evil:00//&evil=evil", "aaa://:.evil:00//&evil=evil", "aaa:///.evil:00//&evil=evil", "aaa://..evil:00//&evil=evil", "aaa://&.evil:00//&evil=evil", "aaa://ev il.evil:00//&evil=evil", "aaa:// .evil:00//&evil=evil", "aaa://.evil:00//&evil=evil", "aaaaaaa://evil.evil:00//&evil=evil", "aa://evil.evil:00//&evil=evil"]}, {"regex": "(\\&quot;http:\\/\\/www\\.youtube\\.com\\/v\\/\\w{11}\\&rel\\=1\\&quot;)", "exceptionStackTrace": null, "matches": ["&quot;http://www.youtube.com/v/_aaaaaaaaaa&rel=1&quot;", "&quot;http://www.youtube.com/v/Aaaaaaaaaaa&rel=1&quot;", "&quot;http://www.youtube.com/v/0aaaaaaaaaa&rel=1&quot;", "&quot;http://www.youtube.com/v/aaaaaaaaaaa&rel=1&quot;"], "nonMatches": ["&quot;http://www.youtube.com/v/aaaaaaaaaaaa&rel=1&quot;", "&quot;http://www.youtube.com/v/aaaaaaaaaa&rel=1&quot;"]}, {"regex": "(\\&quot;http:\\/\\/video\\.google\\.com\\/googleplayer\\.swf\\?docId=\\d{19}\\&hl=[a-z]{2}\\&quot;)", "exceptionStackTrace": null, "matches": ["&quot;http://video.google.com/googleplayer.swf?docId=0000000000000000000&hl=aa&quot;"], "nonMatches": ["&quot;http://video.google.com/googleplayer.swf?docId=0000000000000000000&hl=aaa&quot;", "&quot;http://video.google.com/googleplayer.swf?docId=0000000000000000000&hl=a&quot;", "&quot;http://video.google.com/googleplayer.swf?docId=00000000000000000000&hl=aa&quot;", "&quot;http://video.google.com/googleplayer.swf?docId=000000000000000000&hl=aa&quot;"]}, {"regex": "^((\\&#39;|\\&quot;)?[a-zA-Z]+(?:\\-[a-zA-Z]+)?(?:s\\&#39;|\\&#39;[a-zA-Z]{1,2})?(?:(?:(?:\\,|\\.|\\!|\\?)?(?:\\2)?)|(?:(?:\\2)?(?:\\,|\\.|\\!|\\?)?))(?: (\\&#39;|\\&quot;)?[a-zA-Z]+(?:\\-[a-zA-Z]+)?(?:s\\&#39;|\\&#39;[a-zA-Z]{1,2})?(?:(?:(?:\\,|\\.|\\!|\\?)?(?:\\2|\\3)?)|(?:(?:\\2|\\3)?(?:\\,|\\.|\\!|\\?)?)))*)$", "exceptionStackTrace": null, "matches": ["&#39;evil-evil&#39;AA,&#39; &#39;evil-evils&#39;,&#39;", "&#39;evil-evil&#39;a,&#39; &#39;evil-evils&#39;,&#39;", "&#39;evil-evils&#39;,&#39; &#39;evil-evil&#39;AA,&#39;", "&#39;evil-evils&#39;,&#39; &#39;evil-evil&#39;a,&#39;", "&#39;evil-evils&#39;,&#39; &#39;evil-evils&#39;,&#39; &#39;evil-evils&#39;,&#39;", "&#39;evil-evils&#39;,&#39;", "&#39;evil-evils&#39;,&#39; &#39;evil-evils&#39;,", "&#39;evil-evils&#39;,&#39; &#39;evil-evils&#39;&#39;", "&#39;evil-evils&#39;,&#39; &#39;evil-evil,&#39;", "&#39;evil-evils&#39;,&#39; &#39;evils&#39;,&#39;", "&#39;evil-evils&#39;,&#39; &#39;evil-eVils&#39;,&#39;", "&#39;evil-evils&#39;,&#39; &#39;evil-EVILs&#39;,&#39;", "&#39;evil-evils&#39;,&#39; &#39;evil-ev ils&#39;,&#39;", "&#39;evil-evils&#39;,&#39; &#39;evil-es&#39;,&#39;", "&#39;evil-evils&#39;,&#39; &#39;eVil-evils&#39;,&#39;", "&#39;evil-evils&#39;,&#39; &#39;EVIL-evils&#39;,&#39;", "&#39;evil-evils&#39;,&#39; &#39;ev il-evils&#39;,&#39;", "&#39;evil-evils&#39;,&#39; &#39;e-evils&#39;,&#39;", "&#39;evil-evils&#39;,&#39; evil-evils&#39;,&#39;", "&#39;evil-evils&#39;, &#39;evil-evils&#39;,&#39;", "&#39;evil-evils&#39;&#39; &#39;evil-evils&#39;,&#39;", "&#39;evil-evil,&#39; &#39;evil-evils&#39;,&#39;", "&#39;evils&#39;,&#39; &#39;evil-evils&#39;,&#39;", "&#39;evil-eVils&#39;,&#39; &#39;evil-evils&#39;,&#39;", "&#39;evil-EVILs&#39;,&#39; &#39;evil-evils&#39;,&#39;", "&#39;evil-ev ils&#39;,&#39; &#39;evil-evils&#39;,&#39;", "&#39;evil-es&#39;,&#39; &#39;evil-evils&#39;,&#39;", "&#39;eVil-evils&#39;,&#39; &#39;evil-evils&#39;,&#39;", "&#39;EVIL-evils&#39;,&#39; &#39;evil-evils&#39;,&#39;", "&#39;ev il-evils&#39;,&#39; &#39;evil-evils&#39;,&#39;", "&#39;e-evils&#39;,&#39; &#39;evil-evils&#39;,&#39;", "evil", "&#39;evil-evil&#39;A,&#39; &#39;evil-evils&#39;,&#39;", "&#39;evil-evils&#39;&#39;? &#39;evil-evils&#39;,&#39;", "&#39;evil-evils&#39;&#39;! &#39;evil-evils&#39;,&#39;", "&#39;evil-evils&#39;&#39;. &#39;evil-evils&#39;,&#39;", "&#39;evil-evils&#39;&#39;, &#39;evil-evils&#39;,&#39;", "&#39;evil-evils&#39;?&#39; &#39;evil-evils&#39;,&#39;", "&#39;evil-evils&#39;!&#39; &#39;evil-evils&#39;,&#39;", "&#39;evil-evils&#39;.&#39; &#39;evil-evils&#39;,&#39;", "&#39;evil-evils&#39;,&#39; &quot;evil-evils&#39;,&#39;", "&#39;evil-evils&#39;,&#39; &#39;evil-evil&#39;A,&#39;", "&#39;evil-evils&#39;,&#39; &#39;evil-evils&#39;&#39;?", "&#39;evil-evils&#39;,&#39; &#39;evil-evils&#39;&#39;!", "&#39;evil-evils&#39;,&#39; &#39;evil-evils&#39;&#39;.", "&#39;evil-evils&#39;,&#39; &#39;evil-evils&#39;&#39;,", "&#39;evil-evils&#39;,&#39; &#39;evil-evils&#39;?&#39;", "&#39;evil-evils&#39;,&#39; &#39;evil-evils&#39;!&#39;", "&#39;evil-evils&#39;,&#39; &#39;evil-evils&#39;.&#39;", "&#39;evil-evils&#39;,&#39; &#39;evil-evils&#39;,&#39;"], "nonMatches": ["&#39;evil-evil&#39;AAA,&#39; &#39;evil-evils&#39;,&#39;", "&#39;evil-evil&#39;,&#39; &#39;evil-evils&#39;,&#39;", "&#39;evil-evils&#39;&#39;,, &#39;evil-evils&#39;,&#39;", "&#39;evil-evils&#39;&#39;&#39;, &#39;evil-evils&#39;,&#39;", "&#39;evil-evils&#39;,&#39; &#39;evil-evil&#39;AAA,&#39;", "&#39;evil-evils&#39;,&#39; &#39;evil-evil&#39;,&#39;", "&#39;evil-evils&#39;,&#39; &#39;evil-evils&#39;&#39;,,", "&#39;evil-evils&#39;,&#39; &#39;evil-evils&#39;&#39;&#39;,", "&#39;evil-evils&#39;,&#39; &#39;evil-evils&#39;,&#39;&#39;", "&#39;evil-evils&#39;,&#39; &#39;evil-evils&#39;,,&#39;", "&#39;evil-evils&#39;,&#39; &#39;evil-evils&#39;s&#39;,&#39;", "&#39;evil-evils&#39;,&#39; &#39;evil-evil-evils&#39;,&#39;", "&#39;evil-evils&#39;,&#39; &#39;evil-ev_ils&#39;,&#39;", "&#39;evil-evils&#39;,&#39; &#39;evil-ev4ils&#39;,&#39;", "&#39;evil-evils&#39;,&#39; &#39;evil- s&#39;,&#39;", "&#39;evil-evils&#39;,&#39; &#39;evil-6s&#39;,&#39;", "&#39;evil-evils&#39;,&#39; &#39;evil-_s&#39;,&#39;", "&#39;evil-evils&#39;,&#39; &#39;evil-s&#39;,&#39;", "&#39;evil-evils&#39;,&#39; &#39;ev_il-evils&#39;,&#39;", "&#39;evil-evils&#39;,&#39; &#39;ev4il-evils&#39;,&#39;", "&#39;evil-evils&#39;,&#39; &#39; -evils&#39;,&#39;", "&#39;evil-evils&#39;,&#39; &#39;6-evils&#39;,&#39;", "&#39;evil-evils&#39;,&#39; &#39;_-evils&#39;,&#39;", "&#39;evil-evils&#39;,&#39; &#39;-evils&#39;,&#39;", "&#39;evil-evils&#39;,&#39; &#39;&#39;evil-evils&#39;,&#39;", "&#39;evil-evils&#39;,&#39;&#39; &#39;evil-evils&#39;,&#39;", "&#39;evil-evils&#39;,,&#39; &#39;evil-evils&#39;,&#39;", "&#39;evil-evils&#39;s&#39;,&#39; &#39;evil-evils&#39;,&#39;", "&#39;evil-evil-evils&#39;,&#39; &#39;evil-evils&#39;,&#39;", "&#39;evil-ev_ils&#39;,&#39; &#39;evil-evils&#39;,&#39;", "&#39;evil-ev4ils&#39;,&#39; &#39;evil-evils&#39;,&#39;", "&#39;evil- s&#39;,&#39; &#39;evil-evils&#39;,&#39;", "&#39;evil-6s&#39;,&#39; &#39;evil-evils&#39;,&#39;", "&#39;evil-_s&#39;,&#39; &#39;evil-evils&#39;,&#39;", "&#39;evil-s&#39;,&#39; &#39;evil-evils&#39;,&#39;", "&#39;ev_il-evils&#39;,&#39; &#39;evil-evils&#39;,&#39;", "&#39;ev4il-evils&#39;,&#39; &#39;evil-evils&#39;,&#39;", "&#39; -evils&#39;,&#39; &#39;evil-evils&#39;,&#39;", "&#39;6-evils&#39;,&#39; &#39;evil-evils&#39;,&#39;", "&#39;_-evils&#39;,&#39; &#39;evil-evils&#39;,&#39;", "&#39;-evils&#39;,&#39; &#39;evil-evils&#39;,&#39;", "&#39;&#39;evil-evils&#39;,&#39; &#39;evil-evils&#39;,&#39;", "evil-evils&#39;,&#39; &#39;evil-evils&#39;,&#39;", "&quot;evil-evils&#39;,&#39; &#39;evil-evils&#39;,&#39;"]}, {"regex": "^([a-zA-Z]+(?:\\.)?(?:(?:&#39;| )[a-zA-Z]+(?:\\.)?)*)$", "exceptionStackTrace": null, "matches": ["evil.&#39;evil.&#39;evil.", "evil.", "evil.&#39;evil", "evil.&#39;eVil.", "evil.&#39;EVIL.", "evil.&#39;ev il.", "evil.&#39;e.", "evil&#39;evil.", "eVil.&#39;evil.", "EVIL.&#39;evil.", "ev il.&#39;evil.", "e.&#39;evil.", "evil", "evil. evil.", "evil.&#39;evil."], "nonMatches": ["evil.&#39;evil..", "evil.&#39;ev_il.", "evil.&#39;ev4il.", "evil.&#39; .", "evil.&#39;6.", "evil.&#39;_.", "evil.&#39;.", "evil..&#39;evil.", "ev_il.&#39;evil.", "ev4il.&#39;evil.", " .&#39;evil.", "6.&#39;evil.", "_.&#39;evil.", ".&#39;evil."]}, {"regex": "^([^_][\\w\\d\\@\\-]+(?:s\\&#39;|\\&#39;[a-zA-Z]{1,2})?(?:\\,)?(?: [\\w\\d\\@\\-]+(?:s\\&#39;|\\&#39;[a-zA-Z]{1,2})?(?:\\,)?)*(?:\\.|\\!|\\?){0,3}[^\\s_])$", "exceptionStackTrace": null, "matches": ["aevil&#39;AA, evils&#39;,.a", "aevil&#39;a, evils&#39;,.a", "aevils&#39;, evil&#39;AA,.a", "aevils&#39;, evil&#39;a,.a", "aevils&#39;, evils&#39;,.A", "aevils&#39;, evils&#39;,.@", "aevils&#39;, evils&#39;,.?", "aevils&#39;, evils&#39;,.;", "aevils&#39;, evils&#39;,.0", "aevils&#39;, evils&#39;,..", "aevils&#39;, evils&#39;,.-", "aevils&#39;, evils&#39;,.,", "aevils&#39;, evils&#39;,.&", "aevils&#39;, evils&#39;,.#", "aevils&#39;, evils&#39;,.!", "aevils&#39;, evils&#39;,...a", "aevils&#39;, evils&#39;,a", "aevils&#39;, evils&#39;, evils&#39;,.a", "aevils&#39;,.a", "aevils&#39;, evils&#39;.a", "aevils&#39;, evil,.a", "aevils&#39;, @s&#39;,.a", "aevils&#39;, -s&#39;,.a", "aevils&#39;, eVils&#39;,.a", "aevils&#39;, EVILs&#39;,.a", "aevils&#39;, ev_ils&#39;,.a", "aevils&#39;, ev ils&#39;,.a", "aevils&#39;, ev4ils&#39;,.a", "aevils&#39;, es&#39;,.a", "aevils&#39;, 6s&#39;,.a", "aevils&#39;, _s&#39;,.a", "aevils&#39; evils&#39;,.a", "aevil, evils&#39;,.a", "a@s&#39;, evils&#39;,.a", "a-s&#39;, evils&#39;,.a", "aeVils&#39;, evils&#39;,.a", "aEVILs&#39;, evils&#39;,.a", "aev_ils&#39;, evils&#39;,.a", "aev ils&#39;, evils&#39;,.a", "aev4ils&#39;, evils&#39;,.a", "aes&#39;, evils&#39;,.a", "a6s&#39;, evils&#39;,.a", "a_s&#39;, evils&#39;,.a", "Aevils&#39;, evils&#39;,.a", "@evils&#39;, evils&#39;,.a", "?evils&#39;, evils&#39;,.a", ";evils&#39;, evils&#39;,.a", "0evils&#39;, evils&#39;,.a", ".evils&#39;, evils&#39;,.a", "-evils&#39;, evils&#39;,.a", ",evils&#39;, evils&#39;,.a", "&evils&#39;, evils&#39;,.a", "#evils&#39;, evils&#39;,.a", "!evils&#39;, evils&#39;,.a", " evils&#39;, evils&#39;,.a", "aevila", "aevil&#39;A, evils&#39;,.a", "aevils&#39;, evil&#39;A,.a", "aevils&#39;, evils&#39;,?a", "aevils&#39;, evils&#39;,!a", "aevils&#39;, evils&#39;,.a"], "nonMatches": ["aevil&#39;AAA, evils&#39;,.a", "aevil&#39;, evils&#39;,.a", "aevils&#39;, evil&#39;AAA,.a", "aevils&#39;, evil&#39;,.a", "aevils&#39;, evils&#39;,._", "aevils&#39;, evils&#39;,. ", "aevils&#39;, evils&#39;,....a", "aevils&#39;, evils&#39;,,.a", "aevils&#39;, evils&#39;s&#39;,.a", "aevils&#39;, ?s&#39;,.a", "aevils&#39;, ;s&#39;,.a", "aevils&#39;, .s&#39;,.a", "aevils&#39;, ,s&#39;,.a", "aevils&#39;, &s&#39;,.a", "aevils&#39;, #s&#39;,.a", "aevils&#39;, !s&#39;,.a", "aevils&#39;,  s&#39;,.a", "aevils&#39;, s&#39;,.a", "aevils&#39;,, evils&#39;,.a", "aevils&#39;s&#39;, evils&#39;,.a", "a?s&#39;, evils&#39;,.a", "a;s&#39;, evils&#39;,.a", "a.s&#39;, evils&#39;,.a", "a,s&#39;, evils&#39;,.a", "a&s&#39;, evils&#39;,.a", "a#s&#39;, evils&#39;,.a", "a!s&#39;, evils&#39;,.a", "a s&#39;, evils&#39;,.a", "as&#39;, evils&#39;,.a", "_evils&#39;, evils&#39;,.a"]}, {"regex": "^((?:\\+|\\-|\\$)?(?:\\d+|\\d{1,3}(?:\\,\\d{3})*)(?:\\.\\d+)?(?:[a-zA-Z]{2}|\\%)?)$", "exceptionStackTrace": null, "matches": ["+0,000,000.0AA", "+000,000.0AA", "+0.0", "+0.0aA", "+0AA", "+0.00AA", "+00.0AA", "0.0AA", "0", "$0.0AA", "-0.0AA", "+0,000.0AA", "+0.0%", "+0.0AA"], "nonMatches": ["+0,0000.0AA", "+0,00.0AA", "+0000,000.0AA", "+,000.0AA", "+0.0AAAA", "+0.0AAA", "+0.0A", "+0.0.0AA", "+0.AA", "+.0AA", "++0.0AA"]}, {"regex": "^(http\\:\\/\\/(?:www\\.)?[a-zA-Z0-9]+(?:(?:\\-|_)[a-zA-Z0-9]+)*(?:\\.[a-zA-Z0-9]+(?:(?:\\-|_)[a-zA-Z0-9]+)*)*\\.[a-zA-Z]{2,7}(?:\\/)?)$", "exceptionStackTrace": null, "matches": ["http://www.evil-evil.evil-evil.AA", "http://www.evil-evil.evil-evil.AAAAAAA/", "http://www.evil-evil.evil-evil.aA/", "http://www.evil-evil.evil-evil.evil-evil.AA/", "http://www.evil-evil.AA/", "http://www.evil-evil.evil-evil-evil.AA/", "http://www.evil-evil.evil.AA/", "http://www.evil-evil.evil-eVil.AA/", "http://www.evil-evil.evil-EVIL.AA/", "http://www.evil-evil.evil-ev_il.AA/", "http://www.evil-evil.evil-ev4il.AA/", "http://www.evil-evil.evil-e.AA/", "http://www.evil-evil.evil-6.AA/", "http://www.evil-evil.eVil-evil.AA/", "http://www.evil-evil.EVIL-evil.AA/", "http://www.evil-evil.ev_il-evil.AA/", "http://www.evil-evil.ev4il-evil.AA/", "http://www.evil-evil.e-evil.AA/", "http://www.evil-evil.6-evil.AA/", "http://www.evil-evil-evil.evil-evil.AA/", "http://www.evil.evil-evil.AA/", "http://www.evil-eVil.evil-evil.AA/", "http://www.evil-EVIL.evil-evil.AA/", "http://www.evil-ev_il.evil-evil.AA/", "http://www.evil-ev4il.evil-evil.AA/", "http://www.evil-e.evil-evil.AA/", "http://www.evil-6.evil-evil.AA/", "http://www.eVil-evil.evil-evil.AA/", "http://www.EVIL-evil.evil-evil.AA/", "http://www.ev_il-evil.evil-evil.AA/", "http://www.ev4il-evil.evil-evil.AA/", "http://www.e-evil.evil-evil.AA/", "http://www.6-evil.evil-evil.AA/", "http://www.www.evil-evil.evil-evil.AA/", "http://evil-evil.evil-evil.AA/", "http://evil.AA", "http://www.evil_evil.evil-evil.AA/", "http://www.evil-evil.evil_evil.AA/", "http://www.evil-evil.evil-evil.AA/"], "nonMatches": ["http://www.evil-evil.evil-evil.AA//", "http://www.evil-evil.evil-evil.AAAAAAAA/", "http://www.evil-evil.evil-evil.A/", "http://www.evil-evil.evil-ev il.AA/", "http://www.evil-evil.evil- .AA/", "http://www.evil-evil.evil-_.AA/", "http://www.evil-evil.evil-.AA/", "http://www.evil-evil.ev il-evil.AA/", "http://www.evil-evil. -evil.AA/", "http://www.evil-evil._-evil.AA/", "http://www.evil-evil.-evil.AA/", "http://www.evil-ev il.evil-evil.AA/", "http://www.evil- .evil-evil.AA/", "http://www.evil-_.evil-evil.AA/", "http://www.evil-.evil-evil.AA/", "http://www.ev il-evil.evil-evil.AA/", "http://www. -evil.evil-evil.AA/", "http://www._-evil.evil-evil.AA/", "http://www.-evil.evil-evil.AA/"]}, {"regex": "^([a-zA-Z0-9]{6,18}?)$", "exceptionStackTrace": null, "matches": ["000000000000000000", "a00000", "A00000", "000000"], "nonMatches": ["0000000000000000000", "00000"]}, {"regex": "^((?:\\/[a-zA-Z0-9]+(?:_[a-zA-Z0-9]+)*(?:\\-[a-zA-Z0-9]+)*)+)$", "exceptionStackTrace": null, "matches": ["/evil_evil-evil/evil_evil-evil", "/evil_evil-evil-evil", "/evil_evil", "/evil_evil-eVil", "/evil_evil-EVIL", "/evil_evil-ev4il", "/evil_evil-e", "/evil_evil-6", "/evil_evil_evil-evil", "/evil-evil", "/evil_eVil-evil", "/evil_EVIL-evil", "/evil_ev_il-evil", "/evil_ev4il-evil", "/evil_e-evil", "/evil_6-evil", "/eVil_evil-evil", "/EVIL_evil-evil", "/ev_il_evil-evil", "/ev4il_evil-evil", "/e_evil-evil", "/6_evil-evil", "/evil", "/evil_evil-evil"], "nonMatches": ["", "/evil_evil-ev_il", "/evil_evil-ev il", "/evil_evil- ", "/evil_evil-_", "/evil_evil-", "/evil_ev il-evil", "/evil_ -evil", "/evil__-evil", "/evil_-evil", "/ev il_evil-evil", "/ _evil-evil", "/__evil-evil", "/_evil-evil"]}, {"regex": "^([a-zA-Z0-9]+(?: [a-zA-Z0-9]+)*)$", "exceptionStackTrace": null, "matches": ["evil evil evil", "evil eVil", "evil EVIL", "evil ev il", "evil ev4il", "evil e", "evil 6", "eVil evil", "EVIL evil", "ev il evil", "ev4il evil", "e evil", "6 evil", "evil", "evil evil"], "nonMatches": ["evil ev_il", "evil  ", "evil _", "evil ", "ev_il evil", "  evil", "_ evil", " evil"]}, {"regex": "^(10\\.[0-9]|[1-9][0-9]|[1-2][0-5][0-5]\\.[0-9]|[1-9][0-9]|[1-2][0-5][0-5]\\.[0-9]|[1-9][0-9]|[1-2][0-5][0-5])$", "exceptionStackTrace": null, "matches": ["100", "100.0", "10", "10.0"], "nonMatches": ["106", "160", "000", "106.0", "160.0", "000.0", "00"]}, {"regex": "^(172\\.1[6-9]|2[0-9]|3[0-1|\\.[0-9]|[1-9][0-9]|[1-2][0-5][0-5]\\.[0-9]|[1-9][0-9]|[1-2][0-5][0-5])$", "exceptionStackTrace": null, "matches": ["3|", "30", "3.", "100", "100.0", "10", "3[", "20", "172.16"], "nonMatches": ["106", "160", "000", "106.0", "160.0", "000.0", "00", "172.10"]}, {"regex": "^(192\\.168\\.[0-9]|[1-9][0-9]|[1-2][0-5][0-5]\\.[0-9]|[1-9][0-9]|[1-2][0-5][0-5])$", "exceptionStackTrace": null, "matches": ["100", "100.0", "10", "192.168.0"], "nonMatches": ["106", "160", "000", "106.0", "160.0", "000.0", "00"]}, {"regex": "^(/(?:(?:(?:(?:[a-zA-Z0-9\\\\-_.!~*&#39;():\\@&=+\\$,]+|(?:%[a-fA-F0-9][a-fA-F0-9]))*)(?:;(?:(?:[a-zA-Z0-9\\\\-_.!~*&#39;():\\@&=+\\$,]+|(?:%[a-fA-F0-9][a-fA-F0-9]))*))*)(?:/(?:(?:(?:[a-zA-Z0-9\\\\-_.!~*&#39;():\\@&=+\\$,]+|(?:%[a-fA-F0-9][a-fA-F0-9]))*)(?:;(?:(?:[a-zA-Z0-9\\\\-_.!~*&#39;():\\@&=+\\$,]+|(?:%[a-fA-F0-9][a-fA-F0-9]))*))*))*))$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (bad range): Invalid range: \\-_"}, "matches": [], "nonMatches": []}, {"regex": "^(1?(?: |\\-|\\.)?(?:\\(\\d{3}\\)|\\d{3})(?: |\\-|\\.)?\\d{3}(?: |\\-|\\.)?\\d{4})$", "exceptionStackTrace": null, "matches": ["1 (000) 0000000", "1 (000)000 0000", "1(000) 000 0000", " (000) 000 0000", "0000000000", "(000)0000000", "1.(000) 000 0000", "1-(000) 000 0000", "1 000 000 0000", "1 (000).000 0000", "1 (000)-000 0000", "1 (000) 000.0000", "1 (000) 000-0000", "1 (000) 000 0000"], "nonMatches": ["1 0000 000 0000", "1 00 000 0000", "1 (000) 000 00000", "1 (000) 000 000", "1 (000) 000  0000", "1 (000) 0000 0000", "1 (000) 00 0000", "1 (000)  000 0000", "1 (0000) 000 0000", "1 (00) 000 0000", "1  (000) 000 0000", "11 (000) 000 0000"]}, {"regex": "^(\\d{5}(?:\\-\\d{4})?)$", "exceptionStackTrace": null, "matches": ["00000", "00000-0000"], "nonMatches": ["00000-0000-0000", "00000-00000", "00000-000", "000000-0000", "0000-0000"]}, {"regex": "^(?!000)(?!666)(?!9)\\d{3}([- ]?)(?!00)\\d{2}\\1(?!0000)\\d{4}$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["000 00 00000", "000 00 000", "000 000 0000", "000 0 0000", "000  00 0000", "000-00 0000", "0000 00 0000", "00 00 0000", "00000 0000", "000 00 0000"]}, {"regex": "^(\\d{4}(?:(?:(?:\\-)?(?:00[1-9]|0[1-9][0-9]|[1-2][0-9][0-9]|3[0-5][0-9]|36[0-6]))?|(?:(?:\\-)?(?:1[0-2]|0[1-9]))?|(?:(?:\\-)?(?:1[0-2]|0[1-9])(?:\\-)?(?:0[1-9]|[12][0-9]|3[01]))?|(?:(?:\\-)?W(?:0[1-9]|[1-4][0-9]5[0-3]))?|(?:(?:\\-)?W(?:0[1-9]|[1-4][0-9]5[0-3])(?:\\-)?[1-7])?)?)$", "exceptionStackTrace": null, "matches": ["0000-W011", "0000W01-1", "0000W01", "0000-10-30", "0000-1001", "000010-01", "0000-10-10", "000010", "0000001", "0000", "0000-W1050-1", "0000-W01-1", "0000-W1050", "0000-W01", "0000-01-01", "0000-10-31", "0000-10-20", "0000-10-01", "0000-01", "0000-10", "0000-360", "0000-300", "0000-100", "0000-010", "0000-001"], "nonMatches": ["0000-W1054-1", "0000-W0050-1", "0000-W01-1-W01-1", "0000-W01-0", "0000-W01--1", "0000-W00-1", "0000--W01-1", "0000-W1054", "0000-W0050", "0000-W01-W01", "0000-W00", "0000--W01", "0000-00-01", "0000-10-32", "0000-10-01-10-01", "0000-10-00", "0000-10--01", "0000-13-01", "0000--10-01", "0000-00", "0000-13", "0000--10", "0000-367", "0000-001-001", "0000-000", "0000--001", "00000-001", "000-001"]}, {"regex": "^([0-2][0-4](?:(?:(?::)?[0-5][0-9])?|(?:(?::)?[0-5][0-9](?::)?[0-5][0-9](?:\\.[0-9]+)?)?)?)$", "exceptionStackTrace": null, "matches": ["00:00:00.00", "00:0000.0", "0000:00.0", "00:00:00", "0000", "00", "00:00:00.0", "00:00"], "nonMatches": ["00:00:00.0:00:00.0", "00:00:00.0.0", "00:00:00.", "00:00:60.0", "00:00::00.0", "00:60:00.0", "00::00:00.0", "00:60", "00::00", "05:00", "30:00"]}, {"regex": "^(Randal (?:L\\.)? Schwartz|merlyn)$", "exceptionStackTrace": null, "matches": ["Randal  Schwartz", "merlyn", "Randal L. Schwartz"], "nonMatches": ["Randal L.L. Schwartz"]}, {"regex": "^((?:\\?[a-zA-Z0-9_]+\\=[a-zA-Z0-9_]+)?(?:\\&[a-zA-Z0-9_]+\\=[a-zA-Z0-9_]+)*)$ ", "exceptionStackTrace": null, "matches": [], "nonMatches": ["?evil=evil&evil=evil&evil=evil ", "?evil=evil ", "?evil=evil&evil=? ", "?evil=evil&evil== ", "?evil=evil&evil=& ", "?evil=evil&evil=eVil ", "?evil=evil&evil=EVIL ", "?evil=evil&evil=ev_il ", "?evil=evil&evil=ev il ", "?evil=evil&evil=ev4il ", "?evil=evil&evil=e ", "?evil=evil&evil=  ", "?evil=evil&evil=6 ", "?evil=evil&evil=_ ", "?evil=evil&evil= ", "?evil=evil&?=evil ", "?evil=evil&==evil ", "?evil=evil&&=evil ", "?evil=evil&eVil=evil ", "?evil=evil&EVIL=evil ", "?evil=evil&ev_il=evil ", "?evil=evil&ev il=evil ", "?evil=evil&ev4il=evil ", "?evil=evil&e=evil ", "?evil=evil& =evil ", "?evil=evil&6=evil ", "?evil=evil&_=evil ", "?evil=evil&=evil ", "?evil=evil?evil=evil&evil=evil ", "&evil=evil ", "?evil=?&evil=evil ", "?evil==&evil=evil ", "?evil=&&evil=evil ", "?evil=eVil&evil=evil ", "?evil=EVIL&evil=evil ", "?evil=ev_il&evil=evil ", "?evil=ev il&evil=evil ", "?evil=ev4il&evil=evil ", "?evil=e&evil=evil ", "?evil= &evil=evil ", "?evil=6&evil=evil ", "?evil=_&evil=evil ", "?evil=&evil=evil ", "??=evil&evil=evil ", "?==evil&evil=evil ", "?&=evil&evil=evil ", "?eVil=evil&evil=evil ", "?EVIL=evil&evil=evil ", "?ev_il=evil&evil=evil ", "?ev il=evil&evil=evil ", "?ev4il=evil&evil=evil ", "?e=evil&evil=evil ", "? =evil&evil=evil ", "?6=evil&evil=evil ", "?_=evil&evil=evil ", "?=evil&evil=evil ", " ", "?evil=evil&evil=evil "]}, {"regex": "^(http(?:s)?\\:\\/\\/[a-zA-Z0-9]+(?:(?:\\.|\\-)[a-zA-Z0-9]+)+(?:\\:\\d+)?(?:\\/[\\w\\-]+)*(?:\\/?|\\/\\w+\\.[a-zA-Z]{2,4}(?:\\?[\\w]+\\=[\\w\\-]+)?)?(?:\\&[\\w]+\\=[\\w\\-]+)*)$", "exceptionStackTrace": null, "matches": ["https://evil.evil:0/evil/evil.AA&evil=evil", "https://evil.evil:0/evil/evil.AA?evil=-&evil=evil", "https://evil.evil:0/evil/evil.AA?evil=eVil&evil=evil", "https://evil.evil:0/evil/evil.AA?evil=EVIL&evil=evil", "https://evil.evil:0/evil/evil.AA?evil=ev_il&evil=evil", "https://evil.evil:0/evil/evil.AA?evil=ev4il&evil=evil", "https://evil.evil:0/evil/evil.AA?evil=e&evil=evil", "https://evil.evil:0/evil/evil.AA?evil=6&evil=evil", "https://evil.evil:0/evil/evil.AA?evil=_&evil=evil", "https://evil.evil:0/evil/evil.AA?eVil=evil&evil=evil", "https://evil.evil:0/evil/evil.AA?EVIL=evil&evil=evil", "https://evil.evil:0/evil/evil.AA?ev_il=evil&evil=evil", "https://evil.evil:0/evil/evil.AA?ev4il=evil&evil=evil", "https://evil.evil:0/evil/evil.AA?e=evil&evil=evil", "https://evil.evil:0/evil/evil.AA?6=evil&evil=evil", "https://evil.evil:0/evil/evil.AA?_=evil&evil=evil", "https://evil.evil:0/evil/evil.AAAA?evil=evil&evil=evil", "https://evil.evil:0/evil/evil.aA?evil=evil&evil=evil", "https://evil.evil:0/evil/eVil.AA?evil=evil&evil=evil", "https://evil.evil:0/evil/EVIL.AA?evil=evil&evil=evil", "https://evil.evil:0/evil/ev_il.AA?evil=evil&evil=evil", "https://evil.evil:0/evil/ev4il.AA?evil=evil&evil=evil", "https://evil.evil:0/evil/e.AA?evil=evil&evil=evil", "https://evil.evil:0/evil/6.AA?evil=evil&evil=evil", "https://evil.evil:0/evil/_.AA?evil=evil&evil=evil", "https://evil.evil:0/evil/&evil=evil&evil=evil", "https://evil.evil:0/evil/", "https://evil.evil:0/evil/&evil=-", "https://evil.evil:0/evil/&evil=eVil", "https://evil.evil:0/evil/&evil=EVIL", "https://evil.evil:0/evil/&evil=ev_il", "https://evil.evil:0/evil/&evil=ev4il", "https://evil.evil:0/evil/&evil=e", "https://evil.evil:0/evil/&evil=6", "https://evil.evil:0/evil/&evil=_", "https://evil.evil:0/evil/&eVil=evil", "https://evil.evil:0/evil/&EVIL=evil", "https://evil.evil:0/evil/&ev_il=evil", "https://evil.evil:0/evil/&ev4il=evil", "https://evil.evil:0/evil/&e=evil", "https://evil.evil:0/evil/&6=evil", "https://evil.evil:0/evil/&_=evil", "https://evil.evil:0/evil&evil=evil", "https://evil.evil:0/evil/evil/&evil=evil", "https://evil.evil:0/&evil=evil", "https://evil.evil:0/-/&evil=evil", "https://evil.evil:0/eVil/&evil=evil", "https://evil.evil:0/EVIL/&evil=evil", "https://evil.evil:0/ev_il/&evil=evil", "https://evil.evil:0/ev4il/&evil=evil", "https://evil.evil:0/e/&evil=evil", "https://evil.evil:0/6/&evil=evil", "https://evil.evil:0/_/&evil=evil", "https://evil.evil/evil/&evil=evil", "https://evil.evil:00/evil/&evil=evil", "https://evil.evil.evil:0/evil/&evil=evil", "https://evil.eVil:0/evil/&evil=evil", "https://evil.EVIL:0/evil/&evil=evil", "https://evil.ev4il:0/evil/&evil=evil", "https://evil.e:0/evil/&evil=evil", "https://evil.6:0/evil/&evil=evil", "https://eVil.evil:0/evil/&evil=evil", "https://EVIL.evil:0/evil/&evil=evil", "https://ev4il.evil:0/evil/&evil=evil", "https://e.evil:0/evil/&evil=evil", "https://6.evil:0/evil/&evil=evil", "http://evil.evil:0/evil/&evil=evil", "http://evil-evil", "http://evil.evil", "https://evil-evil:0/evil/&evil=evil", "https://evil.evil:0/evil/evil.AA?evil=evil&evil=evil", "https://evil.evil:0/evil/&evil=evil"], "nonMatches": ["https://evil.evil:0/evil/evil.AA?evil=evil?evil=evil&evil=evil", "https://evil.evil:0/evil/evil.AA?evil=?&evil=evil", "https://evil.evil:0/evil/evil.AA?evil==&evil=evil", "https://evil.evil:0/evil/evil.AA?evil=:&evil=evil", "https://evil.evil:0/evil/evil.AA?evil=/&evil=evil", "https://evil.evil:0/evil/evil.AA?evil=.&evil=evil", "https://evil.evil:0/evil/evil.AA?evil=&&evil=evil", "https://evil.evil:0/evil/evil.AA?evil=ev il&evil=evil", "https://evil.evil:0/evil/evil.AA?evil= &evil=evil", "https://evil.evil:0/evil/evil.AA?evil=&evil=evil", "https://evil.evil:0/evil/evil.AA?ev il=evil&evil=evil", "https://evil.evil:0/evil/evil.AA? =evil&evil=evil", "https://evil.evil:0/evil/evil.AA?=evil&evil=evil", "https://evil.evil:0/evil/evil.AAAAA?evil=evil&evil=evil", "https://evil.evil:0/evil/evil.A?evil=evil&evil=evil", "https://evil.evil:0/evil/ev il.AA?evil=evil&evil=evil", "https://evil.evil:0/evil/ .AA?evil=evil&evil=evil", "https://evil.evil:0/evil/.AA?evil=evil&evil=evil", "https://evil.evil:0/evil/&evil=?", "https://evil.evil:0/evil/&evil==", "https://evil.evil:0/evil/&evil=:", "https://evil.evil:0/evil/&evil=/", "https://evil.evil:0/evil/&evil=.", "https://evil.evil:0/evil/&evil=&", "https://evil.evil:0/evil/&evil=ev il", "https://evil.evil:0/evil/&evil= ", "https://evil.evil:0/evil/&evil=", "https://evil.evil:0/evil/&ev il=evil", "https://evil.evil:0/evil/& =evil", "https://evil.evil:0/evil/&=evil", "https://evil.evil:0/evil//&evil=evil", "https://evil.evil:0/?/&evil=evil", "https://evil.evil:0/=/&evil=evil", "https://evil.evil:0/:/&evil=evil", "https://evil.evil:0///&evil=evil", "https://evil.evil:0/./&evil=evil", "https://evil.evil:0/&/&evil=evil", "https://evil.evil:0/ev il/&evil=evil", "https://evil.evil:0/ /&evil=evil", "https://evil.evil:0//&evil=evil", "https://evil.evil:0:0/evil/&evil=evil", "https://evil.evil:/evil/&evil=evil", "https://evil:0/evil/&evil=evil", "https://evil.ev_il:0/evil/&evil=evil", "https://evil.ev il:0/evil/&evil=evil", "https://evil. :0/evil/&evil=evil", "https://evil._:0/evil/&evil=evil", "https://evil.:0/evil/&evil=evil", "https://ev_il.evil:0/evil/&evil=evil", "https://ev il.evil:0/evil/&evil=evil", "https:// .evil:0/evil/&evil=evil", "https://_.evil:0/evil/&evil=evil", "https://.evil:0/evil/&evil=evil", "httpss://evil.evil:0/evil/&evil=evil"]}, {"regex": "^([a-zA-Z0-9]+(?:[.-]?[a-zA-Z0-9]+)*@[a-zA-Z0-9]+(?:[.-]?[a-zA-Z0-9]+)*\\.[a-zA-Z]{2,7})$", "exceptionStackTrace": null, "matches": ["evil-evil@evil-evil.AAAAAAA", "evil-evil@evil-evil.aA", "evil-evil@evil-evil-evil.AA", "evil-evil@evil.AA", "evil-evil@evil-eVil.AA", "evil-evil@evil-EVIL.AA", "evil-evil@evil-ev4il.AA", "evil-evil@evil-e.AA", "evil-evil@evil-6.AA", "evil-evil@evilevil.AA", "evil-evil@evil.evil.AA", "evil-evil@eVil-evil.AA", "evil-evil@EVIL-evil.AA", "evil-evil@ev4il-evil.AA", "evil-evil@e-evil.AA", "evil-evil@6-evil.AA", "evil-evil-evil@evil-evil.AA", "evil@evil-evil.AA", "evil-eVil@evil-evil.AA", "evil-EVIL@evil-evil.AA", "evil-ev4il@evil-evil.AA", "evil-e@evil-evil.AA", "evil-6@evil-evil.AA", "evilevil@evil-evil.AA", "evil.evil@evil-evil.AA", "eVil-evil@evil-evil.AA", "EVIL-evil@evil-evil.AA", "ev4il-evil@evil-evil.AA", "e-evil@evil-evil.AA", "6-evil@evil-evil.AA", "evil@evil.AA", "evil-evil@evil-evil.AA"], "nonMatches": ["evil-evil@evil-evil.AAAAAAAA", "evil-evil@evil-evil.A", "evil-evil@evil-ev_il.AA", "evil-evil@evil-ev il.AA", "evil-evil@evil- .AA", "evil-evil@evil-_.AA", "evil-evil@evil-.AA", "evil-evil@evil--evil.AA", "evil-evil@ev_il-evil.AA", "evil-evil@ev il-evil.AA", "evil-evil@ -evil.AA", "evil-evil@_-evil.AA", "evil-evil@-evil.AA", "evil-ev_il@evil-evil.AA", "evil-ev il@evil-evil.AA", "evil- @evil-evil.AA", "evil-_@evil-evil.AA", "evil-@evil-evil.AA", "evil--evil@evil-evil.AA", "ev_il-evil@evil-evil.AA", "ev il-evil@evil-evil.AA", " -evil@evil-evil.AA", "_-evil@evil-evil.AA", "-evil@evil-evil.AA"]}, {"regex": "^(http\\:\\/\\/[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,3}(?:\\/\\S*)?(?:[a-zA-Z0-9_])+\\.(?:jpg|jpeg|gif|png))$", "exceptionStackTrace": null, "matches": ["http://evil.AA/evil__.jpg", "http://evil.AA/evil.jpg", "http://evil.AA/evila.jpg", "http://evil.AA/evilA.jpg", "http://evil.AA/evil0.jpg", "http://evil.AA/evil/evil_.jpg", "http://evil.AA/:_.jpg", "http://evil.AA//_.jpg", "http://evil.AA/._.jpg", "http://evil.AA/-_.jpg", "http://evil.AA/eVil_.jpg", "http://evil.AA/EVIL_.jpg", "http://evil.AA/ev_il_.jpg", "http://evil.AA/ev4il_.jpg", "http://evil.AA/e_.jpg", "http://evil.AA/6_.jpg", "http://evil.AA/__.jpg", "http://evil.AA/_.jpg", "http://evil.AAA/evil_.jpg", "http://evil.aA/evil_.jpg", "http://..AA/evil_.jpg", "http://-.AA/evil_.jpg", "http://eVil.AA/evil_.jpg", "http://EVIL.AA/evil_.jpg", "http://ev4il.AA/evil_.jpg", "http://e.AA/evil_.jpg", "http://6.AA/evil_.jpg", "http://evil.AA_.png", "http://evil.AA_.gif", "http://evil.AA_.jpeg", "http://evil.AA_.jpg", "http://evil.AA/evil_.png", "http://evil.AA/evil_.gif", "http://evil.AA/evil_.jpeg", "http://evil.AA/evil_.jpg"], "nonMatches": ["http://evil.AA/ev il_.jpg", "http://evil.AA/ _.jpg", "http://evil.AAAA/evil_.jpg", "http://evil.A/evil_.jpg", "http://:.AA/evil_.jpg", "http:///.AA/evil_.jpg", "http://ev_il.AA/evil_.jpg", "http://ev il.AA/evil_.jpg", "http:// .AA/evil_.jpg", "http://_.AA/evil_.jpg", "http://.AA/evil_.jpg"]}, {"regex": "^[a-zA-Z0-9\\.\\s]{3,}$", "exceptionStackTrace": null, "matches": ["a..", "A..", "0..", " ..", "..."], "nonMatches": [".."]}, {"regex": "^(\\d+|(\\d*\\.{1}\\d{1,2}){1})$", "exceptionStackTrace": null, "matches": ["0.00", "00.0", "00", ".0", "0.0", "0"], "nonMatches": ["0.00.0", "0.000", "0.", "0..0", ""]}, {"regex": "(?i:)(?&lt;=\\.)\\D\\D(?:-\\D{2,3}?(?:-\\D\\D\\D\\D)?)?(?=.resx)\n#Just change the extension if you want to take a Culture out of different type of file name.\n#The result will always be of the format:\n#(2CharacterLanguage)-(2or3CharacterLocale)-(4CharacterScript)\n#where the second or third set are optional\n#this matches the format of the CultureInfo object in Microsoft .NET", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?&"}, "matches": []}, {"regex": "^1?[-\\. ]?(\\(\\d{3}\\)?[-\\. ]?|\\d{3}?[-\\. ]?)?\\d{3}?[-\\. ]?\\d{4}$", "exceptionStackTrace": null, "matches": ["1 000000 0000", "1 000.000 0000", "1 000-000 0000", "1 (000) 0000000", "1 (000) 000.0000", "1 (000) 000-0000", "1 000 0000", "1 (000)000 0000", "1 (000).000 0000", "1 (000)-000 0000", "1 (000 000 0000", "1(000) 000 0000", "1.(000) 000 0000", "1-(000) 000 0000", " (000) 000 0000", "0000000", "1 000 000 0000", "1 (000) 000 0000"], "nonMatches": ["1 000  000 0000", "1 0000 000 0000", "1 00 000 0000", "1 (000) 000 00000", "1 (000) 000 000", "1 (000) 000  0000", "1 (000) 0000 0000", "1 (000) 00 0000", "1 (000) (000) 000 0000", "1 (000)  000 0000", "1 (000)) 000 0000", "1 (0000) 000 0000", "1 (00) 000 0000", "1  (000) 000 0000", "11 (000) 000 0000"]}, {"regex": "([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+)", "exceptionStackTrace": null, "matches": ["evil@evil..", "evil@evil.-", "evil@evil.eVil", "evil@evil.EVIL", "evil@evil.ev_il", "evil@evil.ev il", "evil@evil.ev4il", "evil@evil.e", "evil@evil.6", "evil@evil._", "evil@..evil", "evil@-.evil", "evil@eVil.evil", "evil@EVIL.evil", "evil@ev_il.evil", "evil@ev4il.evil", "evil@e.evil", "evil@6.evil", "evil@_.evil", ".@evil.evil", "-@evil.evil", "eVil@evil.evil", "EVIL@evil.evil", "ev_il@evil.evil", "ev il@evil.evil", "ev4il@evil.evil", "e@evil.evil", "6@evil.evil", "_@evil.evil", "evil@evil.evil"], "nonMatches": ["evil@evil.@", "evil@evil. ", "evil@evil.", "evil@@.evil", "evil@ev il.evil", "evil@ .evil", "evil@.evil", "@@evil.evil", " @evil.evil", "@evil.evil"]}, {"regex": "^01[0-2]{1}[0-9]{8}", "exceptionStackTrace": null, "matches": ["010000000000", "01000000000"], "nonMatches": ["0100000000", "01300000000"]}, {"regex": "[a-zA-Z0-9.!#$%&&#39;*+-/=?\\^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (bad range): Invalid range: +-/"}, "matches": [], "nonMatches": []}, {"regex": "^((\\d)?(\\d{1})(\\.{1})(\\d)?(\\d{1})){1}$", "exceptionStackTrace": null, "matches": ["00.0", "0.00", "0.0", "00.00"], "nonMatches": ["00.0000.00", "", "00.000", "00..00", "0000", "000.00"]}, {"regex": "[A-Za-z](\\.[A-Za-z0-9]|\\-[A-Za-z0-9]|_[A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9])(\\.[A-Za-z0-9]|\\-[A-Za-z0-9]|_[A-Za-z0-9]|[A-Za-z0-9])*", "exceptionStackTrace": null, "matches": ["a0a.0", "a0A.0", "aa0.0", "aA0.0", "a_a.0", "a_A.0", "a-a.0", "a-A.0", "a.0a", "a.0A", "a.0_a", "a.0_A", "a.0-a", "a.0-A", "a.0.0.0", "a.0.a", "a.0.A", "a.a.0", "a.A.0", "A.0.0", "a00", "a_0", "a-0", "a.0", "a00.0", "a_0.0", "a-0.0", "a.00", "a.0_0", "a.0-0", "a.0.0"], "nonMatches": []}, {"regex": "^[A-Za-z0-9](\\.[\\w\\-]|[\\w\\-][\\w\\-])(\\.[\\w\\-]|[\\w\\-]?[\\w\\-]){0,30}[\\w\\-]?@[A-Za-z0-9\\-]{3,63}\\.[a-zA-Z]{2,6}$", "exceptionStackTrace": null, "matches": ["0-a.--@---.AA", "0-_.--@---.AA", "0-A.--@---.AA", "0-0.--@---.AA", "0a-.--@---.AA", "0_-.--@---.AA", "0A-.--@---.AA", "00-.--@---.AA", "0.--a-@---.AA", "0.--_-@---.AA", "0.--A-@---.AA", "0.--0-@---.AA", "0.-----@---.AA", "0.---@---.AA", "0.-a--@---.AA", "0.-_--@---.AA", "0.-A--@---.AA", "0.-0--@---.AA", "0.-.--@---.AAAAAA", "0.-.--@---.aA", "0.-.--@---------------------------------------------------------------.AA", "0.-.--@a--.AA", "0.-.--@A--.AA", "0.-.--@0--.AA", "0.-.---@---.AA", "0.-.-@---.AA", "0.-.-a@---.AA", "0.-.-_@---.AA", "0.-.-A@---.AA", "0.-.-0@---.AA", "0.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.--@---.AA", "0.--@---.AA", "0.-.a-@---.AA", "0.-._-@---.AA", "0.-.A-@---.AA", "0.-.0-@---.AA", "0.a.--@---.AA", "0._.--@---.AA", "0.A.--@---.AA", "0.0.--@---.AA", "a.-.--@---.AA", "A.-.--@---.AA", "0--@---.AA", "0.-@---.AA", "0--.--@---.AA", "0.----@---.AA", "0.-.--@---.AA"], "nonMatches": ["0.-.--@---.AAAAAAA", "0.-.--@---.A", "0.-.--@----------------------------------------------------------------.AA", "0.-.--@--.AA", "0.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.--@---.AA"]}, {"regex": "&lt;!--.*?--&gt;", "exceptionStackTrace": null, "matches": ["&lt;!--;--&gt;", "&lt;!-----&gt;", "&lt;!--&--&gt;", "&lt;!--!--&gt;", "&lt;!--eVil--&gt;", "&lt;!--EVIL--&gt;", "&lt;!--ev_il--&gt;", "&lt;!--ev il--&gt;", "&lt;!--ev4il--&gt;", "&lt;!--e--&gt;", "&lt;!-- --&gt;", "&lt;!--6--&gt;", "&lt;!--_--&gt;", "&lt;!----&gt;", "&lt;!--evil--&gt;"], "nonMatches": []}, {"regex": "^(1(0|7|9)2?)\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$", "exceptionStackTrace": null, "matches": ["102.100.100.10", "102.100.100.00", "102.100.100.000", "102.100.10.100", "102.100.00.100", "102.100.000.100", "102.10.100.100", "102.00.100.100", "102.000.100.100", "10.100.100.100", "19.0.0.0", "17.0.0.0", "10.250.0.0", "10.200.0.0", "10.0.250.0", "10.0.200.0", "10.0.0.250", "10.0.0.200", "10.0.0.0", "192.100.100.100", "172.100.100.100", "102.250.100.100", "102.200.100.100", "102.100.250.100", "102.100.200.100", "102.100.100.250", "102.100.100.200", "102.100.100.100"], "nonMatches": ["102.256.100.100", "102.100.256.100", "102.100.100.256", "102.100.100.1000", "102.100.100.1100", "102.100.1000.100", "102.100.1100.100", "102.1000.100.100", "102.1100.100.100", "1022.100.100.100"]}, {"regex": "http://www.gmail-services-number.com/", "exceptionStackTrace": null, "matches": ["http://wwwagmail-services-numberAcom/", "http://wwwagmail-services-number:com/", "http://wwwagmail-services-number0com/", "http://wwwagmail-services-number/com/", "http://wwwagmail-services-number-com/", "http://wwwagmail-services-number com/", "http://wwwAgmail-services-numberacom/", "http://www:gmail-services-numberacom/", "http://www0gmail-services-numberacom/", "http://www/gmail-services-numberacom/", "http://www-gmail-services-numberacom/", "http://www gmail-services-numberacom/", "http://wwwagmail-services-numberacom/"], "nonMatches": []}, {"regex": "http://www.technicalsuport.com/customeravgservices.html", "exceptionStackTrace": null, "matches": ["http://wwwatechnicalsuportacom/customeravgservicesAhtml", "http://wwwatechnicalsuportacom/customeravgservices:html", "http://wwwatechnicalsuportacom/customeravgservices0html", "http://wwwatechnicalsuportacom/customeravgservices/html", "http://wwwatechnicalsuportacom/customeravgservices html", "http://wwwatechnicalsuportAcom/customeravgservicesahtml", "http://wwwatechnicalsuport:com/customeravgservicesahtml", "http://wwwatechnicalsuport0com/customeravgservicesahtml", "http://wwwatechnicalsuport/com/customeravgservicesahtml", "http://wwwatechnicalsuport com/customeravgservicesahtml", "http://wwwAtechnicalsuportacom/customeravgservicesahtml", "http://www:technicalsuportacom/customeravgservicesahtml", "http://www0technicalsuportacom/customeravgservicesahtml", "http://www/technicalsuportacom/customeravgservicesahtml", "http://www technicalsuportacom/customeravgservicesahtml", "http://wwwatechnicalsuportacom/customeravgservicesahtml"], "nonMatches": []}, {"regex": "http://www.gmail-services-number.com/\n\n\n", "exceptionStackTrace": null, "matches": ["http://wwwagmail-services-numberAcom/\n\n\n", "http://wwwagmail-services-number:com/\n\n\n", "http://wwwagmail-services-number0com/\n\n\n", "http://wwwagmail-services-number/com/\n\n\n", "http://wwwagmail-services-number-com/\n\n\n", "http://wwwagmail-services-number com/\n\n\n", "http://wwwAgmail-services-numberacom/\n\n\n", "http://www:gmail-services-numberacom/\n\n\n", "http://www0gmail-services-numberacom/\n\n\n", "http://www/gmail-services-numberacom/\n\n\n", "http://www-gmail-services-numberacom/\n\n\n", "http://www gmail-services-numberacom/\n\n\n", "http://wwwagmail-services-numberacom/\n\n\n"], "nonMatches": []}, {"regex": "(NOT)?(\\s*\\(*)\\s*(\\w+)\\s*(=|&lt;&gt;|&lt;|&gt;|LIKE|IN)\\s*(\\(([^\\)]*)\\)|&#39;([^&#39;]*)&#39;|(-?\\d*\\.?\\d+))(\\s*\\)*\\s*)(AND|OR)?", "exceptionStackTrace": null, "matches": ["NOT ( evil = -0.00 ) AND", "NOT ( evil = -0. ) AND", "NOT ( evil = -0..0 ) AND", "NOT ( evil = -00 ) AND", "NOT ( evil = -00.0 ) AND", "NOT ( evil = -.0 ) AND", "NOT ( evil = 0.0 ) AND", "NOT ( evil = &#39;=&#39; ) AND", "NOT ( evil = &#39;.&#39; ) AND", "NOT ( evil = &#39;-&#39; ) AND", "NOT ( evil = &#39;)&#39; ) AND", "NOT ( evil = &#39;(&#39; ) AND", "NOT ( evil = &#39;eVil&#39; ) AND", "NOT ( evil = &#39;EVIL&#39; ) AND", "NOT ( evil = &#39;ev_il&#39; ) AND", "NOT ( evil = &#39;ev il&#39; ) AND", "NOT ( evil = &#39;ev4il&#39; ) AND", "NOT ( evil = &#39;e&#39; ) AND", "NOT ( evil = &#39; &#39; ) AND", "NOT ( evil = &#39;6&#39; ) AND", "NOT ( evil = &#39;_&#39; ) AND", "NOT ( evil = &#39;&#39; ) AND", "NOT ( evil = (evil) ) ANDAND", "NOT ( evil = (evil) ) ", "NOT ( evil = (evil) )  AND", "NOT ( evil = (evil) )AND", "NOT ( evil = (evil) )) AND", "NOT ( evil = (evil)  AND", "NOT ( evil = (evil)  ) AND", "NOT ( evil = (evil)) AND", "NOT ( evil = (=) ) AND", "NOT ( evil = (;) ) AND", "NOT ( evil = (.) ) AND", "NOT ( evil = (-) ) AND", "NOT ( evil = ()) ) AND", "NOT ( evil = (() ) AND", "NOT ( evil = (&) ) AND", "NOT ( evil = (#) ) AND", "NOT ( evil = (eVil) ) AND", "NOT ( evil = (EVIL) ) AND", "NOT ( evil = (ev_il) ) AND", "NOT ( evil = (ev il) ) AND", "NOT ( evil = (ev4il) ) AND", "NOT ( evil = (e) ) AND", "NOT ( evil = ( ) ) AND", "NOT ( evil = (6) ) AND", "NOT ( evil = (_) ) AND", "NOT ( evil = () ) AND", "NOT ( evil =  (evil) ) AND", "NOT ( evil =(evil) ) AND", "NOT ( evil  = (evil) ) AND", "NOT ( evil= (evil) ) AND", "NOT ( eVil = (evil) ) AND", "NOT ( EVIL = (evil) ) AND", "NOT ( ev_il = (evil) ) AND", "NOT ( ev il = (evil) ) AND", "NOT ( ev4il = (evil) ) AND", "NOT ( e = (evil) ) AND", "NOT ( 6 = (evil) ) AND", "NOT ( _ = (evil) ) AND", "NOT (  evil = (evil) ) AND", "NOT (evil = (evil) ) AND", "NOT (( evil = (evil) ) AND", "NOT  evil = (evil) ) AND", "NOT  ( evil = (evil) ) AND", "NOT( evil = (evil) ) AND", "NOTNOT ( evil = (evil) ) AND", " ( evil = (evil) ) AND", "evilIN()", "evilLIKE()", "evil&gt;()", "evil&lt;()", "evil&lt;&gt;()", "evil=0", "evil=&#39;&#39;", "evil=()", "NOT ( evil IN (evil) ) AND", "NOT ( evil LIKE (evil) ) AND", "NOT ( evil &gt; (evil) ) AND", "NOT ( evil &lt; (evil) ) AND", "NOT ( evil &lt;&gt; (evil) ) AND", "NOT ( evil = -0.0 ) AND", "NOT ( evil = &#39;evil&#39; ) AND", "NOT ( evil = (evil) ) OR", "NOT ( evil = (evil) ) AND"], "nonMatches": ["NOT ( evil = --0.0 ) AND", "NOT ( evil = &#39;;&#39; ) AND", "NOT ( evil = &#39;&&#39; ) AND", "NOT ( evil = &#39;#&#39; ) AND", "NOT (   = (evil) ) AND", "NOT (  = (evil) ) AND"]}, {"regex": "((0?[1-9]|1[012])|(?:(J|j)an(?:uary|\\.)?|(F|f)eb(?:ruary|\\.)?|(M|m)ar(?:ch|\\.)?|(A|a)pr(?:il|\\.)?|(M|m)ay?|(J|j)un(?:e|\\.)?|(J|j)ul(?:y|\\.)?|(A|a)ug(?:ust|\\.)?|(S|s)ep(?:tember|\\.)?|(O|o)ct(?:ober|\\.)?|(N|n)ov(?:ember|\\.)?|(D|d)ec(?:ember|\\.)?))", "exceptionStackTrace": null, "matches": ["Decemberember", "Novemberember", "Octoberober", "Septembertember", "Augustust", "Julyy", "Junee", "Mayy", "Aprilil", "Marchch", "Februaryruary", "Januaryuary", "13", "11", "10", "001", "dec", "Dec", "nov", "Nov", "oct", "Oct", "sep", "Sep", "aug", "Aug", "jul", "Jul", "jun", "Jun", "ma", "Ma", "apr", "Apr", "mar", "Mar", "feb", "Feb", "jan", "Jan", "1", "december", "Dec.", "December", "november", "Nov.", "November", "october", "Oct.", "October", "september", "Sep.", "September", "august", "Aug.", "August", "july", "Jul.", "July", "june", "Jun.", "June", "may", "May", "april", "Apr.", "April", "march", "Mar.", "March", "february", "Feb.", "February", "january", "Jan.", "January", "12", "01"], "nonMatches": ["00"]}, {"regex": "(^[1]$)|(^[1]+\\d*\\.+\\d*[1-5]$)", "exceptionStackTrace": null, "matches": ["10.001", "10.1", "10..01", "100.01", "1.01", "110.01", "1.1", "10.01", "1"], "nonMatches": ["10.00", "1001", "0.01"]}, {"regex": "^(#){1}([a-fA-F0-9]){6}$", "exceptionStackTrace": null, "matches": ["#a00000", "#A00000", "#000000"], "nonMatches": ["#0000000", "#00000", "#g00000", "#G00000", "##000000", "000000"]}, {"regex": "(?<zip5>^\\d{5})([\\- ]?(?<plus4>\\d{4})?$)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<z"}, "matches": []}, {"regex": "^\\d{5}((-|\\s)?\\d{4})?$", "exceptionStackTrace": null, "matches": ["000000000", "00000", "00000 0000", "00000-0000"], "nonMatches": ["00000-0000-0000", "00000-00000", "00000-000", "00000--0000", "000000-0000", "0000-0000"]}, {"regex": "^\\d{5}((\\-|\\s)?\\d{4})?$", "exceptionStackTrace": null, "matches": ["000000000", "00000", "00000 0000", "00000-0000"], "nonMatches": ["00000-0000-0000", "00000-00000", "00000-000", "00000--0000", "000000-0000", "0000-0000"]}, {"regex": "^(\\([2-9]|[2-9])(\\d{2}|\\d{2}\\))(-|.|\\s)?\\d{3}(-|.|\\s)?\\d{4}$", "exceptionStackTrace": null, "matches": ["(200A000-0000", "(2000000-0000", "(200)000-0000", "(200(000-0000", "(200-000A0000", "(200-00000000", "(200-000)0000", "(200-000(0000", "(200-0000000", "(200000-0000", "2000000000", "(200)0000000", "(2000000000", "200-000-0000", "(200)-000-0000", "(200 000-0000", "(200a000-0000", "(200-000 0000", "(200-000a0000", "(200-000-0000"], "nonMatches": ["000-000-0000", "(2000)-000-0000", "(20)-000-0000", "(200-000-00000", "(200-000-000", "(200-000--0000", "(200-0000-0000", "(200-00-0000", "(200--000-0000", "(2000-000-0000", "(20-000-0000", "(000-000-0000"]}, {"regex": "^\\(?(?<AreaCode>[2-9]\\d{2})(\\)?)(-|.|\\s)?(?<Prefix>[1-9]\\d{2})(-|.|\\s)?(?<Suffix>\\d{4})$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<A"}, "matches": []}, {"regex": "5", "exceptionStackTrace": null, "matches": ["5"], "nonMatches": []}, {"regex": "&#39;/http:\\\\/\\/\\.?video.google.\\w{2,3}\\/videoplay\\?docid=([a-z0-9-_]+)/i&#39;", "exceptionStackTrace": null, "matches": ["&#39;/http:\\//.videoagoogleaaa/videoplay?docid=-/i&#39;", "&#39;/http:\\//.videoagoogleaaa/videoplay?docid=ev_il/i&#39;", "&#39;/http:\\//.videoagoogleaaa/videoplay?docid=ev4il/i&#39;", "&#39;/http:\\//.videoagoogleaaa/videoplay?docid=e/i&#39;", "&#39;/http:\\//.videoagoogleaaa/videoplay?docid=6/i&#39;", "&#39;/http:\\//.videoagoogleaaa/videoplay?docid=_/i&#39;", "&#39;/http:\\//.videoagoogleaaaa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.videoagooglea_a/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.videoagoogleaAa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.videoagooglea0a/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.videoagoogle_aa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.videoagoogle\\aa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.videoagoogleAaa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.videoagoogle?aa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.videoagoogle=aa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.videoagoogle;aa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.videoagoogle:aa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.videoagoogle0aa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.videoagoogle/aa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.videoagoogle.aa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.videoagoogle-aa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.videoagoogle&aa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.videoagoogle#aa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.videoagoogle aa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.video_googleaaa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.video\\googleaaa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.videoAgoogleaaa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.video?googleaaa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.video=googleaaa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.video;googleaaa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.video:googleaaa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.video0googleaaa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.video/googleaaa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.video.googleaaa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.video-googleaaa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.video&googleaaa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.video#googleaaa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.video googleaaa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//videoagoogleaaa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.videoagoogleaaa/videoplay?docid=evil/i&#39;"], "nonMatches": ["&#39;/http:\\//.videoagoogleaaa/videoplay?docid=\\/i&#39;", "&#39;/http:\\//.videoagoogleaaa/videoplay?docid=?/i&#39;", "&#39;/http:\\//.videoagoogleaaa/videoplay?docid==/i&#39;", "&#39;/http:\\//.videoagoogleaaa/videoplay?docid=;/i&#39;", "&#39;/http:\\//.videoagoogleaaa/videoplay?docid=:/i&#39;", "&#39;/http:\\//.videoagoogleaaa/videoplay?docid=//i&#39;", "&#39;/http:\\//.videoagoogleaaa/videoplay?docid=./i&#39;", "&#39;/http:\\//.videoagoogleaaa/videoplay?docid=&/i&#39;", "&#39;/http:\\//.videoagoogleaaa/videoplay?docid=#/i&#39;", "&#39;/http:\\//.videoagoogleaaa/videoplay?docid=eVil/i&#39;", "&#39;/http:\\//.videoagoogleaaa/videoplay?docid=EVIL/i&#39;", "&#39;/http:\\//.videoagoogleaaa/videoplay?docid=ev il/i&#39;", "&#39;/http:\\//.videoagoogleaaa/videoplay?docid= /i&#39;", "&#39;/http:\\//.videoagoogleaaa/videoplay?docid=/i&#39;", "&#39;/http:\\//.videoagoogleaaaaa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//.videoagoogleaa/videoplay?docid=evil/i&#39;", "&#39;/http:\\//..videoagoogleaaa/videoplay?docid=evil/i&#39;"]}, {"regex": "&#39;/http:\\\\/\\/(?:www.)?clipser\\.com\\/watch_video\\/([0-9a-z-_]+)/i&#39;", "exceptionStackTrace": null, "matches": ["&#39;/http:\\//wwwaclipser.com/watch_video/-/i&#39;", "&#39;/http:\\//wwwaclipser.com/watch_video/ev_il/i&#39;", "&#39;/http:\\//wwwaclipser.com/watch_video/ev4il/i&#39;", "&#39;/http:\\//wwwaclipser.com/watch_video/e/i&#39;", "&#39;/http:\\//wwwaclipser.com/watch_video/6/i&#39;", "&#39;/http:\\//wwwaclipser.com/watch_video/_/i&#39;", "&#39;/http:\\//www_clipser.com/watch_video/evil/i&#39;", "&#39;/http:\\//www\\clipser.com/watch_video/evil/i&#39;", "&#39;/http:\\//wwwAclipser.com/watch_video/evil/i&#39;", "&#39;/http:\\//www;clipser.com/watch_video/evil/i&#39;", "&#39;/http:\\//www:clipser.com/watch_video/evil/i&#39;", "&#39;/http:\\//www0clipser.com/watch_video/evil/i&#39;", "&#39;/http:\\//www/clipser.com/watch_video/evil/i&#39;", "&#39;/http:\\//www.clipser.com/watch_video/evil/i&#39;", "&#39;/http:\\//www-clipser.com/watch_video/evil/i&#39;", "&#39;/http:\\//www&clipser.com/watch_video/evil/i&#39;", "&#39;/http:\\//www#clipser.com/watch_video/evil/i&#39;", "&#39;/http:\\//www clipser.com/watch_video/evil/i&#39;", "&#39;/http:\\//clipser.com/watch_video/evil/i&#39;", "&#39;/http:\\//wwwaclipser.com/watch_video/evil/i&#39;"], "nonMatches": ["&#39;/http:\\//wwwaclipser.com/watch_video/\\/i&#39;", "&#39;/http:\\//wwwaclipser.com/watch_video/;/i&#39;", "&#39;/http:\\//wwwaclipser.com/watch_video/:/i&#39;", "&#39;/http:\\//wwwaclipser.com/watch_video///i&#39;", "&#39;/http:\\//wwwaclipser.com/watch_video/./i&#39;", "&#39;/http:\\//wwwaclipser.com/watch_video/&/i&#39;", "&#39;/http:\\//wwwaclipser.com/watch_video/#/i&#39;", "&#39;/http:\\//wwwaclipser.com/watch_video/eVil/i&#39;", "&#39;/http:\\//wwwaclipser.com/watch_video/EVIL/i&#39;", "&#39;/http:\\//wwwaclipser.com/watch_video/ev il/i&#39;", "&#39;/http:\\//wwwaclipser.com/watch_video/ /i&#39;", "&#39;/http:\\//wwwaclipser.com/watch_video//i&#39;", "&#39;/http:\\//wwwawwwaclipser.com/watch_video/evil/i&#39;"]}, {"regex": "&#39;/http:\\/\\/(?:www\\.)?blip\\.tv\\/file\\/(\\d+).*/&#39;", "exceptionStackTrace": null, "matches": ["&#39;/http://www.blip.tv/file/0;/&#39;", "&#39;/http://www.blip.tv/file/0:/&#39;", "&#39;/http://www.blip.tv/file/0//&#39;", "&#39;/http://www.blip.tv/file/0./&#39;", "&#39;/http://www.blip.tv/file/0&/&#39;", "&#39;/http://www.blip.tv/file/0#/&#39;", "&#39;/http://www.blip.tv/file/0eVil/&#39;", "&#39;/http://www.blip.tv/file/0EVIL/&#39;", "&#39;/http://www.blip.tv/file/0ev_il/&#39;", "&#39;/http://www.blip.tv/file/0ev il/&#39;", "&#39;/http://www.blip.tv/file/0ev4il/&#39;", "&#39;/http://www.blip.tv/file/0e/&#39;", "&#39;/http://www.blip.tv/file/0 /&#39;", "&#39;/http://www.blip.tv/file/06/&#39;", "&#39;/http://www.blip.tv/file/0_/&#39;", "&#39;/http://www.blip.tv/file/0/&#39;", "&#39;/http://www.blip.tv/file/00evil/&#39;", "&#39;/http://blip.tv/file/0evil/&#39;", "&#39;/http://blip.tv/file/0/&#39;", "&#39;/http://www.blip.tv/file/0evil/&#39;"], "nonMatches": ["&#39;/http://www.blip.tv/file/evil/&#39;", "&#39;/http://www.www.blip.tv/file/0evil/&#39;"]}, {"regex": "&#39;/\\\\(?<\\w+[^>]*\\son\\w+=.*[ \\/].?>(?:\\))?/i&#39;", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<\\w"}, "matches": []}, {"regex": "^\\(?[\\d]{3}\\)?[\\s-]?[\\d]{3}[\\s-]?[\\d]{4}$", "exceptionStackTrace": null, "matches": ["(000)-0000000", "(000)-000 0000", "(000)000-0000", "(000) 000-0000", "(000-000-0000", "000)-000-0000", "0000000000", "(000)-000-0000"], "nonMatches": ["(000)-000-00000", "(000)-000-000", "(000)-000--0000", "(000)-0000-0000", "(000)-00-0000", "(000)--000-0000", "(000))-000-0000", "(0000)-000-0000", "(00)-000-0000", "((000)-000-0000"]}, {"regex": "^(((25[0-5]|2[0-4][0-9]|19[0-1]|19[3-9]|18[0-9]|17[0-1]|17[3-9]|1[3-6][0-9]|12[8-9]|12[0-6]|1[0-1][0-9]|1[1-9]|[2-9][0-9]|[0-9])\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]))|(192\\.(25[0-5]|2[0-4][0-9]|16[0-7]|169|1[0-5][0-9]|1[7-9][0-9]|[1-9][0-9]|[0-9]))|(172\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|1[0-5]|3[2-9]|[4-9][0-9]|[0-9])))\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$", "exceptionStackTrace": null, "matches": ["172.0.250.250", "172.40.250.250", "172.32.250.250", "172.10.250.250", "172.100.250.250", "172.200.250.250", "172.250.250.250", "192.0.250.250", "192.10.250.250", "192.170.250.250", "192.100.250.250", "192.169.250.250", "192.160.250.250", "192.200.250.250", "192.250.250.250", "0.250.250.250", "20.250.250.250", "11.250.250.250", "100.250.250.250", "120.250.250.250", "128.250.250.250", "130.250.250.250", "173.250.250.250", "170.250.250.250", "180.250.250.250", "193.250.250.250", "190.250.250.250", "200.250.250.250", "250.0.250.250", "250.10.250.250", "250.100.250.250", "250.200.250.250", "250.250.0.250", "250.250.10.250", "250.250.100.250", "250.250.200.250", "250.250.250.0", "250.250.250.10", "250.250.250.100", "250.250.250.200", "250.250.250.250"], "nonMatches": ["172.00.250.250", "172.30.250.250", "172.16.250.250", "172.256.250.250", "192.00.250.250", "192.168.250.250", "192.256.250.250", "00.250.250.250", "10.250.250.250", "127.250.250.250", "250.00.250.250", "250.250.00.250", "250.250.250.00", "250.250.250.256", "250.250.256.250", "250.256.250.250", "256.250.250.250"]}, {"regex": "((\\d){2})?(\\s|-)?((\\d){2,4})?(\\s|-){1}((\\d){8})$", "exceptionStackTrace": null, "matches": ["00 00  00000000", "00  00000000", "00 00000 00000000", "00 0000 00000000", "00 0 00000000", "00  00 00000000", "0000 00000000", "0000 00 00000000", " 00 00000000", "000 00 00000000", "0 00 00000000", "-00000000", " 00000000", "00-00 00000000", "00 00-00000000", "00 00 00000000"], "nonMatches": ["00 00 000000000", "00 00 0000000", "00 0000000000"]}, {"regex": "https://alphagenixsweden.com/celuraid-extreme/", "exceptionStackTrace": null, "matches": ["https://alphagenixswedenAcom/celuraid-extreme/", "https://alphagenixsweden:com/celuraid-extreme/", "https://alphagenixsweden0com/celuraid-extreme/", "https://alphagenixsweden/com/celuraid-extreme/", "https://alphagenixsweden-com/celuraid-extreme/", "https://alphagenixsweden com/celuraid-extreme/", "https://alphagenixswedenacom/celuraid-extreme/"], "nonMatches": []}, {"regex": "^(-|\\+)?(((100|((0|[1-9]{1,2})(\\.[0-9]+)?)))|(\\.[0-9]+))%?$", "exceptionStackTrace": null, "matches": ["-.00%", "-11.0%", "-0%", "-0.00%", "-100", "100%", ".0", "1", "0", "100", "+100%", "-.0%", "-1.0%", "-0.0%", "-100%"], "nonMatches": ["-.%", "-111.0%", "-0.0.0%", "-0.%", "-100%%", "--100%"]}, {"regex": "^(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$", "exceptionStackTrace": null, "matches": ["A:A:A:A:A:A:A:AAAA", "A:A:A:A:A:A:A:a", "A:A:A:A:A:A:A:0", "AAAA:A:A:A:A:A:A:A", "a:A:A:A:A:A:A:A", "0:A:A:A:A:A:A:A", "A:A:A:A:A:A:A:A"], "nonMatches": ["A:A:A:A:A:A:A:AAAAA", "A:A:A:A:A:A:A:", "A:A:A:A:A:A:A:g", "A:A:A:A:A:A:A:G", "A:A:A:A:A:A:A:A:A", "A:A:A:A:A:A:A", "AAAAA:A:A:A:A:A:A:A", ":A:A:A:A:A:A:A", "g:A:A:A:A:A:A:A", "G:A:A:A:A:A:A:A"]}, {"regex": "^([a-zA-Z])[a-zA-Z_-]*[\\w_-]*[\\S]$|^([a-zA-Z])[0-9_-]*[\\S]$|^[a-zA-Z]*[\\S]$", "exceptionStackTrace": null, "matches": ["evil_", "evilA", "evil0", "evil-", "eVila", "EVILa", "ev_ila", "ev4ila", "ea", "A-_", "A-A", "A-0", "A--", "A--a", "A_a", "A0a", "a-a", "Aevilevil_", "AevilevilA", "Aevilevil0", "Aevilevil-", "Aevil-a", "AevileVila", "AevilEVILa", "Aevilev_ila", "Aevilev4ila", "Aevilea", "Aevil6a", "Aevil_a", "A-evila", "AeVilevila", "AEVILevila", "Aev_ilevila", "Aev4ilevila", "Aeevila", "A6evila", "A_evila", "Aevila", "aevilevila", "a", "Aa", "evila", "A-a", "Aevilevila"], "nonMatches": ["evil ", "ev ila", " a", "6a", "_a", "A- ", "Aevilevil ", "Aevilev ila", "Aevil a", "Aev ilevila", "A evila"]}, {"regex": "^([0-9]{12},)+[0-9]{12}$|^([0-9]{12})$", "exceptionStackTrace": null, "matches": ["000000000000,000000000000,000000000000", "000000000000", "000000000000,000000000000"], "nonMatches": ["0000000000000", "00000000000", "000000000000,0000000000000", "000000000000,00000000000", "0000000000000,000000000000", "00000000000,000000000000"]}, {"regex": "^([a-zA-Z]\\:|\\\\)\\\\([^\\\\]+\\\\)*[^\\/:*?&quot;<>|]+\\.htm(l)?$", "exceptionStackTrace": null, "matches": ["A:\\evil\\evil.htm", "A:\\evil\\\\.html", "A:\\evil\\..html", "A:\\evil\\eVil.html", "A:\\evil\\EVIL.html", "A:\\evil\\ev_il.html", "A:\\evil\\ev il.html", "A:\\evil\\ev4il.html", "A:\\evil\\e.html", "A:\\evil\\ .html", "A:\\evil\\6.html", "A:\\evil\\_.html", "A:\\evil\\.html", "A:\\evil\\evil\\evil.html", "A:\\evil.html", "A:\\|\\evil.html", "A:\\\\\\evil.html", "A:\\?\\evil.html", "A:\\>\\evil.html", "A:\\<\\evil.html", "A:\\;\\evil.html", "A:\\:\\evil.html", "A:\\/\\evil.html", "A:\\.\\evil.html", "A:\\*\\evil.html", "A:\\&\\evil.html", "A:\\eVil\\evil.html", "A:\\EVIL\\evil.html", "A:\\ev_il\\evil.html", "A:\\ev il\\evil.html", "A:\\ev4il\\evil.html", "A:\\e\\evil.html", "A:\\ \\evil.html", "A:\\6\\evil.html", "A:\\_\\evil.html", "A:\\\\evil.html", "a:\\evil\\evil.html", "\\\\evil.htm", "A:\\evil.htm", "\\\\evil\\evil.html", "A:\\evil\\evil.html"], "nonMatches": ["A:\\evil\\evil.htmll", "A:\\evil\\|.html", "A:\\evil\\?.html", "A:\\evil\\>.html", "A:\\evil\\<.html", "A:\\evil\\;.html", "A:\\evil\\:.html", "A:\\evil\\/.html", "A:\\evil\\*.html", "A:\\evil\\&.html"]}, {"regex": "^(3[0-1]|2[0-9]|1[0-9]|0[1-9])[\\s{1}|\\/|-](Jan|JAN|Feb|FEB|Mar|MAR|Apr|APR|May|MAY|Jun|JUN|Jul|JUL|Aug|AUG|Sep|SEP|Oct|OCT|Nov|NOV|Dec|DEC)[\\s{1}|\\/|-]\\d{4}$", "exceptionStackTrace": null, "matches": ["30-Jan}0000", "30-Jan|0000", "30-Jan{0000", "30-Jan10000", "30-Jan/0000", "30-Jan 0000", "30}Jan-0000", "30|Jan-0000", "30{Jan-0000", "301Jan-0000", "30/Jan-0000", "30 Jan-0000", "01-Jan-0000", "10-Jan-0000", "20-Jan-0000", "30-DEC-0000", "30-Dec-0000", "30-NOV-0000", "30-Nov-0000", "30-OCT-0000", "30-Oct-0000", "30-SEP-0000", "30-Sep-0000", "30-AUG-0000", "30-Aug-0000", "30-JUL-0000", "30-Jul-0000", "30-JUN-0000", "30-Jun-0000", "30-MAY-0000", "30-May-0000", "30-APR-0000", "30-Apr-0000", "30-MAR-0000", "30-Mar-0000", "30-FEB-0000", "30-Feb-0000", "30-JAN-0000", "30-Jan-0000"], "nonMatches": ["00-Jan-0000", "30-Jan-00000", "30-Jan-000", "30-Jan00000", "300Jan-0000", "32-Jan-0000"]}, {"regex": "^((25[0-4]|(2[0-4]|1[0-9]|[1-9]?)[0-9]\\.){3}(25[0-4]|(2[0-4]|1[0-9]|[1-9]?)[0-9]))$", "exceptionStackTrace": null, "matches": ["110.10.10.250", "250250250110", "2502502500", "0.10.10.250", "100.10.10.250", "200.10.10.250", "25010.10.0", "25010.10.100", "25010.10.200", "25010.10.250", "10.10.10.250", "100.100.100.250", "200.200.200.250", "25025025010", "250250250100", "250250250200", "250250250250"], "nonMatches": ["00.10.10.250", "250.200.200.250", "25025025000", "250250250255", "250250250250250", "250250250", "255250250250"]}, {"regex": "^\\d{4,}$|^[3-9]\\d{2}$|^2[5-9]\\d$", "exceptionStackTrace": null, "matches": ["3000", "250", "300", "0000"], "nonMatches": ["200", "30", "000"]}, {"regex": "(?!^([0-9]+[-]?[0-9]+)$)(?!^([0-9]+[[\\\\s]*]?[0-9]+)$)^([0-9]+\\.?[0-9]+$|(^[-]?[0-9]+([[\\\\s]*]?)$)|^([-]?)[0-9]+\\.?[0-9]+([[\\\\s]*]?)|([0-9]+))$", "exceptionStackTrace": null, "matches": ["-0.0s", "-0.0ss]", "-0.0]", "-0.0\\]", "-0.0[]", "-0.00s]", "-00.0s]", "0.0s]", "-0s", "-0ss]", "-0]", "-0\\]", "-0[]", "-00s]", "0s]", "0.00", "00.0", "0", "-0.0s]", "-0s]", "0.0"], "nonMatches": ["", "-0.0s]]", "-0.0a]", "-0.s]", "-0..0s]", "-.0s]", "--0.0s]", "-0s]]", "-0a]", "-s]", "--0s]", "0.", "0..0", ".0", "00"]}, {"regex": "(?!^([0-9]+)([[\\\\s]*]?)$)(?!^([0-9]+)[[a-zA-Z]*]?([[\\\\s]*]?)$)^([_]?([a-zA-Z0-9]+)([[\\\\s]*]?))$", "exceptionStackTrace": null, "matches": ["_evils", "_evilss]", "_evil]", "_evila]", "_evil\\]", "_evil[]", "_eVils]", "_EVILs]", "_ev4ils]", "_es]", "_6s]", "_s]", "evils]", "evil", "_evils]"], "nonMatches": ["_evils]]", "_ev_ils]", "_ev ils]", "_ s]", "__s]", "__evils]"]}, {"regex": "(-?(90[ :&#176;d]*00[ :\\&#39;\\&#39;m]*00(\\.0+)?|[0-8][0-9][ :&#176;d]*[0-5][0-9][ :\\&#39;\\&#39;m]*[0-5][0-9](\\.\\d+)?)[ :\\?\\&quot;s]*(N|n|S|s)?)[ ,]*(-?(180[ :&#176;d]*00[ :\\&#39;\\&#39;m]*00(\\.0+)?|(1[0-7][0-9]|0[0-9][0-9])[ :&#176;d]*[0-5][0-9][ :\\&#39;\\&#39;m]*[0-5][0-9](\\.\\d+)?)[ :\\?\\&quot;s]*(E|e|W|w)?)", "exceptionStackTrace": null, "matches": ["-00d00m00sN,-180d00m00.0sE", "-00d00m00.00sN,-180d00m00.0sE", "-00d00mm00.0sN,-180d00m00.0sE", "-00d0000.0sN,-180d00m00.0sE", "-00d00;00.0sN,-180d00m00.0sE", "-00d00:00.0sN,-180d00m00.0sE", "-00d00900.0sN,-180d00m00.0sE", "-00d00300.0sN,-180d00m00.0sE", "-00d00&00.0sN,-180d00m00.0sE", "-00d00#00.0sN,-180d00m00.0sE", "-00d00 00.0sN,-180d00m00.0sE", "-00dd00m00.0sN,-180d00m00.0sE", "-0000m00.0sN,-180d00m00.0sE", "-00;00m00.0sN,-180d00m00.0sE", "-00:00m00.0sN,-180d00m00.0sE", "-00700m00.0sN,-180d00m00.0sE", "-00600m00.0sN,-180d00m00.0sE", "-00100m00.0sN,-180d00m00.0sE", "-00000m00.0sN,-180d00m00.0sE", "-00&00m00.0sN,-180d00m00.0sE", "-00#00m00.0sN,-180d00m00.0sE", "-00 00m00.0sN,-180d00m00.0sE", "-90d00m00.0sN,-100d00m00.0.0sE", "-90d00m00.0sN,-100d00m00sE", "-90d00m00.0sN,-100d00m00.00sE", "-90d00m00.0sN,-100d00m00.sE", "-90d00m00.0sN,-100d00mm00.0sE", "-90d00m00.0sN,-100d0000.0sE", "-90d00m00.0sN,-100d00;00.0sE", "-90d00m00.0sN,-100d00:00.0sE", "-90d00m00.0sN,-100d00900.0sE", "-90d00m00.0sN,-100d00300.0sE", "-90d00m00.0sN,-100d00000.0sE", "-90d00m00.0sN,-100d00&00.0sE", "-90d00m00.0sN,-100d00#00.0sE", "-90d00m00.0sN,-100d00 00.0sE", "-90d00m00.0sN,-100dd00m00.0sE", "-90d00m00.0sN,-10000m00.0sE", "-90d00m00.0sN,-100;00m00.0sE", "-90d00m00.0sN,-100:00m00.0sE", "-90d00m00.0sN,-100700m00.0sE", "-90d00m00.0sN,-100600m00.0sE", "-90d00m00.0sN,-100100m00.0sE", "-90d00m00.0sN,-100&00m00.0sE", "-90d00m00.0sN,-100#00m00.0sE", "-90d00m00.0sN,-100 00m00.0sE", "-90d00m00.0sN,-180d00m00.0sEE", "-90d00m00.0sN,-180d00m00.0s", "-90d00m00.0sN,-180d00m00.0ssE", "-90d00m00.0sN,-180d00m00.0E", "-90d00m00.0sN,-180d00m00.0uE", "-90d00m00.0sN,-180d00m00.0tE", "-90d00m00.0sN,-180d00m00.0qE", "-90d00m00.0sN,-180d00m00.0oE", "-90d00m00.0sN,-180d00m00.0aE", "-90d00m00.0sN,-180d00m00.0?E", "-90d00m00.0sN,-180d00m00.0;E", "-90d00m00.0sN,-180d00m00.0:E", "-90d00m00.0sN,-180d00m00.0&E", "-90d00m00.0sN,-180d00m00.0 E", "-90d00m00.0sN,-180d00m00.0.0sE", "-90d00m00.0sN,-180d00m00sE", "-90d00m00.0sN,-180d00m00.00sE", "-90d00m00.0sN,-180d00m00.sE", "-90d00m00.0sN,-180d00mm00.0sE", "-90d00m00.0sN,-180d0000.0sE", "-90d00m00.0sN,-180d00;00.0sE", "-90d00m00.0sN,-180d00:00.0sE", "-90d00m00.0sN,-180d00900.0sE", "-90d00m00.0sN,-180d00300.0sE", "-90d00m00.0sN,-180d00000.0sE", "-90d00m00.0sN,-180d00&00.0sE", "-90d00m00.0sN,-180d00#00.0sE", "-90d00m00.0sN,-180d00 00.0sE", "-90d00m00.0sN,-180dd00m00.0sE", "-90d00m00.0sN,-18000m00.0sE", "-90d00m00.0sN,-180;00m00.0sE", "-90d00m00.0sN,-180:00m00.0sE", "-90d00m00.0sN,-180700m00.0sE", "-90d00m00.0sN,-180600m00.0sE", "-90d00m00.0sN,-180100m00.0sE", "-90d00m00.0sN,-180&00m00.0sE", "-90d00m00.0sN,-180#00m00.0sE", "-90d00m00.0sN,-180 00m00.0sE", "-90d00m00.0sN,180d00m00.0sE", "-90d00m00.0sN,,-180d00m00.0sE", "-90d00m00.0sN-180d00m00.0sE", "-90d00m00.0sN -180d00m00.0sE", "-90d00m00.0s,-180d00m00.0sE", "-90d00m00.0ssN,-180d00m00.0sE", "-90d00m00.0N,-180d00m00.0sE", "-90d00m00.0uN,-180d00m00.0sE", "-90d00m00.0tN,-180d00m00.0sE", "-90d00m00.0qN,-180d00m00.0sE", "-90d00m00.0oN,-180d00m00.0sE", "-90d00m00.0?N,-180d00m00.0sE", "-90d00m00.0;N,-180d00m00.0sE", "-90d00m00.0:N,-180d00m00.0sE", "-90d00m00.0&N,-180d00m00.0sE", "-90d00m00.0 N,-180d00m00.0sE", "-90d00m00sN,-180d00m00.0sE", "-90d00m00.00sN,-180d00m00.0sE", "-90d00mm00.0sN,-180d00m00.0sE", "-90d0000.0sN,-180d00m00.0sE", "-90d00;00.0sN,-180d00m00.0sE", "-90d00:00.0sN,-180d00m00.0sE", "-90d00900.0sN,-180d00m00.0sE", "-90d00300.0sN,-180d00m00.0sE", "-90d00&00.0sN,-180d00m00.0sE", "-90d00#00.0sN,-180d00m00.0sE", "-90d00 00.0sN,-180d00m00.0sE", "-90dd00m00.0sN,-180d00m00.0sE", "-9000m00.0sN,-180d00m00.0sE", "-90;00m00.0sN,-180d00m00.0sE", "-90:00m00.0sN,-180d00m00.0sE", "-90700m00.0sN,-180d00m00.0sE", "-90600m00.0sN,-180d00m00.0sE", "-90100m00.0sN,-180d00m00.0sE", "-90000m00.0sN,-180d00m00.0sE", "-90&00m00.0sN,-180d00m00.0sE", "-90#00m00.0sN,-180d00m00.0sE", "-90 00m00.0sN,-180d00m00.0sE", "--90d00m00.0sN,-180d00m00.0sE", "90d00m00.0sN,-180d00m00.0sE", "0000001800000", "9000000000000", "9000001000000", "9000001800000", "-00d00m00.0sN,-180d00m00.0sE", "-90d00m00.0ss,-180d00m00.0sE", "-90d00m00.0sS,-180d00m00.0sE", "-90d00m00.0sn,-180d00m00.0sE", "-90d00m00.0sN,-000d00m00.0sE", "-90d00m00.0sN,-100d00m00.0sE", "-90d00m00.0sN,-180d00m00.0sw", "-90d00m00.0sN,-180d00m00.0sW", "-90d00m00.0sN,-180d00m00.0se", "-90d00m00.0sN,-180d00m00.0sE"], "nonMatches": ["-00d00m00.0.0sN,-180d00m00.0sE", "-00d00m00.sN,-180d00m00.0sE", "-00d00m60.0sN,-180d00m00.0sE", "-00d00a00.0sN,-180d00m00.0sE", "-00d00000.0sN,-180d00m00.0sE", "-00d60m00.0sN,-180d00m00.0sE", "-00a00m00.0sN,-180d00m00.0sE", "-90d00m00.0sN,-100d00m60.0sE", "-90d00m00.0sN,-100d00a00.0sE", "-90d00m00.0sN,-100d60m00.0sE", "-90d00m00.0sN,-100a00m00.0sE", "-90d00m00.0sN,-100000m00.0sE", "-90d00m00.0sN,-180d00a00.0sE", "-90d00m00.0sN,-180a00m00.0sE", "-90d00m00.0sN,-180000m00.0sE", "-90d00m00.0sN,--180d00m00.0sE", "-90d00m00.0sNN,-180d00m00.0sE", "-90d00m00.0aN,-180d00m00.0sE", "-90d00m00.0.0sN,-180d00m00.0sE", "-90d00m00.sN,-180d00m00.0sE", "-90d00a00.0sN,-180d00m00.0sE", "-90d00000.0sN,-180d00m00.0sE", "-90a00m00.0sN,-180d00m00.0sE"]}, {"regex": "((X|x):-?(180(\\.0+)?|[0-1]?[0-7]?[0-9](\\.\\d+)?))([ ]|,)*((Y|y):-?(90(\\.0+)?|[0-8]?[0-9](\\.\\d+)?))", "exceptionStackTrace": null, "matches": ["X:-000 Y:-90.0", "X:-000.00 Y:-90.0", "X:-00.0 Y:-90.0", "X:-180.0 Y:-00.0.0", "X:-180.0 Y:-00", "X:-180.0 Y:-00.00", "X:-180.0 Y:-00.", "X:-180.0 Y:-000.0", "X:-180.0 Y:-0.0", "X:-180.0 Y:-90.0.0", "X:-180.0 Y:-90", "X:-180.0 Y:-90.00", "X:-180.0 Y:-90.", "X:-180.0 Y:90.0", "X:-180.0  Y:-90.0", "X:-180.0Y:-90.0", "X:-180 Y:-90.0", "X:-180.00 Y:-90.0", "X:180.0 Y:-90.0", "x:180Y:90", "X:0Y:90", "X:180y:90", "X:180Y:0", "X:180Y:90", "x:-180.0 Y:-90.0", "X:-000.0 Y:-90.0", "X:-180.0,Y:-90.0", "X:-180.0 y:-90.0", "X:-180.0 Y:-00.0", "X:-180.0 Y:-90.0"], "nonMatches": ["X:-000.0.0 Y:-90.0", "X:-000. Y:-90.0", "X:-080.0 Y:-90.0", "X:-0000.0 Y:-90.0", "X:-200.0 Y:-90.0", "X:-180.0 Y:--90.0", "X:-180.0.0 Y:-90.0", "X:-180. Y:-90.0", "X:--180.0 Y:-90.0"]}, {"regex": "([0-1][0-9]|2[0-3]):[0-5][0-9]", "exceptionStackTrace": null, "matches": ["20:00", "00:00"], "nonMatches": ["24:00", "00:60"]}, {"regex": "^([0-9][,]?)*([0-9][0-9])$", "exceptionStackTrace": null, "matches": ["0,0,00", "000", "00", "0,00"], "nonMatches": ["0,,00"]}, {"regex": "^&quot;|&#39;+(.*)+&quot;$|&#39;$", "exceptionStackTrace": null, "matches": ["&#39;evilevil&quot;", "&#39;;&quot;", "&#39;&&quot;", "&#39;#&quot;", "&#39;eVil&quot;", "&#39;EVIL&quot;", "&#39;ev_il&quot;", "&#39;ev il&quot;", "&#39;ev4il&quot;", "&#39;e&quot;", "&#39; &quot;", "&#39;6&quot;", "&#39;_&quot;", "&#39;;evil&quot;", "&#39;&quot;", "&#39;", "&#39;evil&quot;", "&quot;"], "nonMatches": ["&#39evil&quot;"]}, {"regex": "^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])$", "exceptionStackTrace": null, "matches": ["0.0.0.00", "0.0.00.0", "0.00.0.0", "00.0.0.0", "250.0.0.0", "200.0.0.0", "100.0.0.0", "0.250.0.0", "0.200.0.0", "0.100.0.0", "0.0.250.0", "0.0.200.0", "0.0.100.0", "0.0.0.250", "0.0.0.200", "0.0.0.100", "0.0.0.0"], "nonMatches": ["256.0.0.0", "0.256.0.0", "0.0.256.0", "0.0.0.256", "0.0.0.000", "0.0.0.", "0.0.000.0", "0.0..0", "0.000.0.0", "0..0.0", "000.0.0.0", ".0.0.0"]}, {"regex": "^([0-9]{0,5}|[0-9]{0,5}\\.[0-9]{0,3})$", "exceptionStackTrace": null, "matches": ["0.000", "0.", "00000.0", ".0", "00000", ".", "", "0.0", "0"], "nonMatches": ["0.0000", "000000.0", "000000"]}, {"regex": "(\\d{1,3}[\\.]\\d*)[, ]+-?(\\d{1,3}[\\.]\\d*)", "exceptionStackTrace": null, "matches": ["0.0 -0.00", "0.0 -0.", "0.0 -000.0", "0.0 0.0", "0.0  -0.0", "0.0,-0.0", "0.00 -0.0", "0. -0.0", "0000.0 -0.0", "000.0 -0.0", "0. 0.", "0.0 -0.0"], "nonMatches": ["0.0 -0000.0", "0.0 -.0", "0.0 --0.0", "0.0-0.0", ".0 -0.0"]}, {"regex": "^[-+]?[1-9]\\d*\\.?[0]*$", "exceptionStackTrace": null, "matches": ["+10.00", "+10.", "+100", "+100.0", "+1.0", "10.0", "-10.0", "1", "+10.0"], "nonMatches": ["+10..0", "+00.0", "++10.0"]}, {"regex": "^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|11|12|10)-(19[0-9]{2})$", "exceptionStackTrace": null, "matches": ["30-01-1900", "10-01-1900", "31-01-1900", "20-01-1900", "01-10-1900", "01-12-1900", "01-11-1900", "01-01-1900"], "nonMatches": ["32-01-1900", "01-01-19000", "01-01-190", "01-00-1900", "00-01-1900"]}, {"regex": "^([0-2]{0,1})([0-3]{1})(\\.[0-9]{1,2})?$|^([0-1]{0,1})([0-9]{1})(\\.[0-9]{1,2})?$|^-?(24)(\\.[0]{1,2})?$|^([0-9]{1})(\\.[0-9]{1,2})?$", "exceptionStackTrace": null, "matches": ["0.00", "-24", "-24.00", "24.0", "20.0", "00", "00.00", "04.0", "24", "0", "0.0", "-24.0", "00.0"], "nonMatches": ["0.0.0", "0.000", "0.", ".0", "-24.0.0", "-24.000", "-24.", "--24.0", "00.0.0", "00.000", "00.", "000.0", "30.0"]}, {"regex": "^((\\s|[0])\\.(\\d{0,2}\\s{0,2}))?$|^(\\.(\\d\\s){0,2})?$|^(\\s{0,4}[1]{0,1}\\.[0]{0,2}\\s{0,4})?$|^(\\s{0,4}[1]{0,1}\\s{0,4})?$|^(\\s{0,4}[0]{0,4}[1]{0,1}\\s{0,4})?$|^([0]{0,4}\\s{0,4})?$|^(\\s{0,3}[0]{0,3}\\.{1}\\d{0,2}\\s{0,2})?$", "exceptionStackTrace": null, "matches": [" 0.0  ", " 0.0", " 0.00 ", " 0. ", " 00 ", " 000.0 ", "   0.0 ", "0    ", "0", "0000 ", " ", " 01    ", " 01", " 0 ", " 00001 ", "    01 ", "01 ", " 1    ", " 1", "  ", "    1 ", "1 ", " 1.0    ", " 1.0", " 1.00 ", " 1. ", "    1.0 ", "1.0 ", ".0 0 ", ".", " .0   ", " .0  ", " .0", " .00 ", " . ", "", " 0.0 ", "0 ", " 01 ", " 1 ", " 1.0 ", ".0 ", "0.0 ", " .0 "], "nonMatches": [" 0.0  0.0 ", " 0.0   ", " 0.000 ", " 0..0 ", " 0000.0 ", "    0.0 ", "0 0 ", "0     ", "00000 ", " 01  01 ", " 01     ", " 011 ", " 000001 ", "     01 ", " 1  1 ", " 1     ", " 11 ", "     1 ", " 1.0  1.0 ", " 1.0     ", " 1.000 ", " 11.0 ", "     1.0 ", ".0 .0 ", ".0 0 0 ", " .0  .0 ", " .000 "]}, {"regex": "^(?:http|https):\\/\\/[\\w.\\-]+(?:\\.[\\w\\-]+)+[\\w\\-.,@?^=%&:;/~\\\\+#]+$", "exceptionStackTrace": null, "matches": ["http://evil.evil~", "http://evil.evil^", "http://evil.evil\\", "http://evil.evil@", "http://evil.evil?", "http://evil.evil=", "http://evil.evil;", "http://evil.evil:", "http://evil.evil/", "http://evil.evil.", "http://evil.evil-", "http://evil.evil,", "http://evil.evil+", "http://evil.evil&", "http://evil.evil%", "http://evil.evil#", "http://evil.evileVil", "http://evil.evilEVIL", "http://evil.evilev_il", "http://evil.evilev4il", "http://evil.evile", "http://evil.evil6", "http://evil.evil_", "http://evil.evil.evilevil", "http://evil..evil", "http://evil.-evil", "http://evil.eVilevil", "http://evil.EVILevil", "http://evil.ev_ilevil", "http://evil.ev4ilevil", "http://evil.eevil", "http://evil.6evil", "http://evil._evil", "http://evil.evil", "http://..evilevil", "http://-.evilevil", "http://eVil.evilevil", "http://EVIL.evilevil", "http://ev_il.evilevil", "http://ev4il.evilevil", "http://e.evilevil", "http://6.evilevil", "http://_.evilevil", "https://evil.evilevil", "http://evil.evilevil"], "nonMatches": ["http://evil.evilev il", "http://evil.evil ", "http://evilevil", "http://evil.~evil", "http://evil.^evil", "http://evil.\\evil", "http://evil.@evil", "http://evil.?evil", "http://evil.=evil", "http://evil.;evil", "http://evil.:evil", "http://evil./evil", "http://evil.,evil", "http://evil.+evil", "http://evil.&evil", "http://evil.%evil", "http://evil.#evil", "http://evil.ev ilevil", "http://evil. evil", "http://~.evilevil", "http://^.evilevil", "http://\\.evilevil", "http://@.evilevil", "http://?.evilevil", "http://=.evilevil", "http://;.evilevil", "http://:.evilevil", "http:///.evilevil", "http://,.evilevil", "http://+.evilevil", "http://&.evilevil", "http://%.evilevil", "http://#.evilevil", "http://ev il.evilevil", "http:// .evilevil", "http://.evilevil"]}, {"regex": "^((0?[13578]|10|12)(-|\\/)(([1-9])|(0[1-9])|([12])([0-9]?)|(3[01]?))(-|\\/)((19)([2-9])(\\d{1})|(20)([01])(\\d{1})|([8901])(\\d{1}))|(0?[2469]|11)(-|\\/)(([1-9])|(0[1-9])|([12])([0-9]?)|(3[0]?))(-|\\/)((19)([2-9])(\\d{1})|(20)([01])(\\d{1})|([8901])(\\d{1})))$", "exceptionStackTrace": null, "matches": ["09-3-1920", "09-2-1920", "09-10-1920", "09-1-90", "09-1-80", "09-1-00", "09-1-2000", "06-1-1920", "04-1-1920", "02-1-1920", "08-3-1920", "08-30-1920", "08-2-1920", "08-10-1920", "08-1-90", "08-1-80", "08-1-00", "08-1-2000", "07-1-1920", "05-1-1920", "03-1-1920", "01-1-1920", "9/1-1920", "9-3-1920", "9-2-1920", "9-01-1920", "9-1/1920", "9-1-10", "9-1-2010", "9-1-1920", "8/1-1920", "8-3-1920", "8-2-1920", "8-01-1920", "8-1/1920", "8-1-10", "8-1-2010", "8-1-1920", "11-1-1920", "09/1-1920", "09-30-1920", "09-20-1920", "09-01-1920", "09-1/1920", "09-1-10", "09-1-2010", "09-1-1920", "12-1-1920", "10-1-1920", "08/1-1920", "08-31-1920", "08-20-1920", "08-01-1920", "08-1/1920", "08-1-10", "08-1-2010", "08-1-1920"], "nonMatches": ["09-300-1920", "09-200-1920", "09-00-1920", "09-1-100", "09-1-1", "09-1-20", "09-1-20100", "09-1-201", "09-1-2020", "09-1-19200", "09-1-192", "09-1-1900", "09-0-1920", "009-1-1920", "08-311-1920", "08-32-1920", "08-200-1920", "08-00-1920", "08-1-100", "08-1-1", "08-1-20", "08-1-20100", "08-1-201", "08-1-2020", "08-1-19200", "08-1-192", "08-1-1900", "08-0-1920", "00-1-1920", "008-1-1920"]}, {"regex": "^\\d{2,6}-\\d{2}-\\d$", "exceptionStackTrace": null, "matches": ["000000-00-0", "00-00-0"], "nonMatches": ["00-000-0", "00-0-0", "0000000-00-0", "0-00-0"]}, {"regex": "CZ\\d{2}[ ]\\d{4}[ ]\\d{4}[ ]\\d{4}[ ]\\d{4}[ ]\\d{4}|CZ\\d{22}", "exceptionStackTrace": null, "matches": ["CZ00000000000000000000000", "CZ00 0000 0000 0000 0000 00000", "CZ0000000000000000000000", "CZ00 0000 0000 0000 0000 0000"], "nonMatches": ["CZ000000000000000000000", "CZ00 0000 0000 0000 0000 000", "CZ00 0000 0000 0000 00000 0000", "CZ00 0000 0000 0000 000 0000", "CZ00 0000 0000 00000 0000 0000", "CZ00 0000 0000 000 0000 0000", "CZ00 0000 00000 0000 0000 0000", "CZ00 0000 000 0000 0000 0000", "CZ00 00000 0000 0000 0000 0000", "CZ00 000 0000 0000 0000 0000", "CZ000 0000 0000 0000 0000 0000", "CZ0 0000 0000 0000 0000 0000"]}, {"regex": "SK\\d{2}[ ]\\d{4}[ ]\\d{4}[ ]\\d{4}[ ]\\d{4}[ ]\\d{4}|SK\\d{22}", "exceptionStackTrace": null, "matches": ["SK00000000000000000000000", "SK00 0000 0000 0000 0000 00000", "SK0000000000000000000000", "SK00 0000 0000 0000 0000 0000"], "nonMatches": ["SK000000000000000000000", "SK00 0000 0000 0000 0000 000", "SK00 0000 0000 0000 00000 0000", "SK00 0000 0000 0000 000 0000", "SK00 0000 0000 00000 0000 0000", "SK00 0000 0000 000 0000 0000", "SK00 0000 00000 0000 0000 0000", "SK00 0000 000 0000 0000 0000", "SK00 00000 0000 0000 0000 0000", "SK00 000 0000 0000 0000 0000", "SK000 0000 0000 0000 0000 0000", "SK0 0000 0000 0000 0000 0000"]}, {"regex": "AD\\d{2}[ ]\\d{4}[ ]\\d{4}[ ]\\d{4}[ ]\\d{4}[ ]\\d{4}|AD\\d{22}", "exceptionStackTrace": null, "matches": ["AD00000000000000000000000", "AD00 0000 0000 0000 0000 00000", "AD0000000000000000000000", "AD00 0000 0000 0000 0000 0000"], "nonMatches": ["AD000000000000000000000", "AD00 0000 0000 0000 0000 000", "AD00 0000 0000 0000 00000 0000", "AD00 0000 0000 0000 000 0000", "AD00 0000 0000 00000 0000 0000", "AD00 0000 0000 000 0000 0000", "AD00 0000 00000 0000 0000 0000", "AD00 0000 000 0000 0000 0000", "AD00 00000 0000 0000 0000 0000", "AD00 000 0000 0000 0000 0000", "AD000 0000 0000 0000 0000 0000", "AD0 0000 0000 0000 0000 0000"]}, {"regex": "ES\\d{2}[ ]\\d{4}[ ]\\d{4}[ ]\\d{4}[ ]\\d{4}[ ]\\d{4}|ES\\d{22}", "exceptionStackTrace": null, "matches": ["ES00000000000000000000000", "ES00 0000 0000 0000 0000 00000", "ES0000000000000000000000", "ES00 0000 0000 0000 0000 0000"], "nonMatches": ["ES000000000000000000000", "ES00 0000 0000 0000 0000 000", "ES00 0000 0000 0000 00000 0000", "ES00 0000 0000 0000 000 0000", "ES00 0000 0000 00000 0000 0000", "ES00 0000 0000 000 0000 0000", "ES00 0000 00000 0000 0000 0000", "ES00 0000 000 0000 0000 0000", "ES00 00000 0000 0000 0000 0000", "ES00 000 0000 0000 0000 0000", "ES000 0000 0000 0000 0000 0000", "ES0 0000 0000 0000 0000 0000"]}, {"regex": "SE\\d{2}[ ]\\d{4}[ ]\\d{4}[ ]\\d{4}[ ]\\d{4}[ ]\\d{4}|SE\\d{22}", "exceptionStackTrace": null, "matches": ["SE00000000000000000000000", "SE00 0000 0000 0000 0000 00000", "SE0000000000000000000000", "SE00 0000 0000 0000 0000 0000"], "nonMatches": ["SE000000000000000000000", "SE00 0000 0000 0000 0000 000", "SE00 0000 0000 0000 00000 0000", "SE00 0000 0000 0000 000 0000", "SE00 0000 0000 00000 0000 0000", "SE00 0000 0000 000 0000 0000", "SE00 0000 00000 0000 0000 0000", "SE00 0000 000 0000 0000 0000", "SE00 00000 0000 0000 0000 0000", "SE00 000 0000 0000 0000 0000", "SE000 0000 0000 0000 0000 0000", "SE0 0000 0000 0000 0000 0000"]}, {"regex": "string pattern = @&quot;(?<=<html>).(\\n|\\r|[^<]|<(?!/html>))*&quot;", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\n"}, "matches": [], "nonMatches": []}, {"regex": "freg", "exceptionStackTrace": null, "matches": ["freg"], "nonMatches": []}, {"regex": "^(5[1-5]\\d{2})\\d{12}|(4\\d{3})(\\d{12}|\\d{9})$", "exceptionStackTrace": null, "matches": ["51000000000000000", "4000000000000", "4000000000000000", "5100000000000000"], "nonMatches": ["40000000000000", "400000000000", "40000000000000000", "400000000000000", "510000000000000", "5000000000000000"]}, {"regex": "^(([1-9])|(0[1-9])|(1[0-2]))\\/(([0-9])|([0-2][0-9])|(3[0-1]))\\/(([0-9][0-9])|([1-2][0,9][0-9][0-9]))$", "exceptionStackTrace": null, "matches": ["1/0/1000", "1/0/1,00", "10/0/00", "01/0/00", "1/30/00", "1/00/00", "1/0/1900", "1/0/00"], "nonMatches": ["13/0/00", "00/0/00", "1/32/00", "1/0/1100", "1/0/0900", "0/0/00"]}, {"regex": "^(([01]?\\d?\\d|2[0-4]\\d|25[0-5])\\.){3}([01]?\\d?\\d|2[0-4]\\d|25[0-5])\\/(\\d{1}|[0-2]{1}\\d{1}|3[0-2])$", "exceptionStackTrace": null, "matches": ["250.200.200.100/0", "100.100.100.10/0", "100.100.100.00/0", "100.100.100.000/0", "10.100.100.100/0", "00.100.100.100/0", "200.100.100.100/0", "000.100.100.100/0", "250.250.250.0/0", "200.250.250.0/0", "0.250.250.250/0", "0.250.250.200/0", "0.250.250.0/30", "0.250.250.0/00", "0.250.250.0/0", "250.250.250.100/0", "200.200.200.100/0", "100.100.100.250/0", "100.100.100.200/0", "100.100.100.100/30", "100.100.100.100/00", "100.100.100.100/0"], "nonMatches": ["256.250.250.100/0", "100.100.100.256/0", "100.100.100.100/33", "100.100.100.100/000", "100.100.100.100/", "100.100.100.1000/0", "100.100.100.1100/0", "100.100.100.100.100/0", "100.100.100/0", "1000.100.100.100/0", "1100.100.100.100/0"]}, {"regex": "kamagrahub", "exceptionStackTrace": null, "matches": ["kamagrahub"], "nonMatches": []}, {"regex": "http://www.somyatrans.com", "exceptionStackTrace": null, "matches": ["http://wwwasomyatransAcom", "http://wwwasomyatrans:com", "http://wwwasomyatrans0com", "http://wwwasomyatrans/com", "http://wwwasomyatrans com", "http://wwwAsomyatransacom", "http://www:somyatransacom", "http://www0somyatransacom", "http://www/somyatransacom", "http://www somyatransacom", "http://wwwasomyatransacom"], "nonMatches": []}, {"regex": "^\\D?(\\d{3})\\D?\\D?(\\d{3})\\D?(\\d{4})$", "exceptionStackTrace": null, "matches": ["a000aa0000000", "a000aa000_0000", "a000aa000A0000", "a000aa000 0000", "a000a_000a0000", "a000aA000a0000", "a000a 000a0000", "a000a000a0000", "a000_a000a0000", "a000Aa000a0000", "a000 a000a0000", "000aa000a0000", "_000aa000a0000", "A000aa000a0000", " 000aa000a0000", "0000000000", "a000aa000a0000"], "nonMatches": ["a000aa000a00000", "a000aa000a000", "a000aa000aa0000", "a000aa00000000", "a000aa0000a0000", "a000aa00a0000", "a000a0000a0000", "a000aaa000a0000", "a0000a000a0000", "a0000aa000a0000", "a00aa000a0000", "aa000aa000a0000", "0000aa000a0000"]}, {"regex": "^([\\w\\d\\-\\.]+)@{1}(([\\w\\d\\-]{1,67})|([\\w\\d\\-]+\\.[\\w\\d\\-]{1,67}))\\.(([a-zA-Z\\d]{2,4})(\\.[a-zA-Z\\d]{2})?)$", "exceptionStackTrace": null, "matches": ["evil@evil.-------------------------------------------------------------------.00.00", "evil@evil.a.00.00", "evil@evil._.00.00", "evil@evil.A.00.00", "evil@evil.0.00.00", "evil@-.-.00.00", "evil@eVil.-.00.00", "evil@EVIL.-.00.00", "evil@ev_il.-.00.00", "evil@ev4il.-.00.00", "evil@e.-.00.00", "evil@6.-.00.00", "evil@_.-.00.00", "evil@-.00.00.00", "evil@-.00.000", "evil@-.00.a0", "evil@-.00.A0", "evil@-.00000.00", "evil@-.0000.00", "evil@-.0.00", "evil@-.a0.00", "evil@-.A0.00", "evil@--------------------------------------------------------------------.00.00", "evil@-------------------------------------------------------------------.00.00", "evil@a.00.00", "evil@_.00.00", "evil@A.00.00", "evil@0.00.00", ".@-.00.00", "-@-.00.00", "eVil@-.00.00", "EVIL@-.00.00", "ev_il@-.00.00", "ev4il@-.00.00", "e@-.00.00", "6@-.00.00", "_@-.00.00", "evil@evil.-.00", "evil@-.00", "evil@evil.-.00.00", "evil@-.00.00"], "nonMatches": ["evil@evil.--------------------------------------------------------------------.00.00", "evil@evil..00.00", "evil@@.-.00.00", "evil@..-.00.00", "evil@ev il.-.00.00", "evil@ .-.00.00", "evil@.-.00.00", "evil@-.00.0", "evil@.00.00", "evil@@-.00.00", "evil-.00.00", "@@-.00.00", "ev il@-.00.00", " @-.00.00", "@-.00.00"]}, {"regex": "\\d{2}[.\\-]\\d{2}[.\\-]\\d{2,4}", "exceptionStackTrace": null, "matches": ["00-00-00000", "00-00-0000", "00-00.00", "00.00-00", "000-00-00", "00-00-00"], "nonMatches": ["00-00-0", "00-000-00", "00-0-00", "0-00-00"]}, {"regex": "^[A-Za-z]{6}[0-9LMNPQRSTUV]{2}[A-Za-z]{1}[0-9LMNPQRSTUV]{2}[A-Za-z]{1}[0-9LMNPQRSTUV]{3}[A\n-Za-z]{1}$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (bad range): Invalid range: \n-Z"}, "matches": [], "nonMatches": []}, {"regex": "das", "exceptionStackTrace": null, "matches": ["das"], "nonMatches": []}, {"regex": "9[0-9]", "exceptionStackTrace": null, "matches": ["90"], "nonMatches": []}, {"regex": "3", "exceptionStackTrace": null, "matches": ["3"], "nonMatches": []}, {"regex": "^[1-9]0?$", "exceptionStackTrace": null, "matches": ["1", "10"], "nonMatches": ["100", "00"]}, {"regex": "^([a-zA-z]:((\\\\([-*\\.*\\w+\\s+\\d+]+)|(\\w+)\\\\)+)(\\w+.zip)|(\\w+.ZIP))$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (bad range): Invalid range: A-z"}, "matches": [], "nonMatches": []}, {"regex": "^(?:\\(\\+?44\\)\\s?|\\+?44 ?)?(?:0|\\(0\\))?\\s?(?:(?:1\\d{3}|7[1-9]\\d{2}|20\\s?[78])\\s?\\d\\s?\\d{2}[ -]?\\d{3}|2\\d{2}\\s?\\d{3}[ -]?\\d{4})$", "exceptionStackTrace": null, "matches": ["+440 1000 0 00-000", "44 0 1000 0 00-000", "(+44) 0 200 0000000", "(+44) 0 200 000 0000", "(+44) 0 200000-0000", "(+44) 0 20 7 0 00-000", "(+44) 0 208 0 00-000", "(+44) 0 1000 0 00000", "(+44) 0 1000 0 00 000", "(+44) 0 1000 000-000", "(+44) 0 10000 00-000", "(+44) 01000 0 00-000", "(+44)  1000 0 00-000", "0 1000 0 00-000", "(+44)0 1000 0 00-000", "(44) 0 1000 0 00-000", "2000000000", "208000000", "7100000000", "1000000000", "+44 0 1000 0 00-000", "(+44) (0) 1000 0 00-000", "(+44) 0 200 000-0000", "(+44) 0 20 8 0 00-000", "(+44) 0 7100 0 00-000", "(+44) 0 1000 0 00-000"], "nonMatches": ["+44  0 1000 0 00-000", "++44 0 1000 0 00-000", "(+44) 0 200 000-00000", "(+44) 0 200 000-000", "(+44) 0 200 000--0000", "(+44) 0 200 0000-0000", "(+44) 0 200 00-0000", "(+44) 0 200  000-0000", "(+44) 0 2000 000-0000", "(+44) 0 20 000-0000", "(+44) 0 20 0 0 00-000", "(+44) 0 20  8 0 00-000", "(+44) 0 71000 0 00-000", "(+44) 0 710 0 00-000", "(+44) 0 7000 0 00-000", "(+44) 0 1000 0 00-0000", "(+44) 0 1000 0 00-00", "(+44) 0 1000 0 00--000", "(+44) 0 1000 0 000-000", "(+44) 0 1000 0 0-000", "(+44) 0 1000 0  00-000", "(+44) 0 1000  0 00-000", "(+44) 0 10000 0 00-000", "(+44) 0 100 0 00-000", "(+44) 0  1000 0 00-000", "(+44) 00 1000 0 00-000", "(+44) (+44) 0 1000 0 00-000", "(+44)  0 1000 0 00-000", "(++44) 0 1000 0 00-000"]}, {"regex": "^(?:[0-1][0-9]|[2][0-3]):?(?:[0-5][0-9]):?(?:[0-5][0-9]|60)|2400|24:00$", "exceptionStackTrace": null, "matches": ["00:0000", "0000:00", "200000", "000060", "000000", "24:00", "2400", "20:00:00", "00:00:60", "00:00:00"], "nonMatches": ["24:00:00", "00:00::00", "00:60:00", "00::00:00"]}, {"regex": "^P(([0-9]+([.,][0-9]*)?Y)?([0-9]+([.,][0-9]*)?M)?([0-9]+([.,][0-9]*)?D)?T?([0-9]+([.,][0-9]*)?H)?([0-9]+([.,][0-9]*)?M)?([0-9]+([.,][0-9]*)?S)?)|\\d{4}-?(0[1-9]|11|12)-?(?:[0-2]\\d|30|31)T((?:[0-1][0-9]|[2][0-3]):?(?:[0-5][0-9]):?(?:[0-5][0-9]|60)|2400|24:00)$", "exceptionStackTrace": null, "matches": ["0000-01-00T00:0000", "0000-01-00T0000:00", "0000-0100T00:00:00", "000001-00T00:00:00", "00000-01-00T00:00:00", "P0,0Y0,0M0,0DT0,0H0,0M0,0S0,0S", "P0,0Y0,0M0,0DT0,0H0,0M", "P0,0Y0,0M0,0DT0,0H0,0M0,0,0S", "P0,0Y0,0M0,0DT0,0H0,0M0S", "P0,0Y0,0M0,0DT0,0H0,0M0,00S", "P0,0Y0,0M0,0DT0,0H0,0M0,S", "P0,0Y0,0M0,0DT0,0H0,0M0.0S", "P0,0Y0,0M0,0DT0,0H0,0M00,0S", "P0,0Y0,0M0,0DT0,0H0,0M,0S", "P0,0Y0,0M0,0DT0,0H0,0M0,0M0,0S", "P0,0Y0,0M0,0DT0,0H0,0S", "P0,0Y0,0M0,0DT0,0H0,0,0M0,0S", "P0,0Y0,0M0,0DT0,0H0M0,0S", "P0,0Y0,0M0,0DT0,0H0,00M0,0S", "P0,0Y0,0M0,0DT0,0H0,M0,0S", "P0,0Y0,0M0,0DT0,0H0.0M0,0S", "P0,0Y0,0M0,0DT0,0H00,0M0,0S", "P0,0Y0,0M0,0DT0,0H,0M0,0S", "P0,0Y0,0M0,0DT0,0H0,0H0,0M0,0S", "P0,0Y0,0M0,0DT0,0M0,0S", "P0,0Y0,0M0,0DT0,0,0H0,0M0,0S", "P0,0Y0,0M0,0DT0H0,0M0,0S", "P0,0Y0,0M0,0DT0,00H0,0M0,0S", "P0,0Y0,0M0,0DT0,H0,0M0,0S", "P0,0Y0,0M0,0DT0.0H0,0M0,0S", "P0,0Y0,0M0,0DT00,0H0,0M0,0S", "P0,0Y0,0M0,0DT,0H0,0M0,0S", "P0,0Y0,0M0,0DTT0,0H0,0M0,0S", "P0,0Y0,0M0,0D0,0H0,0M0,0S", "P0,0Y0,0M0,0D0,0DT0,0H0,0M0,0S", "P0,0Y0,0MT0,0H0,0M0,0S", "P0,0Y0,0M0,0,0DT0,0H0,0M0,0S", "P0,0Y0,0M0DT0,0H0,0M0,0S", "P0,0Y0,0M0,00DT0,0H0,0M0,0S", "P0,0Y0,0M0,DT0,0H0,0M0,0S", "P0,0Y0,0M0.0DT0,0H0,0M0,0S", "P0,0Y0,0M00,0DT0,0H0,0M0,0S", "P0,0Y0,0M,0DT0,0H0,0M0,0S", "P0,0Y0,0M0,0M0,0DT0,0H0,0M0,0S", "P0,0Y0,0DT0,0H0,0M0,0S", "P0,0Y0,0,0M0,0DT0,0H0,0M0,0S", "P0,0Y0M0,0DT0,0H0,0M0,0S", "P0,0Y0,00M0,0DT0,0H0,0M0,0S", "P0,0Y0,M0,0DT0,0H0,0M0,0S", "P0,0Y0.0M0,0DT0,0H0,0M0,0S", "P0,0Y00,0M0,0DT0,0H0,0M0,0S", "P0,0Y,0M0,0DT0,0H0,0M0,0S", "P0,0Y0,0Y0,0M0,0DT0,0H0,0M0,0S", "P0,0M0,0DT0,0H0,0M0,0S", "P0,0,0Y0,0M0,0DT0,0H0,0M0,0S", "P0Y0,0M0,0DT0,0H0,0M0,0S", "P0,00Y0,0M0,0DT0,0H0,0M0,0S", "P0,Y0,0M0,0DT0,0H0,0M0,0S", "P0.0Y0,0M0,0DT0,0H0,0M0,0S", "P00,0Y0,0M0,0DT0,0H0,0M0,0S", "P,0Y0,0M0,0DT0,0H0,0M0,0S", "00001200T000000", "00001100T000000", "00000131T000000", "00000130T000000", "00000100T24:00", "00000100T2400", "00000100T200000", "00000100T000060", "00000100T000000", "P", "0000-12-00T00:00:00", "0000-11-00T00:00:00", "0000-01-31T00:00:00", "0000-01-30T00:00:00", "0000-01-00T24:00", "0000-01-00T2400", "0000-01-00T20:00:00", "0000-01-00T00:00:60", "0000-01-00T00:00:00", "P0,0Y0,0M0,0DT0,0H0,0M0,0S"], "nonMatches": ["0000-01-00T24:00:00", "0000-01-00T00:00::00", "0000-01-00T00:60:00", "0000-01-00T00::00:00", "0000-01--00T00:00:00", "0000-00-00T00:00:00", "0000--01-00T00:00:00", "000-01-00T00:00:00"]}, {"regex": "((20)[0-9]{2})-((0[1-9])|(1[0-2]))-((3[0-1])|([0-2][1-9]|([1-2][0-9])))\\s((2[0-3])|[0-1][0-9]):[0-5][0-9]", "exceptionStackTrace": null, "matches": ["2000-01-31 20:00", "2000-10-30 20:00", "2000-01-10 20:00", "2000-01-01 20:00", "2000-01-30 00:00", "2000-01-30 20:00"], "nonMatches": ["2000-13-30 20:00", "2000-01-00 20:00", "2000-01-30 20:60", "2000-01-30 24:00", "2000-01-32 20:00", "2000-00-30 20:00", "20000-01-30 20:00", "200-01-30 20:00"]}, {"regex": "gbfthf", "exceptionStackTrace": null, "matches": ["gbfthf"], "nonMatches": []}, {"regex": "^((\\+)?(\\d{2}[-]))?([0])?(\\d{10}){1}?$", "exceptionStackTrace": null, "matches": ["+00-0000000000", "00000000000", "00-00000000000", "0000000000", "+00-00000000000"], "nonMatches": ["+00-000000000000000000000", "+00-0", "+00-000000000000", "+00-+00-00000000000", "+000-00000000000", "+0-00000000000", "++00-00000000000"]}, {"regex": "(((0[1-9]|[12][0-9]|3[01])([-./])(0[13578]|10|12)([-./])(\\d{4}))|(([0][1-9]|[12][0-9]|30)([-./])(0[469]|11)([-./])(\\d{4}))|((0[1-9]|1[0-9]|2[0-8])([-./])(02)([-./])(\\d{4}))|((29)(\\.|-|\\/)(02)([-./])([02468][048]00))|((29)([-./])(02)([-./])([13579][26]00))|((29)([-./])(02)([-./])([0-9][0-9][0][48]))|((29)([-./])(02)([-./])([0-9][0-9][2468][048]))|((29)([-./])(02)([-./])([0-9][0-9][13579][26])))", "exceptionStackTrace": null, "matches": ["29/02/0092", "29/02/0076", "29/02/0056", "29/02/0036", "29/02/0016", "29/02.0096", "29/02-0096", "29.02/0096", "29-02/0096", "29/02/0084", "29/02/0080", "29/02/0068", "29/02/0048", "29/02/0028", "29/02.0088", "29/02-0088", "29.02/0088", "29-02/0088", "29/02/0004", "29/02.0008", "29/02-0008", "29.02/0008", "29-02/0008", "29/02/9200", "29/02/7600", "29/02/5600", "29/02/3600", "29/02/1600", "29/02.9600", "29/02-9600", "29.02/9600", "29-02/9600", "29.02/8400", "29.02/8000", "29.02/6800", "29.02/4800", "29.02/2800", "29.02/0800", "29.02.8800", "29.02-8800", "29/02/0000", "01/02/00000", "01/02.0000", "01/02-0000", "01.02/0000", "01-02/0000", "10/09/0000", "01/09/00000", "01/09.0000", "01/09-0000", "01/06/0000", "01/04/0000", "01.09/0000", "01-09/0000", "30/08/0000", "10/08/0000", "01/08/00000", "01/08.0000", "01/08-0000", "01/07/0000", "01/05/0000", "01/03/0000", "01/01/0000", "01.08/0000", "01-08/0000", "29/02/0096", "29/02/0088", "29/02/0008", "29/02/9600", "29/02/8800", "29-02/8800", "29.02/8800", "20/02/0000", "10/02/0000", "01/02/0000", "30/09/0000", "20/09/0000", "01/11/0000", "01/09/0000", "31/08/0000", "20/08/0000", "01/12/0000", "01/10/0000", "01/08/0000"], "nonMatches": ["29/02/0090", "29/02/0006", "29/02/0081", "29/02/9000", "29/02/0600", "29.02/8100", "29.02/1800", "01/02/000", "00/02/0000", "01/09/000", "00/09/0000", "32/08/0000", "01/08/000", "01/00/0000", "00/08/0000"]}, {"regex": "^[0-9]$|[1-9]+[0-9]$", "exceptionStackTrace": null, "matches": ["110", "10", "0"], "nonMatches": ["00"]}, {"regex": "\\(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\)", "exceptionStackTrace": null, "matches": ["(0.0.0.000)", "(0.0.000.0)", "(0.000.0.0)", "(000.0.0.0)", "(0.0.0.0)"], "nonMatches": ["(0.0.0.0000)", "(0.0.0.)", "(0.0.0000.0)", "(0.0..0)", "(0.0000.0.0)", "(0..0.0)", "(0000.0.0.0)", "(.0.0.0)"]}, {"regex": "^-?[0-9]{0,2}(\\.[0-9]{1,2})?$|^-?(100)(\\.[0]{1,2})?$", "exceptionStackTrace": null, "matches": ["-100", "-100.00", "100.0", "-0", "-0.00", "-00.0", "-.0", "0.0", "100", "", "-100.0", "-0.0"], "nonMatches": ["-100.0.0", "-100.000", "-100.", "--100.0", "-0.0.0", "-0.000", "-0.", "-000.0", "--0.0"]}, {"regex": "^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character range \\w-\\."}, "matches": []}, {"regex": "^[1-9][0-9][0-9][0-9][0-9][0-9]$", "exceptionStackTrace": null, "matches": ["100000"], "nonMatches": ["000000"]}, {"regex": "^[0-9]\\d{2,4}-\\d{6,8}$", "exceptionStackTrace": null, "matches": ["000-00000000", "00000-000000", "000-000000"], "nonMatches": ["000-000000000", "000-00000", "000000-000000", "00-000000"]}, {"regex": "^\\s*[a-zA-Z0-9,\\s]+\\s*$", "exceptionStackTrace": null, "matches": [" evil  ", " evil", " , ", " eVil ", " EVIL ", " ev il ", " ev4il ", " e ", "   ", " 6 ", "  ", "  evil ", "evil ", "evil", " evil "], "nonMatches": [" ev_il ", " _ "]}, {"regex": "^(([1-9]{1}(\\d+)?)(\\.\\d+)?)|([0]\\.(\\d+)?([1-9]{1})(\\d+)?)$", "exceptionStackTrace": null, "matches": ["0.0100", "0.01", "0.0110", "0.0010", "0.10", "10.0.0", "10", "10.00", "10.", "100.0", "1.0", "110.0", "0.1", "1", "0.010", "10.0"], "nonMatches": ["0.00", "0.000", "0.0", "00.0"]}, {"regex": "^[-+]?(\\d?\\d?\\d?,?)?(\\d{3}\\,?)*(\\.\\d{1,2})?$", "exceptionStackTrace": null, "matches": ["+000,000,", "+000,000,.00", "+000,000.0", "+000,000,000,.0", "+000,.0", "+000000,.0", "+0000,000,.0", "+00,000,.0", "000,000,.0", "-000,000,.0", "", "+000,000,.0"], "nonMatches": ["+000,000,.0.0", "+000,000,.000", "+000,000,.", "+000,000,,.0", "+000,0000,.0", "+000,00,.0", "+000,,000,.0", "++000,000,.0"]}, {"regex": "[^\\r\\n]|(?:\\r(?!\\n))|(?:(?<!\\r)\\n)", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\r"}, "matches": [], "nonMatches": []}, {"regex": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d.*)(?=.*\\W.*)[a-zA-Z0-9\\S]{8,15}$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["aaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaa", "aaaaaaa", "_aaaaaaa", "Aaaaaaaa", "0aaaaaaa", " aaaaaaa", "aaaaaaaa"]}, {"regex": "^(?=(.*[a-zA-Z].*){2,})(?=.*\\d.*)(?=.*\\W.*)[a-zA-Z0-9\\S]{8,15}$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["aaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaa", "aaaaaaa", "_aaaaaaa", "Aaaaaaaa", "0aaaaaaa", " aaaaaaa", "aaaaaaaa"]}, {"regex": "\\s*[;,]\\s*(?!(?<=(?:^|[;,])\\s*&quot;(?:[^&quot;]|&quot;&quot;|\\\\&quot;)*[;,]\\s*)(?:[^&quot;]|&quot;&quot;|\\\\&quot;)*&quot;\\s*(?:[;,]|$))", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "look-behind requires fixed-width pattern"}, "matches": []}, {"regex": "^[0-9]{2,3}-? ?[0-9]{6,7}$", "exceptionStackTrace": null, "matches": ["00- 0000000", "00-000000", "00 000000", "000- 000000", "00000000", "00- 000000"], "nonMatches": ["00- 00000000", "00- 00000", "00-  000000", "00-- 000000", "0000- 000000", "0- 000000"]}, {"regex": "^((02[0-9]{2})|(0[8-9][0-9]{2})|(1[0-9]{3})|(2[0-7][0-9]{2})|(28[0-8][0-9])|(289[0-8])|(29[0-9]{2})|([3-5][0-9]{3})|(6[0-6][0-9]{2})|(67[0-8][0-9])|(679[0-7])|(6[8-9][0-9]{2})|([7-9][0-9]{3}))$", "exceptionStackTrace": null, "matches": ["7000", "6800", "6790", "6700", "6000", "3000", "2900", "2890", "2800", "2000", "1000", "0800", "0200"], "nonMatches": ["70000", "700", "68000", "680", "6798", "60000", "600", "30000", "300", "29000", "290", "2899", "20000", "200", "10000", "100", "08000", "080", "0000", "02000", "020"]}, {"regex": "urn:[a-z0-9]{1}[a-z0-9\\-]{1,31}:[a-z0-9_,:=@;!&#39;%/#\\(\\)\\+\\-\\.\\$\\*\\?]+", "exceptionStackTrace": null, "matches": ["urn:0-:@", "urn:0-:?", "urn:0-:=", "urn:0-:;", "urn:0-::", "urn:0-:/", "urn:0-:.", "urn:0-:-", "urn:0-:,", "urn:0-:+", "urn:0-:*", "urn:0-:)", "urn:0-:(", "urn:0-:&", "urn:0-:%", "urn:0-:$", "urn:0-:#", "urn:0-:!", "urn:0-:eVil", "urn:0-:ev_il", "urn:0-:ev il", "urn:0-:ev4il", "urn:0-:e", "urn:0-:6", "urn:0-:_", "urn:0-------------------------------:evil", "urn:0a:evil", "urn:00:evil", "urn:00-:evil", "urn:a-:evil", "urn:0-:evil"], "nonMatches": ["urn:0-:EVIL", "urn:0-: ", "urn:0-:", "urn:0--------------------------------:evil", "urn:0:evil", "urn:-:evil"]}, {"regex": "^\\d{3,3}\\.\\d{0,2}$|^E\\d{3,3}\\.\\d{0,2}$", "exceptionStackTrace": null, "matches": ["E000.00", "000.00", "E000.", "000.", "E000.0", "000.0"], "nonMatches": ["E000.000", "E0000.0", "E00.0", "000.000", "0000.0", "00.0"]}, {"regex": "iP(?:[ao]d|hone)", "exceptionStackTrace": null, "matches": ["iPad", "iPhone", "iPod"], "nonMatches": ["iPbd"]}, {"regex": "5", "exceptionStackTrace": null, "matches": ["5"], "nonMatches": []}, {"regex": "^[A-Z]-\\d{3}(?>\\d|-[A-Z])$|^[A-Z]{2,3}-\\d{3}$|^\\d{3}-[A-Z]{3}$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?>"}, "matches": []}, {"regex": "^(?>[A-Z]{2}|\\d\\d)-(?>[A-Z]{2}|\\d\\d)-(?<!\\d\\d-\\d\\d-)\\d\\d$|^(?>[A-Z]{2}|\\d\\d)-(?>[A-Z]{2}|\\d\\d)-(?<![A-Z]{2}-[A-Z]{2}-)[A-Z]{2}$|^\\d\\d-[A-Z]{3}-\\d$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?>"}, "matches": []}, {"regex": "^[0-3]{1}(?(?<=3)[01]{1}|\\d)([-.\\/]{1})[01]{1}(?(?<=1)[0-2]{1}|\\d)\\1(\\d{2}|\\d{4})$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character in group name '?<=3'"}, "matches": []}, {"regex": "^(?:[^@<>;:,.()\\s\\[\\]\\\\]+(?:\\.(?!@))?)+@(?:[\\w\\-]+(?:\\.(?!\\.))?)+\\.[A-Za-z]{2,6}$", "exceptionStackTrace": null, "matches": ["evil@evil.aa"], "nonMatches": ["evil.@evil..aaaaaaa", "evil.@evil..aaaaaa", "evil.@evil..a", "evil.@evil..Aa", "evil.@evil.evil..aa", "evil.@.aa", "evil.@evil...aa", "evil.@evil.aa", "evil.@]..aa", "evil.@\\..aa", "evil.@[..aa", "evil.@@..aa", "evil.@>..aa", "evil.@<..aa", "evil.@;..aa", "evil.@:..aa", "evil.@...aa", "evil.@-..aa", "evil.@,..aa", "evil.@)..aa", "evil.@(..aa", "evil.@eVil..aa", "evil.@EVIL..aa", "evil.@ev_il..aa", "evil.@ev il..aa", "evil.@ev4il..aa", "evil.@e..aa", "evil.@ ..aa", "evil.@6..aa", "evil.@_..aa", "evil.@..aa", "evil.evil.@evil..aa", "@evil..aa", "evil..@evil..aa", "evil@evil..aa", "].@evil..aa", "\\.@evil..aa", "[.@evil..aa", "@.@evil..aa", ">.@evil..aa", "<.@evil..aa", ";.@evil..aa", ":.@evil..aa", "..@evil..aa", "-.@evil..aa", ",.@evil..aa", ").@evil..aa", "(.@evil..aa", "eVil.@evil..aa", "EVIL.@evil..aa", "ev_il.@evil..aa", "ev il.@evil..aa", "ev4il.@evil..aa", "e.@evil..aa", " .@evil..aa", "6.@evil..aa", "_.@evil..aa", ".@evil..aa", "evil.@evil..aa"]}, {"regex": "^([1-9]|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])$", "exceptionStackTrace": null, "matches": ["250", "200", "100", "10", "1"], "nonMatches": ["256", "1000", "00", "0"]}, {"regex": "^([a-zA-Z]\\:) (\\\\{1}| ((\\\\{1}) [^\\\\] ([^/:*?&lt;&gt;&quot;|]*(?&lt;![ ])))+)$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?&"}, "matches": []}, {"regex": "^([a-zA-Z]\\:)(\\\\{1}|((\\\\{1})[^\\\\/:*?&lt;&gt;&quot;|]([^\\\\/:*?&lt;&gt;&quot;|]*(?![ ])))+)$", "exceptionStackTrace": null, "matches": ["A:\\aEVIL", "A:\\ae", "A:\\a ", "A:\\a6", "A:\\a_", "a:\\", "A:\\a", "A:\\"], "nonMatches": ["A:\\aevil\\aevil", "A:\\a|", "A:\\a\\", "A:\\a?", "A:\\a;", "A:\\a:", "A:\\a/", "A:\\a*", "A:\\a&", "A:\\aeVil", "A:\\aev_il", "A:\\aev il", "A:\\aev4il", "A:\\|evil", "A:\\uevil", "A:\\tevil", "A:\\qevil", "A:\\oevil", "A:\\levil", "A:\\gevil", "A:\\\\evil", "A:\\Aevil", "A:\\?evil", "A:\\;evil", "A:\\:evil", "A:\\0evil", "A:\\/evil", "A:\\*evil", "A:\\&evil", "A:\\ evil", "A:\\\\aevil", "A:aevil", "A:\\\\", "A:", "A:\\aevil"]}, {"regex": "Natural enhancement", "exceptionStackTrace": null, "matches": ["Natural enhancement"], "nonMatches": []}, {"regex": "12/err", "exceptionStackTrace": null, "matches": ["12/err"], "nonMatches": []}, {"regex": "^+41 [0-9]{2}[ ][0-9]{3}[ ][0-9]{2}[ ][0-9]{2}$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "nothing to repeat"}, "matches": []}, {"regex": "^([0]?[1-9]|[1][0-2])[./-]([0]?[1-9]|[1|2][0-9]|[3][0|1])[./-]([0-9]{4}|[0-9]{2})$", "exceptionStackTrace": null, "matches": ["01-3|-0000", "01-30-0000", "01-|0-0000", "01-10-0000", "01-01/0000", "01-01.0000", "01-1-0000", "01/01-0000", "01.01-0000", "1-01-0000", "10-1-0000", "1-31-0000", "1-20-0000", "1-1-00", "1-1-0000", "10-01-0000", "01-31-0000", "01-20-0000", "01-01-00", "01-01-0000"], "nonMatches": ["13-01-0000", "01-32-0000", "01-01-0", "01-01-00000", "01-01-000", "01-00-0000", "01-001-0000", "00-01-0000", "001-01-0000"]}, {"regex": "^([0]?[1-9]|[1|2][0-9]|[3][0|1])[./-]([0]?[1-9]|[1][0-2])[./-]([0-9]{4}|[0-9]{2})$", "exceptionStackTrace": null, "matches": ["3|-01-0000", "30-01-0000", "|0-01-0000", "10-01-0000", "01-01/0000", "01-01.0000", "01-1-0000", "01/01-0000", "01.01-0000", "1-01-0000", "31-1-0000", "20-1-0000", "1-10-0000", "1-1-00", "1-1-0000", "31-01-0000", "20-01-0000", "01-10-0000", "01-01-00", "01-01-0000"], "nonMatches": ["32-01-0000", "01-13-0000", "01-01-0", "01-01-00000", "01-01-000", "01-00-0000", "01-001-0000", "00-01-0000", "001-01-0000"]}, {"regex": "[_\\w-]+(?:\\.[_\\w-]+)*@(?:[\\w-]+\\.)+(?:[\\w-]{2,4})(?![\\w]+)", "exceptionStackTrace": null, "matches": ["evil.evil@evil.-----", "evil.evil@evil.----", "evil.evil@evil.a-", "evil.evil@evil._-", "evil.evil@evil.A-", "evil.evil@evil.0-", "evil.evil@evil.evil.--", "evil.evil@-.--", "evil.evil@eVil.--", "evil.evil@EVIL.--", "evil.evil@ev_il.--", "evil.evil@ev4il.--", "evil.evil@e.--", "evil.evil@6.--", "evil.evil@_.--", "evil.evil.evil@evil.--", "evil.-@evil.--", "evil.eVil@evil.--", "evil.EVIL@evil.--", "evil.ev_il@evil.--", "evil.ev il@evil.--", "evil.ev4il@evil.--", "evil.e@evil.--", "evil.6@evil.--", "evil._@evil.--", "@.evil@evil.--", "..evil@evil.--", "-.evil@evil.--", "eVil.evil@evil.--", "EVIL.evil@evil.--", "ev_il.evil@evil.--", "ev il.evil@evil.--", "ev4il.evil@evil.--", "e.evil@evil.--", " .evil@evil.--", "6.evil@evil.--", "_.evil@evil.--", ".evil@evil.--", "evil@evil.--", "evil.evil@evil.--"], "nonMatches": ["evil.evil@evil.-", "evil.evil@--", "evil.evil@@.--", "evil.evil@..--", "evil.evil@ev il.--", "evil.evil@ .--", "evil.evil@.--", "evil.@@evil.--", "evil..@evil.--", "evil. @evil.--", "evil.@evil.--"]}, {"regex": "http://www.datadoctor.biz", "exceptionStackTrace": null, "matches": ["http://wwwadatadoctorAbiz", "http://wwwadatadoctor:biz", "http://wwwadatadoctor0biz", "http://wwwadatadoctor/biz", "http://wwwadatadoctor biz", "http://wwwAdatadoctorabiz", "http://www:datadoctorabiz", "http://www0datadoctorabiz", "http://www/datadoctorabiz", "http://www datadoctorabiz", "http://wwwadatadoctorabiz"], "nonMatches": []}, {"regex": "^((\\+){1}[1-9]{1}[0-9]{0,1}[0-9]{0,1}(\\s){1}[\\(]{1}[1-9]{1}[0-9]{1,5}[\\)]{1}[\\s]{1})[1-9]{1}[0-9]{4,9}$", "exceptionStackTrace": null, "matches": ["+100 (10) 1000000000", "+100 (10) 110000", "+100 (100000) 10000", "+100 (110) 10000", "+10 (10) 10000", "+1 (10) 10000", "+100 (10) 10000"], "nonMatches": ["+100 (10) 10000000000", "+100 (10) 1000", "+100 (10) 0000", "+100 (10) 00000", "+100 (10)  10000", "+100 (10)10000", "+100 (10)) 10000", "+100 (10 10000", "+100 (1000000) 10000", "+100 (1) 10000", "+100 (0) 10000", "+100 (00) 10000", "+100 ((10) 10000", "+100 10) 10000", "+100  (10) 10000", "+100(10) 10000", "+1000 (10) 10000", "+1100 (10) 10000", "+00 (10) 10000", "+000 (10) 10000", "++100 (10) 10000", "100 (10) 10000"]}, {"regex": "&quot;^(27|0)[0-9]{9}&quot;", "exceptionStackTrace": null, "matches": [], "nonMatches": ["&quot;270000000000&quot;", "&quot;2700000000&quot;", "&quot;0000000000&quot;", "&quot;27000000000&quot;"]}, {"regex": "<h([1-6])>([^<]*)</h([1-6])>", "exceptionStackTrace": null, "matches": ["<h1>></h1>", "<h1>/</h1>", "<h1>eVil</h1>", "<h1>EVIL</h1>", "<h1>ev_il</h1>", "<h1>ev il</h1>", "<h1>ev4il</h1>", "<h1>e</h1>", "<h1> </h1>", "<h1>6</h1>", "<h1>_</h1>", "<h1></h1>", "<h1>evil</h1>"], "nonMatches": ["<h1>evil</h0>", "<h1><</h1>", "<h0>evil</h1>"]}, {"regex": "zxGVZDFG", "exceptionStackTrace": null, "matches": ["zxGVZDFG"], "nonMatches": []}, {"regex": "^([0-9]{0,2})-([0-9]{0,2})-([0-9]{0,4})$", "exceptionStackTrace": null, "matches": ["0-0-0000", "0-0-", "0-00-0", "0--0", "00-0-0", "-0-0", "--", "0-0-0"], "nonMatches": ["0-0-00000", "0-000-0", "000-0-0"]}, {"regex": "(?<Protocol>\\w+):\\/\\/(?<Domain>[\\w@][\\w.:\\-@]+)\\/(?<Container>[\\w= ,@-]+)*", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<P"}, "matches": []}, {"regex": "^[^iIoOqQ&#39;-]{10,17}$", "exceptionStackTrace": null, "matches": ["aaaaaaaaaaaaaaaaa", "Aaaaaaaaaa", "0aaaaaaaaa", " aaaaaaaaa", "aaaaaaaaaa"], "nonMatches": ["aaaaaaaaaaaaaaaaaa", "aaaaaaaaa", "qaaaaaaaaa", "oaaaaaaaaa", "iaaaaaaaaa", "Qaaaaaaaaa", "Oaaaaaaaaa", "Iaaaaaaaaa", ";aaaaaaaaa", "9aaaaaaaaa", "3aaaaaaaaa", "-aaaaaaaaa", "&aaaaaaaaa", "#aaaaaaaaa"]}, {"regex": "^(?<Code>([^&quot;&#39;]|&quot;[^&quot;]*&quot;)*)&#39;(?<Comment>.*)$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<C"}, "matches": []}, {"regex": "Malwarebytes Support Number ", "exceptionStackTrace": null, "matches": ["Malwarebytes Support Number "], "nonMatches": []}, {"regex": "^((\\+)?[1-9]{1,2})?([-\\s\\.])?((\\(\\d{1,4}\\))|\\d{1,4})(([-\\s\\.])?[0-9]{1,12}){1,2}$", "exceptionStackTrace": null, "matches": ["+1.00000.0", "+1.0000.0", "+1.(0).0.0", "+1.(0).0000000000000", "+1.(0).000000000000", "+1.(0)0", "+1.(0)-0", "+1.(0) 0", "+1.(0000).0", "+1(0).0", "+1-(0).0", "+1 (0).0", ".(0).0", "+11.(0).0", "1.(0).0", "00", "(0)0", "+1.0.0", "+1.(0).0"], "nonMatches": ["+1..0", "+1.(0).0.0.0", "+1.(0)", "+1.(0).", "+1.(0)..0", "+1.(00000).0", "+1.().0", "+1..(0).0", "+1+1.(0).0", "+111.(0).0", "+.(0).0", "+0.(0).0", "++1.(0).0"]}, {"regex": "http://www.123tack.com/riding-apparel-riding-helmets-certified-helmets.html", "exceptionStackTrace": null, "matches": ["http://wwwa123tackacom/riding-apparel-riding-helmets-certified-helmetsAhtml", "http://wwwa123tackacom/riding-apparel-riding-helmets-certified-helmets:html", "http://wwwa123tackacom/riding-apparel-riding-helmets-certified-helmets0html", "http://wwwa123tackacom/riding-apparel-riding-helmets-certified-helmets/html", "http://wwwa123tackacom/riding-apparel-riding-helmets-certified-helmets-html", "http://wwwa123tackacom/riding-apparel-riding-helmets-certified-helmets html", "http://wwwa123tackAcom/riding-apparel-riding-helmets-certified-helmetsahtml", "http://wwwa123tack:com/riding-apparel-riding-helmets-certified-helmetsahtml", "http://wwwa123tack0com/riding-apparel-riding-helmets-certified-helmetsahtml", "http://wwwa123tack/com/riding-apparel-riding-helmets-certified-helmetsahtml", "http://wwwa123tack-com/riding-apparel-riding-helmets-certified-helmetsahtml", "http://wwwa123tack com/riding-apparel-riding-helmets-certified-helmetsahtml", "http://wwwA123tackacom/riding-apparel-riding-helmets-certified-helmetsahtml", "http://www:123tackacom/riding-apparel-riding-helmets-certified-helmetsahtml", "http://www0123tackacom/riding-apparel-riding-helmets-certified-helmetsahtml", "http://www/123tackacom/riding-apparel-riding-helmets-certified-helmetsahtml", "http://www-123tackacom/riding-apparel-riding-helmets-certified-helmetsahtml", "http://www 123tackacom/riding-apparel-riding-helmets-certified-helmetsahtml", "http://wwwa123tackacom/riding-apparel-riding-helmets-certified-helmetsahtml"], "nonMatches": []}, {"regex": "http://www.123tack.com/riding-apparel-riding-helmets-certified-helmets.html", "exceptionStackTrace": null, "matches": ["http://wwwa123tackacom/riding-apparel-riding-helmets-certified-helmetsAhtml", "http://wwwa123tackacom/riding-apparel-riding-helmets-certified-helmets:html", "http://wwwa123tackacom/riding-apparel-riding-helmets-certified-helmets0html", "http://wwwa123tackacom/riding-apparel-riding-helmets-certified-helmets/html", "http://wwwa123tackacom/riding-apparel-riding-helmets-certified-helmets-html", "http://wwwa123tackacom/riding-apparel-riding-helmets-certified-helmets html", "http://wwwa123tackAcom/riding-apparel-riding-helmets-certified-helmetsahtml", "http://wwwa123tack:com/riding-apparel-riding-helmets-certified-helmetsahtml", "http://wwwa123tack0com/riding-apparel-riding-helmets-certified-helmetsahtml", "http://wwwa123tack/com/riding-apparel-riding-helmets-certified-helmetsahtml", "http://wwwa123tack-com/riding-apparel-riding-helmets-certified-helmetsahtml", "http://wwwa123tack com/riding-apparel-riding-helmets-certified-helmetsahtml", "http://wwwA123tackacom/riding-apparel-riding-helmets-certified-helmetsahtml", "http://www:123tackacom/riding-apparel-riding-helmets-certified-helmetsahtml", "http://www0123tackacom/riding-apparel-riding-helmets-certified-helmetsahtml", "http://www/123tackacom/riding-apparel-riding-helmets-certified-helmetsahtml", "http://www-123tackacom/riding-apparel-riding-helmets-certified-helmetsahtml", "http://www 123tackacom/riding-apparel-riding-helmets-certified-helmetsahtml", "http://wwwa123tackacom/riding-apparel-riding-helmets-certified-helmetsahtml"], "nonMatches": []}, {"regex": "http://www.154marine.com", "exceptionStackTrace": null, "matches": ["http://wwwa154marineAcom", "http://wwwa154marine:com", "http://wwwa154marine0com", "http://wwwa154marine/com", "http://wwwa154marine com", "http://wwwA154marineacom", "http://www:154marineacom", "http://www0154marineacom", "http://www/154marineacom", "http://www 154marineacom", "http://wwwa154marineacom"], "nonMatches": []}, {"regex": "(?:#|0x)?(?:[0-9A-F]{2}){3}", "exceptionStackTrace": null, "matches": ["#AAAAAAAA", "#AAAAAAA", "#0AAAAA", "##AAAAAA", "AAAAAA", "0xAAAAAA", "#AAAAAA"], "nonMatches": ["#AAAA", "#AAAAA", "#GAAAAA"]}, {"regex": "(?:#|0x)?(?:[0-9A-F]{2}){4}", "exceptionStackTrace": null, "matches": ["#AAAAAAAAAA", "#AAAAAAAAA", "#0AAAAAAA", "##AAAAAAAA", "AAAAAAAA", "0xAAAAAAAA", "#AAAAAAAA"], "nonMatches": ["#AAAAAA", "#AAAAAAA", "#GAAAAAAA"]}, {"regex": "3[47]\\d{13}", "exceptionStackTrace": null, "matches": ["3700000000000000", "340000000000000", "370000000000000"], "nonMatches": ["37000000000000", "300000000000000"]}, {"regex": "3(?:0[012345]|[68]\\d)\\d{11}", "exceptionStackTrace": null, "matches": ["36000000000000", "305000000000000", "30400000000000", "30300000000000", "30200000000000", "30100000000000", "30000000000000", "38000000000000", "30500000000000"], "nonMatches": ["3050000000000", "30600000000000"]}, {"regex": "6(?:011|5\\d{2})\\d{12}", "exceptionStackTrace": null, "matches": ["65000000000000000", "60110000000000000", "6500000000000000", "6011000000000000"], "nonMatches": ["650000000000000", "601100000000000"]}, {"regex": "(?:2131|1800|35\\d{3})\\d{11}", "exceptionStackTrace": null, "matches": ["35000000000000000", "2131000000000000", "3500000000000000", "180000000000000", "213100000000000"], "nonMatches": ["350000000000000", "21310000000000"]}, {"regex": "5[12345]\\d{14}", "exceptionStackTrace": null, "matches": ["55000000000000000", "5400000000000000", "5300000000000000", "5200000000000000", "5100000000000000", "5500000000000000"], "nonMatches": ["550000000000000", "5000000000000000"]}, {"regex": "62[0-9]{14,17}", "exceptionStackTrace": null, "matches": ["62000000000000000000", "6200000000000000000", "6200000000000000"], "nonMatches": ["620000000000000"]}, {"regex": "4\\d{12}(?:\\d{3})?", "exceptionStackTrace": null, "matches": ["4000000000000000000", "40000000000000000", "400000000000000", "4000000000000", "4000000000000000"], "nonMatches": []}, {"regex": "(?:3[01]|[12][0-9]|0?[1-9])[/.-](?:1[0-2]|0?[1-9])[/.-][0-9]{4}", "exceptionStackTrace": null, "matches": ["001-10-0000", "10-10-0000", "31-10-00000", "31-10/0000", "31-10.0000", "31/10-0000", "31.10-0000", "32-10-0000", "30-10-0000", "1-10-0000", "31-1-0000", "01-10-0000", "20-10-0000", "31-01-0000", "31-10-0000"], "nonMatches": ["00-10-0000", "31-00-0000", "31-001-0000", "31-10-000", "31-13-0000"]}, {"regex": "[0-9]{4}[/.-](?:1[0-2]|0?[1-9])[/.-](?:3[01]|[12][0-9]|0?[1-9])", "exceptionStackTrace": null, "matches": ["0000-10-10", "0000-10-32", "0000-10-30", "0000-10/31", "0000-10.31", "0000/10-31", "0000.10-31", "00000-10-31", "0000-1-31", "0000-10-1", "0000-01-31", "0000-10-01", "0000-10-20", "0000-10-31"], "nonMatches": ["0000-00-31", "0000-001-31", "0000-10-001", "0000-10-00", "0000-13-31", "000-10-31"]}, {"regex": "\\d[\\d,]*(?:\\.\\d+)?", "exceptionStackTrace": null, "matches": ["0,.0.0", "0,", "0,.00", "0,.", "0,,.0", "0.0", "00.0", "0", "0,.0"], "nonMatches": []}, {"regex": "[\\w!#$%&amp;&apos;*+./=?`{|}~^-]+@[\\d.A-Za-z-]+", "exceptionStackTrace": null, "matches": ["evil@.", "evil@-", "evil@eVil", "evil@EVIL", "evil@ev_il", "evil@ev il", "evil@ev4il", "evil@e", "evil@6", "~@evil", "}@evil", "|@evil", "{@evil", "`@evil", "^@evil", "?@evil", "=@evil", ";@evil", "/@evil", ".@evil", "-@evil", "+@evil", "*@evil", "&@evil", "%@evil", "$@evil", "#@evil", "!@evil", "eVil@evil", "EVIL@evil", "ev_il@evil", "ev il@evil", "ev4il@evil", "e@evil", "6@evil", "_@evil", "evil@evil"], "nonMatches": ["evil@~", "evil@}", "evil@|", "evil@{", "evil@`", "evil@^", "evil@@", "evil@?", "evil@=", "evil@;", "evil@/", "evil@+", "evil@*", "evil@&", "evil@%", "evil@$", "evil@#", "evil@!", "evil@ ", "evil@_", "evil@", "@@evil", " @evil", "@evil"]}, {"regex": "(facebook|twitter|youtube)", "exceptionStackTrace": null, "matches": ["youtube", "twitter", "facebook"], "nonMatches": []}, {"regex": "[0-1]+", "exceptionStackTrace": null, "matches": ["00", "0"], "nonMatches": ["", "2"]}, {"regex": "[0-9]+", "exceptionStackTrace": null, "matches": ["00", "0"], "nonMatches": [""]}, {"regex": "[0-9a-fA-F]+", "exceptionStackTrace": null, "matches": ["AA", "a", "0", "A"], "nonMatches": ["", "g", "G"]}, {"regex": "[0-7]+", "exceptionStackTrace": null, "matches": ["00", "0"], "nonMatches": ["", "8"]}, {"regex": "((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])", "exceptionStackTrace": null, "matches": ["1100.100.100.250", "00.100.100.250", "20200.200.200.250", "0.200.200.250", "250.200.200.250", "250.250.250.1100", "250.250.250.00", "250.250.250.20200", "250.250.250.0", "250.250.250.256", "250.250.250.250.250", "256.250.250.250", "0.100.100.250", "250.100.100.0", "250.100.100.250", "100.100.100.250", "200.200.200.250", "250.250.250.100", "250.250.250.200", "250.250.250.250"], "nonMatches": ["250.250.250"]}, {"regex": "^(?!000)(?!666)(?!9)\\d{3}[- ]?(?!00)\\d{2}[- ]?(?!0000)\\d{4}$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["000 00 00000", "000 00 000", "000 00  0000", "000 000000", "000 00-0000", "000 000 0000", "000 0 0000", "000  00 0000", "00000 0000", "000-00 0000", "0000 00 0000", "00 00 0000", "000000000", "000 00 0000"]}, {"regex": "function[\\s]+[\\S]+[\\s]*([\\s]*)[\\s]*{[\\s]*([\\S]|[\\s])*[\\s]*}", "exceptionStackTrace": null, "matches": ["function evil   { a  }", "function evil   { a}", "function evil   { aa }", "function evil   {  }", "function evil   { } }", "function evil   { { }", "function evil   { _ }", "function evil   { A }", "function evil   { 0 }", "function evil   {  a }", "function evil   {a }", "function evil    { a }", "function evil  { a }", "function }   { a }", "function {   { a }", "function eVil   { a }", "function EVIL   { a }", "function ev_il   { a }", "function ev4il   { a }", "function e   { a }", "function 6   { a }", "function _   { a }", "function  evil   { a }", "function evil{}", "function evil   {   }", "function evil   { a }"], "nonMatches": ["function ev il   { a }", "function     { a }", "function    { a }", "functionevil   { a }"]}, {"regex": "^ *(1[0-2]|[1-9]):[0-5][0-9] *(a|p|A|P)(m|M) *$", "exceptionStackTrace": null, "matches": [" 10:00 am  ", " 10:00 am", " 10:00  am ", " 10:00am ", "  10:00 am ", "10:00 am ", "1:00am", "10:00Pm", "10:00Am", "10:00pm", "10:00aM", "10:00am", " 1:00 am ", " 10:00 Pm ", " 10:00 Am ", " 10:00 pm ", " 10:00 aM ", " 10:00 am "], "nonMatches": [" 0:00 am ", " 10:60 am ", " 13:00 am "]}, {"regex": "(?=^.{1,254}$)(^(?:(?!\\d+\\.|-)[a-zA-Z0-9_\\-]{1,63}(?<!-)\\.?)+(?:[a-zA-Z]{2,})$)", "exceptionStackTrace": null, "matches": ["a.AA", "_.AA", "A.AA"], "nonMatches": ["-.A", "-.aA", "-.-.AA", "AA", "-..AA", "----------------------------------------------------------------.AA", "---------------------------------------------------------------.AA", ".AA", "0.AA", "-AA", "-.AA"]}, {"regex": "^([a-zA-Z0-9]+([\\.+_-][a-zA-Z0-9]+)*)@(([a-zA-Z0-9]+((\\.|[-]{1,2})[a-zA-Z0-9]+)*)\\.[a-zA-Z]{2,6})$", "exceptionStackTrace": null, "matches": ["evil-evil@evil--evil.AA", "evil-evil@evilevil.AA", "evil-evil@evil.evil.AAAAAA", "evil-evil@evil.evil.aA", "evil-evil@evil.evil.evil.AA", "evil-evil@evil.AA", "evil-evil@evil.eVil.AA", "evil-evil@evil.EVIL.AA", "evil-evil@evil.ev4il.AA", "evil-evil@evil.e.AA", "evil-evil@evil.6.AA", "evil-evil@eVil.evil.AA", "evil-evil@EVIL.evil.AA", "evil-evil@ev4il.evil.AA", "evil-evil@e.evil.AA", "evil-evil@6.evil.AA", "evil-evil-evil@evil.evil.AA", "evil@evil.evil.AA", "evil-eVil@evil.evil.AA", "evil-EVIL@evil.evil.AA", "evil-ev_il@evil.evil.AA", "evil-ev4il@evil.evil.AA", "evil-e@evil.evil.AA", "evil-6@evil.evil.AA", "evil_evil@evil.evil.AA", "evil.evil@evil.evil.AA", "evil+evil@evil.evil.AA", "eVil-evil@evil.evil.AA", "EVIL-evil@evil.evil.AA", "ev_il-evil@evil.evil.AA", "ev4il-evil@evil.evil.AA", "e-evil@evil.evil.AA", "6-evil@evil.evil.AA", "evil@evil.AA", "evil-evil@evil-evil.AA", "evil-evil@evil.evil.AA"], "nonMatches": ["evil-evil@evil---evil.AA", "evil-evil@evil.evil.AAAAAAA", "evil-evil@evil.evil.A", "evil-evil@evil.ev_il.AA", "evil-evil@evil.ev il.AA", "evil-evil@evil. .AA", "evil-evil@evil._.AA", "evil-evil@evil..AA", "evil-evil@ev_il.evil.AA", "evil-evil@ev il.evil.AA", "evil-evil@ .evil.AA", "evil-evil@_.evil.AA", "evil-evil@.evil.AA", "evil-ev il@evil.evil.AA", "evil- @evil.evil.AA", "evil-_@evil.evil.AA", "evil-@evil.evil.AA", "ev il-evil@evil.evil.AA", " -evil@evil.evil.AA", "_-evil@evil.evil.AA", "-evil@evil.evil.AA"]}, {"regex": "^[0]*?(?<Percentage>[1-9][0-9]?|100)%?$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<P"}, "matches": []}, {"regex": "^(([a-zA-Z]:|\\\\)\\\\)?(((\\.)|(\\.\\.)|([^\\\\/:\\*\\?&quot;\\|<>\\. ](([^\\\\/:\\*\\?&quot;\\|<>\\. ])|([^\\\\/:\\*\\?&quot;\\|<>]*[^\\\\/:\\*\\?&quot;\\|<>\\. ]))?))\\\\)*[^\\\\/:\\*\\?&quot;\\|<>\\. ](([^\\\\/:\\*\\?&quot;\\|<>\\. ])|([^\\\\/:\\*\\?&quot;\\|<>]*[^\\\\/:\\*\\?&quot;\\|<>\\. ]))?$", "exceptionStackTrace": null, "matches": ["A:\\aevilA\\aa", "A:\\aevil0\\aa", "A:\\a\\a\\aa", "A:\\a.a\\aa", "A:\\aeVila\\aa", "A:\\aEVILa\\aa", "A:\\aev_ila\\aa", "A:\\aev ila\\aa", "A:\\aev4ila\\aa", "A:\\aea\\aa", "A:\\a a\\aa", "A:\\a6a\\aa", "A:\\a_a\\aa", "A:\\aaa\\aa", "A:\\a\\aa", "A:\\aA\\aa", "A:\\a0\\aa", "A:\\Aa\\aa", "A:\\0a\\aa", "A:\\.\\aevilA", "A:\\.\\aevil0", "A:\\.\\a\\a", "A:\\.\\a.a", "A:\\.\\aeVila", "A:\\.\\aEVILa", "A:\\.\\aev_ila", "A:\\.\\aev ila", "A:\\.\\aev4ila", "A:\\.\\aea", "A:\\.\\a a", "A:\\.\\a6a", "A:\\.\\a_a", "A:\\.\\aaa", "A:\\.\\a", "A:\\.\\aA", "A:\\.\\a0", "A:\\.\\Aa", "A:\\.\\0a", "A:\\.\\.\\aa", "A:\\aa", ".\\aa", "a:\\.\\aa", "a", "\\\\.\\aa", "A:\\aevila\\aa", "A:\\aa\\aa", "A:\\..\\aa", "A:\\.\\aevila", "A:\\.\\aa"], "nonMatches": ["A:\\aevil|\\aa", "A:\\aevilu\\aa", "A:\\aevilt\\aa", "A:\\aevilq\\aa", "A:\\aevilo\\aa", "A:\\aevil\\\\aa", "A:\\aevil?\\aa", "A:\\aevil>\\aa", "A:\\aevil<\\aa", "A:\\aevil;\\aa", "A:\\aevil:\\aa", "A:\\aevil/\\aa", "A:\\aevil.\\aa", "A:\\aevil*\\aa", "A:\\aevil&\\aa", "A:\\aevil \\aa", "A:\\a|a\\aa", "A:\\a?a\\aa", "A:\\a>a\\aa", "A:\\a<a\\aa", "A:\\a;a\\aa", "A:\\a:a\\aa", "A:\\a/a\\aa", "A:\\a*a\\aa", "A:\\a&a\\aa", "A:\\a|\\aa", "A:\\au\\aa", "A:\\at\\aa", "A:\\aq\\aa", "A:\\ao\\aa", "A:\\a\\\\aa", "A:\\a?\\aa", "A:\\a>\\aa", "A:\\a<\\aa", "A:\\a;\\aa", "A:\\a:\\aa", "A:\\a/\\aa", "A:\\a.\\aa", "A:\\a*\\aa", "A:\\a&\\aa", "A:\\a \\aa", "A:\\|a\\aa", "A:\\ua\\aa", "A:\\ta\\aa", "A:\\qa\\aa", "A:\\oa\\aa", "A:\\\\a\\aa", "A:\\?a\\aa", "A:\\>a\\aa", "A:\\<a\\aa", "A:\\;a\\aa", "A:\\:a\\aa", "A:\\/a\\aa", "A:\\.a\\aa", "A:\\*a\\aa", "A:\\&a\\aa", "A:\\ a\\aa", "A:\\.\\aevil|", "A:\\.\\aevilu", "A:\\.\\aevilt", "A:\\.\\aevilq", "A:\\.\\aevilo", "A:\\.\\aevil\\", "A:\\.\\aevil?", "A:\\.\\aevil>", "A:\\.\\aevil<", "A:\\.\\aevil;", "A:\\.\\aevil:", "A:\\.\\aevil/", "A:\\.\\aevil.", "A:\\.\\aevil*", "A:\\.\\aevil&", "A:\\.\\aevil ", "A:\\.\\a|a", "A:\\.\\a?a", "A:\\.\\a>a", "A:\\.\\a<a", "A:\\.\\a;a", "A:\\.\\a:a", "A:\\.\\a/a", "A:\\.\\a*a", "A:\\.\\a&a", "A:\\.\\a|", "A:\\.\\au", "A:\\.\\at", "A:\\.\\aq", "A:\\.\\ao", "A:\\.\\a\\", "A:\\.\\a?", "A:\\.\\a>", "A:\\.\\a<", "A:\\.\\a;", "A:\\.\\a:", "A:\\.\\a/", "A:\\.\\a.", "A:\\.\\a*", "A:\\.\\a&", "A:\\.\\a ", "A:\\.\\|a", "A:\\.\\ua", "A:\\.\\ta", "A:\\.\\qa", "A:\\.\\oa", "A:\\.\\\\a", "A:\\.\\?a", "A:\\.\\>a", "A:\\.\\<a", "A:\\.\\;a", "A:\\.\\:a", "A:\\.\\/a", "A:\\.\\.a", "A:\\.\\*a", "A:\\.\\&a", "A:\\.\\ a", "A:\\A:\\.\\aa"]}, {"regex": "\\A(([a-zA-Z]{1,2}\\d{1,2})|([a-zA-Z]{2}\\d[a-zA-Z]{1}))\\x20{0,1}\\d[a-zA-Z]{2}\\Z", "exceptionStackTrace": null, "matches": ["AA0a 0AA", "aA0A 0AA", "A0 0aA", "A00 0AA", "AA0 0AA", "a0 0AA", "AA0A0AA", "A00AA", "AA0A 0AA", "A0 0AA"], "nonMatches": ["AA0AA 0AA", "AAA0A 0AA", "A0A 0AA", "A0 0AAA", "A0 0A", "A0  0AA", "A000 0AA", "A 0AA", "AAA0 0AA", "0 0AA"]}, {"regex": "(^13((\\ )?\\d){4}$)|(^1[38]00((\\ )?\\d){6}$)|(^(((\\(0[23478]\\))|(0[23478]))(\\ )?)?\\d((\\ )?\\d){7}$)", "exceptionStackTrace": null, "matches": ["07 0 0 0 0 0 0 0 0", "04 0 0 0 0 0 0 0 0", "03 0 0 0 0 0 0 0 0", "02 0 0 0 0 0 0 0 0", "(08) 00 0 0 0 0 0 0", "0 0 0 0 0 0 0 0", "(08)0 0 0 0 0 0 0 0", "(07) 0 0 0 0 0 0 0 0", "(04) 0 0 0 0 0 0 0 0", "(03) 0 0 0 0 0 0 0 0", "(02) 0 0 0 0 0 0 0 0", "1300 0 0 0 0 0 0", "00 0 0 0 0 0 0", "18000 0 0 0 0 0", "130 0 0 0", "08 0 0 0 0 0 0 0 0", "(08) 0 0 0 0 0 0 0 0", "1800 0 0 0 0 0 0", "13 0 0 0 0"], "nonMatches": ["00 0 0 0 0 0 0 0 0", "(08) 0 0 0 0 0 0 0 0 0", "(08) 0 0 0 0 0 0 0", "(08) 0  0 0 0 0 0 0 0", "(08) (08) 0 0 0 0 0 0 0 0", "(08)  0 0 0 0 0 0 0 0", "(00) 0 0 0 0 0 0 0 0", "1800 0 0 0 0 0 0 0", "1800 0 0 0 0 0", "1800  0 0 0 0 0 0", "1000 0 0 0 0 0 0", "13 0 0 0 0 0", "13 0 0 0", "13  0 0 0 0"]}, {"regex": "(^\\(\\)$|^\\(((\\([0-9]+,(\\((\\([0-9]+,[0-9]+,[0-9]+\\),)*(\\([0-9]+,[0-9]+,[0-9]+\\)){1}\\))+\\),)*(\\([0-9]+,(\\((\\([0-9]+,[0-9]+,[0-9]+\\),)*(\\([0-9]+,[0-9]+,[0-9]+\\)){1}\\))+\\)){1}\\)))$", "exceptionStackTrace": null, "matches": ["((0,((0,0,0),(0,0,0))),(0,((0,0,0),(0,0,0))((0,0,0),(0,0,0))))", "((0,((0,0,0),(0,0,0))),(0,((0,0,0),(0,0,00))))", "((0,((0,0,0),(0,0,0))),(0,((0,0,0),(0,00,0))))", "((0,((0,0,0),(0,0,0))),(0,((0,0,0),(00,0,0))))", "((0,((0,0,0),(0,0,0))),(0,((0,0,0),(0,0,0),(0,0,0))))", "((0,((0,0,0),(0,0,0))),(0,((0,0,0))))", "((0,((0,0,0),(0,0,0))),(0,((0,0,00),(0,0,0))))", "((0,((0,0,0),(0,0,0))),(0,((0,00,0),(0,0,0))))", "((0,((0,0,0),(0,0,0))),(0,((00,0,0),(0,0,0))))", "((0,((0,0,0),(0,0,0))),(00,((0,0,0),(0,0,0))))", "((0,((0,0,0),(0,0,0))),(0,((0,0,0),(0,0,0))),(0,((0,0,0),(0,0,0))))", "((0,((0,0,0),(0,0,0))))", "((0,((0,0,0),(0,0,0))((0,0,0),(0,0,0))),(0,((0,0,0),(0,0,0))))", "((0,((0,0,0),(0,0,00))),(0,((0,0,0),(0,0,0))))", "((0,((0,0,0),(0,00,0))),(0,((0,0,0),(0,0,0))))", "((0,((0,0,0),(00,0,0))),(0,((0,0,0),(0,0,0))))", "((0,((0,0,0),(0,0,0),(0,0,0))),(0,((0,0,0),(0,0,0))))", "((0,((0,0,0))),(0,((0,0,0),(0,0,0))))", "((0,((0,0,00),(0,0,0))),(0,((0,0,0),(0,0,0))))", "((0,((0,00,0),(0,0,0))),(0,((0,0,0),(0,0,0))))", "((0,((00,0,0),(0,0,0))),(0,((0,0,0),(0,0,0))))", "((00,((0,0,0),(0,0,0))),(0,((0,0,0),(0,0,0))))", "((0,((0,0,0))))", "((0,((0,0,0),(0,0,0))),(0,((0,0,0),(0,0,0))))", "()"], "nonMatches": ["((0,((0,0,0),(0,0,0))),(0,((0,0,0),(0,0,0)))(0,((0,0,0),(0,0,0))))", "((0,((0,0,0),(0,0,0))),)", "((0,((0,0,0),(0,0,0))),(0,))", "((0,((0,0,0),(0,0,0))),(0,((0,0,0),(0,0,0)(0,0,0))))", "((0,((0,0,0),(0,0,0))),(0,((0,0,0),)))", "((0,((0,0,0),(0,0,0))),(0,((0,0,0),(0,0,))))", "((0,((0,0,0),(0,0,0))),(0,((0,0,0),(0,,0))))", "((0,((0,0,0),(0,0,0))),(0,((0,0,0),(,0,0))))", "((0,((0,0,0),(0,0,0))),(0,((0,0,),(0,0,0))))", "((0,((0,0,0),(0,0,0))),(0,((0,,0),(0,0,0))))", "((0,((0,0,0),(0,0,0))),(0,((,0,0),(0,0,0))))", "((0,((0,0,0),(0,0,0))),(,((0,0,0),(0,0,0))))", "((0,),(0,((0,0,0),(0,0,0))))", "((0,((0,0,0),(0,0,0)(0,0,0))),(0,((0,0,0),(0,0,0))))", "((0,((0,0,0),)),(0,((0,0,0),(0,0,0))))", "((0,((0,0,0),(0,0,))),(0,((0,0,0),(0,0,0))))", "((0,((0,0,0),(0,,0))),(0,((0,0,0),(0,0,0))))", "((0,((0,0,0),(,0,0))),(0,((0,0,0),(0,0,0))))", "((0,((0,0,),(0,0,0))),(0,((0,0,0),(0,0,0))))", "((0,((0,,0),(0,0,0))),(0,((0,0,0),(0,0,0))))", "((0,((,0,0),(0,0,0))),(0,((0,0,0),(0,0,0))))", "((,((0,0,0),(0,0,0))),(0,((0,0,0),(0,0,0))))"]}, {"regex": " 1-888-625-3058. https://monktech.net/gmail-login.html", "exceptionStackTrace": null, "matches": [" 1-888-625-3058a https://monktechanet/gmail-loginAhtml", " 1-888-625-3058a https://monktechanet/gmail-login:html", " 1-888-625-3058a https://monktechanet/gmail-login0html", " 1-888-625-3058a https://monktechanet/gmail-login/html", " 1-888-625-3058a https://monktechanet/gmail-login-html", " 1-888-625-3058a https://monktechanet/gmail-login html", " 1-888-625-3058a https://monktechAnet/gmail-loginahtml", " 1-888-625-3058a https://monktech:net/gmail-loginahtml", " 1-888-625-3058a https://monktech0net/gmail-loginahtml", " 1-888-625-3058a https://monktech/net/gmail-loginahtml", " 1-888-625-3058a https://monktech-net/gmail-loginahtml", " 1-888-625-3058a https://monktech net/gmail-loginahtml", " 1-888-625-3058A https://monktechanet/gmail-loginahtml", " 1-888-625-3058: https://monktechanet/gmail-loginahtml", " 1-888-625-30580 https://monktechanet/gmail-loginahtml", " 1-888-625-3058/ https://monktechanet/gmail-loginahtml", " 1-888-625-3058- https://monktechanet/gmail-loginahtml", " 1-888-625-3058  https://monktechanet/gmail-loginahtml", " 1-888-625-3058a https://monktechanet/gmail-loginahtml"], "nonMatches": []}, {"regex": "^(\\+?\\d{1,2}[ -]?)?(\\(\\+?\\d{2,3}\\)|\\+?\\d{2,3})?[ -]?\\d{3,4}[ -]?\\d{3,4}$", "exceptionStackTrace": null, "matches": ["+0-+000-000-000", "+0-00-000-000", "+0-(+00)-000-0000", "+0-(+00)-000000", "+0-(+00)-000 000", "+0-(+00)-0000-000", "+0-(+00)000-000", "+0-(+00) 000-000", "+0--000-000", "+0-(+000)-000-000", "+0-(00)-000-000", "(+00)-000-000", "+0(+00)-000-000", "+0 (+00)-000-000", "+00-(+00)-000-000", "0-(+00)-000-000", "000000", "+0-+00-000-000", "+0-(+00)-000-000"], "nonMatches": ["+0-+0000-000-000", "+0-+0-000-000", "+0-++00-000-000", "+0-(+00)-000-00000", "+0-(+00)-000-00", "+0-(+00)-000--000", "+0-(+00)-00000-000", "+0-(+00)-00-000", "+0-(+00)--000-000", "+0-(+00)(+00)-000-000", "+0-(+0000)-000-000", "+0-(+0)-000-000", "+0-(++00)-000-000", "+0-+0-(+00)-000-000", "+0--(+00)-000-000", "+000-(+00)-000-000", "+-(+00)-000-000", "++0-(+00)-000-000"]}, {"regex": "[\\+]{0,1}(\\d{10,13}|[\\(][\\+]{0,1}\\d{2,}[\\13)]*\\d{5,13}|\\d{2,6}[\\-]{1}\\d{2,13}[\\-]*\\d{3,13})", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (parse error): expected character type but received BACKREFERENCE"}, "matches": [], "nonMatches": []}, {"regex": "<a[\\s]+[^>]*?href[\\s]?=[\\s\\&quot;\\&#39;]*(.*?)[\\&quot;\\&#39;]*.*?>([^<]+|.*?)?<\\/a>", "exceptionStackTrace": null, "matches": ["<a evilhref =;evil;evil>evilevil</a>", "<a evilhref =;evil;evil>></a>", "<a evilhref =;evil;evil>=</a>", "<a evilhref =;evil;evil><</a>", "<a evilhref =;evil;evil>;</a>", "<a evilhref =;evil;evil>/</a>", "<a evilhref =;evil;evil>&</a>", "<a evilhref =;evil;evil>#</a>", "<a evilhref =;evil;evil>eVil</a>", "<a evilhref =;evil;evil>EVIL</a>", "<a evilhref =;evil;evil>ev_il</a>", "<a evilhref =;evil;evil>ev il</a>", "<a evilhref =;evil;evil>ev4il</a>", "<a evilhref =;evil;evil>e</a>", "<a evilhref =;evil;evil> </a>", "<a evilhref =;evil;evil>6</a>", "<a evilhref =;evil;evil>_</a>", "<a evilhref =;evil;evil></a>", "<a evilhref =;evil;>>evil</a>", "<a evilhref =;evil;=>evil</a>", "<a evilhref =;evil;<>evil</a>", "<a evilhref =;evil;;>evil</a>", "<a evilhref =;evil;/>evil</a>", "<a evilhref =;evil;&>evil</a>", "<a evilhref =;evil;#>evil</a>", "<a evilhref =;evil;eVil>evil</a>", "<a evilhref =;evil;EVIL>evil</a>", "<a evilhref =;evil;ev_il>evil</a>", "<a evilhref =;evil;ev il>evil</a>", "<a evilhref =;evil;ev4il>evil</a>", "<a evilhref =;evil;e>evil</a>", "<a evilhref =;evil; >evil</a>", "<a evilhref =;evil;6>evil</a>", "<a evilhref =;evil;_>evil</a>", "<a evilhref =;evil;>evil</a>", "<a evilhref =;evil;;evil>evil</a>", "<a evilhref =;evilevil>evil</a>", "<a evilhref =;eviluevil>evil</a>", "<a evilhref =;eviltevil>evil</a>", "<a evilhref =;evilqevil>evil</a>", "<a evilhref =;eviloevil>evil</a>", "<a evilhref =;evilaevil>evil</a>", "<a evilhref =;evil9evil>evil</a>", "<a evilhref =;evil3evil>evil</a>", "<a evilhref =;evil0evil>evil</a>", "<a evilhref =;evil&evil>evil</a>", "<a evilhref =;evil#evil>evil</a>", "<a evilhref =;>;evil>evil</a>", "<a evilhref =;=;evil>evil</a>", "<a evilhref =;<;evil>evil</a>", "<a evilhref =;;;evil>evil</a>", "<a evilhref =;/;evil>evil</a>", "<a evilhref =;&;evil>evil</a>", "<a evilhref =;#;evil>evil</a>", "<a evilhref =;eVil;evil>evil</a>", "<a evilhref =;EVIL;evil>evil</a>", "<a evilhref =;ev_il;evil>evil</a>", "<a evilhref =;ev il;evil>evil</a>", "<a evilhref =;ev4il;evil>evil</a>", "<a evilhref =;e;evil>evil</a>", "<a evilhref =; ;evil>evil</a>", "<a evilhref =;6;evil>evil</a>", "<a evilhref =;_;evil>evil</a>", "<a evilhref =;;evil>evil</a>", "<a evilhref =;;evil;evil>evil</a>", "<a evilhref =evil;evil>evil</a>", "<a evilhref =uevil;evil>evil</a>", "<a evilhref =tevil;evil>evil</a>", "<a evilhref =qevil;evil>evil</a>", "<a evilhref =oevil;evil>evil</a>", "<a evilhref =aevil;evil>evil</a>", "<a evilhref =9evil;evil>evil</a>", "<a evilhref =3evil;evil>evil</a>", "<a evilhref =0evil;evil>evil</a>", "<a evilhref =&evil;evil>evil</a>", "<a evilhref =#evil;evil>evil</a>", "<a evilhref = evil;evil>evil</a>", "<a evilhref=;evil;evil>evil</a>", "<a =href =;evil;evil>evil</a>", "<a <href =;evil;evil>evil</a>", "<a ;href =;evil;evil>evil</a>", "<a /href =;evil;evil>evil</a>", "<a &href =;evil;evil>evil</a>", "<a #href =;evil;evil>evil</a>", "<a eVilhref =;evil;evil>evil</a>", "<a EVILhref =;evil;evil>evil</a>", "<a ev_ilhref =;evil;evil>evil</a>", "<a ev ilhref =;evil;evil>evil</a>", "<a ev4ilhref =;evil;evil>evil</a>", "<a ehref =;evil;evil>evil</a>", "<a  href =;evil;evil>evil</a>", "<a 6href =;evil;evil>evil</a>", "<a _href =;evil;evil>evil</a>", "<a href =;evil;evil>evil</a>", "<a  evilhref =;evil;evil>evil</a>", "<a href=></a>", "<a evilhref =;evil;evil>evil</a>"], "nonMatches": ["<a evilhref  =;evil;evil>evil</a>", "<a >href =;evil;evil>evil</a>", "<aevilhref =;evil;evil>evil</a>"]}, {"regex": "^(([0-1][0-9]|2[0-3])[0-5][0-9]\\-([0-1][0-9]|2[0-3])[0-5][0-9]|[C|c]losed)$", "exceptionStackTrace": null, "matches": ["|losed", "Closed", "closed", "2000-0000", "0000-2000", "0000-0000"], "nonMatches": ["alosed", "Alosed", "2400-0000", "0000-2400", "0000-0060", "0060-0000"]}, {"regex": "(\\/\\/--&gt;\\s*)?&lt;\\/?SCRIPT([^&gt;]*)&gt;(\\s*&lt;!--\\s)?", "exceptionStackTrace": null, "matches": ["//--&gt; &lt;/SCRIPTevil&gt; &lt;!--  &lt;!-- ", "//--&gt; &lt;/SCRIPTevil&gt;", "//--&gt; &lt;/SCRIPTevil&gt;  &lt;!-- ", "//--&gt; &lt;/SCRIPTevil&gt;&lt;!-- ", "//--&gt; &lt;/SCRIPT/&gt; &lt;!-- ", "//--&gt; &lt;/SCRIPT-&gt; &lt;!-- ", "//--&gt; &lt;/SCRIPT!&gt; &lt;!-- ", "//--&gt; &lt;/SCRIPTeVil&gt; &lt;!-- ", "//--&gt; &lt;/SCRIPTEVIL&gt; &lt;!-- ", "//--&gt; &lt;/SCRIPTev_il&gt; &lt;!-- ", "//--&gt; &lt;/SCRIPTev il&gt; &lt;!-- ", "//--&gt; &lt;/SCRIPTev4il&gt; &lt;!-- ", "//--&gt; &lt;/SCRIPTe&gt; &lt;!-- ", "//--&gt; &lt;/SCRIPT &gt; &lt;!-- ", "//--&gt; &lt;/SCRIPT6&gt; &lt;!-- ", "//--&gt; &lt;/SCRIPT_&gt; &lt;!-- ", "//--&gt; &lt;/SCRIPT&gt; &lt;!-- ", "//--&gt; &lt;SCRIPTevil&gt; &lt;!-- ", "//--&gt; //--&gt; &lt;/SCRIPTevil&gt; &lt;!-- ", "&lt;/SCRIPTevil&gt; &lt;!-- ", "//--&gt;  &lt;/SCRIPTevil&gt; &lt;!-- ", "//--&gt;&lt;/SCRIPTevil&gt; &lt;!-- ", "&lt;SCRIPT&gt;", "//--&gt; &lt;/SCRIPTevil&gt; &lt;!-- "], "nonMatches": ["//--&gt; &lt;/SCRIPT;&gt; &lt;!-- ", "//--&gt; &lt;/SCRIPT&&gt; &lt;!-- ", "//--&gt; &lt;//SCRIPTevil&gt; &lt;!-- "]}, {"regex": "^\\{?[a-fA-F\\d]{32}\\}?$", "exceptionStackTrace": null, "matches": ["{00000000000000000000000000000000", "{a0000000000000000000000000000000}", "{A0000000000000000000000000000000}", "00000000000000000000000000000000}", "00000000000000000000000000000000", "{00000000000000000000000000000000}"], "nonMatches": ["{00000000000000000000000000000000}}", "{000000000000000000000000000000000}", "{0000000000000000000000000000000}", "{g0000000000000000000000000000000}", "{G0000000000000000000000000000000}", "{{00000000000000000000000000000000}"]}, {"regex": "^\\b(29[0-9]|2[0-9][0-9]|[01]?[0-9][0-9]?)\\\\/(29[0-9]|2[0-9][0-9]|[01]?[0-9][0-9]?)$", "exceptionStackTrace": null, "matches": ["10\\/290", "00\\/290", "000\\/290", "290\\/10", "290\\/00", "290\\/000", "0\\/290", "290\\/0", "100\\/290", "200\\/290", "290\\/100", "290\\/200", "290\\/290"], "nonMatches": ["1000\\/290", "1100\\/290", "290\\/1000", "290\\/1100"]}, {"regex": "((www|http)(\\W+\\S+[^).,:;?\\]\\} \\r\\n$]+))", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\r"}, "matches": [], "nonMatches": []}, {"regex": "[0-9][.][0-9]{3}$", "exceptionStackTrace": null, "matches": ["0.000"], "nonMatches": ["0.0000", "0.00"]}, {"regex": "(?:^.*\\r*\\n*)*?(?:(?=^\\s*GO\\s*$)|$)", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\r"}, "matches": [], "nonMatches": []}, {"regex": "^((0{1})?([0-3]{0,1}))(\\.[0-9]{0,2})?$|^(4)(\\.[0]{1,2})?$|^((0{1})?([0-4]{0,1}))(\\.)?$", "exceptionStackTrace": null, "matches": ["0.", "4.00", "4.", "00", "00.00", "0.0", "4", "", "00.", "4.0", "00.0"], "nonMatches": ["00..", "05.", "000.", "4.0.0", "4.000", "00.0.0", "00.000", "04.0", "000.0"]}, {"regex": "^(([A-Za-z0-9]+_+)|([A-Za-z0-9]+\\-+)|([A-Za-z0-9]+\\.+)|([A-Za-z0-9]+\\++))*[A-Za-z0-9]+@((\\w+\\-+)|(\\w+\\.))*\\w{1,63}\\.[a-zA-Z]{2,6}$", "exceptionStackTrace": null, "matches": ["evil++evil@evil-a.AA", "eVil+evil@evil-a.AA", "EVIL+evil@evil-a.AA", "ev_il+evil@evil-a.AA", "ev4il+evil@evil-a.AA", "e+evil@evil-a.AA", "6+evil@evil-a.AA", "evil..evil@evil-a.AA", "eVil.evil@evil-a.AA", "EVIL.evil@evil-a.AA", "ev_il.evil@evil-a.AA", "ev4il.evil@evil-a.AA", "e.evil@evil-a.AA", "6.evil@evil-a.AA", "evil--evil@evil-a.AA", "eVil-evil@evil-a.AA", "EVIL-evil@evil-a.AA", "ev_il-evil@evil-a.AA", "ev4il-evil@evil-a.AA", "e-evil@evil-a.AA", "6-evil@evil-a.AA", "evil_evil@eVil.a.AA", "evil_evil@EVIL.a.AA", "evil_evil@ev_il.a.AA", "evil_evil@ev4il.a.AA", "evil_evil@e.a.AA", "evil_evil@6.a.AA", "evil_evil@_.a.AA", "evil_evil@evil-a.AAAAAA", "evil_evil@evil-a.aA", "evil_evil@evil-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.AA", "evil_evil@evil-_.AA", "evil_evil@evil-A.AA", "evil_evil@evil-0.AA", "evil_evil@evil-evil-a.AA", "evil_evil@a.AA", "evil_evil@evil--a.AA", "evil_evil@evila.AA", "evil_evil@eVil-a.AA", "evil_evil@EVIL-a.AA", "evil_evil@ev_il-a.AA", "evil_evil@ev4il-a.AA", "evil_evil@e-a.AA", "evil_evil@6-a.AA", "evil_evil@_-a.AA", "evil_eVil@evil-a.AA", "evil_EVIL@evil-a.AA", "evil_ev_il@evil-a.AA", "evil_ev4il@evil-a.AA", "evil_e@evil-a.AA", "evil_6@evil-a.AA", "evil_evil_evil@evil-a.AA", "evil@evil-a.AA", "evil__evil@evil-a.AA", "evilevil@evil-a.AA", "eVil_evil@evil-a.AA", "EVIL_evil@evil-a.AA", "ev_il_evil@evil-a.AA", "ev4il_evil@evil-a.AA", "e_evil@evil-a.AA", "6_evil@evil-a.AA", "evil@a.AA", "evil+evil@evil-a.AA", "evil.evil@evil-a.AA", "evil-evil@evil-a.AA", "evil_evil@evil.a.AA", "evil_evil@evil-a.AA"], "nonMatches": ["ev il+evil@evil-a.AA", " +evil@evil-a.AA", "_+evil@evil-a.AA", "+evil@evil-a.AA", "ev il.evil@evil-a.AA", " .evil@evil-a.AA", "_.evil@evil-a.AA", ".evil@evil-a.AA", "ev il-evil@evil-a.AA", " -evil@evil-a.AA", "_-evil@evil-a.AA", "-evil@evil-a.AA", "evil_evil@ev il.a.AA", "evil_evil@ .a.AA", "evil_evil@.a.AA", "evil_evil@evil-a.AAAAAAA", "evil_evil@evil-a.A", "evil_evil@evil-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.AA", "evil_evil@evil-.AA", "evil_evil@ev il-a.AA", "evil_evil@ -a.AA", "evil_evil@-a.AA", "evil_ev il@evil-a.AA", "evil_ @evil-a.AA", "evil__@evil-a.AA", "evil_@evil-a.AA", "ev il_evil@evil-a.AA", " _evil@evil-a.AA", "__evil@evil-a.AA", "_evil@evil-a.AA"]}, {"regex": "^[{|\\(]?[0-9a-fA-F]{8}[-]([0-9a-fA-F]{4}[-]){3}[0-9a-fA-F]{12}[\\)|}]?|[{|\\(]?[0-9a-fA-F]{8}([0-9a-fA-F]{4}){3}[0-9a-fA-F]{12}[\\)|}]?$", "exceptionStackTrace": null, "matches": ["(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA|", "(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)", "(AAAAAAAAAAAAAAAAAAAAaAAAAAAAAAAA}", "(AAAAAAAAAAAAAAAAAAAA0AAAAAAAAAAA}", "(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA}", "(AAAAAAAAaAAAAAAAAAAAAAAAAAAAAAAA}", "(AAAAAAAA0AAAAAAAAAAAAAAAAAAAAAAA}", "(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA}", "(aAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA}", "(0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA}", "((AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA}", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA}", "|AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA}", "{AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA}", "(AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA}}", "(AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA", "(AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA|", "(AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA)", "(AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAAA}", "(AAAAAAAA-AAAA-AAAA-AAAA-aAAAAAAAAAAA}", "(AAAAAAAA-AAAA-AAAA-AAAA-0AAAAAAAAAAA}", "(AAAAAAAA-aAAA-AAAA-AAAA-AAAAAAAAAAAA}", "(AAAAAAAA-0AAA-AAAA-AAAA-AAAAAAAAAAAA}", "(aAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA}", "(0AAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA}", "AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA}", "|AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA}", "{AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA}", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA", "(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA}", "(AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA}"], "nonMatches": ["(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA}}", "(AAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAA}", "(AAAAAAAAAAAAAAAAAAAAGAAAAAAAAAAA}", "(AAAAAAAAAAAAAAAAAAAAAAAAAAAA}", "(AAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAA}", "(AAAAAAAAGAAAAAAAAAAAAAAAAAAAAAAA}", "(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA}", "(gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA}", "(GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA}", "(AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAA}", "(AAAAAAAA-AAAA-AAAA-AAAA-gAAAAAAAAAAA}", "(AAAAAAAA-AAAA-AAAA-AAAA-GAAAAAAAAAAA}", "(AAAAAAAA-AAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA}", "(AAAAAAAA-AAAA-AAAA-AAAAAAAAAAAA}", "(AAAAAAAA-AAAAA-AAAA-AAAA-AAAAAAAAAAAA}", "(AAAAAAAA-AAA-AAAA-AAAA-AAAAAAAAAAAA}", "(AAAAAAAA-gAAA-AAAA-AAAA-AAAAAAAAAAAA}", "(AAAAAAAA-GAAA-AAAA-AAAA-AAAAAAAAAAAA}", "(AAAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA}", "(AAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA}", "(gAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA}", "(GAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA}", "((AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA}"]}, {"regex": "^\\s*([A-Z\\s])([a-z\\s]){1,30}([A-Z\\s])([a-z\\s]){1,30}\\s*$", "exceptionStackTrace": null, "matches": ["    a ", "   A  ", "                                    ", "                                   ", "  a   ", " A    ", "       ", "     ", "    ", "      "], "nonMatches": []}, {"regex": "\\b(?:19[5-9][0-9]|200[0-9]|201[0-4])([-,.])(?:0?[1-9]|1[12])\\1(?:0?[1-9]|[12][0-9]|3[01])\\b", "exceptionStackTrace": null, "matches": ["1950.11.01", "1950.01.30", "1950.01.10", "1950.01.1", "1950.1.01", "2010.1.1", "2000.1.1", "1950.12.1", "1950.1.31", "1950.1.20", "1950.1.1", "2010.01.01", "2000.01.01", "1950.12.01", "1950.01.31", "1950.01.20", "1950.01.01"], "nonMatches": ["2015.01.01", "1950.10.01", "1950.01.32", "1950.01.00", "1950.01.001", "1950.00.01", "1950.001.01", "1950-01.01", "1950,01.01", "1900.01.01"]}, {"regex": "^(0{0,1}[1-9][0-9]){1}(\\s){0,1}(\\-){0,1}(\\s){0,1}[1-9]{1}([0-9]{3}|[0-9]{4})(\\-){0,1}(\\s){0,1}[0-9]{4}$", "exceptionStackTrace": null, "matches": ["010 - 1000-0000", "010 - 1000 0000", "010 - 11000- 0000", "010 -1000- 0000", "010  1000- 0000", "010- 1000- 0000", "10 - 1000- 0000", "10100000000", "1010000000", "010 - 10000- 0000", "010 - 1000- 0000"], "nonMatches": ["010 - 100000- 0000", "010 - 1000- 00000", "010 - 1000- 000", "010 - 1000-  0000", "010 - 1000-- 0000", "010 - 100- 0000", "010 - 000- 0000", "010 - 0000- 0000", "010 -  1000- 0000", "010 -- 1000- 0000", "010  - 1000- 0000", "010010 - 1000- 0000", " - 1000- 0000", "000 - 1000- 0000", "0010 - 1000- 0000"]}, {"regex": "[a-zA-Z][a-zA-Z0-9_\\-\\,\\.]{5,31}", "exceptionStackTrace": null, "matches": ["A................................", "A...............................", "Aa....", "A_....", "AA....", "A0....", "A-....", "A,....", "a.....", "A....."], "nonMatches": ["A...."]}, {"regex": "^(\\+){0,1}\\d{1,10}$", "exceptionStackTrace": null, "matches": ["+0000000000", "0", "+0"], "nonMatches": ["+00000000000", "+", "++0"]}, {"regex": "^((\\+92)|(0092))-{0,1}\\d{3}-{0,1}\\d{7}$|^\\d{11}$|^\\d{4}-\\d{7}$", "exceptionStackTrace": null, "matches": ["+92-0000000000", "+92000-0000000", "00920000000000", "+920000000000", "0000-0000000", "00000000000", "0092-000-0000000", "+92-000-0000000"], "nonMatches": ["0000-00000000", "0000-000000", "00000-0000000", "000-0000000", "000000000000", "0000000000", "+92-000-00000000", "+92-000-000000", "+92-000--0000000", "+92-0000-0000000", "+92-00-0000000", "+92--000-0000000"]}, {"regex": "([,!@#$%^&*()\\[\\]]+|\\\\\\.\\.|\\\\\\\\\\.|\\.\\.\\\\\\|\\.\\\\\\|\\.\\.\\/|\\.\\/|\\/\\.\\.|\\/\\.|;|(?<![A-Z]):)", "exceptionStackTrace": null, "matches": ["]]", "^", "[", "@", ",", "*", ")", "(", "&", "%", "$", "#", "!", ":", ";", "/.", "/..", "./", "..\\|.\\|../", "\\\\.", "\\..", "]"], "nonMatches": [""]}, {"regex": "^((\\+[1-9]{1}[0-9]{0,3})?\\s?(\\([1-9]{1}[0-9]{0,3}\\)))?\\s?(\\b\\d{1,9}\\b)$", "exceptionStackTrace": null, "matches": ["+10 (10) 000000000", "+10 (10)0", " 0", "+10 (1000) 0", "+10 (1) 0", "+10 (110) 0", "+10(10) 0", " (10) 0", "+1000 (10) 0", "+1 (10) 0", "+110 (10) 0", "0", "+10 (10) 0"], "nonMatches": ["+10 (10) 0000000000", "+10 (10) ", "+10 (10)  0", "+10 (10)+10 (10) 0", "+10 (10000) 0", "+10 (0) 0", "+10 (00) 0", "+10  (10) 0", "+10+10 (10) 0", "+10000 (10) 0", "+0 (10) 0", "+00 (10) 0"]}, {"regex": "(script)|(&lt;)|(&gt;)|(%3c)|(%3e)|(SELECT) |(UPDATE) |(INSERT) |(DELETE)|(GRANT) |(REVOKE)|(UNION)|(&amp;lt;)|(&amp;gt;)", "exceptionStackTrace": null, "matches": ["&amp;gt;", "&amp;lt;", "UNION", "REVOKE", "GRANT ", "DELETE", "INSERT ", "UPDATE ", "SELECT ", "%3e", "%3c", "&gt;", "&lt;", "script"], "nonMatches": []}, {"regex": "(^([0-9]+[.]+[0-9]+)|(0)$)", "exceptionStackTrace": null, "matches": ["0.00", "0..0", "00", "00.0", ".0", "0", "0.0"], "nonMatches": ["0."]}, {"regex": "^(100(\\.0{0,2}?)?$|([1-9]|[1-9][0-9])(\\.\\d{1,2})?)$", "exceptionStackTrace": null, "matches": ["1.00", "100.00", "100.", "10", "1", "100", "10.0", "1.0", "100.0"], "nonMatches": ["00.0", "1.0.0", "1.000", "1.", "0.0", "100.0.0", "100.000"]}, {"regex": "^((([0]?[1-9]|1[0-2])(:|\\.)[0-5][0-9]((:|\\.)[0-5][0-9])?( )?(AM|am|aM|Am|PM|pm|pM|Pm))|(([0]?[0-9]|1[0-9]|2[0-3])(:|\\.)[0-5][0-9]((:|\\.)[0-5][0-9])?))$", "exceptionStackTrace": null, "matches": ["00:00", "0:00:00", "01:00:00AM", "01:00 AM", "1:00:00 AM", "20:00", "10:00", "0.00", "0:00", "10:00AM", "1.00AM", "1:00Pm", "1:00pM", "1:00pm", "1:00PM", "1:00Am", "1:00aM", "1:00am", "1:00AM", "20:00:00", "10:00:00", "00.00:00", "00:00.00", "00:00:00", "10:00:00 AM", "01.00:00 AM", "01:00.00 AM", "01:00:00 Pm", "01:00:00 pM", "01:00:00 pm", "01:00:00 PM", "01:00:00 Am", "01:00:00 aM", "01:00:00 am", "01:00:00 AM"], "nonMatches": ["24:00:00", "00:00:00:00", "00:00:60", "00:60:00", "000:00:00", "13:00:00 AM", "01:00:00  AM", "01:00:00:00 AM", "01:00:60 AM", "01:60:00 AM", "00:00:00 AM", "001:00:00 AM"]}, {"regex": "Gmail help", "exceptionStackTrace": null, "matches": ["Gmail help"], "nonMatches": []}, {"regex": "(^1300\\d{6}$)|(^1800|1900|1902\\d{6}$)|(^0[2|3|7|8]{1}[0-9]{8}$)|(^13\\d{4}$)|(^04\\d{2,3}\\d{6}$)", "exceptionStackTrace": null, "matches": ["04000000000", "0|00000000", "0700000000", "0300000000", "0200000000", "0400000000", "130000", "0800000000", "1902000000", "1900", "1800", "1300000000"], "nonMatches": ["040000000000", "040000000", "1300000", "13000", "08000000000", "080000000", "08800000000", "000000000", "0000000000", "19020000000", "190200000", "13000000000", "130000000"]}, {"regex": "^(( )*\\&#163;{0,1}( )*)\\d*(.\\d{1,2})?$", "exceptionStackTrace": null, "matches": [" &#163; 0", " &#163; 0a00", " &#163; 0A0", " &#163; 0;0", " &#163; 000", " &#163; 0&0", " &#163; 0#0", " &#163; 0 0", " &#163; 00a0", " &#163; a0", " &#163;  0a0", " &#163;0a0", " &#163 0a0", "  &#163; 0a0", "&#163; 0a0", "&#163", " &#163; 0a0"], "nonMatches": [" &#163; 0a0a0", " &#163; 0a000", " &#163; 0a", " &#163;; 0a0"]}, {"regex": "(([a-zA-Z]{3}[0-9]{3})|(\\w{2}-\\w{2}-\\w{2})|([0-9]{2}-[a-zA-Z]{3}-[0-9]{1})|([0-9]{1}-[a-zA-Z]{3}-[0-9]{2})|([a-zA-Z]{1}-[0-9]{3}-[a-zA-Z]{2}))", "exceptionStackTrace": null, "matches": ["A-000-AAA", "A-000-aA", "AA-000-AA", "a-000-AA", "0-AAA-000", "0-aAA-00", "00-AAA-00", "00-aAA-0", "000-AAA-0", "aa-aa-aaa", "aa-aa-_a", "aa-aa-Aa", "aa-aa-0a", "aa-_a-aa", "aa-Aa-aa", "aa-0a-aa", "aaa-aa-aa", "_a-aa-aa", "Aa-aa-aa", "0a-aa-aa", "AAA0000", "AAAA000", "aAA000", "A-000-AA", "0-AAA-00", "00-AAA-0", "aa-aa-aa", "AAA000"], "nonMatches": ["A-000-A", "A-0000-AA", "A-00-AA", "-000-AA", "0-AAAA-00", "0-AA-00", "-AAA-00", "00-AAA-", "00-AAAA-0", "00-AA-0", "0-AAA-0", "aa-aa-a", "aa-aaa-aa", "aa-a-aa", "a-aa-aa", "AAA00", "AA000"]}, {"regex": "(LOC[^&#39;]*&#39;)(GID[^&#39;]*&#39;)?(GDS[^&#39;]*&#39;)?(FTX[^&#39;]*&#39;){0,9}(MEA[^&#39;]*&#39;){1,9}(DIM[^&#39;]*&#39;){0,9}(TMP[^&#39;]*&#39;)?(RNG[^&#39;]*&#39;)?(LOC[^&#39;]*&#39;){0,9}(RFF[^&#39;]*&#39;)((EQD[^&#39;]*&#39;)(EQA[^&#39;]*&#39;){0,9}(NAD[^&#39;]*&#39;)?){0,3}", "exceptionStackTrace": null, "matches": ["LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NAD;&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NAD&&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NAD#&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADeVil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADEVIL&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADev_il&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADev il&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADev4il&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADe&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NAD &#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NAD6&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NAD_&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NAD&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;EQAevil&#39;EQAevil&#39;EQAevil&#39;EQAevil&#39;EQAevil&#39;EQAevil&#39;EQAevil&#39;EQAevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;EQAevil&#39;EQAevil&#39;EQAevil&#39;EQAevil&#39;EQAevil&#39;EQAevil&#39;EQAevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQA;&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQA&&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQA#&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAeVil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAEVIL&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAev_il&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAev il&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAev4il&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAe&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQA &#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQA6&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQA_&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQA&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQD;&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQD&&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQD#&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDeVil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDEVIL&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDev_il&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDev il&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDev4il&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDe&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQD &#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQD6&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQD_&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQD&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFeVil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFEVIL&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFev_il&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFev il&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFev4il&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFe&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFF &#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFF6&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFF_&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFF&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCeVil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCEVIL&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCev_il&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCev il&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCev4il&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCe&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOC &#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOC6&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOC_&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOC&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGeVil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGEVIL&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGev_il&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGev il&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGev4il&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGe&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNG &#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNG6&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNG_&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNG&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPeVil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPEVIL&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPev_il&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPev il&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPev4il&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPe&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMP &#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMP6&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMP_&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMP&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;DIMevil&#39;DIMevil&#39;DIMevil&#39;DIMevil&#39;DIMevil&#39;DIMevil&#39;DIMevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMeVil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMEVIL&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMev_il&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMev il&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMev4il&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMe&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIM &#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIM6&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIM_&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIM&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;MEAevil&#39;MEAevil&#39;MEAevil&#39;MEAevil&#39;MEAevil&#39;MEAevil&#39;MEAevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAeVil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAEVIL&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAev_il&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAev il&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAev4il&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAe&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEA &#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEA6&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEA_&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEA&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;FTXevil&#39;FTXevil&#39;FTXevil&#39;FTXevil&#39;FTXevil&#39;FTXevil&#39;FTXevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXeVil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXEVIL&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXev_il&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXev il&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXev4il&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXe&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTX &#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTX6&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTX_&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTX&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSeVil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSEVIL&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSev_il&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSev il&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSev4il&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSe&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDS &#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDS6&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDS_&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDS&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDeVil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDEVIL&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDev_il&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDev il&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDev4il&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDe&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GID &#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GID6&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GID_&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GID&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCeVil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCEVIL&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCev_il&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCev il&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCev4il&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCe&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOC &#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOC6&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOC_&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOC&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOC&#39;MEA&#39;RFF&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;"], "nonMatches": ["LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFF;&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFF&&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFF#&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOC;&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOC&&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOC#&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNG;&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNG&&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNG#&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMP;&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMP&&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMP#&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;DIMevil&#39;DIMevil&#39;DIMevil&#39;DIMevil&#39;DIMevil&#39;DIMevil&#39;DIMevil&#39;DIMevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIM;&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIM&&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIM#&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;MEAevil&#39;MEAevil&#39;MEAevil&#39;MEAevil&#39;MEAevil&#39;MEAevil&#39;MEAevil&#39;MEAevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEA;&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEA&&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEA#&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;FTXevil&#39;FTXevil&#39;FTXevil&#39;FTXevil&#39;FTXevil&#39;FTXevil&#39;FTXevil&#39;FTXevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTX;&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTX&&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;FTX#&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDSevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDS;&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDS&&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GDS#&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GIDevil&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GID;&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GID&&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOCevil&#39;GID#&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOC;&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOC&&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;", "LOC#&#39;GIDevil&#39;GDSevil&#39;FTXevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;LOCevil&#39;RFFevil&#39;EQDevil&#39;EQAevil&#39;NADevil&#39;"]}, {"regex": "((EQD[^&#39;]*&#39;)(RFF[^&#39;]*&#39;){0,9}(EQN[^&#39;]*&#39;)?(TMD[^&#39;]*&#39;){0,9}(DTM[^&#39;]*&#39;){0,9}(LOC[^&#39;]*&#39;){0,9}(MEA[^&#39;]*&#39;){0,9}(DIM[^&#39;]*&#39;){0,9}(TMP[^&#39;]*&#39;){0,9}(RNG[^&#39;]*&#39;){0,9}(SEL[^&#39;]*&#39;){0,9}(FTX[^&#39;]*&#39;){0,9}(DGS[^&#39;]*&#39;){0,9}(EQA[^&#39;]*&#39;){0,9}(NAD[^&#39;]*&#39;)?)((TDT[^&#39;]*&#39;)(RFF[^&#39;]*&#39;){0,9}(LOC[^&#39;]*&#39;){0,9}(DTM[^&#39;]*&#39;){0,9})?", "exceptionStackTrace": null, "matches": ["EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;DTMevil&#39;DTMevil&#39;DTMevil&#39;DTMevil&#39;DTMevil&#39;DTMevil&#39;DTMevil&#39;DTMevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;DTMevil&#39;DTMevil&#39;DTMevil&#39;DTMevil&#39;DTMevil&#39;DTMevil&#39;DTMevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTM;&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTM&&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTM#&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMeVil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMEVIL&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMev_il&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMev il&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMev4il&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMe&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTM &#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTM6&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTM_&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTM&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOC;&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOC&&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOC#&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCeVil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCEVIL&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCev_il&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCev il&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCev4il&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCe&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOC &#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOC6&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOC_&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOC&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;RFFevil&#39;RFFevil&#39;RFFevil&#39;RFFevil&#39;RFFevil&#39;RFFevil&#39;RFFevil&#39;RFFevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;RFFevil&#39;RFFevil&#39;RFFevil&#39;RFFevil&#39;RFFevil&#39;RFFevil&#39;RFFevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFF;&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFF&&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFF#&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFeVil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFEVIL&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFev_il&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFev il&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFev4il&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFe&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFF &#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFF6&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFF_&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFF&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDT;&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDT&&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDT#&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTeVil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTEVIL&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTev_il&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTev il&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTev4il&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTe&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDT &#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDT6&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDT_&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDT&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NAD;&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NAD&&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NAD#&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADeVil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADEVIL&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADev_il&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADev il&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADev4il&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADe&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NAD &#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NAD6&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NAD_&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NAD&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;EQAevil&#39;EQAevil&#39;EQAevil&#39;EQAevil&#39;EQAevil&#39;EQAevil&#39;EQAevil&#39;EQAevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;EQAevil&#39;EQAevil&#39;EQAevil&#39;EQAevil&#39;EQAevil&#39;EQAevil&#39;EQAevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQA;&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQA&&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQA#&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAeVil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAEVIL&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAev_il&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAev il&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAev4il&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAe&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQA &#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQA6&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQA_&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQA&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;DGSevil&#39;DGSevil&#39;DGSevil&#39;DGSevil&#39;DGSevil&#39;DGSevil&#39;DGSevil&#39;DGSevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;DGSevil&#39;DGSevil&#39;DGSevil&#39;DGSevil&#39;DGSevil&#39;DGSevil&#39;DGSevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGS;&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGS&&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGS#&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSeVil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSEVIL&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSev_il&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSev il&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSev4il&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSe&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGS &#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGS6&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGS_&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGS&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;FTXevil&#39;FTXevil&#39;FTXevil&#39;FTXevil&#39;FTXevil&#39;FTXevil&#39;FTXevil&#39;FTXevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;FTXevil&#39;FTXevil&#39;FTXevil&#39;FTXevil&#39;FTXevil&#39;FTXevil&#39;FTXevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTX;&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTX&&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTX#&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXeVil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXEVIL&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXev_il&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXev il&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXev4il&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXe&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTX &#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTX6&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTX_&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTX&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;SELevil&#39;SELevil&#39;SELevil&#39;SELevil&#39;SELevil&#39;SELevil&#39;SELevil&#39;SELevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;SELevil&#39;SELevil&#39;SELevil&#39;SELevil&#39;SELevil&#39;SELevil&#39;SELevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SEL;&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SEL&&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SEL#&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELeVil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELEVIL&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELev_il&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELev il&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELev4il&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELe&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SEL &#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SEL6&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SEL_&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SEL&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;RNGevil&#39;RNGevil&#39;RNGevil&#39;RNGevil&#39;RNGevil&#39;RNGevil&#39;RNGevil&#39;RNGevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;RNGevil&#39;RNGevil&#39;RNGevil&#39;RNGevil&#39;RNGevil&#39;RNGevil&#39;RNGevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNG;&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNG&&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNG#&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGeVil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGEVIL&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGev_il&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGev il&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGev4il&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGe&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNG &#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNG6&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNG_&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNG&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;TMPevil&#39;TMPevil&#39;TMPevil&#39;TMPevil&#39;TMPevil&#39;TMPevil&#39;TMPevil&#39;TMPevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;TMPevil&#39;TMPevil&#39;TMPevil&#39;TMPevil&#39;TMPevil&#39;TMPevil&#39;TMPevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMP;&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMP&&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMP#&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPeVil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPEVIL&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPev_il&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPev il&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPev4il&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPe&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMP &#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMP6&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMP_&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMP&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;DIMevil&#39;DIMevil&#39;DIMevil&#39;DIMevil&#39;DIMevil&#39;DIMevil&#39;DIMevil&#39;DIMevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;DIMevil&#39;DIMevil&#39;DIMevil&#39;DIMevil&#39;DIMevil&#39;DIMevil&#39;DIMevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIM;&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIM&&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIM#&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMeVil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMEVIL&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMev_il&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMev il&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMev4il&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMe&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIM &#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIM6&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIM_&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIM&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;MEAevil&#39;MEAevil&#39;MEAevil&#39;MEAevil&#39;MEAevil&#39;MEAevil&#39;MEAevil&#39;MEAevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;MEAevil&#39;MEAevil&#39;MEAevil&#39;MEAevil&#39;MEAevil&#39;MEAevil&#39;MEAevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEA;&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEA&&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEA#&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAeVil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAEVIL&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAev_il&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAev il&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAev4il&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAe&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEA &#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEA6&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEA_&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEA&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOC;&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOC&&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOC#&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCeVil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCEVIL&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCev_il&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCev il&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCev4il&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCe&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOC &#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOC6&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOC_&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOC&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;DTMevil&#39;DTMevil&#39;DTMevil&#39;DTMevil&#39;DTMevil&#39;DTMevil&#39;DTMevil&#39;DTMevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;DTMevil&#39;DTMevil&#39;DTMevil&#39;DTMevil&#39;DTMevil&#39;DTMevil&#39;DTMevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTM;&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTM&&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTM#&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMeVil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMEVIL&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMev_il&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMev il&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMev4il&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMe&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTM &#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTM6&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTM_&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTM&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;TMDevil&#39;TMDevil&#39;TMDevil&#39;TMDevil&#39;TMDevil&#39;TMDevil&#39;TMDevil&#39;TMDevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;TMDevil&#39;TMDevil&#39;TMDevil&#39;TMDevil&#39;TMDevil&#39;TMDevil&#39;TMDevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMD;&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMD&&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMD#&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDeVil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDEVIL&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDev_il&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDev il&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDev4il&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDe&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMD &#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMD6&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMD_&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMD&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQN;&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQN&&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQN#&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNeVil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNEVIL&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNev_il&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNev il&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNev4il&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQNe&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQN &#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQN6&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQN_&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;EQN&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;RFFevil&#39;RFFevil&#39;RFFevil&#39;RFFevil&#39;RFFevil&#39;RFFevil&#39;RFFevil&#39;RFFevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFevil&#39;RFFevil&#39;RFFevil&#39;RFFevil&#39;RFFevil&#39;RFFevil&#39;RFFevil&#39;RFFevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFF;&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFF&&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFF#&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFeVil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFEVIL&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFev_il&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFev il&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFev4il&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFFe&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFF &#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFF6&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFF_&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDevil&#39;RFF&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDeVil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDEVIL&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDev_il&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDev il&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDev4il&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQDe&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQD &#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQD6&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQD_&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQD&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQD&#39;", "EQDevil&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;"], "nonMatches": ["EQD;&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQD&&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;", "EQD#&#39;RFFevil&#39;EQNevil&#39;TMDevil&#39;DTMevil&#39;LOCevil&#39;MEAevil&#39;DIMevil&#39;TMPevil&#39;RNGevil&#39;SELevil&#39;FTXevil&#39;DGSevil&#39;EQAevil&#39;NADevil&#39;TDTevil&#39;RFFevil&#39;LOCevil&#39;DTMevil&#39;"]}, {"regex": "^((\\D*[a-z]\\D*[A-Z]\\D*)|(\\D*[A-Z]\\D*[a-z]\\D*)|(\\D*\\W\\D*[a-z])|(\\D*\\W\\D*[A-Z])|(\\D*[a-z]\\D*\\W)|(\\D*[A-Z]\\D*\\W))$", "exceptionStackTrace": null, "matches": ["evilAevil_", "evilAevil ", "evilAeVil;", "evilAEVIL;", "evilAev_il;", "evilAev il;", "evilAe;", "evilA ;", "evilA_;", "evilA;", "eVilAevil;", "EVILAevil;", "ev_ilAevil;", "ev ilAevil;", "eAevil;", " Aevil;", "_Aevil;", "Aevil;", "evilaevil ", "evilaeVil;", "evilaEVIL;", "evilaev_il;", "evilaev il;", "evilae;", "evila ;", "evila_;", "evila;", "eVilaevil;", "EVILaevil;", "ev_ilaevil;", "ev ilaevil;", "eaevil;", " aevil;", "_aevil;", "aevil;", "evil;eVilA", "evil;EVILA", "evil;ev_ilA", "evil;ev ilA", "evil;eA", "evil; A", "evil;_A", "evil;A", "evil_evilA", "evilAevilA", "evil evilA", "eVil;evilA", "EVIL;evilA", "ev_il;evilA", "ev il;evilA", "e;evilA", " ;evilA", "_;evilA", ";evilA", "evil;eVila", "evil;EVILa", "evil;ev_ila", "evil;ev ila", "evil;ea", "evil; a", "evil;_a", "evil;a", "evil evila", "eVil;evila", "EVIL;evila", "ev_il;evila", "ev il;evila", "e;evila", " ;evila", "_;evila", ";evila", "evilAevilaeVil", "evilAevilaEVIL", "evilAevilaev_il", "evilAevilaev il", "evilAevilae", "evilAevila ", "evilAevila_", "evilAevila", "evilAeVilaevil", "evilAEVILaevil", "evilAev_ilaevil", "evilAev ilaevil", "evilAeaevil", "evilA aevil", "evilA_aevil", "evilAaevil", "eVilAevilaevil", "EVILAevilaevil", "ev_ilAevilaevil", "ev ilAevilaevil", "eAevilaevil", " Aevilaevil", "_Aevilaevil", "Aevilaevil", "evilaevilAeVil", "evilaevilAEVIL", "evilaevilAev_il", "evilaevilAev il", "evilaevilAe", "evilaevilA ", "evilaevilA_", "evilaevilA", "evilaeVilAevil", "evilaEVILAevil", "evilaev_ilAevil", "evilaev ilAevil", "evilaeAevil", "evila Aevil", "evila_Aevil", "evilaAevil", "eVilaevilAevil", "EVILaevilAevil", "ev_ilaevilAevil", "ev ilaevilAevil", "eaevilAevil", " aevilAevil", "_aevilAevil", "aevilAevil", "A;", "a;", ";A", ";a", "Aa", "aA", "evilAevil;", "evilaevil;", "evil;evilA", "evil;evila", "evilAevilaevil", "evilaevilAevil"], "nonMatches": ["evilAevil0", "evilAev4il;", "evilA6;", "ev4ilAevil;", "6Aevil;", "evilaevil_", "evilaevil0", "evilaev4il;", "evila6;", "ev4ilaevil;", "6aevil;", "evil;ev4ilA", "evil;6A", "evil0evilA", "ev4il;evilA", "6;evilA", "evil;ev4ila", "evil;6a", "evilaevila", "evil_evila", "evil0evila", "ev4il;evila", "6;evila", "evilAevilaev4il", "evilAevila6", "evilAev4ilaevil", "evilA6aevil", "ev4ilAevilaevil", "6Aevilaevil", "evilaevilAev4il", "evilaevilA6", "evilaev4ilAevil", "evila6Aevil", "ev4ilaevilAevil", "6aevilAevil"]}, {"regex": "^.*(?=.{6,10})(?=.*[a-zA-Z].*[a-zA-Z].*[a-zA-Z].*[a-zA-Z])(?=.*\\d.*\\d).*$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["evileVil", "evilEVIL", "evilev_il", "evilev il", "evilev4il", "evile", "evil ", "evil6", "evil_", "eVilevil", "EVILevil", "ev_ilevil", "ev ilevil", "ev4ilevil", "eevil", " evil", "6evil", "_evil", "evil", "", "evilevil"]}, {"regex": "&lt;!\\[CDATA\\[([^\\]]*)\\]\\]&gt;", "exceptionStackTrace": null, "matches": ["&lt;![CDATA[[]]&gt;", "&lt;![CDATA[;]]&gt;", "&lt;![CDATA[&]]&gt;", "&lt;![CDATA[!]]&gt;", "&lt;![CDATA[eVil]]&gt;", "&lt;![CDATA[EVIL]]&gt;", "&lt;![CDATA[ev_il]]&gt;", "&lt;![CDATA[ev il]]&gt;", "&lt;![CDATA[ev4il]]&gt;", "&lt;![CDATA[e]]&gt;", "&lt;![CDATA[ ]]&gt;", "&lt;![CDATA[6]]&gt;", "&lt;![CDATA[_]]&gt;", "&lt;![CDATA[]]&gt;", "&lt;![CDATA[evil]]&gt;"], "nonMatches": ["&lt;![CDATA[]]]&gt;"]}, {"regex": "^(19|20)[0-9]{2}-((01|03|05|07|08|10|12)-(0[1-9]|[12][0-9]|3[01]))|(02-(0[1-9]|[12][0-9]))|((04|06|09|11)-(0[1-9]|[12][0-9]|30))$", "exceptionStackTrace": null, "matches": ["04-10", "02-10", "1900-01-30", "1900-01-10", "11-01", "09-01", "06-01", "04-30", "04-20", "04-01", "02-20", "02-01", "2000-01-01", "1900-12-01", "1900-10-01", "1900-08-01", "1900-07-01", "1900-05-01", "1900-03-01", "1900-01-31", "1900-01-20", "1900-01-01"], "nonMatches": ["04-00", "02-00", "1900-01-32", "1900-01-00", "19000-01-01", "190-01-01"]}, {"regex": "^((((0?[13578])|(1[02]))[\\-]?((0?[1-9]|[0-2][0-9])|(3[01])))|(((0?[469])|(11))[\\-]?((0?[1-9]|[0-2][0-9])|(30)))|(0?[2][\\-]?(0?[1-9]|[0-2][0-9])))[\\-]?\\d{2}$", "exceptionStackTrace": null, "matches": ["02-1-00", "0201-00", "2-01-00", "09-1-00", "0901-00", "06-01-00", "04-01-00", "9-01-00", "10-01-00", "08-30-00", "08-0100", "08-1-00", "0801-00", "07-01-00", "05-01-00", "03-01-00", "01-01-00", "8-01-00", "20000", "2100", "11100", "93000", "90000", "9100", "12100", "83100", "80000", "8100", "02-00-00", "02-01-00", "11-01-00", "09-30-00", "09-00-00", "09-01-00", "12-01-00", "08-31-00", "08-00-00", "08-01-00"], "nonMatches": ["02-30-00", "02-001-00", "02--01-00", "002-01-00", "09-001-00", "09--01-00", "009-01-00", "08-32-00", "08-01-000", "08-01-0", "08-01--00", "08-001-00", "08--01-00", "00-01-00", "008-01-00"]}, {"regex": "(.*\\.jpe?g|.*\\.JPE?G)", "exceptionStackTrace": null, "matches": ["evil.JPG", "..JPEG", "eVil.JPEG", "EVIL.JPEG", "ev_il.JPEG", "ev il.JPEG", "ev4il.JPEG", "e.JPEG", " .JPEG", "6.JPEG", "_.JPEG", ".JPEG", "evil.jpg", "..jpeg", "eVil.jpeg", "EVIL.jpeg", "ev_il.jpeg", "ev il.jpeg", "ev4il.jpeg", "e.jpeg", " .jpeg", "6.jpeg", "_.jpeg", ".jpeg", ".JPG", ".jpg", "evil.JPEG", "evil.jpeg"], "nonMatches": ["evil.JPEEG", "evil.jpeeg"]}, {"regex": "(^([1-9]|[1][0-2]):([0-5][0-9])(\\s{0,1})(AM|PM|am|pm|aM|Am|pM|Pm{2,2})$)|(^([0-9]|[1][0-9]|[2][0-3]):([0-5][0-9])$)|(^([1-9]|[1][0-2])(\\s{0,1})(AM|PM|am|pm|aM|Am|pM|Pm{2,2})$)|(^([0-9]|[1][0-9]|[2][0-3])$)", "exceptionStackTrace": null, "matches": ["10AM", "1Pmm", "1pM", "1Am", "1aM", "1pm", "1am", "1PM", "1AM", "10:00AM", "1:00Pmm", "1:00pM", "1:00Am", "1:00aM", "1:00pm", "1:00am", "1:00PM", "1:00AM", "20", "10", "0", "10 AM", "1 Pmm", "1 pM", "1 Am", "1 aM", "1 pm", "1 am", "1 PM", "1 AM", "20:00", "10:00", "0:00", "10:00 AM", "1:00 Pmm", "1:00 pM", "1:00 Am", "1:00 aM", "1:00 pm", "1:00 am", "1:00 PM", "1:00 AM"], "nonMatches": ["24", "13 AM", "1 Pmmm", "1 Pm", "1  AM", "0 AM", "24:00", "0:60", "13:00 AM", "1:00 Pmmm", "1:00 Pm", "1:00  AM", "1:60 AM", "0:00 AM"]}, {"regex": "^(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])$", "exceptionStackTrace": null, "matches": ["100.250.250.250", "110.250.250.250", "250.100.250.250", "250.110.250.250", "250.250.100.250", "250.250.110.250", "250.250.250.100", "250.250.250.1", "250.250.250.110", "1.250.250.250", "10.250.250.250", "000.250.250.250", "200.250.250.250", "250.0.250.250", "250.1.250.250", "250.10.250.250", "250.000.250.250", "250.200.250.250", "250.250.0.250", "250.250.1.250", "250.250.10.250", "250.250.000.250", "250.250.200.250", "250.250.250.0", "250.250.250.10", "250.250.250.000", "250.250.250.200", "250.250.250.250"], "nonMatches": ["0.250.250.250", "0000.250.250.250", "00.250.250.250", "250.0000.250.250", "250.00.250.250", "250.250.0000.250", "250.250.00.250", "250.250.250.0000", "250.250.250.00", "250.250.250.256", "250.250.256.250", "250.256.250.250", "256.250.250.250"]}, {"regex": "^[a-zA-Z0-9\\-\\.]+\\.(com|org|net|mil|edu|COM|ORG|NET|MIL|EDU)$", "exceptionStackTrace": null, "matches": ["..com", "-.com", "eVil.com", "EVIL.com", "ev4il.com", "e.com", "6.com", "evil.EDU", "evil.MIL", "evil.NET", "evil.ORG", "evil.COM", "evil.edu", "evil.mil", "evil.net", "evil.org", "evil.com"], "nonMatches": ["ev_il.com", "ev il.com", " .com", "_.com", ".com"]}, {"regex": "megaupload\\.com.*(?:\\?|&)(?:(?:folderi)?d|f)=([A-Z-a-z0-9]{8})", "exceptionStackTrace": null, "matches": ["megaupload.comevil?folderid=---------", "megaupload.comevil?folderid=a-------", "megaupload.comevil?folderid=A-------", "megaupload.comevil?folderid=0-------", "megaupload.comevil?d=--------", "megaupload.com??folderid=--------", "megaupload.com=?folderid=--------", "megaupload.com.?folderid=--------", "megaupload.com-?folderid=--------", "megaupload.com&?folderid=--------", "megaupload.comeVil?folderid=--------", "megaupload.comEVIL?folderid=--------", "megaupload.comev_il?folderid=--------", "megaupload.comev il?folderid=--------", "megaupload.comev4il?folderid=--------", "megaupload.come?folderid=--------", "megaupload.com ?folderid=--------", "megaupload.com6?folderid=--------", "megaupload.com_?folderid=--------", "megaupload.com?folderid=--------", "megaupload.com&d=--------", "megaupload.com?f=--------", "megaupload.com?d=--------", "megaupload.comevil&folderid=--------", "megaupload.comevil?f=--------", "megaupload.comevil?folderid=--------"], "nonMatches": ["megaupload.comevil?folderid=-------", "megaupload.comevil?folderifolderid=--------"]}, {"regex": "^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}$", "exceptionStackTrace": null, "matches": ["1.250.200.200", "1.250.0.0", "1.200.0.0", "1.100.0.0", "1.10.0.0", "250.0.0.0", "200.0.0.0", "100.0.0.0", "10.0.0.0", "1.250.250.250", "1.200.200.200", "1.100.100.100", "1.10.10.10", "1.0.0.0"], "nonMatches": ["256.0.0.0", "00.0.0.0", "1.256.250.250", "1.00.10.10", "1.0.0.0.0", "1.0.0", "0.0.0.0"]}, {"regex": "\\b([a-z]+)(?:(?<=emphas|fantas)|(?<!ba|ma|pr|se|s))([iy])z(a(?:bl[ey]|tion(?:|al(?:|ly)|s))|es?|ed|ers?|ing)\\b", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "look-behind requires fixed-width pattern"}, "matches": []}, {"regex": "\\b([a-z]+)(?:(?<=ic|[ai]m|[^a-z]pr|[eiou][tr])|(?<![rd]a|c|gu|m|parad|o|p|r|[acrs]t|v|w))([iy])s(a(?:bl[ey]|tion(?:|al(?:|ly)|s))|e|ed|ers?|(?<!ys)es|ing)\\b", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "look-behind requires fixed-width pattern"}, "matches": []}, {"regex": "dfgdfgdfgdfg", "exceptionStackTrace": null, "matches": ["dfgdfgdfgdfg"], "nonMatches": []}, {"regex": "g hth", "exceptionStackTrace": null, "matches": ["g hth"], "nonMatches": []}, {"regex": "^[0]*?[1-9]\\d*\\.?[0]*$", "exceptionStackTrace": null, "matches": ["010.00", "010.", "0100", "0100.0", "01.0", "0010.0", "10.0", "1", "010.0"], "nonMatches": ["010..0", "000.0"]}, {"regex": "^([a-z]+?\\.[a-z]+)+\\%$", "exceptionStackTrace": null, "matches": ["evil.evilevil.evil%", "evil.e%", "e.evil%", "evil.evil%"], "nonMatches": ["%", "evil.eVil%", "evil.EVIL%", "evil.ev_il%", "evil.ev il%", "evil.ev4il%", "evil. %", "evil.6%", "evil._%", "evil.%", "eVil.evil%", "EVIL.evil%", "ev_il.evil%", "ev il.evil%", "ev4il.evil%", " .evil%", "6.evil%", "_.evil%", ".evil%"]}, {"regex": "runescape", "exceptionStackTrace": null, "matches": ["runescape"], "nonMatches": []}, {"regex": "\\b(0?[1-9]|1[0-2])(\\/)(0?[1-9]|1[0-9]|2[0-9]|3[0-1])(\\/)(0[0-8])\\b ", "exceptionStackTrace": null, "matches": ["01/1/00 ", "1/01/00 ", "10/1/00 ", "1/30/00 ", "1/20/00 ", "1/10/00 ", "1/1/00 ", "10/01/00 ", "01/30/00 ", "01/20/00 ", "01/10/00 ", "01/01/00 "], "nonMatches": ["13/01/00 ", "01/32/00 ", "01/01/09 ", "01/00/00 ", "01/001/00 ", "00/01/00 ", "001/01/00 "]}, {"regex": "\\b(0?[1-9]|1[0-2])(\\-)(0?[1-9]|1[0-9]|2[0-9]|3[0-1])(\\-)(0[0-8])\\b ", "exceptionStackTrace": null, "matches": ["01-1-00 ", "1-01-00 ", "10-1-00 ", "1-30-00 ", "1-20-00 ", "1-10-00 ", "1-1-00 ", "10-01-00 ", "01-30-00 ", "01-20-00 ", "01-10-00 ", "01-01-00 "], "nonMatches": ["13-01-00 ", "01-32-00 ", "01-01-09 ", "01-00-00 ", "01-001-00 ", "00-01-00 ", "001-01-00 "]}, {"regex": "\\b(0[0-9]|1[0-9]|2[0-3])(\\:)(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])(\\:)(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])\\b", "exceptionStackTrace": null, "matches": ["20:00:00", "10:00:00", "00:50:00", "00:40:00", "00:30:00", "00:20:00", "00:10:00", "00:00:50", "00:00:40", "00:00:30", "00:00:20", "00:00:10", "00:00:00"], "nonMatches": ["24:00:00"]}, {"regex": "\\b(0[0-9]|1[0-1])(\\:)(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])(\\:)(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])\\b", "exceptionStackTrace": null, "matches": ["10:00:00", "00:50:00", "00:40:00", "00:30:00", "00:20:00", "00:10:00", "00:00:50", "00:00:40", "00:00:30", "00:00:20", "00:00:10", "00:00:00"], "nonMatches": ["12:00:00"]}, {"regex": "\\b(0[0-9]|1[0-1])(\\:)(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])(\\:)(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])\\s*(AM|PM|A|P)\\b", "exceptionStackTrace": null, "matches": ["00:00:00  AM", "10:00:00AM", "00:50:00AM", "00:40:00AM", "00:30:00AM", "00:20:00AM", "00:10:00AM", "00:00:50AM", "00:00:40AM", "00:00:30AM", "00:00:20AM", "00:00:10AM", "00:00:00P", "00:00:00A", "00:00:00PM", "00:00:00AM", "10:00:00 AM", "00:50:00 AM", "00:40:00 AM", "00:30:00 AM", "00:20:00 AM", "00:10:00 AM", "00:00:50 AM", "00:00:40 AM", "00:00:30 AM", "00:00:20 AM", "00:00:10 AM", "00:00:00 P", "00:00:00 A", "00:00:00 PM", "00:00:00 AM"], "nonMatches": ["12:00:00 AM"]}, {"regex": "\\b(((J(ANUARY|UNE|ULY))|FEBRUARY|MARCH|(A(PRIL|UGUST))|MAY|(SEPT|NOV|DEC)EMBER|OCTOBER))\\s*(0?[1-9]|1[0-9]|2[0-9]|3[0-1])\\s*(\\,)\\s*(200[0-9])\\b", "exceptionStackTrace": null, "matches": ["JANUARY 01 ,  2000", "JANUARY 01 ,2000", "JANUARY 01  , 2000", "JANUARY 01, 2000", "JANUARY 1 , 2000", "JANUARY  01 , 2000", "JANUARY01 , 2000", "OCTOBER1,2000", "DECEMBER1,2000", "NOVEMBER1,2000", "SEPTEMBER1,2000", "MAY1,2000", "AUGUST1,2000", "APRIL1,2000", "MARCH1,2000", "FEBRUARY1,2000", "JULY1,2000", "JUNE1,2000", "JANUARY30,2000", "JANUARY20,2000", "JANUARY10,2000", "JANUARY1,2000", "OCTOBER 01 , 2000", "DECEMBER 01 , 2000", "NOVEMBER 01 , 2000", "SEPTEMBER 01 , 2000", "MAY 01 , 2000", "AUGUST 01 , 2000", "APRIL 01 , 2000", "MARCH 01 , 2000", "FEBRUARY 01 , 2000", "JULY 01 , 2000", "JUNE 01 , 2000", "JANUARY 30 , 2000", "JANUARY 20 , 2000", "JANUARY 10 , 2000", "JANUARY 01 , 2000"], "nonMatches": ["JANUARY 32 , 2000", "JANUARY 00 , 2000", "JANUARY 001 , 2000"]}, {"regex": "\\b(((J(ANUARY|UNE|ULY))|FEBRUARY|MARCH|(A(PRIL|UGUST))|MAY|(SEPT|NOV|DEC)EMBER|OCTOBER))\\s*(0?[1-9]|1[0-9]|2[0-9]|3[0-1])\\s*(\\,)\\s*(0[0-9])\\b", "exceptionStackTrace": null, "matches": ["JANUARY 01 ,  00", "JANUARY 01 ,00", "JANUARY 01  , 00", "JANUARY 01, 00", "JANUARY 1 , 00", "JANUARY  01 , 00", "JANUARY01 , 00", "OCTOBER1,00", "DECEMBER1,00", "NOVEMBER1,00", "SEPTEMBER1,00", "MAY1,00", "AUGUST1,00", "APRIL1,00", "MARCH1,00", "FEBRUARY1,00", "JULY1,00", "JUNE1,00", "JANUARY30,00", "JANUARY20,00", "JANUARY10,00", "JANUARY1,00", "OCTOBER 01 , 00", "DECEMBER 01 , 00", "NOVEMBER 01 , 00", "SEPTEMBER 01 , 00", "MAY 01 , 00", "AUGUST 01 , 00", "APRIL 01 , 00", "MARCH 01 , 00", "FEBRUARY 01 , 00", "JULY 01 , 00", "JUNE 01 , 00", "JANUARY 30 , 00", "JANUARY 20 , 00", "JANUARY 10 , 00", "JANUARY 01 , 00"], "nonMatches": ["JANUARY 32 , 00", "JANUARY 00 , 00", "JANUARY 001 , 00"]}, {"regex": "\\b((J(AN|UN|UL))|FEB|MAR|(A(PR|UG))|MAY|SEP|NOV|DEC|OCT)\\s*(0?[1-9]|1[0-9]|2[0-9]|3[0-1])\\s*(\\,)\\s*(200[0-9])\\b", "exceptionStackTrace": null, "matches": ["JAN 01 ,  2000", "JAN 01 ,2000", "JAN 01  , 2000", "JAN 01, 2000", "JAN 1 , 2000", "JAN  01 , 2000", "JAN01 , 2000", "OCT1,2000", "DEC1,2000", "NOV1,2000", "SEP1,2000", "MAY1,2000", "AUG1,2000", "APR1,2000", "MAR1,2000", "FEB1,2000", "JUL1,2000", "JUN1,2000", "JAN30,2000", "JAN20,2000", "JAN10,2000", "JAN1,2000", "OCT 01 , 2000", "DEC 01 , 2000", "NOV 01 , 2000", "SEP 01 , 2000", "MAY 01 , 2000", "AUG 01 , 2000", "APR 01 , 2000", "MAR 01 , 2000", "FEB 01 , 2000", "JUL 01 , 2000", "JUN 01 , 2000", "JAN 30 , 2000", "JAN 20 , 2000", "JAN 10 , 2000", "JAN 01 , 2000"], "nonMatches": ["JAN 32 , 2000", "JAN 00 , 2000", "JAN 001 , 2000"]}, {"regex": "\\b((J(AN|UN|UL))|FEB|MAR|(A(PR|UG))|MAY|SEP|NOV|DEC|OCT)\\s*(0?[1-9]|1[0-9]|2[0-9]|3[0-1])\\s*(\\,)\\s*(0[0-9])\\b", "exceptionStackTrace": null, "matches": ["JAN 01 ,  00", "JAN 01 ,00", "JAN 01  , 00", "JAN 01, 00", "JAN 1 , 00", "JAN  01 , 00", "JAN01 , 00", "OCT1,00", "DEC1,00", "NOV1,00", "SEP1,00", "MAY1,00", "AUG1,00", "APR1,00", "MAR1,00", "FEB1,00", "JUL1,00", "JUN1,00", "JAN30,00", "JAN20,00", "JAN10,00", "JAN1,00", "OCT 01 , 00", "DEC 01 , 00", "NOV 01 , 00", "SEP 01 , 00", "MAY 01 , 00", "AUG 01 , 00", "APR 01 , 00", "MAR 01 , 00", "FEB 01 , 00", "JUL 01 , 00", "JUN 01 , 00", "JAN 30 , 00", "JAN 20 , 00", "JAN 10 , 00", "JAN 01 , 00"], "nonMatches": ["JAN 32 , 00", "JAN 00 , 00", "JAN 001 , 00"]}, {"regex": "\\b(0?[1-9]|1[0-2])(\\/)(0?[1-9]|1[0-9]|2[0-9]|3[0-1])(\\/)(200[0-8])\\b", "exceptionStackTrace": null, "matches": ["01/1/2000", "1/01/2000", "10/1/2000", "1/30/2000", "1/20/2000", "1/10/2000", "1/1/2000", "10/01/2000", "01/30/2000", "01/20/2000", "01/10/2000", "01/01/2000"], "nonMatches": ["13/01/2000", "01/32/2000", "01/01/2009", "01/00/2000", "01/001/2000", "00/01/2000", "001/01/2000"]}, {"regex": "\\b(0?[1-9]|1[0-2])(\\-)(0?[1-9]|1[0-9]|2[0-9]|3[0-1])(\\-)(200[0-8])\\b", "exceptionStackTrace": null, "matches": ["01-1-2000", "1-01-2000", "10-1-2000", "1-30-2000", "1-20-2000", "1-10-2000", "1-1-2000", "10-01-2000", "01-30-2000", "01-20-2000", "01-10-2000", "01-01-2000"], "nonMatches": ["13-01-2000", "01-32-2000", "01-01-2009", "01-00-2000", "01-001-2000", "00-01-2000", "001-01-2000"]}, {"regex": "(\\$\\s*[\\d,]+\\.\\d{2})\\b", "exceptionStackTrace": null, "matches": ["$ ,,.00", "$ 0.00", "$  ,.00", "$,.00", "$ ,.00"], "nonMatches": ["$ ,.000", "$ ,.0", "$ .00"]}, {"regex": "\\b[1-9]\\b", "exceptionStackTrace": null, "matches": ["1"], "nonMatches": ["0"]}, {"regex": "\\b4[0-9]\\b", "exceptionStackTrace": null, "matches": ["40"], "nonMatches": []}, {"regex": "(\\d{1,2}(\\:|\\s)\\d{1,2}(\\:|\\s)\\d{1,2}\\s*(AM|PM|A|P))", "exceptionStackTrace": null, "matches": ["0:0:0  AM", "0:0:00 AM", "0:00:0 AM", "000:0:0 AM", "00:0:0 AM", "0 0:0AM", "0:0 0AM", "0:0:0P", "0:0:0A", "0:0:0PM", "0:0:0AM", "0 0:0 AM", "0:0 0 AM", "0:0:0 P", "0:0:0 A", "0:0:0 PM", "0:0:0 AM"], "nonMatches": ["0:0:000 AM", "0:0: AM", "0:000:0 AM", "0::0 AM", ":0:0 AM"]}, {"regex": "^.*(?:kumar).*$", "exceptionStackTrace": null, "matches": ["evilkumareVil", "evilkumarEVIL", "evilkumarev_il", "evilkumarev il", "evilkumarev4il", "evilkumare", "evilkumar ", "evilkumar6", "evilkumar_", "evilkumar", "eVilkumarevil", "EVILkumarevil", "ev_ilkumarevil", "ev ilkumarevil", "ev4ilkumarevil", "ekumarevil", " kumarevil", "6kumarevil", "_kumarevil", "kumarevil", "kumar", "evilkumarevil"], "nonMatches": []}, {"regex": "(\\b(1|2|3|4|5|6|7|8|9)?[0-9]\\b)", "exceptionStackTrace": null, "matches": ["0", "90", "80", "70", "60", "50", "40", "30", "20", "10"], "nonMatches": ["110"]}, {"regex": "(\\b(10|11|12|13|14|15|16|17|18|19)[0-9]\\b)", "exceptionStackTrace": null, "matches": ["190", "180", "170", "160", "150", "140", "130", "120", "110", "100"], "nonMatches": []}, {"regex": "^[0-9]{3}[-|/]{1}[0-9]{6}[-|/]{1}[0-9]{6}$", "exceptionStackTrace": null, "matches": ["000/000000|000000", "000/000000-000000", "000|000000/000000", "000-000000/000000", "000/000000/000000"], "nonMatches": ["000/000000/0000000", "000/000000/00000", "000/000000//000000", "000/000000000000", "000/0000000/000000", "000/00000/000000", "000//000000/000000", "000000000/000000", "0000/000000/000000", "00/000000/000000"]}, {"regex": "^[0-9]{8}$", "exceptionStackTrace": null, "matches": ["00000000"], "nonMatches": ["000000000", "0000000"]}, {"regex": "^[SC]{2}[0-9]{6}$", "exceptionStackTrace": null, "matches": ["SC000000", "CC000000"], "nonMatches": ["CC0000000", "CC00000", "CCC000000", "C000000", "AC000000"]}, {"regex": "^[A-Za-z]{2}[ ]{0,1}[0-9]{2}[ ]{0,1}[a-zA-Z]{3}$", "exceptionStackTrace": null, "matches": ["aa 00 aAA", "aa 00AAA", "aa00 AAA", "Aa 00 AAA", "aa00AAA", "aa 00 AAA"], "nonMatches": ["aa 00 AAAA", "aa 00 AA", "aa 00  AAA", "aa 000 AAA", "aa 0 AAA", "aa  00 AAA", "aaa 00 AAA", "a 00 AAA"]}, {"regex": "^[a-zA-z0-9]+[@]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (bad range): Invalid range: A-z"}, "matches": [], "nonMatches": []}, {"regex": "^[ISBN]{4}[ ]{0,1}[0-9]{1}[-]{1}[0-9]{3}[-]{1}[0-9]{5}[-]{1}[0-9]{0,1}$", "exceptionStackTrace": null, "matches": ["NNNN 0-000-00000-", "NNNN0-000-00000-0", "SNNN 0-000-00000-0", "INNN 0-000-00000-0", "BNNN 0-000-00000-0", "NNNN0-000-00000-", "NNNN 0-000-00000-0"], "nonMatches": ["NNNN 0-000-00000-00", "NNNN 0-000-00000--0", "NNNN 0-000-000000", "NNNN 0-000-000000-0", "NNNN 0-000-0000-0", "NNNN 0-000--00000-0", "NNNN 0-00000000-0", "NNNN 0-0000-00000-0", "NNNN 0-00-00000-0", "NNNN 0--000-00000-0", "NNNN 0000-00000-0", "NNNN 00-000-00000-0", "NNNN -000-00000-0", "NNNN  0-000-00000-0", "NNNNN 0-000-00000-0", "NNN 0-000-00000-0", "ANNN 0-000-00000-0"]}, {"regex": "^[0-9]{0,5}[ ]{0,1}[0-9]{0,6}$", "exceptionStackTrace": null, "matches": ["0 000000", "0 ", "00", "00000 0", " 0", "", "0 0"], "nonMatches": ["0 0000000", "0  0", "000000 0"]}, {"regex": "[cC]{1}[0-9]{0,7}", "exceptionStackTrace": null, "matches": ["C00000000", "C0000000", "CC0", "c0", "C", "C0"], "nonMatches": ["0", "a0", "A0"]}, {"regex": "([0-8][0-9]|[9][0])&#176;&#39; &#39;[0-9][0-9]\\.[0-9]&#180;&#39; &#39;[NS]", "exceptionStackTrace": null, "matches": ["00&#176;&#39; &#39;00.0&#180;&#39; &#39;N", "90&#176;&#39; &#39;00.0&#180;&#39; &#39;S", "00&#176;&#39; &#39;00.0&#180;&#39; &#39;S"], "nonMatches": ["00&#176;&#39; &#39;00.0&#180;&#39; &#39;A"]}, {"regex": "(([01][0-7]|[00][0-9])[0-9]|[1][8][0])&#176;&#39; &#39;[0-9][0-9]\\.[0-9]&#180;&#39; &#39;[EW]", "exceptionStackTrace": null, "matches": ["100&#176;&#39; &#39;00.0&#180;&#39; &#39;E", "180&#176;&#39; &#39;00.0&#180;&#39; &#39;W", "000&#176;&#39; &#39;00.0&#180;&#39; &#39;W", "100&#176;&#39; &#39;00.0&#180;&#39; &#39;W"], "nonMatches": ["100&#176;&#39; &#39;00.0&#180;&#39; &#39;A", "200&#176;&#39; &#39;00.0&#180;&#39; &#39;W"]}, {"regex": "<a[\\s]+[^>]*?.*?>([^<]+|.*?)?<\\/a>", "exceptionStackTrace": null, "matches": ["<a evilevil>evilevil</a>", "<a evilevil>></a>", "<a evilevil><</a>", "<a evilevil>/</a>", "<a evilevil>eVil</a>", "<a evilevil>EVIL</a>", "<a evilevil>ev_il</a>", "<a evilevil>ev il</a>", "<a evilevil>ev4il</a>", "<a evilevil>e</a>", "<a evilevil> </a>", "<a evilevil>6</a>", "<a evilevil>_</a>", "<a evilevil></a>", "<a evil>>evil</a>", "<a evil<>evil</a>", "<a evil/>evil</a>", "<a evileVil>evil</a>", "<a evilEVIL>evil</a>", "<a evilev_il>evil</a>", "<a evilev il>evil</a>", "<a evilev4il>evil</a>", "<a evile>evil</a>", "<a evil >evil</a>", "<a evil6>evil</a>", "<a evil_>evil</a>", "<a >evil>evil</a>", "<a <evil>evil</a>", "<a /evil>evil</a>", "<a eVilevil>evil</a>", "<a EVILevil>evil</a>", "<a ev_ilevil>evil</a>", "<a ev ilevil>evil</a>", "<a ev4ilevil>evil</a>", "<a eevil>evil</a>", "<a  evil>evil</a>", "<a 6evil>evil</a>", "<a _evil>evil</a>", "<a evil>evil</a>", "<a  evilevil>evil</a>", "<a ></a>", "<a evilevil>evil</a>"], "nonMatches": ["<aevilevil>evil</a>"]}, {"regex": "(\\[b\\])([^\\[\\]]+)(\\[/b\\])", "exceptionStackTrace": null, "matches": ["[b]/[/b]", "[b]eVil[/b]", "[b]EVIL[/b]", "[b]ev_il[/b]", "[b]ev il[/b]", "[b]ev4il[/b]", "[b]e[/b]", "[b] [/b]", "[b]6[/b]", "[b]_[/b]", "[b]evil[/b]"], "nonMatches": ["[b]][/b]", "[b][[/b]", "[b][/b]"]}, {"regex": "(\\[[abiu][^\\[\\]]*\\])([^\\[\\]]+)(\\[/?[abiu]\\])", "exceptionStackTrace": null, "matches": ["[uevil]evil[/i]", "[uevil]evil[/b]", "[uevil]evil[/a]", "[uevil]evil[u]", "[uevil]/[/u]", "[uevil]eVil[/u]", "[uevil]EVIL[/u]", "[uevil]ev_il[/u]", "[uevil]ev il[/u]", "[uevil]ev4il[/u]", "[uevil]e[/u]", "[uevil] [/u]", "[uevil]6[/u]", "[uevil]_[/u]", "[u/]evil[/u]", "[ueVil]evil[/u]", "[uEVIL]evil[/u]", "[uev_il]evil[/u]", "[uev il]evil[/u]", "[uev4il]evil[/u]", "[ue]evil[/u]", "[u ]evil[/u]", "[u6]evil[/u]", "[u_]evil[/u]", "[u]evil[/u]", "[ievil]evil[/u]", "[bevil]evil[/u]", "[aevil]evil[/u]", "[u]evil[u]", "[uevil]evil[/u]"], "nonMatches": ["[uevil]evil[/c]", "[uevil]evil[//u]", "[uevil]][/u]", "[uevil][[/u]", "[uevil][/u]", "[u]]evil[/u]", "[u[]evil[/u]", "[cevil]evil[/u]"]}, {"regex": "(\\[a url=\\&quot;[^\\[\\]\\&quot;]*\\&quot;\\])([^\\[\\]]+)(\\[/a\\])", "exceptionStackTrace": null, "matches": ["[a url=&quot;evil&quot;]=[/a]", "[a url=&quot;evil&quot;];[/a]", "[a url=&quot;evil&quot;]/[/a]", "[a url=&quot;evil&quot;]&[/a]", "[a url=&quot;evil&quot;]eVil[/a]", "[a url=&quot;evil&quot;]EVIL[/a]", "[a url=&quot;evil&quot;]ev_il[/a]", "[a url=&quot;evil&quot;]ev il[/a]", "[a url=&quot;evil&quot;]ev4il[/a]", "[a url=&quot;evil&quot;]e[/a]", "[a url=&quot;evil&quot;] [/a]", "[a url=&quot;evil&quot;]6[/a]", "[a url=&quot;evil&quot;]_[/a]", "[a url=&quot;=&quot;]evil[/a]", "[a url=&quot;/&quot;]evil[/a]", "[a url=&quot;eVil&quot;]evil[/a]", "[a url=&quot;EVIL&quot;]evil[/a]", "[a url=&quot;ev_il&quot;]evil[/a]", "[a url=&quot;ev il&quot;]evil[/a]", "[a url=&quot;ev4il&quot;]evil[/a]", "[a url=&quot;e&quot;]evil[/a]", "[a url=&quot; &quot;]evil[/a]", "[a url=&quot;6&quot;]evil[/a]", "[a url=&quot;_&quot;]evil[/a]", "[a url=&quot;&quot;]evil[/a]", "[a url=&quot;evil&quot;]evil[/a]"], "nonMatches": ["[a url=&quot;evil&quot;]][/a]", "[a url=&quot;evil&quot;][[/a]", "[a url=&quot;evil&quot;][/a]", "[a url=&quot;]&quot;]evil[/a]", "[a url=&quot;[&quot;]evil[/a]", "[a url=&quot;;&quot;]evil[/a]", "[a url=&quot;&&quot;]evil[/a]"]}, {"regex": "url=\\&quot;([^\\[\\]\\&quot;]*)\\&quot;", "exceptionStackTrace": null, "matches": ["url=&quot;=&quot;", "url=&quot;eVil&quot;", "url=&quot;EVIL&quot;", "url=&quot;ev_il&quot;", "url=&quot;ev il&quot;", "url=&quot;ev4il&quot;", "url=&quot;e&quot;", "url=&quot; &quot;", "url=&quot;6&quot;", "url=&quot;_&quot;", "url=&quot;&quot;", "url=&quot;evil&quot;"], "nonMatches": ["url=&quot;]&quot;", "url=&quot;[&quot;", "url=&quot;;&quot;", "url=&quot;&&quot;"]}, {"regex": "\\b\\w+\\b", "exceptionStackTrace": null, "matches": ["eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", "6", "_", "evil"], "nonMatches": [" ", ""]}, {"regex": "(<b>)([^<>]+)(</b>)", "exceptionStackTrace": null, "matches": ["<b>/</b>", "<b>eVil</b>", "<b>EVIL</b>", "<b>ev_il</b>", "<b>ev il</b>", "<b>ev4il</b>", "<b>e</b>", "<b> </b>", "<b>6</b>", "<b>_</b>", "<b>evil</b>"], "nonMatches": ["<b>></b>", "<b><</b>", "<b></b>"]}, {"regex": "(</?\\w*[^<>]*>)", "exceptionStackTrace": null, "matches": ["</evil>>", "</evil<>", "</evil/>", "</evileVil>", "</evilEVIL>", "</evilev_il>", "</evilev il>", "</evilev4il>", "</evile>", "</evil >", "</evil6>", "</evil_>", "</eVilevil>", "</EVILevil>", "</ev_ilevil>", "</ev ilevil>", "</ev4ilevil>", "</eevil>", "</ evil>", "</6evil>", "</_evil>", "</evil>", "<//evilevil>", "<evilevil>", "<>", "</evilevil>"], "nonMatches": []}, {"regex": "<!*[^<>]*>", "exceptionStackTrace": null, "matches": ["<!>>", "<!<>", "<!!>", "<!eVil>", "<!EVIL>", "<!ev_il>", "<!ev il>", "<!ev4il>", "<!e>", "<! >", "<!6>", "<!_>", "<!>", "<!!evil>", "<evil>", "<>", "<!evil>"], "nonMatches": []}, {"regex": "&#x((?=.*[ABCDEF]))*((?=.*[0-9]))*.{2,5};", "exceptionStackTrace": null, "matches": ["&#xaaaaa;", "&#xAa;", "&#x;a;", "&#x0a;", "&#x&a;", "&#x#a;", "&#x a;", "&#xaa;"], "nonMatches": ["&#xaaaaaa;", "&#xa;"]}, {"regex": "&[a-zA-Z]+\\d{0,3};", "exceptionStackTrace": null, "matches": ["&evil000;", "&eVil0;", "&EVIL0;", "&e0;", "&evil;", "&evil0;"], "nonMatches": ["&evil0000;", "&ev_il0;", "&ev il0;", "&ev4il0;", "& 0;", "&60;", "&_0;", "&0;"]}, {"regex": "&#\\d{2,5};", "exceptionStackTrace": null, "matches": ["&#00000;", "&#00;"], "nonMatches": ["&#000000;", "&#0;"]}, {"regex": "</?[a-z][a-z0-9]*[^<>]*>", "exceptionStackTrace": null, "matches": ["</aevil>>", "</aevil/>", "</aevileVil>", "</aevilEVIL>", "</aevilev_il>", "</aevilev il>", "</aevilev4il>", "</aevile>", "</aevil >", "</aevil6>", "</aevil_>", "</aeVilevil>", "</aEVILevil>", "</aev_ilevil>", "</aev ilevil>", "</aev4ilevil>", "</aeevil>", "</a evil>", "</a6evil>", "</a_evil>", "</aevil>", "<aevilevil>", "<a>", "</aevilevil>"], "nonMatches": ["</aevil<>", "<//aevilevil>"]}, {"regex": "(?=[-_a-zA-Z0-9]*?[A-Z])(?=[-_a-zA-Z0-9]*?[a-z])(?=[-_a-zA-Z0-9]*?[0-9])[-_a-zA-Z0-9]{6,}", "exceptionStackTrace": null, "matches": [], "nonMatches": ["_____", "a_____", "A_____", "0_____", "-_____", "______"]}, {"regex": "For IP-Address:(?<First>2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.(?<Second>2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.(?<Third>2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.(?<Fourth>2[0-4]\\d|25[0-5]|[01]?\\d\\d?)  For Number: (\\+|\\*{0,2})?(\\d*)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<F"}, "matches": []}, {"regex": "^(([1-9][0-9]*)|((([0])|([1-9][0-9]*))\\.[0-9]+)|((([1-9][0-9]*)|((([0])|([1-9][0-9]*))\\.[0-9]+))\\:)*(([1-9][0-9]*)|((([0])|([1-9][0-9]*))\\.[0-9]+)))$", "exceptionStackTrace": null, "matches": ["100.0:10", "1.0:10", "0.00:10", "10:100.0", "10:1.0", "10:0.00", "10:100", "10:1", "10:10:10", "100:10", "1:10", "100.0", "0.00", "100", "1.0", "1", "10.0:10", "0.0:10", "10:10.0", "10:0.0", "10:10", "10.0", "0.0", "10"], "nonMatches": ["00.0:10", "0.:10", "10:00.0", "10:0.", "10:00", "00:10", "00.0", "0.", "00"]}, {"regex": "^(\\+\\d{2}[ \\-]{0,1}){0,1}(((\\({0,1}[ \\-]{0,1})0{0,1}\\){0,1}[2|3|7|8]{1}\\){0,1}[ \\-]*(\\d{4}[ \\-]{0,1}\\d{4}))|(1[ \\-]{0,1}(300|800|900|902)[ \\-]{0,1}((\\d{6})|(\\d{3}[ \\-]{0,1}\\d{3})))|(13[ \\-]{0,1}([\\d \\-]{5})|((\\({0,1}[ \\-]{0,1})0{0,1}\\){0,1}4{1}[\\d \\-]{8,10})))$", "exceptionStackTrace": null, "matches": ["+00-(-0)4----------", "+00-(-0)40-------", "+00-(-0)4 -------", "+00-(-0)44--------", "+00-(-04--------", "+00-(-)4--------", "+00-(0)4--------", "+00-( 0)4--------", "+00--0)4--------", "+00-13-0----", "+00-13- ----", "+00-13-----", "+00-13 -----", "+00-1-300-000 000", "+00-1-300000000", "+00-1-300 000000", "+00-1300-000000", "+00-1 300-000000", "+00-(-0)8)-00000000", "+00-(-0)8)-0000 0000", "+00-(-0)8)--0000-0000", "+00-(-0)8)0000-0000", "+00-(-0)8) 0000-0000", "+00-(-0)8-0000-0000", "+00-(-0)|)-0000-0000", "+00-(-0)7)-0000-0000", "+00-(-0)3)-0000-0000", "+00-(-0)2)-0000-0000", "+00-(-08)-0000-0000", "+00-(-)8)-0000-0000", "+00-(0)8)-0000-0000", "+00-( 0)8)-0000-0000", "+00--0)8)-0000-0000", "(-0)8)-0000-0000", "+00(-0)8)-0000-0000", "+00 (-0)8)-0000-0000", "4--------", "13-----", "1902000000", "1900000000", "1800000000", "1300000000", "800000000", "+00-(-0)4--------", "+00-13------", "+00-1-902-000000", "+00-1-900-000000", "+00-1-800-000000", "+00-1-300-000-000", "+00-1-300-000000", "+00-(-0)8)-0000-0000"], "nonMatches": ["+00-(-0)4-----------", "+00-(-0)4-------", "+00-(-0)--------", "+00-(-0))4--------", "+00-(-00)4--------", "+00-(--0)4--------", "+00-((-0)4--------", "+00-13-------", "+00-1-300-000-0000", "+00-1-300-000-00", "+00-1-300-000--000", "+00-1-300-0000-000", "+00-1-300-00-000", "+00-1-300-0000000", "+00-1-300-00000", "+00-1-300--000000", "+00-1--300-000000", "+00-(-0)8)-0000-00000", "+00-(-0)8)-0000-000", "+00-(-0)8)-0000--0000", "+00-(-0)8)-00000-0000", "+00-(-0)8)-000-0000", "+00-(-0)8))-0000-0000", "+00-(-0)88)-0000-0000", "+00-(-0))-0000-0000", "+00-(-0)0)-0000-0000", "+00-(-0))8)-0000-0000", "+00-(-00)8)-0000-0000", "+00-(--0)8)-0000-0000", "+00-((-0)8)-0000-0000", "+00-+00-(-0)8)-0000-0000", "+00--(-0)8)-0000-0000", "+000-(-0)8)-0000-0000", "+0-(-0)8)-0000-0000"]}, {"regex": "^\\d*\\d?((5)|(0))\\.?((0)|(00))?$", "exceptionStackTrace": null, "matches": ["005.", "0050", "0005.0", "05.0", "0", "5", "000.0", "005.00", "005.0"], "nonMatches": ["005..0"]}, {"regex": "^\\(\\d{1,2}(\\s\\d{1,2}){1,2}\\)\\s(\\d{1,2}(\\s\\d{1,2}){1,2})((-(\\d{1,4})){0,1})$", "exceptionStackTrace": null, "matches": ["(0 0) 0 0-0000", "(0 0) 0 0 0-0", "(0 0) 0 00-0", "(0 0) 00 0-0", "(0 0 0) 0 0-0", "(0 00) 0 0-0", "(00 0) 0 0-0", "(0 0) 0 0", "(0 0) 0 0-0"], "nonMatches": ["(0 0) 0 0-0-0", "(0 0) 0 0-00000", "(0 0) 0 0-", "(0 0) 0 0 0 0-0", "(0 0) 0-0", "(0 0) 0 000-0", "(0 0) 0 -0", "(0 0) 000 0-0", "(0 0)  0-0", "(0 0 0 0) 0 0-0", "(0) 0 0-0", "(0 000) 0 0-0", "(0 ) 0 0-0", "(000 0) 0 0-0", "( 0) 0 0-0"]}, {"regex": "^((?:\\+62|62)|0)[2-9]{1}[0-9]+$", "exceptionStackTrace": null, "matches": ["+62200", "+62220", "020", "6220", "+6220"], "nonMatches": ["+622", "+620", "+6200"]}, {"regex": "(^|\\s|(\\[))(::)?([a-f\\d]{1,4}::?){0,7}(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(?=(?(2)\\]|($|\\s|(?(3)($|\\s)|(?(4)($|\\s)|:\\d)))))|((?(3)[a-f\\d]{1,4})|(?(4)[a-f\\d]{1,4}))(?=(?(2)\\]|($|\\s))))(?(2)\\])(:\\d{1,5})?", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (internal): Unexpected extension ?("}, "matches": [], "nonMatches": []}, {"regex": "^ISBN\\s(?=[-0-9xX ]{13}$)(?:[0-9]+[- ]){3}[0-9]*[xX0-9]$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["ISBN 0 0 0 0x", "ISBN 0 0 0 0a", "ISBN 0 0 0 0A", "ISBN 0 0 0 00", "ISBN 0 0 0 00X", "ISBN 0 0 0 0 0X", "ISBN 0 0 0X", "ISBN 0-0 0 0X", "ISBN 00 0 0 0X", "ISBN  0 0 0X", "ISBN 0 0 0 X", "ISBN 0 0 0 0X"]}, {"regex": "(?s)/\\*.*\\*/", "exceptionStackTrace": null, "matches": ["/*/*/", "/***/", "/*eVil*/", "/*EVIL*/", "/*ev_il*/", "/*ev il*/", "/*ev4il*/", "/*e*/", "/* */", "/*6*/", "/*_*/", "/**/", "/*evil*/"], "nonMatches": []}, {"regex": "(\\d{4,6})", "exceptionStackTrace": null, "matches": ["0000000", "000000", "0000"], "nonMatches": ["000"]}, {"regex": "^(\\d+|[a-zA-Z]+)$", "exceptionStackTrace": null, "matches": ["eVil", "EVIL", "e", "6", "00", "evil", "0"], "nonMatches": ["ev_il", "ev il", "ev4il", " ", "_", ""]}, {"regex": ".*?$(?<!\\.aspx)", "exceptionStackTrace": null, "matches": [".", "eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", " ", "6", "_", "", "evil"], "nonMatches": []}, {"regex": "&quot;([^&quot;](?:\\\\.|[^\\\\&quot;]*)*)&quot;", "exceptionStackTrace": null, "matches": ["&quot;aeVil&quot;", "&quot;aEVIL&quot;", "&quot;aev_il&quot;", "&quot;aev il&quot;", "&quot;aev4il&quot;", "&quot;ae&quot;", "&quot;a &quot;", "&quot;a6&quot;", "&quot;a_&quot;", "&quot;a\\a\\a&quot;", "&quot;a\\\\&quot;", "&quot;a\\A&quot;", "&quot;a\\;&quot;", "&quot;a\\0&quot;", "&quot;a\\&&quot;", "&quot;a\\ &quot;", "&quot;\\\\a&quot;", "&quot;A\\a&quot;", "&quot;0\\a&quot;", "&quot; \\a&quot;", "&quot;a&quot;", "&quot;aevil&quot;", "&quot;a\\a&quot;"], "nonMatches": ["&quot;a\\&quot;", "&quot;a;&quot;", "&quot;a&&quot;", "&quot;u\\a&quot;", "&quot;t\\a&quot;", "&quot;q\\a&quot;", "&quot;o\\a&quot;", "&quot;;\\a&quot;", "&quot;&\\a&quot;"]}, {"regex": "(\\w[-._\\w]*\\w@\\w[-._\\w]*\\w\\.\\w{2,3})", "exceptionStackTrace": null, "matches": ["aevila@aevila.aaaa", "aevila@aevila.aaa", "aevila@aevila._a", "aevila@aevila.Aa", "aevila@aevila.0a", "aevila@aevil_.aa", "aevila@aevilA.aa", "aevila@aevil0.aa", "aevila@a.a.aa", "aevila@a-a.aa", "aevila@aeVila.aa", "aevila@aEVILa.aa", "aevila@aev_ila.aa", "aevila@aev4ila.aa", "aevila@aea.aa", "aevila@a6a.aa", "aevila@a_a.aa", "aevila@aa.aa", "aevila@_evila.aa", "aevila@Aevila.aa", "aevila@0evila.aa", "aevil_@aevila.aa", "aevilA@aevila.aa", "aevil0@aevila.aa", "a.a@aevila.aa", "a-a@aevila.aa", "aeVila@aevila.aa", "aEVILa@aevila.aa", "aev_ila@aevila.aa", "aev ila@aevila.aa", "aev4ila@aevila.aa", "aea@aevila.aa", "a6a@aevila.aa", "a_a@aevila.aa", "aa@aevila.aa", "_evila@aevila.aa", "Aevila@aevila.aa", "0evila@aevila.aa", "aa@aa.aa", "aevila@aevila.aa"], "nonMatches": ["aevila@aevila.a", "aevila@a@a.aa", "aevila@aev ila.aa", "aevila@a a.aa", "a@a@aevila.aa", "a a@aevila.aa"]}, {"regex": "^([a-zA-Z]\\:)(\\\\[^\\\\/:*?<>&quot;|]*(?<![ ]))*(\\.[a-zA-Z]{2,6})$", "exceptionStackTrace": null, "matches": ["A:\\evil.AAAAAA", "A:\\evil.aA", "A:\\evil\\evil.AA", "A:\\\\.AA", "A:\\..AA", "A:\\eVil.AA", "A:\\EVIL.AA", "A:\\ev_il.AA", "A:\\ev il.AA", "A:\\ev4il.AA", "A:\\e.AA", "A:\\6.AA", "A:\\_.AA", "A:\\.AA", "a:\\evil.AA", "A:.AA", "A:\\evil.AA"], "nonMatches": ["A:\\evil.AAAAAAA", "A:\\evil.A", "A:\\|.AA", "A:\\?.AA", "A:\\>.AA", "A:\\<.AA", "A:\\;.AA", "A:\\:.AA", "A:\\/.AA", "A:\\*.AA", "A:\\&.AA", "A:\\ .AA"]}, {"regex": "(\\b\\w+\\b)       # Match a word and capture it\n\\s+\n\\1              # Use backreference \\1 to match double-ups", "exceptionStackTrace": null, "matches": ["evil       # Match a word and capture it\n  \nevil              # Use backreference evil to match double-ups", "evil       # Match a word and capture it\n \nevil              # Use backreference evil to match double-ups"], "nonMatches": ["evil       # Match a word and capture it\n\nevil              # Use backreference evil to match double-ups", "eVil       # Match a word and capture it\n \nevil              # Use backreference evil to match double-ups", "EVIL       # Match a word and capture it\n \nevil              # Use backreference evil to match double-ups", "ev_il       # Match a word and capture it\n \nevil              # Use backreference evil to match double-ups", "ev il       # Match a word and capture it\n \nevil              # Use backreference evil to match double-ups", "ev4il       # Match a word and capture it\n \nevil              # Use backreference evil to match double-ups", "e       # Match a word and capture it\n \nevil              # Use backreference evil to match double-ups", "        # Match a word and capture it\n \nevil              # Use backreference evil to match double-ups", "6       # Match a word and capture it\n \nevil              # Use backreference evil to match double-ups", "_       # Match a word and capture it\n \nevil              # Use backreference evil to match double-ups", "       # Match a word and capture it\n \nevil              # Use backreference evil to match double-ups"]}, {"regex": "^(\n    100(?:\\.0{1,2})?\n    |\n    0*?\\.\\d{1,2}\n    |\n    \\d{1,2}(?:\\.\\d{1,2})?\n)%\n$", "exceptionStackTrace": null, "matches": ["\n    0.00\n%\n", "\n    00.0\n%\n", "\n    0.00\n    %\n", "\n    00.0\n    %\n", "\n    100.00\n    %\n", "\n    0\n%\n", "\n    .0\n    %\n", "\n    100\n    %\n", "\n    0.0\n%\n", "\n    0.0\n    %\n", "\n    100.0\n    %\n"], "nonMatches": ["\n    0.0.0\n%\n", "\n    0.000\n%\n", "\n    0.\n%\n", "\n    000.0\n%\n", "\n    .0\n%\n", "\n    0.000\n    %\n", "\n    0.\n    %\n", "\n    100.0.0\n    %\n", "\n    100.000\n    %\n", "\n    100.\n    %\n"]}, {"regex": "^[A-Z]\\d{2}(\\.\\d){0,1}$", "exceptionStackTrace": null, "matches": ["A00", "A00.0"], "nonMatches": ["A00.0.0", "A000.0", "A0.0"]}, {"regex": "^(?<BeforeLastCapital>([^\\s]*))(?<LastCapital>[A-Z])(?<AfterLastCapital>([^A-Z])*)$   #Last Capital", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<B"}, "matches": []}, {"regex": "(?i:(?:j(?:an(?:uary)?|u(?:ne?|ly?)))|a(?:pr(?:il)?|ug(?:ust)?)|ma(?:y|r(?:ch)?)|(?:nov|dec)(?:ember)?|feb(?:ruary)?|sep(?:tember)?|oct(?:ober)?)", "exceptionStackTrace": null, "matches": [], "nonMatches": [""]}, {"regex": "(?i:t(?:ue(?:sday)?|hu(?:rsday)?))|s(?:un(?:day)?|at(?:urday)?)|(?:wed(?:nesday)?|(?:mon|fri)(?:day)?)", "exceptionStackTrace": null, "matches": ["mondayday", "wednesdaynesday", "saturdayurday", "sundayday", "fri", "mon", "wed", "sat", "sun", "friday", "monday", "wednesday", "saturday", "sunday"], "nonMatches": [""]}, {"regex": "(([\\w|\\.]*)\\s*={1}\\s*(.*?))$", "exceptionStackTrace": null, "matches": ["evil = |", "evil = =", "evil = .", "evil = eVil", "evil = EVIL", "evil = ev_il", "evil = ev il", "evil = ev4il", "evil = e", "evil =  ", "evil = 6", "evil = _", "evil = ", "evil =  evil", "evil =evil", "evil == evil", "evil  = evil", "evil= evil", "| = evil", "= = evil", ". = evil", "eVil = evil", "EVIL = evil", "ev_il = evil", "ev il = evil", "ev4il = evil", "e = evil", "  = evil", "6 = evil", "_ = evil", " = evil", "=", "evil = evil"], "nonMatches": ["evil  evil"]}, {"regex": "(\\d*\\.?\\d+)\\s?(px|em|ex|%|in|cn|mm|pt|pc+)", "exceptionStackTrace": null, "matches": ["0.0 pcc", "0.0px", "0.00 px", "0..0 px", "00 px", "00.0 px", ".0 px", "0pc", "0pt", "0mm", "0cn", "0in", "0%", "0ex", "0em", "0px", "0.0 pc", "0.0 pt", "0.0 mm", "0.0 cn", "0.0 in", "0.0 %", "0.0 ex", "0.0 em", "0.0 px"], "nonMatches": ["0.0 p", "0.0  px", "0. px"]}, {"regex": "^(?i)([&#192;-&#255;a-z\\-]{2,})\\x20([&#192;-&#255;a-z\\-&#39;]{2,})(?-i)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character range ;-&"}, "matches": []}, {"regex": "^([0-1][0-9]|[2][0-3]|[0-9]):([0-5][0-9])(?::([0-5][0-9]))?$", "exceptionStackTrace": null, "matches": ["0:00", "20:00", "00:00", "0:00:00", "20:00:00", "00:00:00"], "nonMatches": ["24:00:00", "00:00:00:00", "00:00:60", "00:60:00"]}, {"regex": "^([0-2]\\d|3[0-1]|[1-9])\\/(0\\d|1[0-2]|[1-9])\\/(\\d{4})$", "exceptionStackTrace": null, "matches": ["1/00/0000", "30/00/0000", "00/1/0000", "00/10/0000", "00/00/0000"], "nonMatches": ["0/00/0000", "32/00/0000", "00/0/0000", "00/13/0000", "00/00/00000", "00/00/000"]}, {"regex": "=(?m)^(LogName=(Security).*)\\n(SourceName=.*)\\n(EventCode=.*)\\n(EventType=.*)\\n(Type=(Success Audit|Information).*)\\n(ComputerName=(HOSTNAME1|HOSTNAME2|HOSTNAME3).*)\\n", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\n"}, "matches": [], "nonMatches": []}, {"regex": "^(^[0-9]*(^[0-9]*[\\.][0-9]+){0,1}$)", "exceptionStackTrace": null, "matches": ["0", "00.00", "000.0", "0.0", "", "00.0"], "nonMatches": ["00.00.0", "00."]}, {"regex": "(&#39;.*$|Rem((\\t| ).*$|$)|&quot;(.|&quot;&quot;)*?&quot;)", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\t"}, "matches": [], "nonMatches": []}, {"regex": "^(?:((?<prov>(?:[1-9]|10))(?<av>AV)?)|((?<tipo>(?:E|N|PE))+))-(?<tomo>\\d{1,4})-(?<folio>\\d{1,5})", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<p"}, "matches": []}, {"regex": "^([1-9]|[1-9]\\d|100)$", "exceptionStackTrace": null, "matches": ["100", "10", "1"], "nonMatches": ["00", "0"]}, {"regex": "^(X(-|\\.)?0?\\d{7}(-|\\.)?[A-Z]|[A-Z](-|\\.)?\\d{7}(-|\\.)?[0-9A-Z]|\\d{8}(-|\\.)?[A-Z])$", "exceptionStackTrace": null, "matches": ["A-0000000-0", "A-0000000A", "A0000000-A", "X-00000000A", "X-0000000-A", "X00000000-A", "00000000A", "A0000000A", "X0000000A", "00000000.A", "00000000-A", "A.0000000-A", "A-0000000.A", "A-0000000-A", "X.00000000-A", "X-00000000.A", "X-00000000-A"], "nonMatches": ["00000000--A", "000000000-A", "0000000-A", "A-0000000--A", "A-00000000-A", "A-000000-A", "A--0000000-A", "X-00000000--A", "X-000000000-A", "X--00000000-A"]}, {"regex": "(^(?:\\w\\:)?(?:/|\\\\\\\\){1}[^/|\\\\]*(?:/|\\\\){1})", "exceptionStackTrace": null, "matches": ["a:/evil//", "a:/\\/", "a:/:/", "a:///", "a:/eVil/", "a:/EVIL/", "a:/ev_il/", "a:/ev il/", "a:/ev4il/", "a:/e/", "a:/ /", "a:/6/", "a:/_/", "a://", "a://evil/", "/evil/", "_:/evil/", "A:/evil/", "0:/evil/", "\\\\/", "/\\", "//", "a:\\\\evil/", "a:/evil\\", "a:/evil/"], "nonMatches": ["a:/evil", "a:/|/", "a:evil/", "a:a:/evil/"]}, {"regex": "(.*[\\\\\\/]|^)(.*?)(?:[\\.]|$)([^\\.\\s]*$)", "exceptionStackTrace": null, "matches": ["evil/evil.\\", "evil/evil./", "evil/evil..", "evil/evil.eVil", "evil/evil.EVIL", "evil/evil.ev_il", "evil/evil.ev il", "evil/evil.ev4il", "evil/evil.e", "evil/evil. ", "evil/evil.6", "evil/evil._", "evil/evil.", "evil/\\.evil", "evil//.evil", "evil/..evil", "evil/eVil.evil", "evil/EVIL.evil", "evil/ev_il.evil", "evil/ev il.evil", "evil/ev4il.evil", "evil/e.evil", "evil/ .evil", "evil/6.evil", "evil/_.evil", "evil/.evil", "evil\\evil.evil", "\\/evil.evil", "//evil.evil", "./evil.evil", "eVil/evil.evil", "EVIL/evil.evil", "ev_il/evil.evil", "ev il/evil.evil", "ev4il/evil.evil", "e/evil.evil", " /evil.evil", "6/evil.evil", "_/evil.evil", "/evil.evil", ".", "/", "/.", "evil.evil", "evil/evilevil", "evil/evil.evil"], "nonMatches": []}, {"regex": "^(.){0,20}$", "exceptionStackTrace": null, "matches": ["aaaaaaaaaaaaaaaaaaaa", "_", "A", "0", " ", "", "a"], "nonMatches": ["aaaaaaaaaaaaaaaaaaaaa"]}, {"regex": "^([0]?[1-9]|[1|2][0-9]|[3][0|1])[/]([0]?[1-9]|[1][0-2])[/]([0-9]{4}|[0-9]{2}) ([0-1][0-9]|[2][0-3]):([0-5][0-9])$", "exceptionStackTrace": null, "matches": ["3|/01/0000 00:00", "30/01/0000 00:00", "|0/01/0000 00:00", "10/01/0000 00:00", "01/1/0000 00:00", "1/01/0000 00:00", "31/1/0000 00:00", "20/1/0000 00:00", "1/10/0000 00:00", "1/1/00 00:00", "1/1/0000 20:00", "1/1/0000 00:00", "31/01/0000 00:00", "20/01/0000 00:00", "01/10/0000 00:00", "01/01/00 00:00", "01/01/0000 20:00", "01/01/0000 00:00"], "nonMatches": ["32/01/0000 00:00", "01/13/0000 00:00", "01/01/0 00:00", "01/01/0000 24:00", "01/01/0000 00:60", "01/01/00000 00:00", "01/01/000 00:00", "01/00/0000 00:00", "01/001/0000 00:00", "00/01/0000 00:00", "001/01/0000 00:00"]}, {"regex": "\\s(type|name|value)=(?:(\\w+)|(?:&quot;(.*?)&quot;)|(?:\\&#39;(.*)\\&#39;))", "exceptionStackTrace": null, "matches": [" type=&#39;=&#39;", " type=&#39;;&#39;", " type=&#39;&&#39;", " type=&#39;#&#39;", " type=&#39;eVil&#39;", " type=&#39;EVIL&#39;", " type=&#39;ev_il&#39;", " type=&#39;ev il&#39;", " type=&#39;ev4il&#39;", " type=&#39;e&#39;", " type=&#39; &#39;", " type=&#39;6&#39;", " type=&#39;_&#39;", " type=&quot;=&quot;", " type=&quot;;&quot;", " type=&quot;&&quot;", " type=&quot;#&quot;", " type=&quot;eVil&quot;", " type=&quot;EVIL&quot;", " type=&quot;ev_il&quot;", " type=&quot;ev il&quot;", " type=&quot;ev4il&quot;", " type=&quot;e&quot;", " type=&quot; &quot;", " type=&quot;6&quot;", " type=&quot;_&quot;", " type=eVil", " type=EVIL", " type=ev_il", " type=ev il", " type=ev4il", " type=e", " type=6", " type=_", " type=&#39;&#39;", " type=&quot;&quot;", " value=evil", " name=evil", " type=&#39;evil&#39;", " type=&quot;evil&quot;", " type=evil"], "nonMatches": [" type= ", " type="]}, {"regex": "^[^\\\\\\./:\\*\\?\\&quot;<>\\|]{1}[^\\\\/:\\*\\?\\&quot;<>\\|]{0,254}$", "exceptionStackTrace": null, "matches": ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aA", "a0", "a.", "a ", "aaa", "Aa", "0a", " a", "a", "aa"], "nonMatches": ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "a|", "au", "at", "aq", "ao", "a\\", "a?", "a>", "a<", "a;", "a:", "a/", "a*", "a&", "|a", "ua", "ta", "qa", "oa", "\\a", "?a", ">a", "<a", ";a", ":a", "/a", ".a", "*a", "&a"]}, {"regex": "^((((0031)|(\\+31))(\\-)?6(\\-)?[0-9]{8})|(06(\\-)?[0-9]{8})|(((0031)|(\\+31))(\\-)?[1-9]{1}(([0-9](\\-)?[0-9]{7})|([0-9]{2}(\\-)?[0-9]{6})))|([0]{1}[1-9]{1}(([0-9](\\-)?[0-9]{7})|([0-9]{2}(\\-)?[0-9]{6}))))$", "exceptionStackTrace": null, "matches": ["0031-100000000", "003110-0000000", "0031-600000000", "00316-00000000", "0100000000", "+31100000000", "0031100000000", "0600000000", "+31600000000", "0031600000000", "0100-000000", "010-0000000", "+31-10-0000000", "0031-100-000000", "0031-10-0000000", "06-00000000", "+31-6-00000000", "0031-6-00000000"], "nonMatches": ["0100-0000000", "0100-00000", "0100--000000", "01000-000000", "010-00000000", "010-000000", "010--0000000", "0110-0000000", "00-0000000", "000-0000000", "0010-0000000", "10-0000000", "0031-100-0000000", "0031-100-00000", "0031-100--000000", "0031-1000-000000", "0031-10-00000000", "0031-10-000000", "0031-10--0000000", "0031-110-0000000", "0031-0-0000000", "0031-00-0000000", "0031--10-0000000", "06-000000000", "06-0000000", "06--00000000", "0031-6-000000000", "0031-6-0000000", "0031-6--00000000", "0031--6-00000000"]}, {"regex": "^(((0[1-9]|[12]\\d|3[01])[\\s\\.\\-\\/](0[13578]|1[02])[\\s\\.\\-\\/]((19|[2-9]\\d)\\d{2}))|((0[1-9]|[12]\\d|30)[\\s\\.\\-\\/](0[13456789]|1[012])[\\s\\.\\-\\/]((19|[2-9]\\d)\\d{2}))|((0[1-9]|1\\d|2[0-8])[\\s\\.\\-\\/]02[\\s\\.\\-\\/]((19|[2-9]\\d)\\d{2}))|(29[\\s\\.\\-\\/]02[\\s\\.\\-\\/]((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))$", "exceptionStackTrace": null, "matches": ["29/02/9200", "29/02/7600", "29/02/5600", "29/02/3600", "29/02/8400", "29/02/8000", "29/02/6800", "29/02/4800", "29/02/2800", "29/02/1692", "29/02/1676", "29/02/1656", "29/02/1636", "29/02/1616", "29/02/1684", "29/02/1680", "29/02/1668", "29/02/1648", "29/02/1628", "29/02/1604", "29/02.1608", "29/02-1608", "29/02 1608", "29.02/1608", "29-02/1608", "29 02/1608", "01/02.1900", "01/02-1900", "01/02 1900", "01.02/1900", "01-02/1900", "01 02/1900", "10/09/1900", "01/09.1900", "01/09-1900", "01/09 1900", "01/06/1900", "01/04/1900", "01.09/1900", "01-09/1900", "01 09/1900", "30/08/1900", "10/08/1900", "01/11/1900", "01/10/1900", "01/08.1900", "01/08-1900", "01/08 1900", "01/07/1900", "01/05/1900", "01/03/1900", "01/01/1900", "01.08/1900", "01-08/1900", "01 08/1900", "29/02/9600", "29/02/8800", "29/02/1600", "29/02/2008", "29/02/1696", "29/02/1688", "29/02/1608", "20/02/1900", "10/02/1900", "01/02/2000", "01/02/1900", "30/09/1900", "20/09/1900", "01/09/2000", "01/09/1900", "31/08/1900", "20/08/1900", "01/12/1900", "01/08/2000", "01/08/1900"], "nonMatches": ["29/02/9000", "29/02/0600", "29/02/8100", "29/02/0800", "29/02/0008", "29/02/1690", "29/02/1606", "29/02/1681", "29/02/1008", "29/02/1900", "01/02/0000", "01/02/19000", "01/02/190", "00/02/1900", "01/13/1900", "01/09/0000", "01/09/19000", "01/09/190", "00/09/1900", "32/08/1900", "01/08/0000", "01/08/19000", "01/08/190", "01/00/1900", "00/08/1900"]}, {"regex": "^(AT){0,1}[U]{0,1}[0-9]{8}$", "exceptionStackTrace": null, "matches": ["AT00000000", "U00000000", "00000000", "ATU00000000"], "nonMatches": ["ATU000000000", "ATU0000000", "ATUU00000000", "ATATU00000000"]}, {"regex": "^(BG){0,1}([0-9]{9}|[0-9]{10})$", "exceptionStackTrace": null, "matches": ["0000000000", "000000000", "BG0000000000", "BG000000000"], "nonMatches": ["BG00000000000", "BG00000000", "BGBG000000000"]}, {"regex": "^(-?)(,?)(\\d{1,3}(\\.\\d{3})*|(\\d+))(\\,\\d{2})?$", "exceptionStackTrace": null, "matches": ["-,00,00", "-,0.000", "-,0.000.000,00", "-,000.000,00", "-0.000,00", ",0.000,00", "0", "-,0,00", "-,0.000,00"], "nonMatches": ["-,,00", "-,0.000,00,00", "-,0.000,000", "-,0.000,0", "-,0.0000,00", "-,0.00,00", "-,0000.000,00", "-,.000,00", "-,,0.000,00", "--,0.000,00"]}, {"regex": "(?<name>.+?)(?=-\\d)-(?<version>.+)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<n"}, "matches": []}, {"regex": "gth", "exceptionStackTrace": null, "matches": ["gth"], "nonMatches": []}, {"regex": "^[1-9]{1}[0-9]{3}\\s?[a-zA-Z]{2}$", "exceptionStackTrace": null, "matches": ["1000 aA", "1000AA", "1000 AA"], "nonMatches": ["1000 AAA", "1000 A", "1000  AA", "10000 AA", "100 AA", "11000 AA", "000 AA", "0000 AA"]}, {"regex": "^([0-1][0-9]|2[0-3]){1}:([0-5][0-9]){1}:([0-5][0-9]){1},([0-9][0-9][0-9]){1} --> ([0-1][0-9]|2[0-3]){1}:([0-5][0-9]){1}:([0-5][0-9]){1},([0-9][0-9][0-9]){1}(.*)$", "exceptionStackTrace": null, "matches": ["00:00:00,000 --> 00:00:00,000>", "00:00:00,000 --> 00:00:00,000:", "00:00:00,000 --> 00:00:00,000-", "00:00:00,000 --> 00:00:00,000,", "00:00:00,000 --> 00:00:00,000eVil", "00:00:00,000 --> 00:00:00,000EVIL", "00:00:00,000 --> 00:00:00,000ev_il", "00:00:00,000 --> 00:00:00,000ev il", "00:00:00,000 --> 00:00:00,000ev4il", "00:00:00,000 --> 00:00:00,000e", "00:00:00,000 --> 00:00:00,000 ", "00:00:00,000 --> 00:00:00,0006", "00:00:00,000 --> 00:00:00,000_", "00:00:00,000 --> 00:00:00,000000evil", "20:00:00,000 --> 00:00:00,000", "00:00:00,000 --> 20:00:00,000", "00:00:00,000 --> 00:00:00,000", "20:00:00,000 --> 00:00:00,000evil", "00:00:00,000 --> 20:00:00,000evil", "00:00:00,000 --> 00:00:00,000evil"], "nonMatches": ["24:00:00,000 --> 00:00:00,000evil", "00:00:00,000 --> 24:00:00,000evil", "00:00:00,000 --> 00:00:00,evil", "00:00:00,000 --> 00:00:0000,000evil", "00:00:00,000 --> 00:00:,000evil", "00:00:00,000 --> 00:00:60,000evil", "00:00:00,000 --> 00:0000:00,000evil", "00:00:00,000 --> 00::00,000evil", "00:00:00,000 --> 00:60:00,000evil", "00:00:00,000 --> 0000:00:00,000evil", "00:00:00,000 --> :00:00,000evil", "00:00:00,000000 --> 00:00:00,000evil", "00:00:00, --> 00:00:00,000evil", "00:00:0000,000 --> 00:00:00,000evil", "00:00:,000 --> 00:00:00,000evil", "00:00:60,000 --> 00:00:00,000evil", "00:0000:00,000 --> 00:00:00,000evil", "00::00,000 --> 00:00:00,000evil", "00:60:00,000 --> 00:00:00,000evil", "0000:00:00,000 --> 00:00:00,000evil", ":00:00,000 --> 00:00:00,000evil"]}, {"regex": "^\\{([1-9]{1}|[1-9]{1}[0-9]{1,}){1}\\}\\{([1-9]{1}|[1-9]{1}[0-9]{1,}){1}\\}(.*)$", "exceptionStackTrace": null, "matches": ["{100}{1}evil", "{110}{1}evil", "{1}{100}evil", "{1}{110}evil", "{1}{1}}", "{1}{1}{", "{1}{1}eVil", "{1}{1}EVIL", "{1}{1}ev_il", "{1}{1}ev il", "{1}{1}ev4il", "{1}{1}e", "{1}{1} ", "{1}{1}6", "{1}{1}_", "{1}{11}evil", "{11}{1}evil", "{10}{1}", "{1}{10}", "{1}{1}", "{10}{1}evil", "{1}{10}evil", "{1}{1}evil"], "nonMatches": ["{00}{1}evil", "{1}{00}evil", "{1}{}evil", "{1}{0}evil", "{}{1}evil", "{0}{1}evil"]}, {"regex": "^(0|(([1-9]{1}|[1-9]{1}[0-9]{1}|[1-9]{1}[0-9]{2}){1}(\\ [0-9]{3}){0,})),(([0-9]{2})|\\-\\-)([\\ ]{1})(\u20ac|EUR|EURO){1}$", "exceptionStackTrace": null, "matches": ["110 000,00 \u20ac", "1 000 000,00 \u20ac", "11 000,00 \u20ac", "100,00 \u20ac", "10,00 \u20ac", "1,00 \u20ac", "100 000,00 \u20ac", "10 000,00 \u20ac", "1 000,00 \u20ac", "0,-- \u20ac", "0,00 EURO", "0,00 EUR", "0,00 \u20ac"], "nonMatches": ["1000 000,00 \u20ac", "1100 000,00 \u20ac", "000 000,00 \u20ac", "00 000,00 \u20ac", "1 0000,00 \u20ac", "1 00,00 \u20ac", " 000,00 \u20ac", "0 000,00 \u20ac", "0,00 \u20ac\u20ac", "0,00 ", "0,00  \u20ac", "0,00\u20ac", "0,000 \u20ac", "0,0 \u20ac"]}, {"regex": "^(big5|euc(kr|jpms)|binary|greek|tis620|hebrew|ascii|swe7|koi8(r|u)|(u|keyb)cs2|(dec|hp|utf|geostd|armscii)8|gb(k|2312)|cp(8(5(0|2)|66)|932|125(0|1|6|7))|latin(1|2|5|7)|(u|s)jis|mac(ce|roman))$", "exceptionStackTrace": null, "matches": ["macroman", "macce", "sjis", "ujis", "latin7", "latin5", "latin2", "latin1", "cp1257", "cp1256", "cp1251", "cp1250", "cp932", "cp866", "cp852", "cp850", "gb2312", "gbk", "armscii8", "geostd8", "utf8", "hp8", "dec8", "keybcs2", "ucs2", "koi8u", "koi8r", "swe7", "ascii", "hebrew", "tis620", "greek", "binary", "eucjpms", "euckr", "big5"], "nonMatches": []}, {"regex": "^<\\!\\-\\-(.*)+(\\/){0,1}\\-\\->$", "exceptionStackTrace": null, "matches": ["<!--evil//-->", "<!--evil-->", "<!--evilevil/-->", "<!-->/-->", "<!--</-->", "<!--//-->", "<!---/-->", "<!--!/-->", "<!--eVil/-->", "<!--EVIL/-->", "<!--ev_il/-->", "<!--ev il/-->", "<!--ev4il/-->", "<!--e/-->", "<!-- /-->", "<!--6/-->", "<!--_/-->", "<!--/-->", "<!---->", "<!--evil/-->"], "nonMatches": []}, {"regex": "^([1-9]{1}|[1-9]{1}[0-9]{1,3}|[1-5]{1}[0-9]{4}|6[0-4]{1}[0-9]{3}|65[0-4]{1}[0-9]{2}|655[0-2]{1}[0-9]{1}|6553[0-6]{1})$", "exceptionStackTrace": null, "matches": ["6553", "6550", "6500", "6000", "1000", "110", "11", "65530", "65500", "65000", "60000", "10000", "10", "1"], "nonMatches": ["655300", "65537", "655000", "650000", "600000", "100000", "110000", "0000", "00000", "00", "", "0"]}, {"regex": "^([\\#]{0,1}([a-fA-F0-9]{6}|[a-fA-F0-9]{3})|rgb\\(([0-9]{1},|[1-9]{1}[0-9]{1},|[1]{1}[0-9]{2},|[2]{1}[0-4]{1}[0-9]{1},|25[0-5]{1},){2}([0-9]{1}|[1-9]{1}[0-9]{1}|[1]{1}[0-9]{2}|[2]{1}[0-4]{1}[0-9]{1}|25[0-5]{1}){1}\\)|rgb\\(([0-9]{1}%,|[1-9]{1}[0-9]{1}%,|100%,){2}([0-9]{1}%|[1-9]{1}[0-9]{1}%|100%){1}\\))$", "exceptionStackTrace": null, "matches": ["rgb(100%,10%,0%)", "rgb(1%,10%,0%)", "rgb(0%,10%,0%)", "rgb(0%,0%,1%)", "rgb(25,250,0)", "rgb(20,200,0)", "rgb(250,200,0)", "rgb(10,100,0)", "rgb(100,10,0)", "rgb(1,10,0)", "rgb(110,10,0)", "rgb(0,10,0)", "rgb(0,0,25)", "rgb(0,0,20)", "rgb(0,0,1)", "rgb(0,0,110)", "#a00", "#A00", "#a00000", "#A00000", "rgb(10%,100%,0%)", "rgb(0%,100%,100%)", "rgb(0%,100%,10%)", "rgb(0%,100%,0%)", "rgb(200,250,0)", "rgb(100,250,0)", "rgb(10,250,0)", "rgb(0,250,250)", "rgb(0,250,200)", "rgb(0,250,100)", "rgb(0,250,10)", "rgb(0,250,0)", "000", "000000", "rgb(100%,100%,0%)", "rgb(10%,10%,0%)", "rgb(0%,0%,100%)", "rgb(0%,0%,10%)", "rgb(0%,0%,0%)", "rgb(250,250,0)", "rgb(200,200,0)", "rgb(100,100,0)", "rgb(10,10,0)", "rgb(0,0,250)", "rgb(0,0,200)", "rgb(0,0,100)", "rgb(0,0,10)", "rgb(0,0,0)", "#000", "#000000"], "nonMatches": ["rgb(110%,10%,0%)", "rgb(00%,10%,0%)", "rgb(0%,0%,110%)", "rgb(0%,0%,0%0%)", "rgb(0%,0%,)", "rgb(0%,0%,00%)", "rgb(0%,0%,%)", "rgb(0%,0%,0%,0%)", "rgb(0%,0%)", "rgb(00%,0%,0%)", "rgb(%,0%,0%)", "rgb(2500,250,0)", "rgb(256,250,0)", "rgb(2000,200,0)", "rgb(2200,200,0)", "rgb(00,200,0)", "rgb(1000,100,0)", "rgb(1100,100,0)", "rgb(00,100,0)", "rgb(00,10,0)", "rgb(0,0,2500)", "rgb(0,0,256)", "rgb(0,0,2000)", "rgb(0,0,2200)", "rgb(0,0,1000)", "rgb(0,0,1100)", "rgb(0,0,00)", "rgb(0,0,)", "rgb(0,0,0,0)", "rgb(0,0)", "rgb(00,0,0)", "rgb(,0,0)", "#0000", "#00", "#g00", "#G00", "#0000000", "#00000", "#g00000", "#G00000", "##000000"]}, {"regex": "^(([a-zA-Z]{2})([0-9]{6}))$", "exceptionStackTrace": null, "matches": ["aA000000", "AA000000"], "nonMatches": ["AA0000000", "AA00000", "AAA000000", "A000000"]}, {"regex": "^(([0-9]{5})|([0-9]{3}[ ]{0,1}[0-9]{2}))$", "exceptionStackTrace": null, "matches": ["000 00", "00000"], "nonMatches": ["000 000", "000 0", "000  00", "0000 00", "00 00", "000000", "0000"]}, {"regex": "^([0-9]{2})(01|02|03|04|05|06|07|08|09|10|11|12|51|52|53|54|55|56|57|58|59|60|61|62)(([0]{1}[1-9]{1})|([1-2]{1}[0-9]{1})|([3]{1}[0-1]{1}))/([0-9]{3,4})$", "exceptionStackTrace": null, "matches": ["000101/0000", "006201/000", "006101/000", "006001/000", "005901/000", "005801/000", "005701/000", "005601/000", "005501/000", "005401/000", "005301/000", "005201/000", "005101/000", "001201/000", "001101/000", "001001/000", "000901/000", "000801/000", "000701/000", "000601/000", "000501/000", "000401/000", "000301/000", "000201/000", "000130/000", "000110/000", "000101/000"], "nonMatches": ["0001300/000", "00013/000", "000132/000", "0001330/000", "0001100/000", "0001110/000", "000101/00000", "000101/00", "0001011/000", "00010/000", "000100/000", "0001001/000", "00011/000", "0000101/000", "00101/000"]}, {"regex": "^([0-7]{3})$", "exceptionStackTrace": null, "matches": ["000"], "nonMatches": ["0000", "00", "800"]}, {"regex": "^([0]{0,1}[0-7]{3})$", "exceptionStackTrace": null, "matches": ["000", "0000"], "nonMatches": ["0800", "00000"]}, {"regex": "^((\\-|d|l|p|s){1}(\\-|r|w|x){9})$ ", "exceptionStackTrace": null, "matches": [], "nonMatches": ["----------- ", "--------- ", "-x-------- ", "-w-------- ", "-r-------- ", "s--------- ", "p--------- ", "l--------- ", "d--------- ", "-xxxxxxxxx ", "-wwwwwwwww ", "-rrrrrrrrr ", "---------- "]}, {"regex": "^(B(A|B|C|J|L|N|R|S|Y)|CA|D(K|S|T)|G(A|L)|H(C|E)|IL|K(A|I|E|K|M|N|S)|L(E|C|M|V)|M(A|I|L|T|Y)|N(I|O|M|R|Z)|P(B|D|E|O|K|N|P|T|U|V)|R(A|K|S|V)|S(A|B|C|E|I|K|L|O|N|P|V)|T(A|C|N|O|R|S|T|V)|V(K|T)|Z(A|C|H|I|M|V))([ ]{0,1})([0-9]{3})([A-Z]{2})$", "exceptionStackTrace": null, "matches": ["ZV000AA", "ZM000AA", "ZI000AA", "ZH000AA", "ZC000AA", "ZA000AA", "VT000AA", "VK000AA", "TV000AA", "TT000AA", "TS000AA", "TR000AA", "TO000AA", "TN000AA", "TC000AA", "TA000AA", "SV000AA", "SP000AA", "SN000AA", "SO000AA", "SL000AA", "SK000AA", "SI000AA", "SE000AA", "SC000AA", "SB000AA", "SA000AA", "RV000AA", "RS000AA", "RK000AA", "RA000AA", "PV000AA", "PU000AA", "PT000AA", "PP000AA", "PN000AA", "PK000AA", "PO000AA", "PE000AA", "PD000AA", "PB000AA", "NZ000AA", "NR000AA", "NM000AA", "NO000AA", "NI000AA", "MY000AA", "MT000AA", "ML000AA", "MI000AA", "MA000AA", "LV000AA", "LM000AA", "LC000AA", "LE000AA", "KS000AA", "KN000AA", "KM000AA", "KK000AA", "KE000AA", "KI000AA", "KA000AA", "IL000AA", "HE000AA", "HC000AA", "GL000AA", "GA000AA", "DT000AA", "DS000AA", "DK000AA", "CA000AA", "BY000AA", "BS000AA", "BR000AA", "BN000AA", "BL000AA", "BJ000AA", "BC000AA", "BB000AA", "BA000AA", "ZV 000AA", "ZM 000AA", "ZI 000AA", "ZH 000AA", "ZC 000AA", "ZA 000AA", "VT 000AA", "VK 000AA", "TV 000AA", "TT 000AA", "TS 000AA", "TR 000AA", "TO 000AA", "TN 000AA", "TC 000AA", "TA 000AA", "SV 000AA", "SP 000AA", "SN 000AA", "SO 000AA", "SL 000AA", "SK 000AA", "SI 000AA", "SE 000AA", "SC 000AA", "SB 000AA", "SA 000AA", "RV 000AA", "RS 000AA", "RK 000AA", "RA 000AA", "PV 000AA", "PU 000AA", "PT 000AA", "PP 000AA", "PN 000AA", "PK 000AA", "PO 000AA", "PE 000AA", "PD 000AA", "PB 000AA", "NZ 000AA", "NR 000AA", "NM 000AA", "NO 000AA", "NI 000AA", "MY 000AA", "MT 000AA", "ML 000AA", "MI 000AA", "MA 000AA", "LV 000AA", "LM 000AA", "LC 000AA", "LE 000AA", "KS 000AA", "KN 000AA", "KM 000AA", "KK 000AA", "KE 000AA", "KI 000AA", "KA 000AA", "IL 000AA", "HE 000AA", "HC 000AA", "GL 000AA", "GA 000AA", "DT 000AA", "DS 000AA", "DK 000AA", "CA 000AA", "BY 000AA", "BS 000AA", "BR 000AA", "BN 000AA", "BL 000AA", "BJ 000AA", "BC 000AA", "BB 000AA", "BA 000AA"], "nonMatches": ["BA 000AAA", "BA 000A", "BA 0000AA", "BA 00AA", "BA  000AA"]}, {"regex": "^([a-hA-H]{1}[1-8]{1})$", "exceptionStackTrace": null, "matches": ["a1", "A1"], "nonMatches": ["A11", "A", "A0", "AA1", "1", "i1", "I1"]}, {"regex": "^(([0]{0,1})([1-9]{1})([0-9]{2})){1}([\\ ]{0,1})((([0-9]{3})([\\ ]{0,1})([0-9]{3}))|(([0-9]{2})([\\ ]{0,1})([0-9]{2})([\\ ]{0,1})([0-9]{2})))$", "exceptionStackTrace": null, "matches": ["0100 00 0000", "0100 0000 00", "0100 000000", "0100000 000", "100 000 000", "100000000", "0100 00 00 00", "0100 000 000"], "nonMatches": ["0100 00 00 000", "0100 00 00 0", "0100 00 00  00", "0100 00 000 00", "0100 00 0 00", "0100 00  00 00", "0100 000 00 00", "0100 0 00 00", "0100 000 0000", "0100 000 00", "0100 000  000", "0100 0000 000", "0100 00 000", "0100  000 000", "01000100 000 000", " 000 000", "01000 000 000", "010 000 000", "01100 000 000", "000 000 000", "0000 000 000", "00100 000 000"]}, {"regex": "(?&lt;attributeName&gt;\\w+?)=\n(\\&quot;+(?&lt;attributeValue&gt;[\\w\\.\\s\\:\\;\\/\\\\@\\-\\=\\&amp;\\?]*)\\&quot;+|\n(?&lt;attributeValue&gt;[\\w\\.\\:\\;\\/\\\\@\\-\\=\\&amp;\\?]*)?)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?&"}, "matches": []}, {"regex": "zyalix", "exceptionStackTrace": null, "matches": ["zyalix"], "nonMatches": []}, {"regex": "^\\s*(((\\d*\\.?\\d*[0-9]+\\d*)|([0-9]+\\d*\\.\\d*) )\\s*[xX]\\s*){2}((\\d*\\.?\\d*[0-9]+\\d*)|([0-9]+\\d*\\.\\d*))\\s*$", "exceptionStackTrace": null, "matches": [" 00.00  X 00.0  X 0.000 ", " 00.  X 00.0  X 0.000 ", " 000.0  X 00.0  X 0.000 ", " 0.0  X 00.0  X 0.000 ", " 0.000 X 0.000 X 00.00 ", " 0.000 X 0.000 X 00. ", " 0.000 X 0.000 X 000.0 ", " 0.000 X 0.000 X 0.0 ", " 0.000 X 0.000 X 0.000  ", " 0.000 X 0.000 X 0.000", " 0.000 X 0.000 X 0.0000 ", " 0.000 X 0.000 X 0.00 ", " 0.000 X 0.000 X 0000 ", " 0.000 X 0.000 X 00.000 ", " 0.000 X 0.000 X .000 ", " 0.000 X  0.000 X 0.000 ", " 0.000 X0.000 X 0.000 ", " 0.000 x 0.000 X 0.000 ", " 0.000  X 0.000 X 0.000 ", " 0.000X 0.000 X 0.000 ", " 0.0000 X 0.000 X 0.000 ", " 0.00 X 0.000 X 0.000 ", " 0000 X 0.000 X 0.000 ", " 00.000 X 0.000 X 0.000 ", " .000 X 0.000 X 0.000 ", "  0.000 X 0.000 X 0.000 ", "0.000 X 0.000 X 0.000 ", "0. X00.0  X 0", "0X00.0  X 0.", "0X00.0  X 0", " 00.0  X 00.0  X 0.000 ", " 0.000 X 0.000 X 00.0 ", " 0.000 X 0.000 X 0.000 "], "nonMatches": [" 0.000 X 0.000 X 0..000 ", " 0.000 X 0.000 X 0.000 X 0.000 ", " 0.000 X 0.000 ", " 0.000 a 0.000 X 0.000 ", " 0.000 A 0.000 X 0.000 ", " 0..000 X 0.000 X 0.000 "]}, {"regex": "Customer Support Engineer", "exceptionStackTrace": null, "matches": ["Customer Support Engineer"], "nonMatches": []}, {"regex": "^[0-9]+$", "exceptionStackTrace": null, "matches": ["00", "0"], "nonMatches": [""]}, {"regex": "fsefe", "exceptionStackTrace": null, "matches": ["fsefe"], "nonMatches": []}, {"regex": "^(?=.*\\d)(?=.*[a-z])([a-z0-9]{8,25})$", "exceptionStackTrace": null, "matches": ["a0000000"], "nonMatches": ["00000000000000000000000000", "0000000000000000000000000", "0000000", "00000000"]}, {"regex": "^(((\\d|([a-f]|[A-F])){2}:){5}(\\d|([a-f]|[A-F])){2})$|^(((\\d|([a-f]|[A-F])){2}-){5}(\\d|([a-f]|[A-F])){2})$|^$", "exceptionStackTrace": null, "matches": ["aA-AA-AA-AA-AA-00", "0A-AA-AA-AA-AA-A0", "0A-AA-AA-AA-AA-a0", "0A-AA-AA-AA-AA-00", "aA:AA:AA:AA:AA:00", "0A:AA:AA:AA:AA:A0", "0A:AA:AA:AA:AA:a0", "0A:AA:AA:AA:AA:00", "", "AA-AA-AA-AA-AA-00", "aa-aa-aa-aa-aa-00", "00-00-00-00-00-AA", "00-00-00-00-00-aa", "00-00-00-00-00-00", "AA:AA:AA:AA:AA:00", "aa:aa:aa:aa:aa:00", "00:00:00:00:00:AA", "00:00:00:00:00:aa", "00:00:00:00:00:00"], "nonMatches": ["GA-AA-AA-AA-AA-00", "ga-aa-aa-aa-aa-00", "00-00-00-00-00-GA", "00-00-00-00-00-ga", "00-00-00-00-00-000", "00-00-00-00-00-0", "00-00-00-00-00-00-00", "00-00-00-00-00", "000-00-00-00-00-00", "0-00-00-00-00-00", "GA:AA:AA:AA:AA:00", "ga:aa:aa:aa:aa:00", "00:00:00:00:00:GA", "00:00:00:00:00:ga", "00:00:00:00:00:000", "00:00:00:00:00:0", "00:00:00:00:00:00:00", "00:00:00:00:00", "000:00:00:00:00:00", "0:00:00:00:00:00"]}, {"regex": "^((0?[1-9])|((1)[0-1]))?((\\.[0-9]{0,2})?|0(\\.[0-9]{0,2}))$", "exceptionStackTrace": null, "matches": ["010.00", "010.", "01", "01.00", "01.", ".0", "1.0", "0.", "", "10.0", "010.0", "01.0"], "nonMatches": ["12.0", "010.000", "01.0.0", "01.000", "0101.0", "00.0", "001.0"]}, {"regex": "Technical Support ", "exceptionStackTrace": null, "matches": ["Technical Support "], "nonMatches": []}, {"regex": "^\\+\\d{1,3}\\s\\d{3}\\s\\d{3}\\s\\d{4}", "exceptionStackTrace": null, "matches": ["+0 000 000 00000", "+000 000 000 0000", "+0 000 000 0000"], "nonMatches": ["+0 000 000 000", "+0 000 0000 0000", "+0 000 00 0000", "+0 0000 000 0000", "+0 00 000 0000", "+0000 000 000 0000", "+ 000 000 0000"]}, {"regex": "\\b((?:0[1-46-9]\\d{3})|(?:[1-357-9]\\d{4})|(?:[4][0-24-9]\\d{3})|(?:[6][013-9]\\d{3}))\\b", "exceptionStackTrace": null, "matches": ["63000", "60000", "40000", "70000", "10000", "01000", "61000", "44000", "50000", "06000"], "nonMatches": ["610000", "6100", "62000", "440000", "4400", "43000", "500000", "5000", "060000", "0600", "00000"]}, {"regex": "^([A-Z\\d]{3})[A-Z]{2}\\d{2}([A-Z\\d]{1})([X\\d]{1})([A-Z\\d]{3})\\d{5}$", "exceptionStackTrace": null, "matches": ["000AA000XA0000000", "000AA000000000000", "000AA00AX00000000", "A00AA000X00000000", "000AA000X00000000"], "nonMatches": ["000AA000X000000000", "000AA000X0000000", "000AA000XX00000000", "000AA00000000000", "000AA000A00000000", "000AA0000X00000000", "000AA00X00000000", "000AAA000X00000000", "000A000X00000000", "0000AA000X00000000", "00AA000X00000000"]}, {"regex": "(?!^[0-9]*$)(?!^[a-zA-Z]*$)^([a-zA-Z0-9]{8,10})$", "exceptionStackTrace": null, "matches": ["a0000000", "A0000000"], "nonMatches": ["00000000000", "0000000000", "0000000", "00000000"]}, {"regex": "\\w+[\\w-\\.]*\\@\\w+((-\\w+)|(\\w*))\\.[a-z]{2,3}$|^([0-9a-zA-Z&#39;\\.]{3,40})\\*|([0-9a-zA-Z&#39;\\.]+)@([0-9a-zA-Z&#39;]+)\\.([0-9a-zA-Z&#39;]+)$|([0-9a-zA-Z&#39;\\.]+)@([0-9a-zA-Z&#39;]+)\\*+$|^$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character range \\w-\\."}, "matches": []}, {"regex": "([*,1-9]:[1-9]){1}(,([*,1-9]:[1-9]){0,}", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "missing ), unterminated subpattern"}, "matches": []}, {"regex": "^[0]{1}[19]{1}[0-9]{8,9}$", "exceptionStackTrace": null, "matches": ["09000000000", "09900000000", "0100000000", "0900000000"], "nonMatches": ["090000000000", "090000000", "000000000", "0000000000", "00900000000", "900000000"]}, {"regex": "[^\\\\]+(?=(\\.dwg)|(\\.pdf)|(\\.doc[^x]))", "exceptionStackTrace": null, "matches": [], "nonMatches": ["\\", ".", "eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", " ", "6", "_", "", "evil"]}, {"regex": "^[+-]?[0-9]*\\.?([0-9]?)*", "exceptionStackTrace": null, "matches": ["-0.00", "-0.", "-0..0", "-00", "-00.0", "-.0", "--0.0", "0.0", "+0.0", "", "-0.0"], "nonMatches": []}, {"regex": "background-image.[^<]*?;", "exceptionStackTrace": null, "matches": ["background-imagea;;", "background-imagea-;", "background-imageaeVil;", "background-imageaEVIL;", "background-imageaev_il;", "background-imageaev il;", "background-imageaev4il;", "background-imageae;", "background-imagea ;", "background-imagea6;", "background-imagea_;", "background-imageAevil;", "background-image<evil;", "background-image;evil;", "background-image0evil;", "background-image-evil;", "background-image evil;", "background-imagea;", "background-imageaevil;"], "nonMatches": ["background-imagea<;"]}, {"regex": "^[a-zA-Z0-9\\s.\\-_&#39;]+$", "exceptionStackTrace": null, "matches": [";", ".", "-", "&", "#", "eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", " ", "6", "_", "evil"], "nonMatches": [""]}, {"regex": "(?:(?<scheme>[a-zA-Z]+)://)?(?<domain>(?:[0-9a-zA-Z\\-_]+(?:[.][0-9a-zA-Z\\-_]+)*))(?::(?<port>[0-9]+))?(?<path>(?:/[0-9a-zA-Z\\-_.]+)+)(?:[?](?<query>.+))?", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<s"}, "matches": []}, {"regex": "&lt;(\\/{0,1})img(.*?)(\\/{0,1})\\&gt;", "exceptionStackTrace": null, "matches": ["&lt;/imgevil//&gt;", "&lt;/imgevil&gt;", "&lt;/img;/&gt;", "&lt;/img//&gt;", "&lt;/img&/&gt;", "&lt;/imgeVil/&gt;", "&lt;/imgEVIL/&gt;", "&lt;/imgev_il/&gt;", "&lt;/imgev il/&gt;", "&lt;/imgev4il/&gt;", "&lt;/imge/&gt;", "&lt;/img /&gt;", "&lt;/img6/&gt;", "&lt;/img_/&gt;", "&lt;/img/&gt;", "&lt;imgevil/&gt;", "&lt;img&gt;", "&lt;/imgevil/&gt;"], "nonMatches": ["&lt;//imgevil/&gt;"]}, {"regex": "[A-Z0-9]{5}\\d[0156]\\d([0][1-9]|[12]\\d|3[01])\\d[A-Z0-9]{3}[A-Z]{2}", "exceptionStackTrace": null, "matches": ["00000060300000AA", "00000060100000AA", "00000060010000AAA", "000000600100000AA", "00000060010A00AA", "00000050010000AA", "00000010010000AA", "00000000010000AA", "000000060010000AA", "A0000060010000AA", "00000060310000AA", "00000060200000AA", "00000060010000AA"], "nonMatches": ["00000060320000AA", "00000060010000A", "0000006001000AA", "00000060000000AA", "00000020010000AA", "0000060010000AA"]}, {"regex": "^(\\+[1-9]\\d+) ([1-9]\\d+) ([1-9]\\d+)(\\-\\d+){0,1}$|^(0\\d+) ([1-9]\\d+)(\\-\\d+){0,1}$|^([1-9]\\d+)(\\-\\d+){0,1}$", "exceptionStackTrace": null, "matches": ["10-00", "100-0", "00 10-00", "00 100-0", "000 10-0", "+10 10 10-00", "+10 10 100-0", "+10 100 10-0", "+100 10 10-0", "10", "00 10", "+10 10 10", "10-0", "00 10-0", "+10 10 10-0"], "nonMatches": ["10-0-0", "10-", "1-0", "00-0", "00 10-0-0", "00 10-", "00 1-0", "00 00-0", "0 10-0", "+10 10 10-0-0", "+10 10 10-", "+10 10 1-0", "+10 10 00-0", "+10 1 10-0", "+10 00 10-0", "+1 10 10-0", "+00 10 10-0"]}, {"regex": "(([\\+]90?)|([0]?))([ ]?)((\\([0-9]{3}\\))|([0-9]{3}))([ ]?)([0-9]{3})(\\s*[\\-]?)([0-9]{2})(\\s*[\\-]?)([0-9]{2})", "exceptionStackTrace": null, "matches": ["00 (000) 000 -00 -00", " (000) 000 -00 -00", "+90 0000 000 -00 -00", "+90 (000) 000 -00 -000", "+90 (000) 000 -00 00", "+90 (000) 000 -00  -00", "+90 (000) 000 -00-00", "+90 (000) 000 00 -00", "+90 (000) 000  -00 -00", "+90 (000) 000-00 -00", "+90 (000)000 -00 -00", "+90  (000) 000 -00 -00", "+90(000) 000 -00 -00", "+900 (000) 000 -00 -00", "+9 (000) 000 -00 -00", "(000)0000000", "+90000000000", "+9(000)0000000", "0 (000) 000 -00 -00", "+90 000 000 -00 -00", "+90 (000) 000 -00 -00"], "nonMatches": ["+90 00 000 -00 -00", "+90 (000) 000 -00 -0", "+90 (000) 000 -00 --00", "+90 (000) 000 -000 -00", "+90 (000) 000 -0 -00", "+90 (000) 000 --00 -00", "+90 (000) 0000 -00 -00", "+90 (000) 00 -00 -00", "+90 (000)  000 -00 -00", "+90 (0000) 000 -00 -00", "+90 (00) 000 -00 -00"]}, {"regex": "^[a-zA-Z]{1,3}\\[([0-9]{1,3})\\]", "exceptionStackTrace": null, "matches": ["A[000]", "AAA[0]", "a[0]", "A[0]"], "nonMatches": ["A[0000]", "A[]", "AAAA[0]", "[0]"]}, {"regex": "([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+)", "exceptionStackTrace": null, "matches": ["evil@evil..", "evil@evil.-", "evil@evil.eVil", "evil@evil.EVIL", "evil@evil.ev_il", "evil@evil.ev il", "evil@evil.ev4il", "evil@evil.e", "evil@evil.6", "evil@evil._", "evil@..evil", "evil@-.evil", "evil@eVil.evil", "evil@EVIL.evil", "evil@ev_il.evil", "evil@ev4il.evil", "evil@e.evil", "evil@6.evil", "evil@_.evil", ".@evil.evil", "-@evil.evil", "eVil@evil.evil", "EVIL@evil.evil", "ev_il@evil.evil", "ev il@evil.evil", "ev4il@evil.evil", "e@evil.evil", "6@evil.evil", "_@evil.evil", "evil@evil.evil"], "nonMatches": ["evil@evil.@", "evil@evil. ", "evil@evil.", "evil@@.evil", "evil@ev il.evil", "evil@ .evil", "evil@.evil", "@@evil.evil", " @evil.evil", "@evil.evil"]}, {"regex": ".*-[0-9]{1,10}.*", "exceptionStackTrace": null, "matches": ["evil-0-", "evil-0eVil", "evil-0EVIL", "evil-0ev_il", "evil-0ev il", "evil-0ev4il", "evil-0e", "evil-0 ", "evil-06", "evil-0_", "evil-0", "evil-00000000000evil", "evil-0000000000evil", "--0evil", "eVil-0evil", "EVIL-0evil", "ev_il-0evil", "ev il-0evil", "ev4il-0evil", "e-0evil", " -0evil", "6-0evil", "_-0evil", "-0evil", "-0", "evil-0evil"], "nonMatches": ["evil-evil"]}, {"regex": "cdsvfdrg", "exceptionStackTrace": null, "matches": ["cdsvfdrg"], "nonMatches": []}, {"regex": "^[A-Za-z0-9. ]+(?:[_&%$*#@!-][A-Za-z0-9. ]+)*$", "exceptionStackTrace": null, "matches": ["evil-evil-evil", "evil-.", "evil-eVil", "evil-EVIL", "evil-ev_il", "evil-ev il", "evil-ev4il", "evil-e", "evil- ", "evil-6", "evil_evil", "evil@evil", "evil*evil", "evil&evil", "evil%evil", "evil$evil", "evil#evil", "evil!evil", ".-evil", "eVil-evil", "EVIL-evil", "ev_il-evil", "ev il-evil", "ev4il-evil", "e-evil", " -evil", "6-evil", "evil", "evil-evil"], "nonMatches": ["evil-@", "evil--", "evil-*", "evil-&", "evil-%", "evil-$", "evil-#", "evil-!", "evil-_", "evil-", "@-evil", "--evil", "*-evil", "&-evil", "%-evil", "$-evil", "#-evil", "!-evil", "_-evil", "-evil"]}, {"regex": "hnjgj", "exceptionStackTrace": null, "matches": ["hnjgj"], "nonMatches": []}, {"regex": "^\\d{5}(-\\d{3})?$", "exceptionStackTrace": null, "matches": ["00000", "00000-000"], "nonMatches": ["00000-000-000", "00000-0000", "00000-00", "000000-000", "0000-000"]}, {"regex": "^[A-Z&#196;&#214;&#220;]{1,3}\\-[ ]{0,1}[A-Z]{0,2}[0-9]{1,4}[H]{0,1}", "exceptionStackTrace": null, "matches": [";- A0HH", ";- A0", ";- A00000H", ";- A0000H", ";- AA0H", ";- 0H", ";-A0H", ";;;- A0H", "A- A0H", "9- A0H", "6- A0H", "4- A0H", "2- A0H", "1- A0H", "0- A0H", "&- A0H", "#- A0H", ";-0", ";- A0H"], "nonMatches": [";- AH", ";- AAA0H", ";-  A0H", ";;;;- A0H", "- A0H", "3- A0H"]}, {"regex": "^[1-9]+\\d*\\.\\d{2}$", "exceptionStackTrace": null, "matches": ["100.00", "110.00", "1.00", "10.00"], "nonMatches": ["10.000", "10.0", "0.00", "00.00"]}, {"regex": "^100$|^0$|^[1-9]{0,1}[0-9]{0,1}$|^[1-9]{0,1}[0-9]{0,1}\\.[0-9]{1,3}$", "exceptionStackTrace": null, "matches": ["10.000", "1.0", "0.0", "1", ".0", "", "10.0", "10", "0", "100"], "nonMatches": ["10.0000", "10.", "100.0", "110.0", "00.0", "110", "00"]}, {"regex": "\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?):\\d{1,5}\\b", "exceptionStackTrace": null, "matches": ["10.100.100.250:0", "00.100.100.250:0", "000.100.100.250:0", "250.200.200.250:0", "250.250.250.10:0", "250.250.250.00:0", "250.250.250.000:0", "250.250.250.250:00000", "250.250.250.250.250:0", "0.100.100.250:0", "200.100.100.250:0", "250.100.100.0:0", "250.100.100.200:0", "250.100.100.250:0", "100.100.100.250:0", "200.200.200.250:0", "250.250.250.100:0", "250.250.250.200:0", "250.250.250.250:0"], "nonMatches": ["1000.100.100.250:0", "1100.100.100.250:0", "250.250.250.1000:0", "250.250.250.1100:0", "250.250.250.250:000000", "250.250.250.250:", "250.250.250.256:0", "250.250.250:0", "256.250.250.250:0"]}, {"regex": "[$][0 -9]+", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (bad range): Invalid range:  -9"}, "matches": [], "nonMatches": []}, {"regex": "(^091[0-9]{8}$)|(^093[0-9]{8}$)|(^090[0-9]{8}$)", "exceptionStackTrace": null, "matches": ["09000000000", "09300000000", "09100000000"], "nonMatches": ["090000000000", "0900000000", "093000000000", "0930000000", "091000000000", "0910000000"]}, {"regex": "no regex plz delete", "exceptionStackTrace": null, "matches": ["no regex plz delete"], "nonMatches": []}, {"regex": "^[D-d][K-k]-[1-9]{1}[0-9]{3}$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (bad range): Invalid range: D-d"}, "matches": [], "nonMatches": []}, {"regex": "^[D-d][K-k]( |-)[1-9]{1}[0-9]{3}$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (bad range): Invalid range: D-d"}, "matches": [], "nonMatches": []}, {"regex": "^[S-s]( |-)?[1-9]{1}[0-9]{2}( |-)?[0-9]{2}$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (bad range): Invalid range: S-s"}, "matches": [], "nonMatches": []}, {"regex": "^(?=[a-zA-Z])(?=.*[0-9])(?=.*[#\\$_])(?=.*[A-Z])(?=.*[a-z])(?!.*[^a-zA-Z0-9#\\$_])(?!.*\\s).{8,12}$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["aaaaaaaaaaaaa", "aaaaaaaaaaaa", "aaaaaaa", "_aaaaaaa", "Aaaaaaaa", "0aaaaaaa", "$aaaaaaa", "#aaaaaaa", " aaaaaaa", "aaaaaaaa"]}, {"regex": "^((0[1-9])|(1[0-2]))[\\/\\.\\-]*((0[8-9])|(1[1-9]))$", "exceptionStackTrace": null, "matches": ["01--08", "01/08", "01.08", "1008", "0111", "0108", "10-08", "01-11", "01-08"], "nonMatches": ["13-08", "01-10", "01-00", "00-08"]}, {"regex": "^(^N[BLSTU]$)|(^[AMN]B$)|(^[BQ]C$)|(^ON$)|(^PE$)|(^SK$)$", "exceptionStackTrace": null, "matches": ["BC", "MB", "AB", "NT", "NS", "NL", "SK", "PE", "ON", "QC", "NB", "NU"], "nonMatches": ["AC", "BB", "NA"]}, {"regex": "^[a-zA-Z]\\:\\\\.*|^\\\\\\\\.*", "exceptionStackTrace": null, "matches": ["\\\\\\", "\\\\:", "\\\\eVil", "\\\\EVIL", "\\\\ev_il", "\\\\ev il", "\\\\ev4il", "\\\\e", "\\\\ ", "\\\\6", "\\\\_", "A:\\\\", "A:\\:", "A:\\eVil", "A:\\EVIL", "A:\\ev_il", "A:\\ev il", "A:\\ev4il", "A:\\e", "A:\\ ", "A:\\6", "A:\\_", "a:\\evil", "\\\\", "A:\\", "\\\\evil", "A:\\evil"], "nonMatches": []}, {"regex": "^(?:m|M|male|Male|f|F|female|Female)$", "exceptionStackTrace": null, "matches": ["Female", "female", "F", "f", "Male", "male", "M", "m"], "nonMatches": []}, {"regex": "^\\(\\d{3}\\)\\s?|\\d{3}(\\.|-|\\s)?)\\d{3}(\\.|-|\\s)?\\d{4}$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unbalanced parenthesis"}, "matches": []}, {"regex": "^(?=.*\\d)(?=.*[a-zA-Z])(?!.*\\s).{6,12}$", "exceptionStackTrace": null, "matches": ["0aaaaa"], "nonMatches": ["aaaaaaaaaaaaa", "aaaaaaaaaaaa", "aaaaa", "_aaaaa", "Aaaaaa", " aaaaa", "aaaaaa"]}, {"regex": "^([\\w][\\w\\-_\\u0020]{4,18}[\\w])$", "exceptionStackTrace": null, "matches": ["a    _", "a    A", "a    0", "a                  a", "aa   a", "a_   a", "aA   a", "a0   a", "a-   a", "_    a", "A    a", "0    a", "a    a"], "nonMatches": ["a                   a", "a   a"]}, {"regex": "hg diff --nodates | egrep -e &quot;---&quot; -v | egrep -e &quot;^-&quot; -c\nhg diff --nodates | egrep -e &quot;\\+\\+\\+&quot; -v | egrep -e &quot;^\\+&quot; -c", "exceptionStackTrace": null, "matches": [" egrep -e &quot;+++&quot; -v ", " egrep -e &quot;-&quot; -c\nhg diff --nodates ", " egrep -e &quot;---&quot; -v ", "hg diff --nodates "], "nonMatches": [" egrep -e &quot;+&quot; -c"]}, {"regex": "^[NS]([0-8][0-9](\\.[0-5]\\d){2}|90(\\.00){2})\\040[EW]((0\\d\\d|1[0-7]\\d)(\\.[0-5]\\d){2}|180(\\.00){2})$", "exceptionStackTrace": null, "matches": ["S00.00.00 E000.00.00", "N00.00.00 W000.00.00", "S90.00.00 W000.00.00", "S00.00.00 W180.00.00", "S00.00.00 W100.00.00", "S00.00.00 W000.00.00"], "nonMatches": ["S90.00.00.00 W000.00.00", "S90.00 W000.00.00", "S00.00.00 W180.00.00.00", "S00.00.00 W180.00", "S00.00.00 W000.00.00.00", "S00.00.00 W000.00", "S00.00.00 W000.60.00", "S00.00.00 A000.00.00", "S00.00.00.00 W000.00.00", "S00.00 W000.00.00", "S00.60.00 W000.00.00", "A00.00.00 W000.00.00"]}, {"regex": "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,15}$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["aaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaa", "aaaaaaa", "_aaaaaaa", "Aaaaaaaa", "0aaaaaaa", " aaaaaaa", "aaaaaaaa"]}, {"regex": "cdafcs", "exceptionStackTrace": null, "matches": ["cdafcs"], "nonMatches": []}, {"regex": "(?<FirstName>[A-Z]\\.?\\w*\\-?[A-Z]?\\w*)\\s?(?<MiddleName>[A-Z]\\w*|[A-Z]?\\.?)\\s?(?<LastName>[A-Z]\\w*\\-?[A-Z]?\\w*)(?:,\\s|)(?<Suffix>Jr\\.|Sr\\.|IV|III|II|)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<F"}, "matches": []}, {"regex": "(?<FirstName>[A-Z]\\.?\\w*\\-?[A-Z]?\\w*)\\s?(?<MiddleName>[A-Z]\\w+|[A-Z]?\\.?)\\s(?<LastName>[A-Z]?\\w{0,3}[A-Z]\\w+\\-?[A-Z]?\\w*)(?:,\\s|)(?<Suffix>Jr\\.|Sr\\.|IV|III|II|)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<F"}, "matches": []}, {"regex": "(?<FirstName>[A-Z]\\.?\\w*\\-?[A-Z]?\\w*)\\s?(?<MiddleName>[A-Z]\\w+|[A-Z]?\\.?)\\s(?<LastName>(?:[A-Z]\\w{1,3}|St\\.\\s)?[A-Z]\\w+\\-?[A-Z]?\\w*)(?:,\\s|)(?<Suffix>Jr\\.|Sr\\.|IV|III|II|)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<F"}, "matches": []}, {"regex": "(?<LastName>[A-Z]\\w+\\-?[A-Z]?\\w*),\\s(?<Suffix>Jr\\.|Sr\\.|IV|III|II)?,?\\s?(?<FirstName>[A-Z]\\w*\\-?[A-Z]?\\w*\\.?)\\s?(?<MiddleName>[A-Z]?\\w*\\.?)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<L"}, "matches": []}, {"regex": "^[^<>`~!/@\\#},.?&quot;-$%:;)(_ ^{&*=|&#39;+]+$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character range ;-$"}, "matches": []}, {"regex": "^\\d$|^[1][0]$", "exceptionStackTrace": null, "matches": ["10", "0"], "nonMatches": []}, {"regex": "^(AT ?U[0-9]{7}|BE ?[0-9]{10}|BG ?[0-9]{9,10}|CY ?[0-9]{8}[A-Z]{1}|CZ ?[0-9]{8,10}|DE ?[0-9]{9}|DK ?[0-9]{8}|EE ?[0-9]{9}|EL ?[0-9]{9}|ES ?[0-9A-Z]{9}|FI ?[0-9]{8}|FR ?[0-9A-Z]{11}|HU ?[0-9]{8}|IE ?[0-9A-Z]{8}|IT ?[0-9]{11}|LT ?([0-9]{9}|[0-9]{12})|LU ?[0-9]{8}|LV ?[0-9]{11}|MT ?[0-9]{8}|NL ?[0-9B]{12}|PL ?[0-9]{10}|PT ?[0-9]{9}|RO ?[0-9]{2,10}|SE ?[0-9]{12}|SI ?[0-9]{8}|SK ?[0-9]{10})$", "exceptionStackTrace": null, "matches": ["RO 0000000000", "NL 0BBBBBBBBBBB", "IE 0AAAAAAA", "FR 0AAAAAAAAAA", "ES 0AAAAAAAA", "CZ 0000000000", "BG 0000000000", "SK0000000000", "SI00000000", "SE000000000000", "RO00", "PT000000000", "PL0000000000", "NLBBBBBBBBBBBB", "MT00000000", "LV00000000000", "LU00000000", "LT000000000000", "LT000000000", "IT00000000000", "IEAAAAAAAA", "HU00000000", "FRAAAAAAAAAAA", "FI00000000", "ESAAAAAAAAA", "EL000000000", "EE000000000", "DK00000000", "DE000000000", "CZ00000000", "CY00000000A", "BG000000000", "BE0000000000", "ATU0000000", "SK 0000000000", "SI 00000000", "SE 000000000000", "RO 00", "PT 000000000", "PL 0000000000", "NL BBBBBBBBBBBB", "MT 00000000", "LV 00000000000", "LU 00000000", "LT 000000000000", "LT 000000000", "IT 00000000000", "IE AAAAAAAA", "HU 00000000", "FR AAAAAAAAAAA", "FI 00000000", "ES AAAAAAAAA", "EL 000000000", "EE 000000000", "DK 00000000", "DE 000000000", "CZ 00000000", "CY 00000000A", "BG 000000000", "BE 0000000000", "AT U0000000"], "nonMatches": ["SK 00000000000", "SK 000000000", "SK  0000000000", "SI 000000000", "SI 0000000", "SI  00000000", "SE 0000000000000", "SE 00000000000", "SE  000000000000", "RO 00000000000", "RO 0", "RO  00", "PT 0000000000", "PT 00000000", "PT  000000000", "PL 00000000000", "PL 000000000", "PL  0000000000", "NL BBBBBBBBBBBBB", "NL BBBBBBBBBBB", "NL ABBBBBBBBBBB", "NL  BBBBBBBBBBBB", "MT 000000000", "MT 0000000", "MT  00000000", "LV 000000000000", "LV 0000000000", "LV  00000000000", "LU 000000000", "LU 0000000", "LU  00000000", "LT 0000000000000", "LT 00000000000", "LT 0000000000", "LT 00000000", "LT  000000000", "IT 000000000000", "IT 0000000000", "IT  00000000000", "IE AAAAAAAAA", "IE AAAAAAA", "IE  AAAAAAAA", "HU 000000000", "HU 0000000", "HU  00000000", "FR AAAAAAAAAAAA", "FR AAAAAAAAAA", "FR  AAAAAAAAAAA", "FI 000000000", "FI 0000000", "FI  00000000", "ES AAAAAAAAAA", "ES AAAAAAAA", "ES  AAAAAAAAA", "EL 0000000000", "EL 00000000", "EL  000000000", "EE 0000000000", "EE 00000000", "EE  000000000", "DK 000000000", "DK 0000000", "DK  00000000", "DE 0000000000", "DE 00000000", "DE  000000000", "CZ 00000000000", "CZ 0000000", "CZ  00000000", "CY 00000000AA", "CY 00000000", "CY 000000000A", "CY 0000000A", "CY  00000000A", "BG 00000000000", "BG 00000000", "BG  000000000", "BE 00000000000", "BE 000000000", "BE  0000000000", "AT U00000000", "AT U000000", "AT  U0000000"]}]