[{"regex": "^[-+]?[0-9]+[.]?[0-9]*([eE][-+]?[0-9]+)?$", "exceptionStackTrace": null, "matches": ["+0.0", "+0.0E+00", "+0.0E0", "+0.0E-0", "+0.0e+0", "+0.00E+0", "+0.E+0", "+00E+0", "+00.0E+0", "0.0E+0", "-0.0E+0", "0", "+0.0E+0"], "nonMatches": ["+0.0E+0E+0", "+0.0E+", "+0.0E++0", "+0.0a+0", "+0.0A+0", "+0..0E+0", "+.0E+0", "++0.0E+0"]}, {"regex": "^\\p{Sc}?[A-Z]{0,3}?[ ]?(\\d{1,3})(\\.|\\,)(\\d{0,4})?[ ]?\\p{Sc}?[A-Z]{0,3}?$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad escape \\p"}, "matches": []}, {"regex": "^[_a-zA-Z0-9-]+(\\.[_a-zA-Z0-9-]+)*@[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)*\\.(([0-9]{1,3})|([a-zA-Z]{2,3})|(aero|coop|info|museum|name))$", "exceptionStackTrace": null, "matches": ["evil.evil@evil.evil.AAA", "evil.evil@evil.evil.aA", "evil.evil@evil.evil.000", "evil.evil@evil.evil.evil.0", "evil.evil@evil.0", "evil.evil@evil.-.0", "evil.evil@evil.eVil.0", "evil.evil@evil.EVIL.0", "evil.evil@evil.ev4il.0", "evil.evil@evil.e.0", "evil.evil@evil.6.0", "evil.evil@-.evil.0", "evil.evil@eVil.evil.0", "evil.evil@EVIL.evil.0", "evil.evil@ev4il.evil.0", "evil.evil@e.evil.0", "evil.evil@6.evil.0", "evil.evil.evil@evil.evil.0", "evil@evil.evil.0", "evil.-@evil.evil.0", "evil.eVil@evil.evil.0", "evil.EVIL@evil.evil.0", "evil.ev_il@evil.evil.0", "evil.ev4il@evil.evil.0", "evil.e@evil.evil.0", "evil.6@evil.evil.0", "evil._@evil.evil.0", "-.evil@evil.evil.0", "eVil.evil@evil.evil.0", "EVIL.evil@evil.evil.0", "ev_il.evil@evil.evil.0", "ev4il.evil@evil.evil.0", "e.evil@evil.evil.0", "6.evil@evil.evil.0", "_.evil@evil.evil.0", "evil@evil.name", "evil@evil.museum", "evil@evil.info", "evil@evil.coop", "evil@evil.aero", "evil@evil.AA", "evil@evil.0", "evil.evil@evil.evil.name", "evil.evil@evil.evil.museum", "evil.evil@evil.evil.info", "evil.evil@evil.evil.coop", "evil.evil@evil.evil.aero", "evil.evil@evil.evil.AA", "evil.evil@evil.evil.0"], "nonMatches": ["evil.evil@evil.evil.AAAA", "evil.evil@evil.evil.A", "evil.evil@evil.evil.0000", "evil.evil@evil.evil.", "evil.evil@evil.@.0", "evil.evil@evil...0", "evil.evil@evil.ev_il.0", "evil.evil@evil.ev il.0", "evil.evil@evil. .0", "evil.evil@evil._.0", "evil.evil@evil..0", "evil.evil@@.evil.0", "evil.evil@..evil.0", "evil.evil@ev_il.evil.0", "evil.evil@ev il.evil.0", "evil.evil@ .evil.0", "evil.evil@_.evil.0", "evil.evil@.evil.0", "evil.@@evil.evil.0", "evil..@evil.evil.0", "evil.ev il@evil.evil.0", "evil. @evil.evil.0", "evil.@evil.evil.0", "@.evil@evil.evil.0", "..evil@evil.evil.0", "ev il.evil@evil.evil.0", " .evil@evil.evil.0", ".evil@evil.evil.0"]}, {"regex": "5", "exceptionStackTrace": null, "matches": ["5"], "nonMatches": []}, {"regex": "^[a-zA-Z0-9._\\-]+@[a-z0-9\\-]+(\\.[a-z]+){1,}$", "exceptionStackTrace": null, "matches": ["evil@evil.evil.evil", "evil@evil.e", "evil@-.evil", "evil@ev4il.evil", "evil@e.evil", "evil@6.evil", ".@evil.evil", "-@evil.evil", "eVil@evil.evil", "EVIL@evil.evil", "ev_il@evil.evil", "ev4il@evil.evil", "e@evil.evil", "6@evil.evil", "_@evil.evil", "evil@evil.evil"], "nonMatches": ["evil@evil", "evil@evil.eVil", "evil@evil.EVIL", "evil@evil.ev_il", "evil@evil.ev il", "evil@evil.ev4il", "evil@evil. ", "evil@evil.6", "evil@evil._", "evil@evil.", "evil@@.evil", "evil@..evil", "evil@eVil.evil", "evil@EVIL.evil", "evil@ev_il.evil", "evil@ev il.evil", "evil@ .evil", "evil@_.evil", "evil@.evil", "@@evil.evil", "ev il@evil.evil", " @evil.evil", "@evil.evil"]}, {"regex": "(?<Element>((\\*|\\w+)?)) (?<Complement>((\\.|\\#|\\-|\\w|\\:)*)) (?<FamilySeparator>([\\s\\>\\+\\~]|[\\,\\{]))", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<E"}, "matches": []}, {"regex": "<\\/?(tag1|tag2)[^>]*\\/?>", "exceptionStackTrace": null, "matches": ["</tag1evil//>", "</tag1evil>", "</tag1>/>", "</tag1</>", "</tag1//>", "</tag1eVil/>", "</tag1EVIL/>", "</tag1ev_il/>", "</tag1ev il/>", "</tag1ev4il/>", "</tag1e/>", "</tag1 />", "</tag16/>", "</tag1_/>", "</tag1/>", "<tag1evil/>", "<tag2>", "<tag1>", "</tag2evil/>", "</tag1evil/>"], "nonMatches": ["<//tag1evil/>"]}, {"regex": "<(tag1|tag2)[^>]*\\/?>.*<\\/(?:\\1)>", "exceptionStackTrace": null, "matches": ["<tag1evil/>></tag1>", "<tag1evil/><</tag1>", "<tag1evil/>/</tag1>", "<tag1evil/>eVil</tag1>", "<tag1evil/>EVIL</tag1>", "<tag1evil/>ev_il</tag1>", "<tag1evil/>ev il</tag1>", "<tag1evil/>ev4il</tag1>", "<tag1evil/>e</tag1>", "<tag1evil/> </tag1>", "<tag1evil/>6</tag1>", "<tag1evil/>_</tag1>", "<tag1evil/></tag1>", "<tag1evil//>evil</tag1>", "<tag1evil>evil</tag1>", "<tag1>/>evil</tag1>", "<tag1</>evil</tag1>", "<tag1//>evil</tag1>", "<tag1eVil/>evil</tag1>", "<tag1EVIL/>evil</tag1>", "<tag1ev_il/>evil</tag1>", "<tag1ev il/>evil</tag1>", "<tag1ev4il/>evil</tag1>", "<tag1e/>evil</tag1>", "<tag1 />evil</tag1>", "<tag16/>evil</tag1>", "<tag1_/>evil</tag1>", "<tag1/>evil</tag1>", "<tag1></tag1>", "<tag1evil/>evil</tag1>"], "nonMatches": ["<tag2></tag1>", "<tag2evil/>evil</tag1>"]}, {"regex": "(src|href|action)=&quot;(?!http://|#|mailto:|&)([^/#&quot;])", "exceptionStackTrace": null, "matches": ["src=&quot;A", "src=&quot;=", "src=&quot;:", "src=&quot;0", "src=&quot; ", "action=&quot;a", "href=&quot;a", "src=&quot;a"], "nonMatches": ["src=&quot;u", "src=&quot;t", "src=&quot;q", "src=&quot;o", "src=&quot;;", "src=&quot;/", "src=&quot;&", "src=&quot;#"]}, {"regex": "<a((?:(?! title=)[^&quot;>]*&quot;[^&quot;>]*&quot;)+)>([^<]+)<\\/a>", "exceptionStackTrace": null, "matches": ["<aevil&quot;evil&quot;>></a>", "<aevil&quot;evil&quot;>=</a>", "<aevil&quot;evil&quot;>;</a>", "<aevil&quot;evil&quot;>/</a>", "<aevil&quot;evil&quot;>&</a>", "<aevil&quot;evil&quot;>eVil</a>", "<aevil&quot;evil&quot;>EVIL</a>", "<aevil&quot;evil&quot;>ev_il</a>", "<aevil&quot;evil&quot;>ev il</a>", "<aevil&quot;evil&quot;>ev4il</a>", "<aevil&quot;evil&quot;>e</a>", "<aevil&quot;evil&quot;> </a>", "<aevil&quot;evil&quot;>6</a>", "<aevil&quot;evil&quot;>_</a>", "<aevil&quot;evil&quot;evil&quot;evil&quot;>evil</a>", "<aevil&quot;=&quot;>evil</a>", "<aevil&quot;<&quot;>evil</a>", "<aevil&quot;/&quot;>evil</a>", "<aevil&quot;eVil&quot;>evil</a>", "<aevil&quot;EVIL&quot;>evil</a>", "<aevil&quot;ev_il&quot;>evil</a>", "<aevil&quot;ev il&quot;>evil</a>", "<aevil&quot;ev4il&quot;>evil</a>", "<aevil&quot;e&quot;>evil</a>", "<aevil&quot; &quot;>evil</a>", "<aevil&quot;6&quot;>evil</a>", "<aevil&quot;_&quot;>evil</a>", "<aevil&quot;&quot;>evil</a>", "<a=&quot;evil&quot;>evil</a>", "<a<&quot;evil&quot;>evil</a>", "<a/&quot;evil&quot;>evil</a>", "<aeVil&quot;evil&quot;>evil</a>", "<aEVIL&quot;evil&quot;>evil</a>", "<aev_il&quot;evil&quot;>evil</a>", "<aev il&quot;evil&quot;>evil</a>", "<aev4il&quot;evil&quot;>evil</a>", "<ae&quot;evil&quot;>evil</a>", "<a &quot;evil&quot;>evil</a>", "<a6&quot;evil&quot;>evil</a>", "<a_&quot;evil&quot;>evil</a>", "<a&quot;evil&quot;>evil</a>", "<a&quot;&quot;>evil</a>", "<aevil&quot;evil&quot;>evil</a>"], "nonMatches": ["<aevil&quot;evil&quot;><</a>", "<aevil&quot;evil&quot;></a>", "<a>evil</a>", "<aevil&quot;>&quot;>evil</a>", "<aevil&quot;;&quot;>evil</a>", "<aevil&quot;&&quot;>evil</a>", "<a>&quot;evil&quot;>evil</a>", "<a;&quot;evil&quot;>evil</a>", "<a&&quot;evil&quot;>evil</a>"]}, {"regex": "(<(tag1|tag2)[^>]*\\/?>)[\\w\\S\\s]*?(<\\/(?:\\2)>)", "exceptionStackTrace": null, "matches": ["<tag1evil/>></tag1>", "<tag1evil/><</tag1>", "<tag1evil/>/</tag1>", "<tag1evil/>eVil</tag1>", "<tag1evil/>EVIL</tag1>", "<tag1evil/>ev_il</tag1>", "<tag1evil/>ev il</tag1>", "<tag1evil/>ev4il</tag1>", "<tag1evil/>e</tag1>", "<tag1evil/> </tag1>", "<tag1evil/>6</tag1>", "<tag1evil/>_</tag1>", "<tag1evil/></tag1>", "<tag1evil//>evil</tag1>", "<tag1evil>evil</tag1>", "<tag1>/>evil</tag1>", "<tag1</>evil</tag1>", "<tag1//>evil</tag1>", "<tag1eVil/>evil</tag1>", "<tag1EVIL/>evil</tag1>", "<tag1ev_il/>evil</tag1>", "<tag1ev il/>evil</tag1>", "<tag1ev4il/>evil</tag1>", "<tag1e/>evil</tag1>", "<tag1 />evil</tag1>", "<tag16/>evil</tag1>", "<tag1_/>evil</tag1>", "<tag1/>evil</tag1>", "<tag1></tag1>", "<tag1evil/>evil</tag1>"], "nonMatches": ["<tag2></tag1>", "<tag2evil/>evil</tag1>"]}, {"regex": "\\b(?!000)(?!666)(?!9)[0-9]{3}[ -]?(?!00)[0-9]{2}[ -]?(?!0000)[0-9]{4}\\b", "exceptionStackTrace": null, "matches": [], "nonMatches": ["000-00-00000", "000-00-000", "000-00--0000", "000-000000", "000-00 0000", "000-000-0000", "000-0-0000", "000--00-0000", "00000-0000", "000 00-0000", "0000-00-0000", "00-00-0000", "000000000", "000-00-0000"]}, {"regex": "((?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Sept|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?))(\\s+)[0-9]{2,4}", "exceptionStackTrace": null, "matches": ["January 00000", "January 0000", "January  00", "Dec 00", "Nov 00", "Oct 00", "Sep 00", "Aug 00", "Jul 00", "Jun 00", "Apr 00", "Mar 00", "Feb 00", "Jan 00", "December 00", "November 00", "October 00", "Sept 00", "September 00", "August 00", "July 00", "June 00", "May 00", "April 00", "March 00", "February 00", "January 00"], "nonMatches": ["Decemberember 00", "Novemberember 00", "Octoberober 00", "Septembertember 00", "Augustust 00", "Julyy 00", "Junee 00", "Aprilil 00", "Marchch 00", "Februaryruary 00", "January 0", "January00", "Januaryuary 00"]}, {"regex": "\\d{3})[- .]?(\\d{3}[- .]?\\d{4}", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unbalanced parenthesis"}, "matches": []}, {"regex": "^(.*)", "exceptionStackTrace": null, "matches": ["eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", " ", "6", "_", "", "evil"], "nonMatches": []}, {"regex": "start\\s*([^$]*)\\s*(.*?)", "exceptionStackTrace": null, "matches": ["start evil $", "start evil eVil", "start evil EVIL", "start evil ev_il", "start evil ev il", "start evil ev4il", "start evil e", "start evil  ", "start evil 6", "start evil _", "start evil ", "start evil  evil", "start evilevil", "start $ evil", "start eVil evil", "start EVIL evil", "start ev_il evil", "start ev il evil", "start ev4il evil", "start e evil", "start   evil", "start 6 evil", "start _ evil", "start  evil", "start  evil evil", "startevil evil", "start", "start evil evil"], "nonMatches": []}, {"regex": "wonder\\s*([^$]*)\\s*with", "exceptionStackTrace": null, "matches": ["wonder evil  with", "wonder evilwith", "wonder eVil with", "wonder EVIL with", "wonder ev_il with", "wonder ev il with", "wonder ev4il with", "wonder e with", "wonder   with", "wonder 6 with", "wonder _ with", "wonder  with", "wonder  evil with", "wonderevil with", "wonderwith", "wonder evil with"], "nonMatches": ["wonder $ with"]}, {"regex": "zdhfnfygj", "exceptionStackTrace": null, "matches": ["zdhfnfygj"], "nonMatches": []}, {"regex": "^(.|\\n){0,16}$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\n"}, "matches": [], "nonMatches": []}, {"regex": "(?<=,)\\s*(?=,)|^(?=,)|[^\\&quot;]{2,}(?=\\&quot;)|([^,\\&quot;]+(?=,|$))", "exceptionStackTrace": null, "matches": [",", "eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", "6", "_", "a", "ua", "ta", "qa", "oa", "Aa", ";a", "0a", ",a", "&a", " a", "  ", "evil", "aa", " "], "nonMatches": [";", "&", ""]}, {"regex": "yjuykiuk,iu", "exceptionStackTrace": null, "matches": ["yjuykiuk,iu"], "nonMatches": []}, {"regex": "^(\\$\\ |\\$)?((0|00|[1-9]\\d*|([1-9]\\d{0,2}(\\,\\d{3})*))(\\.\\d{1,4})?|(\\.\\d{1,4}))$", "exceptionStackTrace": null, "matches": ["$ .0000", "$ 10,000,000.0", "$ 100,000.0", "$ 1,000.0", "$ 100.0", "$ 1.0", "$ 0", "$ 0.0000", "0.0", ".0", "1", "00", "0", "$0.0", "$ .0", "$ 10,000.0", "$ 10.0", "$ 00.0", "$ 0.0"], "nonMatches": ["$ .00000", "$ .", "$ 10,0000.0", "$ 10,00.0", "$ 1000,000.0", "$ 00,000.0", "$ 0.0.0", "$ 0.00000", "$ 0.", "$ $ 0.0"]}, {"regex": "^([ \\u00c0-\\u01ffa-zA-Z&#39;])+$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 192"}, "matches": [], "nonMatches": []}, {"regex": "^\\s*[a-zA-Z0-9,\\s]+\\s*$", "exceptionStackTrace": null, "matches": [" evil  ", " evil", " , ", " eVil ", " EVIL ", " ev il ", " ev4il ", " e ", "   ", " 6 ", "  ", "  evil ", "evil ", "evil", " evil "], "nonMatches": [" ev_il ", " _ "]}, {"regex": "^[a-zA-Z0-9!@#$&_]+$", "exceptionStackTrace": null, "matches": ["@", "&", "$", "#", "!", "eVil", "EVIL", "ev_il", "ev4il", "e", "6", "_", "evil"], "nonMatches": ["ev il", " ", ""]}, {"regex": "^(([a-zA-Z0-9]+([\\-])?[a-zA-Z0-9]+)+(\\.)?)+[a-zA-Z]{2,6}$", "exceptionStackTrace": null, "matches": ["evil-evil.AAAAAAA", "evil-evil.AAAAAA", "evil-evil.aA", "evil-evil.evil-evil.AA", "evil-evilAA", "evil-evilevil-evil.AA", "evil-eVil.AA", "evil-EVIL.AA", "evil-ev4il.AA", "evil-e.AA", "evil-6.AA", "evilevil.AA", "eVil-evil.AA", "EVIL-evil.AA", "ev4il-evil.AA", "e-evil.AA", "6-evil.AA", "evilevilAA", "evil-evil.AA"], "nonMatches": ["evil-evil.A", "AA", "evil-evil..AA", ".AA", "evil-ev_il.AA", "evil-ev il.AA", "evil- .AA", "evil-_.AA", "evil-.AA", "evil--evil.AA", "ev_il-evil.AA", "ev il-evil.AA", " -evil.AA", "_-evil.AA", "-evil.AA"]}, {"regex": "^(((ht|f)tp(s?))\\://)?((([a-zA-Z0-9_\\-]{2,}\\.)+[a-zA-Z]{2,})|((?:(?:25[0-5]|2[0-4]\\d|[01]\\d\\d|\\d?\\d)(?(\\.?\\d)\\.)){4}))(:[a-zA-Z0-9]+)?(/[a-zA-Z0-9\\-\\._\\?\\,\\&#39;/\\\\\\+&amp;%\\$#\\=~]*)?$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character in group name '\\\\.?\\\\d'"}, "matches": []}, {"regex": "{.*}", "exceptionStackTrace": null, "matches": ["{}}", "{{}", "{eVil}", "{EVIL}", "{ev_il}", "{ev il}", "{ev4il}", "{e}", "{ }", "{6}", "{_}", "{}", "{evil}"], "nonMatches": []}, {"regex": "^(?:-([0-9]{1,2})|([0-9]{4}))?(?:-?(?:([0-9]{2})?(?:-?([0-9]{2}))?|W([0-9]{2})(?:-?([1-7]))?|([0-9]{3})))?(?:T([0-9]{2})(?::?([0-9]{2})(?::?([0-9]{2}))?)?(?:[,\\.]([0-9]+))?(?:(Z)|([+-])([0-9]{2})(?::?([0-9]{2}))?)?)?$", "exceptionStackTrace": null, "matches": ["-0-W00T00:00:00.0Z", "-0-W001T00:00:00.0Z", "-0-00-00T00:00:00.0-00", "-0-00-00T00:00:00.0-0000", "-0-00-00T00:00:00.0+00:00", "-0-00-00", "-0-00-00T00:00:00.0", "-0-00-00T00:00:00Z", "-0-00-00T00:00:00.00Z", "-0-00-00T00:00:00,0Z", "-0-00-00T00.0Z", "-0-00-00T00:00.0Z", "-0-00-00T00:0000.0Z", "-0-00-00T0000:00.0Z", "-0T00:00:00.0Z", "-0-00T00:00:00.0Z", "-0-0000T00:00:00.0Z", "-0--00T00:00:00.0Z", "-000-00T00:00:00.0Z", "-00-00T00:00:00.0Z", "-00-00-00T00:00:00.0Z", "", "0000-00-00T00:00:00.0Z", "-0-000T00:00:00.0Z", "-0-W00-1T00:00:00.0Z", "-0-00-00T00:00:00.0-00:00", "-0-00-00T00:00:00.0Z"], "nonMatches": ["00000-00-00T00:00:00.0Z", "000-00-00T00:00:00.0Z", "-0-W00-1-1T00:00:00.0Z", "-0-W00-0T00:00:00.0Z", "-0-W00--1T00:00:00.0Z", "-0-W000-1T00:00:00.0Z", "-0-W0-1T00:00:00.0Z", "-0-00-00T00:00:00.0-00:00:00", "-0-00-00T00:00:00.0-00:000", "-0-00-00T00:00:00.0-00:0", "-0-00-00T00:00:00.0-00::00", "-0-00-00T00:00:00.0-000:00", "-0-00-00T00:00:00.0-0:00", "-0-00-00T00:00:00.0ZT00:00:00.0Z", "-0-00-00T00:00:00.0ZZ", "-0-00-00T00:00:00.0.0Z", "-0-00-00T00:00:00.Z", "-0-00-00T00:00:00:00:00.0Z", "-0-00-00T00:00:00:00.0Z", "-0-00-00T00:00:000.0Z", "-0-00-00T00:00:0.0Z", "-0-00-00T00:00::00.0Z", "-0-00-00T00:000:00.0Z", "-0-00-00T00:0:00.0Z", "-0-00-00T00::00:00.0Z", "-0-00-00T000:00:00.0Z", "-0-00-00T0:00:00.0Z", "-0-00-00-00-00T00:00:00.0Z", "-0-00-00-00T00:00:00.0Z", "-0-00-000T00:00:00.0Z", "-0-00-0T00:00:00.0Z", "-0-00--00T00:00:00.0Z", "-0-0000-00T00:00:00.0Z", "-0-000-00T00:00:00.0Z", "-0-0-00T00:00:00.0Z", "-0--00-00T00:00:00.0Z", "-0-0-00-00T00:00:00.0Z", "-000-00-00T00:00:00.0Z", "--00-00T00:00:00.0Z"]}, {"regex": "([A-Za-z0-9.]+\\s*)+,", "exceptionStackTrace": null, "matches": ["evil evil ,", "evil  ,", ". ,", "eVil ,", "EVIL ,", "ev_il ,", "ev il ,", "ev4il ,", "e ,", "6 ,", "evil,", "evil ,"], "nonMatches": [",", ", ,", "  ,", "_ ,", " ,"]}, {"regex": "^[0-9]*\\/{1}[1-9]{1}[0-9]*$", "exceptionStackTrace": null, "matches": ["0/100", "0/1", "0/110", "00/10", "/10", "/1", "0/10"], "nonMatches": ["0/0", "0/00", "0//10", "010"]}, {"regex": "^(ht|f)tp(s?)\\:\\/\\/(([a-zA-Z0-9\\-\\._]+(\\.[a-zA-Z0-9\\-\\._]+)+)|localhost)(\\/?)([a-zA-Z0-9\\-\\.\\?\\,\\&#39;\\/\\\\\\+&amp;%\\$#_]*)?([\\d\\w\\.\\/\\%\\+\\-\\=\\&amp;\\?\\:\\\\\\&quot;\\&#39;\\,\\|\\~\\;]*)$", "exceptionStackTrace": null, "matches": ["https://evil.evil/evil~", "https://evil.evil/evil|", "https://evil.evil/evil\\", "https://evil.evil/evil?", "https://evil.evil/evil=", "https://evil.evil/evil;", "https://evil.evil/evil:", "https://evil.evil/evil/", "https://evil.evil/evil.", "https://evil.evil/evil-", "https://evil.evil/evil,", "https://evil.evil/evil+", "https://evil.evil/evil&", "https://evil.evil/evil%", "https://evil.evil/evil$", "https://evil.evil/evil#", "https://evil.evil/evileVil", "https://evil.evil/evilEVIL", "https://evil.evil/evilev_il", "https://evil.evil/evilev4il", "https://evil.evil/evile", "https://evil.evil/evil6", "https://evil.evil/evil_", "https://evil.evil/evilevilevil", "https://evil.evil/~evil", "https://evil.evil/|evil", "https://evil.evil/\\evil", "https://evil.evil/?evil", "https://evil.evil/=evil", "https://evil.evil/;evil", "https://evil.evil/:evil", "https://evil.evil//evil", "https://evil.evil/.evil", "https://evil.evil/-evil", "https://evil.evil/,evil", "https://evil.evil/+evil", "https://evil.evil/&evil", "https://evil.evil/%evil", "https://evil.evil/$evil", "https://evil.evil/#evil", "https://evil.evil/eVilevil", "https://evil.evil/EVILevil", "https://evil.evil/ev_ilevil", "https://evil.evil/ev4ilevil", "https://evil.evil/eevil", "https://evil.evil/6evil", "https://evil.evil/_evil", "https://evil.evil/evil", "https://evil.evil//evilevil", "https://evil.evilevilevil", "https://evil.evil.evil/evilevil", "https://evil../evilevil", "https://evil.-/evilevil", "https://evil.eVil/evilevil", "https://evil.EVIL/evilevil", "https://evil.ev_il/evilevil", "https://evil.ev4il/evilevil", "https://evil.e/evilevil", "https://evil.6/evilevil", "https://evil._/evilevil", "https://..evil/evilevil", "https://-.evil/evilevil", "https://eVil.evil/evilevil", "https://EVIL.evil/evilevil", "https://ev_il.evil/evilevil", "https://ev4il.evil/evilevil", "https://e.evil/evilevil", "https://6.evil/evilevil", "https://_.evil/evilevil", "http://evil.evil/evilevil", "ftp://evil.evil", "http://localhost", "http://evil.evil", "ftps://evil.evil/evilevil", "https://localhost/evilevil", "https://evil.evil/evilevil"], "nonMatches": ["https://evil.evil/evilev il", "https://evil.evil/evil ", "https://evil.evil/ev ilevil", "https://evil.evil/ evil", "https://evil/evilevil", "https://evil.~/evilevil", "https://evil.|/evilevil", "https://evil.\\/evilevil", "https://evil.?/evilevil", "https://evil.=/evilevil", "https://evil.;/evilevil", "https://evil.:/evilevil", "https://evil.//evilevil", "https://evil.,/evilevil", "https://evil.+/evilevil", "https://evil.&/evilevil", "https://evil.%/evilevil", "https://evil.$/evilevil", "https://evil.#/evilevil", "https://evil.ev il/evilevil", "https://evil. /evilevil", "https://evil./evilevil", "https://~.evil/evilevil", "https://|.evil/evilevil", "https://\\.evil/evilevil", "https://?.evil/evilevil", "https://=.evil/evilevil", "https://;.evil/evilevil", "https://:.evil/evilevil", "https:///.evil/evilevil", "https://,.evil/evilevil", "https://+.evil/evilevil", "https://&.evil/evilevil", "https://%.evil/evilevil", "https://$.evil/evilevil", "https://#.evil/evilevil", "https://ev il.evil/evilevil", "https:// .evil/evilevil", "https://.evil/evilevil", "httpss://evil.evil/evilevil"]}, {"regex": "Hotmail Customer Service UK", "exceptionStackTrace": null, "matches": ["Hotmail Customer Service UK"], "nonMatches": []}, {"regex": "^\\$(\\d{1,3}(\\,\\d{3})*|(\\d+))(\\.\\d{2})?$", "exceptionStackTrace": null, "matches": ["$00.00", "$0,000", "$0,000,000.00", "$000,000.00", "$0", "$0.00", "$0,000.00"], "nonMatches": ["$.00", "$0,000.00.00", "$0,000.000", "$0,000.0", "$0,0000.00", "$0,00.00", "$0000,000.00", "$,000.00"]}, {"regex": "^(?:(?:(?:0?[13578]|1[02])(\\/|-|\\.)31)\\1|(?:(?:0?[13-9]|1[0-2])(\\/|-|\\.)(?:29|30)\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:0?2(\\/|-|\\.)29\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:(?:0?[1-9])|(?:1[0-2]))(\\/|-|\\.)(?:0?[1-9]|1\\d|2[0-8])\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$", "exceptionStackTrace": null, "matches": ["01/01/00", "01/1/1600", "1/01/1600", "02/29/9200", "02/29/7600", "02/29/5600", "02/29/3600", "02/29/8400", "02/29/8000", "02/29/6800", "02/29/4800", "02/29/2800", "02/29/1692", "02/29/1676", "02/29/1656", "02/29/1636", "02/29/1616", "02/29/1684", "02/29/1680", "02/29/1668", "02/29/1648", "02/29/1628", "02/29/1604", "02/29/08", "2/29/1608", "03/29/1600", "1/29/1600", "10/31/1600", "08/31/00", "07/31/1600", "05/31/1600", "03/31/1600", "01/31/1600", "8/31/1600", "10/1/00", "1/20/00", "1/10/00", "1/1/00", "2/29/9600", "2/29/8800", "2/29/1600", "2/29/96", "2/29/88", "2/29/08", "10/29/00", "1/30/00", "1/29/00", "12/31/00", "8/31/00", "10/01/1600", "01/20/1600", "01/10/1600", "01/01/2000", "01/01/1600", "02/29/9600", "02/29/8800", "02/29/1600", "02/29/2008", "02/29/1696", "02/29/1688", "02/29/1608", "10/29/1600", "01/30/1600", "01/29/1600", "12/31/1600", "08/31/2000", "08/31/1600"], "nonMatches": ["13/01/1600", "01/01/0000", "01/01/16000", "01/01/160", "01/01/161600", "01/01/1000", "01/00/1600", "01/001/1600", "00/01/1600", "001/01/1600", "02/29/9000", "02/29/0600", "02/29/8100", "02/29/0800", "02/29/0008", "02/29/1690", "02/29/1606", "02/29/1681", "02/29/161608", "02/29/1008", "002/29/1608", "13/29/1600", "00/29/1600", "001/29/1600", "11/31/1600", "08/31/0000", "08/31/16000", "08/31/160", "08/31/161600", "08/31/1000", "00/31/1600", "008/31/1600", "1.1/00", "1-1/00", "2.29/08", "2-29/08", "1.29/00", "1-29/00", "8.31/00", "8-31/00", "01.01/1600", "01-01/1600", "02.29/1608", "02-29/1608", "01.29/1600", "01-29/1600", "08.31/1600", "08-31/1600"]}, {"regex": "^(?=\\d)(?:(?:(?:(?:(?:0?[13578]|1[02])(\\/|-|\\.)31)\\1|(?:(?:0?[1,3-9]|1[0-2])(\\/|-|\\.)(?:29|30)\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})|(?:0?2(\\/|-|\\.)29\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))|(?:(?:0?[1-9])|(?:1[0-2]))(\\/|-|\\.)(?:0?[1-9]|1\\d|2[0-8])\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2}))($|\\ (?=\\d)))?(((0?[1-9]|1[012])(:[0-5]\\d){0,2}(\\ [AP]M))|([01]\\d|2[0-3])(:[0-5]\\d){1,2})?$", "exceptionStackTrace": null, "matches": ["08/31/1600", "01:00 PM", "08/31/1600 01:00 PM"], "nonMatches": ["13/01/160001:00 PM", "01/01/000001:00 PM", "01/01/1600001:00 PM", "01/01/16001:00 PM", "01/01/16160001:00 PM", "01/01/0001:00 PM", "01/01/100001:00 PM", "01/00/160001:00 PM", "01/001/160001:00 PM", "01/1/160001:00 PM", "00/01/160001:00 PM", "001/01/160001:00 PM", "1/01/160001:00 PM", "02/29/920001:00 PM", "02/29/900001:00 PM", "02/29/760001:00 PM", "02/29/560001:00 PM", "02/29/360001:00 PM", "02/29/060001:00 PM", "02/29/840001:00 PM", "02/29/810001:00 PM", "02/29/800001:00 PM", "02/29/680001:00 PM", "02/29/480001:00 PM", "02/29/280001:00 PM", "02/29/080001:00 PM", "02/29/000801:00 PM", "02/29/169201:00 PM", "02/29/169001:00 PM", "02/29/167601:00 PM", "02/29/165601:00 PM", "02/29/163601:00 PM", "02/29/161601:00 PM", "02/29/160601:00 PM", "02/29/168401:00 PM", "02/29/168101:00 PM", "02/29/168001:00 PM", "02/29/166801:00 PM", "02/29/164801:00 PM", "02/29/162801:00 PM", "02/29/160401:00 PM", "02/29/16160801:00 PM", "02/29/0801:00 PM", "02/29/100801:00 PM", "002/29/160801:00 PM", "2/29/160801:00 PM", "13/29/160001:00 PM", "03/29/160001:00 PM", "01/29/160001:00 PM", "00/29/160001:00 PM", "00,/29/160001:00 PM", ",/29/160001:00 PM", "11/31/160001:00 PM", "10/31/160001:00 PM", "08/31/000001:00 PM", "08/31/160024:00", "08/31/160010:00:00:00", "08/31/160010:00:00", "08/31/160010", "08/31/160010:60", "08/31/160000:00", "08/31/160013:00 PM", "08/31/160011:00 PM", "08/31/160010:00 PM", "08/31/160001:00 PM01:00 PM", "08/31/160001:00 BM", "08/31/160001:00 AM", "08/31/160001:00:00:00 PM", "08/31/160001:00:00 PM", "08/31/160001 PM", "08/31/160001:60 PM", "08/31/160000:00 PM", "08/31/160008/31/160001:00 PM", "08/31/1600001:00 PM", "08/31/16001:00 PM", "08/31/16160001:00 PM", "08/31/0001:00 PM", "08/31/100001:00 PM", "07/31/160001:00 PM", "05/31/160001:00 PM", "03/31/160001:00 PM", "01/31/160001:00 PM", "00/31/160001:00 PM", "008/31/160001:00 PM", "8/31/160001:00 PM", "", "10/01/160001:00 PM", "01.01/160001:00 PM", "01-01/160001:00 PM", "01/20/160001:00 PM", "01/10/160001:00 PM", "01/01/200001:00 PM", "01/01/160001:00 PM", "02.29/160801:00 PM", "02-29/160801:00 PM", "02/29/960001:00 PM", "02/29/880001:00 PM", "02/29/160001:00 PM", "02/29/200801:00 PM", "02/29/169601:00 PM", "02/29/168801:00 PM", "02/29/160801:00 PM", "10/29/160001:00 PM", "0,.29/160001:00 PM", "0,-29/160001:00 PM", "0,/30/160001:00 PM", "0,/29/160001:00 PM", "12/31/160001:00 PM", "08.31/160001:00 PM", "08-31/160001:00 PM", "08/31/200001:00 PM", "08/31/160020:00", "08/31/160010:00", "08/31/160012:00 PM", "08/31/160001:00 PM"]}, {"regex": "^((0?[1-9]|1[012])(:[0-5]\\d){0,2}(\\ [AP]M))$|^([01]\\d|2[0-3])(:[0-5]\\d){0,2}$", "exceptionStackTrace": null, "matches": ["10:00:00", "00:00", "11:00 PM", "10:00 PM", "01:00 AM", "01:00:00 PM", "01 PM", "1:00 PM", "20", "10", "12 PM", "1 PM", "20:00", "10:00", "12:00 PM", "01:00 PM"], "nonMatches": ["24:00", "10:00:00:00", "10:60", "13:00 PM", "01:00 BM", "01:00:00:00 PM", "01:60 PM", "00:00 PM", "001:00 PM"]}, {"regex": "^(?:(((Jan(uary)?|Ma(r(ch)?|y)|Jul(y)?|Aug(ust)?|Oct(ober)?|Dec(ember)?)\\ 31)|((Jan(uary)?|Ma(r(ch)?|y)|Apr(il)?|Ju((ly?)|(ne?))|Aug(ust)?|Oct(ober)?|(Sept|Nov|Dec)(ember)?)\\ (0?[1-9]|([12]\\d)|30))|(Feb(ruary)?\\ (0?[1-9]|1\\d|2[0-8]|(29(?=,\\ ((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))))\\,\\ ((1[6-9]|[2-9]\\d)\\d{2}))", "exceptionStackTrace": null, "matches": ["February 1, 1600", "Feb 01, 1600", "Sept 01, 1600", "Oct 01, 1600", "Aug 01, 1600", "Jun 01, 1600", "Jul 01, 1600", "Apr 01, 1600", "Mar 01, 1600", "January 10, 1600", "January 1, 1600", "Jan 01, 1600", "January 31, 16000", "Feb 29, 1600", "Feb 20, 1600", "Feb 10, 1600", "Feb 1, 1600", "Dec 1, 1600", "Nov 1, 1600", "Sept 1, 1600", "Oct 1, 1600", "Aug 1, 1600", "Jun 1, 1600", "Jul 1, 1600", "Apr 1, 1600", "May 1, 1600", "Mar 1, 1600", "Jan 30, 1600", "Jan 20, 1600", "Jan 1, 1600", "Dec 31, 1600", "Oct 31, 1600", "Aug 31, 1600", "Jul 31, 1600", "Mar 31, 1600", "Jan 31, 2000", "Jan 31, 1600", "February 29, 1600", "February 20, 1600", "February 10, 1600", "February 01, 1600", "December 01, 1600", "November 01, 1600", "September 01, 1600", "October 01, 1600", "August 01, 1600", "June 01, 1600", "July 01, 1600", "April 01, 1600", "May 01, 1600", "March 01, 1600", "January 30, 1600", "January 20, 1600", "January 01, 1600", "December 31, 1600", "October 31, 1600", "August 31, 1600", "July 31, 1600", "May 31, 1600", "March 31, 1600", "January 31, 2000", "January 31, 1600"], "nonMatches": ["February 00, 1600", "February 001, 1600", "Februaryruary 01, 1600", "Septemberember 01, 1600", "Octoberober 01, 1600", "Augustust 01, 1600", "Junee 01, 1600", "Julyy 01, 1600", "Aprilil 01, 1600", "Marchch 01, 1600", "January 00, 1600", "January 001, 1600", "Januaryuary 01, 1600", "Decemberember 31, 1600", "Octoberober 31, 1600", "Augustust 31, 1600", "Julyy 31, 1600", "Marchch 31, 1600", "January 31, 0000", "January 31, 160", "January 31, 1000", "Januaryuary 31, 1600"]}, {"regex": "^((31(?!\\ (Feb(ruary)?|Apr(il)?|June?|(Sep(?=\\b|t)t?|Nov)(ember)?)))|((30|29)(?!\\ Feb(ruary)?))|(29(?=\\ Feb(ruary)?\\ (((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\\d|2[0-8])\\ (Jan(uary)?|Feb(ruary)?|Ma(r(ch)?|y)|Apr(il)?|Ju((ly?)|(ne?))|Aug(ust)?|Oct(ober)?|(Sep(?=\\b|t)t?|Nov|Dec)(ember)?)\\ ((1[6-9]|[2-9]\\d)\\d{2})$", "exceptionStackTrace": null, "matches": ["1 January 1600", "20 Jan 1600", "10 Jan 1600", "1 Jan 1600", "29 Jan 1600", "30 Jan 1600", "31 Dec 1600", "31 Oct 1600", "31 Aug 1600", "31 Jul 1600", "31 Mar 1600", "31 Jan 2000", "31 Jan 1600", "20 January 1600", "10 January 1600", "01 January 1600", "29 January 1600", "30 January 1600", "31 December 1600", "31 October 1600", "31 August 1600", "31 July 1600", "31 May 1600", "31 March 1600", "31 January 2000", "31 January 1600"], "nonMatches": ["00 January 1600", "001 January 1600", "31 Septemberember 1600", "31 Sept 1600", "31 Septtember 1600", "31 Sepember 1600", "31 Octoberober 1600", "31 Augustust 1600", "31 Junee 1600", "31 Julyy 1600", "31 Aprilil 1600", "31 Marchch 1600", "31 Februaryruary 1600", "31 January 0000", "31 January 16000", "31 January 160", "31 January 1000", "31 Januaryuary 1600", "31 Nov 1600", "31 Sep 1600", "31 Jun 1600", "31 Apr 1600", "31 Feb 1600", "31 November 1600", "31 September 1600", "31 June 1600", "31 April 1600", "31 February 1600"]}, {"regex": "^(?:J(anuary|u(ne|ly))|February|Ma(rch|y)|A(pril|ugust)|(((Sept|Nov|Dec)em)|Octo)ber)$", "exceptionStackTrace": null, "matches": ["October", "December", "November", "September", "August", "April", "May", "March", "February", "July", "June", "January"], "nonMatches": []}, {"regex": "^(Sun|Mon|(T(ues|hurs))|Fri)(day|\\.)?$|Wed(\\.|nesday)?$|Sat(\\.|urday)?$|T((ue?)|(hu?r?))\\.?$", "exceptionStackTrace": null, "matches": ["Thu.", "Thr.", "Tue", "Tu.", "Th", "Tu", "Sat", "Wed", "Fri", "Thurs", "Tues", "Mon", "Sun", "Thur.", "Tue.", "Saturday", "Sat.", "Wednesday", "Wed.", "Friday", "Thursday", "Tuesday", "Monday", "Sun.", "Sunday"], "nonMatches": ["Thurr.", "Thuur.", "Tue..", "Tuee.", "Sat..", "Wed..", "Sundayday"]}, {"regex": "ISBN\\x20(?=.{13}$)\\d{1,5}([- ])\\d{1,7}\\1\\d{1,6}\\1(\\d|X)$", "exceptionStackTrace": null, "matches": ["ISBN 0 0000000 0 0"], "nonMatches": ["ISBN 0 0 0000000 0", "ISBN 0 0 000000 0", "ISBN 0 0  0", "ISBN 0 00000000 0 0", "ISBN 0  0 0", "ISBN 0-0 0 0", "ISBN 000000 0 0 0", "ISBN 00000 0 0 0", "ISBN  0 0 0", "ISBN 0 0 0 X", "ISBN 0 0 0 0"]}, {"regex": "^(?-i:A[LKSZRAEP]|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[ARW]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (internal): Unexpected extension ?-"}, "matches": [], "nonMatches": []}, {"regex": "^(?n:(?<address1>(\\d{1,5}(\\ 1\\/[234])?(\\x20[A-Z]([a-z])+)+ )|(P\\.O\\.\\ Box\\ \\d{1,5}))\\s{1,2}(?i:(?<address2>(((APT|B LDG|DEPT|FL|HNGR|LOT|PIER|RM|S(LIP|PC|T(E|OP))|TRLR|UNIT)\\x20\\w{1,5})|(BSMT|FRNT|LBBY|LOWR|OFC|PH|REAR|SIDE|UPPR)\\.?)\\s{1,2})?)(?<city>[A-Z]([a-z])+(\\.?)(\\x20[A-Z]([a-z])+){0,2})\\, \\x20(?<state>A[LKSZRAP]|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADL N]|K[SY]|LA|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[ARW]|RI|S[CD] |T[NX]|UT|V[AIT]|W[AIVY])\\x20(?<zipcode>(?!0{5})\\d{5}(-\\d {4})?))$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?n"}, "matches": []}, {"regex": "<(\\w+)(\\s(\\w*=&quot;.*?&quot;)?)*((/>)|((/*?)>.*?</\\1>))", "exceptionStackTrace": null, "matches": ["<evil evil=&quot;evil&quot;/>></evil>", "<evil evil=&quot;evil&quot;/>=</evil>", "<evil evil=&quot;evil&quot;/><</evil>", "<evil evil=&quot;evil&quot;/>;</evil>", "<evil evil=&quot;evil&quot;/>/</evil>", "<evil evil=&quot;evil&quot;/>&</evil>", "<evil evil=&quot;evil&quot;/>eVil</evil>", "<evil evil=&quot;evil&quot;/>EVIL</evil>", "<evil evil=&quot;evil&quot;/>ev_il</evil>", "<evil evil=&quot;evil&quot;/>ev il</evil>", "<evil evil=&quot;evil&quot;/>ev4il</evil>", "<evil evil=&quot;evil&quot;/>e</evil>", "<evil evil=&quot;evil&quot;/> </evil>", "<evil evil=&quot;evil&quot;/>6</evil>", "<evil evil=&quot;evil&quot;/>_</evil>", "<evil evil=&quot;evil&quot;/></evil>", "<evil evil=&quot;evil&quot;//>evil</evil>", "<evil evil=&quot;evil&quot;>evil</evil>", "<evil evil=&quot;evil&quot; evil=&quot;evil&quot;/>", "<evil evil=&quot;evil&quot;evil=&quot;evil&quot;/>", "<evil />", "<evil evil=&quot;>&quot;/>", "<evil evil=&quot;=&quot;/>", "<evil evil=&quot;<&quot;/>", "<evil evil=&quot;;&quot;/>", "<evil evil=&quot;/&quot;/>", "<evil evil=&quot;&&quot;/>", "<evil evil=&quot;eVil&quot;/>", "<evil evil=&quot;EVIL&quot;/>", "<evil evil=&quot;ev_il&quot;/>", "<evil evil=&quot;ev il&quot;/>", "<evil evil=&quot;ev4il&quot;/>", "<evil evil=&quot;e&quot;/>", "<evil evil=&quot; &quot;/>", "<evil evil=&quot;6&quot;/>", "<evil evil=&quot;_&quot;/>", "<evil evil=&quot;&quot;/>", "<evil eVil=&quot;evil&quot;/>", "<evil EVIL=&quot;evil&quot;/>", "<evil ev_il=&quot;evil&quot;/>", "<evil ev4il=&quot;evil&quot;/>", "<evil e=&quot;evil&quot;/>", "<evil  =&quot;evil&quot;/>", "<evil 6=&quot;evil&quot;/>", "<evil _=&quot;evil&quot;/>", "<evil =&quot;evil&quot;/>", "<eVil evil=&quot;evil&quot;/>", "<EVIL evil=&quot;evil&quot;/>", "<ev_il evil=&quot;evil&quot;/>", "<ev4il evil=&quot;evil&quot;/>", "<e evil=&quot;evil&quot;/>", "<6 evil=&quot;evil&quot;/>", "<_ evil=&quot;evil&quot;/>", "<evil></evil>", "<evil/>", "<evil evil=&quot;evil&quot;/>evil</evil>", "<evil evil=&quot;evil&quot;/>"], "nonMatches": ["<evil ev il=&quot;evil&quot;/>", "<ev il evil=&quot;evil&quot;/>", "<  evil=&quot;evil&quot;/>", "< evil=&quot;evil&quot;/>"]}, {"regex": "(?n:^(?=\\d)((?<month>(0?[13578])|1[02]|(0?[469]|11)(?!.31)|0?2(?(.29)(?=.29.((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|(16|[2468][048]|[3579][26])00))|(?!.3[01])))(?<sep>[-./])(?<day>0?[1-9]|[12]\\d|3[01])\\k<sep>(?<year>(1[6-9]|[2-9]\\d)\\d{2})(?(?=\\x20\\d)\\x20|$))?(?<time>((0?[1-9]|1[012])(:[0-5]\\d){0,2}(?i:\\x20[AP]M))|([01]\\d|2[0-3])(:[0-5]\\d){1,2})?$)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?n"}, "matches": []}, {"regex": "(?n:^(?=\\d)((?<day>31(?!(.0?[2469]|11))|30(?!.0?2)|29(?(.0?2)(?=.{3,4}(1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|(16|[2468][048]|[3579][26])00))|0?[1-9]|1\\d|2[0-8])(?<sep>[/.-])(?<month>0?[1-9]|1[012])\\2(?<year>(1[6-9]|[2-9]\\d)\\d{2})(?:(?=\\x20\\d)\\x20|$))?(?<time>((0?[1-9]|1[012])(:[0-5]\\d){0,2}(?i:\\ [AP]M))|([01]\\d|2[0-3])(:[0-5]\\d){1,2})?$)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?n"}, "matches": []}, {"regex": "^(?n:(?<lastname>(St\\.\\ )?(?-i:[A-Z]\\&#39;?\\w+?\\-?)+)(?<suffix>\\ (?i:([JS]R)|((X(X{1,2})?)?((I((I{1,2})|V|X)?)|(V(I{0,3})))?)))?,((?<prefix>Dr|Prof|M(r?|(is)?)s)\\ )?(?<firstname>(?-i:[A-Z]\\&#39;?(\\w+?|\\.)\\ ??){1,2})?(\\ (?<mname>(?-i:[A-Z])(\\&#39;?\\w+?|\\.))){0,2})$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?n"}, "matches": []}, {"regex": "^(?!\\u00a2)  #Don&#39;t allow cent symbol\n \\p{Sc}?     #optional unicode currency symbols\n (?!0,?\\d)   #don&#39;t allow leading zero if 1 or more unit\n (\\d{1,3}    # 1 to 3 digits\n (\\,\\d{3})*  # if the is a comma it must be followed by 3 digits\n|(\\d+))      # more than 3 digit with no comma separator\n(\\.\\d{2})?$  # option cents", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad escape \\p"}, "matches": []}, {"regex": "^(\\x22|\\x27)((?!\\1).|\\1{2})*\\1$", "exceptionStackTrace": null, "matches": ["\"aa\"", "\"A\"", "\"0\"", "\"'\"", "\" \"", "\"\"", "\"\"\"\"", "\"a\""], "nonMatches": ["\"\"\"\"\"", "\"\"\"", "'\"", "'a\""]}, {"regex": "^(?=\\d)(?:(?:31(?!.(?:0?[2469]|11))|(?:30|29)(?!.0?2)|29(?=.0?2.(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(?:\\x20|$))|(?:2[0-8]|1\\d|0?[1-9]))([-./])(?:1[012]|0?[1-9])\\1(?:1[6-9]|[2-9]\\d)?\\d\\d(?:(?=\\x20\\d)\\x20|$))?(((0?[1-9]|1[012])(:[0-5]\\d){0,2}(\\x20[AP]M))|([01]\\d|2[0-3])(:[0-5]\\d){1,2})?$", "exceptionStackTrace": null, "matches": ["1/12/1600 01:00 PM", "31/1/1600 01:00 PM", "31/12/1600 10:00:00", "31/12/1600 00:00", "31/12/1600 11:00 PM", "31/12/1600 10:00 PM", "31/12/1600 01:00 AM", "31/12/1600 01:00:00 PM", "31/12/1600 01 PM", "31/12/1600 1:00 PM", "01:00 PM", "31/12/00 01:00 PM", "31/10/1600 01:00 PM", "01/12/1600 01:00 PM", "10/12/1600 01:00 PM", "20/12/1600 01:00 PM", "29/12/1600 01:00 PM", "30/12/1600 01:00 PM", "31/01/1600 01:00 PM", "31/12/2000 01:00 PM", "31/12/1600 20:00", "31/12/1600 10:00", "31/12/1600 12:00 PM", "31/12/1600 01:00 PM"], "nonMatches": ["00/12/1600 01:00 PM", "001/12/1600 01:00 PM", "31/00/1600 01:00 PM", "31/001/1600 01:00 PM", "31/12/0000 01:00 PM", "31/12/1600 24:00", "31/12/1600 10:00:00:00", "31/12/1600 10", "31/12/1600 10:60", "31/12/1600 13:00 PM", "31/12/1600 01:00 PM01:00 PM", "31/12/1600 ", "31/12/1600 01:00 BM", "31/12/1600 01:00:00:00 PM", "31/12/1600 01:60 PM", "31/12/1600 00:00 PM", "31/12/1600 001:00 PM", "31/12/1600 31/12/1600 01:00 PM", "31/12/161600 01:00 PM", "31/12/1000 01:00 PM", "31/13/1600 01:00 PM", "31/11/1600 01:00 PM", "31.12/1600 01:00 PM", "31-12/1600 01:00 PM", "", "31/12/160001:00 PM"]}, {"regex": ",(?!(?<=(?:^|,)\\s*\\x22(?:[^\\x22]|\\x22\\x22|\\\\\\x22)*,)(?:[^\\x22]|\\x22\\x22|\\\\\\x22)*\\x22\\s*(?:,|$))", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "look-behind requires fixed-width pattern"}, "matches": []}, {"regex": "&\n (?ni:\\#      # if a pound sign follow ampsand look for number\n   ((x        # if x follow pound sign accept hex value up to 5 digits\n      ([\\dA-F]){1,5}\n     )\n     |       # otherwise accept decimal number between 0 - 1048575\n       (104857[0-5]\n       |10485[0-6]\\d\n       |1048[0-4]\\d\\d\n       |104[0-7]\\d{3}\n       |10[0-3]\\d{4}\n       |0?\\d{1,6})\n   )\n  |       # no pound sign after ampersand\n   ([A-Za-z\\d.]{2,31}) #accept ASCII alphanumeric and period\n);           #end with semi-colon.", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?n"}, "matches": []}, {"regex": "\\p{IsBasicLatin}", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad escape \\p"}, "matches": []}, {"regex": "\\p{N}", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad escape \\p"}, "matches": []}, {"regex": "\\p{Sm}", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad escape \\p"}, "matches": []}, {"regex": "^(?=[^\\d_].*?\\d)\\w(\\w|[!@#$%]){7,20}", "exceptionStackTrace": null, "matches": ["a0aaaaaa"], "nonMatches": ["a@%%%%%%", "a$%%%%%%", "a#%%%%%%", "a!%%%%%%", "aaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaa", "aaaaaaa", "a_aaaaaa", "aAaaaaaa", "_aaaaaaa", "Aaaaaaaa", "0aaaaaaa", "aa%%%%%%", "a%%%%%%%", "aaaaaaaa"]}, {"regex": "^(?ni:(?=\\d)((?&#39;year&#39;((1[6-9])|([2-9]\\d))\\d\\d)(?&#39;sep&#39;[/.-])(?&#39;month&#39;0?[1-9]|1[012])\\2(?&#39;day&#39;((?<!(\\2((0?[2469])|11)\\2))31)|(?<!\\2(0?2)\\2)(29|30)|((?<=((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|(16|[2468][048]|[3579][26])00)\\2\\3\\2)29)|((0?[1-9])|(1\\d)|(2[0-8])))(?:(?=\\x20\\d)\\x20|$))?((?<time>((0?[1-9]|1[012])(:[0-5]\\d){0,2}(\\x20[AP]M))|([01]\\d|2[0-3])(:[0-5]\\d){1,2}))?)$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?n"}, "matches": []}, {"regex": "(?i:([A-D])(?!\\1)([A-D])(?!\\1|\\2)([A-D])(?!\\1|\\2|\\3)([A-D]))", "exceptionStackTrace": null, "matches": [], "nonMatches": [""]}, {"regex": "^(?!000)([0-6]\\d{2}|7([0-6]\\d|7[012]))([ -]?)(?!00)\\d\\d\\3(?!0000)\\d{4}$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["773-00-0000", "771-00-0000", "770-00-0000", "000-00-00000", "000-00-000", "000--00-0000", "000 00-0000", "0000-00-0000", "00-00-0000", "77200-0000", "70000-0000", "00000-0000", "772-00-0000", "700-00-0000", "000-00-0000"]}, {"regex": "(<\\/?)(?i:(?<element>a(bbr|cronym|ddress|pplet|rea)?|b(ase(font)?|do|ig|lockquote|ody|r|utton)?|c(aption|enter|ite|(o(de|l(group)?)))|d(d|el|fn|i(r|v)|l|t)|em|f(ieldset|o(nt|rm)|rame(set)?)|h([1-6]|ead|r|tml)|i(frame|mg|n(put|s)|sindex)?|kbd|l(abel|egend|i(nk)?)|m(ap|e(nu|ta))|no(frames|script)|o(bject|l|pt(group|ion))|p(aram|re)?|q|s(amp|cript|elect|mall|pan|t(r(ike|ong)|yle)|u(b|p))|t(able|body|d|extarea|foot|h|itle|r|t)|u(l)?|var))(\\s(?<attr>.+?))*>", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<e"}, "matches": []}, {"regex": "(?i:on(blur|c(hange|lick)|dblclick|focus|keypress|(key|mouse)(down|up)|(un)?load|mouse(move|o(ut|ver))|reset|s(elect|ubmit)))", "exceptionStackTrace": null, "matches": [], "nonMatches": [""]}, {"regex": "(?n:^(?=\\d)((?<month>(0?[13578])|1[02]|(0?[469]|11)(?!.31)|0?2(?(.29)(?=.29.((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|(16|[2468][048]|[3579][26])00))|(?!.3[01])))(?<sep>[-./])(?<day>0?[1-9]|[12]\\d|3[01])\\k<sep>(?<year>(1[6-9]|[2-9]\\d)\\d{2})\\x20)(?<time>(?<hours>[01]\\d|2[0-3]):(?<minutes>[0-5]\\d):(?<seconds>[0-5]\\d)\\.(?<milliseconds>\\d{3}))$)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?n"}, "matches": []}, {"regex": "^((?:[a-zA-Z]:)|(?:\\\\{2}\\w[-\\w]*)\\$?)\\\\(?!\\.)((?:(?![\\\\/:*?<>&quot;|])(?![.\\x20](?:\\\\|$))[\\x20-\\x7E])+\\\\(?!\\.))*((?:(?:(?![\\\\/:*?<>&quot;|])(?![ .]$)[\\x20-\\x7E])+)\\.((?:(?![\\\\/:*?<>&quot;|])(?![ .]$)[\\x20-\\x7E]){2,15}))?$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (bad range): Invalid range:  -~"}, "matches": [], "nonMatches": []}, {"regex": "^(?=\\d)(?:(?!(?:1582(?:\\.|-|\\/)10(?:\\.|-|\\/)(?:0?[5-9]|1[0-4]))|(?:1752(?:\\.|-|\\/)0?9(?:\\.|-|\\/)(?:0?[3-9]|1[0-3])))(?=(?:(?!000[04]|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00))(?:(?:\\d\\d)(?:[02468][048]|[13579][26]))\\D0?2\\D29)|(?:\\d{4}\\D(?!(?:0?[2469]|11)\\D31)(?!0?2(?:\\.|-|\\/)(?:29|30))))(\\d{4})([-\\/.])(0?\\d|1[012])\\2((?!00)[012]?\\d|3[01])(?:$|(?=\\x20\\d)\\x20))?((?:(?:0?[1-9]|1[012])(?::[0-5]\\d){0,2}(?:\\x20[aApP][mM]))|(?:[01]\\d|2[0-3])(?::[0-5]\\d){1,2})?$", "exceptionStackTrace": null, "matches": ["0000.00.20", "01:00 PM", "0000.00.20 01:00 PM"], "nonMatches": ["0000.13.2001:00 PM", "0000.11.2001:00 PM", "0000.10.2001:00 PM", "0000.00.3201:00 PM", "0000.00.2024:00", "0000.00.2010:00:00:00", "0000.00.2010:00:00", "0000.00.2010", "0000.00.2010:60", "0000.00.2000:00", "0000.00.2013:00 PM", "0000.00.2011:00 PM", "0000.00.2010:00 PM", "0000.00.2001:00 PM01:00 PM", "0000.00.2001:00 Pm", "0000.00.2001:00 Pa", "0000.00.2001:00 PA", "0000.00.2001:00 pM", "0000.00.2001:00 bM", "0000.00.2001:00 aM", "0000.00.2001:00 BM", "0000.00.2001:00 AM", "0000.00.2001:00:00:00 PM", "0000.00.2001:00:00 PM", "0000.00.2001 PM", "0000.00.2001:60 PM", "0000.00.2000:00 PM", "0000.00.20001:00 PM", "0000.00.201:00 PM", "0000.00.200000.00.2001:00 PM", "0000.00.22001:00 PM", "0000.00.001:00 PM", "0000.00.3001:00 PM", "0000.00.1001:00 PM", "0000.00.0001:00 PM", "0000.000.2001:00 PM", "0000.0.2001:00 PM", "0000/00.2001:00 PM", "0000-00.2001:00 PM", "00000.00.2001:00 PM", "000.00.2001:00 PM", "", "0000.12.2001:00 PM", "0000.00.3101:00 PM", "0000.00.2020:00", "0000.00.2010:00", "0000.00.2012:00 PM", "0000.00.2001:00 PM"]}, {"regex": "^(?!\\u00a2)  #Don&#39;t allow cent symbol\n \\p{Sc}?     #optional unicode currency symbols\n (?!0,?\\d)   #don&#39;t allow leading zero if 1 or more unit\n (?:\\d{1,3}    # 1 to 3 digits\n (?:([, .])\\d{3})?  # if there is a separator it must be followed by 3 digits\n (?:\\1\\d{3})*  # if the is more than two groups the same separtor must but used, it must be followed by 3 digits\n|(?:\\d+))      # more than 3 digit with no comma separator\n((?!\\1)[,.]\\d{2})?$  # option cents", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad escape \\p"}, "matches": []}, {"regex": "^\\d?\\d&#39;(\\d|1[01])&quot;$", "exceptionStackTrace": null, "matches": ["00&#39;10&quot;", "0&#39;11&quot;", "0&#39;0&quot;", "00&#39;11&quot;", "00&#39;0&quot;"], "nonMatches": ["00&#39;12&quot;", "000&#39;0&quot;"]}, {"regex": "^(?n:(?!-[\\d\\,]*K)      (?!-((\\d{1,3},)*((([3-9]\\d\\d|2[89]\\d|27[4-9])\\xB0C)|(((4[6-9]|[5-9]\\d)\\d)\\xB0F))))  -?\\d{1,3}(,\\d{3})*(\\xB0[CF]|K)\n )$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?n"}, "matches": []}, {"regex": "([2-9JQKA]|10)([\\u2660\\u2663\\u2665\\u2666])", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 9824"}, "matches": [], "nonMatches": []}, {"regex": "(?-i:\\b\\p{Ll}+\\b)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad escape \\p"}, "matches": []}, {"regex": "(?-i:\\b\\p{Lu}+\\b)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad escape \\p"}, "matches": []}, {"regex": "\\b-?[1-9](?:\\.\\d+)?[Ee][-+]?\\d+\\b", "exceptionStackTrace": null, "matches": ["-1.0e+00", "-1.0e0", "-1.0e-0", "-1.0E+0", "-1e+0", "-1.00e+0", "--1.0e+0", "1.0e+0", "1e0", "-1.0e+0"], "nonMatches": ["-1.0e+", "-1.0e++0", "-1.0a+0", "-1.0A+0", "-1.0.0e+0", "-1.e+0", "-0.0e+0"]}, {"regex": "(?![\\uD800-\\uDBFF])(?![\\uDC00-\\uDFFF])[\\u0080-\\uFFFF]", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 55296"}, "matches": [], "nonMatches": []}, {"regex": "[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 55296"}, "matches": [], "nonMatches": []}, {"regex": "(\\S+)\\x20{2,}(?=\\S+)", "exceptionStackTrace": null, "matches": [], "nonMatches": ["evil ", "eVil  ", "EVIL  ", "ev_il  ", "ev il  ", "ev4il  ", "e  ", "   ", "6  ", "_  ", "  ", "evil  "]}, {"regex": "^(?:[ -~]{10,25}(?:$|(?:[\\w!?.])\\s))", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (bad range): Invalid range:  -~"}, "matches": [], "nonMatches": []}, {"regex": "^((31(?!(\\-)((F|f)(E|e)(B|b)|(A|a)(P|p)(R|r)|(J|j)(U|u)(N|n)|(S|s)(E|e)(P|p)|(N|n)(O|o)(V|v))))|((30|29)(?!(\\-)((F|f)(E|e)(B|b))))|(29(?=(\\-)(F|f)(E|e)(B|b)(\\-)(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\\d|2[0-8])(\\-)((J|j)(A|a)(N|n)|(F|f)(E|e)(B|b)|(M|m)(A|a)(R|r)|((M|m)(A|a)(Y|y))|(A|a)(P|p)(R|r)|(J|j)(U|u)(L|l)|(J|j)(U|u)(N|n)|(A|a)(U|u)(G|g)|(O|o)(C|c)(T|t)|(S|s)(E|e)(P|p)|(N|n)(O|o)(V|v)|(D|d)(E|e)(C|c))(\\-)((1[6-9]|[2-9]\\d)\\d{2})$", "exceptionStackTrace": null, "matches": ["1-JAN-1600", "20-JAN-1600", "10-JAN-1600", "01-JAN-1600", "29-JAN-1600", "30-JAN-1600", "31-dEC-1600", "31-DeC-1600", "31-DEc-1600", "31-DEC-1600", "31-oCT-1600", "31-OcT-1600", "31-OCt-1600", "31-OCT-1600", "31-aUG-1600", "31-AuG-1600", "31-AUg-1600", "31-AUG-1600", "31-jUL-1600", "31-JuL-1600", "31-JUl-1600", "31-JUL-1600", "31-mAY-1600", "31-MaY-1600", "31-MAy-1600", "31-MAY-1600", "31-mAR-1600", "31-MaR-1600", "31-MAr-1600", "31-MAR-1600", "31-jAN-1600", "31-JaN-1600", "31-JAn-1600", "31-JAN-2000", "31-JAN-1600"], "nonMatches": ["00-JAN-1600", "001-JAN-1600", "31-JAN-0000", "31-JAN-16000", "31-JAN-160", "31-JAN-1000", "31-nOV-1600", "31-NoV-1600", "31-NOv-1600", "31-NOV-1600", "31-sEP-1600", "31-SeP-1600", "31-SEp-1600", "31-SEP-1600", "31-jUN-1600", "31-JuN-1600", "31-JUn-1600", "31-JUN-1600", "31-aPR-1600", "31-ApR-1600", "31-APr-1600", "31-APR-1600", "31-fEB-1600", "31-FeB-1600", "31-FEb-1600", "31-FEB-1600"]}, {"regex": "^([A-Z]{2}-[A-Z]{2}-[0-9]{2}$|^([A-Z]{2}-[0-9]{2}-[A-Z]{2}$|^([0-9]{2}-[A-Z]{2}-[A-Z]{2}$|^([A-Z]{2}-[0-9]{2}-[0-9]{2}$/", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "missing ), unterminated subpattern"}, "matches": []}, {"regex": "(a(?:[cdefgilmnoqrstuwxz]|ero|(?:rp|si)a)|b(?:[abdefghijmnorstvwyz]iz)|c(?:[acdfghiklmnoruvxyz]|at|o(?:m|op))|d[ejkmoz]|e(?:[ceghrstu]|du)|f[ijkmor]|g(?:[abdefghilmnpqrstuwy]|ov)|h[kmnrtu]|i(?:[delmnoqrst]|n(?:fo|t))|j(?:[emop]|obs)|k[eghimnprwyz]|l[abcikrstuvy]|m(?:[acdeghklmnopqrstuvwxyz]|il|obi|useum)|n(?:[acefgilopruz]|ame|et)|o(?:m|rg)|p(?:[aefghklmnrstwy]|ro)|qa|r[eosuw]|s[abcdeghijklmnortuvyz]|t(?:[cdfghjklmnoprtvwz]|(?:rav)?el)|u[agkmsyz]|v[aceginu]|w[fs]|y[etu]|z[amw])", "exceptionStackTrace": null, "matches": ["zm", "za", "yt", "ye", "wf", "vn", "vi", "vg", "ve", "vc", "va", "uy", "us", "um", "uk", "ug", "ua", "travravel", "tw", "tv", "tt", "tr", "tp", "to", "tn", "tm", "tl", "tk", "tj", "th", "tg", "tf", "td", "tc", "sy", "sv", "su", "st", "sr", "so", "sn", "sm", "sl", "sk", "sj", "si", "sh", "sg", "se", "sd", "sc", "sb", "sa", "ru", "rs", "ro", "re", "pw", "pt", "ps", "pr", "pn", "pm", "pl", "pk", "ph", "pg", "pf", "pe", "pa", "nu", "nr", "np", "no", "nl", "ni", "ng", "nf", "ne", "nc", "na", "my", "mx", "mw", "mv", "mu", "mt", "ms", "mr", "mq", "mp", "mo", "mn", "mm", "ml", "mk", "mh", "mg", "me", "md", "mc", "ma", "lv", "lu", "lt", "ls", "lr", "lk", "li", "lc", "lb", "la", "ky", "kw", "kr", "kp", "kn", "km", "ki", "kh", "kg", "ke", "jo", "jm", "je", "is", "ir", "iq", "io", "in", "im", "il", "ie", "id", "ht", "hr", "hn", "hm", "hk", "gw", "gu", "gt", "gs", "gr", "gq", "gp", "gn", "gm", "gl", "gi", "gh", "gg", "gf", "ge", "gd", "gb", "ga", "fo", "fm", "fk", "fj", "fi", "et", "es", "er", "eh", "eg", "ee", "ec", "do", "dm", "dk", "dj", "de", "cy", "cx", "cv", "cu", "cr", "co", "cn", "cm", "cl", "ck", "ci", "ch", "cg", "cf", "cd", "cc", "ca", "byiz", "bwiz", "bviz", "btiz", "bsiz", "briz", "boiz", "bniz", "bmiz", "bjiz", "biiz", "bhiz", "bgiz", "bfiz", "beiz", "bdiz", "bciz", "bbiz", "baiz", "ax", "aw", "au", "at", "as", "ar", "aq", "ao", "an", "am", "al", "ai", "ag", "af", "ae", "ad", "ac", "tel", "zw", "yu", "ws", "vu", "uz", "travel", "tz", "sz", "rw", "qa", "pro", "py", "org", "om", "net", "name", "nz", "museum", "mobi", "mil", "mz", "ly", "kz", "jobs", "jp", "int", "info", "it", "hu", "gov", "gy", "fr", "edu", "eu", "dz", "coop", "com", "cat", "cz", "bziz", "asia", "arpa", "aero", "az"], "nonMatches": ["zb", "ya", "wa", "vb", "ub", "ta", "sf", "ra", "pb", "nb", "mb", "ld", "ka", "ja", "ia", "ha", "gc", "fa", "ea", "da", "cb", "aa"]}, {"regex": "(?:-(?!0))?\\d+(?:(?: \\d+)?/\\d+)?", "exceptionStackTrace": null, "matches": ["-0 0/0 0/0", "-0", "-0 0/00", "-0 0/", "-0 0 0/0", "-0/0", "-0 00/0", "-0 /0", "-00 0/0", "- 0/0", "--0 0/0", "0 0/0", "0", "-0 0/0"], "nonMatches": []}, {"regex": "^([a-zA-Z0-9]{1,15})$", "exceptionStackTrace": null, "matches": ["000000000000000", "a", "A", "0"], "nonMatches": ["0000000000000000", ""]}, {"regex": "([A-HJ-PR-Y]{2}([0][1-9]|[1-9][0-9])|[A-HJ-PR-Y]{1}([1-9]|[1-2][0-9]|30|31|33|40|44|55|50|60|66|70|77|80|88|90|99|111|121|123|222|321|333|444|555|666|777|888|999|100|200|300|400|500|600|700|800|900))[ ][A-HJ-PR-Z]{3}$", "exceptionStackTrace": null, "matches": ["RR1 RRR", "J1 RRR", "A1 RRR", "RR01 JRR", "RR01 ARR", "RRR01 RRR", "JR01 RRR", "AR01 RRR", "R900 RRR", "R800 RRR", "R700 RRR", "R600 RRR", "R500 RRR", "R400 RRR", "R300 RRR", "R200 RRR", "R100 RRR", "R999 RRR", "R888 RRR", "R777 RRR", "R666 RRR", "R555 RRR", "R444 RRR", "R333 RRR", "R321 RRR", "R222 RRR", "R123 RRR", "R121 RRR", "R111 RRR", "R99 RRR", "R90 RRR", "R88 RRR", "R80 RRR", "R77 RRR", "R70 RRR", "R66 RRR", "R60 RRR", "R50 RRR", "R55 RRR", "R44 RRR", "R40 RRR", "R33 RRR", "R31 RRR", "R30 RRR", "R10 RRR", "R1 RRR", "RR10 RRR", "RR01 RRR"], "nonMatches": ["R00 RRR", "R0 RRR", "1 RRR", "I1 RRR", "RR01 RRRR", "RR01 RR", "RR01 IRR", "RR00 RRR", "R01 RRR", "IR01 RRR"]}, {"regex": "^([0-9]{4})-([0-1][0-9])-([0-3][0-9])\\s([0-1][0-9]|[2][0-3]):([0-5][0-9]):([0-5][0-9])$", "exceptionStackTrace": null, "matches": ["0000-00-00 20:00:00", "0000-00-00 00:00:00"], "nonMatches": ["0000-00-00 24:00:00", "0000-00-00 00:00:60", "0000-00-00 00:60:00", "0000-00-40 00:00:00", "0000-20-00 00:00:00", "00000-00-00 00:00:00", "000-00-00 00:00:00"]}, {"regex": "^[a-zA-Z0-9\\x20&#39;\\.]{8,64}[^\\s]$", "exceptionStackTrace": null, "matches": ["........A", "........;", "........0", ".........", "........&", "........#", "................................................................a", "a.......a", "A.......a", ";.......a", "9.......a", "3.......a", "0.......a", "&.......a", "#.......a", " .......a", "........a"], "nonMatches": ["........ ", ".................................................................a", ".......a"]}, {"regex": "^((?:\\+27|27)|0)(\\d{2})-?(\\d{3})-?(\\d{4})$", "exceptionStackTrace": null, "matches": ["+2700-0000000", "+2700000-0000", "0000000000", "27000000000", "+27000000000", "000-000-0000", "2700-000-0000", "+2700-000-0000"], "nonMatches": ["+2700-000-00000", "+2700-000-000", "+2700-000--0000", "+2700-0000-0000", "+2700-00-0000", "+2700--000-0000", "+27000-000-0000", "+270-000-0000"]}, {"regex": "frvgdrg", "exceptionStackTrace": null, "matches": ["frvgdrg"], "nonMatches": []}, {"regex": "^\\d{3}-\\d{2}-\\d{4}$", "exceptionStackTrace": null, "matches": ["000-00-0000"], "nonMatches": ["000-00-00000", "000-00-000", "000-000-0000", "000-0-0000", "0000-00-0000", "00-00-0000"]}, {"regex": "\\d{2} \\D+[a-z] \\d{4} at \\d{2}:\\d{2}", "exceptionStackTrace": null, "matches": ["00 evila 0000 at 00:000", "00 :a 0000 at 00:00", "00 eVila 0000 at 00:00", "00 EVILa 0000 at 00:00", "00 ev_ila 0000 at 00:00", "00 ev ila 0000 at 00:00", "00 ea 0000 at 00:00", "00  a 0000 at 00:00", "00 _a 0000 at 00:00", "000 evila 0000 at 00:00", "00 evila 0000 at 00:00"], "nonMatches": ["00 evila 0000 at 00:0", "00 evila 0000 at 000:00", "00 evila 0000 at 0:00", "00 evila 00000 at 00:00", "00 evila 000 at 00:00", "00 ev4ila 0000 at 00:00", "00 6a 0000 at 00:00", "00 a 0000 at 00:00", "0 evila 0000 at 00:00"]}, {"regex": "^[0]$|^-?[1-9]\\d*$", "exceptionStackTrace": null, "matches": ["-100", "-1", "10", "1", "-10", "0"], "nonMatches": ["-00", "--10"]}, {"regex": "gregtrhgr", "exceptionStackTrace": null, "matches": ["gregtrhgr"], "nonMatches": []}, {"regex": "[0-9.\\-/+() ]{4,}", "exceptionStackTrace": null, "matches": ["0   ", "/   ", ".   ", "-   ", "+   ", ")   ", "(   ", "    "], "nonMatches": ["   "]}, {"regex": "[D]?[-D]?[0-9]{5}", "exceptionStackTrace": null, "matches": ["DD000000", "DA00000", "D-00000", "DDD00000", "D00000", "00000", "DD00000"], "nonMatches": ["DD0000"]}, {"regex": "^(([A-Z]{1,2}[0-9]{1,2})|([A-Z]{1,2}[0-9][A-Z]))\\s?([0-9][A-Z]{2})$", "exceptionStackTrace": null, "matches": ["AA0A 0AA", "A00 0AA", "AA0 0AA", "A0A0AA", "A00AA", "A0A 0AA", "A0 0AA"], "nonMatches": ["AAA0A 0AA", "0A 0AA", "A0 0AAA", "A0 0A", "A0  0AA", "A000 0AA", "A 0AA", "AAA0 0AA", "0 0AA"]}, {"regex": "5", "exceptionStackTrace": null, "matches": ["5"], "nonMatches": []}, {"regex": "sdgbdgh", "exceptionStackTrace": null, "matches": ["sdgbdgh"], "nonMatches": []}, {"regex": "^(0|\\+33)[1-9]([-. ]?[0-9]{2}){4}$", "exceptionStackTrace": null, "matches": ["01.00 00 00 00", "01-00 00 00 00", "+33100 00 00 00", "0100 00 00 00", "+331 00 00 00 00", "01 00 00 00 00"], "nonMatches": ["01 00 00 00 00 00", "01 00 00 00", "01 000 00 00 00", "01 0 00 00 00", "01  00 00 00 00", "00 00 00 00 00"]}, {"regex": "^([a-zA-Z]{5})([a-zA-Z0-9-]{3,12})", "exceptionStackTrace": null, "matches": ["AAAAA-------------", "AAAAA------------", "AAAAAa--", "AAAAAA--", "AAAAA0--", "AAAAAA---", "aAAAA---", "AAAAA---"], "nonMatches": ["AAAAA--", "AAAA---"]}, {"regex": "^09(73|74|05|06|15|16|17|26|27|35|36|37|79|38|07|08|09|10|12|18|19|20|21|28|29|30|38|39|89|99|22|23|32|33)\\d{3}\\s?\\d{4} ", "exceptionStackTrace": null, "matches": ["09330000000 ", "09320000000 ", "09230000000 ", "09220000000 ", "09990000000 ", "09890000000 ", "09390000000 ", "09300000000 ", "09290000000 ", "09280000000 ", "09210000000 ", "09200000000 ", "09190000000 ", "09180000000 ", "09120000000 ", "09100000000 ", "09090000000 ", "09080000000 ", "09070000000 ", "09380000000 ", "09790000000 ", "09370000000 ", "09360000000 ", "09350000000 ", "09270000000 ", "09260000000 ", "09170000000 ", "09160000000 ", "09150000000 ", "09060000000 ", "09050000000 ", "09740000000 ", "09730000000 ", "0933000 0000 ", "0932000 0000 ", "0923000 0000 ", "0922000 0000 ", "0999000 0000 ", "0989000 0000 ", "0939000 0000 ", "0930000 0000 ", "0929000 0000 ", "0928000 0000 ", "0921000 0000 ", "0920000 0000 ", "0919000 0000 ", "0918000 0000 ", "0912000 0000 ", "0910000 0000 ", "0909000 0000 ", "0908000 0000 ", "0907000 0000 ", "0938000 0000 ", "0979000 0000 ", "0937000 0000 ", "0936000 0000 ", "0935000 0000 ", "0927000 0000 ", "0926000 0000 ", "0917000 0000 ", "0916000 0000 ", "0915000 0000 ", "0906000 0000 ", "0905000 0000 ", "0974000 0000 ", "0973000 0000 "], "nonMatches": ["0973000 00000 ", "0973000 000 ", "0973000  0000 ", "09730000 0000 ", "097300 0000 "]}, {"regex": "^(0[1-9]|[12][0-9]|3[01])[\\s\\.\\-/](J(anuary|uly|an|AN)|M(arch|ar|AR|ay|AY)|A(ugust|ug|UG)|(O(ctober|ct|CT)|(D(ecember|ec|EC))))[\\s\\.\\-/][1-9][0-9]{3}|(0[1-9]|[12][0-9]|30)[\\s\\.\\-/](A(pril|pr|PR)|J(une|un|UN)|S(eptember|ep|EP)|N(ovember|ov|OV))[\\s\\.\\-/][1-9][0-9]{3}|(0[1-9]|1[0-9]|2[0-8])[\\s\\.\\-/]F(ebruary|eb|EB)[\\s\\.\\-/][1-9][0-9]{3}|29[\\s\\.\\-/]F(ebruary|eb|EB)[\\s\\.\\-/]((0[48]|[2468][048]|[13579][26])00|[0-9]{2}(0[48]|[2468][048]|[13579][26]))$", "exceptionStackTrace": null, "matches": ["29/February/0092", "29/February/0076", "29/February/0056", "29/February/0036", "29/February/0016", "29/February/0084", "29/February/0080", "29/February/0068", "29/February/0048", "29/February/0028", "29/February/0004", "29/February/9200", "29/February/7600", "29/February/5600", "29/February/3600", "29/February/1600", "29/February/8400", "29/February/8000", "29/February/6800", "29/February/4800", "29/February/2800", "29/February/0400", "29/February.0800", "29/February-0800", "29/February 0800", "29.February/0800", "29-February/0800", "29 February/0800", "01/February/10000", "01/February.1000", "01/February-1000", "01/February 1000", "01.February/1000", "01-February/1000", "01 February/1000", "10/April/1000", "01/April/10000", "01/April.1000", "01/April-1000", "01/April 1000", "01.April/1000", "01-April/1000", "01 April/1000", "30/January/1000", "10/January/1000", "01/January/10000", "01/January.1000", "01/January-1000", "01/January 1000", "01.January/1000", "01-January/1000", "01 January/1000", "29/FEB/0800", "29/Feb/0800", "29/February/0096", "29/February/0088", "29/February/0008", "29/February/9600", "29/February/8800", "29/February/0800", "20/February/1000", "10/February/1000", "01/FEB/1000", "01/Feb/1000", "01/February/1000", "30/April/1000", "20/April/1000", "01/NOV/1000", "01/Nov/1000", "01/November/1000", "01/SEP/1000", "01/Sep/1000", "01/September/1000", "01/JUN/1000", "01/Jun/1000", "01/June/1000", "01/APR/1000", "01/Apr/1000", "01/April/1000", "31/January/1000", "20/January/1000", "01/DEC/1000", "01/Dec/1000", "01/December/1000", "01/OCT/1000", "01/Oct/1000", "01/October/1000", "01/AUG/1000", "01/Aug/1000", "01/August/1000", "01/MAY/1000", "01/May/1000", "01/MAR/1000", "01/Mar/1000", "01/March/1000", "01/JAN/1000", "01/Jan/1000", "01/July/1000", "01/January/1000"], "nonMatches": ["29/February/0090", "29/February/0006", "29/February/0081", "29/February/00008", "29/February/008", "29/February/9000", "29/February/0600", "29/February/8100", "29/February/0000", "29/February/1000", "01/February/100", "01/February/0000", "00/February/1000", "01/April/100", "01/April/0000", "00/April/1000", "32/January/1000", "01/January/100", "01/January/0000", "00/January/1000"]}, {"regex": "^([0-9]?[0-9]?[0-9]?\\\\.)?(\\\\d{3})$*(,\\\\d{2})", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "nothing to repeat"}, "matches": []}, {"regex": "^(((0?[1-9]|1[012])/(0?[1-9]|1\\d|2[0-8])|(0?[13456789]|1[012])/(29|30)|(0?[13578]|1[02])/31)/(19|[2-9]\\d)\\d{2}|0?2/29/((19|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|(([2468][048]|[3579][26])00)))$", "exceptionStackTrace": null, "matches": ["02/29/9200", "02/29/7600", "02/29/5600", "02/29/3600", "02/29/8400", "02/29/8000", "02/29/6800", "02/29/4800", "02/29/2800", "02/29/1992", "02/29/1976", "02/29/1956", "02/29/1936", "02/29/1916", "02/29/1984", "02/29/1980", "02/29/1968", "02/29/1948", "02/29/1928", "02/29/1904", "10/31/1900", "07/31/1900", "05/31/1900", "03/31/1900", "01/31/1900", "11/29/1900", "10/29/1900", "08/29/1900", "07/29/1900", "06/29/1900", "05/29/1900", "04/29/1900", "03/29/1900", "11/01/1900", "10/01/1900", "01/29/1900", "01/1/1900", "1/01/1900", "2/29/9600", "2/29/8800", "2/29/2008", "2/29/1996", "2/29/1988", "2/29/1908", "8/31/1900", "9/30/1900", "9/29/1900", "12/1/1900", "1/20/1900", "1/10/1900", "1/1/2000", "1/1/1900", "02/29/9600", "02/29/8800", "02/29/2008", "02/29/1996", "02/29/1988", "02/29/1908", "12/31/1900", "08/31/1900", "12/29/1900", "09/30/1900", "09/29/1900", "12/01/1900", "01/20/1900", "01/10/1900", "01/01/2000", "01/01/1900"], "nonMatches": ["02/29/9000", "02/29/0600", "02/29/8100", "02/29/0800", "02/29/0008", "02/29/1990", "02/29/1906", "02/29/1981", "02/29/1900", "002/29/1908", "11/31/1900", "00/31/1900", "008/31/1900", "13/29/1900", "00/29/1900", "009/29/1900", "13/01/1900", "01/01/0000", "01/01/19000", "01/01/190", "01/00/1900", "01/001/1900", "00/01/1900", "001/01/1900"]}, {"regex": "^(((0[1-9]|1[012])/(0[1-9]|1\\d|2[0-8])|(0[13456789]|1[012])/(29|30)|(0[13578]|1[02])/31)/[2-9]\\d{3}|02/29/(([2-9]\\d)(0[48]|[2468][048]|[13579][26])|(([2468][048]|[3579][26])00)))$", "exceptionStackTrace": null, "matches": ["02/29/9200", "02/29/7600", "02/29/5600", "02/29/3600", "02/29/8400", "02/29/8000", "02/29/6800", "02/29/4800", "02/29/2800", "02/29/2092", "02/29/2076", "02/29/2056", "02/29/2036", "02/29/2016", "02/29/2084", "02/29/2080", "02/29/2068", "02/29/2048", "02/29/2028", "02/29/2004", "02/29/2000", "10/31/2000", "07/31/2000", "05/31/2000", "03/31/2000", "01/31/2000", "11/29/2000", "10/29/2000", "08/29/2000", "07/29/2000", "06/29/2000", "05/29/2000", "04/29/2000", "03/29/2000", "11/01/2000", "10/01/2000", "01/29/2000", "02/29/9600", "02/29/8800", "02/29/2096", "02/29/2088", "02/29/2008", "12/31/2000", "08/31/2000", "12/29/2000", "09/30/2000", "09/29/2000", "12/01/2000", "01/20/2000", "01/10/2000", "01/01/2000"], "nonMatches": ["02/29/9000", "02/29/0600", "02/29/8100", "02/29/0800", "02/29/2090", "02/29/2006", "02/29/2081", "02/29/0008", "11/31/2000", "00/31/2000", "13/29/2000", "00/29/2000", "13/01/2000", "01/01/20000", "01/01/200", "01/01/0000", "01/00/2000", "00/01/2000"]}, {"regex": "^(((0[1-9]|[12]\\d|3[01])\\/(0[13578]|1[02])\\/((19|[2-9]\\d)\\d{2}))|((0[1-9]|[12]\\d|30)\\/(0[13456789]|1[012])\\/((19|[2-9]\\d)\\d{2}))|((0[1-9]|1\\d|2[0-8])\\/02\\/((19|[2-9]\\d)\\d{2}))|(29\\/02\\/((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))$", "exceptionStackTrace": null, "matches": ["29/02/9200", "29/02/7600", "29/02/5600", "29/02/3600", "29/02/8400", "29/02/8000", "29/02/6800", "29/02/4800", "29/02/2800", "29/02/1692", "29/02/1676", "29/02/1656", "29/02/1636", "29/02/1616", "29/02/1684", "29/02/1680", "29/02/1668", "29/02/1648", "29/02/1628", "29/02/1604", "10/09/1900", "01/06/1900", "01/04/1900", "30/08/1900", "10/08/1900", "01/11/1900", "01/10/1900", "01/07/1900", "01/05/1900", "01/03/1900", "01/01/1900", "29/02/9600", "29/02/8800", "29/02/1600", "29/02/2008", "29/02/1696", "29/02/1688", "29/02/1608", "20/02/1900", "10/02/1900", "01/02/2000", "01/02/1900", "30/09/1900", "20/09/1900", "01/09/2000", "01/09/1900", "31/08/1900", "20/08/1900", "01/12/1900", "01/08/2000", "01/08/1900"], "nonMatches": ["29/02/9000", "29/02/0600", "29/02/8100", "29/02/0800", "29/02/0008", "29/02/1690", "29/02/1606", "29/02/1681", "29/02/1008", "29/02/1900", "01/02/0000", "01/02/19000", "01/02/190", "00/02/1900", "01/13/1900", "01/09/0000", "01/09/19000", "01/09/190", "00/09/1900", "32/08/1900", "01/08/0000", "01/08/19000", "01/08/190", "01/00/1900", "00/08/1900"]}, {"regex": "^([2-9]\\d{3}((0[1-9]|1[012])(0[1-9]|1\\d|2[0-8])|(0[13456789]|1[012])(29|30)|(0[13578]|1[02])31)|(([2-9]\\d)(0[48]|[2468][048]|[13579][26])|(([2468][048]|[3579][26])00))0229)$", "exceptionStackTrace": null, "matches": ["92000229", "76000229", "56000229", "36000229", "84000229", "80000229", "68000229", "48000229", "28000229", "20920229", "20760229", "20560229", "20360229", "20160229", "20840229", "20800229", "20680229", "20480229", "20280229", "20040229", "20000229", "20001031", "20000731", "20000531", "20000331", "20000131", "20001129", "20001029", "20000829", "20000729", "20000629", "20000529", "20000429", "20000329", "20001101", "20001001", "20000129", "96000229", "88000229", "20960229", "20880229", "20080229", "20001231", "20000831", "20001229", "20000930", "20000929", "20001201", "20000120", "20000110", "20000101"], "nonMatches": ["90000229", "06000229", "81000229", "08000229", "20900229", "20060229", "20810229", "00080229", "20001131", "20000031", "20001329", "20000029", "20001301", "20000100", "20000001", "200000101", "2000101", "00000101"]}, {"regex": "^(\\d{2}((0[1-9]|1[012])(0[1-9]|1\\d|2[0-8])|(0[13456789]|1[012])(29|30)|(0[13578]|1[02])31)|([02468][048]|[13579][26])0229)$", "exceptionStackTrace": null, "matches": ["920229", "760229", "560229", "360229", "160229", "840229", "800229", "680229", "480229", "280229", "080229", "001031", "000731", "000531", "000331", "000131", "001129", "001029", "000829", "000729", "000629", "000529", "000429", "000329", "001101", "001001", "000129", "960229", "880229", "001231", "000831", "001229", "000930", "000929", "001201", "000120", "000110", "000101"], "nonMatches": ["900229", "060229", "810229", "180229", "001131", "000031", "001329", "000029", "001301", "000100", "000001", "0000101", "00101"]}, {"regex": "^([01]\\d|2[0123])([0-5]\\d){2}$", "exceptionStackTrace": null, "matches": ["220000", "210000", "200000", "000000", "230000", "100000"], "nonMatches": ["240000", "10000000", "1000", "106000"]}, {"regex": "^((\\d{2}((0[13578]|1[02])(0[1-9]|[12]\\d|3[01])|(0[13456789]|1[012])(0[1-9]|[12]\\d|30)|02(0[1-9]|1\\d|2[0-8])))|([02468][048]|[13579][26])0229)$", "exceptionStackTrace": null, "matches": ["920229", "760229", "560229", "360229", "160229", "840229", "800229", "680229", "480229", "280229", "080229", "000229", "000910", "000601", "000401", "001101", "001001", "000830", "000810", "000701", "000501", "000301", "000101", "960229", "880229", "000220", "000210", "000201", "000930", "000920", "000901", "001201", "000831", "000820", "000801"], "nonMatches": ["900229", "060229", "810229", "180229", "000200", "001301", "000900", "000832", "000800", "000001", "0000801", "00801"]}, {"regex": "^(((0?[1-9]|[12]\\d|3[01])[\\.\\-\\/](0?[13578]|1[02])[\\.\\-\\/]((1[6-9]|[2-9]\\d)?\\d{2}))|((0?[1-9]|[12]\\d|30)[\\.\\-\\/](0?[13456789]|1[012])[\\.\\-\\/]((1[6-9]|[2-9]\\d)?\\d{2}))|((0?[1-9]|1\\d|2[0-8])[\\.\\-\\/]0?2[\\.\\-\\/]((1[6-9]|[2-9]\\d)?\\d{2}))|(29[\\.\\-\\/]0?2[\\.\\-\\/]((1[6-9]|[2-9]\\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00)))$", "exceptionStackTrace": null, "matches": ["29/02/9200", "29/02/7600", "29/02/5600", "29/02/3600", "29/02/8400", "29/02/8000", "29/02/6800", "29/02/4800", "29/02/2800", "29/02/1692", "29/02/1676", "29/02/1656", "29/02/1636", "29/02/1616", "29/02/1684", "29/02/1680", "29/02/1668", "29/02/1648", "29/02/1628", "29/02/1604", "29/02/08", "29/02.1608", "29/02-1608", "29/2/1608", "29.02/1608", "29-02/1608", "01/02/00", "01/02.1600", "01/02-1600", "01/2/1600", "01.02/1600", "01-02/1600", "1/02/1600", "10/09/1600", "01/09/00", "01/09.1600", "01/09-1600", "01/06/1600", "01/04/1600", "01/9/1600", "01.09/1600", "01-09/1600", "1/09/1600", "30/08/1600", "10/08/1600", "01/11/1600", "01/10/1600", "01/08/00", "01/08.1600", "01/08-1600", "01/07/1600", "01/05/1600", "01/03/1600", "01/01/1600", "01/8/1600", "01.08/1600", "01-08/1600", "1/08/1600", "29/2/00", "29/2/9600", "29/2/8800", "29/2/1600", "29/2/96", "29/2/88", "29/2/08", "20/2/00", "10/2/00", "1/2/00", "30/9/00", "20/9/00", "1/9/00", "31/8/00", "20/8/00", "1/12/00", "1/8/00", "29/02/00", "29/02/9600", "29/02/8800", "29/02/1600", "29/02/2008", "29/02/1696", "29/02/1688", "29/02/1608", "20/02/1600", "10/02/1600", "01/02/2000", "01/02/1600", "30/09/1600", "20/09/1600", "01/09/2000", "01/09/1600", "31/08/1600", "20/08/1600", "01/12/1600", "01/08/2000", "01/08/1600"], "nonMatches": ["29/02/9000", "29/02/0600", "29/02/8100", "29/02/0800", "29/02/0008", "29/02/1690", "29/02/1606", "29/02/1681", "29/02/161608", "29/02/1008", "29/002/1608", "01/02/0000", "01/02/16000", "01/02/160", "01/02/161600", "01/02/1000", "01/002/1600", "00/02/1600", "001/02/1600", "01/13/1600", "01/09/0000", "01/09/16000", "01/09/160", "01/09/161600", "01/09/1000", "01/009/1600", "00/09/1600", "001/09/1600", "32/08/1600", "01/08/0000", "01/08/16000", "01/08/160", "01/08/161600", "01/08/1000", "01/00/1600", "01/008/1600", "00/08/1600", "001/08/1600"]}, {"regex": "^(((0?[1-9]|[12]\\d|3[01])[\\.\\-\\/](0?[13578]|1[02])[\\.\\-\\/]((1[6-9]|[2-9]\\d)?\\d{2}|\\d))|((0?[1-9]|[12]\\d|30)[\\.\\-\\/](0?[13456789]|1[012])[\\.\\-\\/]((1[6-9]|[2-9]\\d)?\\d{2}|\\d))|((0?[1-9]|1\\d|2[0-8])[\\.\\-\\/]0?2[\\.\\-\\/]((1[6-9]|[2-9]\\d)?\\d{2}|\\d))|(29[\\.\\-\\/]0?2[\\.\\-\\/]((1[6-9]|[2-9]\\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00|[048])))$", "exceptionStackTrace": null, "matches": ["29/02/4", "29/02/0", "29/02/9200", "29/02/7600", "29/02/5600", "29/02/3600", "29/02/8400", "29/02/8000", "29/02/6800", "29/02/4800", "29/02/2800", "29/02/1692", "29/02/1676", "29/02/1656", "29/02/1636", "29/02/1616", "29/02/1684", "29/02/1680", "29/02/1668", "29/02/1648", "29/02/1628", "29/02/1604", "29/02/08", "29/02.1608", "29/02-1608", "29/2/1608", "29.02/1608", "29-02/1608", "01/02/00", "01/02.1600", "01/02-1600", "01/2/1600", "01.02/1600", "01-02/1600", "1/02/1600", "10/09/1600", "01/09/00", "01/09.1600", "01/09-1600", "01/06/1600", "01/04/1600", "01/9/1600", "01.09/1600", "01-09/1600", "1/09/1600", "30/08/1600", "10/08/1600", "01/11/1600", "01/10/1600", "01/08/00", "01/08.1600", "01/08-1600", "01/07/1600", "01/05/1600", "01/03/1600", "01/01/1600", "01/8/1600", "01.08/1600", "01-08/1600", "1/08/1600", "29/2/8", "29/2/00", "29/2/9600", "29/2/8800", "29/2/1600", "29/2/96", "29/2/88", "29/2/08", "20/2/00", "10/2/00", "1/2/0", "1/2/00", "30/9/00", "20/9/00", "1/9/0", "1/9/00", "31/8/00", "20/8/00", "1/12/00", "1/8/0", "1/8/00", "29/02/8", "29/02/00", "29/02/9600", "29/02/8800", "29/02/1600", "29/02/2008", "29/02/1696", "29/02/1688", "29/02/1608", "20/02/1600", "10/02/1600", "01/02/0", "01/02/2000", "01/02/1600", "30/09/1600", "20/09/1600", "01/09/0", "01/09/2000", "01/09/1600", "31/08/1600", "20/08/1600", "01/12/1600", "01/08/0", "01/08/2000", "01/08/1600"], "nonMatches": ["29/02/1", "29/02/9000", "29/02/0600", "29/02/8100", "29/02/0800", "29/02/0008", "29/02/1690", "29/02/1606", "29/02/1681", "29/02/161608", "29/02/1008", "29/002/1608", "01/02/0000", "01/02/16000", "01/02/160", "01/02/161600", "01/02/1000", "01/002/1600", "00/02/1600", "001/02/1600", "01/13/1600", "01/09/0000", "01/09/16000", "01/09/160", "01/09/161600", "01/09/1000", "01/009/1600", "00/09/1600", "001/09/1600", "32/08/1600", "01/08/0000", "01/08/16000", "01/08/160", "01/08/161600", "01/08/1000", "01/00/1600", "01/008/1600", "00/08/1600", "001/08/1600"]}, {"regex": "^(((0[1-9]|[12]\\d|3[01])\\/(0[13578]|1[02])\\/(\\d{2}))|((0[1-9]|[12]\\d|30)\\/(0[13456789]|1[012])\\/(\\d{2}))|((0[1-9]|1\\d|2[0-8])\\/02\\/(\\d{2}))|(29\\/02\\/((0[48]|[2468][048]|[13579][26])|(00))))$", "exceptionStackTrace": null, "matches": ["29/02/92", "29/02/76", "29/02/56", "29/02/36", "29/02/16", "29/02/84", "29/02/80", "29/02/68", "29/02/48", "29/02/28", "29/02/04", "10/09/00", "01/06/00", "01/04/00", "30/08/00", "10/08/00", "01/11/00", "01/10/00", "01/07/00", "01/05/00", "01/03/00", "01/01/00", "29/02/00", "29/02/96", "29/02/88", "29/02/08", "20/02/00", "10/02/00", "01/02/00", "30/09/00", "20/09/00", "01/09/00", "31/08/00", "20/08/00", "01/12/00", "01/08/00"], "nonMatches": ["29/02/90", "29/02/06", "29/02/81", "01/02/000", "01/02/0", "00/02/00", "01/13/00", "01/09/000", "01/09/0", "00/09/00", "32/08/00", "01/08/000", "01/08/0", "01/00/00", "00/08/00"]}, {"regex": "^(((0[1-9]|[12]\\d|3[01])\\/(0[13578]|1[02])\\/((1[6-9]|[2-9]\\d)\\d{2}))|((0[1-9]|[12]\\d|30)\\/(0[13456789]|1[012])\\/((1[6-9]|[2-9]\\d)\\d{2}))|((0[1-9]|1\\d|2[0-8])\\/02\\/((1[6-9]|[2-9]\\d)\\d{2}))|(29\\/02\\/((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))$", "exceptionStackTrace": null, "matches": ["29/02/9200", "29/02/7600", "29/02/5600", "29/02/3600", "29/02/8400", "29/02/8000", "29/02/6800", "29/02/4800", "29/02/2800", "29/02/1692", "29/02/1676", "29/02/1656", "29/02/1636", "29/02/1616", "29/02/1684", "29/02/1680", "29/02/1668", "29/02/1648", "29/02/1628", "29/02/1604", "10/09/1600", "01/06/1600", "01/04/1600", "30/08/1600", "10/08/1600", "01/11/1600", "01/10/1600", "01/07/1600", "01/05/1600", "01/03/1600", "01/01/1600", "29/02/9600", "29/02/8800", "29/02/1600", "29/02/2008", "29/02/1696", "29/02/1688", "29/02/1608", "20/02/1600", "10/02/1600", "01/02/2000", "01/02/1600", "30/09/1600", "20/09/1600", "01/09/2000", "01/09/1600", "31/08/1600", "20/08/1600", "01/12/1600", "01/08/2000", "01/08/1600"], "nonMatches": ["29/02/9000", "29/02/0600", "29/02/8100", "29/02/0800", "29/02/0008", "29/02/1690", "29/02/1606", "29/02/1681", "29/02/1008", "01/02/0000", "01/02/16000", "01/02/160", "01/02/1000", "00/02/1600", "01/13/1600", "01/09/0000", "01/09/16000", "01/09/160", "01/09/1000", "00/09/1600", "32/08/1600", "01/08/0000", "01/08/16000", "01/08/160", "01/08/1000", "01/00/1600", "00/08/1600"]}, {"regex": "^[\\u0621-\\u064A]+$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 1569"}, "matches": [], "nonMatches": []}, {"regex": "((?<strPOBox>((POBox|PO\\sBox)\\s*\\d*)),?\\s?)?(((?<strUnit>([\\w\\d\\s\\,]*)),\\s?)?( (?<strStreet>([\\w\\s\\-]*\\w\\s(st\\s)?[\\w]*\\s(street|st|road|rd|close|cl|avenue|ave|av|path|ph|drive|drv|LOOP|COURT|CT|CIRCLE|LANE|LN))  ),?\\s?))?((?<strTown>([\\p{Ll}\\p{Lu}\\p{Lo}\\p{Pc}\\p{Lt}\\p{Lm}\\s]*)),?\\s?)?((?<strState>(Victoria|VIC|New South Wales|NSW|South Australia|SA|Northern Territory|NT|West Australia|WA|Tasmania|TAS|ACT|Queensland|QLD))\\s*)?(?<strPostalCode>(\\d{4}),?\\s?)?(?<strCountry>(Australia))?", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<s"}, "matches": []}, {"regex": "(?:[Yy][Oo][Uu][Tt][Uu][Bb][Ee]\\.[Cc][Oo][Mm]/watch\\?v=)([\\w-]{11})", "exceptionStackTrace": null, "matches": ["youtube.com/watch?v=------------", "youtube.com/watch?v=a----------", "youtube.com/watch?v=_----------", "youtube.com/watch?v=A----------", "youtube.com/watch?v=0----------", "youtube.coM/watch?v=-----------", "youtube.cOm/watch?v=-----------", "youtube.Com/watch?v=-----------", "youtubE.com/watch?v=-----------", "youtuBe.com/watch?v=-----------", "youtUbe.com/watch?v=-----------", "youTube.com/watch?v=-----------", "yoUtube.com/watch?v=-----------", "yOutube.com/watch?v=-----------", "Youtube.com/watch?v=-----------", "youtube.com/watch?v=-----------"], "nonMatches": ["youtube.com/watch?v=----------", "youtube.coa/watch?v=-----------", "youtube.coA/watch?v=-----------", "youtube.cam/watch?v=-----------", "youtube.cAm/watch?v=-----------", "youtube.aom/watch?v=-----------", "youtube.Aom/watch?v=-----------", "youtuba.com/watch?v=-----------", "youtubA.com/watch?v=-----------", "youtuae.com/watch?v=-----------", "youtuAe.com/watch?v=-----------", "youtabe.com/watch?v=-----------", "youtAbe.com/watch?v=-----------", "youaube.com/watch?v=-----------", "youAube.com/watch?v=-----------", "yoatube.com/watch?v=-----------", "yoAtube.com/watch?v=-----------", "yautube.com/watch?v=-----------", "yAutube.com/watch?v=-----------", "aoutube.com/watch?v=-----------", "Aoutube.com/watch?v=-----------"]}, {"regex": "&#39;(&#39;{2})*([^&#39;\\r\\n]*)(&#39;{2})*([^&#39;\\r\\n]*)(&#39;{2})*&#39;", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\r"}, "matches": [], "nonMatches": []}, {"regex": "(^\\([0]\\d{1}\\))(\\d{7}$)|(^\\([0][2]\\d{1}\\))(\\d{6,8}$)|([0][8][0][0])([\\s])(\\d{5,8}$)", "exceptionStackTrace": null, "matches": ["0800 00000000", "(020)00000000", "0800 00000", "(020)000000", "(00)0000000"], "nonMatches": ["0800 000000000", "0800 0000", "(020)000000000", "(020)00000", "(0200)000000", "(02)000000", "(00)00000000", "(00)000000", "(000)0000000", "(0)0000000"]}, {"regex": "^\\d{5}(\\-)(\\d{3})?$", "exceptionStackTrace": null, "matches": ["00000-", "00000-000"], "nonMatches": ["00000-000000", "00000-0000", "00000-00", "000000-000", "0000-000"]}, {"regex": "^[0-9]%?$|^1[0-9]%?$|^2[0-9]%?$|^3[0-5]%?$|^[0-9]\\.\\d{1,2}%?$|^1[0-9]\\.\\d{1,2}%?$|^2[0-9]\\.\\d{1,2}%?$|^3[0-4]\\.\\d{1,2}%?$|^35%?$", "exceptionStackTrace": null, "matches": ["30.00%", "20.00%", "10.00%", "0.00%", "35", "30.0", "20.0", "10.0", "0.0", "30", "20", "10", "0", "35%", "30.0%", "20.0%", "10.0%", "0.0%", "30%", "20%", "10%", "0%"], "nonMatches": ["35%%", "30.0%%", "30.000%", "30.%", "35.0%", "20.0%%", "20.000%", "20.%", "10.0%%", "10.000%", "10.%", "0.0%%", "0.000%", "0.%", "30%%", "36%", "20%%", "10%%", "0%%"]}, {"regex": "gdfgfd", "exceptionStackTrace": null, "matches": ["gdfgfd"], "nonMatches": []}, {"regex": "^(([0]?[1-9])|(1[0-2]))\\/(([0]?[1-9])|([1,2]\\d{1})|([3][0,1]))\\/[12]\\d{3}$", "exceptionStackTrace": null, "matches": ["01/30/2000", "01/3,/2000", "01/2/2000", "01/10/2000", "01/,0/2000", "01/01/1000", "01/1/2000", "1/01/2000", "10/1/2000", "1/31/2000", "1/20/2000", "1/1/2000", "10/01/2000", "01/31/2000", "01/20/2000", "01/01/2000"], "nonMatches": ["13/01/2000", "01/32/2000", "01/200/2000", "01/01/20000", "01/01/200", "01/01/0000", "01/00/2000", "01/001/2000", "00/01/2000", "001/01/2000"]}, {"regex": "(^(09|9)[1][1-9]\\\\d{7}$)|(^(09|9)[3][12456]\\\\d{7}$)", "exceptionStackTrace": null, "matches": ["0935\\ddddddd", "0934\\ddddddd", "0932\\ddddddd", "0931\\ddddddd", "936\\ddddddd", "0936\\ddddddd", "911\\ddddddd", "0911\\ddddddd"], "nonMatches": ["0936\\dddddddd", "0936\\dddddd", "0930\\ddddddd", "0911\\dddddddd", "0911\\dddddd", "0910\\ddddddd"]}, {"regex": "<[^>]*>", "exceptionStackTrace": null, "matches": ["<>>", "<<>", "<eVil>", "<EVIL>", "<ev_il>", "<ev il>", "<ev4il>", "<e>", "< >", "<6>", "<_>", "<>", "<evil>"], "nonMatches": []}, {"regex": "[\\u0600-\\u06FF]", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 1536"}, "matches": [], "nonMatches": []}, {"regex": "^([0-1])*$\n", "exceptionStackTrace": null, "matches": ["00\n", "\n", "0\n"], "nonMatches": ["2\n"]}, {"regex": "^([0-7])*$\n", "exceptionStackTrace": null, "matches": ["00\n", "\n", "0\n"], "nonMatches": ["8\n"]}, {"regex": "((\\0[0-9])|(\\1[0-9])|(\\2[0-3])):([0-5][0-9])", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "cannot refer to an open group"}, "matches": []}, {"regex": "\\[(?<GroupName>.*)\\](?<GroupContent>[^\\[]+)       --------        [\\s]*(?<Key>.+)[\\s]*=[\\s]*(?<Value>[^\\r]+) ", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<G"}, "matches": []}, {"regex": "^([a-z-[dfioquwz]]|[A-Z-[DFIOQUWZ]])\\d([a-z-[dfioqu]]|[A-Z-[DFIOQU]])(\\s)?\\d([a-z-[dfioqu]]|[A-Z-[DFIOQU]])\\d$", "exceptionStackTrace": null, "matches": ["W]0u] 0u]0", "U]0u] 0u]0", "Q]0u] 0u]0", "O]0u] 0u]0", "I]0u] 0u]0", "F]0u] 0u]0", "D]0u] 0u]0", "A]0u] 0u]0", "z]0Q] 0u]0", "z]0O] 0u]0", "z]0I] 0u]0", "z]0F] 0u]0", "z]0D] 0u]0", "z]0A] 0u]0", "z]0u] 0Q]0", "z]0u] 0O]0", "z]0u] 0I]0", "z]0u] 0F]0", "z]0u] 0D]0", "z]0u] 0A]0", "z]0u] 0q]0", "z]0u] 0o]0", "z]0u] 0i]0", "z]0u] 0f]0", "z]0u] 0d]0", "z]0u] 0a]0", "z]0u] 0[]0", "z]0u] 0-]0", "z]0q] 0u]0", "z]0o] 0u]0", "z]0i] 0u]0", "z]0f] 0u]0", "z]0d] 0u]0", "z]0a] 0u]0", "z]0[] 0u]0", "z]0-] 0u]0", "w]0u] 0u]0", "u]0u] 0u]0", "q]0u] 0u]0", "o]0u] 0u]0", "i]0u] 0u]0", "f]0u] 0u]0", "d]0u] 0u]0", "a]0u] 0u]0", "[]0u] 0u]0", "-]0u] 0u]0", "Z]0u]0u]0", "z]0U]0u]0", "z]0u]0U]0", "z]0u]0u]0", "Z]0u] 0u]0", "z]0U] 0u]0", "z]0u] 0U]0", "z]0u] 0u]0"], "nonMatches": ["z]0u]  0u]0"]}, {"regex": "^\\\\([^\\\\]+\\\\)*[^\\/:*?&quot;&lt;&gt;|]?$", "exceptionStackTrace": null, "matches": ["\\evil\\", "\\evil\\\\", "\\evil\\A", "\\evil\\0", "\\evil\\ ", "\\evil\\evil\\a", "\\a", "\\|\\a", "\\?\\a", "\\;\\a", "\\:\\a", "\\/\\a", "\\*\\a", "\\&\\a", "\\eVil\\a", "\\EVIL\\a", "\\ev_il\\a", "\\ev il\\a", "\\ev4il\\a", "\\e\\a", "\\ \\a", "\\6\\a", "\\_\\a", "\\", "\\evil\\a"], "nonMatches": ["\\evil\\aa", "\\evil\\|", "\\evil\\u", "\\evil\\t", "\\evil\\q", "\\evil\\o", "\\evil\\l", "\\evil\\g", "\\evil\\?", "\\evil\\;", "\\evil\\:", "\\evil\\/", "\\evil\\*", "\\evil\\&", "\\\\\\a", "\\\\a"]}, {"regex": "^[_a-z0-9-]+(\\.[_a-z0-9-]+)*@[a-z0-9]+(-?[a-z0-9]+)?(\\.[a-z0-9]+(-?[a-z0-9]+)?)*\\.([a-z]{2}|xn\\-{2}[a-z0-9]{4,18}|arpa|aero|asia|biz|cat|com|coop|edu|gov|info|int|jobs|mil|mobi|museum|name|net|org|pro|tel|travel|xxx)$", "exceptionStackTrace": null, "matches": ["evil.evil@evil-evil.evil-evil.xn--000000000000000000", "evil.evil@evil-evil.evil-evil.xn--a000", "evil.evil@evil-evil.evil-evil.evil-evil.aa", "evil.evil@evil-evil.aa", "evil.evil@evil-evil.evil.aa", "evil.evil@evil-evil.evil-ev4il.aa", "evil.evil@evil-evil.evil-e.aa", "evil.evil@evil-evil.evil-6.aa", "evil.evil@evil-evil.evilevil.aa", "evil.evil@evil-evil.ev4il-evil.aa", "evil.evil@evil-evil.e-evil.aa", "evil.evil@evil-evil.6-evil.aa", "evil.evil@evil.evil-evil.aa", "evil.evil@evil-ev4il.evil-evil.aa", "evil.evil@evil-e.evil-evil.aa", "evil.evil@evil-6.evil-evil.aa", "evil.evil@evilevil.evil-evil.aa", "evil.evil@ev4il-evil.evil-evil.aa", "evil.evil@e-evil.evil-evil.aa", "evil.evil@6-evil.evil-evil.aa", "evil.evil.evil@evil-evil.evil-evil.aa", "evil@evil-evil.evil-evil.aa", "evil.-@evil-evil.evil-evil.aa", "evil.ev_il@evil-evil.evil-evil.aa", "evil.ev4il@evil-evil.evil-evil.aa", "evil.e@evil-evil.evil-evil.aa", "evil.6@evil-evil.evil-evil.aa", "evil._@evil-evil.evil-evil.aa", "-.evil@evil-evil.evil-evil.aa", "ev_il.evil@evil-evil.evil-evil.aa", "ev4il.evil@evil-evil.evil-evil.aa", "e.evil@evil-evil.evil-evil.aa", "6.evil@evil-evil.evil-evil.aa", "_.evil@evil-evil.evil-evil.aa", "evil@evil.xxx", "evil@evil.travel", "evil@evil.tel", "evil@evil.pro", "evil@evil.org", "evil@evil.net", "evil@evil.name", "evil@evil.museum", "evil@evil.mobi", "evil@evil.mil", "evil@evil.jobs", "evil@evil.int", "evil@evil.info", "evil@evil.gov", "evil@evil.edu", "evil@evil.coop", "evil@evil.com", "evil@evil.cat", "evil@evil.biz", "evil@evil.asia", "evil@evil.aero", "evil@evil.arpa", "evil@evil.xn--0000", "evil@evil.aa", "evil.evil@evil-evil.evil-evil.xxx", "evil.evil@evil-evil.evil-evil.travel", "evil.evil@evil-evil.evil-evil.tel", "evil.evil@evil-evil.evil-evil.pro", "evil.evil@evil-evil.evil-evil.org", "evil.evil@evil-evil.evil-evil.net", "evil.evil@evil-evil.evil-evil.name", "evil.evil@evil-evil.evil-evil.museum", "evil.evil@evil-evil.evil-evil.mobi", "evil.evil@evil-evil.evil-evil.mil", "evil.evil@evil-evil.evil-evil.jobs", "evil.evil@evil-evil.evil-evil.int", "evil.evil@evil-evil.evil-evil.info", "evil.evil@evil-evil.evil-evil.gov", "evil.evil@evil-evil.evil-evil.edu", "evil.evil@evil-evil.evil-evil.coop", "evil.evil@evil-evil.evil-evil.com", "evil.evil@evil-evil.evil-evil.cat", "evil.evil@evil-evil.evil-evil.biz", "evil.evil@evil-evil.evil-evil.asia", "evil.evil@evil-evil.evil-evil.aero", "evil.evil@evil-evil.evil-evil.arpa", "evil.evil@evil-evil.evil-evil.xn--0000", "evil.evil@evil-evil.evil-evil.aa"], "nonMatches": ["evil.evil@evil-evil.evil-evil.xn--0000000000000000000", "evil.evil@evil-evil.evil-evil.xn--000", "evil.evil@evil-evil.evil-evil.xn---0000", "evil.evil@evil-evil.evil-evil.xn-0000", "evil.evil@evil-evil.evil-evil.aaa", "evil.evil@evil-evil.evil-evil.a", "evil.evil@evil-evil.evil-evil-evil.aa", "evil.evil@evil-evil.evil-eVil.aa", "evil.evil@evil-evil.evil-EVIL.aa", "evil.evil@evil-evil.evil-ev_il.aa", "evil.evil@evil-evil.evil-ev il.aa", "evil.evil@evil-evil.evil- .aa", "evil.evil@evil-evil.evil-_.aa", "evil.evil@evil-evil.evil-.aa", "evil.evil@evil-evil.evil--evil.aa", "evil.evil@evil-evil.eVil-evil.aa", "evil.evil@evil-evil.EVIL-evil.aa", "evil.evil@evil-evil.ev_il-evil.aa", "evil.evil@evil-evil.ev il-evil.aa", "evil.evil@evil-evil. -evil.aa", "evil.evil@evil-evil._-evil.aa", "evil.evil@evil-evil.-evil.aa", "evil.evil@evil-evil-evil.evil-evil.aa", "evil.evil@evil-eVil.evil-evil.aa", "evil.evil@evil-EVIL.evil-evil.aa", "evil.evil@evil-ev_il.evil-evil.aa", "evil.evil@evil-ev il.evil-evil.aa", "evil.evil@evil- .evil-evil.aa", "evil.evil@evil-_.evil-evil.aa", "evil.evil@evil-.evil-evil.aa", "evil.evil@evil--evil.evil-evil.aa", "evil.evil@eVil-evil.evil-evil.aa", "evil.evil@EVIL-evil.evil-evil.aa", "evil.evil@ev_il-evil.evil-evil.aa", "evil.evil@ev il-evil.evil-evil.aa", "evil.evil@ -evil.evil-evil.aa", "evil.evil@_-evil.evil-evil.aa", "evil.evil@-evil.evil-evil.aa", "evil.@@evil-evil.evil-evil.aa", "evil..@evil-evil.evil-evil.aa", "evil.eVil@evil-evil.evil-evil.aa", "evil.EVIL@evil-evil.evil-evil.aa", "evil.ev il@evil-evil.evil-evil.aa", "evil. @evil-evil.evil-evil.aa", "evil.@evil-evil.evil-evil.aa", "@.evil@evil-evil.evil-evil.aa", "..evil@evil-evil.evil-evil.aa", "eVil.evil@evil-evil.evil-evil.aa", "EVIL.evil@evil-evil.evil-evil.aa", "ev il.evil@evil-evil.evil-evil.aa", " .evil@evil-evil.evil-evil.aa", ".evil@evil-evil.evil-evil.aa"]}, {"regex": "^([0-9a-f]{0,4}:){2,7}(:|[0-9a-f]{1,4})$", "exceptionStackTrace": null, "matches": ["a:a:aaaa", "a:a:0", "a:a:a:a:a:a:a::", "aaaa:a::", "0:a::", ":a:a", ":a::", "a:a:a", "a:a::"], "nonMatches": ["a:a:aaaaa", "a:a:", "a:a:g", "a:a:a:a:a:a:a:a::", "a::", "aaaaa:a::", "g:a::"]}, {"regex": "^([0-9a-zA-Z]+[-._+&amp;])*[0-9a-zA-Z_-]+@([-0-9a-zA-Z]+[.])+[a-zA-Z]{2,6}$", "exceptionStackTrace": null, "matches": ["evil;evil@evil.AAAAAA", "evil;evil@evil.aA", "evil;evil@evil.evil.AA", "evil;evil@-.AA", "evil;evil@eVil.AA", "evil;evil@EVIL.AA", "evil;evil@ev4il.AA", "evil;evil@e.AA", "evil;evil@6.AA", "evil;-@evil.AA", "evil;eVil@evil.AA", "evil;EVIL@evil.AA", "evil;ev_il@evil.AA", "evil;ev4il@evil.AA", "evil;e@evil.AA", "evil;6@evil.AA", "evil;_@evil.AA", "evil;evil;evil@evil.AA", "evilpevil@evil.AA", "evilmevil@evil.AA", "evilbevil@evil.AA", "evilaevil@evil.AA", "evil_evil@evil.AA", "evil.evil@evil.AA", "evil-evil@evil.AA", "evil+evil@evil.AA", "evil&evil@evil.AA", "eVil;evil@evil.AA", "EVIL;evil@evil.AA", "ev_il;evil@evil.AA", "ev4il;evil@evil.AA", "e;evil@evil.AA", "6;evil@evil.AA", "evil@evil.AA", "evil;evil@evil.AA"], "nonMatches": ["evil;evil@evil.AAAAAAA", "evil;evil@evil.A", "evil;evil@AA", "evil;evil@@.AA", "evil;evil@;.AA", "evil;evil@..AA", "evil;evil@+.AA", "evil;evil@&.AA", "evil;evil@ev_il.AA", "evil;evil@ev il.AA", "evil;evil@ .AA", "evil;evil@_.AA", "evil;evil@.AA", "evil;@@evil.AA", "evil;;@evil.AA", "evil;.@evil.AA", "evil;+@evil.AA", "evil;&@evil.AA", "evil;ev il@evil.AA", "evil; @evil.AA", "evil;@evil.AA", "ev il;evil@evil.AA", " ;evil@evil.AA", "_;evil@evil.AA", ";evil@evil.AA"]}, {"regex": "fgrf", "exceptionStackTrace": null, "matches": ["fgrf"], "nonMatches": []}, {"regex": "1?[ \\.\\-\\+]?[(]?([0-9]{3})?[)]?[ \\.\\-\\+]?[0-9]{3}[ \\.\\-\\+]?[0-9]{4}", "exceptionStackTrace": null, "matches": ["1+(000)+000+00000", "1+(000)+0000000", "1+(000)+000.0000", "1+(000)+000-0000", "1+(000)+000 0000", "1+(000)+0000+0000", "1+(000)++000+0000", "1+(000)000+0000", "1+(000).000+0000", "1+(000)-000+0000", "1+(000) 000+0000", "1+(000))+000+0000", "1+(000+000+0000", "1+(000000)+000+0000", "1+()+000+0000", "1+(0000)+000+0000", "1+(00)+000+0000", "1+((000)+000+0000", "1+000)+000+0000", "1++(000)+000+0000", "1(000)+000+0000", "1.(000)+000+0000", "1-(000)+000+0000", "1 (000)+000+0000", "11+(000)+000+0000", "+(000)+000+0000", "0000000", "1+(000)+000+0000"], "nonMatches": ["1+(000)+000+000", "1+(000)+000++0000", "1+(000)+00+0000"]}, {"regex": "\\b[P|p]*(OST|ost)*\\.*\\s*[O|o|0]*(ffice|FFICE)*\\.*\\s*[B|b][O|o|0][X|x]\\b", "exceptionStackTrace": null, "matches": ["pOST. 0ffice. b0X", "pOST. 0ffice. b|x", "pOST. 0ffice. box", "pOST. 0ffice. bOx", "pOST. 0ffice. |0x", "pOST. 0ffice. B0x", "pOST. 0ffice.  b0x", "pOST. 0ffice.b0x", "pOST. 0ffice.. b0x", "pOST. 0ffice b0x", "pOST. 0fficeffice. b0x", "pOST. 0. b0x", "pOST. 00ffice. b0x", "pOST. ffice. b0x", "pOST. |ffice. b0x", "pOST. office. b0x", "pOST. affice. b0x", "pOST. Office. b0x", "pOST. Affice. b0x", "pOST. 1ffice. b0x", "pOST.  0ffice. b0x", "pOST.0ffice. b0x", "pOST.. 0ffice. b0x", "pOST 0ffice. b0x", "pOSTOST. 0ffice. b0x", "p. 0ffice. b0x", "ppOST. 0ffice. b0x", "OST. 0ffice. b0x", "|OST. 0ffice. b0x", "aOST. 0ffice. b0x", "POST. 0ffice. b0x", "AOST. 0ffice. b0x", "b0x", "post. 0ffice. b0x", "pOST. 0FFICE. b0x", "pOST. 0ffice. b0x"], "nonMatches": ["pOST. 0ffice. b0|", "pOST. 0ffice. b0a", "pOST. 0ffice. b0A", "pOST. 0ffice. bax", "pOST. 0ffice. bAx", "pOST. 0ffice. b1x", "pOST. 0ffice. a0x", "pOST. 0ffice. A0x"]}, {"regex": "(\\+91(-)?|91(-)?|0(-)?)?(9)[0-9]{9}", "exceptionStackTrace": null, "matches": ["0--9000000000", "09000000000", "91--9000000000", "919000000000", "+91-90000000000", "+91-+91-9000000000", "+91--9000000000", "+919000000000", "9000000000", "0-9000000000", "91-9000000000", "+91-9000000000"], "nonMatches": ["+91-900000000"]}, {"regex": "([0-9]{6}|[0-9]{3}\\s[0-9]{3})", "exceptionStackTrace": null, "matches": ["000 0000", "0000 000", "0000000", "000 000", "000000"], "nonMatches": ["000 00", "00 000", "00000"]}, {"regex": "^(0)44[\\s]{0,1}[\\-]{0,1}[\\s]{0,1}2[\\s]{0,1}[1-9]{1}[0-9]{6}$", "exceptionStackTrace": null, "matches": ["044 - 21000000", "044 -2 1000000", "044  2 1000000", "044- 2 1000000", "04421000000", "044 - 2 1000000"], "nonMatches": ["044 - 2 10000000", "044 - 2 100000", "044 - 2 11000000", "044 - 2 000000", "044 - 2 0000000", "044 - 2  1000000", "044 -  2 1000000", "044 -- 2 1000000", "044  - 2 1000000"]}, {"regex": "^[1-9][0-9]{0,6}(|.[0-9]{1,2}|,[0-9]{1,2})?", "exceptionStackTrace": null, "matches": ["10,000", "10,00", "10,", "10a0a0", "10", "10a000", "10a00", "10a", "10A0", "1000", "10 0", "10000000a0", "1000000a0", "1a0", "1", "10,0", "10a0"], "nonMatches": ["00a0"]}, {"regex": "^[:*:]", "exceptionStackTrace": null, "matches": ["*", ":"], "nonMatches": []}, {"regex": "(bot|spider|crawler|google)", "exceptionStackTrace": null, "matches": ["google", "crawler", "spider", "bot"], "nonMatches": []}, {"regex": "    $sPatternTablet = &#39;/(Tablet|iPad|iPod)/&#39;;", "exceptionStackTrace": null, "matches": [], "nonMatches": ["    sPatternTablet = &#39;/iPod/&#39;;", "    sPatternTablet = &#39;/iPad/&#39;;", "    sPatternTablet = &#39;/Tablet/&#39;;"]}, {"regex": "(Windows Phone|iPhone|BlackBerry|Mobile|Android|Opera Mini|Opera Mobile|SymbianOS)", "exceptionStackTrace": null, "matches": ["SymbianOS", "Opera Mobile", "Opera Mini", "Android", "Mobile", "BlackBerry", "iPhone", "Windows Phone"], "nonMatches": []}, {"regex": "(XBOX|Nintendo Wii|smarttv|playstation|hbbtv|philipstv|opera tv|inettv)", "exceptionStackTrace": null, "matches": ["inettv", "opera tv", "philipstv", "hbbtv", "playstation", "smarttv", "Nintendo Wii", "XBOX"], "nonMatches": []}, {"regex": "((?!(This|It|He|She|[MTWFS][a-z]+day|[JF][a-z]+ary|March|April|May|June|July|August|[SOND][a-z]+ber))(?:[A-Z]+\\.\\s?)*(?:(?:[a-zA-Z]+-?)?[A-Z][a-zA-Z]+)(?:(\\b\\s?((?:[a-zA-Z]+-?)?[A-Z][a-zA-Z]+|[A-Z]+\\.|on|of|the|von|der|van|de|bin|and))*(?:\\s*(?:[a-zA-Z]+-?)?[A-Z][a-zA-Z]+))?)", "exceptionStackTrace": null, "matches": ["evil. evil-Aevil eVil. evil-Aevil", "evil. evil-Aevil EVIL. evil-Aevil", "evil. evil-Aevil ev_il. evil-Aevil", "evil. evil-Aevil ev il. evil-Aevil", "evil. evil-Aevil ev4il. evil-Aevil", "evil. evil-Aevil e. evil-Aevil", "evil. evil-Aevil  . evil-Aevil", "evil. evil-Aevil 6. evil-Aevil", "evil. evil-Aevil _. evil-Aevil", "evil. evil-Aevil . evil-Aevil", "evil. evil-Aevil evil-Aevil evil-Aevil evil-Aevil evil-Aevil", "evil. evil-Aevil", "evil. evil-Aevil evil-Aevil evil-AeVil", "evil. evil-Aevil evil-Aevil evil-AEVIL", "evil. evil-Aevil evil-Aevil evil-Aev_il", "evil. evil-Aevil evil-Aevil evil-Aev il", "evil. evil-Aevil evil-Aevil evil-Aev4il", "evil. evil-Aevil evil-Aevil evil-Ae", "evil. evil-Aevil evil-Aevil evil-A ", "evil. evil-Aevil evil-Aevil evil-A6", "evil. evil-Aevil evil-Aevil evil-A_", "evil. evil-Aevil evil-Aevil evil-A", "evil. evil-Aevil evil-Aevil evil-evil-Aevil", "evil. evil-Aevil evil-Aevil Aevil", "evil. evil-Aevil evil-Aevil evil--Aevil", "evil. evil-Aevil evil-Aevil evilAevil", "evil. evil-Aevil evil-Aevil eVil-Aevil", "evil. evil-Aevil evil-Aevil EVIL-Aevil", "evil. evil-Aevil evil-Aevil ev_il-Aevil", "evil. evil-Aevil evil-Aevil ev il-Aevil", "evil. evil-Aevil evil-Aevil ev4il-Aevil", "evil. evil-Aevil evil-Aevil e-Aevil", "evil. evil-Aevil evil-Aevil  -Aevil", "evil. evil-Aevil evil-Aevil 6-Aevil", "evil. evil-Aevil evil-Aevil _-Aevil", "evil. evil-Aevil evil-Aevil -Aevil", "evil. evil-Aevil evil-Aevil  evil-Aevil", "evil. evil-Aevil evil-Aevilevil-Aevil", "evil. evil-Aevil evil-Aevil evil-Aevil evil-Aevil", "evil. evil-Aevil evil-Aevil", "evil. evil-Aevil evil-AeVil evil-Aevil", "evil. evil-Aevil evil-AEVIL evil-Aevil", "evil. evil-Aevil evil-Aev_il evil-Aevil", "evil. evil-Aevil evil-Aev il evil-Aevil", "evil. evil-Aevil evil-Aev4il evil-Aevil", "evil. evil-Aevil evil-Ae evil-Aevil", "evil. evil-Aevil evil-A  evil-Aevil", "evil. evil-Aevil evil-A6 evil-Aevil", "evil. evil-Aevil evil-A_ evil-Aevil", "evil. evil-Aevil evil-A evil-Aevil", "evil. evil-Aevil evil-evil-Aevil evil-Aevil", "evil. evil-Aevil Aevil evil-Aevil", "evil. evil-Aevil evil--Aevil evil-Aevil", "evil. evil-Aevil evilAevil evil-Aevil", "evil. evil-Aevil eVil-Aevil evil-Aevil", "evil. evil-Aevil EVIL-Aevil evil-Aevil", "evil. evil-Aevil ev_il-Aevil evil-Aevil", "evil. evil-Aevil ev il-Aevil evil-Aevil", "evil. evil-Aevil ev4il-Aevil evil-Aevil", "evil. evil-Aevil e-Aevil evil-Aevil", "evil. evil-Aevil  -Aevil evil-Aevil", "evil. evil-Aevil 6-Aevil evil-Aevil", "evil. evil-Aevil _-Aevil evil-Aevil", "evil. evil-Aevil -Aevil evil-Aevil", "evil. evil-Aevil  evil-Aevil evil-Aevil", "evil. evil-Aevilevil-Aevil evil-Aevil", "evil. evil-AeVil evil-Aevil evil-Aevil", "evil. evil-AEVIL evil-Aevil evil-Aevil", "evil. evil-Aev_il evil-Aevil evil-Aevil", "evil. evil-Aev il evil-Aevil evil-Aevil", "evil. evil-Aev4il evil-Aevil evil-Aevil", "evil. evil-Ae evil-Aevil evil-Aevil", "evil. evil-A  evil-Aevil evil-Aevil", "evil. evil-A6 evil-Aevil evil-Aevil", "evil. evil-A_ evil-Aevil evil-Aevil", "evil. evil-A evil-Aevil evil-Aevil", "evil. evil-evil-Aevil evil-Aevil evil-Aevil", "evil. Aevil evil-Aevil evil-Aevil", "evil. evil--Aevil evil-Aevil evil-Aevil", "evil. evilAevil evil-Aevil evil-Aevil", "evil. eVil-Aevil evil-Aevil evil-Aevil", "evil. EVIL-Aevil evil-Aevil evil-Aevil", "evil. ev_il-Aevil evil-Aevil evil-Aevil", "evil. ev il-Aevil evil-Aevil evil-Aevil", "evil. ev4il-Aevil evil-Aevil evil-Aevil", "evil. e-Aevil evil-Aevil evil-Aevil", "evil.  -Aevil evil-Aevil evil-Aevil", "evil. 6-Aevil evil-Aevil evil-Aevil", "evil. _-Aevil evil-Aevil evil-Aevil", "evil. -Aevil evil-Aevil evil-Aevil", "evil. evil. evil-Aevil evil-Aevil evil-Aevil", "evil-Aevil evil-Aevil evil-Aevil", "evil.  evil-Aevil evil-Aevil evil-Aevil", "evil.evil-Aevil evil-Aevil evil-Aevil", "eVil. evil-Aevil evil-Aevil evil-Aevil", "EVIL. evil-Aevil evil-Aevil evil-Aevil", "ev_il. evil-Aevil evil-Aevil evil-Aevil", "ev il. evil-Aevil evil-Aevil evil-Aevil", "ev4il. evil-Aevil evil-Aevil evil-Aevil", "e. evil-Aevil evil-Aevil evil-Aevil", " . evil-Aevil evil-Aevil evil-Aevil", "6. evil-Aevil evil-Aevil evil-Aevil", "_. evil-Aevil evil-Aevil evil-Aevil", ". evil-Aevil evil-Aevil evil-Aevil", "Aevil", "evil. evil-Aevil and evil-Aevil", "evil. evil-Aevil bin evil-Aevil", "evil. evil-Aevil de evil-Aevil", "evil. evil-Aevil van evil-Aevil", "evil. evil-Aevil der evil-Aevil", "evil. evil-Aevil von evil-Aevil", "evil. evil-Aevil the evil-Aevil", "evil. evil-Aevil of evil-Aevil", "evil. evil-Aevil on evil-Aevil", "evil. evil-Aevil evil. evil-Aevil", "evil. evil-Aevil evil-Aevil evil-Aevil"], "nonMatches": []}, {"regex": "^(([\\u0600-\\u065F\\u066A-\\u06EF\\u06FA-\\u06FF]+)\\s){3}([\\u0600-\\u065F\\u066A-\\u06EF\\u06FA-\\u06FF]+)$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 1536"}, "matches": [], "nonMatches": []}, {"regex": "jmhuykjuyh", "exceptionStackTrace": null, "matches": ["jmhuykjuyh"], "nonMatches": []}, {"regex": "(([a-zA-Z0-9\\-]*\\.{1,}){1,}[a-zA-Z0-9]*)", "exceptionStackTrace": null, "matches": ["evil.eVil", "evil.EVIL", "evil.ev_il", "evil.ev il", "evil.ev4il", "evil.e", "evil. ", "evil.6", "evil._", "evil.", "evil.evil.evil", "evil..evil", "..evil", "-.evil", "eVil.evil", "EVIL.evil", "ev_il.evil", "ev il.evil", "ev4il.evil", "e.evil", " .evil", "6.evil", "_.evil", ".evil", ".", "evil.evil"], "nonMatches": ["evil", "evilevil"]}, {"regex": "^1000([.][0]{1,3})?$|^\\d{1,3}$|^\\d{1,3}([.]\\d{1,3})$|^([.]\\d{1,3})$", "exceptionStackTrace": null, "matches": [".000", "0.000", "000.0", "000", "1000.000", "1000", ".0", "0.0", "0", "1000.0"], "nonMatches": [".0000", ".", "0.0000", "0.", "0000.0", "0000", "", "1000.0.0", "1000.0000", "1000."]}, {"regex": "^(\\-)?1000([.][0]{1,3})?$|^(\\-)?\\d{1,3}$|^(\\-)?\\d{1,3}([.]\\d{1,3})$|^(\\-)?([.]\\d{1,3})$", "exceptionStackTrace": null, "matches": ["-.000", "-0.000", "-000.0", "-000", "-1000", "-1000.000", "1000.0", ".0", "0.0", "0", "1000", "-.0", "-0.0", "-0", "-1000.0"], "nonMatches": ["-.0000", "-.", "--.0", "-0.0000", "-0.", "-0000.0", "--0.0", "-0000", "-", "--0", "-1000.0.0", "-1000.0000", "-1000.", "--1000.0"]}, {"regex": "^\\$?\\-?([1-9]{1}[0-9]{0,2}(\\,\\d{3})*(\\.\\d{0,2})?|[1-9]{1}\\d{0,}(\\.\\d{0,2})?|0(\\.\\d{0,2})?|(\\.\\d{1,2}))$|^\\-?\\$?([1-9]{1}\\d{0,2}(\\,\\d{3})*(\\.\\d{0,2})?|[1-9]{1}\\d{0,}(\\.\\d{0,2})?|0(\\.\\d{0,2})?|(\\.\\d{1,2}))$|^\\(\\$?([1-9]{1}\\d{0,2}(\\,\\d{3})*(\\.\\d{0,2})?|[1-9]{1}\\d{0,}(\\.\\d{0,2})?|0(\\.\\d{0,2})?|(\\.\\d{1,2}))\\)$", "exceptionStackTrace": null, "matches": ["($.00)", "($0)", "($0.00)", "($0.)", "($10)", "($10.00)", "($10.)", "($100.0)", "($1.0)", "($110.0)", "($10,000)", "($10,000.00)", "($10,000.)", "($10,000,000.0)", "($100,000.0)", "($1,000.0)", "($110,000.0)", "(10,000.0)", "-$.00", "-$0", "-$0.00", "-$0.", "-$10", "-$10.00", "-$10.", "-$100.0", "-$1.0", "-$110.0", "-$10,000", "-$10,000.00", "-$10,000.", "-$10,000,000.0", "-$100,000.0", "-$1,000.0", "-$110,000.0", "$-.00", "$-0", "$-0.00", "$-0.", "$-10", "$-10.00", "$-10.", "$-100.0", "$-1.0", "$-110.0", "$-10,000", "$-10,000.00", "$-10,000.", "$-10,000,000.0", "$-100,000.0", "$-1,000.0", "$-110,000.0", "$10,000.0", "-10,000.0", "(.0)", "(0)", "(1)", ".0", "0", "1", "($.0)", "($0.0)", "($10.0)", "($10,000.0)", "-$.0", "-$0.0", "-$10.0", "-$10,000.0", "$-.0", "$-0.0", "$-10.0", "$-10,000.0"], "nonMatches": ["($.000)", "($.)", "($0.0.0)", "($0.000)", "($10.0.0)", "($10.000)", "($00.0)", "($10,000.0.0)", "($10,000.000)", "($10,0000.0)", "($10,00.0)", "($1000,000.0)", "($0,000.0)", "($00,000.0)", "($$10,000.0)", "-$.000", "-$.", "-$0.0.0", "-$0.000", "-$10.0.0", "-$10.000", "-$00.0", "-$10,000.0.0", "-$10,000.000", "-$10,0000.0", "-$10,00.0", "-$1000,000.0", "-$0,000.0", "-$00,000.0", "-$$10,000.0", "--$10,000.0", "$-.000", "$-.", "$-0.0.0", "$-0.000", "$-10.0.0", "$-10.000", "$-00.0", "$-10,000.0.0", "$-10,000.000", "$-10,0000.0", "$-10,00.0", "$-1000,000.0", "$-0,000.0", "$-00,000.0", "$--10,000.0", "$$-10,000.0"]}, {"regex": "^([a-z]{1,6}[ &#39;]){0,3}([&#201;&#200;&#202;&#203;&#220;&#219;&#206;&#212;&#196;&#207;&#214;&#196;&#197;&#199;A-Z]{1}[&#233;&#232;&#235;&#234;&#252;&#251;&#231;&#238;&#244;&#226;&#239;&#246;&#228;&#229;a-z]{2,}[- &#39;]){0,3}[A-Z]{1}[&#233;&#232;&#235;&#234;&#252;&#251;&#231;&#238;&#244;&#226;&#239;&#246;&#228;&#229;a-z]{2,}$", "exceptionStackTrace": null, "matches": ["a;;;;;Aa;", "a;;;;;A9;", "a;;;;;A8;", "a;;;;;A6;", "a;;;;;A5;", "a;;;;;A4;", "a;;;;;A3;", "a;;;;;A2;", "a;;;;;A1;", "a;;;;;A&;", "a;;;;;A#;", "a;;;;;;;;;;;;;;;;;A;;", "a;;;;;;;;;;;;;A;;", "a;A;;", "a;;;;9A;;", "a;;;;3A;;", "a;;;;-A;;", "a;;;;&A;;", "a;;;;#A;;", "a;;;; A;;", "a;;a;;A;;", "a;;9;;A;;", "a;;8;;A;;", "a;;6;;A;;", "a;;5;;A;;", "a;;4;;A;;", "a;;3;;A;;", "a;;2;;A;;", "a;;1;;A;;", "a;;&;;A;;", "a;;#;;A;;", "a;;;;;;A;;", "a;A;;;A;;", "a;9;;;A;;", "a;7;;;A;;", "a;6;;;A;;", "a;4;;;A;;", "a;3;;;A;;", "a;2;;;A;;", "a;1;;;A;;", "a;0;;;A;;", "a;&;;;A;;", "a;#;;;A;;", "a;a;a;;;;;A;;", ";;;;A;;", "a9;;;;A;;", "a3;;;;A;;", "a&;;;;A;;", "a#;;;;A;;", "a ;;;;A;;", "aaaaaa;;;;;A;;", ";;;;;A;;", "A;;", "a;;;;;A;;"], "nonMatches": ["a;;;;;A;", "a;;;;;A0;", "a;;;;;AA;;", "a;;;;;;;", "a;;;;0A;;", "a;;0;;A;;", "a;;;;A;;", "a;5;;;A;;", "a;a;a;a;;;;;A;;", "a0;;;;A;;", "aaaaaaa;;;;;A;;"]}, {"regex": "^[1]?[-\\.\\s]?(\\(\\d{3}\\)|\\d{3}){1}[-\\.\\s]?\\d{3}[-\\.\\s]?\\d{4}(\\s+|\\s*[-\\.x]{1}\\d{1,6})?$", "exceptionStackTrace": null, "matches": ["1.(000).000.0000 x000000", "1.(000).000.0000 .0", "1.(000).000.0000 -0", "1.(000).000.0000  x0", "1.(000).000.0000x0", "1.(000).000.0000  ", "1.(000).000.0000", "1.(000).0000000 ", "1.(000).000-0000 ", "1.(000).000 0000 ", "1.(000)000.0000 ", "1.(000)-000.0000 ", "1.(000) 000.0000 ", "1(000).000.0000 ", "1-(000).000.0000 ", "1 (000).000.0000 ", ".(000).000.0000 ", "0000000000", "(000)0000000", "1.000.000.0000 ", "1.(000).000.0000 x0", "1.(000).000.0000 "], "nonMatches": ["1.0000.000.0000 ", "1.00.000.0000 ", "1.(000).000.0000 x0000000", "1.(000).000.0000 x", "1.(000).000.0000 xx0", "1.(000).000.0000 0", "1.(000).000.0000 a0", "1.(000).000.00000 ", "1.(000).000.000 ", "1.(000).000..0000 ", "1.(000).0000.0000 ", "1.(000).00.0000 ", "1.(000)..000.0000 ", "1.(000)(000).000.0000 ", "1..000.0000 ", "1.(0000).000.0000 ", "1.(00).000.0000 ", "1..(000).000.0000 ", "11.(000).000.0000 "]}, {"regex": "^(([$])?((([0-9]{1,3},)+[0-9]{3})|[0-9]+)(\\.[0-9]{2})?)$", "exceptionStackTrace": null, "matches": ["$00.00", "$0,000", "$0,0,000.00", "$000.00", "$000,000.00", "0,000.00", "0", "0,000", "$0.00", "$0,000.00"], "nonMatches": ["$.00", "$0,000.00.00", "$0,000.000", "$0,000.0", "$0,0000.00", "$0,00.00", "$0000,000.00", "$,000.00", "$$0,000.00"]}, {"regex": "^*[]!#", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "nothing to repeat"}, "matches": []}, {"regex": "^(([0]\\d)|([1][0-2])|(\\d))[/](([0-2]\\d)|([3][0-1])|(\\d))[/][2][0]\\d{2}[,]\\s(([0]\\d)|([1][0-2])|(\\d))[:][0-5]\\d\\s[AP][M]", "exceptionStackTrace": null, "matches": ["00/00/2000, 00:00 AM", "0/00/2000, 00:00 PM", "10/00/2000, 00:00 PM", "00/0/2000, 00:00 PM", "00/30/2000, 00:00 PM", "00/00/2000, 0:00 PM", "00/00/2000, 10:00 PM", "00/00/2000, 00:00 PM"], "nonMatches": ["13/00/2000, 00:00 PM", "00/32/2000, 00:00 PM", "00/00/2000, 13:00 PM", "00/00/2000, 00:00 BM", "00/00/2000, 00:60 PM", "00/00/20000, 00:00 PM", "00/00/200, 00:00 PM"]}, {"regex": "gvrdgrtg", "exceptionStackTrace": null, "matches": ["gvrdgrtg"], "nonMatches": []}, {"regex": "(?=^[!@#$%\\^&*()_\\-+=\\[{\\]},;:<>|\\./?a-zA-Z\\d]{7,}$)(?=([!@#$%\\^&*()_\\-+=\\[{\\]},;:<>|\\./?a-zA-Z\\d]*\\W+){1,})[!@#$%\\^&*()_\\-+=\\[{\\]},;:<>|\\./?a-zA-Z\\d]*$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["}", "|", "{", "^", "]", "[", "@", "?", ">", "=", "<", ";", ":", "/", ".", "-", ",", "+", "*", ")", "(", "&", "%", "$", "#", "!", "eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", " ", "6", "_", "", "evil"]}, {"regex": "([0]{1}[6]{1}[-\\s]*[1-9]{1}[\\s]*([0-9]{1}[\\s]*){7})|([0]{1}[1-9]{1}[0-9]{1}[0-9]{1}[-\\s]*[1-9]{1}[\\s]*([0-9]{1}[\\s]*){5})|([0]{1}[1-9]{1}[0-9]{1}[-\\s]*[1-9]{1}[\\s]*([0-9]{1}[\\s]*){6})", "exceptionStackTrace": null, "matches": ["010-1 0 0 0 0 0 0 0 ", "010-1 0  0 0 0 0 0 ", "010-1 00 0 0 0 0 ", "010-1 00 0 0 0 0 0 ", "010-1  0 0 0 0 0 0 ", "010-10 0 0 0 0 0 ", "010-11 0 0 0 0 0 0 ", "010--1 0 0 0 0 0 0 ", "0101 0 0 0 0 0 0 ", "010 1 0 0 0 0 0 0 ", "0110-1 0 0 0 0 0 0 ", "0010-1 0 0 0 0 0 0 ", "0100-1 0 0 0 0 0 0 ", "0100-1 0  0 0 0 0 ", "0100-1 00 0 0 0 ", "0100-1 00 0 0 0 0 ", "0100-1  0 0 0 0 0 ", "0100-10 0 0 0 0 ", "0100-11 0 0 0 0 0 ", "0100--1 0 0 0 0 0 ", "01001 0 0 0 0 0 ", "0100 1 0 0 0 0 0 ", "00100-1 0 0 0 0 0 ", "06-1 0 0 0 0 0 0 0 0 ", "06-1 0  0 0 0 0 0 0 ", "06-1 00 0 0 0 0 0 ", "06-1 00 0 0 0 0 0 0 ", "06-1  0 0 0 0 0 0 0 ", "06-10 0 0 0 0 0 0 ", "06-11 0 0 0 0 0 0 0 ", "06--1 0 0 0 0 0 0 0 ", "061 0 0 0 0 0 0 0 ", "06 1 0 0 0 0 0 0 0 ", "066-1 0 0 0 0 0 0 0 ", "006-1 0 0 0 0 0 0 0 ", "010100 0 0 0 0 ", "0100100 0 0 0 ", "06100 0 0 0 0 0 ", "010-1 0 0 0 0 0 0 ", "0100-1 0 0 0 0 0 ", "06-1 0 0 0 0 0 0 0 "], "nonMatches": ["010-1  0 0 0 0 0 ", "010- 0 0 0 0 0 0 ", "010-0 0 0 0 0 0 0 ", "01-1 0 0 0 0 0 0 ", "00-1 0 0 0 0 0 0 ", "000-1 0 0 0 0 0 0 ", "10-1 0 0 0 0 0 0 ", "0100-1 0 0 0 0 ", "0100-1  0 0 0 0 ", "0100- 0 0 0 0 0 ", "0100-0 0 0 0 0 0 ", "01000-1 0 0 0 0 0 ", "010-1 0 0 0 0 0 ", "01100-1 0 0 0 0 0 ", "000-1 0 0 0 0 0 ", "0000-1 0 0 0 0 0 ", "100-1 0 0 0 0 0 ", "06-1 0 0 0 0 0 0 ", "06-1  0 0 0 0 0 0 ", "06- 0 0 0 0 0 0 0 ", "06-0 0 0 0 0 0 0 0 ", "0-1 0 0 0 0 0 0 0 ", "6-1 0 0 0 0 0 0 0 "]}, {"regex": "^[0-9]*[1-9]+$|^[1-9]+[0-9]*$", "exceptionStackTrace": null, "matches": ["100", "110", "011", "001", "1", "10", "01"], "nonMatches": ["0", "00"]}, {"regex": "^(?:m|M|man|Man|v|V|vrouw|Vrouw)$", "exceptionStackTrace": null, "matches": ["Vrouw", "vrouw", "V", "v", "Man", "man", "M", "m"], "nonMatches": []}, {"regex": "^0[6]{1}(\\-)?[^0\\D]{1}\\d{7}$", "exceptionStackTrace": null, "matches": ["0610000000", "06-10000000"], "nonMatches": ["06-100000000", "06-1000000", "06-110000000", "06-0000000", "06-a0000000", "06-_0000000", "06-A0000000", "06-00000000", "06--0000000", "06- 0000000", "06--10000000", "066-10000000", "0-10000000"]}, {"regex": "^(alfa|alpha|beta|b&#232;ta|chi|delta|epsilon|eta|&#232;ta|gamma|iota|kappa|lambda|mu|nu|omega|omicron|omikron|phi|pi|psi|rho|sigma|tau|theta|th&#232;ta|xi|ypsilon|zeta|z&#232;ta)$", "exceptionStackTrace": null, "matches": ["z&#232;ta", "zeta", "ypsilon", "xi", "th&#232;ta", "theta", "tau", "sigma", "rho", "psi", "pi", "phi", "omikron", "omicron", "omega", "nu", "mu", "lambda", "kappa", "iota", "gamma", "&#232;ta", "eta", "epsilon", "delta", "chi", "b&#232;ta", "beta", "alpha", "alfa"], "nonMatches": []}, {"regex": "^[0-9]{9}$", "exceptionStackTrace": null, "matches": ["000000000"], "nonMatches": ["0000000000", "00000000"]}, {"regex": "^NL\\d{2}[A-Z]{4}0\\d{9}$", "exceptionStackTrace": null, "matches": ["NL00AAAA0000000000"], "nonMatches": ["NL00AAAA00000000000", "NL00AAAA000000000", "NL00AAAAA0000000000", "NL00AAA0000000000", "NL000AAAA0000000000", "NL0AAAA0000000000"]}, {"regex": "rapidshare\\.com\\/files\\/(\\d+)\\/([^\\&#39;^\\&quot;^\\s^>^<^\\\\^\\/]+)", "exceptionStackTrace": null, "matches": ["rapidshare.com/files/0/.", "rapidshare.com/files/0/eVil", "rapidshare.com/files/0/EVIL", "rapidshare.com/files/0/ev_il", "rapidshare.com/files/0/ev il", "rapidshare.com/files/0/ev4il", "rapidshare.com/files/0/e", "rapidshare.com/files/0/6", "rapidshare.com/files/0/_", "rapidshare.com/files/00/evil", "rapidshare.com/files/0/evil"], "nonMatches": ["rapidshare.com/files/0/^", "rapidshare.com/files/0/\\", "rapidshare.com/files/0/>", "rapidshare.com/files/0/<", "rapidshare.com/files/0/;", "rapidshare.com/files/0//", "rapidshare.com/files/0/&", "rapidshare.com/files/0/#", "rapidshare.com/files/0/ ", "rapidshare.com/files/0/", "rapidshare.com/files//evil"]}, {"regex": "^\\+[0-9]{1,3}\\.[0-9]+\\.[0-9]+$", "exceptionStackTrace": null, "matches": ["+0.0.00", "+0.00.0", "+000.0.0", "+0.0.0"], "nonMatches": ["+0.0.", "+0..0", "+0000.0.0", "+.0.0"]}, {"regex": "&quot;.*?&quot;|&quot;.*$|&#39;.*?&#39;|&#39;.*$", "exceptionStackTrace": null, "matches": ["&#39;;", "&#39;&", "&#39;#", "&#39;eVil", "&#39;EVIL", "&#39;ev_il", "&#39;ev il", "&#39;ev4il", "&#39;e", "&#39; ", "&#39;6", "&#39;_", "&#39;;&#39;", "&#39;&&#39;", "&#39;#&#39;", "&#39;eVil&#39;", "&#39;EVIL&#39;", "&#39;ev_il&#39;", "&#39;ev il&#39;", "&#39;ev4il&#39;", "&#39;e&#39;", "&#39; &#39;", "&#39;6&#39;", "&#39;_&#39;", "&quot;;", "&quot;&", "&quot;#", "&quot;eVil", "&quot;EVIL", "&quot;ev_il", "&quot;ev il", "&quot;ev4il", "&quot;e", "&quot; ", "&quot;6", "&quot;_", "&quot;;&quot;", "&quot;&&quot;", "&quot;#&quot;", "&quot;eVil&quot;", "&quot;EVIL&quot;", "&quot;ev_il&quot;", "&quot;ev il&quot;", "&quot;ev4il&quot;", "&quot;e&quot;", "&quot; &quot;", "&quot;6&quot;", "&quot;_&quot;", "&#39;", "&#39;&#39;", "&quot;", "&quot;&quot;", "&#39;evil", "&#39;evil&#39;", "&quot;evil", "&quot;evil&quot;"], "nonMatches": []}, {"regex": "#^([a-z0-9+\\-.]+):([/]{0,2}([a-z0-9\\-._~%!\\$&&#39;\\(\\)\\*+,;=:]+@)?([\\[\\]a-z0-9\\-._~%!\\$&&#39;\\(\\)\\*+,;=:]+(:[0-9]+)?))([a-z0-9\\-._~%!\\$&&#39;\\(\\)\\*+,;=:@/]*)(\\?[\\?/a-z0-9\\-._~%!\\$&&#39;\\(\\)\\*+,;=:@]+)?(\\#[a-z0-9\\-._~%!\\$&&#39;\\(\\)\\*+,;=:@/\\?]+)?#i", "exceptionStackTrace": null, "matches": [], "nonMatches": ["#evil:/evil@evil:0evil?evil#evil#evil#i", "#evil:/evil@evil:0evil?evil#i", "#evil:/evil@evil:0evil?evil#~#i", "#evil:/evil@evil:0evil?evil#]#i", "#evil:/evil@evil:0evil?evil#[#i", "#evil:/evil@evil:0evil?evil#@#i", "#evil:/evil@evil:0evil?evil#?#i", "#evil:/evil@evil:0evil?evil#=#i", "#evil:/evil@evil:0evil?evil#;#i", "#evil:/evil@evil:0evil?evil#:#i", "#evil:/evil@evil:0evil?evil#/#i", "#evil:/evil@evil:0evil?evil#.#i", "#evil:/evil@evil:0evil?evil#-#i", "#evil:/evil@evil:0evil?evil#,#i", "#evil:/evil@evil:0evil?evil#+#i", "#evil:/evil@evil:0evil?evil#*#i", "#evil:/evil@evil:0evil?evil#)#i", "#evil:/evil@evil:0evil?evil#(#i", "#evil:/evil@evil:0evil?evil#&#i", "#evil:/evil@evil:0evil?evil#%#i", "#evil:/evil@evil:0evil?evil#$#i", "#evil:/evil@evil:0evil?evil###i", "#evil:/evil@evil:0evil?evil#!#i", "#evil:/evil@evil:0evil?evil#eVil#i", "#evil:/evil@evil:0evil?evil#EVIL#i", "#evil:/evil@evil:0evil?evil#ev_il#i", "#evil:/evil@evil:0evil?evil#ev il#i", "#evil:/evil@evil:0evil?evil#ev4il#i", "#evil:/evil@evil:0evil?evil#e#i", "#evil:/evil@evil:0evil?evil# #i", "#evil:/evil@evil:0evil?evil#6#i", "#evil:/evil@evil:0evil?evil#_#i", "#evil:/evil@evil:0evil?evil##i", "#evil:/evil@evil:0evil?evil?evil#evil#i", "#evil:/evil@evil:0evil#evil#i", "#evil:/evil@evil:0evil?~#evil#i", "#evil:/evil@evil:0evil?]#evil#i", "#evil:/evil@evil:0evil?[#evil#i", "#evil:/evil@evil:0evil?@#evil#i", "#evil:/evil@evil:0evil??#evil#i", "#evil:/evil@evil:0evil?=#evil#i", "#evil:/evil@evil:0evil?;#evil#i", "#evil:/evil@evil:0evil?:#evil#i", "#evil:/evil@evil:0evil?/#evil#i", "#evil:/evil@evil:0evil?.#evil#i", "#evil:/evil@evil:0evil?-#evil#i", "#evil:/evil@evil:0evil?,#evil#i", "#evil:/evil@evil:0evil?+#evil#i", "#evil:/evil@evil:0evil?*#evil#i", "#evil:/evil@evil:0evil?)#evil#i", "#evil:/evil@evil:0evil?(#evil#i", "#evil:/evil@evil:0evil?&#evil#i", "#evil:/evil@evil:0evil?%#evil#i", "#evil:/evil@evil:0evil?$#evil#i", "#evil:/evil@evil:0evil?##evil#i", "#evil:/evil@evil:0evil?!#evil#i", "#evil:/evil@evil:0evil?eVil#evil#i", "#evil:/evil@evil:0evil?EVIL#evil#i", "#evil:/evil@evil:0evil?ev_il#evil#i", "#evil:/evil@evil:0evil?ev il#evil#i", "#evil:/evil@evil:0evil?ev4il#evil#i", "#evil:/evil@evil:0evil?e#evil#i", "#evil:/evil@evil:0evil? #evil#i", "#evil:/evil@evil:0evil?6#evil#i", "#evil:/evil@evil:0evil?_#evil#i", "#evil:/evil@evil:0evil?#evil#i", "#evil:/evil@evil:0~?evil#evil#i", "#evil:/evil@evil:0]?evil#evil#i", "#evil:/evil@evil:0[?evil#evil#i", "#evil:/evil@evil:0@?evil#evil#i", "#evil:/evil@evil:0??evil#evil#i", "#evil:/evil@evil:0=?evil#evil#i", "#evil:/evil@evil:0;?evil#evil#i", "#evil:/evil@evil:0:?evil#evil#i", "#evil:/evil@evil:0/?evil#evil#i", "#evil:/evil@evil:0.?evil#evil#i", "#evil:/evil@evil:0-?evil#evil#i", "#evil:/evil@evil:0,?evil#evil#i", "#evil:/evil@evil:0+?evil#evil#i", "#evil:/evil@evil:0*?evil#evil#i", "#evil:/evil@evil:0)?evil#evil#i", "#evil:/evil@evil:0(?evil#evil#i", "#evil:/evil@evil:0&?evil#evil#i", "#evil:/evil@evil:0%?evil#evil#i", "#evil:/evil@evil:0$?evil#evil#i", "#evil:/evil@evil:0#?evil#evil#i", "#evil:/evil@evil:0!?evil#evil#i", "#evil:/evil@evil:0eVil?evil#evil#i", "#evil:/evil@evil:0EVIL?evil#evil#i", "#evil:/evil@evil:0ev_il?evil#evil#i", "#evil:/evil@evil:0ev il?evil#evil#i", "#evil:/evil@evil:0ev4il?evil#evil#i", "#evil:/evil@evil:0e?evil#evil#i", "#evil:/evil@evil:0 ?evil#evil#i", "#evil:/evil@evil:06?evil#evil#i", "#evil:/evil@evil:0_?evil#evil#i", "#evil:/evil@evil:0?evil#evil#i", "#evil:/evil@evil:0:0evil?evil#evil#i", "#evil:/evil@evilevil?evil#evil#i", "#evil:/evil@evil:00evil?evil#evil#i", "#evil:/evil@evil:evil?evil#evil#i", "#evil:/evil@~:0evil?evil#evil#i", "#evil:/evil@]:0evil?evil#evil#i", "#evil:/evil@[:0evil?evil#evil#i", "#evil:/evil@@:0evil?evil#evil#i", "#evil:/evil@?:0evil?evil#evil#i", "#evil:/evil@=:0evil?evil#evil#i", "#evil:/evil@;:0evil?evil#evil#i", "#evil:/evil@::0evil?evil#evil#i", "#evil:/evil@/:0evil?evil#evil#i", "#evil:/evil@.:0evil?evil#evil#i", "#evil:/evil@-:0evil?evil#evil#i", "#evil:/evil@,:0evil?evil#evil#i", "#evil:/evil@+:0evil?evil#evil#i", "#evil:/evil@*:0evil?evil#evil#i", "#evil:/evil@):0evil?evil#evil#i", "#evil:/evil@(:0evil?evil#evil#i", "#evil:/evil@&:0evil?evil#evil#i", "#evil:/evil@%:0evil?evil#evil#i", "#evil:/evil@$:0evil?evil#evil#i", "#evil:/evil@#:0evil?evil#evil#i", "#evil:/evil@!:0evil?evil#evil#i", "#evil:/evil@eVil:0evil?evil#evil#i", "#evil:/evil@EVIL:0evil?evil#evil#i", "#evil:/evil@ev_il:0evil?evil#evil#i", "#evil:/evil@ev il:0evil?evil#evil#i", "#evil:/evil@ev4il:0evil?evil#evil#i", "#evil:/evil@e:0evil?evil#evil#i", "#evil:/evil@ :0evil?evil#evil#i", "#evil:/evil@6:0evil?evil#evil#i", "#evil:/evil@_:0evil?evil#evil#i", "#evil:/evil@:0evil?evil#evil#i", "#evil:/evil@evil@evil:0evil?evil#evil#i", "#evil:/evil:0evil?evil#evil#i", "#evil:/~@evil:0evil?evil#evil#i", "#evil:/]@evil:0evil?evil#evil#i", "#evil:/[@evil:0evil?evil#evil#i", "#evil:/@@evil:0evil?evil#evil#i", "#evil:/?@evil:0evil?evil#evil#i", "#evil:/=@evil:0evil?evil#evil#i", "#evil:/;@evil:0evil?evil#evil#i", "#evil:/:@evil:0evil?evil#evil#i", "#evil://@evil:0evil?evil#evil#i", "#evil:/.@evil:0evil?evil#evil#i", "#evil:/-@evil:0evil?evil#evil#i", "#evil:/,@evil:0evil?evil#evil#i", "#evil:/+@evil:0evil?evil#evil#i", "#evil:/*@evil:0evil?evil#evil#i", "#evil:/)@evil:0evil?evil#evil#i", "#evil:/(@evil:0evil?evil#evil#i", "#evil:/&@evil:0evil?evil#evil#i", "#evil:/%@evil:0evil?evil#evil#i", "#evil:/$@evil:0evil?evil#evil#i", "#evil:/#@evil:0evil?evil#evil#i", "#evil:/!@evil:0evil?evil#evil#i", "#evil:/eVil@evil:0evil?evil#evil#i", "#evil:/EVIL@evil:0evil?evil#evil#i", "#evil:/ev_il@evil:0evil?evil#evil#i", "#evil:/ev il@evil:0evil?evil#evil#i", "#evil:/ev4il@evil:0evil?evil#evil#i", "#evil:/e@evil:0evil?evil#evil#i", "#evil:/ @evil:0evil?evil#evil#i", "#evil:/6@evil:0evil?evil#evil#i", "#evil:/_@evil:0evil?evil#evil#i", "#evil:/@evil:0evil?evil#evil#i", "#evil:///evil@evil:0evil?evil#evil#i", "#evil://evil@evil:0evil?evil#evil#i", "#evil:evil@evil:0evil?evil#evil#i", "#~:/evil@evil:0evil?evil#evil#i", "#]:/evil@evil:0evil?evil#evil#i", "#[:/evil@evil:0evil?evil#evil#i", "#@:/evil@evil:0evil?evil#evil#i", "#?:/evil@evil:0evil?evil#evil#i", "#=:/evil@evil:0evil?evil#evil#i", "#;:/evil@evil:0evil?evil#evil#i", "#::/evil@evil:0evil?evil#evil#i", "#/:/evil@evil:0evil?evil#evil#i", "#.:/evil@evil:0evil?evil#evil#i", "#-:/evil@evil:0evil?evil#evil#i", "#,:/evil@evil:0evil?evil#evil#i", "#+:/evil@evil:0evil?evil#evil#i", "#*:/evil@evil:0evil?evil#evil#i", "#):/evil@evil:0evil?evil#evil#i", "#(:/evil@evil:0evil?evil#evil#i", "#&:/evil@evil:0evil?evil#evil#i", "#%:/evil@evil:0evil?evil#evil#i", "#$:/evil@evil:0evil?evil#evil#i", "##:/evil@evil:0evil?evil#evil#i", "#!:/evil@evil:0evil?evil#evil#i", "#eVil:/evil@evil:0evil?evil#evil#i", "#EVIL:/evil@evil:0evil?evil#evil#i", "#ev_il:/evil@evil:0evil?evil#evil#i", "#ev il:/evil@evil:0evil?evil#evil#i", "#ev4il:/evil@evil:0evil?evil#evil#i", "#e:/evil@evil:0evil?evil#evil#i", "# :/evil@evil:0evil?evil#evil#i", "#6:/evil@evil:0evil?evil#evil#i", "#_:/evil@evil:0evil?evil#evil#i", "#:/evil@evil:0evil?evil#evil#i", "#evil:evil#i", "#evil:/evil@evil:0evil?evil#evil#i"]}, {"regex": "Akku hp Pavilion dv6000 Series,Kompatibler Ersatz akku f&#252;r Li-ion hp Pavilion dv6000 Series Laptop Akkus", "exceptionStackTrace": null, "matches": ["Akku hp Pavilion dv6000 Series,Kompatibler Ersatz akku f&#252;r Li-ion hp Pavilion dv6000 Series Laptop Akkus"], "nonMatches": []}, {"regex": "^[a-zA-Z]([a-zA-Z0-9])*([\\.][a-zA-Z]([a-zA-Z0-9])*)*$", "exceptionStackTrace": null, "matches": ["A0.A0.A0", "A0", "A0.A00", "A0.A", "A0.Aa", "A0.AA", "A0.a0", "A00.A0", "A.A0", "Aa.A0", "AA.A0", "a0.A0", "A", "A0.A0"], "nonMatches": []}, {"regex": "(^\\-?[0-9]*\\.?[0-9]+$)", "exceptionStackTrace": null, "matches": ["-0.00", "-00", "-00.0", "-.0", "0.0", "0", "-0.0"], "nonMatches": ["-0.", "-0..0", "--0.0"]}, {"regex": "[^A-Za-z0-9 ]", "exceptionStackTrace": null, "matches": ["_", "!"], "nonMatches": ["a", "A", "0", " "]}, {"regex": "frsdgfvrdg", "exceptionStackTrace": null, "matches": ["frsdgfvrdg"], "nonMatches": []}, {"regex": "(?=([\\W]*[\\w][\\W]*\\b))\\s(?=\\d\\.|\\d\\b)", "exceptionStackTrace": null, "matches": [], "nonMatches": [" "]}, {"regex": "((\\/\\*(\\r|\\n|(.(?!\\*/)))*)\\s\\*\\/|\\/\\/.*$)([\\r\\n\\s]+)?", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\r"}, "matches": [], "nonMatches": []}, {"regex": "^([A-Z|a-z|&amp;]{3}\\d{2}((0[1-9]|1[012])(0[1-9]|1\\d|2[0-8])|(0[13456789]|1[012])(29|30)|(0[13578]|1[02])31)|([02468][048]|[13579][26])0229)(\\w{2})([A|a|0-9]{1})$|^([A-Z|a-z]{4}\\d{2}((0[1-9]|1[012])(0[1-9]|1\\d|2[0-8])|(0[13456789]|1[012])(29|30)|(0[13578]|1[02])31)|([02468][048]|[13579][26])0229)((\\w{2})([A|a|0-9]{1})){0,3}$", "exceptionStackTrace": null, "matches": ["||||001031aa|", "||||000731aa|", "||||000531aa|", "||||000331aa|", "||||000131aa|", "||||001129aa|", "||||001029aa|", "||||000829aa|", "||||000729aa|", "||||000629aa|", "||||000529aa|", "||||000429aa|", "||||000329aa|", "||||001101aa|", "||||001001aa|", "||||000129aa|", "||||000101aa|aa|aa|", "||||000101aaa", "||||000101aaA", "||||000101aa0", "||||000101_a|", "||||000101Aa|", "||||0001010a|", "|||000101aa|", "a|||000101aa|", "A|||000101aa|", "920229aa|", "760229aa|", "560229aa|", "360229aa|", "160229aa|", "840229aa|", "800229aa|", "680229aa|", "480229aa|", "280229aa|", "080229aa|", ";;;001031aa|", ";;;000731aa|", ";;;000531aa|", ";;;000331aa|", ";;;000131aa|", ";;;001129aa|", ";;;001029aa|", ";;;000829aa|", ";;;000729aa|", ";;;000629aa|", ";;;000529aa|", ";;;000429aa|", ";;;000329aa|", ";;;001101aa|", ";;;001001aa|", ";;;000129aa|", ";;;000101aaa", ";;;000101aaA", ";;;000101aa0", ";;;000101_a|", ";;;000101Aa|", ";;;0001010a|", "|;;000101aa|", "p;;000101aa|", "m;;000101aa|", "b;;000101aa|", "a;;000101aa|", "A;;000101aa|", "&;;000101aa|", "960229", "880229", "||||001231", "||||000831", "||||001229", "||||000930", "||||000929", "||||001201", "||||000120", "||||000110", "||||000101", "||||001231aa|", "||||000831aa|", "||||001229aa|", "||||000930aa|", "||||000929aa|", "||||001201aa|", "||||000120aa|", "||||000110aa|", "||||000101aa|", "960229aa|", "880229aa|", ";;;001231aa|", ";;;000831aa|", ";;;001229aa|", ";;;000930aa|", ";;;000929aa|", ";;;001201aa|", ";;;000120aa|", ";;;000110aa|", ";;;000101aa|"], "nonMatches": ["||||001131aa|", "||||000031aa|", "||||001329aa|", "||||000029aa|", "||||001301aa|", "||||000101aa|aa|aa|aa|", "||||000101aa||", "||||000101aa", "||||000101aab", "||||000101aaB", "||||000101aaa|", "||||000101a|", "||||000100aa|", "||||000001aa|", "||||0000101aa|", "||||00101aa|", "|||||000101aa|", "900229aa|", "060229aa|", "810229aa|", "180229aa|", ";;;001131aa|", ";;;000031aa|", ";;;001329aa|", ";;;000029aa|", ";;;001301aa|", ";;;000101aa||", ";;;000101aa", ";;;000101aab", ";;;000101aaB", ";;;000101aaa|", ";;;000101a|", ";;;000100aa|", ";;;000001aa|", ";;;0000101aa|", ";;;00101aa|", ";;;;000101aa|", ";;000101aa|"]}, {"regex": "^([A-Z&#209;\\x26]{3,4}([0-9]{2})(0[1-9]|1[0-2])(0[1-9]|1[0-9]|2[0-9]|3[0-1])[A-Z|\\d]{3})$", "exceptionStackTrace": null, "matches": ["&&&000101A||", "&&&0001010||", "&&&0000101|||", "&&&&000101|||", "A&&000101|||", ";&&000101|||", "9&&000101|||", "2&&000101|||", "0&&000101|||", "#&&000101|||", "&&&001001|||", "&&&000130|||", "&&&000120|||", "&&&000110|||", "&&&000101|||"], "nonMatches": ["&&&001301|||", "&&&000132|||", "&&&000101||||", "&&&000101||", "&&&000100|||", "&&&000001|||", "&&&00101|||", "&&&&&000101|||", "&&000101|||", "1&&000101|||"]}, {"regex": "^([A-Z&#209;\\x26]{3,4}([0-9]{2})(0[1-9]|1[0-2])(0[1-9]|1[0-9]|2[0-9]|3[0-1])[A-Z|\\d]{3})$", "exceptionStackTrace": null, "matches": ["&&&000101A||", "&&&0001010||", "&&&0000101|||", "&&&&000101|||", "A&&000101|||", ";&&000101|||", "9&&000101|||", "2&&000101|||", "0&&000101|||", "#&&000101|||", "&&&001001|||", "&&&000130|||", "&&&000120|||", "&&&000110|||", "&&&000101|||"], "nonMatches": ["&&&001301|||", "&&&000132|||", "&&&000101||||", "&&&000101||", "&&&000100|||", "&&&000001|||", "&&&00101|||", "&&&&&000101|||", "&&000101|||", "1&&000101|||"]}, {"regex": "^(?:(([+]|00)92)|0)((3[0-6][0-9]))(\\d{7})$", "exceptionStackTrace": null, "matches": ["03000000000", "00923000000000", "+923000000000"], "nonMatches": ["+9230000000000", "+92300000000", "+923700000000"]}, {"regex": "([(]?\\d{3}[)]?(-| |.)?\\d{3}(-| |.)?\\d{4})", "exceptionStackTrace": null, "matches": ["(000)A000-0000", "(000)0000-0000", "(000))000-0000", "(000)(000-0000", "(000)-000A0000", "(000)-00000000", "(000)-000)0000", "(000)-000(0000", "(000)-000-00000", "(000)-0000000", "(000)000-0000", "(000-000-0000", "(0000)-000-0000", "((000)-000-0000", "000)-000-0000", "0000000000", "(000)a000-0000", "(000) 000-0000", "(000)-000a0000", "(000)-000 0000", "(000)-000-0000"], "nonMatches": ["(000)-000-000", "(000)-000--0000", "(000)-0000-0000", "(000)-00-0000", "(000)--000-0000", "(000))-000-0000", "(00)-000-0000"]}, {"regex": "generic viagra", "exceptionStackTrace": null, "matches": ["generic viagra"], "nonMatches": []}, {"regex": "^[89]\\d{7}$", "exceptionStackTrace": null, "matches": ["80000000", "90000000"], "nonMatches": ["900000000", "9000000", "00000000"]}, {"regex": "^(\\d+\\*)+(\\d)+$", "exceptionStackTrace": null, "matches": ["0*00", "0*0*0", "00*0", "0*0"], "nonMatches": ["0*", "0", "*0"]}, {"regex": "^((\\\\\\\\[a-zA-Z0-9-]+\\\\[a-zA-Z0-9`~!@#$%^&(){}&#39;._-]+([ ]+[a-zA-Z0-9`~!@#$%^&(){}&#39;._-]+)*)|([a-zA-Z]:))(\\\\[^ \\\\/:*?&quot;&quot;<>|]+([ ]+[^ \\\\/:*?&quot;&quot;<>|]+)*)*\\\\?$", "exceptionStackTrace": null, "matches": ["a:\\evil evil\\", "\\\\evil\\evil evil\\evil evil", "\\\\evil\\evil evil\\evil evil\\evil evil\\", "\\\\evil\\evil evil\\", "\\\\evil\\evil evil\\evil evil evil\\", "\\\\evil\\evil evil\\evil\\", "\\\\evil\\evil evil\\evil ~\\", "\\\\evil\\evil evil\\evil }\\", "\\\\evil\\evil evil\\evil {\\", "\\\\evil\\evil evil\\evil `\\", "\\\\evil\\evil evil\\evil ^\\", "\\\\evil\\evil evil\\evil @\\", "\\\\evil\\evil evil\\evil .\\", "\\\\evil\\evil evil\\evil -\\", "\\\\evil\\evil evil\\evil )\\", "\\\\evil\\evil evil\\evil (\\", "\\\\evil\\evil evil\\evil %\\", "\\\\evil\\evil evil\\evil $\\", "\\\\evil\\evil evil\\evil #\\", "\\\\evil\\evil evil\\evil !\\", "\\\\evil\\evil evil\\evil eVil\\", "\\\\evil\\evil evil\\evil EVIL\\", "\\\\evil\\evil evil\\evil ev_il\\", "\\\\evil\\evil evil\\evil ev il\\", "\\\\evil\\evil evil\\evil ev4il\\", "\\\\evil\\evil evil\\evil e\\", "\\\\evil\\evil evil\\evil 6\\", "\\\\evil\\evil evil\\evil _\\", "\\\\evil\\evil evil\\evil  evil\\", "\\\\evil\\evil evil\\evilevil\\", "\\\\evil\\evil evil\\~ evil\\", "\\\\evil\\evil evil\\} evil\\", "\\\\evil\\evil evil\\{ evil\\", "\\\\evil\\evil evil\\` evil\\", "\\\\evil\\evil evil\\^ evil\\", "\\\\evil\\evil evil\\@ evil\\", "\\\\evil\\evil evil\\. evil\\", "\\\\evil\\evil evil\\- evil\\", "\\\\evil\\evil evil\\) evil\\", "\\\\evil\\evil evil\\( evil\\", "\\\\evil\\evil evil\\% evil\\", "\\\\evil\\evil evil\\$ evil\\", "\\\\evil\\evil evil\\# evil\\", "\\\\evil\\evil evil\\! evil\\", "\\\\evil\\evil evil\\eVil evil\\", "\\\\evil\\evil evil\\EVIL evil\\", "\\\\evil\\evil evil\\ev_il evil\\", "\\\\evil\\evil evil\\ev il evil\\", "\\\\evil\\evil evil\\ev4il evil\\", "\\\\evil\\evil evil\\e evil\\", "\\\\evil\\evil evil\\6 evil\\", "\\\\evil\\evil evil\\_ evil\\", "\\\\evil\\evil evil evil\\evil evil\\", "\\\\evil\\evil\\evil evil\\", "\\\\evil\\evil ~\\evil evil\\", "\\\\evil\\evil }\\evil evil\\", "\\\\evil\\evil {\\evil evil\\", "\\\\evil\\evil `\\evil evil\\", "\\\\evil\\evil ^\\evil evil\\", "\\\\evil\\evil @\\evil evil\\", "\\\\evil\\evil ;\\evil evil\\", "\\\\evil\\evil .\\evil evil\\", "\\\\evil\\evil -\\evil evil\\", "\\\\evil\\evil )\\evil evil\\", "\\\\evil\\evil (\\evil evil\\", "\\\\evil\\evil &\\evil evil\\", "\\\\evil\\evil %\\evil evil\\", "\\\\evil\\evil $\\evil evil\\", "\\\\evil\\evil #\\evil evil\\", "\\\\evil\\evil !\\evil evil\\", "\\\\evil\\evil eVil\\evil evil\\", "\\\\evil\\evil EVIL\\evil evil\\", "\\\\evil\\evil ev_il\\evil evil\\", "\\\\evil\\evil ev il\\evil evil\\", "\\\\evil\\evil ev4il\\evil evil\\", "\\\\evil\\evil e\\evil evil\\", "\\\\evil\\evil 6\\evil evil\\", "\\\\evil\\evil _\\evil evil\\", "\\\\evil\\evil  evil\\evil evil\\", "\\\\evil\\evilevil\\evil evil\\", "\\\\evil\\~ evil\\evil evil\\", "\\\\evil\\} evil\\evil evil\\", "\\\\evil\\{ evil\\evil evil\\", "\\\\evil\\` evil\\evil evil\\", "\\\\evil\\^ evil\\evil evil\\", "\\\\evil\\@ evil\\evil evil\\", "\\\\evil\\; evil\\evil evil\\", "\\\\evil\\. evil\\evil evil\\", "\\\\evil\\- evil\\evil evil\\", "\\\\evil\\) evil\\evil evil\\", "\\\\evil\\( evil\\evil evil\\", "\\\\evil\\& evil\\evil evil\\", "\\\\evil\\% evil\\evil evil\\", "\\\\evil\\$ evil\\evil evil\\", "\\\\evil\\# evil\\evil evil\\", "\\\\evil\\! evil\\evil evil\\", "\\\\evil\\eVil evil\\evil evil\\", "\\\\evil\\EVIL evil\\evil evil\\", "\\\\evil\\ev_il evil\\evil evil\\", "\\\\evil\\ev il evil\\evil evil\\", "\\\\evil\\ev4il evil\\evil evil\\", "\\\\evil\\e evil\\evil evil\\", "\\\\evil\\6 evil\\evil evil\\", "\\\\evil\\_ evil\\evil evil\\", "\\\\-\\evil evil\\evil evil\\", "\\\\eVil\\evil evil\\evil evil\\", "\\\\EVIL\\evil evil\\evil evil\\", "\\\\ev4il\\evil evil\\evil evil\\", "\\\\e\\evil evil\\evil evil\\", "\\\\6\\evil evil\\evil evil\\", "A:", "\\\\evil\\evil", "A:\\evil evil\\", "\\\\evil\\evil evil\\evil evil\\"], "nonMatches": ["\\\\evil\\evil evil\\evil evil\\\\", "\\\\evil\\evil evil\\evil |\\", "\\\\evil\\evil evil\\evil \\\\", "\\\\evil\\evil evil\\evil ?\\", "\\\\evil\\evil evil\\evil >\\", "\\\\evil\\evil evil\\evil <\\", "\\\\evil\\evil evil\\evil ;\\", "\\\\evil\\evil evil\\evil :\\", "\\\\evil\\evil evil\\evil /\\", "\\\\evil\\evil evil\\evil *\\", "\\\\evil\\evil evil\\evil &\\", "\\\\evil\\evil evil\\evil  \\", "\\\\evil\\evil evil\\evil \\", "\\\\evil\\evil evil\\| evil\\", "\\\\evil\\evil evil\\\\ evil\\", "\\\\evil\\evil evil\\? evil\\", "\\\\evil\\evil evil\\> evil\\", "\\\\evil\\evil evil\\< evil\\", "\\\\evil\\evil evil\\; evil\\", "\\\\evil\\evil evil\\: evil\\", "\\\\evil\\evil evil\\/ evil\\", "\\\\evil\\evil evil\\* evil\\", "\\\\evil\\evil evil\\& evil\\", "\\\\evil\\evil evil\\  evil\\", "\\\\evil\\evil evil\\ evil\\", "\\\\evil\\evil |\\evil evil\\", "\\\\evil\\evil \\\\evil evil\\", "\\\\evil\\evil ?\\evil evil\\", "\\\\evil\\evil >\\evil evil\\", "\\\\evil\\evil <\\evil evil\\", "\\\\evil\\evil :\\evil evil\\", "\\\\evil\\evil /\\evil evil\\", "\\\\evil\\evil *\\evil evil\\", "\\\\evil\\evil  \\evil evil\\", "\\\\evil\\evil \\evil evil\\", "\\\\evil\\| evil\\evil evil\\", "\\\\evil\\\\ evil\\evil evil\\", "\\\\evil\\? evil\\evil evil\\", "\\\\evil\\> evil\\evil evil\\", "\\\\evil\\< evil\\evil evil\\", "\\\\evil\\: evil\\evil evil\\", "\\\\evil\\/ evil\\evil evil\\", "\\\\evil\\* evil\\evil evil\\", "\\\\evil\\  evil\\evil evil\\", "\\\\evil\\ evil\\evil evil\\", "\\\\~\\evil evil\\evil evil\\", "\\\\}\\evil evil\\evil evil\\", "\\\\|\\evil evil\\evil evil\\", "\\\\{\\evil evil\\evil evil\\", "\\\\`\\evil evil\\evil evil\\", "\\\\^\\evil evil\\evil evil\\", "\\\\\\\\evil evil\\evil evil\\", "\\\\@\\evil evil\\evil evil\\", "\\\\?\\evil evil\\evil evil\\", "\\\\>\\evil evil\\evil evil\\", "\\\\<\\evil evil\\evil evil\\", "\\\\;\\evil evil\\evil evil\\", "\\\\:\\evil evil\\evil evil\\", "\\\\/\\evil evil\\evil evil\\", "\\\\.\\evil evil\\evil evil\\", "\\\\*\\evil evil\\evil evil\\", "\\\\)\\evil evil\\evil evil\\", "\\\\(\\evil evil\\evil evil\\", "\\\\&\\evil evil\\evil evil\\", "\\\\%\\evil evil\\evil evil\\", "\\\\$\\evil evil\\evil evil\\", "\\\\#\\evil evil\\evil evil\\", "\\\\!\\evil evil\\evil evil\\", "\\\\ev_il\\evil evil\\evil evil\\", "\\\\ev il\\evil evil\\evil evil\\", "\\\\ \\evil evil\\evil evil\\", "\\\\_\\evil evil\\evil evil\\", "\\\\\\evil evil\\evil evil\\"]}, {"regex": "^[^ \\\\/:*?&quot;&quot;<>|]+([ ]+[^ \\\\/:*?&quot;&quot;<>|]+)*$", "exceptionStackTrace": null, "matches": ["evil evil evil", "evil eVil", "evil EVIL", "evil ev_il", "evil ev il", "evil ev4il", "evil e", "evil 6", "evil _", "evil  evil", "evilevil", "eVil evil", "EVIL evil", "ev_il evil", "ev il evil", "ev4il evil", "e evil", "6 evil", "_ evil", "evil", "evil evil"], "nonMatches": ["evil |", "evil \\", "evil ?", "evil >", "evil <", "evil ;", "evil :", "evil /", "evil *", "evil &", "evil  ", "evil ", "| evil", "\\ evil", "? evil", "> evil", "< evil", "; evil", ": evil", "/ evil", "* evil", "& evil", "  evil", " evil"]}, {"regex": "online jobs", "exceptionStackTrace": null, "matches": ["online jobs"], "nonMatches": []}, {"regex": "^[\\w\\s]+$\n^[[A-Z]\\s]$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["evil\nA ]", "eVil\n[ ]", "EVIL\n[ ]", "ev_il\n[ ]", "ev il\n[ ]", "ev4il\n[ ]", "e\n[ ]", " \n[ ]", "6\n[ ]", "_\n[ ]", "\n[ ]", "evil\n[ ]"]}, {"regex": "^(?:(?:0?[13578]|1[02])|(?:0?[469]|11)(?!\\/31)|(?:0?2)(?:(?!\\/3[01]|\\/29\\/(?:(?:0[^48]|[13579][^26]|[2468][^048])00|(?:\\d{2}(?:0[^48]|[13579][^26]|[2468][^048]))))))\\/(?:0?[1-9]|[12][0-9]|3[01])\\/\\d{4}$", "exceptionStackTrace": null, "matches": ["2/01/0000", "06/01/0000", "04/01/0000", "9/01/0000", "10/01/0000", "08/30/0000", "08/10/0000", "08/1/0000", "07/01/0000", "05/01/0000", "03/01/0000", "01/01/0000", "8/01/0000", "2/1/0000", "11/1/0000", "9/1/0000", "12/1/0000", "8/31/0000", "8/20/0000", "8/1/0000", "02/01/0000", "11/01/0000", "09/01/0000", "12/01/0000", "08/31/0000", "08/20/0000", "08/01/0000"], "nonMatches": ["002/01/0000", "009/01/0000", "08/32/0000", "08/01/00000", "08/01/000", "08/00/0000", "08/001/0000", "00/01/0000", "008/01/0000"]}, {"regex": "drivertoolkit crack", "exceptionStackTrace": null, "matches": ["drivertoolkit crack"], "nonMatches": []}, {"regex": "drivertoolkit crack", "exceptionStackTrace": null, "matches": ["drivertoolkit crack"], "nonMatches": []}, {"regex": "^(\\d{5}-\\d{4}|\\d{5})$", "exceptionStackTrace": null, "matches": ["00000", "00000-0000"], "nonMatches": ["000000", "0000", "00000-00000", "00000-000", "000000-0000", "0000-0000"]}, {"regex": "^(([0-9]{2,4})([-\\s\\/]{0,1})([0-9]{4,8}))?$", "exceptionStackTrace": null, "matches": ["00/00000000", "000000", "00-0000", "00 0000", "0000/0000", "", "00/0000"], "nonMatches": ["00/000000/0000", "00/000000000", "00/000", "00//0000", "00000/0000", "0/0000"]}, {"regex": "^3[234689][0-9]$", "exceptionStackTrace": null, "matches": ["380", "360", "340", "330", "320", "390"], "nonMatches": ["300"]}, {"regex": "^[0-9]{4}-(((0[13578]|(10|12))-(0[1-9]|[1-2][0-9]|3[0-1]))|(02-(0[1-9]|[1-2][0-9]))|((0[469]|11)-(0[1-9]|[1-2][0-9]|30)))$", "exceptionStackTrace": null, "matches": ["0000-06-01", "0000-04-01", "0000-07-01", "0000-05-01", "0000-03-01", "0000-01-01", "0000-11-01", "0000-09-30", "0000-09-10", "0000-09-01", "0000-02-10", "0000-02-01", "0000-12-01", "0000-10-01", "0000-08-30", "0000-08-10", "0000-08-01"], "nonMatches": ["0000-09-00", "0000-02-00", "0000-08-32", "0000-08-00", "0000-00-01", "00000-08-01", "000-08-01"]}, {"regex": "^(((\\d{4}-((0[13578]-|1[02]-)(0[1-9]|[12]\\d|3[01])|(0[13456789]-|1[012]-)(0[1-9]|[12]\\d|30)|02-(0[1-9]|1\\d|2[0-8])))|((([02468][048]|[13579][26])00|\\d{2}([13579][26]|0[48]|[2468][048])))-02-29)){0,10}$", "exceptionStackTrace": null, "matches": ["0084-02-29", "0080-02-29", "0068-02-29", "0048-02-29", "0028-02-29", "0004-02-29", "0092-02-29", "0076-02-29", "0056-02-29", "0036-02-29", "0016-02-29", "9200-02-29", "7600-02-29", "5600-02-29", "3600-02-29", "1600-02-29", "8400-02-29", "8000-02-29", "6800-02-29", "4800-02-29", "2800-02-29", "0800-02-29", "0000-02-29", "0000-09-10", "0000-06-01", "0000-04-01", "0000-11-01", "0000-10-01", "0000-08-30", "0000-08-10", "0000-08-010000-08-010000-08-010000-08-010000-08-010000-08-010000-08-010000-08-010000-08-010000-08-01", "0000-07-01", "0000-05-01", "0000-03-01", "0000-01-01", "", "0088-02-29", "0008-02-29", "0096-02-29", "9600-02-29", "8800-02-29", "0000-02-20", "0000-02-10", "0000-02-01", "0000-09-30", "0000-09-20", "0000-09-01", "0000-12-01", "0000-08-31", "0000-08-20", "0000-08-01"], "nonMatches": ["0081-02-29", "0090-02-29", "0006-02-29", "00096-02-29", "096-02-29", "9000-02-29", "0600-02-29", "8100-02-29", "1800-02-29", "0000-02-00", "0000-13-01", "0000-09-00", "0000-08-32", "0000-08-010000-08-010000-08-010000-08-010000-08-010000-08-010000-08-010000-08-010000-08-010000-08-010000-08-01", "0000-08-00", "0000-00-01", "00000-08-01", "000-08-01"]}, {"regex": "^(((h|H)(t|T))(t|T)(p|P)((s|S)?)\\:\\/\\/)?((www|WWW)+\\.)+(([0-9]{1,3}){3}[0-9]{1,3}\\.|([\\w!~*&#39;()-]+\\.)*([\\w^-][\\w-]{0,61})?[\\w]\\.[a-z]{2,6})(:[0-9]{1,4})?((\\/*)|(\\/+[\\w!~*&#39;().;?:@&=+$,%#-]+)+\\/*)$", "exceptionStackTrace": null, "matches": ["https://www.evil.--a.aaaaaa:0/", "https://www.evil.--_.aa:0/", "https://www.evil.--A.aa:0/", "https://www.evil.--0.aa:0/", "https://www.evil.----a.aa:0/", "https://www.evil.a.aa:0/", "https://www.evil.--------------------------------------------------------------a.aa:0/", "https://www.evil.-a.aa:0/", "https://www.evil.-aa.aa:0/", "https://www.evil.-_a.aa:0/", "https://www.evil.-Aa.aa:0/", "https://www.evil.-0a.aa:0/", "https://www.evil.a-a.aa:0/", "https://www.evil._-a.aa:0/", "https://www.evil.^-a.aa:0/", "https://www.evil.A-a.aa:0/", "https://www.evil.0-a.aa:0/", "https://www.evil.evil.--a.aa:0/", "https://www.--a.aa:0/", "https://www.~.--a.aa:0/", "https://www.;.--a.aa:0/", "https://www.-.--a.aa:0/", "https://www.*.--a.aa:0/", "https://www.).--a.aa:0/", "https://www.(.--a.aa:0/", "https://www.&.--a.aa:0/", "https://www.#.--a.aa:0/", "https://www.!.--a.aa:0/", "https://www.eVil.--a.aa:0/", "https://www.EVIL.--a.aa:0/", "https://www.ev_il.--a.aa:0/", "https://www.ev4il.--a.aa:0/", "https://www.e.--a.aa:0/", "https://www.6.--a.aa:0/", "https://www._.--a.aa:0/", "https://www.0000.:0/evil//", "https://www.0000.:0/evil", "https://www.0000.:0/evil/evil/", "https://www.0000.:0/~/", "https://www.0000.:0/@/", "https://www.0000.:0/?/", "https://www.0000.:0/=/", "https://www.0000.:0/;/", "https://www.0000.:0/:/", "https://www.0000.:0///", "https://www.0000.:0/./", "https://www.0000.:0/-/", "https://www.0000.:0/,/", "https://www.0000.:0/+/", "https://www.0000.:0/*/", "https://www.0000.:0/)/", "https://www.0000.:0/(/", "https://www.0000.:0/&/", "https://www.0000.:0/%/", "https://www.0000.:0/$/", "https://www.0000.:0/#/", "https://www.0000.:0/!/", "https://www.0000.:0/eVil/", "https://www.0000.:0/EVIL/", "https://www.0000.:0/ev_il/", "https://www.0000.:0/ev4il/", "https://www.0000.:0/e/", "https://www.0000.:0/6/", "https://www.0000.:0/_/", "https://www.0000.:0//evil/", "https://www.0000.:0//", "https://www.0000.:0", "https://www.0000./", "https://www.0000.:0000/", "https://www.00000.:0/", "https://www.0000000.:0/", "https://www.000000.:0/", "https://www.www.0000.:0/", "https://wwwwww.0000.:0/", "www.0000.:0/", "http://www.0000.:0/", "WWW.0000.", "www.a.aa", "www.0000./evil", "www.0000.", "Https://www.0000.:0/", "hTtps://www.0000.:0/", "htTps://www.0000.:0/", "httPs://www.0000.:0/", "httpS://www.0000.:0/", "https://WWW.0000.:0/", "https://www.evil.--a.aa:0/", "https://www.0000.:0/evil/", "https://www.0000.:0/"], "nonMatches": ["https://www.evil.--a.aaaaaaa:0/", "https://www.evil.--a.a:0/", "https://www.evil.---------------------------------------------------------------a.aa:0/", "https://www.^.--a.aa:0/", "https://www.@.--a.aa:0/", "https://www.?.--a.aa:0/", "https://www.=.--a.aa:0/", "https://www.:.--a.aa:0/", "https://www./.--a.aa:0/", "https://www...--a.aa:0/", "https://www.,.--a.aa:0/", "https://www.+.--a.aa:0/", "https://www.%.--a.aa:0/", "https://www.$.--a.aa:0/", "https://www.ev il.--a.aa:0/", "https://www. .--a.aa:0/", "https://www..--a.aa:0/", "https://www.0000.:0/^/", "https://www.0000.:0/ev il/", "https://www.0000.:0/ /", "https://www.0000.:0evil/", "https://www.0000.:0:0/", "https://www.0000.:00000/", "https://www.0000.:/", "https://www.000.:0/", "https://0000.:0/", "https://.0000.:0/", "https://https://www.0000.:0/", "httpss://www.0000.:0/"]}, {"regex": "(?!^[0-9 ]*$)(?!^[a-zA-Z ]*$)^([a-zA-Z0-9 ]{6,15})$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["                ", "               ", "     ", "a     ", "A     ", "0     ", "      "]}, {"regex": "^((http|HTTP|https|HTTPS|ftp|FTP?)\\:\\/\\/)?((www|WWW)+\\.)+(([0-9]{1,3}){3}[0-9]{1,3}\\.|([\\w!~*&#39;()-]+\\.)*([\\w^-][\\w-]{0,61})?[\\w]\\.[a-z]{2,6})(:[0-9]{1,4})?((\\/*)|(\\/+[\\w!~*&#39;().;?:@&=+$,%#-]+)+\\/*)$", "exceptionStackTrace": null, "matches": ["FT://www.0000.:0/", "http://www.evil.--a.aaaaaa:0/", "http://www.evil.--_.aa:0/", "http://www.evil.--A.aa:0/", "http://www.evil.--0.aa:0/", "http://www.evil.----a.aa:0/", "http://www.evil.a.aa:0/", "http://www.evil.--------------------------------------------------------------a.aa:0/", "http://www.evil.-a.aa:0/", "http://www.evil.-aa.aa:0/", "http://www.evil.-_a.aa:0/", "http://www.evil.-Aa.aa:0/", "http://www.evil.-0a.aa:0/", "http://www.evil.a-a.aa:0/", "http://www.evil._-a.aa:0/", "http://www.evil.^-a.aa:0/", "http://www.evil.A-a.aa:0/", "http://www.evil.0-a.aa:0/", "http://www.evil.evil.--a.aa:0/", "http://www.--a.aa:0/", "http://www.~.--a.aa:0/", "http://www.;.--a.aa:0/", "http://www.-.--a.aa:0/", "http://www.*.--a.aa:0/", "http://www.).--a.aa:0/", "http://www.(.--a.aa:0/", "http://www.&.--a.aa:0/", "http://www.#.--a.aa:0/", "http://www.!.--a.aa:0/", "http://www.eVil.--a.aa:0/", "http://www.EVIL.--a.aa:0/", "http://www.ev_il.--a.aa:0/", "http://www.ev4il.--a.aa:0/", "http://www.e.--a.aa:0/", "http://www.6.--a.aa:0/", "http://www._.--a.aa:0/", "http://www.0000.:0/evil//", "http://www.0000.:0/evil", "http://www.0000.:0/evil/evil/", "http://www.0000.:0/~/", "http://www.0000.:0/@/", "http://www.0000.:0/?/", "http://www.0000.:0/=/", "http://www.0000.:0/;/", "http://www.0000.:0/:/", "http://www.0000.:0///", "http://www.0000.:0/./", "http://www.0000.:0/-/", "http://www.0000.:0/,/", "http://www.0000.:0/+/", "http://www.0000.:0/*/", "http://www.0000.:0/)/", "http://www.0000.:0/(/", "http://www.0000.:0/&/", "http://www.0000.:0/%/", "http://www.0000.:0/$/", "http://www.0000.:0/#/", "http://www.0000.:0/!/", "http://www.0000.:0/eVil/", "http://www.0000.:0/EVIL/", "http://www.0000.:0/ev_il/", "http://www.0000.:0/ev4il/", "http://www.0000.:0/e/", "http://www.0000.:0/6/", "http://www.0000.:0/_/", "http://www.0000.:0//evil/", "http://www.0000.:0//", "http://www.0000.:0", "http://www.0000./", "http://www.0000.:0000/", "http://www.00000.:0/", "http://www.0000000.:0/", "http://www.000000.:0/", "http://www.www.0000.:0/", "http://wwwwww.0000.:0/", "www.0000.:0/", "WWW.0000.", "www.a.aa", "www.0000./evil", "www.0000.", "FTP://www.0000.:0/", "ftp://www.0000.:0/", "HTTPS://www.0000.:0/", "https://www.0000.:0/", "HTTP://www.0000.:0/", "http://WWW.0000.:0/", "http://www.evil.--a.aa:0/", "http://www.0000.:0/evil/", "http://www.0000.:0/"], "nonMatches": ["FTPP://www.0000.:0/", "http://www.evil.--a.aaaaaaa:0/", "http://www.evil.--a.a:0/", "http://www.evil.---------------------------------------------------------------a.aa:0/", "http://www.^.--a.aa:0/", "http://www.@.--a.aa:0/", "http://www.?.--a.aa:0/", "http://www.=.--a.aa:0/", "http://www.:.--a.aa:0/", "http://www./.--a.aa:0/", "http://www...--a.aa:0/", "http://www.,.--a.aa:0/", "http://www.+.--a.aa:0/", "http://www.%.--a.aa:0/", "http://www.$.--a.aa:0/", "http://www.ev il.--a.aa:0/", "http://www. .--a.aa:0/", "http://www..--a.aa:0/", "http://www.0000.:0/^/", "http://www.0000.:0/ev il/", "http://www.0000.:0/ /", "http://www.0000.:0evil/", "http://www.0000.:0:0/", "http://www.0000.:00000/", "http://www.0000.:/", "http://www.000.:0/", "http://0000.:0/", "http://.0000.:0/", "http://http://www.0000.:0/"]}, {"regex": "^1[34][0-9][0-9]\\/((1[0-2])|([1-9]))\\/(([12][0-9])|(3[01])|[1-9])$", "exceptionStackTrace": null, "matches": ["1400/10/30", "1400/10/10", "1300/10/20", "1400/1/20", "1400/10/1", "1400/10/31", "1400/10/20"], "nonMatches": ["1400/0/20", "1400/10/0", "1400/10/32", "1400/10/00", "1400/13/20", "1000/10/20"]}, {"regex": "[^!~/&gt;&lt;\\|/#%():;{}`_-]", "exceptionStackTrace": null, "matches": ["A", "0", " ", "a"], "nonMatches": ["~", "}", "|", "{", "t", "l", "g", "`", "_", ";", ":", "/", "-", ")", "(", "&", "%", "#", "!"]}, {"regex": "dcsefcsef", "exceptionStackTrace": null, "matches": ["dcsefcsef"], "nonMatches": []}, {"regex": " (mailto\\:|(news|(ht|f)tp(s?))\\://)(([^[:space:]]+)|([^[:space:]]+)( #([^#]+)#)?) ", "exceptionStackTrace": null, "matches": [" mailto:b] #evil# #evil# ", " mailto:b] #]# ", " mailto:b] #[# ", " mailto:b] #:# ", " mailto:b] #/# ", " mailto:b] ### ", " mailto:b] #eVil# ", " mailto:b] #EVIL# ", " mailto:b] #ev_il# ", " mailto:b] #ev il# ", " mailto:b] #ev4il# ", " mailto:b] #e# ", " mailto:b] # # ", " mailto:b] #6# ", " mailto:b] #_# ", " mailto:b] ## ", " mailto:b]] #evil# ", " mailto:]] #evil# ", " mailto:A] #evil# ", " mailto:0] #evil# ", " mailto:/] #evil# ", " mailto:#] #evil# ", " mailto: ] #evil# ", " mailto:b]] ", " mailto:]] ", " mailto:A] ", " mailto:0] ", " mailto:/] ", " mailto:#] ", " mailto: ] ", " ftp://b] ", " http://b] ", " ftps://b] ", " https://b] ", " news://b] ", " mailto:b] #evil# ", " mailto:b] "], "nonMatches": [" httpss://b] ", " mailto:b #evil# ", " mailto:s] #evil# ", " mailto:p] #evil# ", " mailto:e] #evil# ", " mailto:c] #evil# ", " mailto:a] #evil# ", " mailto:[] #evil# ", " mailto::] #evil# ", " mailto:b ", " mailto:s] ", " mailto:p] ", " mailto:e] ", " mailto:c] ", " mailto:a] ", " mailto:[] ", " mailto::] "]}, {"regex": "^\\s*(?<Last>[-A-Za-z ]+)[.](?<First>[-A-Za-z ]+)(?:[.](?<Middle>[-A-Za-z ]+))?(?:[.](?<Ordinal>[IVX]+))?(?:[.](?<Number>\\d{10}))\\s*$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<L"}, "matches": []}, {"regex": "^([1-9]{0,1})([0-9]{1})((\\.[0-9]{0,1})([0-9]{1})|(\\,[0-9]{0,1})([0-9]{1}))?$", "exceptionStackTrace": null, "matches": ["10,0", "10", "10.0", "1.00", "0.00", "0", "10,00", "10.00"], "nonMatches": ["10,000", "10.00.00", "10.000", "100.00", "110.00", "00.00"]}, {"regex": "^([012346789][0-9]{4})$", "exceptionStackTrace": null, "matches": ["80000", "70000", "60000", "40000", "30000", "20000", "10000", "00000", "90000"], "nonMatches": ["900000", "9000", "50000"]}, {"regex": "^([012346789][0-9]{4})$", "exceptionStackTrace": null, "matches": ["80000", "70000", "60000", "40000", "30000", "20000", "10000", "00000", "90000"], "nonMatches": ["900000", "9000", "50000"]}, {"regex": "jquery\\-(\\d|\\.)*\\.min\\.js", "exceptionStackTrace": null, "matches": ["jquery-00.min.js", "jquery-.min.js", "jquery-..min.js", "jquery-0.min.js"], "nonMatches": []}, {"regex": "(\\*\\*)(.+)(\\*\\*)", "exceptionStackTrace": null, "matches": ["*****", "**eVil**", "**EVIL**", "**ev_il**", "**ev il**", "**ev4il**", "**e**", "** **", "**6**", "**_**", "**evil**"], "nonMatches": ["****"]}, {"regex": "(\\/\\/)(.+)(\\/\\/)", "exceptionStackTrace": null, "matches": ["/////", "//eVil//", "//EVIL//", "//ev_il//", "//ev il//", "//ev4il//", "//e//", "// //", "//6//", "//_//", "//evil//"], "nonMatches": ["////"]}, {"regex": "(\\_\\_)(.+)(\\_\\_)", "exceptionStackTrace": null, "matches": ["__eVil__", "__EVIL__", "__ev_il__", "__ev il__", "__ev4il__", "__e__", "__ __", "__6__", "_____", "__evil__"], "nonMatches": ["____"]}, {"regex": "([A-Z]:\\\\[^/:\\*\\?<>\\|]+\\.\\w{2,6})|(\\\\{2}[^/:\\*\\?<>\\|]+\\.\\w{2,6})", "exceptionStackTrace": null, "matches": ["\\\\evil.aaaaaaa", "\\\\evil.aaaaaa", "\\\\evil._a", "\\\\evil.Aa", "\\\\evil.0a", "\\\\\\.aa", "\\\\..aa", "\\\\eVil.aa", "\\\\EVIL.aa", "\\\\ev_il.aa", "\\\\ev il.aa", "\\\\ev4il.aa", "\\\\e.aa", "\\\\ .aa", "\\\\6.aa", "\\\\_.aa", "\\\\\\evil.aa", "A:\\evil.aaaaaaa", "A:\\evil.aaaaaa", "A:\\evil._a", "A:\\evil.Aa", "A:\\evil.0a", "A:\\\\.aa", "A:\\..aa", "A:\\eVil.aa", "A:\\EVIL.aa", "A:\\ev_il.aa", "A:\\ev il.aa", "A:\\ev4il.aa", "A:\\e.aa", "A:\\ .aa", "A:\\6.aa", "A:\\_.aa", "\\\\evil.aa", "A:\\evil.aa"], "nonMatches": ["\\\\evil.a", "\\\\|.aa", "\\\\?.aa", "\\\\>.aa", "\\\\<.aa", "\\\\:.aa", "\\\\/.aa", "\\\\*.aa", "\\\\.aa", "\\evil.aa", "A:\\evil.a", "A:\\|.aa", "A:\\?.aa", "A:\\>.aa", "A:\\<.aa", "A:\\:.aa", "A:\\/.aa", "A:\\*.aa", "A:\\.aa"]}, {"regex": "(?<key>\\w+?)\\s*?=\\s*?(?<value>\\w+)\\s*", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<k"}, "matches": []}, {"regex": "(?<key>[\\w+\\s-:]*?)\\s*?=\\s*?(?<value>[\\w+\\s-]*)\\s*", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<k"}, "matches": []}, {"regex": "^(\\+(1\\-)?\\d{1,3})?(\\s|\\-)?(\\s|\\-)?((\\(\\d{2}\\)|\\d{2})(\\s|\\-)?\\d{4}|(\\(\\d{3}\\)|\\d{3})(\\s|\\-)?\\d{3})(\\s|\\-)?\\d{4}(\\s)?(x|ext|ext.)?(\\d{1,6})?,?(\\d{1,6})?,?(\\d{1,6})?$", "exceptionStackTrace": null, "matches": ["+1-0  (000)000 0000 x0,0,0", "+1-0  (00) 0000 0000 extA0,0,0", "+1-0  (00) 0000 0000 ext00,0,0", "+1-0  (00) 0000 0000 ext-0,0,0", "+1-0  (00) 0000 0000 ext,0,0,0", "+1-0  (00) 0000 0000 ext+0,0,0", "+1-0  (00) 0000 0000 ext)0,0,0", "+1-0  (00) 0000 0000 ext(0,0,0", "+1-0  (00) 0000 0000 ext 0,0,0", "+1-0  (00) 0000 0000 x0,0,00", "+1-0  (00) 0000 0000 x0,0,000000", "+1-0  (00) 0000 0000 x0,0,", "+1-0  (00) 0000 0000 x0,00", "+1-0  (00) 0000 0000 x0,00,0", "+1-0  (00) 0000 0000 x0,000000,0", "+1-0  (00) 0000 0000 x0,,0", "+1-0  (00) 0000 0000 x00,0", "+1-0  (00) 0000 0000 x00,0,0", "+1-0  (00) 0000 0000 x000000,0,0", "+1-0  (00) 0000 0000 x,0,0", "+1-0  (00) 0000 0000 0,0,0", "+1-0  (00) 0000 0000x0,0,0", "+1-0  (00) 00000000 x0,0,0", "+1-0  (00)0000 0000 x0,0,0", "+1-0 (00) 0000 0000 x0,0,0", "  (00) 0000 0000 x0,0,0", "+1-000  (00) 0000 0000 x0,0,0", "+0  (00) 0000 0000 x0,0,0", "(000)0000000", "0000000000", "(00)00000000", "+1-0- (00) 0000 0000 x0,0,0", "+1-0 -(00) 0000 0000 x0,0,0", "+1-0  000 000 0000 x0,0,0", "+1-0  (000)-000 0000 x0,0,0", "+1-0  (000) 000 0000 x0,0,0", "+1-0  00 0000 0000 x0,0,0", "+1-0  (00)-0000 0000 x0,0,0", "+1-0  (00) 0000-0000 x0,0,0", "+1-0  (00) 0000 0000 exta0,0,0", "+1-0  (00) 0000 0000 ext0,0,0", "+1-0  (00) 0000 0000 x0,0,0"], "nonMatches": ["+1-0  0000 000 0000 x0,0,0", "+1-0  00 000 0000 x0,0,0", "+1-0  (000) 00 0000 x0,0,0", "+1-0  (000)  000 0000 x0,0,0", "+1-0  (0000) 000 0000 x0,0,0", "+1-0  000 0000 0000 x0,0,0", "+1-0  0 0000 0000 x0,0,0", "+1-0  (00) 0000 0000 x0,0,0000000", "+1-0  (00) 0000 0000 x0,0,,0", "+1-0  (00) 0000 0000 x0,0000000,0", "+1-0  (00) 0000 0000 x0,,0,0", "+1-0  (00) 0000 0000 x0000000,0,0", "+1-0  (00) 0000 0000 xx0,0,0", "+1-0  (00) 0000 0000  x0,0,0", "+1-0  (00) 0000 00000 x0,0,0", "+1-0  (00) 0000 000 x0,0,0", "+1-0  (00) 0000  0000 x0,0,0", "+1-0  (00) 00000 0000 x0,0,0", "+1-0  (00) 000 0000 x0,0,0", "+1-0  (00)  0000 0000 x0,0,0", "+1-0  (000) 0000 0000 x0,0,0", "+1-0  (0) 0000 0000 x0,0,0", "+1-0   (00) 0000 0000 x0,0,0", "+1-0+1-0  (00) 0000 0000 x0,0,0", "+1-0000  (00) 0000 0000 x0,0,0", "+1-  (00) 0000 0000 x0,0,0", "+1-1-0  (00) 0000 0000 x0,0,0"]}, {"regex": "^({{(\\s+)?v)[\\.-:_](\\w+(\\s+)?}})$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (bad range): Invalid range: .-:"}, "matches": [], "nonMatches": []}, {"regex": "^(?(&quot;&quot;)(&quot;&quot;[^&quot;&quot;]+?&quot;&quot;(_+)?@)|(([0-9a-z]((\\.(?!\\.))|[-!#\\$%&&#39;\\*\\+/=\\?\\^`\\{\\}\\|~\\w])*)(?<=[0-9a-z])(_+)?@))(?(\\[)(\\[(\\d{1,3}\\.){3}\\d{1,3}\\])|(([0-9a-z][-\\w]*[0-9a-z]*\\.)+[a-z0-9]{2,17}))$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character in group name '&quot;&quot;'"}, "matches": []}, {"regex": "^(([^<>()[\\]\\.,;:\\s@\\&quot;]+(\\.[^<>()[\\]\\.,;:\\s@\\&quot;]+)*)|(\\;&quot;.+\\&quot;))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$", "exceptionStackTrace": null, "matches": [";&quot;]&quot;@[0.0.0.0]", ";&quot;[&quot;@[0.0.0.0]", ";&quot;@&quot;@[0.0.0.0]", ";&quot;>&quot;@[0.0.0.0]", ";&quot;<&quot;@[0.0.0.0]", ";&quot;;&quot;@[0.0.0.0]", ";&quot;:&quot;@[0.0.0.0]", ";&quot;.&quot;@[0.0.0.0]", ";&quot;-&quot;@[0.0.0.0]", ";&quot;,&quot;@[0.0.0.0]", ";&quot;)&quot;@[0.0.0.0]", ";&quot;(&quot;@[0.0.0.0]", ";&quot;&&quot;@[0.0.0.0]", ";&quot;eVil&quot;@[0.0.0.0]", ";&quot;EVIL&quot;@[0.0.0.0]", ";&quot;ev_il&quot;@[0.0.0.0]", ";&quot;ev il&quot;@[0.0.0.0]", ";&quot;ev4il&quot;@[0.0.0.0]", ";&quot;e&quot;@[0.0.0.0]", ";&quot; &quot;@[0.0.0.0]", ";&quot;6&quot;@[0.0.0.0]", ";&quot;_&quot;@[0.0.0.0]", "evil.evil@evil.aA", "evil.evil@evil.evil.AA", "evil.evil@-.AA", "evil.evil@eVil.AA", "evil.evil@EVIL.AA", "evil.evil@ev4il.AA", "evil.evil@e.AA", "evil.evil@6.AA", "evil.evil@[0.0.0.000]", "evil.evil@[0.0.000.0]", "evil.evil@[0.000.0.0]", "evil.evil@[000.0.0.0]", "evil.evil.evil@[0.0.0.0]", "evil.-@[0.0.0.0]", "evil.eVil@[0.0.0.0]", "evil.EVIL@[0.0.0.0]", "evil.ev_il@[0.0.0.0]", "evil.ev4il@[0.0.0.0]", "evil.e@[0.0.0.0]", "evil.6@[0.0.0.0]", "evil._@[0.0.0.0]", "-.evil@[0.0.0.0]", "eVil.evil@[0.0.0.0]", "EVIL.evil@[0.0.0.0]", "ev_il.evil@[0.0.0.0]", "ev4il.evil@[0.0.0.0]", "e.evil@[0.0.0.0]", "6.evil@[0.0.0.0]", "_.evil@[0.0.0.0]", "evil@evil.AA", "evil@[0.0.0.0]", ";&quot;evil&quot;@[0.0.0.0]", "evil.evil@evil.AA", "evil.evil@[0.0.0.0]"], "nonMatches": [";&quot;&quot;@[0.0.0.0]", "evil.evil@evil.A", "evil.evil@AA", "evil.evil@].AA", "evil.evil@[.AA", "evil.evil@@.AA", "evil.evil@>.AA", "evil.evil@<.AA", "evil.evil@;.AA", "evil.evil@:.AA", "evil.evil@..AA", "evil.evil@,.AA", "evil.evil@).AA", "evil.evil@(.AA", "evil.evil@&.AA", "evil.evil@ev_il.AA", "evil.evil@ev il.AA", "evil.evil@ .AA", "evil.evil@_.AA", "evil.evil@.AA", "evil.evil@[0.0.0.0000]", "evil.evil@[0.0.0.]", "evil.evil@[0.0.0000.0]", "evil.evil@[0.0..0]", "evil.evil@[0.0000.0.0]", "evil.evil@[0..0.0]", "evil.evil@[0000.0.0.0]", "evil.evil@[.0.0.0]", "evil.]@[0.0.0.0]", "evil.[@[0.0.0.0]", "evil.@@[0.0.0.0]", "evil.>@[0.0.0.0]", "evil.<@[0.0.0.0]", "evil.;@[0.0.0.0]", "evil.:@[0.0.0.0]", "evil..@[0.0.0.0]", "evil.,@[0.0.0.0]", "evil.)@[0.0.0.0]", "evil.(@[0.0.0.0]", "evil.&@[0.0.0.0]", "evil.ev il@[0.0.0.0]", "evil. @[0.0.0.0]", "evil.@[0.0.0.0]", "].evil@[0.0.0.0]", "[.evil@[0.0.0.0]", "@.evil@[0.0.0.0]", ">.evil@[0.0.0.0]", "<.evil@[0.0.0.0]", ";.evil@[0.0.0.0]", ":.evil@[0.0.0.0]", "..evil@[0.0.0.0]", ",.evil@[0.0.0.0]", ").evil@[0.0.0.0]", "(.evil@[0.0.0.0]", "&.evil@[0.0.0.0]", "ev il.evil@[0.0.0.0]", " .evil@[0.0.0.0]", ".evil@[0.0.0.0]"]}, {"regex": "^\\w+([-+.&#39;]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*", "exceptionStackTrace": null, "matches": ["evil;evil@evil.evil.evil.eVil", "evil;evil@evil.evil.evil.EVIL", "evil;evil@evil.evil.evil.ev_il", "evil;evil@evil.evil.evil.ev il", "evil;evil@evil.evil.evil.ev4il", "evil;evil@evil.evil.evil.e", "evil;evil@evil.evil.evil. ", "evil;evil@evil.evil.evil.6", "evil;evil@evil.evil.evil._", "evil;evil@evil.evil.evil.", "evil;evil@evil.evil.evil-evil", "evil;evil@evil.evil.eVil.evil", "evil;evil@evil.evil.EVIL.evil", "evil;evil@evil.evil.ev_il.evil", "evil;evil@evil.evil.ev il.evil", "evil;evil@evil.evil.ev4il.evil", "evil;evil@evil.evil.e.evil", "evil;evil@evil.evil. .evil", "evil;evil@evil.evil.6.evil", "evil;evil@evil.evil._.evil", "evil;evil@evil.evil..evil", "evil;evil@evil.evil.evil.evil.evil", "evil;evil@evil.evil.evil", "evil;evil@evil.eVil.evil.evil", "evil;evil@evil.EVIL.evil.evil", "evil;evil@evil.ev_il.evil.evil", "evil;evil@evil.ev il.evil.evil", "evil;evil@evil.ev4il.evil.evil", "evil;evil@evil.e.evil.evil", "evil;evil@evil.6.evil.evil", "evil;evil@evil._.evil.evil", "evil;evil@evil-evil.evil.evil", "evil;evil@eVil.evil.evil.evil", "evil;evil@EVIL.evil.evil.evil", "evil;evil@ev_il.evil.evil.evil", "evil;evil@ev4il.evil.evil.evil", "evil;evil@e.evil.evil.evil", "evil;evil@6.evil.evil.evil", "evil;evil@_.evil.evil.evil", "evil;evil;evil@evil.evil.evil.evil", "evil@evil.evil.evil.evil", "evil;eVil@evil.evil.evil.evil", "evil;EVIL@evil.evil.evil.evil", "evil;ev_il@evil.evil.evil.evil", "evil;ev4il@evil.evil.evil.evil", "evil;e@evil.evil.evil.evil", "evil;6@evil.evil.evil.evil", "evil;_@evil.evil.evil.evil", "evil9evil@evil.evil.evil.evil", "evil3evil@evil.evil.evil.evil", "evil0evil@evil.evil.evil.evil", "evil.evil@evil.evil.evil.evil", "evil-evil@evil.evil.evil.evil", "evil+evil@evil.evil.evil.evil", "evil&evil@evil.evil.evil.evil", "evil#evil@evil.evil.evil.evil", "eVil;evil@evil.evil.evil.evil", "EVIL;evil@evil.evil.evil.evil", "ev_il;evil@evil.evil.evil.evil", "ev4il;evil@evil.evil.evil.evil", "e;evil@evil.evil.evil.evil", "6;evil@evil.evil.evil.evil", "_;evil@evil.evil.evil.evil", "evil@evil.evil", "evil;evil@evil.evil.evil.evil"], "nonMatches": ["evil;evil@evil. .evil.evil", "evil;evil@evil..evil.evil", "evil;evil@ev il.evil.evil.evil", "evil;evil@ .evil.evil.evil", "evil;evil@.evil.evil.evil", "evil;ev il@evil.evil.evil.evil", "evil; @evil.evil.evil.evil", "evil;@evil.evil.evil.evil", "ev il;evil@evil.evil.evil.evil", " ;evil@evil.evil.evil.evil", ";evil@evil.evil.evil.evil"]}, {"regex": "^([987]{1})(\\d{1})(\\d{8})", "exceptionStackTrace": null, "matches": ["70000000000", "77000000000", "9000000000", "8000000000", "7000000000"], "nonMatches": ["700000000", "000000000", "0000000000"]}, {"regex": "^&lt;a\\s+href\\s*=\\s*&quot;http:\\/\\/([^&quot;]*)&quot;([^&gt;]*)&gt;(.*?(?=&lt;\\/a&gt;))&lt;\\/a&gt;$", "exceptionStackTrace": null, "matches": ["&lt;a href = &quot;http://evil&quot;evil&gt;=&lt;/a&gt;", "&lt;a href = &quot;http://evil&quot;evil&gt;;&lt;/a&gt;", "&lt;a href = &quot;http://evil&quot;evil&gt;:&lt;/a&gt;", "&lt;a href = &quot;http://evil&quot;evil&gt;/&lt;/a&gt;", "&lt;a href = &quot;http://evil&quot;evil&gt;&&lt;/a&gt;", "&lt;a href = &quot;http://evil&quot;evil&gt;eVil&lt;/a&gt;", "&lt;a href = &quot;http://evil&quot;evil&gt;EVIL&lt;/a&gt;", "&lt;a href = &quot;http://evil&quot;evil&gt;ev_il&lt;/a&gt;", "&lt;a href = &quot;http://evil&quot;evil&gt;ev il&lt;/a&gt;", "&lt;a href = &quot;http://evil&quot;evil&gt;ev4il&lt;/a&gt;", "&lt;a href = &quot;http://evil&quot;evil&gt;e&lt;/a&gt;", "&lt;a href = &quot;http://evil&quot;evil&gt; &lt;/a&gt;", "&lt;a href = &quot;http://evil&quot;evil&gt;6&lt;/a&gt;", "&lt;a href = &quot;http://evil&quot;evil&gt;_&lt;/a&gt;", "&lt;a href = &quot;http://evil&quot;evil&gt;&lt;/a&gt;", "&lt;a href = &quot;http://evil&quot;=&gt;evil&lt;/a&gt;", "&lt;a href = &quot;http://evil&quot;:&gt;evil&lt;/a&gt;", "&lt;a href = &quot;http://evil&quot;/&gt;evil&lt;/a&gt;", "&lt;a href = &quot;http://evil&quot;eVil&gt;evil&lt;/a&gt;", "&lt;a href = &quot;http://evil&quot;EVIL&gt;evil&lt;/a&gt;", "&lt;a href = &quot;http://evil&quot;ev_il&gt;evil&lt;/a&gt;", "&lt;a href = &quot;http://evil&quot;ev il&gt;evil&lt;/a&gt;", "&lt;a href = &quot;http://evil&quot;ev4il&gt;evil&lt;/a&gt;", "&lt;a href = &quot;http://evil&quot;e&gt;evil&lt;/a&gt;", "&lt;a href = &quot;http://evil&quot; &gt;evil&lt;/a&gt;", "&lt;a href = &quot;http://evil&quot;6&gt;evil&lt;/a&gt;", "&lt;a href = &quot;http://evil&quot;_&gt;evil&lt;/a&gt;", "&lt;a href = &quot;http://evil&quot;&gt;evil&lt;/a&gt;", "&lt;a href = &quot;http://=&quot;evil&gt;evil&lt;/a&gt;", "&lt;a href = &quot;http://:&quot;evil&gt;evil&lt;/a&gt;", "&lt;a href = &quot;http:///&quot;evil&gt;evil&lt;/a&gt;", "&lt;a href = &quot;http://eVil&quot;evil&gt;evil&lt;/a&gt;", "&lt;a href = &quot;http://EVIL&quot;evil&gt;evil&lt;/a&gt;", "&lt;a href = &quot;http://ev_il&quot;evil&gt;evil&lt;/a&gt;", "&lt;a href = &quot;http://ev il&quot;evil&gt;evil&lt;/a&gt;", "&lt;a href = &quot;http://ev4il&quot;evil&gt;evil&lt;/a&gt;", "&lt;a href = &quot;http://e&quot;evil&gt;evil&lt;/a&gt;", "&lt;a href = &quot;http:// &quot;evil&gt;evil&lt;/a&gt;", "&lt;a href = &quot;http://6&quot;evil&gt;evil&lt;/a&gt;", "&lt;a href = &quot;http://_&quot;evil&gt;evil&lt;/a&gt;", "&lt;a href = &quot;http://&quot;evil&gt;evil&lt;/a&gt;", "&lt;a href =  &quot;http://evil&quot;evil&gt;evil&lt;/a&gt;", "&lt;a href =&quot;http://evil&quot;evil&gt;evil&lt;/a&gt;", "&lt;a href  = &quot;http://evil&quot;evil&gt;evil&lt;/a&gt;", "&lt;a href= &quot;http://evil&quot;evil&gt;evil&lt;/a&gt;", "&lt;a  href = &quot;http://evil&quot;evil&gt;evil&lt;/a&gt;", "&lt;a href=&quot;http://&quot;&gt;&lt;/a&gt;", "&lt;a href = &quot;http://evil&quot;evil&gt;evil&lt;/a&gt;"], "nonMatches": ["&lt;a href = &quot;http://evil&quot;;&gt;evil&lt;/a&gt;", "&lt;a href = &quot;http://evil&quot;&&gt;evil&lt;/a&gt;", "&lt;a href = &quot;http://;&quot;evil&gt;evil&lt;/a&gt;", "&lt;a href = &quot;http://&&quot;evil&gt;evil&lt;/a&gt;", "&lt;ahref = &quot;http://evil&quot;evil&gt;evil&lt;/a&gt;"]}, {"regex": "[1-2][0|9][0-9]{2}[0-1][0-9][0-3][0-9][-][0-9]{4}", "exceptionStackTrace": null, "matches": ["19000000-00000", "1|000000-0000", "10000000-0000", "19000000-0000"], "nonMatches": ["19000000-000", "19000040-0000", "19002000-0000", "190000000-0000", "1900000-0000", "11000000-0000", "09000000-0000"]}, {"regex": "<a\\s+(?:(?:\\w+\\s*=\\s*)(?:\\w+|&quot;[^&quot;]*&quot;|&#39;[^&#39;]*&#39;))*?\\s*href\\s*=\\s*(?<url>\\w+|&quot;[^&quot;]*&quot;|&#39;[^&#39;]*&#39;)(?:(?:\\s+\\w+\\s*=\\s*)(?:\\w+|&quot;[^&quot;]*&quot;|&#39;[^&#39;]*&#39;))*?>[^<]+</a>", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<u"}, "matches": []}, {"regex": "<a\\s+(?:(?:\\w+\\s*=\\s*)(?:\\w+|&quot;[^&quot;]*&quot;|&#39;[^&#39;]*&#39;))*?\\s*href\\s*=\\s*(?<url>\\w+|&quot;[^&quot;]*&quot;|&#39;[^&#39;]*&#39;)(?:(?:\\s+\\w+\\s*=\\s*)(?:\\w+|&quot;[^&quot;]*&quot;|&#39;[^&#39;]*&#39;))*?>.+?</a>", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<u"}, "matches": []}, {"regex": " Gmail help", "exceptionStackTrace": null, "matches": [" Gmail help"], "nonMatches": []}, {"regex": " Gmail help", "exceptionStackTrace": null, "matches": [" Gmail help"], "nonMatches": []}, {"regex": " Gmail help", "exceptionStackTrace": null, "matches": [" Gmail help"], "nonMatches": []}, {"regex": "Facebook Customer Service", "exceptionStackTrace": null, "matches": ["Facebook Customer Service"], "nonMatches": []}, {"regex": "Facebook Customer Service", "exceptionStackTrace": null, "matches": ["Facebook Customer Service"], "nonMatches": []}, {"regex": "Facebook Customer Service", "exceptionStackTrace": null, "matches": ["Facebook Customer Service"], "nonMatches": []}, {"regex": "Facebook Customer Service", "exceptionStackTrace": null, "matches": ["Facebook Customer Service"], "nonMatches": []}, {"regex": "Facebook Customer Service", "exceptionStackTrace": null, "matches": ["Facebook Customer Service"], "nonMatches": []}, {"regex": "Facebook Customer Service", "exceptionStackTrace": null, "matches": ["Facebook Customer Service"], "nonMatches": []}, {"regex": "Facebook Customer Service", "exceptionStackTrace": null, "matches": ["Facebook Customer Service"], "nonMatches": []}, {"regex": "Facebook Customer Service", "exceptionStackTrace": null, "matches": ["Facebook Customer Service"], "nonMatches": []}, {"regex": "Facebook Customer Service", "exceptionStackTrace": null, "matches": ["Facebook Customer Service"], "nonMatches": []}, {"regex": "Facebook Customer Service", "exceptionStackTrace": null, "matches": ["Facebook Customer Service"], "nonMatches": []}, {"regex": "FacebookPhoneNumber", "exceptionStackTrace": null, "matches": ["FacebookPhoneNumber"], "nonMatches": []}, {"regex": "FacebookPhoneNumber", "exceptionStackTrace": null, "matches": ["FacebookPhoneNumber"], "nonMatches": []}, {"regex": "FacebookPhoneNumber", "exceptionStackTrace": null, "matches": ["FacebookPhoneNumber"], "nonMatches": []}, {"regex": "FacebookPhoneNumber", "exceptionStackTrace": null, "matches": ["FacebookPhoneNumber"], "nonMatches": []}, {"regex": "FacebookPhoneNumber", "exceptionStackTrace": null, "matches": ["FacebookPhoneNumber"], "nonMatches": []}, {"regex": "FacebookPhoneNumber", "exceptionStackTrace": null, "matches": ["FacebookPhoneNumber"], "nonMatches": []}, {"regex": "FacebookPhoneNumber", "exceptionStackTrace": null, "matches": ["FacebookPhoneNumber"], "nonMatches": []}, {"regex": "FacebookPhoneNumber", "exceptionStackTrace": null, "matches": ["FacebookPhoneNumber"], "nonMatches": []}, {"regex": "FacebookPhoneNumber", "exceptionStackTrace": null, "matches": ["FacebookPhoneNumber"], "nonMatches": []}, {"regex": "FacebookPhoneNumber", "exceptionStackTrace": null, "matches": ["FacebookPhoneNumber"], "nonMatches": []}, {"regex": "FacebookPhoneNumber", "exceptionStackTrace": null, "matches": ["FacebookPhoneNumber"], "nonMatches": []}, {"regex": "FacebookPhoneNumber", "exceptionStackTrace": null, "matches": ["FacebookPhoneNumber"], "nonMatches": []}, {"regex": "FacebookPhoneNumber", "exceptionStackTrace": null, "matches": ["FacebookPhoneNumber"], "nonMatches": []}, {"regex": "FacebookPhoneNumber", "exceptionStackTrace": null, "matches": ["FacebookPhoneNumber"], "nonMatches": []}, {"regex": "FacebookPhoneNumber", "exceptionStackTrace": null, "matches": ["FacebookPhoneNumber"], "nonMatches": []}, {"regex": "FacebookPhoneNumber", "exceptionStackTrace": null, "matches": ["FacebookPhoneNumber"], "nonMatches": []}, {"regex": "FacebookPhoneNumber", "exceptionStackTrace": null, "matches": ["FacebookPhoneNumber"], "nonMatches": []}, {"regex": "FacebookPhoneNumber", "exceptionStackTrace": null, "matches": ["FacebookPhoneNumber"], "nonMatches": []}, {"regex": "FacebookPhoneNumber", "exceptionStackTrace": null, "matches": ["FacebookPhoneNumber"], "nonMatches": []}, {"regex": "FacebookPhoneNumber", "exceptionStackTrace": null, "matches": ["FacebookPhoneNumber"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "FacebookCustomerService,FacebookCustomerService Number", "exceptionStackTrace": null, "matches": ["FacebookCustomerService,FacebookCustomerService Number"], "nonMatches": []}, {"regex": "FacebookCustomerService,FacebookCustomerService Number", "exceptionStackTrace": null, "matches": ["FacebookCustomerService,FacebookCustomerService Number"], "nonMatches": []}, {"regex": "FacebookCustomerService,FacebookCustomerService Number", "exceptionStackTrace": null, "matches": ["FacebookCustomerService,FacebookCustomerService Number"], "nonMatches": []}, {"regex": "FacebookCustomerService,FacebookCustomerService Number", "exceptionStackTrace": null, "matches": ["FacebookCustomerService,FacebookCustomerService Number"], "nonMatches": []}, {"regex": "FacebookCustomerService,FacebookCustomerService Number", "exceptionStackTrace": null, "matches": ["FacebookCustomerService,FacebookCustomerService Number"], "nonMatches": []}, {"regex": "FacebookCustomerService,FacebookCustomerService Number", "exceptionStackTrace": null, "matches": ["FacebookCustomerService,FacebookCustomerService Number"], "nonMatches": []}, {"regex": "FacebookCustomerService,FacebookCustomerService Number", "exceptionStackTrace": null, "matches": ["FacebookCustomerService,FacebookCustomerService Number"], "nonMatches": []}, {"regex": "FacebookCustomerService,FacebookCustomerService Number", "exceptionStackTrace": null, "matches": ["FacebookCustomerService,FacebookCustomerService Number"], "nonMatches": []}, {"regex": "FacebookCustomerService,FacebookCustomerService Number", "exceptionStackTrace": null, "matches": ["FacebookCustomerService,FacebookCustomerService Number"], "nonMatches": []}, {"regex": "FacebookCustomerService,FacebookCustomerService Number", "exceptionStackTrace": null, "matches": ["FacebookCustomerService,FacebookCustomerService Number"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "Gmail Password Recovery,Gmail Recovery", "exceptionStackTrace": null, "matches": ["Gmail Password Recovery,Gmail Recovery"], "nonMatches": []}, {"regex": "(&quot;((\\\\.)|[^\\\\&quot;])*&quot;)", "exceptionStackTrace": null, "matches": ["&quot;A&quot;", "&quot;0&quot;", "&quot; &quot;", "&quot;\\a\\a&quot;", "&quot;\\\\&quot;", "&quot;\\A&quot;", "&quot;\\;&quot;", "&quot;\\0&quot;", "&quot;\\&&quot;", "&quot;\\ &quot;", "&quot;&quot;", "&quot;a&quot;", "&quot;\\a&quot;"], "nonMatches": ["&quot;u&quot;", "&quot;t&quot;", "&quot;q&quot;", "&quot;o&quot;", "&quot;\\&quot;", "&quot;;&quot;", "&quot;&&quot;"]}, {"regex": "(&#39;((\\\\.)|[^\\\\&#39;])*&#39;)", "exceptionStackTrace": null, "matches": ["&#39;A&#39;", "&#39;0&#39;", "&#39; &#39;", "&#39;\\a\\a&#39;", "&#39;\\\\&#39;", "&#39;\\A&#39;", "&#39;\\;&#39;", "&#39;\\0&#39;", "&#39;\\&&#39;", "&#39;\\#&#39;", "&#39;\\ &#39;", "&#39;&#39;", "&#39;a&#39;", "&#39;\\a&#39;"], "nonMatches": ["&#39;\\&#39;", "&#39;;&#39;", "&#39;9&#39;", "&#39;3&#39;", "&#39;&&#39;", "&#39;#&#39;"]}, {"regex": "^((\\$?\\-?)|(\\-?\\$?))([0-9]{1,3},([0-9]{3},)*[0-9]{3}|[0-9]+)?(\\.[0-9]*)?$", "exceptionStackTrace": null, "matches": ["$-00.0", "$-0,000,000", "$-0,000,000.00", "$-0,000,000.", "$-.0", "$-0,000,000,000.0", "$-0,000.0", "$-000,000,000.0", "$0,000,000.0", "-0,000,000.0", "", "-$0,000,000.0", "$-0.0", "$-0,000,000.0"], "nonMatches": ["-$$0,000,000.0", "--$0,000,000.0", "$-0,000,000.0.0", "$-0,000,0000,000,000.0", "$-0,000,0000.0", "$-0,000,00.0", "$-0,0000,000.0", "$-0,00,000.0", "$-0000,000,000.0", "$-,000,000.0", "$--0,000,000.0", "$$-0,000,000.0"]}, {"regex": "^((\\.)?([a-zA-Z0-9_-]?)(\\.)?([a-zA-Z0-9_-]?)(\\.)?)+$", "exceptionStackTrace": null, "matches": [".-.-..-.-.", ".-.-..", ".-.-", ".-.--.", ".-..", ".-.a.", ".-._.", ".-.A.", ".-.0.", ".-..-.", ".--.", ".--.-.", "..-.", ".a.-.", "._.-.", ".A.-.", ".0.-.", "..-.-.", "-.-.", "", ".-.-."], "nonMatches": []}, {"regex": "vfgrthfh", "exceptionStackTrace": null, "matches": ["vfgrthfh"], "nonMatches": []}, {"regex": "(^([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9])(\\s{0,1})([AM|PM|am|pm]{2,2})$)|(^([0-9]|[1][0-9]|[2][0-3])(\\s{0,1})([AM|PM|am|pm]{2,2})$)", "exceptionStackTrace": null, "matches": ["0 |m", "0 pm", "0 am", "0 Pm", "0 Mm", "0 Am", "0:00 |m", "0:00 pm", "0:00 am", "0:00 Pm", "0:00 Mm", "0:00 Am", "20mm", "10mm", "0mm", "20:00mm", "00:00mm", "0:00mm", "20 mm", "10 mm", "0 mm", "20:00 mm", "00:00 mm", "0:00 mm"], "nonMatches": ["24 mm", "0 mmm", "0 m", "0 bm", "0 Bm", "0  mm", "24:00 mm", "0:00 mmm", "0:00 m", "0:00 bm", "0:00 Bm", "0:00  mm", "0:60 mm"]}, {"regex": "^([A-Z]{0,3})?[ ]?([0-9]{1,3},([0-9]{3},)*[0-9]{3}|[0-9]+)(.[0-9][0-9])?$", "exceptionStackTrace": null, "matches": ["A 00a00", "A 0,000,000", "A 0,000,000A00", "A 0,000,000000", "A 0,000,000,00", "A 0,000,000 00", "A 0,000,000,000a00", "A 0,000a00", "A 000,000,000a00", "A0,000,000a00", "AA 0,000,000a00", "AAA 0,000,000a00", " 0,000,000a00", "0", "0,000", "A 0a00", "A 0,000,000a00"], "nonMatches": ["A a00", "A 0,000,000a00a00", "A 0,000,0000a00", "A 0,000,00a00", "A 0,0000,000a00", "A 0,00,000a00", "A 0000,000,000a00", "A ,000,000a00", "A  0,000,000a00", "AAAA 0,000,000a00"]}, {"regex": "(?:youtu\\.be\\/|youtube.com\\/(?:watch\\?.*\\bv=|embed\\/|v\\/)|ytimg\\.com\\/vi\\/)(.+?)(?:[^-a-zA-Z0-9]|$)", "exceptionStackTrace": null, "matches": ["youtubeacom/watch??v=evil ", "youtubeacom/watch?=v=evil ", "youtubeacom/watch?/v=evil ", "youtubeacom/watch?.v=evil ", "youtubeacom/watch?-v=evil ", "youtubeacom/watch? v=evil ", "youtu.be/evila", "youtu.be/evilA", "youtu.be/evil?", "youtu.be/evil=", "youtu.be/evil0", "youtu.be/evil/", "youtu.be/evil.", "youtu.be/evil-", "youtu.be/? ", "youtu.be/= ", "youtu.be// ", "youtu.be/. ", "youtu.be/- ", "youtu.be/eVil ", "youtu.be/EVIL ", "youtu.be/ev_il ", "youtu.be/ev il ", "youtu.be/ev4il ", "youtu.be/e ", "youtu.be/  ", "youtu.be/6 ", "youtu.be/_ ", "youtu.be/ ", "youtubeacom/watch?v=evil ", "ytimg.com/vi/evil ", "youtubeacom/v/evil ", "youtubeacom/embed/evil ", "youtu.be/evil", "youtu.be/evil "], "nonMatches": ["youtubeacom/watch?eVilv=evil ", "youtubeacom/watch?EVILv=evil ", "youtubeacom/watch?ev_ilv=evil ", "youtubeacom/watch?ev ilv=evil ", "youtubeacom/watch?ev4ilv=evil ", "youtubeacom/watch?ev=evil ", "youtubeacom/watch?6v=evil ", "youtubeacom/watch?_v=evil ", "youtubeAcom/watch?evilv=evil ", "youtube?com/watch?evilv=evil ", "youtube=com/watch?evilv=evil ", "youtube0com/watch?evilv=evil ", "youtube/com/watch?evilv=evil ", "youtube.com/watch?evilv=evil ", "youtube-com/watch?evilv=evil ", "youtube com/watch?evilv=evil ", "youtubeacom/watch?evilv=evil "]}, {"regex": "((http(s)?:\\/\\/)?[a-z0-9-]{3,}(\\.[a-z0-9-]{2,})+(:[0-9]+)?((\\/[^\\/\\s.]+\\.[^\\/\\s.,!]+)|(\\/[^\\/\\s.,!]*))*)", "exceptionStackTrace": null, "matches": ["https://---.--:0/:", "https://---.--:0//", "https://---.--:0/.", "https://---.--:0/-", "https://---.--:0/,", "https://---.--:0/!", "https://---.--:0/eVil", "https://---.--:0/EVIL", "https://---.--:0/ev_il", "https://---.--:0/ev il", "https://---.--:0/ev4il", "https://---.--:0/e", "https://---.--:0/ ", "https://---.--:0/6", "https://---.--:0/_", "https://---.--:0/", "https://---.--:0/evil.evil/evil.evil", "https://---.--:0", "https://---.--:0/evil.:", "https://---.--:0/evil./", "https://---.--:0/evil..", "https://---.--:0/evil.-", "https://---.--:0/evil.,", "https://---.--:0/evil.!", "https://---.--:0/evil.eVil", "https://---.--:0/evil.EVIL", "https://---.--:0/evil.ev_il", "https://---.--:0/evil.ev il", "https://---.--:0/evil.ev4il", "https://---.--:0/evil.e", "https://---.--:0/evil. ", "https://---.--:0/evil.6", "https://---.--:0/evil._", "https://---.--:0/evil.", "https://---.--:0/:.evil", "https://---.--:0//.evil", "https://---.--:0/..evil", "https://---.--:0/-.evil", "https://---.--:0/,.evil", "https://---.--:0/!.evil", "https://---.--:0/eVil.evil", "https://---.--:0/EVIL.evil", "https://---.--:0/ev_il.evil", "https://---.--:0/ev il.evil", "https://---.--:0/ev4il.evil", "https://---.--:0/e.evil", "https://---.--:0/ .evil", "https://---.--:0/6.evil", "https://---.--:0/_.evil", "https://---.--:0/.evil", "https://---.--:0:0/evil.evil", "https://---.--/evil.evil", "https://---.--:00/evil.evil", "https://---.--:/evil.evil", "https://---.--.--:0/evil.evil", "https://---:0/evil.evil", "https://---.-:0/evil.evil", "https://---.a-:0/evil.evil", "https://---.0-:0/evil.evil", "https://--.--:0/evil.evil", "https://a--.--:0/evil.evil", "https://0--.--:0/evil.evil", "https://https://---.--:0/evil.evil", "---.--:0/evil.evil", "httpss://---.--:0/evil.evil", "http://---.--:0/evil.evil", "---.--", "https://---.--:0/evil", "https://---.--:0/evil.evil"], "nonMatches": []}, {"regex": "^(05)[0-9]{8}$", "exceptionStackTrace": null, "matches": ["0500000000"], "nonMatches": ["05000000000", "050000000"]}, {"regex": "^(966)(5)[0-9]{8}$", "exceptionStackTrace": null, "matches": ["966500000000"], "nonMatches": ["9665000000000", "96650000000"]}, {"regex": "gmail help number", "exceptionStackTrace": null, "matches": ["gmail help number"], "nonMatches": []}, {"regex": "^((http|https):[/][/]|www.)([\\w-]+\\.)+[\\w-]+(/[\\w- ./?%&=]*)?", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character range \\w- "}, "matches": []}, {"regex": "[A-Z|a-z]{4}[0][\\d]{6}$", "exceptionStackTrace": null, "matches": ["|||||0000000", "a|||0000000", "A|||0000000", "||||0000000"], "nonMatches": ["||||00000000", "||||000000", "|||0000000"]}, {"regex": "^[\\w]{3}(p|P|c|C|h|H|f|F|a|A|t|T|b|B|l|L|j|J|g|G)[\\w][\\d]{4}[\\w]$", "exceptionStackTrace": null, "matches": ["aaapa0000_", "aaapa0000A", "aaapa00000", "aaap_0000a", "aaapA0000a", "aaap00000a", "_aapa0000a", "Aaapa0000a", "0aapa0000a", "aaaGa0000a", "aaaga0000a", "aaaJa0000a", "aaaja0000a", "aaaLa0000a", "aaala0000a", "aaaBa0000a", "aaaba0000a", "aaaTa0000a", "aaata0000a", "aaaAa0000a", "aaaaa0000a", "aaaFa0000a", "aaafa0000a", "aaaHa0000a", "aaaha0000a", "aaaCa0000a", "aaaca0000a", "aaaPa0000a", "aaapa0000a"], "nonMatches": ["aaapa00000a", "aaapa000a", "aaaapa0000a", "aapa0000a"]}, {"regex": "\\w+([-+.&#39;]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*", "exceptionStackTrace": null, "matches": ["evil;evil@evil.evil.evil.eVil", "evil;evil@evil.evil.evil.EVIL", "evil;evil@evil.evil.evil.ev_il", "evil;evil@evil.evil.evil.ev il", "evil;evil@evil.evil.evil.ev4il", "evil;evil@evil.evil.evil.e", "evil;evil@evil.evil.evil. ", "evil;evil@evil.evil.evil.6", "evil;evil@evil.evil.evil._", "evil;evil@evil.evil.evil.", "evil;evil@evil.evil.evil-evil", "evil;evil@evil.evil.eVil.evil", "evil;evil@evil.evil.EVIL.evil", "evil;evil@evil.evil.ev_il.evil", "evil;evil@evil.evil.ev il.evil", "evil;evil@evil.evil.ev4il.evil", "evil;evil@evil.evil.e.evil", "evil;evil@evil.evil. .evil", "evil;evil@evil.evil.6.evil", "evil;evil@evil.evil._.evil", "evil;evil@evil.evil..evil", "evil;evil@evil.evil.evil.evil.evil", "evil;evil@evil.evil.evil", "evil;evil@evil.eVil.evil.evil", "evil;evil@evil.EVIL.evil.evil", "evil;evil@evil.ev_il.evil.evil", "evil;evil@evil.ev il.evil.evil", "evil;evil@evil.ev4il.evil.evil", "evil;evil@evil.e.evil.evil", "evil;evil@evil.6.evil.evil", "evil;evil@evil._.evil.evil", "evil;evil@evil-evil.evil.evil", "evil;evil@eVil.evil.evil.evil", "evil;evil@EVIL.evil.evil.evil", "evil;evil@ev_il.evil.evil.evil", "evil;evil@ev4il.evil.evil.evil", "evil;evil@e.evil.evil.evil", "evil;evil@6.evil.evil.evil", "evil;evil@_.evil.evil.evil", "evil;evil;evil@evil.evil.evil.evil", "evil@evil.evil.evil.evil", "evil;eVil@evil.evil.evil.evil", "evil;EVIL@evil.evil.evil.evil", "evil;ev_il@evil.evil.evil.evil", "evil;ev il@evil.evil.evil.evil", "evil;ev4il@evil.evil.evil.evil", "evil;e@evil.evil.evil.evil", "evil;6@evil.evil.evil.evil", "evil;_@evil.evil.evil.evil", "evil9evil@evil.evil.evil.evil", "evil3evil@evil.evil.evil.evil", "evil0evil@evil.evil.evil.evil", "evil.evil@evil.evil.evil.evil", "evil-evil@evil.evil.evil.evil", "evil+evil@evil.evil.evil.evil", "evil&evil@evil.evil.evil.evil", "evil#evil@evil.evil.evil.evil", "eVil;evil@evil.evil.evil.evil", "EVIL;evil@evil.evil.evil.evil", "ev_il;evil@evil.evil.evil.evil", "ev il;evil@evil.evil.evil.evil", "ev4il;evil@evil.evil.evil.evil", "e;evil@evil.evil.evil.evil", " ;evil@evil.evil.evil.evil", "6;evil@evil.evil.evil.evil", "_;evil@evil.evil.evil.evil", ";evil@evil.evil.evil.evil", "evil@evil.evil", "evil;evil@evil.evil.evil.evil"], "nonMatches": ["evil;evil@evil. .evil.evil", "evil;evil@evil..evil.evil", "evil;evil@ev il.evil.evil.evil", "evil;evil@ .evil.evil.evil", "evil;evil@.evil.evil.evil", "evil; @evil.evil.evil.evil", "evil;@evil.evil.evil.evil"]}, {"regex": "^([7-9]{1})([0-9]{9})$", "exceptionStackTrace": null, "matches": ["7000000000"], "nonMatches": ["70000000000", "700000000", "77000000000", "000000000", "0000000000"]}, {"regex": "^[a-zA-Z]{3}[0-9]{6}$", "exceptionStackTrace": null, "matches": ["aAA000000", "AAA000000"], "nonMatches": ["AAA0000000", "AAA00000", "AAAA000000", "AA000000"]}, {"regex": "(\\s|\\n|^)(\\w+://[^\\s\\n]+)", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\n"}, "matches": [], "nonMatches": []}, {"regex": "^(?<type>(\\w+(\\.?\\w+)+))\\s*,\\s*(?<assembly>[\\w\\.]+)(,\\s?Version=(?<version>\\d+\\.\\d+\\.\\d+\\.\\d+))?(,\\s?Culture=(?<culture>\\w+))?(,\\s?PublicKeyToken=(?<token>\\w+))?$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<t"}, "matches": []}, {"regex": "^([a-zA-Z]+)://([a-zA-Z0-9_\\-]+)((\\.[a-zA-Z0-9_\\-]+|[0-9]{1,3})+)\\.([a-zA-Z]{2,6}|[0-9]{1,3})((:[0-9]+)?)((/[a-zA-Z0-9_\\-,.;=%]*)*)((\\?[a-zA-Z0-9_\\-,.;=&%]*)?)$", "exceptionStackTrace": null, "matches": ["evil://evil0000.AA:0/evil?evil", "evil://evil000.AA:0/evil?evil", "evil://evil.evil.000:0/evil?evil", "evil://evil.evil.AA:0/evil", "evil://evil.evil.AA:0/evil?=", "evil://evil.evil.AA:0/evil?;", "evil://evil.evil.AA:0/evil?.", "evil://evil.evil.AA:0/evil?-", "evil://evil.evil.AA:0/evil?,", "evil://evil.evil.AA:0/evil?&", "evil://evil.evil.AA:0/evil?%", "evil://evil.evil.AA:0/evil?eVil", "evil://evil.evil.AA:0/evil?EVIL", "evil://evil.evil.AA:0/evil?ev_il", "evil://evil.evil.AA:0/evil?ev4il", "evil://evil.evil.AA:0/evil?e", "evil://evil.evil.AA:0/evil?6", "evil://evil.evil.AA:0/evil?_", "evil://evil.evil.AA:0/evil?", "evil://evil.evil.AA:0/evil/evil?evil", "evil://evil.evil.AA:0?evil", "evil://evil.evil.AA:0/=?evil", "evil://evil.evil.AA:0/;?evil", "evil://evil.evil.AA:0//?evil", "evil://evil.evil.AA:0/.?evil", "evil://evil.evil.AA:0/-?evil", "evil://evil.evil.AA:0/,?evil", "evil://evil.evil.AA:0/%?evil", "evil://evil.evil.AA:0/eVil?evil", "evil://evil.evil.AA:0/EVIL?evil", "evil://evil.evil.AA:0/ev_il?evil", "evil://evil.evil.AA:0/ev4il?evil", "evil://evil.evil.AA:0/e?evil", "evil://evil.evil.AA:0/6?evil", "evil://evil.evil.AA:0/_?evil", "evil://evil.evil.AA:0/?evil", "evil://evil.evil.AA/evil?evil", "evil://evil.evil.AA:00/evil?evil", "evil://evil.evil.AAAAAA:0/evil?evil", "evil://evil.evil.aA:0/evil?evil", "evil://evil.evil.evil.AA:0/evil?evil", "evil://evil.-.AA:0/evil?evil", "evil://evil.eVil.AA:0/evil?evil", "evil://evil.EVIL.AA:0/evil?evil", "evil://evil.ev_il.AA:0/evil?evil", "evil://evil.ev4il.AA:0/evil?evil", "evil://evil.e.AA:0/evil?evil", "evil://evil.6.AA:0/evil?evil", "evil://evil._.AA:0/evil?evil", "evil://-.evil.AA:0/evil?evil", "evil://eVil.evil.AA:0/evil?evil", "evil://EVIL.evil.AA:0/evil?evil", "evil://ev_il.evil.AA:0/evil?evil", "evil://ev4il.evil.AA:0/evil?evil", "evil://e.evil.AA:0/evil?evil", "evil://6.evil.AA:0/evil?evil", "evil://_.evil.AA:0/evil?evil", "eVil://evil.evil.AA:0/evil?evil", "EVIL://evil.evil.AA:0/evil?evil", "e://evil.evil.AA:0/evil?evil", "evil://evil0.AA", "evil://evil.evil.0", "evil://evil.evil.AA", "evil://evil0.AA:0/evil?evil", "evil://evil.evil.0:0/evil?evil", "evil://evil.evil.AA:0/evil?evil"], "nonMatches": ["evil://evil.evil.0000:0/evil?evil", "evil://evil.evil.:0/evil?evil", "evil://evil.evil.AA:0/evil?evil?evil", "evil://evil.evil.AA:0/evil??", "evil://evil.evil.AA:0/evil?:", "evil://evil.evil.AA:0/evil?/", "evil://evil.evil.AA:0/evil?ev il", "evil://evil.evil.AA:0/evil? ", "evil://evil.evil.AA:0/??evil", "evil://evil.evil.AA:0/:?evil", "evil://evil.evil.AA:0/&?evil", "evil://evil.evil.AA:0/ev il?evil", "evil://evil.evil.AA:0/ ?evil", "evil://evil.evil.AA:0:0/evil?evil", "evil://evil.evil.AA:/evil?evil", "evil://evil.evil.AAAAAAA:0/evil?evil", "evil://evil.evil.A:0/evil?evil", "evil://evil.AA:0/evil?evil", "evil://evil.?.AA:0/evil?evil", "evil://evil.=.AA:0/evil?evil", "evil://evil.;.AA:0/evil?evil", "evil://evil.:.AA:0/evil?evil", "evil://evil./.AA:0/evil?evil", "evil://evil...AA:0/evil?evil", "evil://evil.,.AA:0/evil?evil", "evil://evil.&.AA:0/evil?evil", "evil://evil.%.AA:0/evil?evil", "evil://evil.ev il.AA:0/evil?evil", "evil://evil. .AA:0/evil?evil", "evil://evil..AA:0/evil?evil", "evil://?.evil.AA:0/evil?evil", "evil://=.evil.AA:0/evil?evil", "evil://;.evil.AA:0/evil?evil", "evil://:.evil.AA:0/evil?evil", "evil:///.evil.AA:0/evil?evil", "evil://..evil.AA:0/evil?evil", "evil://,.evil.AA:0/evil?evil", "evil://&.evil.AA:0/evil?evil", "evil://%.evil.AA:0/evil?evil", "evil://ev il.evil.AA:0/evil?evil", "evil:// .evil.AA:0/evil?evil", "evil://.evil.AA:0/evil?evil", "ev_il://evil.evil.AA:0/evil?evil", "ev il://evil.evil.AA:0/evil?evil", "ev4il://evil.evil.AA:0/evil?evil", " ://evil.evil.AA:0/evil?evil", "6://evil.evil.AA:0/evil?evil", "_://evil.evil.AA:0/evil?evil", "://evil.evil.AA:0/evil?evil"]}, {"regex": " *(?:-+([^= \\&#39;\\&quot;]+)[= ]?)?(?:([\\&#39;\\&quot;])([^\\2]+?)\\2|([^- \\&quot;\\&#39;]+))?", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (parse error): expected character type but received BACKREFERENCE"}, "matches": [], "nonMatches": []}, {"regex": "abbyfinereader", "exceptionStackTrace": null, "matches": ["abbyfinereader"], "nonMatches": []}, {"regex": "^\\$?([0-9](\\.[0-9][0-9])?|[1-8][0-9](\\.[0-9][0-9])?|9[0-9](\\.[0-9][0-9])?|[1-8][0-9]{2}(\\.[0-9][0-9])?|9[0-8][0-9](\\.[0-9][0-9])?|99[0-9](\\.[0-9][0-9])?|[1-4][0-9]{3}(\\.[0-9][0-9])?|(5000(\\.[0-0][0-0]))?$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "missing ), unterminated subpattern"}, "matches": []}, {"regex": "^\\$((\\d{1})\\,\\d{1,3}(\\,\\d{3}))|(\\d{1,3}(\\,\\d{3}))|(\\d{1,3})?$", "exceptionStackTrace": null, "matches": ["00", "0000", "000", "0,0000", "0,00", "0000,000", "000,000", ",000", "$0,0,0000", "$0,0,00", "$0,0000,000", "$0,000,000", "$0,,000", "$00,0,000", "$,0,000", "", "0", "0,000", "$0,0,000"], "nonMatches": []}, {"regex": "^(100(?:\\.0{1,2})?|0*?\\.\\d{1,2}|\\d{1,2}(?:\\.\\d{1,2})?)$", "exceptionStackTrace": null, "matches": ["000.0", "0.00", "00.0", "100.00", "0", ".0", "100", "0.0", "100.0"], "nonMatches": ["0.0.0", "0.000", "0.", "100.0.0", "100.000", "100."]}, {"regex": "^((http|https|ftp)\\://)?([a-zA-Z0-9\\.\\-]+(\\:[a-zA-Z0-9\\.&%\\$\\-]+)*@)*((25[0-5]|2[0-\n\n4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9\n\n]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]\n\n{1}|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|([a-zA-\n\nZ0-9\\-]+\\.)*[a-zA-Z0-9\\-]+\\.[a-zA-Z]{2,4})(\\:[0-9]+)*(/[^/][a-zA-Z0-9\\.\\,\\?\\&#39;\\\\/\\+&\n\n%\\$#\\=~_\\-]*)*$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character range 0-\n"}, "matches": []}, {"regex": "^((http|https|ftp)\\://)?([a-zA-Z0-9\\.\\-]+(\\:[a-zA-Z0-9\\.&%\\$\\-]+)*@)*((25[0-5]|2[0-\n\n4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9\n\n]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]\n\n{1}|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|([a-zA-\n\nZ0-9\\-]+\\.)*[a-zA-Z0-9\\-]+\\.[a-zA-Z]{2,4})(\\:[0-9]+)*(/[^/][a-zA-Z0-9\\.\\,\\?\\&#39;\\\\/\\+&\n\n%\\$#\\=~_\\-]*)*$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character range 0-\n"}, "matches": []}, {"regex": "(?!00[02-5]|099|213|269|34[358]|353|419|42[89]|51[789]|529|53[36]|552|5[67]8|5[78]9|621|6[348]2|6[46]3|659|69[4-9]|7[034]2|709|715|771|81[789]|8[3469]9|8[4568]8|8[6-9]6|8[68]7|9[02]9|987)\\d{5}", "exceptionStackTrace": null, "matches": [], "nonMatches": ["000000", "0000", "00000"]}, {"regex": "(?!00[02-5]|099|213|269|34[358]|353|419|42[89]|51[789]|529|53[36]|552|5[67]8|5[78]9|621|6[348]2|6[46]3|659|69[4-9]|7[034]2|709|715|771|81[789]|8[3469]9|8[4568]8|8[6-9]6|8[68]7|9[02]9|987)\\d{5}(-\\d{4}){0,1}", "exceptionStackTrace": null, "matches": [], "nonMatches": ["00000-0000-0000", "00000-00000", "00000-000", "000000-0000", "0000-0000", "00000", "00000-0000"]}, {"regex": "^(?!^(PRN|AUX|CLOCK\\$|NUL|CON|COM\\d|LPT\\d|\\..*)(\\..+)?$)[^\\x00-\\x1f\\\\?*:\\&quot;;|/]+$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 0"}, "matches": [], "nonMatches": []}, {"regex": "[\\(]{1,}((?:(?<t>[^\\(]*))[)]{1,})", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<t"}, "matches": []}, {"regex": "[\\(]{1,}[^)]*[)]{1,}", "exceptionStackTrace": null, "matches": ["(evil))", "())", "(()", "(eVil)", "(EVIL)", "(ev_il)", "(ev il)", "(ev4il)", "(e)", "( )", "(6)", "(_)", "((evil)", "()", "(evil)"], "nonMatches": ["(evil", "evil)"]}, {"regex": "^\\d{4}[\\-\\/\\s]?((((0[13578])|(1[02]))[\\-\\/\\s]?(([0-2][0-9])|(3[01])))|(((0[469])|(11))[\\-\\/\\s]?(([0-2][0-9])|(30)))|(02[\\-\\/\\s]?[0-2][0-9]))$", "exceptionStackTrace": null, "matches": ["0000/0200", "0000/02-00", "0000/02 00", "0000/0900", "0000/09-00", "0000/09 00", "0000/06/00", "0000/04/00", "0000/10/00", "0000/08/30", "0000/0800", "0000/08-00", "0000/08 00", "0000/07/00", "0000/05/00", "0000/03/00", "0000/01/00", "000008/00", "0000-08/00", "0000 08/00", "00000200", "00001100", "00000930", "00000900", "00001200", "00000831", "00000800", "0000/02/00", "0000/11/00", "0000/09/30", "0000/09/00", "0000/12/00", "0000/08/31", "0000/08/00"], "nonMatches": ["0000/02/30", "0000/02//00", "0000/09//00", "0000/08/32", "0000/08//00", "0000/00/00", "0000//08/00", "00000/08/00", "000/08/00"]}, {"regex": "the magical flames of your curiosity.", "exceptionStackTrace": null, "matches": ["the magical flames of your curiosity_", "the magical flames of your curiosityA", "the magical flames of your curiosity0", "the magical flames of your curiosity ", "the magical flames of your curiositya"], "nonMatches": []}, {"regex": "^(FR)?\\s?[A-Z0-9-[IO]]{2}[0-9]{9}$", "exceptionStackTrace": null, "matches": ["FR []]000000000", "FR I]]000000000", "FR A]]000000000", "FR 0]]000000000", "FR -]]000000000", "FRO]]000000000", " O]]000000000", "O]]000000000", "FR O]]000000000"], "nonMatches": ["FR O]]0000000000", "FR O]]00000000", "FR O]]]000000000", "FR O]000000000", "FR  O]]000000000", "FRFR O]]000000000"]}, {"regex": "^(?!0{1})\\d{6}", "exceptionStackTrace": null, "matches": [], "nonMatches": ["0000000", "00000", "000000"]}, {"regex": "^(\\(\\d{3}\\)[- ]?|\\d{3}[- ])?\\d{3}[- ]\\d{4}$", "exceptionStackTrace": null, "matches": ["000-000 0000", "(000) 000-0000", "(000)000 0000", "(000)-000 0000", "000 0000", "000 000 0000", "(000) 000 0000"], "nonMatches": ["0000 000 0000", "00 000 0000", "(000) 000 00000", "(000) 000 000", "(000) 0000 0000", "(000) 00 0000", "(000) (000) 000 0000", "(000)  000 0000", "(0000) 000 0000", "(00) 000 0000"]}, {"regex": "(^\\d*\\.?\\d*[0-9]+\\d*$)|(^[0-9]+\\d*\\.\\d*$)", "exceptionStackTrace": null, "matches": ["00.00", "00.", "000.0", "0.0", "0.0000", "0.00", "0000", "00.000", ".000", "0.", "0", "00.0", "0.000"], "nonMatches": ["0..000"]}, {"regex": "(^[A-Z]{1,2}[0-9]{1,}:{1}[A-Z]{1,2}[0-9]{1,}$)|(^\\$(([A-Z])|([a-z])){1,2}([0-9]){1,}:{1}\\$(([A-Z])|([a-z])){1,2}([0-9]){1,}$)|(^\\$(([A-Z])|([a-z])){1,2}(\\$){1}([0-9]){1,}:{1}\\$(([A-Z])|([a-z])){1,2}(\\$){1}([0-9]){1,}$)", "exceptionStackTrace": null, "matches": ["$A$0:$A$00", "$A$0:$AA$0", "$A$00:$A$0", "$AA$0:$A$0", "$A0:$A00", "$A0:$AA0", "$A00:$A0", "$AA0:$A0", "A0:A00", "A0:AA0", "A00:A0", "AA0:A0", "$a$0:$A$0", "$A$0:$a$0", "$A$0:$A$0", "$a0:$A0", "$A0:$a0", "$A0:$A0", "A0:A0"], "nonMatches": ["$A$0:$A$", "$A$0:$A$$0", "$A$0:$A0", "$A$0:$AAA$0", "$A$0:$$0", "$A$0::$A$0", "$A$0$A$0", "$A$:$A$0", "$A$$0:$A$0", "$A0:$A$0", "$AAA$0:$A$0", "$$0:$A$0", "$A0:$A", "$A0:$AAA0", "$A0:$0", "$A0::$A0", "$A0$A0", "$A:$A0", "$AAA0:$A0", "$0:$A0", "A0:A", "A0:AAA0", "A0:0", "A0::A0", "A0A0", "A:A0", "AAA0:A0", "0:A0"]}, {"regex": "(^[A-Z]{1,2}[0-9]{1,}:{1}[A-Z]{1,2}[0-9]{1,}$)|(^\\$(([A-Z])|([a-z])){1,2}([0-9]){1,}:{1}\\$(([A-Z])|([a-z])){1,2}([0-9]){1,}$)|(^\\$(([A-Z])|([a-z])){1,2}(\\$){1}([0-9]){1,}:{1}\\$(([A-Z])|([a-z])){1,2}(\\$){1}([0-9]){1,}$)", "exceptionStackTrace": null, "matches": ["$A$0:$A$00", "$A$0:$AA$0", "$A$00:$A$0", "$AA$0:$A$0", "$A0:$A00", "$A0:$AA0", "$A00:$A0", "$AA0:$A0", "A0:A00", "A0:AA0", "A00:A0", "AA0:A0", "$a$0:$A$0", "$A$0:$a$0", "$A$0:$A$0", "$a0:$A0", "$A0:$a0", "$A0:$A0", "A0:A0"], "nonMatches": ["$A$0:$A$", "$A$0:$A$$0", "$A$0:$A0", "$A$0:$AAA$0", "$A$0:$$0", "$A$0::$A$0", "$A$0$A$0", "$A$:$A$0", "$A$$0:$A$0", "$A0:$A$0", "$AAA$0:$A$0", "$$0:$A$0", "$A0:$A", "$A0:$AAA0", "$A0:$0", "$A0::$A0", "$A0$A0", "$A:$A0", "$AAA0:$A0", "$0:$A0", "A0:A", "A0:AAA0", "A0:0", "A0::A0", "A0A0", "A:A0", "AAA0:A0", "0:A0"]}, {"regex": "^([1-9]\\d*|0)(([.,]\\d*[1-9])?)$", "exceptionStackTrace": null, "matches": ["10", "10,001", "10,1", "10.01", "100,01", "1,01", "0", "1", "0,01", "10,01"], "nonMatches": ["10,01,01", "10,00", "00,01"]}, {"regex": "^((01[0-9])\\d{9}$|(1[0-9])\\d{9}$|((00\\d{5,6}|\\+\\d{4,6}|\\+[(]\\d{1,3}[)]\\d{3}))(|[-\\/])\\d{8}$)", "exceptionStackTrace": null, "matches": ["+(000)000/00000000", "+000000/00000000", "0000000-00000000", "00000000/00000000", "+(0)00000000000", "+000000000000", "000000000000000", "+(0)000/00000000", "+0000/00000000", "0000000/00000000", "10000000000", "010000000000"], "nonMatches": ["+(0)0000/00000000", "+(0)00/00000000", "+(0000)000/00000000", "+()000/00000000", "+0000000/00000000", "+000/00000000", "0000000/000000000", "0000000/0000000", "0000000//00000000", "000000000/00000000", "000000/00000000", "100000000000", "1000000000", "0100000000000", "01000000000"]}, {"regex": "^(\\d{5}([-\\/]|)\\d{0,9}$|((00\\d{5,6}|\\+\\d{4,6}|\\+[(]\\d{1,3}[)]))\\d{1,4}(|[-\\/])\\d{1,7}$)", "exceptionStackTrace": null, "matches": ["+(000)0/0", "+00000000/0", "+0000000/0", "00000000/0000000", "00000000-0", "000000000000/0", "00000000000/0", "0000000000/0", "000000000/0", "00000/000000000", "00000/", "000000", "00000-0", "+(0)00", "+000000", "000000000", "00000", "+(0)0/0", "+00000/0", "00000000/0", "00000/0"], "nonMatches": ["+(0000)0/0", "+()0/0", "+0000/0", "00000000/00000000", "00000000/", "00000000//0", "0000000/0", "00000/0000000000", "00000//0", "000000/0", "0000/0"]}, {"regex": "^(?:\\d+,\\s*)*\\d+\\s*$", "exceptionStackTrace": null, "matches": ["0, 0  ", "0, 0", "0, 00 ", "0, 0, 0 ", "0 ", "0,  0 ", "0,0 ", "00, 0 ", "0", "0, 0 "], "nonMatches": ["0,  ", ", 0 "]}, {"regex": "^((\\+?(?<CountryCode>1)\\s(?<AreaCode>[2-9][0-8][0-9])\\s)|((?<AreaCode>[2-9][0-8][0-9])\\s))?(?<ExchangeCode>[2-9][0-9][0-9])\\s(?<StationCode>[0-9][0-9][0-9][0-9])$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<C"}, "matches": []}, {"regex": "([0-9]+)(?:st|nd|rd|th)", "exceptionStackTrace": null, "matches": ["00st", "0th", "0rd", "0nd", "0st"], "nonMatches": ["st"]}, {"regex": "(?=^.{6,10}$)(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&amp;*()_+}{&quot;:;&#39;?/&gt;.&lt;,])(?!.*\\s).*$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["}", "{", "^", "@", "?", ";", ":", "/", ".", ",", "+", "*", ")", "(", "&", "%", "$", "#", "!", "eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", " ", "6", "_", "", "evil"]}, {"regex": "[0-9]{1,2}[:|&#176;|&#186;][0-9]{1,2}[:|&#39;](?:\\b[0-9]+(?:\\.[0-9]*)?|\\.[0-9]+\\b)&quot;?[N|S|E|W]", "exceptionStackTrace": null, "matches": ["0;0;.00&quot;W", "0;0;0.0&quot;|", "0;0;0.0&quot;S", "0;0;0.0&quot;N", "0;0;0.0&quot;E", "0;0;0.0&quotW", "0;0;0&quot;W", "0;0;0.00&quot;W", "0;0;0.&quot;W", "0;0;00.0&quot;W", "0;0|0.0&quot;W", "0;0:0.0&quot;W", "0;0&0.0&quot;W", "0;0#0.0&quot;W", "0;00;0.0&quot;W", "0|0;0.0&quot;W", "0:0;0.0&quot;W", "080;0.0&quot;W", "070;0.0&quot;W", "060;0.0&quot;W", "010;0.0&quot;W", "0&0;0.0&quot;W", "0#0;0.0&quot;W", "000;0;0.0&quot;W", "00;0;0.0&quot;W", "0;0;.0&quotW", "0;0;0&quotW", "0;0;.0&quot;W", "0;0;0.0&quot;W"], "nonMatches": ["0;0;.&quot;W", "0;0;0.0&quot;A", "0;0;0.0&quot;;W", "0;0;0.0.0&quot;W", "0;090.0&quot;W", "0;030.0&quot;W", "0;000.0&quot;W", "0;000;0.0&quot;W", "0;;0.0&quot;W", "000;0.0&quot;W", ";0;0.0&quot;W"]}, {"regex": "^([a-zA-Z]\\:|\\\\\\\\[^\\/\\\\:*?&quot;<>|]+\\\\[^\\/\\\\:*?&quot;<>|]+)(\\\\[^\\/\\\\:*?&quot;<>|]+)+(\\.[^\\/\\\\:*?&quot;<>|]+)$", "exceptionStackTrace": null, "matches": ["\\\\evil\\.\\evil.evil", "\\\\evil\\eVil\\evil.evil", "\\\\evil\\EVIL\\evil.evil", "\\\\evil\\ev_il\\evil.evil", "\\\\evil\\ev il\\evil.evil", "\\\\evil\\ev4il\\evil.evil", "\\\\evil\\e\\evil.evil", "\\\\evil\\ \\evil.evil", "\\\\evil\\6\\evil.evil", "\\\\evil\\_\\evil.evil", "\\\\.\\evil\\evil.evil", "\\\\eVil\\evil\\evil.evil", "\\\\EVIL\\evil\\evil.evil", "\\\\ev_il\\evil\\evil.evil", "\\\\ev il\\evil\\evil.evil", "\\\\ev4il\\evil\\evil.evil", "\\\\e\\evil\\evil.evil", "\\\\ \\evil\\evil.evil", "\\\\6\\evil\\evil.evil", "\\\\_\\evil\\evil.evil", "A:\\evil..", "A:\\evil.eVil", "A:\\evil.EVIL", "A:\\evil.ev_il", "A:\\evil.ev il", "A:\\evil.ev4il", "A:\\evil.e", "A:\\evil. ", "A:\\evil.6", "A:\\evil._", "A:\\evil\\evil.evil", "A:\\..evil", "A:\\eVil.evil", "A:\\EVIL.evil", "A:\\ev_il.evil", "A:\\ev il.evil", "A:\\ev4il.evil", "A:\\e.evil", "A:\\ .evil", "A:\\6.evil", "A:\\_.evil", "a:\\evil.evil", "\\\\evil\\evil\\evil.evil", "A:\\evil.evil"], "nonMatches": ["\\\\evil\\|\\evil.evil", "\\\\evil\\\\\\evil.evil", "\\\\evil\\?\\evil.evil", "\\\\evil\\>\\evil.evil", "\\\\evil\\<\\evil.evil", "\\\\evil\\;\\evil.evil", "\\\\evil\\:\\evil.evil", "\\\\evil\\/\\evil.evil", "\\\\evil\\*\\evil.evil", "\\\\evil\\&\\evil.evil", "\\\\evil\\\\evil.evil", "\\\\|\\evil\\evil.evil", "\\\\\\\\evil\\evil.evil", "\\\\?\\evil\\evil.evil", "\\\\>\\evil\\evil.evil", "\\\\<\\evil\\evil.evil", "\\\\;\\evil\\evil.evil", "\\\\:\\evil\\evil.evil", "\\\\/\\evil\\evil.evil", "\\\\*\\evil\\evil.evil", "\\\\&\\evil\\evil.evil", "\\\\\\evil\\evil.evil", "A:\\evil.|", "A:\\evil.\\", "A:\\evil.?", "A:\\evil.>", "A:\\evil.<", "A:\\evil.;", "A:\\evil.:", "A:\\evil./", "A:\\evil.*", "A:\\evil.&", "A:\\evil.", "A:.evil", "A:\\|.evil", "A:\\\\.evil", "A:\\?.evil", "A:\\>.evil", "A:\\<.evil", "A:\\;.evil", "A:\\:.evil", "A:\\/.evil", "A:\\*.evil", "A:\\&.evil", "A:\\.evil"]}, {"regex": "sdgsdf", "exceptionStackTrace": null, "matches": ["sdgsdf"], "nonMatches": []}, {"regex": "^(?=(.*[a-z]){1,})(?=(.*[\\d]){1,})(?=(.*[\\W]){1,})(?!.*\\s).{7,30}$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaa", "_aaaaaa", "Aaaaaaa", "0aaaaaa", " aaaaaa", "aaaaaaa"]}, {"regex": "^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$", "exceptionStackTrace": null, "matches": ["0/00/0000", "00/0/0000", "0/0/0000"], "nonMatches": ["0/0/00000", "0/0/000", "0/000/0000", "0//0000", "000/0/0000", "/0/0000"]}, {"regex": "^\\+?\\(?\\d+\\)?(\\s|\\-|\\.)?\\d{1,3}(\\s|\\-|\\.)?\\d{4}$", "exceptionStackTrace": null, "matches": ["+(0) 00000", "+(0) 000 0000", "+(0)0 0000", "+(0 0 0000", "+(00) 0 0000", "+0) 0 0000", "(0) 0 0000", "000000", "+(0).0 0000", "+(0)-0 0000", "+(0) 0.0000", "+(0) 0-0000", "+(0) 0 0000"], "nonMatches": ["+(0) 0 00000", "+(0) 0 000", "+(0) 0  0000", "+(0) 0000 0000", "+(0)  0000", "+(0)  0 0000", "+(0)) 0 0000", "+() 0 0000", "+((0) 0 0000", "++(0) 0 0000"]}, {"regex": "^\\+?\\(?\\d+\\)?(\\s|\\-|\\.)?\\d{1,3}(\\s|\\-|\\.)?\\d{4}$", "exceptionStackTrace": null, "matches": ["+(0) 00000", "+(0) 000 0000", "+(0)0 0000", "+(0 0 0000", "+(00) 0 0000", "+0) 0 0000", "(0) 0 0000", "000000", "+(0).0 0000", "+(0)-0 0000", "+(0) 0.0000", "+(0) 0-0000", "+(0) 0 0000"], "nonMatches": ["+(0) 0 00000", "+(0) 0 000", "+(0) 0  0000", "+(0) 0000 0000", "+(0)  0000", "+(0)  0 0000", "+(0)) 0 0000", "+() 0 0000", "+((0) 0 0000", "++(0) 0 0000"]}, {"regex": "(((ht|f)tp(s?))\\://)?(\\bw{3}[^w]\\b)?[^w{4}][^\\@]([0-9a-zA-Z\\-]+\\.)+[a-zA-Z]{2,6}(\\:[0-9]+)?(/\\S*)?", "exceptionStackTrace": null, "matches": ["https://wwwaaaevil.AA:0/evil/evil", "https://wwwaaaevil.AA:0", "https://wwwaaaevil.AA:0/}", "https://wwwaaaevil.AA:0/{", "https://wwwaaaevil.AA:0/@", "https://wwwaaaevil.AA:0/:", "https://wwwaaaevil.AA:0//", "https://wwwaaaevil.AA:0/.", "https://wwwaaaevil.AA:0/-", "https://wwwaaaevil.AA:0/eVil", "https://wwwaaaevil.AA:0/EVIL", "https://wwwaaaevil.AA:0/ev_il", "https://wwwaaaevil.AA:0/ev il", "https://wwwaaaevil.AA:0/ev4il", "https://wwwaaaevil.AA:0/e", "https://wwwaaaevil.AA:0/ ", "https://wwwaaaevil.AA:0/6", "https://wwwaaaevil.AA:0/_", "https://wwwaaaevil.AA:0/", "https://wwwaaaevil.AA:0:0/evil", "https://wwwaaaevil.AA/evil", "https://wwwaaaevil.AA:00/evil", "https://wwwaaaevil.AA:/evil", "https://wwwaaaevil.AAAAAAA:0/evil", "https://wwwaaaevil.AAAAAA:0/evil", "https://wwwaaaevil.aA:0/evil", "https://wwwaaaevil.evil.AA:0/evil", "https://wwwaaa-.AA:0/evil", "https://wwwaaaeVil.AA:0/evil", "https://wwwaaaEVIL.AA:0/evil", "https://wwwaaaev_il.AA:0/evil", "https://wwwaaaev il.AA:0/evil", "https://wwwaaaev4il.AA:0/evil", "https://wwwaaae.AA:0/evil", "https://wwwaaa6.AA:0/evil", "https://wwwaaa.AA:0/evil", "https://wwwaa}evil.AA:0/evil", "https://wwwaa{evil.AA:0/evil", "https://wwwaaAevil.AA:0/evil", "https://wwwaa@evil.AA:0/evil", "https://wwwaa:evil.AA:0/evil", "https://wwwaa0evil.AA:0/evil", "https://wwwaa/evil.AA:0/evil", "https://wwwaa.evil.AA:0/evil", "https://wwwaa-evil.AA:0/evil", "https://wwwaa evil.AA:0/evil", "https://wwwa}aevil.AA:0/evil", "https://wwwa{aevil.AA:0/evil", "https://wwwawaevil.AA:0/evil", "https://wwwaAaevil.AA:0/evil", "https://wwwa@aevil.AA:0/evil", "https://wwwa:aevil.AA:0/evil", "https://wwwa4aevil.AA:0/evil", "https://wwwa0aevil.AA:0/evil", "https://wwwa/aevil.AA:0/evil", "https://wwwa.aevil.AA:0/evil", "https://wwwa-aevil.AA:0/evil", "https://wwwa aevil.AA:0/evil", "https://wwwawwwaaaevil.AA:0/evil", "https://aaevil.AA:0/evil", "https://www}aaevil.AA:0/evil", "https://www{aaevil.AA:0/evil", "https://wwwwaaevil.AA:0/evil", "https://wwwAaaevil.AA:0/evil", "https://www@aaevil.AA:0/evil", "https://www:aaevil.AA:0/evil", "https://www0aaevil.AA:0/evil", "https://www/aaevil.AA:0/evil", "https://www.aaevil.AA:0/evil", "https://www-aaevil.AA:0/evil", "https://www aaevil.AA:0/evil", "https://wwwwaaaevil.AA:0/evil", "https://wwaaaevil.AA:0/evil", "https://https://wwwaaaevil.AA:0/evil", "wwwaaaevil.AA:0/evil", "httpss://wwwaaaevil.AA:0/evil", "http://wwwaaaevil.AA:0/evil", "aaevil.AA", "ftps://wwwaaaevil.AA:0/evil", "https://wwwaaaevil.AA:0/evil"], "nonMatches": ["https://wwwaaaevil.A:0/evil", "https://wwwaaaAA:0/evil", "https://wwwaaa}.AA:0/evil", "https://wwwaaa{.AA:0/evil", "https://wwwaaa@.AA:0/evil", "https://wwwaaa:.AA:0/evil", "https://wwwaaa/.AA:0/evil", "https://wwwaaa..AA:0/evil", "https://wwwaaa .AA:0/evil", "https://wwwaaa_.AA:0/evil"]}, {"regex": "[\\t ]+", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\t"}, "matches": [], "nonMatches": []}, {"regex": "[\\s]+", "exceptionStackTrace": null, "matches": ["  ", " "], "nonMatches": [""]}, {"regex": "[A-Za-z]{5}", "exceptionStackTrace": null, "matches": ["aaaaaa", "Aaaaa", "aaaaa"], "nonMatches": ["aaaa"]}, {"regex": "[\\dA-Za-z]+", "exceptionStackTrace": null, "matches": ["eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", "6", "evil"], "nonMatches": [" ", "_", ""]}, {"regex": "[\\w!&quot;#$%&amp;&apos;()*+,./:;&lt;=&gt;?@[\\\\\\]`{|}~^-]+", "exceptionStackTrace": null, "matches": ["~", "}", "|", "{", "`", "^", "]", "\\", "[", "@", "?", "=", ";", ":", "/", ".", "-", ",", "+", "*", ")", "(", "&", "%", "$", "#", "!", "eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", "6", "_", "evil"], "nonMatches": [" ", ""]}, {"regex": "[A-Za-z]+", "exceptionStackTrace": null, "matches": ["eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", "evil"], "nonMatches": [" ", "6", "_", ""]}, {"regex": "^[[V|E|J|G]\\d\\d\\d\\d\\d\\d\\d\\d]{0,9}$", "exceptionStackTrace": null, "matches": ["G00000000]]]]]]]]]", "|00000000]", "[00000000]", "V00000000]", "J00000000]", "E00000000]", "G00000000", "G00000000]"], "nonMatches": ["G00000000]]]]]]]]]]", "A00000000]"]}, {"regex": "aCsefc", "exceptionStackTrace": null, "matches": ["aCsefc"], "nonMatches": []}, {"regex": "^([1-9]\\d{3}|0[1-9]\\d{2}|00[1-9]\\d{1}|000[1-9]{1})$", "exceptionStackTrace": null, "matches": ["0001", "0010", "0100", "1000"], "nonMatches": ["00011", "000", "00100", "001", "01000", "010", "10000", "100", "0000"]}, {"regex": "^([\\d]*[1-9]+[\\d]*)$", "exceptionStackTrace": null, "matches": ["0100", "01", "0110", "0010", "10", "1", "010"], "nonMatches": ["00", "000"]}, {"regex": "(^(\\d{2}\\x2E\\d{3}\\x2E\\d{3}[-]\\d{1})$|^(\\d{2}\\x2E\\d{3}\\x2E\\d{3})$)", "exceptionStackTrace": null, "matches": ["00.000.000", "00.000.000-0"], "nonMatches": ["00.000.0000", "00.000.00", "00.0000.000", "00.00.000", "000.000.000", "0.000.000", "00.000.000-00", "00.000.000-", "00.000.0000-0", "00.000.00-0", "00.0000.000-0", "00.00.000-0", "000.000.000-0", "0.000.000-0"]}, {"regex": "http://www.buyabortionpills.net/blog/the-difficulty-of-abortion-decision/", "exceptionStackTrace": null, "matches": ["http://wwwabuyabortionpillsAnet/blog/the-difficulty-of-abortion-decision/", "http://wwwabuyabortionpills:net/blog/the-difficulty-of-abortion-decision/", "http://wwwabuyabortionpills0net/blog/the-difficulty-of-abortion-decision/", "http://wwwabuyabortionpills/net/blog/the-difficulty-of-abortion-decision/", "http://wwwabuyabortionpills-net/blog/the-difficulty-of-abortion-decision/", "http://wwwabuyabortionpills net/blog/the-difficulty-of-abortion-decision/", "http://wwwAbuyabortionpillsanet/blog/the-difficulty-of-abortion-decision/", "http://www:buyabortionpillsanet/blog/the-difficulty-of-abortion-decision/", "http://www0buyabortionpillsanet/blog/the-difficulty-of-abortion-decision/", "http://www/buyabortionpillsanet/blog/the-difficulty-of-abortion-decision/", "http://www-buyabortionpillsanet/blog/the-difficulty-of-abortion-decision/", "http://www buyabortionpillsanet/blog/the-difficulty-of-abortion-decision/", "http://wwwabuyabortionpillsanet/blog/the-difficulty-of-abortion-decision/"], "nonMatches": []}, {"regex": "(?<email>[a-zA-Z][a-zA-Z0-9-_.]+\\@[a-zA-Z][a-zA-Z0-9-_]+\\.(?(?=[a-zA-Z]{2}\\.)([a-zA-Z0-9-_]{2}\\.[a-zA-Z0-9-_]{2})|([a-zA-Z0-9-_]{2,3})))", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<e"}, "matches": []}, {"regex": "^[http://www.|www.][\\S]+$", "exceptionStackTrace": null, "matches": [".|", ".:", "./", "..", ".eVil", ".EVIL", ".ev_il", ".ev4il", ".e", ".6", "._", "|evil", "wevil", "tevil", "pevil", "hevil", ":evil", "/evil", ".evil"], "nonMatches": [".ev il", ". ", ".", "aevil"]}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "[0](\\d{9})|([0](\\d{2})( |-|)((\\d{3}))( |-|)(\\d{4}))|[0](\\d{2})( |-|)(\\d{7})|(\\+|00|09)(\\d{2}|\\d{3})( |-|)(\\d{2})( |-|)((\\d{3}))( |-|)(\\d{4})", "exceptionStackTrace": null, "matches": ["+0000 00 000 0000", "+00 00 000 00000", "+00 000 000 0000", "000 00000000", "0000 0000000", "000 000 00000", "0000 000 0000", "00000000000", "+0000 000 0000", "+00 00000 0000", "+00 00 0000000", "000000 0000", "0900 00 000 0000", "0000 00 000 0000", "+000 00 000 0000", "+00-00 000 0000", "+00 00-000 0000", "+00 00 000-0000", "+00 00 000 0000", "000-0000000", "000 0000000", "000-000 0000", "000 000-0000", "000 000 0000", "0000000000"], "nonMatches": ["+00--00 000 0000", "+00 00--000 0000", "+00 00 000--0000", "+00 00 000 000", "+00 00 0000 0000", "+00 00 00 0000", "+00 0 000 0000", "+0 00 000 0000", "000--0000000", "000 000000", "00 0000000", "000--000 0000", "000 000--0000", "000 000 000", "000 0000 0000", "000 00 0000", "00 000 0000", "000000000"]}, {"regex": "<[\\w\\&quot;\\ &#39;\\#\\* \\=\\&#39;,\\.\\\\\\(\\)\\/\\-\\$\\{\\}\\[\\]\\|\\*\\?\\+\\^\\&\\:\\%\\;\\!]+>", "exceptionStackTrace": null, "matches": ["<}>", "<|>", "<{>", "<^>", "<]>", "<\\>", "<[>", "<?>", "<=>", "<;>", "<:>", "</>", "<.>", "<->", "<,>", "<+>", "<*>", "<)>", "<(>", "<&>", "<%>", "<$>", "<#>", "<!>", "<eVil>", "<EVIL>", "<ev_il>", "<ev il>", "<ev4il>", "<e>", "< >", "<6>", "<_>", "<evil>"], "nonMatches": ["<>>", "<<>", "<>"]}, {"regex": "((19|20)[\\d]{2}/[\\d]{6}/[\\d]{2})", "exceptionStackTrace": null, "matches": ["1900/000000/000", "2000/000000/00", "1900/000000/00"], "nonMatches": ["1900/000000/0", "1900/0000000/00", "1900/00000/00", "19000/000000/00", "190/000000/00"]}, {"regex": "[\\s]a[\\s]|[\\s]about[\\s]|[\\s]an[\\s]|[\\s]are[\\s]|[\\s]as[\\s]|[\\s]at[\\s]|[\\s]be[\\s]|[\\s]by[\\s]|[\\s]for[\\s]|[\\s]from[\\s]|[\\s]how[\\s]|[\\s]in[\\s]|[\\s]is[\\s]|[\\s]it[\\s]|[\\s]of[\\s]|[\\s]on[\\s]|[\\s]or[\\s]|[\\s]that[\\s]|[\\s]the[\\s]|[\\s]this[\\s]|[\\s]to[\\s]|[\\s]was[\\s]|[\\s]what[\\s]|[\\s]when[\\s]|[\\s]where[\\s]|[\\s]who[\\s]|[\\s]will[\\s]|[\\s]with[\\s]|[\\s]the[\\s]|[\\s]www[\\s]", "exceptionStackTrace": null, "matches": [" www ", " with ", " will ", " who ", " where ", " when ", " what ", " was ", " to ", " this ", " the ", " that ", " or ", " on ", " of ", " it ", " is ", " in ", " how ", " from ", " for ", " by ", " be ", " at ", " as ", " are ", " an ", " about ", " a "], "nonMatches": []}, {"regex": "(^0[87][23467]((\\d{7})|( |-)((\\d{3}))( |-)(\\d{4})|( |-)(\\d{7})))", "exceptionStackTrace": null, "matches": ["077 00000000", "077 000 00000", "07700000000", "0760000000", "0740000000", "0730000000", "0720000000", "0870000000", "077-0000000", "077 0000000", "077-000 0000", "077 000-0000", "077 000 0000", "0770000000"], "nonMatches": ["077 000000", "077 000 000", "077 0000 0000", "077 00 0000", "077000000", "0700000000", "0070000000"]}, {"regex": "[0](\\d{9})|([0](\\d{2})( |-)((\\d{3}))( |-)(\\d{4}))|[0](\\d{2})( |-)(\\d{7})", "exceptionStackTrace": null, "matches": ["000 00000000", "0000 0000000", "000 000 00000", "0000 000 0000", "00000000000", "000-0000000", "000 0000000", "000-000 0000", "000 000-0000", "000 000 0000", "0000000000"], "nonMatches": ["000 000000", "00 0000000", "000 000 000", "000 0000 0000", "000 00 0000", "00 000 0000", "000000000"]}, {"regex": "(((\\d{2}((0[13578]|1[02])(0[1-9]|[12]\\d|3[01])|(0[13456789]|1[012])(0[1-9]|[12]\\d|30)|02(0[1-9]|1\\d|2[0-8])))|([02468][048]|[13579][26])0229))(( |-)(\\d{4})( |-)(\\d{3})|(\\d{7}))", "exceptionStackTrace": null, "matches": ["920229 0000 000", "760229 0000 000", "560229 0000 000", "360229 0000 000", "160229 0000 000", "840229 0000 000", "800229 0000 000", "680229 0000 000", "480229 0000 000", "280229 0000 000", "080229 0000 000", "000229 0000 000", "000910 0000 000", "000601 0000 000", "000401 0000 000", "001101 0000 000", "001001 0000 000", "000830 0000 000", "000810 0000 000", "00080100000000", "000801 0000 0000", "000701 0000 000", "000501 0000 000", "000301 0000 000", "000101 0000 000", "0000801 0000 000", "960229 0000 000", "880229 0000 000", "000220 0000 000", "000210 0000 000", "000201 0000 000", "000930 0000 000", "000920 0000 000", "000901 0000 000", "001201 0000 000", "000831 0000 000", "000820 0000 000", "0008010000000", "000801-0000 000", "000801 0000-000", "000801 0000 000"], "nonMatches": ["900229 0000 000", "060229 0000 000", "810229 0000 000", "180229 0000 000", "000200 0000 000", "001301 0000 000", "000900 0000 000", "000832 0000 000", "000801000000", "000801 0000 00", "000801 00000 000", "000801 000 000", "000800 0000 000", "000001 0000 000", "00801 0000 000"]}, {"regex": "\\w+?\\s\\w+?\\(([\\w\\s=]+,*|[\\w\\s=]+|(?R))*\\);", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?R"}, "matches": []}, {"regex": "^(([A-Za-z][A-Za-z0-9.+]*?){1,}?)(,\\s?([^/\\\\:*?&quot;<>|]*((,\\s?(Version=(\\d\\.?){1,4}|Culture=(neutral|\\w{2}-\\w{2})|PublicKeyToken=[a-f0-9]{16})(,\\s?)?){3}|))){0,1}$", "exceptionStackTrace": null, "matches": ["aevil, evil, PublicKeyToken=a000000000000000, , PublicKeyToken=0000000000000000, , PublicKeyToken=0000000000000000, ", "aevil, evil, Culture=aa-_a, , Culture=aa-aa, , Culture=aa-aa, ", "aevil, evil, Culture=aa-Aa, , Culture=aa-aa, , Culture=aa-aa, ", "aevil, evil, Culture=aa-0a, , Culture=aa-aa, , Culture=aa-aa, ", "aevil, evil, Culture=_a-aa, , Culture=aa-aa, , Culture=aa-aa, ", "aevil, evil, Culture=Aa-aa, , Culture=aa-aa, , Culture=aa-aa, ", "aevil, evil, Culture=0a-aa, , Culture=aa-aa, , Culture=aa-aa, ", "aevil", "aevil, evil", "aevil, evil, Version=0., Version=0., , Version=0., ", "aevil, evil, Version=0.,, Version=0., , Version=0., ", "aevil, evil, Version=0.0.0.0., , Version=0., , Version=0., ", "aevil, evil, Version=0, , Version=0., , Version=0., ", "aevil, evil,Version=0., , Version=0., , Version=0., ", "aevil, =, Version=0., , Version=0., , Version=0., ", "aevil, ., Version=0., , Version=0., , Version=0., ", "aevil, -, Version=0., , Version=0., , Version=0., ", "aevil, ,, Version=0., , Version=0., , Version=0., ", "aevil, +, Version=0., , Version=0., , Version=0., ", "aevil, eVil, Version=0., , Version=0., , Version=0., ", "aevil, EVIL, Version=0., , Version=0., , Version=0., ", "aevil, ev_il, Version=0., , Version=0., , Version=0., ", "aevil, ev il, Version=0., , Version=0., , Version=0., ", "aevil, ev4il, Version=0., , Version=0., , Version=0., ", "aevil, e, Version=0., , Version=0., , Version=0., ", "aevil,  , Version=0., , Version=0., , Version=0., ", "aevil, 6, Version=0., , Version=0., , Version=0., ", "aevil, _, Version=0., , Version=0., , Version=0., ", "aevil, , Version=0., , Version=0., , Version=0., ", "aevil,  evil, Version=0., , Version=0., , Version=0., ", "aevil,evil, Version=0., , Version=0., , Version=0., ", "aevilaevil, evil, Version=0., , Version=0., , Version=0., ", "a., evil, Version=0., , Version=0., , Version=0., ", "a,, evil, Version=0., , Version=0., , Version=0., ", "a+, evil, Version=0., , Version=0., , Version=0., ", "aeVil, evil, Version=0., , Version=0., , Version=0., ", "aEVIL, evil, Version=0., , Version=0., , Version=0., ", "aev4il, evil, Version=0., , Version=0., , Version=0., ", "ae, evil, Version=0., , Version=0., , Version=0., ", "a6, evil, Version=0., , Version=0., , Version=0., ", "a, evil, Version=0., , Version=0., , Version=0., ", "Aevil, evil, Version=0., , Version=0., , Version=0., ", "a", "aevil, evil, PublicKeyToken=0000000000000000, , PublicKeyToken=0000000000000000, , PublicKeyToken=0000000000000000, ", "aevil, evil, Culture=aa-aa, , Culture=aa-aa, , Culture=aa-aa, ", "aevil, evil, Culture=neutral, , Culture=neutral, , Culture=neutral, ", "aevil, evil, Version=0., , Version=0., , Version=0., "], "nonMatches": ["aevil, evil, PublicKeyToken=00000000000000000, , PublicKeyToken=0000000000000000, , PublicKeyToken=0000000000000000, ", "aevil, evil, PublicKeyToken=000000000000000, , PublicKeyToken=0000000000000000, , PublicKeyToken=0000000000000000, ", "aevil, evil, PublicKeyToken=g000000000000000, , PublicKeyToken=0000000000000000, , PublicKeyToken=0000000000000000, ", "aevil, evil, Culture=aa-aaa, , Culture=aa-aa, , Culture=aa-aa, ", "aevil, evil, Culture=aa-a, , Culture=aa-aa, , Culture=aa-aa, ", "aevil, evil, Culture=aaa-aa, , Culture=aa-aa, , Culture=aa-aa, ", "aevil, evil, Culture=a-aa, , Culture=aa-aa, , Culture=aa-aa, ", "aevil, evil, Version=0., , Version=0., , Version=0., , evil, Version=0., , Version=0., , Version=0., ", "aevil, evil, Version=0., , Version=0., , Version=0., , Version=0., , Version=0., , Version=0., ", "aevil, evil, Version=0., , Version=0., , Version=0., , Version=0., ", "aevil, evil, Version=0., , Version=0., ", "aevil, evil, Version=0., , , Version=0., , Version=0., ", "aevil, evil, Version=0.,  , Version=0., , Version=0., ", "aevil, evil, Version=0.0.0.0.0., , Version=0., , Version=0., ", "aevil, evil, Version=, , Version=0., , Version=0., ", "aevil, evil, Version=0.., , Version=0., , Version=0., ", "aevil, evil,  Version=0., , Version=0., , Version=0., ", "aevil, |, Version=0., , Version=0., , Version=0., ", "aevil, \\, Version=0., , Version=0., , Version=0., ", "aevil, ?, Version=0., , Version=0., , Version=0., ", "aevil, >, Version=0., , Version=0., , Version=0., ", "aevil, <, Version=0., , Version=0., , Version=0., ", "aevil, ;, Version=0., , Version=0., , Version=0., ", "aevil, :, Version=0., , Version=0., , Version=0., ", "aevil, /, Version=0., , Version=0., , Version=0., ", "aevil, *, Version=0., , Version=0., , Version=0., ", "aevil, &, Version=0., , Version=0., , Version=0., ", ", evil, Version=0., , Version=0., , Version=0., ", "a|, evil, Version=0., , Version=0., , Version=0., ", "a\\, evil, Version=0., , Version=0., , Version=0., ", "a?, evil, Version=0., , Version=0., , Version=0., ", "a>, evil, Version=0., , Version=0., , Version=0., ", "a=, evil, Version=0., , Version=0., , Version=0., ", "a<, evil, Version=0., , Version=0., , Version=0., ", "a;, evil, Version=0., , Version=0., , Version=0., ", "a:, evil, Version=0., , Version=0., , Version=0., ", "a/, evil, Version=0., , Version=0., , Version=0., ", "a-, evil, Version=0., , Version=0., , Version=0., ", "a*, evil, Version=0., , Version=0., , Version=0., ", "a&, evil, Version=0., , Version=0., , Version=0., ", "aev_il, evil, Version=0., , Version=0., , Version=0., ", "aev il, evil, Version=0., , Version=0., , Version=0., ", "a , evil, Version=0., , Version=0., , Version=0., ", "a_, evil, Version=0., , Version=0., , Version=0., "]}, {"regex": "^(?<Assembly>(?<AssemblyName>[^\\W/\\\\:*?&quot;<>|,]+)(?:(?:,\\s?(?:(?<Version>Version=(?<VersionValue>(?:\\d{1,2}\\.?){1,4}))|(?<Culture>Culture=(?<CultureValue>neutral|\\w{2}-\\w{2}))|(?<PublicKeyToken>PublicKeyToken=(?<PublicKeyTokenValue>[A-Fa-f0-9]{16})))(?:,\\s?)?){3}|))$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<A"}, "matches": []}, {"regex": "^(?<Namespace>(?:[\\w][\\w\\d]*\\.?)*)\\.(?<Class>[\\w][\\w\\d<>]*(?:(?:\\+[\\w][\\w\\d<>]*)+|))(?:|,\\W?(?<Assembly>(?<AssemblyName>[^\\W/\\\\:*?&quot;<>|]+)(?:$|(?:,\\W?(?:(?<Version>Version=(?<VersionValue>(?:\\d{1,2}\\.?){1,4}))|(?<Culture>Culture=(?<CultureValue>neutral|\\w{2}-\\w{2}))|(?<PublicKeyToken>PublicKeyToken=(?<PublicKeyTokenValue>[A-Fa-f0-9]{16})))(?:,\\W?)?){3})))$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<N"}, "matches": []}, {"regex": "^([a-zA-Z0-9]+[._-])*[a-zA-Z0-9]+@(([a-zA-Z0-9]+|([a-zA-Z0-9]+[.-])+)[a-zA-Z0-9]+\\.[a-zA-Z]{2,4}|([a-zA-Z]\\.com))$", "exceptionStackTrace": null, "matches": ["evil-evil@a.com", "evil-evil@evil-evil-evil.AA", "evil-evil@evil.evil.AA", "evil-evil@eVil-evil.AA", "evil-evil@EVIL-evil.AA", "evil-evil@ev4il-evil.AA", "evil-evil@e-evil.AA", "evil-evil@6-evil.AA", "evil-evil@evilevil.AAAA", "evil-evil@evilevil.aA", "evil-evil@evileVil.AA", "evil-evil@evilEVIL.AA", "evil-evil@evilev4il.AA", "evil-evil@evile.AA", "evil-evil@evil6.AA", "evil-evil@eVilevil.AA", "evil-evil@EVILevil.AA", "evil-evil@ev4ilevil.AA", "evil-evil@eevil.AA", "evil-evil@6evil.AA", "evil-evil@evil.AA", "evil-eVil@evilevil.AA", "evil-EVIL@evilevil.AA", "evil-ev_il@evilevil.AA", "evil-ev4il@evilevil.AA", "evil-e@evilevil.AA", "evil-6@evilevil.AA", "evil-evil-evil@evilevil.AA", "evil_evil@evilevil.AA", "evil.evil@evilevil.AA", "eVil-evil@evilevil.AA", "EVIL-evil@evilevil.AA", "ev_il-evil@evilevil.AA", "ev4il-evil@evilevil.AA", "e-evil@evilevil.AA", "6-evil@evilevil.AA", "evil@A.com", "evil@evil-evil.AA", "evil@evilevil.AA", "evil-evil@A.com", "evil-evil@evil-evil.AA", "evil-evil@evilevil.AA"], "nonMatches": ["evil-evil@ev_il-evil.AA", "evil-evil@ev il-evil.AA", "evil-evil@ -evil.AA", "evil-evil@_-evil.AA", "evil-evil@-evil.AA", "evil-evil@evilevil.AAAAA", "evil-evil@evilevil.A", "evil-evil@evilev_il.AA", "evil-evil@evilev il.AA", "evil-evil@evil .AA", "evil-evil@evil_.AA", "evil-evil@ev_ilevil.AA", "evil-evil@ev ilevil.AA", "evil-evil@ evil.AA", "evil-evil@_evil.AA", "evil-ev il@evilevil.AA", "evil- @evilevil.AA", "evil-_@evilevil.AA", "evil-@evilevil.AA", "ev il-evil@evilevil.AA", " -evil@evilevil.AA", "_-evil@evilevil.AA", "-evil@evilevil.AA"]}, {"regex": "^([A-Za-z]){1}([A-Za-z0-9-_.\\:])+$", "exceptionStackTrace": null, "matches": ["a::", "aa", "a_", "aA", "a0", "a.", "a-", "aa:", "A:", "a:"], "nonMatches": ["a", ":"]}, {"regex": "^(\\+{1}|00)\\s{0,1}([0-9]{3}|[0-9]{2})\\s{0,1}\\-{0,1}\\s{0,1}([0-9]{2}|[1-9]{1})\\s{0,1}\\-{0,1}\\s{0,1}([0-9]{8}|[0-9]{7})", "exceptionStackTrace": null, "matches": ["+ 000 - 11 - 00000000", "+ 000 - 00 - 000000000", "+ 000 - 00 -00000000", "+ 000 - 00  00000000", "+ 000 - 00- 00000000", "+ 000 -00 - 00000000", "+ 000  00 - 00000000", "+ 000- 00 - 00000000", "+000 - 00 - 00000000", "000000000000000", "+000100000000", "+000000000000", "+0000000000000", "00 000 - 00 - 00000000", "+ 00 - 00 - 00000000", "+ 000 - 1 - 00000000", "+ 000 - 00 - 0000000", "+ 000 - 00 - 00000000"], "nonMatches": ["+ 0 - 00 - 00000000", "+ 000 -  - 00000000", "+ 000 - 00 - 000000", "+ 000 - 00 -  00000000", "+ 000 - 00 -- 00000000", "+ 000 - 00  - 00000000", "+ 000 - 000 - 00000000", "+ 000 - 0 - 00000000", "+ 000 -  00 - 00000000", "+ 000 -- 00 - 00000000", "+ 000  - 00 - 00000000", "+ 0000 - 00 - 00000000", "+  000 - 00 - 00000000", "++ 000 - 00 - 00000000", " 000 - 00 - 00000000"]}, {"regex": "[^]", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unterminated character set"}, "matches": []}, {"regex": "(1)?-?\\(?\\s*([0-9]{3})\\s*\\)?\\s*-?([0-9]{3})\\s*-?\\s*([0-9]{4})\\s*", "exceptionStackTrace": null, "matches": ["1-( 000 ) -000 - 0000  ", "1-( 000 ) -000 - 0000", "1-( 000 ) -000 - 00000 ", "1-( 000 ) -000 -  0000 ", "1-( 000 ) -000 -0000 ", "1-( 000 ) -000  0000 ", "1-( 000 ) -000  - 0000 ", "1-( 000 ) -000- 0000 ", "1-( 000 ) 000 - 0000 ", "1-( 000 )  -000 - 0000 ", "1-( 000 )-000 - 0000 ", "1-( 000  -000 - 0000 ", "1-( 000  ) -000 - 0000 ", "1-( 000) -000 - 0000 ", "1-( 0000 ) -000 - 0000 ", "1-(  000 ) -000 - 0000 ", "1-(000 ) -000 - 0000 ", "1-(( 000 ) -000 - 0000 ", "1- 000 ) -000 - 0000 ", "1--( 000 ) -000 - 0000 ", "1( 000 ) -000 - 0000 ", "11-( 000 ) -000 - 0000 ", "-( 000 ) -000 - 0000 ", "0000000000", "1-( 000 ) -000 - 0000 "], "nonMatches": ["1-( 000 ) -000 - 000 ", "1-( 000 ) -000 -- 0000 ", "1-( 000 ) -0000 - 0000 ", "1-( 000 ) -00 - 0000 ", "1-( 000 ) --000 - 0000 ", "1-( 000 )) -000 - 0000 ", "1-( 00 ) -000 - 0000 "]}, {"regex": "Yahoo has always been the renowned webmail service providers. Its amazing features and mail service has provided an immense assistance to make it a success platform.", "exceptionStackTrace": null, "matches": ["Yahoo has always been the renowned webmail service providersa Its amazing features and mail service has provided an immense assistance to make it a success platform_", "Yahoo has always been the renowned webmail service providersa Its amazing features and mail service has provided an immense assistance to make it a success platformA", "Yahoo has always been the renowned webmail service providersa Its amazing features and mail service has provided an immense assistance to make it a success platform0", "Yahoo has always been the renowned webmail service providersa Its amazing features and mail service has provided an immense assistance to make it a success platform ", "Yahoo has always been the renowned webmail service providers_ Its amazing features and mail service has provided an immense assistance to make it a success platforma", "Yahoo has always been the renowned webmail service providersA Its amazing features and mail service has provided an immense assistance to make it a success platforma", "Yahoo has always been the renowned webmail service providers0 Its amazing features and mail service has provided an immense assistance to make it a success platforma", "Yahoo has always been the renowned webmail service providers  Its amazing features and mail service has provided an immense assistance to make it a success platforma", "Yahoo has always been the renowned webmail service providersa Its amazing features and mail service has provided an immense assistance to make it a success platforma"], "nonMatches": []}, {"regex": "^([a-zA-Z,#/ \\.\\(\\)\\-\\+\\*]*[0-9]){7}[0-9a-zA-Z,#/ \\.\\(\\)\\-\\+\\*]*$", "exceptionStackTrace": null, "matches": ["evil0evil0evil0evil0evil0evil0evil0/", "evil0evil0evil0evil0evil0evil0evil0.", "evil0evil0evil0evil0evil0evil0evil0-", "evil0evil0evil0evil0evil0evil0evil0,", "evil0evil0evil0evil0evil0evil0evil0+", "evil0evil0evil0evil0evil0evil0evil0*", "evil0evil0evil0evil0evil0evil0evil0)", "evil0evil0evil0evil0evil0evil0evil0(", "evil0evil0evil0evil0evil0evil0evil0#", "evil0evil0evil0evil0evil0evil0evil0eVil", "evil0evil0evil0evil0evil0evil0evil0EVIL", "evil0evil0evil0evil0evil0evil0evil0ev il", "evil0evil0evil0evil0evil0evil0evil0ev4il", "evil0evil0evil0evil0evil0evil0evil0e", "evil0evil0evil0evil0evil0evil0evil0 ", "evil0evil0evil0evil0evil0evil0evil06", "evil0evil0evil0evil0evil0evil0evil0", "evil0evil0evil0evil0evil0evil0evil0evil0evil", "/0evil0evil0evil0evil0evil0evil0evil", ".0evil0evil0evil0evil0evil0evil0evil", "-0evil0evil0evil0evil0evil0evil0evil", ",0evil0evil0evil0evil0evil0evil0evil", "+0evil0evil0evil0evil0evil0evil0evil", "*0evil0evil0evil0evil0evil0evil0evil", ")0evil0evil0evil0evil0evil0evil0evil", "(0evil0evil0evil0evil0evil0evil0evil", "#0evil0evil0evil0evil0evil0evil0evil", "eVil0evil0evil0evil0evil0evil0evil0evil", "EVIL0evil0evil0evil0evil0evil0evil0evil", "ev il0evil0evil0evil0evil0evil0evil0evil", "ev4il0evil0evil0evil0evil0evil0evil0evil", "e0evil0evil0evil0evil0evil0evil0evil", " 0evil0evil0evil0evil0evil0evil0evil", "60evil0evil0evil0evil0evil0evil0evil", "0evil0evil0evil0evil0evil0evil0evil", "0evil0evil0evil0evil0evil0evil0", "evil0evil0evil0evil0evil0evil0evil0evil"], "nonMatches": ["evil0evil0evil0evil0evil0evil0evil0ev_il", "evil0evil0evil0evil0evil0evil0evil0_", "evil0evil0evil0evil0evil0evil0evil", "ev_il0evil0evil0evil0evil0evil0evil0evil", "_0evil0evil0evil0evil0evil0evil0evil"]}, {"regex": "^([a-zA-Z,#/ \\.\\(\\)\\-\\+\\*]*[2-9])([a-zA-Z,#/ \\.\\(\\)\\-\\+\\*]*[0-9]){2}([a-zA-Z,#/ \\.\\(\\)\\-\\+\\*]*[2-9])([a-zA-Z,#/ \\.\\(\\)\\-\\+\\*]*[0-9]){6}[0-9a-zA-Z,#/ \\.\\(\\)\\-\\+\\*]*$", "exceptionStackTrace": null, "matches": ["evil2evil0evil0evil2evil0evil0evil0evil0evil0evil0/", "evil2evil0evil0evil2evil0evil0evil0evil0evil0evil0.", "evil2evil0evil0evil2evil0evil0evil0evil0evil0evil0-", "evil2evil0evil0evil2evil0evil0evil0evil0evil0evil0,", "evil2evil0evil0evil2evil0evil0evil0evil0evil0evil0+", "evil2evil0evil0evil2evil0evil0evil0evil0evil0evil0*", "evil2evil0evil0evil2evil0evil0evil0evil0evil0evil0)", "evil2evil0evil0evil2evil0evil0evil0evil0evil0evil0(", "evil2evil0evil0evil2evil0evil0evil0evil0evil0evil0#", "evil2evil0evil0evil2evil0evil0evil0evil0evil0evil0eVil", "evil2evil0evil0evil2evil0evil0evil0evil0evil0evil0EVIL", "evil2evil0evil0evil2evil0evil0evil0evil0evil0evil0ev il", "evil2evil0evil0evil2evil0evil0evil0evil0evil0evil0ev4il", "evil2evil0evil0evil2evil0evil0evil0evil0evil0evil0e", "evil2evil0evil0evil2evil0evil0evil0evil0evil0evil0 ", "evil2evil0evil0evil2evil0evil0evil0evil0evil0evil06", "evil2evil0evil0evil2evil0evil0evil0evil0evil0evil0", "evil2evil0evil0evil2evil0evil0evil0evil0evil0evil0evil0evil", "evil2evil0evil0evil2/0evil0evil0evil0evil0evil0evil", "evil2evil0evil0evil2.0evil0evil0evil0evil0evil0evil", "evil2evil0evil0evil2-0evil0evil0evil0evil0evil0evil", "evil2evil0evil0evil2,0evil0evil0evil0evil0evil0evil", "evil2evil0evil0evil2+0evil0evil0evil0evil0evil0evil", "evil2evil0evil0evil2*0evil0evil0evil0evil0evil0evil", "evil2evil0evil0evil2)0evil0evil0evil0evil0evil0evil", "evil2evil0evil0evil2(0evil0evil0evil0evil0evil0evil", "evil2evil0evil0evil2#0evil0evil0evil0evil0evil0evil", "evil2evil0evil0evil2eVil0evil0evil0evil0evil0evil0evil", "evil2evil0evil0evil2EVIL0evil0evil0evil0evil0evil0evil", "evil2evil0evil0evil2ev il0evil0evil0evil0evil0evil0evil", "evil2evil0evil0evil2ev4il0evil0evil0evil0evil0evil0evil", "evil2evil0evil0evil2e0evil0evil0evil0evil0evil0evil", "evil2evil0evil0evil2 0evil0evil0evil0evil0evil0evil", "evil2evil0evil0evil260evil0evil0evil0evil0evil0evil", "evil2evil0evil0evil20evil0evil0evil0evil0evil0evil", "evil2evil0evil0/2evil0evil0evil0evil0evil0evil0evil", "evil2evil0evil0.2evil0evil0evil0evil0evil0evil0evil", "evil2evil0evil0-2evil0evil0evil0evil0evil0evil0evil", "evil2evil0evil0,2evil0evil0evil0evil0evil0evil0evil", "evil2evil0evil0+2evil0evil0evil0evil0evil0evil0evil", "evil2evil0evil0*2evil0evil0evil0evil0evil0evil0evil", "evil2evil0evil0)2evil0evil0evil0evil0evil0evil0evil", "evil2evil0evil0(2evil0evil0evil0evil0evil0evil0evil", "evil2evil0evil0#2evil0evil0evil0evil0evil0evil0evil", "evil2evil0evil0eVil2evil0evil0evil0evil0evil0evil0evil", "evil2evil0evil0EVIL2evil0evil0evil0evil0evil0evil0evil", "evil2evil0evil0ev il2evil0evil0evil0evil0evil0evil0evil", "evil2evil0evil0ev4il2evil0evil0evil0evil0evil0evil0evil", "evil2evil0evil0e2evil0evil0evil0evil0evil0evil0evil", "evil2evil0evil0 2evil0evil0evil0evil0evil0evil0evil", "evil2evil0evil062evil0evil0evil0evil0evil0evil0evil", "evil2evil0evil02evil0evil0evil0evil0evil0evil0evil", "evil2/0evil0evil2evil0evil0evil0evil0evil0evil0evil", "evil2.0evil0evil2evil0evil0evil0evil0evil0evil0evil", "evil2-0evil0evil2evil0evil0evil0evil0evil0evil0evil", "evil2,0evil0evil2evil0evil0evil0evil0evil0evil0evil", "evil2+0evil0evil2evil0evil0evil0evil0evil0evil0evil", "evil2*0evil0evil2evil0evil0evil0evil0evil0evil0evil", "evil2)0evil0evil2evil0evil0evil0evil0evil0evil0evil", "evil2(0evil0evil2evil0evil0evil0evil0evil0evil0evil", "evil2#0evil0evil2evil0evil0evil0evil0evil0evil0evil", "evil2eVil0evil0evil2evil0evil0evil0evil0evil0evil0evil", "evil2EVIL0evil0evil2evil0evil0evil0evil0evil0evil0evil", "evil2ev il0evil0evil2evil0evil0evil0evil0evil0evil0evil", "evil2e0evil0evil2evil0evil0evil0evil0evil0evil0evil", "evil2 0evil0evil2evil0evil0evil0evil0evil0evil0evil", "evil20evil0evil2evil0evil0evil0evil0evil0evil0evil", "/2evil0evil0evil2evil0evil0evil0evil0evil0evil0evil", ".2evil0evil0evil2evil0evil0evil0evil0evil0evil0evil", "-2evil0evil0evil2evil0evil0evil0evil0evil0evil0evil", ",2evil0evil0evil2evil0evil0evil0evil0evil0evil0evil", "+2evil0evil0evil2evil0evil0evil0evil0evil0evil0evil", "*2evil0evil0evil2evil0evil0evil0evil0evil0evil0evil", ")2evil0evil0evil2evil0evil0evil0evil0evil0evil0evil", "(2evil0evil0evil2evil0evil0evil0evil0evil0evil0evil", "#2evil0evil0evil2evil0evil0evil0evil0evil0evil0evil", "eVil2evil0evil0evil2evil0evil0evil0evil0evil0evil0evil", "EVIL2evil0evil0evil2evil0evil0evil0evil0evil0evil0evil", "ev il2evil0evil0evil2evil0evil0evil0evil0evil0evil0evil", "e2evil0evil0evil2evil0evil0evil0evil0evil0evil0evil", " 2evil0evil0evil2evil0evil0evil0evil0evil0evil0evil", "2evil0evil0evil2evil0evil0evil0evil0evil0evil0evil", "20evil020evil0evil0evil0evil0evil0", "evil2evil0evil0evil2evil0evil0evil0evil0evil0evil0evil"], "nonMatches": ["evil2evil0evil0evil2evil0evil0evil0evil0evil0evil0ev_il", "evil2evil0evil0evil2evil0evil0evil0evil0evil0evil0_", "evil2evil0evil0evil2evil0evil0evil0evil0evil0evil", "evil2evil0evil0evil2ev_il0evil0evil0evil0evil0evil0evil", "evil2evil0evil0evil2_0evil0evil0evil0evil0evil0evil", "evil2evil0evil0evil0evil0evil0evil0evil0evil0evil0evil", "evil2evil0evil0ev_il2evil0evil0evil0evil0evil0evil0evil", "evil2evil0evil0_2evil0evil0evil0evil0evil0evil0evil", "evil2evil0evil0evil0evil2evil0evil0evil0evil0evil0evil0evil", "evil2evil0evil2evil0evil0evil0evil0evil0evil0evil", "evil2ev_il0evil0evil2evil0evil0evil0evil0evil0evil0evil", "evil2ev4il0evil0evil2evil0evil0evil0evil0evil0evil0evil", "evil260evil0evil2evil0evil0evil0evil0evil0evil0evil", "evil2_0evil0evil2evil0evil0evil0evil0evil0evil0evil", "evil0evil0evil0evil2evil0evil0evil0evil0evil0evil0evil", "ev_il2evil0evil0evil2evil0evil0evil0evil0evil0evil0evil", "ev4il2evil0evil0evil2evil0evil0evil0evil0evil0evil0evil", "62evil0evil0evil2evil0evil0evil0evil0evil0evil0evil", "_2evil0evil0evil2evil0evil0evil0evil0evil0evil0evil"]}, {"regex": "^[\\w-]+(\\.[\\w-]+)*@([a-z0-9-]+(\\.[a-z0-9-]+)*?\\.[a-z]{2,6}|(\\d{1,3}\\.){3}\\d{1,3})(:\\d{4})?$", "exceptionStackTrace": null, "matches": ["evil.evil@0.0.0.000:0000", "evil.evil@000.0.0.0:0000", "evil.evil@evil.evil.aa", "evil.evil@evil.evil.aaaaaa:0000", "evil.evil@evil.evil.evil.aa:0000", "evil.evil@evil.aa:0000", "evil.evil@evil.-.aa:0000", "evil.evil@evil.ev4il.aa:0000", "evil.evil@evil.e.aa:0000", "evil.evil@evil.6.aa:0000", "evil.evil@-.evil.aa:0000", "evil.evil@ev4il.evil.aa:0000", "evil.evil@e.evil.aa:0000", "evil.evil@6.evil.aa:0000", "evil.evil.evil@evil.evil.aa:0000", "evil@evil.evil.aa:0000", "evil.-@evil.evil.aa:0000", "evil.eVil@evil.evil.aa:0000", "evil.EVIL@evil.evil.aa:0000", "evil.ev_il@evil.evil.aa:0000", "evil.ev4il@evil.evil.aa:0000", "evil.e@evil.evil.aa:0000", "evil.6@evil.evil.aa:0000", "evil._@evil.evil.aa:0000", "-.evil@evil.evil.aa:0000", "eVil.evil@evil.evil.aa:0000", "EVIL.evil@evil.evil.aa:0000", "ev_il.evil@evil.evil.aa:0000", "ev4il.evil@evil.evil.aa:0000", "e.evil@evil.evil.aa:0000", "6.evil@evil.evil.aa:0000", "_.evil@evil.evil.aa:0000", "evil@0.0.0.0", "evil@evil.aa", "evil.evil@0.0.0.0:0000", "evil.evil@evil.evil.aa:0000"], "nonMatches": ["evil.evil@0.0.0.0000:0000", "evil.evil@0.0.0.:0000", "evil.evil@0.0.0.0.0:0000", "evil.evil@0.0.0:0000", "evil.evil@0000.0.0.0:0000", "evil.evil@.0.0.0:0000", "evil.evil@evil.evil.aa:0000:0000", "evil.evil@evil.evil.aa:00000", "evil.evil@evil.evil.aa:000", "evil.evil@evil.evil.aaaaaaa:0000", "evil.evil@evil.evil.a:0000", "evil.evil@evil.@.aa:0000", "evil.evil@evil.:.aa:0000", "evil.evil@evil...aa:0000", "evil.evil@evil.eVil.aa:0000", "evil.evil@evil.EVIL.aa:0000", "evil.evil@evil.ev_il.aa:0000", "evil.evil@evil.ev il.aa:0000", "evil.evil@evil. .aa:0000", "evil.evil@evil._.aa:0000", "evil.evil@evil..aa:0000", "evil.evil@@.evil.aa:0000", "evil.evil@:.evil.aa:0000", "evil.evil@..evil.aa:0000", "evil.evil@eVil.evil.aa:0000", "evil.evil@EVIL.evil.aa:0000", "evil.evil@ev_il.evil.aa:0000", "evil.evil@ev il.evil.aa:0000", "evil.evil@ .evil.aa:0000", "evil.evil@_.evil.aa:0000", "evil.evil@.evil.aa:0000", "evil.@@evil.evil.aa:0000", "evil.:@evil.evil.aa:0000", "evil..@evil.evil.aa:0000", "evil.ev il@evil.evil.aa:0000", "evil. @evil.evil.aa:0000", "evil.@evil.evil.aa:0000", "@.evil@evil.evil.aa:0000", ":.evil@evil.evil.aa:0000", "..evil@evil.evil.aa:0000", "ev il.evil@evil.evil.aa:0000", " .evil@evil.evil.aa:0000", ".evil@evil.evil.aa:0000"]}, {"regex": "^([A-PR-UWYZ0-9][A-HK-Y0-9][AEHMNPRTVXY0-9]?[ABEHMNPRVWXY0-9]? {1,2}[0-9][ABD-HJLN-UW-Z]{2}|GIR 0AA)$", "exceptionStackTrace": null, "matches": ["Z0YY 0WL", "Z0YY 0NL", "Z0YY 0JL", "Z0YY 0DL", "Z0YY 0BL", "Z0YY 0AL", "Z0YY  0LL", "Z0YX 0LL", "Z0YW 0LL", "Z0YV 0LL", "Z0YR 0LL", "Z0YP 0LL", "Z0YN 0LL", "Z0YM 0LL", "Z0YH 0LL", "Z0YE 0LL", "Z0YB 0LL", "Z0YA 0LL", "Z0Y0 0LL", "Z0Y 0LL", "Z0XY 0LL", "Z0VY 0LL", "Z0TY 0LL", "Z0RY 0LL", "Z0PY 0LL", "Z0NY 0LL", "Z0MY 0LL", "Z0HY 0LL", "Z0EY 0LL", "Z0AY 0LL", "Z00Y 0LL", "ZKYY 0LL", "ZAYY 0LL", "Y0YY 0LL", "W0YY 0LL", "R0YY 0LL", "A0YY 0LL", "00YY 0LL", "Z0 0LL", "GIR 0AA", "Z0YY 0LL"], "nonMatches": ["Z0YY 0LLL", "Z0YY 0L", "Z0YY 0CL", "Z0YY   0LL", "Z0YY0LL", "Z0YC 0LL", "Z0YYY 0LL", "Z0BY 0LL", "ZIYY 0LL", "Q0YY 0LL"]}, {"regex": "fvdvgdr", "exceptionStackTrace": null, "matches": ["fvdvgdr"], "nonMatches": []}, {"regex": "^([0-9]*)+(,[0-9]+)+$", "exceptionStackTrace": null, "matches": ["0,0,0", "0,00", "00,0", ",0", "0,0"], "nonMatches": ["0", "0,"]}, {"regex": "&lt;[aA][ ]{0,}([a-zA-Z0-9&quot;&#39;_,.:;!?@$&amp;()%=/ ]|[-]|[\t\\f]){0,}&gt;((&lt;(([a-zA-Z0-9&quot;&#39;_,.:;!?@$&amp;()%=/ ]|[-]|[\t\\f]){0,})&gt;([a-zA-Z0-9&quot;&#39;_,.:;!?@$&amp;()%=/ ]|[-]|[\t\\f]){0,})|(([a-zA-Z0-9&quot;&#39;_,.:;!?@$&amp;()%=/ ]|[-]|[\t\\f]){0,})){0,}", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\f"}, "matches": [], "nonMatches": []}, {"regex": "(?=(.*\\d.*){2,})(?=(.*[a-zA-Z].*){6,})", "exceptionStackTrace": null, "matches": [], "nonMatches": [""]}, {"regex": "<(?<tag>\\w+)\\s*?\\n*?(\\s*>|>|\\s*.+?>)(.+?)</\\k<tag>>", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<t"}, "matches": []}, {"regex": "[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*(?:\\.[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*)*", "exceptionStackTrace": null, "matches": ["evil-evil.evil-evil.evil-evil", "evil-evil", "evil-evil.evil-evil-evil", "evil-evil.evil", "evil-evil.evil-eVil", "evil-evil.evil-EVIL", "evil-evil.evil-ev_il", "evil-evil.evil-ev il", "evil-evil.evil-ev4il", "evil-evil.evil-e", "evil-evil.evil- ", "evil-evil.evil-6", "evil-evil.evil-_", "evil-evil.evil-", "evil-evil.eVil-evil", "evil-evil.EVIL-evil", "evil-evil.ev_il-evil", "evil-evil.ev il-evil", "evil-evil.ev4il-evil", "evil-evil.e-evil", "evil-evil. -evil", "evil-evil.6-evil", "evil-evil._-evil", "evil-evil.-evil", "evil-evil-evil.evil-evil", "evil.evil-evil", "evil-eVil.evil-evil", "evil-EVIL.evil-evil", "evil-ev_il.evil-evil", "evil-ev il.evil-evil", "evil-ev4il.evil-evil", "evil-e.evil-evil", "evil- .evil-evil", "evil-6.evil-evil", "evil-_.evil-evil", "evil-.evil-evil", "eVil-evil.evil-evil", "EVIL-evil.evil-evil", "ev_il-evil.evil-evil", "ev il-evil.evil-evil", "ev4il-evil.evil-evil", "e-evil.evil-evil", " -evil.evil-evil", "6-evil.evil-evil", "_-evil.evil-evil", "-evil.evil-evil", "evil", "evil-evil.evil-evil"], "nonMatches": []}, {"regex": "https?://[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*(?:\\.[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*)*/\\S*", "exceptionStackTrace": null, "matches": ["https://evil-evil.evil-evil/:", "https://evil-evil.evil-evil//", "https://evil-evil.evil-evil/.", "https://evil-evil.evil-evil/-", "https://evil-evil.evil-evil/eVil", "https://evil-evil.evil-evil/EVIL", "https://evil-evil.evil-evil/ev_il", "https://evil-evil.evil-evil/ev il", "https://evil-evil.evil-evil/ev4il", "https://evil-evil.evil-evil/e", "https://evil-evil.evil-evil/ ", "https://evil-evil.evil-evil/6", "https://evil-evil.evil-evil/_", "https://evil-evil.evil-evil/", "https://evil-evil.evil-evil.evil-evil/evil", "https://evil-evil/evil", "https://evil-evil.evil-evil-evil/evil", "https://evil-evil.evil/evil", "https://evil-evil.evil-eVil/evil", "https://evil-evil.evil-EVIL/evil", "https://evil-evil.evil-ev4il/evil", "https://evil-evil.evil-e/evil", "https://evil-evil.evil-6/evil", "https://evil-evil.eVil-evil/evil", "https://evil-evil.EVIL-evil/evil", "https://evil-evil.ev4il-evil/evil", "https://evil-evil.e-evil/evil", "https://evil-evil.6-evil/evil", "https://evil-evil-evil.evil-evil/evil", "https://evil.evil-evil/evil", "https://evil-eVil.evil-evil/evil", "https://evil-EVIL.evil-evil/evil", "https://evil-ev4il.evil-evil/evil", "https://evil-e.evil-evil/evil", "https://evil-6.evil-evil/evil", "https://eVil-evil.evil-evil/evil", "https://EVIL-evil.evil-evil/evil", "https://ev4il-evil.evil-evil/evil", "https://e-evil.evil-evil/evil", "https://6-evil.evil-evil/evil", "http://evil-evil.evil-evil/evil", "http://evil/", "https://evil-evil.evil-evil/evil"], "nonMatches": ["https://evil-evil.evil-ev_il/evil", "https://evil-evil.evil-ev il/evil", "https://evil-evil.evil- /evil", "https://evil-evil.evil-_/evil", "https://evil-evil.evil-/evil", "https://evil-evil.ev_il-evil/evil", "https://evil-evil.ev il-evil/evil", "https://evil-evil. -evil/evil", "https://evil-evil._-evil/evil", "https://evil-evil.-evil/evil", "https://evil-ev_il.evil-evil/evil", "https://evil-ev il.evil-evil/evil", "https://evil- .evil-evil/evil", "https://evil-_.evil-evil/evil", "https://evil-.evil-evil/evil", "https://ev_il-evil.evil-evil/evil", "https://ev il-evil.evil-evil/evil", "https:// -evil.evil-evil/evil", "https://_-evil.evil-evil/evil", "https://-evil.evil-evil/evil", "httpss://evil-evil.evil-evil/evil"]}, {"regex": "[A-Za-z0-9!#$%&&#39;*+\\-/=?^_`{|}~]+(?:\\.[A-Za-z0-9!#$%&&#39;*+\\-/=?^_`{|}~]+)*@[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*(?:\\.[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*)*", "exceptionStackTrace": null, "matches": ["evil.evil@evil-evil.evil-evil.evil-evil", "evil.evil@evil-evil", "evil.evil@evil-evil.evil-evil-evil", "evil.evil@evil-evil.evil", "evil.evil@evil-evil.evil-eVil", "evil.evil@evil-evil.evil-EVIL", "evil.evil@evil-evil.evil-ev_il", "evil.evil@evil-evil.evil-ev il", "evil.evil@evil-evil.evil-ev4il", "evil.evil@evil-evil.evil-e", "evil.evil@evil-evil.evil- ", "evil.evil@evil-evil.evil-6", "evil.evil@evil-evil.evil-_", "evil.evil@evil-evil.evil-", "evil.evil@evil-evil.eVil-evil", "evil.evil@evil-evil.EVIL-evil", "evil.evil@evil-evil.ev_il-evil", "evil.evil@evil-evil.ev il-evil", "evil.evil@evil-evil.ev4il-evil", "evil.evil@evil-evil.e-evil", "evil.evil@evil-evil. -evil", "evil.evil@evil-evil.6-evil", "evil.evil@evil-evil._-evil", "evil.evil@evil-evil.-evil", "evil.evil@evil-evil-evil.evil-evil", "evil.evil@evil.evil-evil", "evil.evil@evil-eVil.evil-evil", "evil.evil@evil-EVIL.evil-evil", "evil.evil@evil-ev_il.evil-evil", "evil.evil@evil-ev il.evil-evil", "evil.evil@evil-ev4il.evil-evil", "evil.evil@evil-e.evil-evil", "evil.evil@evil- .evil-evil", "evil.evil@evil-6.evil-evil", "evil.evil@evil-_.evil-evil", "evil.evil@evil-.evil-evil", "evil.evil@eVil-evil.evil-evil", "evil.evil@EVIL-evil.evil-evil", "evil.evil@ev_il-evil.evil-evil", "evil.evil@ev il-evil.evil-evil", "evil.evil@ev4il-evil.evil-evil", "evil.evil@e-evil.evil-evil", "evil.evil@6-evil.evil-evil", "evil.evil.evil@evil-evil.evil-evil", "evil@evil-evil.evil-evil", "evil.~@evil-evil.evil-evil", "evil.}@evil-evil.evil-evil", "evil.|@evil-evil.evil-evil", "evil.{@evil-evil.evil-evil", "evil.`@evil-evil.evil-evil", "evil.^@evil-evil.evil-evil", "evil.?@evil-evil.evil-evil", "evil.=@evil-evil.evil-evil", "evil.;@evil-evil.evil-evil", "evil./@evil-evil.evil-evil", "evil.-@evil-evil.evil-evil", "evil.+@evil-evil.evil-evil", "evil.*@evil-evil.evil-evil", "evil.&@evil-evil.evil-evil", "evil.%@evil-evil.evil-evil", "evil.$@evil-evil.evil-evil", "evil.#@evil-evil.evil-evil", "evil.!@evil-evil.evil-evil", "evil.eVil@evil-evil.evil-evil", "evil.EVIL@evil-evil.evil-evil", "evil.ev_il@evil-evil.evil-evil", "evil.ev il@evil-evil.evil-evil", "evil.ev4il@evil-evil.evil-evil", "evil.e@evil-evil.evil-evil", "evil.6@evil-evil.evil-evil", "evil._@evil-evil.evil-evil", "~.evil@evil-evil.evil-evil", "}.evil@evil-evil.evil-evil", "|.evil@evil-evil.evil-evil", "{.evil@evil-evil.evil-evil", "`.evil@evil-evil.evil-evil", "^.evil@evil-evil.evil-evil", "@.evil@evil-evil.evil-evil", "?.evil@evil-evil.evil-evil", "=.evil@evil-evil.evil-evil", ";.evil@evil-evil.evil-evil", "/.evil@evil-evil.evil-evil", "..evil@evil-evil.evil-evil", "-.evil@evil-evil.evil-evil", "+.evil@evil-evil.evil-evil", "*.evil@evil-evil.evil-evil", "&.evil@evil-evil.evil-evil", "%.evil@evil-evil.evil-evil", "$.evil@evil-evil.evil-evil", "#.evil@evil-evil.evil-evil", "!.evil@evil-evil.evil-evil", "eVil.evil@evil-evil.evil-evil", "EVIL.evil@evil-evil.evil-evil", "ev_il.evil@evil-evil.evil-evil", "ev il.evil@evil-evil.evil-evil", "ev4il.evil@evil-evil.evil-evil", "e.evil@evil-evil.evil-evil", " .evil@evil-evil.evil-evil", "6.evil@evil-evil.evil-evil", "_.evil@evil-evil.evil-evil", ".evil@evil-evil.evil-evil", "evil@evil", "evil.evil@evil-evil.evil-evil"], "nonMatches": ["evil.evil@ -evil.evil-evil", "evil.evil@_-evil.evil-evil", "evil.evil@-evil.evil-evil", "evil.@@evil-evil.evil-evil", "evil..@evil-evil.evil-evil", "evil. @evil-evil.evil-evil", "evil.@evil-evil.evil-evil"]}, {"regex": "does are not permanent ver", "exceptionStackTrace": null, "matches": ["does are not permanent ver"], "nonMatches": []}, {"regex": "Apple phone number", "exceptionStackTrace": null, "matches": ["Apple phone number"], "nonMatches": []}, {"regex": "Apple phone number", "exceptionStackTrace": null, "matches": ["Apple phone number"], "nonMatches": []}, {"regex": "Apple phone number", "exceptionStackTrace": null, "matches": ["Apple phone number"], "nonMatches": []}, {"regex": "Apple phone number", "exceptionStackTrace": null, "matches": ["Apple phone number"], "nonMatches": []}, {"regex": "Apple phone number", "exceptionStackTrace": null, "matches": ["Apple phone number"], "nonMatches": []}, {"regex": "Apple phone number", "exceptionStackTrace": null, "matches": ["Apple phone number"], "nonMatches": []}, {"regex": "Apple phone number", "exceptionStackTrace": null, "matches": ["Apple phone number"], "nonMatches": []}, {"regex": "^(((19|20)(([0][48])|([2468][048])|([13579][26]))|2000)[\\-](([0][13578]|[1][02])[\\-]([012][0-9]|[3][01])|([0][469]|11)[\\-]([012][0-9]|30)|02[\\-]([012][0-9]))|((19|20)(([02468][1235679])|([13579][01345789]))|1900)[\\-](([0][13578]|[1][02])[\\-]([012][0-9]|[3][01])|([0][469]|11)[\\-]([012][0-9]|30)|02[\\-]([012][0-8])))$", "exceptionStackTrace": null, "matches": ["1998-08-20", "1997-08-20", "1995-08-20", "1994-08-20", "1993-08-20", "1991-08-20", "1979-08-20", "1959-08-20", "1939-08-20", "1989-02-10", "1989-02-00", "1989-09-10", "1989-09-00", "1989-06-20", "1989-04-20", "1989-10-20", "1989-08-30", "1989-08-10", "1989-08-00", "1989-07-20", "1989-05-20", "1989-03-20", "1989-01-20", "1987-08-20", "1986-08-20", "1985-08-20", "1983-08-20", "1982-08-20", "1969-08-20", "1949-08-20", "1929-08-20", "1919-08-20", "1909-08-20", "1992-08-20", "1990-08-20", "1976-08-20", "1956-08-20", "1936-08-20", "1916-08-20", "1906-08-20", "1984-08-20", "1981-08-20", "1980-08-20", "1968-08-20", "1948-08-20", "1928-08-20", "1908-02-10", "1908-02-00", "1908-09-10", "1908-09-00", "1908-06-20", "1908-04-20", "1908-10-20", "1908-08-30", "1908-08-10", "1908-08-00", "1908-07-20", "1908-05-20", "1908-03-20", "1908-01-20", "1904-08-20", "1900-08-20", "2089-08-20", "1999-08-20", "1989-02-20", "1989-11-20", "1989-09-30", "1989-09-20", "1989-12-20", "1989-08-31", "1989-08-20", "2000-08-20", "2008-08-20", "1996-08-20", "1988-08-20", "1908-02-20", "1908-11-20", "1908-09-30", "1908-09-20", "1908-12-20", "1908-08-31", "1908-08-20"], "nonMatches": ["1989-02-29", "1989-02-30", "1989-08-32", "1989-00-20", "1908-02-30", "1908-08-32", "1908-00-20"]}, {"regex": "^\\+[0-9]{1,3}\\([0-9]{3}\\)[0-9]{7}$", "exceptionStackTrace": null, "matches": ["+000(000)0000000", "+0(000)0000000"], "nonMatches": ["+0(000)00000000", "+0(000)000000", "+0(0000)0000000", "+0(00)0000000", "+0000(000)0000000", "+(000)0000000"]}, {"regex": "([^\\.\\?\\!]*)[\\.\\?\\!]", "exceptionStackTrace": null, "matches": ["evil?", "evil.", "?!", ".!", "!!", "eVil!", "EVIL!", "ev_il!", "ev il!", "ev4il!", "e!", " !", "6!", "_!", "!", "evil!"], "nonMatches": []}, {"regex": "(([0-1][0-9])|([2][0-3])):([0-5][0-9]):([0-5][0-9])", "exceptionStackTrace": null, "matches": ["20:00:00", "00:00:00"], "nonMatches": ["24:00:00", "00:00:60", "00:60:00"]}, {"regex": "^(9|2{1})+([1-9]{1})+([0-9]{7})$", "exceptionStackTrace": null, "matches": ["2210000000", "9110000000", "9910000000", "210000000", "910000000"], "nonMatches": ["9100000000", "91000000", "90000000", "900000000", "10000000"]}, {"regex": "^(\\+48\\s+)?\\d{3}(\\s*|\\-)\\d{3}(\\s*|\\-)\\d{3}$", "exceptionStackTrace": null, "matches": ["+48 000 000  000", "+48 000 000000", "+48 000  000 000", "+48 000000 000", "000 000 000", "+48  000 000 000", "000-000000", "000000-000", "000000000", "+48 000-000 000", "+48 000 000-000", "+48 000 000 000"], "nonMatches": ["+48 000 000 0000", "+48 000 000 00", "+48 000 0000 000", "+48 000 00 000", "+48 0000 000 000", "+48 00 000 000", "+48 +48 000 000 000", "+48000 000 000"]}, {"regex": "^\\$?([1-9][0-9]{3,}(\\.\\d{2})?|(\\d{1,3}\\,\\d{3}|\\d{1,3}\\,\\d{3}(\\.\\d{2})?)|(\\d{1,3}\\,\\d{3}|\\d{1,3}\\,\\d{3}\\,\\d{3}(\\.\\d{2})?)*)?$\n", "exceptionStackTrace": null, "matches": ["$0,000,000\n", "$000,000,000.00\n", "$0,0000,000\n", "$000,000.00\n", "$000,000\n", "$\n", "$1000\n", "1000.00\n", "\n", "$0,000,000.00\n", "$0,000.00\n", "$0,000\n", "$1000.00\n"], "nonMatches": ["$0,000,000.00.00\n", "$0,000,000.000\n", "$0,000,000.0\n", "$0,000,0000.00\n", "$0,000,00.00\n", "$0,0000,000.00\n", "$0,00,000.00\n", "$0000,000,000.00\n", "$,000,000.00\n", "$0,000.00.00\n", "$0,000.000\n", "$0,000.0\n", "$0,0000.00\n", "$0,00.00\n", "$0000,000.00\n", "$,000.00\n", "$0,0000\n", "$0,00\n", "$0000,000\n", "$,000\n", "$1000.001000.00\n", "$1000.00.00\n", "$1000.000\n", "$1000.0\n", "$100.00\n", "$0000.00\n", "$$1000.00\n"]}, {"regex": "(?<!\\/|\\\\|\\.)[a-zA-Z]+\\.\\.(?!\\.|\\\\|\\/)", "exceptionStackTrace": null, "matches": ["eVil..", "EVIL..", "ev_il..", "ev il..", "ev4il..", "e..", "evil.."], "nonMatches": [" ..", "6..", "_..", ".."]}, {"regex": "fgfgfgfgfgf", "exceptionStackTrace": null, "matches": ["fgfgfgfgfgf"], "nonMatches": []}, {"regex": "^(([-\\w$%&&#39;*+\\/=?^_`{|}~.]+)@(([-a-zA-Z0-9_]+\\.)*)([-a-zA-Z0-9]+\\.)([a-zA-Z0-9]{2,7}))?$", "exceptionStackTrace": null, "matches": ["evil@evil.evil.0000000", "evil@evil.evil.a0", "evil@evil.evil.A0", "evil@evil.-.00", "evil@evil.eVil.00", "evil@evil.EVIL.00", "evil@evil.ev4il.00", "evil@evil.e.00", "evil@evil.6.00", "evil@evil.evil.evil.00", "evil@evil.00", "evil@-.evil.00", "evil@eVil.evil.00", "evil@EVIL.evil.00", "evil@ev_il.evil.00", "evil@ev4il.evil.00", "evil@e.evil.00", "evil@6.evil.00", "evil@_.evil.00", "~@evil.evil.00", "}@evil.evil.00", "|@evil.evil.00", "{@evil.evil.00", "`@evil.evil.00", "^@evil.evil.00", "?@evil.evil.00", "=@evil.evil.00", ";@evil.evil.00", "/@evil.evil.00", ".@evil.evil.00", "-@evil.evil.00", "+@evil.evil.00", "*@evil.evil.00", "&@evil.evil.00", "%@evil.evil.00", "$@evil.evil.00", "#@evil.evil.00", "eVil@evil.evil.00", "EVIL@evil.evil.00", "ev_il@evil.evil.00", "ev4il@evil.evil.00", "e@evil.evil.00", "6@evil.evil.00", "_@evil.evil.00", "", "evil@evil.evil.00"], "nonMatches": ["evil@evil.evil.00evil@evil.evil.00", "evil@evil.evil.00000000", "evil@evil.evil.0", "evil@evil.~.00", "evil@evil.}.00", "evil@evil.|.00", "evil@evil.{.00", "evil@evil.`.00", "evil@evil.^.00", "evil@evil.@.00", "evil@evil.?.00", "evil@evil.=.00", "evil@evil.;.00", "evil@evil./.00", "evil@evil...00", "evil@evil.+.00", "evil@evil.*.00", "evil@evil.&.00", "evil@evil.%.00", "evil@evil.$.00", "evil@evil.#.00", "evil@evil.ev_il.00", "evil@evil.ev il.00", "evil@evil. .00", "evil@evil._.00", "evil@evil..00", "evil@~.evil.00", "evil@}.evil.00", "evil@|.evil.00", "evil@{.evil.00", "evil@`.evil.00", "evil@^.evil.00", "evil@@.evil.00", "evil@?.evil.00", "evil@=.evil.00", "evil@;.evil.00", "evil@/.evil.00", "evil@..evil.00", "evil@+.evil.00", "evil@*.evil.00", "evil@&.evil.00", "evil@%.evil.00", "evil@$.evil.00", "evil@#.evil.00", "evil@ev il.evil.00", "evil@ .evil.00", "evil@.evil.00", "@@evil.evil.00", "ev il@evil.evil.00", " @evil.evil.00", "@evil.evil.00"]}, {"regex": "^(([0]?[1-9]|[1][0-2])[\\/|\\-|\\.]([0-2]\\d|[3][0-1]|[1-9])[\\/|\\-|\\.]([2][0])?\\d{2}\\s+((([0][0-9]|[1][0-2]|[0-9])[\\:|\\-|\\.]([0-5]\\d)\\s*([aApP][mM])?)|(([0-1][0-9]|[2][0-3]|[0-9])[\\:|\\-|\\.]([0-5]\\d))))$", "exceptionStackTrace": null, "matches": ["01.00.2000 00|00", "01.00.2000 00:00", "01.00.2000 00-00", "01.00.2000 00.00 ", "01.00.2000 00.00 Pm", "01.00.2000 00.00 pM", "01.00.2000 00.00 aM", "01.00.2000 00.00 AM", "01.00.2000 00.00  PM", "01.00.2000 00.00PM", "01.00.2000 00|00 PM", "01.00.2000 00:00 PM", "01.00.2000 00-00 PM", "01.00.2000  00.00 PM", "01.00.00 00.00 PM", "01.00|2000 00.00 PM", "01.00/2000 00.00 PM", "01.00-2000 00.00 PM", "01|00.2000 00.00 PM", "01/00.2000 00.00 PM", "01-00.2000 00.00 PM", "1.00.2000 00.00 PM", "10.00.00 00.00", "1.1.00 00.00", "1.30.00 00.00", "1.00.00 20.00", "1.00.00 0.00", "1.00.00 10.00", "1.00.00 00.00", "10.00.2000 00.00 PM", "01.1.2000 00.00 PM", "01.30.2000 00.00 PM", "01.00.2000 0.00", "01.00.2000 20.00", "01.00.2000 00.00", "01.00.2000 0.00 PM", "01.00.2000 10.00 PM", "01.00.2000 00.00 PM"], "nonMatches": ["13.00.2000 00.00 PM", "01.0.2000 00.00 PM", "01.32.2000 00.00 PM", "01.00.2000 24.00", "01.00.2000 00.60", "01.00.2000 13.00 PM", "01.00.2000 00.00 PMPM", "01.00.2000 00.00 Pa", "01.00.2000 00.00 PA", "01.00.2000 00.00 bM", "01.00.2000 00.00 BM", "01.00.2000 00.60 PM", "01.00.200000.00 PM", "01.00.20000 00.00 PM", "01.00.200 00.00 PM", "01.00.202000 00.00 PM", "00.00.2000 00.00 PM", "001.00.2000 00.00 PM"]}, {"regex": "^(([8]))$|^((([0-7]))$|^((([0-7])).?((25)|(50)|(5)|(75)|(0)|(00))))$", "exceptionStackTrace": null, "matches": ["0_25", "0A25", "0025", "0 25", "000", "00", "075", "05", "050", "025", "0a00", "0a0", "0a75", "0a5", "0a50", "0a25", "0", "8"], "nonMatches": ["0aa25", "8a25"]}, {"regex": "[-&#39;a-zA-Z]", "exceptionStackTrace": null, "matches": ["a", "A", "9", "3", "-", "&", "#", ";"], "nonMatches": ["0"]}, {"regex": "(?<word>([\\w]*))(?<prep>([\\,\\.\\!\\?\\-\\:\\;\\&quot;&quot;\\(\\)])?)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<w"}, "matches": []}, {"regex": "(?<street>((\\d+\\-)?[?-?\\.]* )*)(?<IsStreet>((?????)|(????????)|(??-?)|(?-?)|(??-?)|(???????)|(???[ \\.]?)|(???(?:\\.)?)|(?(?:\\.)?)|(??\\.)|(???(?:\\.)?)|(??(?:\\.)?))) *(?<street2>[?-?]{2,} )?(?:?\\.?)?(?<home>\\d+[?-?]?)([ -/?]+(???)?(?<building>\\d+)[ -/](?<flat>\\d+))*([ -/](??\\.? ?)?(?<flat>\\d+))?", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<s"}, "matches": []}, {"regex": "((0)+(\\.[1-9](\\d)?))|((0)+(\\.(\\d)[1-9]+))|(([1-9]+(0)?)+(\\.\\d+)?)|(([1-9]+(0)?)+(\\.\\d+)?)", "exceptionStackTrace": null, "matches": ["10.0.0", "10", "10.00", "10.", "1010.0", "100.0", "1.0", "110.0", "0.011", "00.01", ".01", "0.100", "00.10", ".10", "1", "0.1", "10.0", "0.01", "0.10"], "nonMatches": [".0", "00.0", "0.0", "0.00"]}, {"regex": "((8|\\+7)-?)?\\(?\\d{3,5}\\)?-?\\d{1}-?\\d{1}-?\\d{1}-?\\d{1}-?\\d{1}((-?\\d{1})?-?\\d{1})?", "exceptionStackTrace": null, "matches": ["8-(000)-0-0-0-0-0-0-0-0-0", "8-(000)-0-0-0-0-0", "8-(000)-0-0-0-0-0-0-00", "8-(000)-0-0-0-0-0-0-", "8-(000)-0-0-0-0-0-0--0", "8-(000)-0-0-0-0-0-00", "8-(000)-0-0-0-0-0-0-0-0", "8-(000)-0-0-0-0-0-0", "8-(000)-0-0-0-0-0-00-0", "8-(000)-0-0-0-0-0--0", "8-(000)-0-0-0-0-0--0-0", "8-(000)-0-0-0-0-00-0", "8-(000)-0-0-0-0-00-0-0", "8-(000)-0-0-0-00-0-0", "8-(000)-0-0-0-00-0-0-0", "8-(000)-0-0-00-0-0-0", "8-(000)-0-0-00-0-0-0-0", "8-(000)-0-00-0-0-0-0", "8-(000)-0-00-0-0-0-0-0", "8-(000)-00-0-0-0-0-0", "8-(000)-00-0-0-0-0-0-0", "8-(000)0-0-0-0-0-0-0", "8-(000-0-0-0-0-0-0-0", "8-(000000)-0-0-0-0-0-0-0", "8-(00000)-0-0-0-0-0-0-0", "8-((000)-0-0-0-0-0-0-0", "8-000)-0-0-0-0-0-0-0", "8-8-(000)-0-0-0-0-0-0-0", "(000)-0-0-0-0-0-0-0", "8--(000)-0-0-0-0-0-0-0", "8(000)-0-0-0-0-0-0-0", "00000000", "+7-(000)-0-0-0-0-0-0-0", "8-(000)-0-0-0-0-0-0-0"], "nonMatches": ["8-(000)-0-0-0-0--0-0", "8-(000)-0-0-0-0--0-0-0", "8-(000)-0-0-0--0-0-0", "8-(000)-0-0-0--0-0-0-0", "8-(000)-0-0--0-0-0-0", "8-(000)-0-0--0-0-0-0-0", "8-(000)-0--0-0-0-0-0", "8-(000)-0--0-0-0-0-0-0", "8-(000)--0-0-0-0-0-0", "8-(000)--0-0-0-0-0-0-0", "8-(000))-0-0-0-0-0-0-0", "8-(00)-0-0-0-0-0-0-0"]}, {"regex": "([^\\.]*?(\\w+(???|????))[^\\.]*?\\.+)\\s+", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ??"}, "matches": []}, {"regex": "^([A-Z0-9?.+-])+([,]([A-Z0-9?.+-])+)*$", "exceptionStackTrace": null, "matches": ["-,-,-", "-,--", "-,A", "-,?", "-,0", "-,.", "-,+", "--,-", "A,-", "?,-", "0,-", ".,-", "+,-", "-", "-,-"], "nonMatches": ["-,", ",-"]}, {"regex": "^([A-Z0-9?.+-])+([,]([A-Z0-9?.+-])+)*$", "exceptionStackTrace": null, "matches": ["-,-,-", "-,--", "-,A", "-,?", "-,0", "-,.", "-,+", "--,-", "A,-", "?,-", "0,-", ".,-", "+,-", "-", "-,-"], "nonMatches": ["-,", ",-"]}, {"regex": "^((00|\\+)49)?(0?[2-9][0-9]{1,})$", "exceptionStackTrace": null, "matches": ["00490200", "004920", "020", "20", "+49020", "0049020"], "nonMatches": ["004902", "0049000", "00490020", "00490049020"]}, {"regex": "^((00|\\+)49)?(0?1[5-7][0-9]{1,})$", "exceptionStackTrace": null, "matches": ["004901500", "0049150", "0150", "150", "+490150", "00490150"], "nonMatches": ["0049015", "00490100", "004900150", "004900490150"]}, {"regex": "[1-8][0-9]{2}[0-9]{5}", "exceptionStackTrace": null, "matches": ["100000000", "10000000"], "nonMatches": ["1000000", "00000000"]}, {"regex": "^[01]?[- .]?\\(?[2-9]\\d{2}\\)?[- .]?\\d{3}[- .]?\\d{4}$", "exceptionStackTrace": null, "matches": ["1.(200).0000000", "1.(200).000-0000", "1.(200).000 0000", "1.(200)000.0000", "1.(200)-000.0000", "1.(200) 000.0000", "1.(200.000.0000", "1.200).000.0000", "1(200).000.0000", "1-(200).000.0000", "1 (200).000.0000", ".(200).000.0000", "0.(200).000.0000", "2000000000", "1.(200).000.0000"], "nonMatches": ["1.(200).000.00000", "1.(200).000.000", "1.(200).000..0000", "1.(200).0000.0000", "1.(200).00.0000", "1.(200)..000.0000", "1.(200)).000.0000", "1.(2000).000.0000", "1.(20).000.0000", "1.(000).000.0000", "1.((200).000.0000", "1..(200).000.0000", "11.(200).000.0000", "2.(200).000.0000"]}, {"regex": "^[A-Za-z&#192;-&#214;&#216;-&#246;&#248;-&#255; &#39;\\-\\.]{1,22}$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character range ;-&"}, "matches": []}, {"regex": "^[abceghjklmnprstvxyABCEGHJKLMNPRSTVXY][0-9][abceghjklmnprstvwxyzABCEGHJKLMNPRSTVWXYZ] {0,1}[0-9][abceghjklmnprstvwxyzABCEGHJKLMNPRSTVWXYZ][0-9]$", "exceptionStackTrace": null, "matches": ["Y0Z 0z0", "Y0Z 0y0", "Y0Z 0x0", "Y0Z 0w0", "Y0Z 0v0", "Y0Z 0t0", "Y0Z 0s0", "Y0Z 0r0", "Y0Z 0p0", "Y0Z 0n0", "Y0Z 0m0", "Y0Z 0l0", "Y0Z 0k0", "Y0Z 0j0", "Y0Z 0h0", "Y0Z 0g0", "Y0Z 0e0", "Y0Z 0c0", "Y0Z 0b0", "Y0Z 0a0", "Y0Z 0Y0", "Y0Z 0X0", "Y0Z 0W0", "Y0Z 0V0", "Y0Z 0T0", "Y0Z 0S0", "Y0Z 0R0", "Y0Z 0P0", "Y0Z 0N0", "Y0Z 0M0", "Y0Z 0L0", "Y0Z 0K0", "Y0Z 0J0", "Y0Z 0H0", "Y0Z 0G0", "Y0Z 0E0", "Y0Z 0C0", "Y0Z 0B0", "Y0Z 0A0", "Y0z 0Z0", "Y0y 0Z0", "Y0x 0Z0", "Y0w 0Z0", "Y0v 0Z0", "Y0t 0Z0", "Y0s 0Z0", "Y0r 0Z0", "Y0p 0Z0", "Y0n 0Z0", "Y0m 0Z0", "Y0l 0Z0", "Y0k 0Z0", "Y0j 0Z0", "Y0h 0Z0", "Y0g 0Z0", "Y0e 0Z0", "Y0c 0Z0", "Y0b 0Z0", "Y0a 0Z0", "Y0Y 0Z0", "Y0X 0Z0", "Y0W 0Z0", "Y0V 0Z0", "Y0T 0Z0", "Y0S 0Z0", "Y0R 0Z0", "Y0P 0Z0", "Y0N 0Z0", "Y0M 0Z0", "Y0L 0Z0", "Y0K 0Z0", "Y0J 0Z0", "Y0H 0Z0", "Y0G 0Z0", "Y0E 0Z0", "Y0C 0Z0", "Y0B 0Z0", "Y0A 0Z0", "y0Z 0Z0", "x0Z 0Z0", "v0Z 0Z0", "t0Z 0Z0", "s0Z 0Z0", "r0Z 0Z0", "p0Z 0Z0", "n0Z 0Z0", "m0Z 0Z0", "l0Z 0Z0", "k0Z 0Z0", "j0Z 0Z0", "h0Z 0Z0", "g0Z 0Z0", "e0Z 0Z0", "c0Z 0Z0", "b0Z 0Z0", "a0Z 0Z0", "X0Z 0Z0", "V0Z 0Z0", "T0Z 0Z0", "S0Z 0Z0", "R0Z 0Z0", "P0Z 0Z0", "N0Z 0Z0", "M0Z 0Z0", "L0Z 0Z0", "K0Z 0Z0", "J0Z 0Z0", "H0Z 0Z0", "G0Z 0Z0", "E0Z 0Z0", "C0Z 0Z0", "B0Z 0Z0", "A0Z 0Z0", "Y0Z0Z0", "Y0Z 0Z0"], "nonMatches": ["Y0Z 0d0", "Y0Z 0D0", "Y0Z  0Z0", "Y0d 0Z0", "Y0D 0Z0", "d0Z 0Z0", "D0Z 0Z0"]}, {"regex": "^((?=[^\\d])(?=^*[^0-9]$)(?!.*&#39;)(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\\s))?(?=.*[^\\d]$).{8,15}$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "nothing to repeat"}, "matches": []}, {"regex": "^(0\\.|([1-9]([0-9]+)?)\\.){3}(0|([1-9]([0-9]+)?)){1}$", "exceptionStackTrace": null, "matches": ["100.10.10.0", "0.0.0.100", "0.0.0.1", "1.10.10.0", "0.10.10.1", "0.10.10.0", "10.10.10.0", "0.0.0.10", "0.0.0.0"], "nonMatches": ["00.10.10.0", "0.0.0.00", "0.0.0.", "0.0.0.0.0", "0.0.0"]}, {"regex": "(?i)^(((\\\\\\\\(\\?\\\\(UNC\\\\)?)?)([A-Z]:\\\\|([^\\\\\\/\\:\\*\\?\\&quot;\\<\\>\\|\\.\\s][^\\\\\\/\\:\\*\\?\\&quot;\\<\\>\\|]+[^\\\\\\/\\:\\*\\?\\&quot;\\<\\>\\|\\.\\s]\\\\){2}))|[A-Z]:\\\\)([^\\\\\\/\\:\\*\\?\\&quot;\\<\\>\\|\\s][^\\\\\\/\\:\\*\\?\\&quot;\\<\\>\\|]+[^\\\\\\/\\:\\*\\?\\&quot;\\<\\>\\|\\s]\\\\)*([^\\\\\\/\\:\\*\\?\\&quot;\\<\\>\\|\\.\\s][^\\\\\\/\\:\\*\\?\\&quot;\\<\\>\\|\\.]+[^\\\\\\/\\:\\*\\?\\&quot;\\<\\>\\|\\.\\s])(\\.[^\\\\\\/\\:\\*\\?\\&quot;\\<\\>\\|\\.\\s]+)*?$", "exceptionStackTrace": null, "matches": ["\\\\?\\UNC\\aevila\\aevila\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\aevilA\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\aevil0\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\a.a\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\aeVila\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\aEVILa\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\aev_ila\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\aev ila\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\aev4ila\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\aea\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\a a\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\a6a\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\a_a\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\Aevila\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\0evila\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\A:\\aevila\\aevila.evil.evil", "\\\\?\\UNC\\A:\\aevila\\aevila", "\\\\?\\UNC\\A:\\aevila\\aevila.eVil", "\\\\?\\UNC\\A:\\aevila\\aevila.EVIL", "\\\\?\\UNC\\A:\\aevila\\aevila.ev_il", "\\\\?\\UNC\\A:\\aevila\\aevila.ev4il", "\\\\?\\UNC\\A:\\aevila\\aevila.e", "\\\\?\\UNC\\A:\\aevila\\aevila.6", "\\\\?\\UNC\\A:\\aevila\\aevila._", "\\\\?\\UNC\\A:\\aevila\\aevilA.evil", "\\\\?\\UNC\\A:\\aevila\\aevil0.evil", "\\\\?\\UNC\\A:\\aevila\\aeVila.evil", "\\\\?\\UNC\\A:\\aevila\\aEVILa.evil", "\\\\?\\UNC\\A:\\aevila\\aev_ila.evil", "\\\\?\\UNC\\A:\\aevila\\aev ila.evil", "\\\\?\\UNC\\A:\\aevila\\aev4ila.evil", "\\\\?\\UNC\\A:\\aevila\\aea.evil", "\\\\?\\UNC\\A:\\aevila\\a a.evil", "\\\\?\\UNC\\A:\\aevila\\a6a.evil", "\\\\?\\UNC\\A:\\aevila\\a_a.evil", "\\\\?\\UNC\\A:\\aevila\\Aevila.evil", "\\\\?\\UNC\\A:\\aevila\\0evila.evil", "\\\\?\\UNC\\A:\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\A:\\aevila.evil", "\\\\?\\UNC\\A:\\aevilA\\aevila.evil", "\\\\?\\UNC\\A:\\aevil0\\aevila.evil", "\\\\?\\UNC\\A:\\aevil.\\aevila.evil", "\\\\?\\UNC\\A:\\a.a\\aevila.evil", "\\\\?\\UNC\\A:\\aeVila\\aevila.evil", "\\\\?\\UNC\\A:\\aEVILa\\aevila.evil", "\\\\?\\UNC\\A:\\aev_ila\\aevila.evil", "\\\\?\\UNC\\A:\\aev ila\\aevila.evil", "\\\\?\\UNC\\A:\\aev4ila\\aevila.evil", "\\\\?\\UNC\\A:\\aea\\aevila.evil", "\\\\?\\UNC\\A:\\a a\\aevila.evil", "\\\\?\\UNC\\A:\\a6a\\aevila.evil", "\\\\?\\UNC\\A:\\a_a\\aevila.evil", "\\\\?\\UNC\\A:\\Aevila\\aevila.evil", "\\\\?\\UNC\\A:\\0evila\\aevila.evil", "\\\\?\\UNC\\A:\\.evila\\aevila.evil", "\\\\A:\\aevila\\aevila.evil", "\\\\?\\A:\\aevila\\aevila.evil", "A:\\aevila", "\\\\aevila\\aevila\\aevila", "\\\\A:\\aevila", "A:\\aevila\\aevila.evil", "\\\\?\\UNC\\aevila\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\A:\\aevila\\aevila.evil"], "nonMatches": ["\\\\?\\UNC\\aevil|\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\aevilu\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\aevilt\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\aevilq\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\aevilo\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\aevil\\\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\aevil?\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\aevil>\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\aevil<\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\aevil;\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\aevil:\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\aevil/\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\aevil.\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\aevil*\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\aevil&\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\aevil \\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\a|a\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\a\\a\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\a?a\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\a>a\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\a<a\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\a;a\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\a:a\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\a/a\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\a*a\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\a&a\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\aa\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\|evila\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\uevila\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\tevila\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\qevila\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\oevila\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\\\evila\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\?evila\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\>evila\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\<evila\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\;evila\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\:evila\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\/evila\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\.evila\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\*evila\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\&evila\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\ evila\\aevila\\aevila\\aevila.evil", "\\\\?\\UNC\\A:\\aevila\\aevila.|", "\\\\?\\UNC\\A:\\aevila\\aevila.\\", "\\\\?\\UNC\\A:\\aevila\\aevila.?", "\\\\?\\UNC\\A:\\aevila\\aevila.>", "\\\\?\\UNC\\A:\\aevila\\aevila.<", "\\\\?\\UNC\\A:\\aevila\\aevila.;", "\\\\?\\UNC\\A:\\aevila\\aevila.:", "\\\\?\\UNC\\A:\\aevila\\aevila./", "\\\\?\\UNC\\A:\\aevila\\aevila..", "\\\\?\\UNC\\A:\\aevila\\aevila.*", "\\\\?\\UNC\\A:\\aevila\\aevila.&", "\\\\?\\UNC\\A:\\aevila\\aevila.ev il", "\\\\?\\UNC\\A:\\aevila\\aevila. ", "\\\\?\\UNC\\A:\\aevila\\aevila.", "\\\\?\\UNC\\A:\\aevila\\aevil|.evil", "\\\\?\\UNC\\A:\\aevila\\aevilu.evil", "\\\\?\\UNC\\A:\\aevila\\aevilt.evil", "\\\\?\\UNC\\A:\\aevila\\aevilq.evil", "\\\\?\\UNC\\A:\\aevila\\aevilo.evil", "\\\\?\\UNC\\A:\\aevila\\aevil\\.evil", "\\\\?\\UNC\\A:\\aevila\\aevil?.evil", "\\\\?\\UNC\\A:\\aevila\\aevil>.evil", "\\\\?\\UNC\\A:\\aevila\\aevil<.evil", "\\\\?\\UNC\\A:\\aevila\\aevil;.evil", "\\\\?\\UNC\\A:\\aevila\\aevil:.evil", "\\\\?\\UNC\\A:\\aevila\\aevil/.evil", "\\\\?\\UNC\\A:\\aevila\\aevil..evil", "\\\\?\\UNC\\A:\\aevila\\aevil*.evil", "\\\\?\\UNC\\A:\\aevila\\aevil&.evil", "\\\\?\\UNC\\A:\\aevila\\aevil .evil", "\\\\?\\UNC\\A:\\aevila\\a|a.evil", "\\\\?\\UNC\\A:\\aevila\\a\\a.evil", "\\\\?\\UNC\\A:\\aevila\\a?a.evil", "\\\\?\\UNC\\A:\\aevila\\a>a.evil", "\\\\?\\UNC\\A:\\aevila\\a<a.evil", "\\\\?\\UNC\\A:\\aevila\\a;a.evil", "\\\\?\\UNC\\A:\\aevila\\a:a.evil", "\\\\?\\UNC\\A:\\aevila\\a/a.evil", "\\\\?\\UNC\\A:\\aevila\\a.a.evil", "\\\\?\\UNC\\A:\\aevila\\a*a.evil", "\\\\?\\UNC\\A:\\aevila\\a&a.evil", "\\\\?\\UNC\\A:\\aevila\\aa.evil", "\\\\?\\UNC\\A:\\aevila\\|evila.evil", "\\\\?\\UNC\\A:\\aevila\\uevila.evil", "\\\\?\\UNC\\A:\\aevila\\tevila.evil", "\\\\?\\UNC\\A:\\aevila\\qevila.evil", "\\\\?\\UNC\\A:\\aevila\\oevila.evil", "\\\\?\\UNC\\A:\\aevila\\\\evila.evil", "\\\\?\\UNC\\A:\\aevila\\?evila.evil", "\\\\?\\UNC\\A:\\aevila\\>evila.evil", "\\\\?\\UNC\\A:\\aevila\\<evila.evil", "\\\\?\\UNC\\A:\\aevila\\;evila.evil", "\\\\?\\UNC\\A:\\aevila\\:evila.evil", "\\\\?\\UNC\\A:\\aevila\\/evila.evil", "\\\\?\\UNC\\A:\\aevila\\.evila.evil", "\\\\?\\UNC\\A:\\aevila\\*evila.evil", "\\\\?\\UNC\\A:\\aevila\\&evila.evil", "\\\\?\\UNC\\A:\\aevila\\ evila.evil", "\\\\?\\UNC\\A:\\aevil|\\aevila.evil", "\\\\?\\UNC\\A:\\aevilu\\aevila.evil", "\\\\?\\UNC\\A:\\aevilt\\aevila.evil", "\\\\?\\UNC\\A:\\aevilq\\aevila.evil", "\\\\?\\UNC\\A:\\aevilo\\aevila.evil", "\\\\?\\UNC\\A:\\aevil\\\\aevila.evil", "\\\\?\\UNC\\A:\\aevil?\\aevila.evil", "\\\\?\\UNC\\A:\\aevil>\\aevila.evil", "\\\\?\\UNC\\A:\\aevil<\\aevila.evil", "\\\\?\\UNC\\A:\\aevil;\\aevila.evil", "\\\\?\\UNC\\A:\\aevil:\\aevila.evil", "\\\\?\\UNC\\A:\\aevil/\\aevila.evil", "\\\\?\\UNC\\A:\\aevil*\\aevila.evil", "\\\\?\\UNC\\A:\\aevil&\\aevila.evil", "\\\\?\\UNC\\A:\\aevil \\aevila.evil", "\\\\?\\UNC\\A:\\a|a\\aevila.evil", "\\\\?\\UNC\\A:\\a\\a\\aevila.evil", "\\\\?\\UNC\\A:\\a?a\\aevila.evil", "\\\\?\\UNC\\A:\\a>a\\aevila.evil", "\\\\?\\UNC\\A:\\a<a\\aevila.evil", "\\\\?\\UNC\\A:\\a;a\\aevila.evil", "\\\\?\\UNC\\A:\\a:a\\aevila.evil", "\\\\?\\UNC\\A:\\a/a\\aevila.evil", "\\\\?\\UNC\\A:\\a*a\\aevila.evil", "\\\\?\\UNC\\A:\\a&a\\aevila.evil", "\\\\?\\UNC\\A:\\aa\\aevila.evil", "\\\\?\\UNC\\A:\\|evila\\aevila.evil", "\\\\?\\UNC\\A:\\uevila\\aevila.evil", "\\\\?\\UNC\\A:\\tevila\\aevila.evil", "\\\\?\\UNC\\A:\\qevila\\aevila.evil", "\\\\?\\UNC\\A:\\oevila\\aevila.evil", "\\\\?\\UNC\\A:\\\\evila\\aevila.evil", "\\\\?\\UNC\\A:\\?evila\\aevila.evil", "\\\\?\\UNC\\A:\\>evila\\aevila.evil", "\\\\?\\UNC\\A:\\<evila\\aevila.evil", "\\\\?\\UNC\\A:\\;evila\\aevila.evil", "\\\\?\\UNC\\A:\\:evila\\aevila.evil", "\\\\?\\UNC\\A:\\/evila\\aevila.evil", "\\\\?\\UNC\\A:\\*evila\\aevila.evil", "\\\\?\\UNC\\A:\\&evila\\aevila.evil", "\\\\?\\UNC\\A:\\ evila\\aevila.evil", "\\\\?\\UNC\\?\\UNC\\A:\\aevila\\aevila.evil", "\\\\?\\UNC\\UNC\\A:\\aevila\\aevila.evil"]}, {"regex": "^((0|(\\(0\\)))?|(00|(\\(00\\)))?(\\s?|-?)(27|\\(27\\))|((\\+27))|(\\(\\+27\\))|\\(00(\\s?|-?)27\\))( |-)?(\\(?0?\\)?)( |-)?\\(?(1[0-9]|2[1-4,7-9]|3[1-6,9]|4[0-9]|5[1,3,6-9]|7[1-4,6,8,9]|8[0-9])\\)?(\\s?|-?)((\\d{3}(\\s?|-?)\\d{4}$)|((\\d{4})(\\s?|-?)(\\d{3})$)|([0-2](\\s?|-?)(\\d{3}(\\s?|-?)\\d{3}$)))", "exceptionStackTrace": null, "matches": ["(0027) (0) (10) 000 0000", "0027 (0) (10) 000 0000", " 27 (0) (10) 000 0000", "0 (0) (78) 000 0000", "0 (0) (76) 000 0000", "0 (0) (71) 000 0000", "0 (0) (7,) 000 0000", "0 (0) (56) 000 0000", "0 (0) (53) 000 0000", "0 (0) (51) 000 0000", "0 (0) (31) 000 0000", "0 (0) (3,) 000 0000", "0 (0) (27) 000 0000", "0 (0) (21) 000 0000", "0 (0) (10) 0 000000", "0 (0) (10) 0000000", "0 (0) (10)000 0000", "0 (0) (10 000 0000", "0 (0) 10) 000 0000", "0 (0)(10) 000 0000", "0 (0 (10) 000 0000", "0 () (10) 000 0000", "0 0) (10) 000 0000", "0(0) (10) 000 0000", " (0) (10) 000 0000", "(0027)100000000", "(+27)100000000", "+27100000000", "(27)100000000", "27100000000", "800000000", "790000000", "5,0000000", "400000000", "390000000", "2,0000000", "100000000", "(00-27) (0) (10) 000 0000", "(00 27) (0) (10) 000 0000", "(+27) (0) (10) 000 0000", "+27 (0) (10) 000 0000", "(00) 27 (0) (10) 000 0000", "00-27 (0) (10) 000 0000", "00 (27) (0) (10) 000 0000", "00 27 (0) (10) 000 0000", "(0) (0) (10) 000 0000", "0-(0) (10) 000 0000", "0 (0)-(10) 000 0000", "0 (0) (80) 000 0000", "0 (0) (79) 000 0000", "0 (0) (5,) 000 0000", "0 (0) (40) 000 0000", "0 (0) (39) 000 0000", "0 (0) (2,) 000 0000", "0 (0) (10)-000 0000", "0 (0) (10) 0-000 000", "0 (0) (10) 0 000-000", "0 (0) (10) 0 000 000", "0 (0) (10) 0000-000", "0 (0) (10) 0000 000", "0 (0) (10) 000-0000", "0 (0) (10) 000 0000"], "nonMatches": ["(00--27) (0) (10) 000 0000", "(00  27) (0) (10) 000 0000", "00--27 (0) (10) 000 0000", "00  27 (0) (10) 000 0000", "0000 27 (0) (10) 000 0000", "0 (0) (70) 000 0000", "0 (0) (50) 000 0000", "0 (0) (30) 000 0000", "0 (0) (20) 000 0000", "0 (0) (10)--000 0000", "0 (0) (10) 0--000 000", "0 (0) (10) 0 000--000", "0 (0) (10) 0 000 0000", "0 (0) (10) 0 000 00", "0 (0) (10) 0 000  000", "0 (0) (10) 0 0000 000", "0 (0) (10) 0 00 000", "0 (0) (10) 0  000 000", "0 (0) (10) 3 000 000", "0 (0) (10) 0000--000", "0 (0) (10) 0000 00", "0 (0) (10) 0000  000", "0 (0) (10) 00000 000", "0 (0) (10) 000--0000", "0 (0) (10) 000 00000", "0 (0) (10) 000 000", "0 (0) (10) 000  0000", "0 (0) (10) 0000 0000", "0 (0) (10) 00 0000", "0 (0) (10)  000 0000", "0 (0) (10)) 000 0000", "0 (0) ((10) 000 0000", "0 (0)  (10) 000 0000", "0 (0)) (10) 000 0000", "0 (00) (10) 000 0000", "0 ((0) (10) 000 0000", "0  (0) (10) 000 0000", "00 (0) (10) 000 0000"]}, {"regex": "^[+-]?\\d+(\\,\\d{2})? *?$", "exceptionStackTrace": null, "matches": ["-0,00  ", "-0,00", "-0 ", "-00,00 ", "0,00 ", "+0,00 ", "0", "-0,00 "], "nonMatches": ["-0,00,00 ", "-0,000 ", "-0,0 ", "-,00 ", "--0,00 "]}, {"regex": "^[a-zA-Z]+((\\s|\\-)[a-zA-Z]+)?$", "exceptionStackTrace": null, "matches": ["evil eVil", "evil EVIL", "evil e", "eVil evil", "EVIL evil", "e evil", "evil", "evil-evil", "evil evil"], "nonMatches": ["evil evil evil", "evil ev_il", "evil ev il", "evil ev4il", "evil  ", "evil 6", "evil _", "evil ", "ev_il evil", "ev il evil", "ev4il evil", "  evil", "6 evil", "_ evil", " evil"]}, {"regex": "^[a-zA-Z]+((((\\-)|(\\s))[a-zA-Z]+)?(,(\\s)?(((j|J)|(s|S))(r|R)(\\.)?|II|III|IV))?)?$", "exceptionStackTrace": null, "matches": ["evil-evil", "evil-evil, jr", "evil-evil,jr.", "evil, jr.", "evil-eVil, jr.", "evil-EVIL, jr.", "evil-e, jr.", "eVil-evil, jr.", "EVIL-evil, jr.", "e-evil, jr.", "evil", "evil evil, jr.", "evil-evil, IV", "evil-evil, III", "evil-evil, II", "evil-evil, Sr.", "evil-evil, sr.", "evil-evil, Jr.", "evil-evil, jR.", "evil-evil, jr."], "nonMatches": ["evil-evil, jr.-evil, jr.", "evil-evil, jr., jr.", "evil-evil, jr..", "evil-evil,  jr.", "evil-evil-evil, jr.", "evil-ev_il, jr.", "evil-ev il, jr.", "evil-ev4il, jr.", "evil- , jr.", "evil-6, jr.", "evil-_, jr.", "evil-, jr.", "ev_il-evil, jr.", "ev il-evil, jr.", "ev4il-evil, jr.", " -evil, jr.", "6-evil, jr.", "_-evil, jr.", "-evil, jr."]}]