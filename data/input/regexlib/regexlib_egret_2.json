[{"regex": "^([0-9]|[1-9][0-9]|[1-9][0-9][0-9])$", "exceptionStackTrace": null, "matches": ["100", "10", "0"], "nonMatches": ["000", "00"]}, {"regex": "^([01][0-9][0-9]|2[0-4][0-9]|25[0-5].[01][0-9][0-9]|2[0-4][0-9]|25[0-5].[01][0-9][0-9]|2[0-4][0-9]|25[0-5].[01][0-9][0-9]|2[0-4][0-9]|25[0-5])$", "exceptionStackTrace": null, "matches": ["250a000", "250_100", "250A100", "2500100", "250 100", "000", "250", "250a100", "200", "100"], "nonMatches": ["256", "250a200", "256a100"]}, {"regex": "(?i)\\w.*\\@\\w*\\.\\w*", "exceptionStackTrace": null, "matches": ["aevil@evil.eVil", "aevil@evil.EVIL", "aevil@evil.ev_il", "aevil@evil.ev il", "aevil@evil.ev4il", "aevil@evil.e", "aevil@evil. ", "aevil@evil.6", "aevil@evil._", "aevil@evil.", "aevil@eVil.evil", "aevil@EVIL.evil", "aevil@ev_il.evil", "aevil@ev4il.evil", "aevil@e.evil", "aevil@6.evil", "aevil@_.evil", "aevil@.evil", "a@@evil.evil", "a.@evil.evil", "aeVil@evil.evil", "aEVIL@evil.evil", "aev_il@evil.evil", "aev il@evil.evil", "aev4il@evil.evil", "ae@evil.evil", "a @evil.evil", "a6@evil.evil", "a_@evil.evil", "a@evil.evil", "_evil@evil.evil", "Aevil@evil.evil", "0evil@evil.evil", "a@.", "aevil@evil.evil"], "nonMatches": ["aevil@ev il.evil", "aevil@ .evil"]}, {"regex": "[a-zA-Z &#193;-&#218;&#225;-&#250;][^1234567890]+$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character range ;-&"}, "matches": []}, {"regex": "^((l((ll)|(b)|(bb)|(bbb)))|(bb*))$", "exceptionStackTrace": null, "matches": ["bbb", "b", "bb", "lbbb", "lbb", "lb", "lll"], "nonMatches": []}, {"regex": "^([1-9]([0-9])?)(\\.(([0])?|([1-9])?|[1]([0-1])?)?)?$", "exceptionStackTrace": null, "matches": ["10.11", "10", "10.", "1.0", "1", "10.10", "10.1", "10.0"], "nonMatches": ["10.100", "10.12", "10.0.0", "10.00", "100.0", "00.0"]}, {"regex": "\\b[A-Z0-9]{5}\\d{1}[01567]\\d{1}([0][1-9]|[12][0-9]|[3][0-1])\\d{1}[A-Z0-9]{3}[A-Z]{2}\\b", "exceptionStackTrace": null, "matches": ["00000070100000AA", "00000070010A00AA", "00000060010000AA", "00000050010000AA", "00000010010000AA", "00000000010000AA", "A0000070010000AA", "00000070300000AA", "00000070200000AA", "00000070010000AA"], "nonMatches": ["00000070320000AA", "00000070010000AAA", "00000070010000A", "000000700100000AA", "0000007001000AA", "00000070000000AA", "000000700010000AA", "0000007010000AA", "00000020010000AA", "000000070010000AA", "0000070010000AA"]}, {"regex": "\\b([Jj](([Aa][Nn][Uu][Aa][Rr][Yy]|[Aa][Nn])|([Uu][Nn][Ee]|[Uu][Nn])|([Uu][Ll][Yy]|[Uu][Ll])))\\b|\\b((([Ss][Ee][Pp][Tt]|[Nn][Oo][Vv]|[Dd][Ee][Cc])[Ee][Mm])|[Oo][Cc][Tt][Oo])[Bb][Ee][Rr]|([Ss][Ee][Pp]|[Nn][Oo][Vv]|[Dd][Ee][Cc]|[Oo][Cc][Tt])\\b|\\b([Mm][Aa]([Yy]|([Rr][Cc][Hh]|[Rr])))\\b|\\b[Aa](([Pp][Rr][Ii][Ll]|[Pp][Rr])|([Uu][Gg][Uu][Ss][Tt]|[Uu][Gg]))\\b|\\b[Ff]([Ee][Bb][Rr][Uu][Aa][Rr][Yy]|[Ee][Bb])\\b", "exceptionStackTrace": null, "matches": ["feB", "fEb", "februarY", "februaRy", "februAry", "febrUary", "febRuary", "feBruary", "fEbruary", "February", "auG", "aUg", "augusT", "auguSt", "augUst", "auGust", "aUgust", "apR", "aPr", "apriL", "aprIl", "apRil", "aPril", "April", "maR", "marcH", "marCh", "maRch", "maY", "mAy", "May", "ocT", "oCt", "Oct", "deC", "dEc", "Dec", "noV", "nOv", "Nov", "seP", "sEp", "Sep", "octOber", "ocTober", "oCtober", "October", "deCember", "dEcember", "December", "noVember", "nOvember", "November", "septembeR", "septembEr", "septemBer", "septeMber", "septEmber", "sepTember", "sePtember", "sEptember", "September", "juL", "jUl", "julY", "juLy", "jUly", "juN", "jUn", "junE", "juNe", "jUne", "jaN", "jAn", "januarY", "januaRy", "januAry", "janUary", "jaNuary", "jAnuary", "January", "feb", "february", "aug", "august", "apr", "april", "mar", "march", "may", "oct", "dec", "nov", "sep", "october", "december", "november", "september", "jul", "july", "jun", "june", "jan", "january"], "nonMatches": ["fea", "feA", "fab", "fAb", "februara", "februarA", "februaay", "februaAy", "februbry", "februBry", "febraary", "febrAary", "febauary", "febAuary", "fearuary", "feAruary", "fabruary", "fAbruary", "aebruary", "Aebruary", "aua", "auA", "aag", "aAg", "augusa", "augusA", "auguat", "auguAt", "augast", "augAst", "auaust", "auAust", "aagust", "aAgust", "apa", "apA", "aar", "aAr", "apria", "apriA", "apral", "aprAl", "apail", "apAil", "aaril", "aAril", "bpril", "Bpril", "marca", "marcA", "marah", "marAh", "maach", "maAch", "maa", "maA", "mby", "mBy", "aay", "Aay", "oca", "ocA", "oat", "oAt", "act", "Act", "dea", "deA", "dac", "dAc", "aec", "Aec", "noa", "noA", "nav", "nAv", "aov", "Aov", "sea", "seA", "sap", "sAp", "aep", "Aep", "octaber", "octAber", "ocaober", "ocAober", "oatober", "oAtober", "actober", "Actober", "deaember", "deAember", "dacember", "dAcember", "aecember", "Aecember", "noaember", "noAember", "navember", "nAvember", "aovember", "Aovember", "septembea", "septembeA", "septembar", "septembAr", "septemaer", "septemAer", "septeaber", "septeAber", "septamber", "septAmber", "sepaember", "sepAember", "seatember", "seAtember", "saptember", "sAptember", "aeptember", "Aeptember", "jal", "jAl", "jula", "julA", "juay", "juAy", "jaly", "jAly", "jua", "juA", "juna", "junA", "juae", "juAe", "jane", "jAne", "jaa", "jaA", "jbn", "jBn", "januara", "januarA", "januaay", "januaAy", "janubry", "januBry", "janaary", "janAary", "jaauary", "jaAuary", "jbnuary", "jBnuary", "aanuary", "Aanuary"]}, {"regex": "^[9]9\\d{10}|^[5]\\d{10}", "exceptionStackTrace": null, "matches": ["500000000000", "9900000000000", "50000000000", "990000000000"], "nonMatches": ["5000000000", "99000000000"]}, {"regex": "^([01][012]|0[1-9])/([0-2][0-9]|[3][0-1])/([0-9][0-9][0-9][0-9])$", "exceptionStackTrace": null, "matches": ["00/00/0000", "11/00/0000", "10/00/0000", "02/00/0000", "01/00/0000", "12/30/0000", "12/00/0000"], "nonMatches": ["12/32/0000", "13/00/0000", "22/00/0000"]}, {"regex": "https://www.ifirmationeyeserumblog.com/tryvexan-italy/", "exceptionStackTrace": null, "matches": ["https://wwwaifirmationeyeserumblogAcom/tryvexan-italy/", "https://wwwaifirmationeyeserumblog:com/tryvexan-italy/", "https://wwwaifirmationeyeserumblog0com/tryvexan-italy/", "https://wwwaifirmationeyeserumblog/com/tryvexan-italy/", "https://wwwaifirmationeyeserumblog-com/tryvexan-italy/", "https://wwwaifirmationeyeserumblog com/tryvexan-italy/", "https://wwwAifirmationeyeserumblogacom/tryvexan-italy/", "https://www:ifirmationeyeserumblogacom/tryvexan-italy/", "https://www0ifirmationeyeserumblogacom/tryvexan-italy/", "https://www/ifirmationeyeserumblogacom/tryvexan-italy/", "https://www-ifirmationeyeserumblogacom/tryvexan-italy/", "https://www ifirmationeyeserumblogacom/tryvexan-italy/", "https://wwwaifirmationeyeserumblogacom/tryvexan-italy/"], "nonMatches": []}, {"regex": "^(application|audio|example|image|message|model|multipart|text|video)\\/[a-zA-Z0-9]+([+.-][a-zA-z0-9]+)*$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (bad range): Invalid range: A-z"}, "matches": [], "nonMatches": []}, {"regex": "(pwd|password)\\s*=\\s*(?<pwd>(&#39;(([^&#39;])|(&#39;&#39;))+&#39;|[^&#39;;]+))", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<p"}, "matches": []}, {"regex": "^((\\d{1,2})?([.][\\d]{1,2})?){1}[%]{1}$", "exceptionStackTrace": null, "matches": ["0%", "0.00%", "00.0%", ".0%", "%", "0.0%"], "nonMatches": ["0.0%%", "0.0", "0.00.0%", "0.0.0%", "0.000%", "0.%", "000.0%"]}, {"regex": "^((0?[1-9]|1[012])(:[0-5]\\d){1,2}(\\ [AaPp][Mm]))$", "exceptionStackTrace": null, "matches": ["11:00 pm", "10:00 pm", "01:00 pM", "01:00 am", "01:00 Pm", "01:00 Am", "01:00:00 pm", "1:00 pm", "12:00 pm", "01:00 pm"], "nonMatches": ["13:00 pm", "01:00 pa", "01:00 pA", "01:00 bm", "01:00 Bm", "01:00:00:00 pm", "01 pm", "01:60 pm", "00:00 pm", "001:00 pm"]}, {"regex": "(([2-9]{1})([0-9]{2})([0-9]{3})([0-9]{4}))$", "exceptionStackTrace": null, "matches": ["22000000000", "2000000000"], "nonMatches": ["20000000000", "200000000", "000000000", "0000000000"]}, {"regex": "^([A-Z]{1,2}[0-9]{1,2}|[A-Z]{3}|[A-Z]{1,2}[0-9][A-Z])( |-)[0-9][A-Z]{2}", "exceptionStackTrace": null, "matches": ["AA0A 0AA", "A0 0AAA", "A00 0AA", "AA0 0AA", "A0A 0AA", "AAA 0AA", "A0-0AA", "A0 0AA"], "nonMatches": ["AAA0A 0AA", "0A 0AA", "AAAA 0AA", "AA 0AA", "A0 0A", "A000 0AA", "A 0AA", "AAA0 0AA", "0 0AA"]}, {"regex": "^[1-9]{1}[0-9]{3}$", "exceptionStackTrace": null, "matches": ["1000"], "nonMatches": ["10000", "100", "11000", "000", "0000"]}, {"regex": "^[A-Z]{1}( |-)?[1-9]{1}[0-9]{3}$", "exceptionStackTrace": null, "matches": ["A1000", "A-1000", "A 1000"], "nonMatches": ["A 10000", "A 100", "A 11000", "A 000", "A 0000", "A  1000", "AA 1000", " 1000"]}, {"regex": "^(F-)?((2[A|B])|[0-9]{2})[0-9]{3}$", "exceptionStackTrace": null, "matches": ["F-2|000", "F-2A000", "00000", "2B000", "F-00000", "F-2B000"], "nonMatches": ["F-000000", "F-0000", "F-2B0000", "F-2B00", "F-2C000", "F-F-2B000"]}, {"regex": "^(V-|I-)?[0-9]{4}$", "exceptionStackTrace": null, "matches": ["0000", "I-0000", "V-0000"], "nonMatches": ["V-00000", "V-000", "V-V-0000"]}, {"regex": "^[1-9]{1}[0-9]{3} ?[A-Z]{2}$", "exceptionStackTrace": null, "matches": ["1000AA", "1000 AA"], "nonMatches": ["1000 AAA", "1000 A", "1000  AA", "10000 AA", "100 AA", "11000 AA", "000 AA", "0000 AA"]}, {"regex": "^([1-9]{2}|[0-9][1-9]|[1-9][0-9])[0-9]{3}$", "exceptionStackTrace": null, "matches": ["10000", "01000", "11000"], "nonMatches": ["00000", "110000", "1100", "111000", "1000"]}, {"regex": "((^([\\d]{1,3})(,{1}([\\d]{3}))*)|(^[\\d]*))((\\.{1}[\\d]{2})?$)", "exceptionStackTrace": null, "matches": ["00.00", ".00", "0,000", "0,000,000.00", "0000.00", "000,000.00", "", "0", "0.00", "0,000.00"], "nonMatches": ["0,000.00.00", "0,000.000", "0,000.0", "0,000..00", "0,00000", "0,0000.00", "0,00.00", "0,,000.00", "0000,000.00", ",000.00"]}, {"regex": "(?:(?:(?:04|06|09|11)\\/(?:(?:[012][0-9])|30))|(?:(?:(?:0[135789])|(?:1[02]))\\/(?:(?:[012][0-9])|30|31))|(?:02\\/(?:[012][0-9])))\\/(?:19|20|21)[0-9][0-9]", "exceptionStackTrace": null, "matches": ["02/10/1900", "02/00/1900", "10/20/1900", "09/10/1900", "09/00/1900", "08/20/1900", "07/20/1900", "05/20/1900", "03/20/1900", "01/20/1900", "04/10/1900", "04/00/1900", "02/20/1900", "12/20/1900", "09/31/1900", "09/30/1900", "11/20/1900", "09/20/1900", "06/20/1900", "04/30/1900", "04/20/2100", "04/20/2000", "04/20/1900"], "nonMatches": ["02/30/1900", "00/20/1900"]}, {"regex": "([A-Za-z0-9]+:\\/\\/)?([a-zA-Z0-9]+(\\.[a-zA-Z0-9]+)*)?(\\/|(\\/([A-Za-z0-9\\:@!\\$&&#39;\\(\\}\\*\\+\\-_,;=~\\.]+|(%[A-F0-9]{2})+))*)(\\?[A-Za-z0-9]+=[A-Za-z0-9]+(&[A-Za-z0-9]+=[A-Za-z0-9]+)*)?", "exceptionStackTrace": null, "matches": ["evil://evil.evil/%00%00?evil=evil&evil=evil", "evil://evil.evil/%000?evil=evil&evil=evil", "evil://evil.evil/%0?evil=evil&evil=evil", "evil://evil.evil/%G0?evil=evil&evil=evil", "evil://evil.evil/%A0?evil=evil&evil=evil", "evil://evil.evil/evil/evil?evil=evil&evil=evil", "evil://evil.evil?evil=evil&evil=evil", "evil://evil.evil/~?evil=evil&evil=evil", "evil://evil.evil/}?evil=evil&evil=evil", "evil://evil.evil/@?evil=evil&evil=evil", "evil://evil.evil/??evil=evil&evil=evil", "evil://evil.evil/=?evil=evil&evil=evil", "evil://evil.evil/;?evil=evil&evil=evil", "evil://evil.evil/:?evil=evil&evil=evil", "evil://evil.evil//?evil=evil&evil=evil", "evil://evil.evil/.?evil=evil&evil=evil", "evil://evil.evil/-?evil=evil&evil=evil", "evil://evil.evil/,?evil=evil&evil=evil", "evil://evil.evil/+?evil=evil&evil=evil", "evil://evil.evil/*?evil=evil&evil=evil", "evil://evil.evil/(?evil=evil&evil=evil", "evil://evil.evil/&?evil=evil&evil=evil", "evil://evil.evil/%?evil=evil&evil=evil", "evil://evil.evil/$?evil=evil&evil=evil", "evil://evil.evil/#?evil=evil&evil=evil", "evil://evil.evil/!?evil=evil&evil=evil", "evil://evil.evil/eVil?evil=evil&evil=evil", "evil://evil.evil/EVIL?evil=evil&evil=evil", "evil://evil.evil/ev_il?evil=evil&evil=evil", "evil://evil.evil/ev il?evil=evil&evil=evil", "evil://evil.evil/ev4il?evil=evil&evil=evil", "evil://evil.evil/e?evil=evil&evil=evil", "evil://evil.evil/ ?evil=evil&evil=evil", "evil://evil.evil/6?evil=evil&evil=evil", "evil://evil.evil/_?evil=evil&evil=evil", "evil://evil.evil/?evil=evil&evil=evil?evil=evil&evil=evil", "evil://evil.evil/", "evil://evil.evil/?evil=evil&evil=evil&evil=evil", "evil://evil.evil/?evil=evil", "evil://evil.evil/?evil=evil&evil=eVil", "evil://evil.evil/?evil=evil&evil=EVIL", "evil://evil.evil/?evil=evil&evil=ev_il", "evil://evil.evil/?evil=evil&evil=ev il", "evil://evil.evil/?evil=evil&evil=ev4il", "evil://evil.evil/?evil=evil&evil=e", "evil://evil.evil/?evil=evil&evil= ", "evil://evil.evil/?evil=evil&evil=6", "evil://evil.evil/?evil=evil&evil=_", "evil://evil.evil/?evil=evil&evil=", "evil://evil.evil/?evil=evil&eVil=evil", "evil://evil.evil/?evil=evil&EVIL=evil", "evil://evil.evil/?evil=evil&ev_il=evil", "evil://evil.evil/?evil=evil&ev il=evil", "evil://evil.evil/?evil=evil&ev4il=evil", "evil://evil.evil/?evil=evil&e=evil", "evil://evil.evil/?evil=evil& =evil", "evil://evil.evil/?evil=evil&6=evil", "evil://evil.evil/?evil=evil&_=evil", "evil://evil.evil/?evil=evil&=evil", "evil://evil.evil/?evil=eVil&evil=evil", "evil://evil.evil/?evil=EVIL&evil=evil", "evil://evil.evil/?evil=ev_il&evil=evil", "evil://evil.evil/?evil=ev il&evil=evil", "evil://evil.evil/?evil=ev4il&evil=evil", "evil://evil.evil/?evil=e&evil=evil", "evil://evil.evil/?evil= &evil=evil", "evil://evil.evil/?evil=6&evil=evil", "evil://evil.evil/?evil=_&evil=evil", "evil://evil.evil/?evil=&evil=evil", "evil://evil.evil/?eVil=evil&evil=evil", "evil://evil.evil/?EVIL=evil&evil=evil", "evil://evil.evil/?ev_il=evil&evil=evil", "evil://evil.evil/?ev il=evil&evil=evil", "evil://evil.evil/?ev4il=evil&evil=evil", "evil://evil.evil/?e=evil&evil=evil", "evil://evil.evil/? =evil&evil=evil", "evil://evil.evil/?6=evil&evil=evil", "evil://evil.evil/?_=evil&evil=evil", "evil://evil.evil/?=evil&evil=evil", "evil://evil.evilevil.evil/?evil=evil&evil=evil", "evil:///?evil=evil&evil=evil", "evil://evil.evil.evil/?evil=evil&evil=evil", "evil://evil/?evil=evil&evil=evil", "evil://evil.eVil/?evil=evil&evil=evil", "evil://evil.EVIL/?evil=evil&evil=evil", "evil://evil.ev_il/?evil=evil&evil=evil", "evil://evil.ev il/?evil=evil&evil=evil", "evil://evil.ev4il/?evil=evil&evil=evil", "evil://evil.e/?evil=evil&evil=evil", "evil://evil. /?evil=evil&evil=evil", "evil://evil.6/?evil=evil&evil=evil", "evil://evil._/?evil=evil&evil=evil", "evil://evil./?evil=evil&evil=evil", "evil://eVil.evil/?evil=evil&evil=evil", "evil://EVIL.evil/?evil=evil&evil=evil", "evil://ev_il.evil/?evil=evil&evil=evil", "evil://ev il.evil/?evil=evil&evil=evil", "evil://ev4il.evil/?evil=evil&evil=evil", "evil://e.evil/?evil=evil&evil=evil", "evil:// .evil/?evil=evil&evil=evil", "evil://6.evil/?evil=evil&evil=evil", "evil://_.evil/?evil=evil&evil=evil", "evil://.evil/?evil=evil&evil=evil", "evil://evil://evil.evil/?evil=evil&evil=evil", "evil.evil/?evil=evil&evil=evil", "eVil://evil.evil/?evil=evil&evil=evil", "EVIL://evil.evil/?evil=evil&evil=evil", "ev_il://evil.evil/?evil=evil&evil=evil", "ev il://evil.evil/?evil=evil&evil=evil", "ev4il://evil.evil/?evil=evil&evil=evil", "e://evil.evil/?evil=evil&evil=evil", " ://evil.evil/?evil=evil&evil=evil", "6://evil.evil/?evil=evil&evil=evil", "_://evil.evil/?evil=evil&evil=evil", "://evil.evil/?evil=evil&evil=evil", "", "/", "evil://evil.evil/%00?evil=evil&evil=evil", "evil://evil.evil/evil?evil=evil&evil=evil", "evil://evil.evil/?evil=evil&evil=evil"], "nonMatches": []}, {"regex": "-?[0-9]{4}-(((0(1|3|5|7|8)|1(0|2))-(0[1-9]|(1|2)[0-9]|3[0-1]))|((0(4|6|9)|11)-(0[1-9]|(1|2)[0-9]|30))|(02-(0[1-9]|(1|2)[0-9])))T([0-1][0-9]|2[0-4]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\\.[0-999])?((\\+|-)([0-1][0-9]|2[0-4]):(0[0-9]|[1-5][0-9])|Z)?", "exceptionStackTrace": null, "matches": ["-0000-01-01T00:00:00.9+25:00", "-0000-01-01T00:00:00.9+00:00+00:00", "-0000-01-01T00:00:00.9", "-0000-01-01T00:00:00.9.9+00:00", "-0000-01-01T00:00:00+00:00", "-0000-01-01T00:00:00.0+00:00", "-00000-01-01T00:00:00.9+00:00", "--0000-01-01T00:00:00.9+00:00", "0000-01-01T00:00:00.9+00:00", "0000-02-20T00:00:00", "0000-02-10T00:00:00", "0000-02-01T00:00:00", "0000-11-01T00:00:00", "0000-09-01T00:00:00", "0000-06-01T00:00:00", "0000-04-30T00:00:00", "0000-04-20T00:00:00", "0000-04-10T00:00:00", "0000-04-01T00:00:00", "0000-12-01T00:00:00", "0000-10-01T00:00:00", "0000-08-01T00:00:00", "0000-07-01T00:00:00", "0000-05-01T00:00:00", "0000-03-01T00:00:00", "0000-01-30T00:00:00", "0000-01-20T00:00:00", "0000-01-10T00:00:00", "0000-01-01T20:00:00", "0000-01-01T00:10:00", "0000-01-01T00:00:10", "0000-01-01T00:00:00", "-0000-02-20T00:00:00.9+00:00", "-0000-02-10T00:00:00.9+00:00", "-0000-02-01T00:00:00.9+00:00", "-0000-11-01T00:00:00.9+00:00", "-0000-09-01T00:00:00.9+00:00", "-0000-06-01T00:00:00.9+00:00", "-0000-04-30T00:00:00.9+00:00", "-0000-04-20T00:00:00.9+00:00", "-0000-04-10T00:00:00.9+00:00", "-0000-04-01T00:00:00.9+00:00", "-0000-12-01T00:00:00.9+00:00", "-0000-10-01T00:00:00.9+00:00", "-0000-08-01T00:00:00.9+00:00", "-0000-07-01T00:00:00.9+00:00", "-0000-05-01T00:00:00.9+00:00", "-0000-03-01T00:00:00.9+00:00", "-0000-01-30T00:00:00.9+00:00", "-0000-01-20T00:00:00.9+00:00", "-0000-01-10T00:00:00.9+00:00", "-0000-01-01T20:00:00.9+00:00", "-0000-01-01T00:10:00.9+00:00", "-0000-01-01T00:00:10.9+00:00", "-0000-01-01T00:00:00.9Z", "-0000-01-01T00:00:00.9-00:00", "-0000-01-01T00:00:00.9+20:00", "-0000-01-01T00:00:00.9+00:10", "-0000-01-01T00:00:00.9+00:00"], "nonMatches": ["-0000-02-00T00:00:00.9+00:00", "-0000-04-00T00:00:00.9+00:00", "-0000-01-32T00:00:00.9+00:00", "-0000-01-01T25:00:00.9+00:00", "-0000-01-00T00:00:00.9+00:00", "-000-01-01T00:00:00.9+00:00"]}, {"regex": "-?[0-9]{4}-(((0(1|3|5|7|8)|1(0|2))-(0[1-9]|(1|2)[0-9]|3[0-1]))|((0(4|6|9)|11)-(0[1-9]|(1|2)[0-9]|30))|(02-(0[1-9]|(1|2)[0-9])))((\\+|-)([0-1][0-9]|2[0-4]):(0[0-9]|[1-5][0-9])|Z)?", "exceptionStackTrace": null, "matches": ["-0000-01-01+25:00", "-0000-01-01+00:00+00:00", "-0000-01-01", "-00000-01-01+00:00", "--0000-01-01+00:00", "0000-01-01+00:00", "0000-02-20", "0000-02-10", "0000-02-01", "0000-11-01", "0000-09-01", "0000-06-01", "0000-04-30", "0000-04-20", "0000-04-10", "0000-04-01", "0000-12-01", "0000-10-01", "0000-08-01", "0000-07-01", "0000-05-01", "0000-03-01", "0000-01-30", "0000-01-20", "0000-01-10", "0000-01-01", "-0000-02-20+00:00", "-0000-02-10+00:00", "-0000-02-01+00:00", "-0000-11-01+00:00", "-0000-09-01+00:00", "-0000-06-01+00:00", "-0000-04-30+00:00", "-0000-04-20+00:00", "-0000-04-10+00:00", "-0000-04-01+00:00", "-0000-12-01+00:00", "-0000-10-01+00:00", "-0000-08-01+00:00", "-0000-07-01+00:00", "-0000-05-01+00:00", "-0000-03-01+00:00", "-0000-01-30+00:00", "-0000-01-20+00:00", "-0000-01-10+00:00", "-0000-01-01Z", "-0000-01-01-00:00", "-0000-01-01+20:00", "-0000-01-01+00:10", "-0000-01-01+00:00"], "nonMatches": ["-0000-02-00+00:00", "-0000-04-00+00:00", "-0000-01-32+00:00", "-0000-01-00+00:00", "-000-01-01+00:00"]}, {"regex": "([0-1][0-9]|2[0-4]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\\.[0-999])?((\\+|-)([0-1][0-9]|2[0-4]):(0[0-9]|[1-5][0-9])|Z)?", "exceptionStackTrace": null, "matches": ["00:00:00.9+25:00", "00:00:00.9+00:00+00:00", "00:00:00.9", "00:00:00.9.9+00:00", "00:00:00+00:00", "00:00:00.0+00:00", "20:00:00", "00:10:00", "00:00:10", "00:00:00", "20:00:00.9+00:00", "00:10:00.9+00:00", "00:00:10.9+00:00", "00:00:00.9Z", "00:00:00.9-00:00", "00:00:00.9+20:00", "00:00:00.9+00:10", "00:00:00.9+00:00"], "nonMatches": ["25:00:00.9+00:00"]}, {"regex": "(((0[1-9]|(1|2)[0-9]|3[0-1])\\/(0(1|3|5|7|8)|1(0|2)))|((0[1-9]|(1|2)[0-9]|30)\\/(0(4|6|9)|11))|((0[1-9]|(1|2)[0-9])\\/02))\\/[0-9]{4}", "exceptionStackTrace": null, "matches": ["01/01/00000", "20/02/0000", "10/02/0000", "01/02/0000", "30/04/0000", "20/04/0000", "10/04/0000", "01/11/0000", "01/09/0000", "01/06/0000", "01/04/0000", "30/01/0000", "20/01/0000", "10/01/0000", "01/12/0000", "01/10/0000", "01/08/0000", "01/07/0000", "01/05/0000", "01/03/0000", "01/01/0000"], "nonMatches": ["00/02/0000", "00/04/0000", "32/01/0000", "01/01/000", "00/01/0000"]}, {"regex": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}", "exceptionStackTrace": null, "matches": ["00000000-0000-4000-b000-0000000000000", "00000000-0000-4000-b000-a00000000000", "00000000-0000-4000-ba00-000000000000", "00000000-0000-4000-a000-000000000000", "00000000-0000-4000-9000-000000000000", "00000000-0000-4000-8000-000000000000", "00000000-0000-4a00-b000-000000000000", "00000000-a000-4000-b000-000000000000", "000000000-0000-4000-b000-000000000000", "a0000000-0000-4000-b000-000000000000", "00000000-0000-4000-b000-000000000000"], "nonMatches": ["00000000-0000-4000-b000-00000000000", "00000000-0000-4000-b000-g00000000000", "00000000-0000-4000-b0000-000000000000", "00000000-0000-4000-b00-000000000000", "00000000-0000-4000-bg00-000000000000", "00000000-0000-4000-c000-000000000000", "00000000-0000-4000-0000-000000000000", "00000000-0000-40000-b000-000000000000", "00000000-0000-400-b000-000000000000", "00000000-0000-4g00-b000-000000000000", "00000000-00000-4000-b000-000000000000", "00000000-000-4000-b000-000000000000", "00000000-g000-4000-b000-000000000000", "0000000-0000-4000-b000-000000000000", "g0000000-0000-4000-b000-000000000000"]}, {"regex": "[a-f0-9]{8}-[a-f0-9]{4}-3[a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}", "exceptionStackTrace": null, "matches": ["00000000-0000-3000-b000-0000000000000", "00000000-0000-3000-b000-a00000000000", "00000000-0000-3000-ba00-000000000000", "00000000-0000-3000-a000-000000000000", "00000000-0000-3000-9000-000000000000", "00000000-0000-3000-8000-000000000000", "00000000-0000-3a00-b000-000000000000", "00000000-a000-3000-b000-000000000000", "000000000-0000-3000-b000-000000000000", "a0000000-0000-3000-b000-000000000000", "00000000-0000-3000-b000-000000000000"], "nonMatches": ["00000000-0000-3000-b000-00000000000", "00000000-0000-3000-b000-g00000000000", "00000000-0000-3000-b0000-000000000000", "00000000-0000-3000-b00-000000000000", "00000000-0000-3000-bg00-000000000000", "00000000-0000-3000-c000-000000000000", "00000000-0000-3000-0000-000000000000", "00000000-0000-30000-b000-000000000000", "00000000-0000-300-b000-000000000000", "00000000-0000-3g00-b000-000000000000", "00000000-00000-3000-b000-000000000000", "00000000-000-3000-b000-000000000000", "00000000-g000-3000-b000-000000000000", "0000000-0000-3000-b000-000000000000", "g0000000-0000-3000-b000-000000000000"]}, {"regex": "\\w?<\\s?\\/?[^\\s>]+(\\s+[^&quot;&#39;=]+(=(&quot;[^&quot;]*&quot;)|(&#39;[^\\&#39;]*&#39;)|([^\\s&quot;&#39;>]*))?)*\\s*\\/?>", "exceptionStackTrace": null, "matches": ["a< /evil evil> />", "a< /evil evil= />", "a< /evil evil< />", "a< /evil evil/ />", "a< /evil evileVil />", "a< /evil evilEVIL />", "a< /evil evilev_il />", "a< /evil evilev il />", "a< /evil evilev4il />", "a< /evil evile />", "a< /evil evil  />", "a< /evil evil6 />", "a< /evil evil_ />", "a< /evil evil&#39;>&#39; />", "a< /evil evil&#39;=&#39; />", "a< /evil evil&#39;<&#39; />", "a< /evil evil&#39;/&#39; />", "a< /evil evil&#39;eVil&#39; />", "a< /evil evil&#39;EVIL&#39; />", "a< /evil evil&#39;ev_il&#39; />", "a< /evil evil&#39;ev il&#39; />", "a< /evil evil&#39;ev4il&#39; />", "a< /evil evil&#39;e&#39; />", "a< /evil evil&#39; &#39; />", "a< /evil evil&#39;6&#39; />", "a< /evil evil&#39;_&#39; />", "a< /evil evil&#39;&#39; />", "a< /evil evil=&quot;evil&quot; //>", "a< /evil evil=&quot;evil&quot; >", "a< /evil evil=&quot;evil&quot;  />", "a< /evil evil=&quot;evil&quot;/>", "a< /evil evil=&quot;evil&quot; evil=&quot;evil&quot; />", "a< /evil />", "a< /evil evil />", "a< /evil evil=&quot;>&quot; />", "a< /evil evil=&quot;=&quot; />", "a< /evil evil=&quot;<&quot; />", "a< /evil evil=&quot;/&quot; />", "a< /evil evil=&quot;#&quot; />", "a< /evil evil=&quot;eVil&quot; />", "a< /evil evil=&quot;EVIL&quot; />", "a< /evil evil=&quot;ev_il&quot; />", "a< /evil evil=&quot;ev il&quot; />", "a< /evil evil=&quot;ev4il&quot; />", "a< /evil evil=&quot;e&quot; />", "a< /evil evil=&quot; &quot; />", "a< /evil evil=&quot;6&quot; />", "a< /evil evil=&quot;_&quot; />", "a< /evil evil=&quot;&quot; />", "a< /evil >=&quot;evil&quot; />", "a< /evil <=&quot;evil&quot; />", "a< /evil /=&quot;evil&quot; />", "a< /evil eVil=&quot;evil&quot; />", "a< /evil EVIL=&quot;evil&quot; />", "a< /evil ev_il=&quot;evil&quot; />", "a< /evil ev il=&quot;evil&quot; />", "a< /evil ev4il=&quot;evil&quot; />", "a< /evil e=&quot;evil&quot; />", "a< /evil  =&quot;evil&quot; />", "a< /evil 6=&quot;evil&quot; />", "a< /evil _=&quot;evil&quot; />", "a< /evil  evil=&quot;evil&quot; />", "a< /evilevil=&quot;evil&quot; />", "a< /> evil=&quot;evil&quot; />", "a< /= evil=&quot;evil&quot; />", "a< /< evil=&quot;evil&quot; />", "a< /; evil=&quot;evil&quot; />", "a< // evil=&quot;evil&quot; />", "a< /& evil=&quot;evil&quot; />", "a< /# evil=&quot;evil&quot; />", "a< /eVil evil=&quot;evil&quot; />", "a< /EVIL evil=&quot;evil&quot; />", "a< /ev_il evil=&quot;evil&quot; />", "a< /ev il evil=&quot;evil&quot; />", "a< /ev4il evil=&quot;evil&quot; />", "a< /e evil=&quot;evil&quot; />", "a< /  evil=&quot;evil&quot; />", "a< /6 evil=&quot;evil&quot; />", "a< /_ evil=&quot;evil&quot; />", "a< / evil=&quot;evil&quot; />", "a< //evil evil=&quot;evil&quot; />", "a< evil evil=&quot;evil&quot; />", "a</evil evil=&quot;evil&quot; />", "aa< /evil evil=&quot;evil&quot; />", "< /evil evil=&quot;evil&quot; />", "_< /evil evil=&quot;evil&quot; />", "A< /evil evil=&quot;evil&quot; />", "0< /evil evil=&quot;evil&quot; />", "<evil>", "a< /evil evilevil />", "a< /evil evil&#39;evil&#39; />", "a< /evil evil=&quot;evil&quot; />"], "nonMatches": ["a< /evil evil; />", "a< /evil evil& />", "a< /evil evil# />", "a< /evil evil&#39;;&#39; />", "a< /evil evil&#39;&&#39; />", "a< /evil evil&#39;#&#39; />", "a< /evil evil=&quot;evil&quot;=&quot;evil&quot; />", "a< /evil evil=&quot;;&quot; />", "a< /evil evil=&quot;&&quot; />", "a< /evil ==&quot;evil&quot; />", "a< /evil ;=&quot;evil&quot; />", "a< /evil &=&quot;evil&quot; />", "a< /evil #=&quot;evil&quot; />", "a< /evil =&quot;evil&quot; />", "a<  /evil evil=&quot;evil&quot; />"]}, {"regex": "(?<=^|[\\s ]+)[^\\!\\@\\%\\$\\s ]*([\\!\\@\\%\\$][^\\!\\@\\%\\$\\s ]*){2,}(?=[\\s ]+|$)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "look-behind requires fixed-width pattern"}, "matches": []}, {"regex": "(?n)                           (?# ExplicitCapture - capture named groups only )\n^    \n    -?                         (?# Optional sign )\n    (\n        \\d{1,8}(\\.\\d{1,2})?    (?# Decimal point and trailing digits optional )\n        |\n        \\d{0,8}(\\.\\d{1,2})     (?# Leading digits optional )\n    )\n$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?n"}, "matches": []}, {"regex": "^(([1-9])|(0[1-9])|(1[0-2]))\\/((0[1-9])|([1-31]))\\/((\\d{2})|(\\d{4}))$", "exceptionStackTrace": null, "matches": ["1/2/00", "10/01/00", "01/01/00", "1/1/00", "1/01/0000", "1/01/00"], "nonMatches": ["13/01/00", "00/01/00", "1/0/00", "1/01/00000", "1/01/000", "1/01/0", "1/00/00", "0/01/00"]}, {"regex": "^((0?[1-9]|[12][0-9]|3[01])[\\/](0?[1-9]|1[0-2]))$", "exceptionStackTrace": null, "matches": ["30/01", "10/01", "01/1", "1/01", "31/1", "20/1", "1/10", "1/1", "31/01", "20/01", "01/10", "01/01"], "nonMatches": ["32/01", "01/13", "01/00", "01/001", "00/01", "001/01"]}, {"regex": "^[0-9]*[1-9]+[0-9]*$", "exceptionStackTrace": null, "matches": ["0100", "01", "0110", "0010", "10", "1", "010"], "nonMatches": ["00", "000"]}, {"regex": "^(([1-9]?\\d|1\\d\\d|2[0-4]\\d|25[0-5]).){3}([1-9]?\\d|1\\d\\d|2[0-4]\\d|25[0-5])$", "exceptionStackTrace": null, "matches": ["250a200a200a10", "10a10a10a110", "10a10a10a0", "10_10a10a10", "10A10a10a10", "10010a10a10", "10 10a10a10", "110a10a10a10", "0a10a10a10", "250a250a250a0", "200a250a250a0", "100a250a250a0", "0a250a250a250", "0a250a250a200", "0a250a250a100", "0a250a250a0", "250a250a250a10", "200a200a200a10", "100a100a100a10", "10a10a10a250", "10a10a10a200", "10a10a10a100", "10a10a10a10"], "nonMatches": ["256a250a250a10", "10a10a10a256", "10a10a10a00", "10a10a10a10a10", "10a10a10", "00a10a10a10"]}, {"regex": "Facebook Customer Service, Facebook Customer Service Number", "exceptionStackTrace": null, "matches": ["Facebook Customer Service, Facebook Customer Service Number"], "nonMatches": []}, {"regex": "http://www.facebook-customerservice.com/", "exceptionStackTrace": null, "matches": ["http://wwwafacebook-customerserviceAcom/", "http://wwwafacebook-customerservice:com/", "http://wwwafacebook-customerservice0com/", "http://wwwafacebook-customerservice/com/", "http://wwwafacebook-customerservice-com/", "http://wwwafacebook-customerservice com/", "http://wwwAfacebook-customerserviceacom/", "http://www:facebook-customerserviceacom/", "http://www0facebook-customerserviceacom/", "http://www/facebook-customerserviceacom/", "http://www-facebook-customerserviceacom/", "http://www facebook-customerserviceacom/", "http://wwwafacebook-customerserviceacom/"], "nonMatches": []}, {"regex": "http://www.facebook-customerservice.com/", "exceptionStackTrace": null, "matches": ["http://wwwafacebook-customerserviceAcom/", "http://wwwafacebook-customerservice:com/", "http://wwwafacebook-customerservice0com/", "http://wwwafacebook-customerservice/com/", "http://wwwafacebook-customerservice-com/", "http://wwwafacebook-customerservice com/", "http://wwwAfacebook-customerserviceacom/", "http://www:facebook-customerserviceacom/", "http://www0facebook-customerserviceacom/", "http://www/facebook-customerserviceacom/", "http://www-facebook-customerserviceacom/", "http://www facebook-customerserviceacom/", "http://wwwafacebook-customerserviceacom/"], "nonMatches": []}, {"regex": "http://www.facebook-customerservice.com/", "exceptionStackTrace": null, "matches": ["http://wwwafacebook-customerserviceAcom/", "http://wwwafacebook-customerservice:com/", "http://wwwafacebook-customerservice0com/", "http://wwwafacebook-customerservice/com/", "http://wwwafacebook-customerservice-com/", "http://wwwafacebook-customerservice com/", "http://wwwAfacebook-customerserviceacom/", "http://www:facebook-customerserviceacom/", "http://www0facebook-customerserviceacom/", "http://www/facebook-customerserviceacom/", "http://www-facebook-customerserviceacom/", "http://www facebook-customerserviceacom/", "http://wwwafacebook-customerserviceacom/"], "nonMatches": []}, {"regex": "http://www.facebook-customerservice.com/", "exceptionStackTrace": null, "matches": ["http://wwwafacebook-customerserviceAcom/", "http://wwwafacebook-customerservice:com/", "http://wwwafacebook-customerservice0com/", "http://wwwafacebook-customerservice/com/", "http://wwwafacebook-customerservice-com/", "http://wwwafacebook-customerservice com/", "http://wwwAfacebook-customerserviceacom/", "http://www:facebook-customerserviceacom/", "http://www0facebook-customerserviceacom/", "http://www/facebook-customerserviceacom/", "http://www-facebook-customerserviceacom/", "http://www facebook-customerserviceacom/", "http://wwwafacebook-customerserviceacom/"], "nonMatches": []}, {"regex": "http://www.facebook-customerservice.com/", "exceptionStackTrace": null, "matches": ["http://wwwafacebook-customerserviceAcom/", "http://wwwafacebook-customerservice:com/", "http://wwwafacebook-customerservice0com/", "http://wwwafacebook-customerservice/com/", "http://wwwafacebook-customerservice-com/", "http://wwwafacebook-customerservice com/", "http://wwwAfacebook-customerserviceacom/", "http://www:facebook-customerserviceacom/", "http://www0facebook-customerserviceacom/", "http://www/facebook-customerserviceacom/", "http://www-facebook-customerserviceacom/", "http://www facebook-customerserviceacom/", "http://wwwafacebook-customerserviceacom/"], "nonMatches": []}, {"regex": "http://www.facebook-customerservice.com/", "exceptionStackTrace": null, "matches": ["http://wwwafacebook-customerserviceAcom/", "http://wwwafacebook-customerservice:com/", "http://wwwafacebook-customerservice0com/", "http://wwwafacebook-customerservice/com/", "http://wwwafacebook-customerservice-com/", "http://wwwafacebook-customerservice com/", "http://wwwAfacebook-customerserviceacom/", "http://www:facebook-customerserviceacom/", "http://www0facebook-customerserviceacom/", "http://www/facebook-customerserviceacom/", "http://www-facebook-customerserviceacom/", "http://www facebook-customerserviceacom/", "http://wwwafacebook-customerserviceacom/"], "nonMatches": []}, {"regex": "http://www.facebook-customerservice.com/", "exceptionStackTrace": null, "matches": ["http://wwwafacebook-customerserviceAcom/", "http://wwwafacebook-customerservice:com/", "http://wwwafacebook-customerservice0com/", "http://wwwafacebook-customerservice/com/", "http://wwwafacebook-customerservice-com/", "http://wwwafacebook-customerservice com/", "http://wwwAfacebook-customerserviceacom/", "http://www:facebook-customerserviceacom/", "http://www0facebook-customerserviceacom/", "http://www/facebook-customerserviceacom/", "http://www-facebook-customerserviceacom/", "http://www facebook-customerserviceacom/", "http://wwwafacebook-customerserviceacom/"], "nonMatches": []}, {"regex": "http://www.facebook-customerservice.com/", "exceptionStackTrace": null, "matches": ["http://wwwafacebook-customerserviceAcom/", "http://wwwafacebook-customerservice:com/", "http://wwwafacebook-customerservice0com/", "http://wwwafacebook-customerservice/com/", "http://wwwafacebook-customerservice-com/", "http://wwwafacebook-customerservice com/", "http://wwwAfacebook-customerserviceacom/", "http://www:facebook-customerserviceacom/", "http://www0facebook-customerserviceacom/", "http://www/facebook-customerserviceacom/", "http://www-facebook-customerserviceacom/", "http://www facebook-customerserviceacom/", "http://wwwafacebook-customerserviceacom/"], "nonMatches": []}, {"regex": "http://www.facebook-customerservice.com/", "exceptionStackTrace": null, "matches": ["http://wwwafacebook-customerserviceAcom/", "http://wwwafacebook-customerservice:com/", "http://wwwafacebook-customerservice0com/", "http://wwwafacebook-customerservice/com/", "http://wwwafacebook-customerservice-com/", "http://wwwafacebook-customerservice com/", "http://wwwAfacebook-customerserviceacom/", "http://www:facebook-customerserviceacom/", "http://www0facebook-customerserviceacom/", "http://www/facebook-customerserviceacom/", "http://www-facebook-customerserviceacom/", "http://www facebook-customerserviceacom/", "http://wwwafacebook-customerserviceacom/"], "nonMatches": []}, {"regex": "http://www.facebook-customerservice.com/", "exceptionStackTrace": null, "matches": ["http://wwwafacebook-customerserviceAcom/", "http://wwwafacebook-customerservice:com/", "http://wwwafacebook-customerservice0com/", "http://wwwafacebook-customerservice/com/", "http://wwwafacebook-customerservice-com/", "http://wwwafacebook-customerservice com/", "http://wwwAfacebook-customerserviceacom/", "http://www:facebook-customerserviceacom/", "http://www0facebook-customerserviceacom/", "http://www/facebook-customerserviceacom/", "http://www-facebook-customerserviceacom/", "http://www facebook-customerserviceacom/", "http://wwwafacebook-customerserviceacom/"], "nonMatches": []}, {"regex": "\\(?(\\d{3})(?:\\)*|\\)\\s*-*|\\.*|\\s*|/*|)(\\d{3})(?:\\)*|-*|\\.*|\\s*|/*|)(\\d{4})(?:\\s?|,\\s?)", "exceptionStackTrace": null, "matches": ["(000//000)0000 ", "(000  000)0000 ", "(000..000)0000 ", "(000) --000)0000 ", "(000) 000)0000 ", "(000)  -000)0000 ", "(000)-000)0000 ", "(000)000//0000 ", "(000)000  0000 ", "(000)000..0000 ", "(000)000--0000 ", "(000)000)0000,  ", "(000)000)0000,", "(000)000)0000  ", "(000)000)0000", "(000)000)00000 ", "(000)000))0000 ", "(000)0000000 ", "(000))000)0000 ", "(000000)0000 ", "(0000)000)0000 ", "((000)000)0000 ", "000)000)0000 ", "000)0000000", "0000000000,", "0000000000", "(000/000)0000 ", "(000 000)0000 ", "(000.000)0000 ", "(000) -000)0000 ", "(000)000/0000 ", "(000)000 0000 ", "(000)000.0000 ", "(000)000-0000 ", "(000)000)0000, ", "(000)000)0000 "], "nonMatches": ["(000)000)000 ", "(000)0000)0000 ", "(000)00)0000 ", "(00)000)0000 "]}, {"regex": "^((\\d|\\d\\d|[0-1]\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|\\d\\d|[0-1]\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|\\d\\d|[0-1]\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|\\d\\d|[0-1]\\d\\d|2[0-4]\\d|25[0-5]))$\n", "exceptionStackTrace": null, "matches": ["250.0.0.0\n", "200.0.0.0\n", "000.0.0.0\n", "00.0.0.0\n", "0.250.0.0\n", "0.200.0.0\n", "0.000.0.0\n", "0.00.0.0\n", "0.0.250.0\n", "0.0.200.0\n", "0.0.000.0\n", "0.0.00.0\n", "0.0.0.250\n", "0.0.0.200\n", "0.0.0.000\n", "0.0.0.00\n", "0.0.0.0\n"], "nonMatches": ["256.0.0.0\n", "0.256.0.0\n", "0.0.256.0\n", "0.0.0.256\n"]}, {"regex": "[a-zA-Z\\u0410-\\u042F\\u0430-\\u044F\\u0401\\u0451\\u0101\\u0100\\u010c\\u010d\\u0112\\u0113\\u011E\\u011F\\u012A\\u012B\\u0136\\u0137\\u013b\\u013C\\u0145\\u0146\\u0160\\u0161\\u016A\\u016B\\u017D\\u017E]$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 1040"}, "matches": [], "nonMatches": []}, {"regex": "^[0-9]{5}([\\s-]{1}[0-9]{4})?$", "exceptionStackTrace": null, "matches": ["00000 0000", "00000", "00000-0000"], "nonMatches": ["00000-0000-0000", "00000-00000", "00000-000", "00000--0000", "000000000", "000000-0000", "0000-0000"]}, {"regex": "^http://([a-zA-Z0-9_\\-]+)([\\.][a-zA-Z0-9_\\-]+)+([/][a-zA-Z0-9\\~\\(\\)_\\-]*)+([\\.][a-zA-Z0-9\\(\\)_\\-]+)*$", "exceptionStackTrace": null, "matches": ["http://evil.evil/evil.evil.evil", "http://evil.evil/evil", "http://evil.evil/evil.-", "http://evil.evil/evil.)", "http://evil.evil/evil.(", "http://evil.evil/evil.eVil", "http://evil.evil/evil.EVIL", "http://evil.evil/evil.ev_il", "http://evil.evil/evil.ev4il", "http://evil.evil/evil.e", "http://evil.evil/evil.6", "http://evil.evil/evil._", "http://evil.evil/evil/evil.evil", "http://evil.evil/~.evil", "http://evil.evil//.evil", "http://evil.evil/-.evil", "http://evil.evil/).evil", "http://evil.evil/(.evil", "http://evil.evil/eVil.evil", "http://evil.evil/EVIL.evil", "http://evil.evil/ev_il.evil", "http://evil.evil/ev4il.evil", "http://evil.evil/e.evil", "http://evil.evil/6.evil", "http://evil.evil/_.evil", "http://evil.evil/.evil", "http://evil.evil.evil/evil.evil", "http://evil.-/evil.evil", "http://evil.eVil/evil.evil", "http://evil.EVIL/evil.evil", "http://evil.ev_il/evil.evil", "http://evil.ev4il/evil.evil", "http://evil.e/evil.evil", "http://evil.6/evil.evil", "http://evil._/evil.evil", "http://-.evil/evil.evil", "http://eVil.evil/evil.evil", "http://EVIL.evil/evil.evil", "http://ev_il.evil/evil.evil", "http://ev4il.evil/evil.evil", "http://e.evil/evil.evil", "http://6.evil/evil.evil", "http://_.evil/evil.evil", "http://evil.evil/", "http://evil.evil/evil.evil"], "nonMatches": ["http://evil.evil/evil.~", "http://evil.evil/evil.:", "http://evil.evil/evil./", "http://evil.evil/evil..", "http://evil.evil/evil.ev il", "http://evil.evil/evil. ", "http://evil.evil/evil.", "http://evil.evil.evil", "http://evil.evil/:.evil", "http://evil.evil/..evil", "http://evil.evil/ev il.evil", "http://evil.evil/ .evil", "http://evil/evil.evil", "http://evil.~/evil.evil", "http://evil.:/evil.evil", "http://evil.//evil.evil", "http://evil../evil.evil", "http://evil.)/evil.evil", "http://evil.(/evil.evil", "http://evil.ev il/evil.evil", "http://evil. /evil.evil", "http://evil./evil.evil", "http://~.evil/evil.evil", "http://:.evil/evil.evil", "http:///.evil/evil.evil", "http://..evil/evil.evil", "http://).evil/evil.evil", "http://(.evil/evil.evil", "http://ev il.evil/evil.evil", "http:// .evil/evil.evil", "http://.evil/evil.evil"]}, {"regex": "https://alphajackedhelp.com/erx-pro-male-enhancement/", "exceptionStackTrace": null, "matches": ["https://alphajackedhelpAcom/erx-pro-male-enhancement/", "https://alphajackedhelp:com/erx-pro-male-enhancement/", "https://alphajackedhelp0com/erx-pro-male-enhancement/", "https://alphajackedhelp/com/erx-pro-male-enhancement/", "https://alphajackedhelp-com/erx-pro-male-enhancement/", "https://alphajackedhelp com/erx-pro-male-enhancement/", "https://alphajackedhelpacom/erx-pro-male-enhancement/"], "nonMatches": []}, {"regex": "^((\\d[-. ]?)?((\\(\\d{3}\\))|\\d{3}))?[-. ]?\\d{3}[-. ]?\\d{4}$", "exceptionStackTrace": null, "matches": ["0 (000) 0000000", "0 (000) 000.0000", "0 (000) 000-0000", "0 (000)000 0000", "0 (000).000 0000", "0 (000)-000 0000", " 000 0000", "(000) 000 0000", "0(000) 000 0000", "0.(000) 000 0000", "0-(000) 000 0000", "0000000", "0 000 000 0000", "0 (000) 000 0000"], "nonMatches": ["0 0000 000 0000", "0 00 000 0000", "0 (000) 000 00000", "0 (000) 000 000", "0 (000) 000  0000", "0 (000) 0000 0000", "0 (000) 00 0000", "0 (000)  000 0000", "0 (000)0 (000) 000 0000", "0 (0000) 000 0000", "0 (00) 000 0000", "0 0 (000) 000 0000", "0  (000) 000 0000"]}, {"regex": "fgrdg", "exceptionStackTrace": null, "matches": ["fgrdg"], "nonMatches": []}, {"regex": "^[a-zA-Z]\\w{0,30}$", "exceptionStackTrace": null, "matches": ["Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "A_", "AA", "A0", "aa", "A", "Aa"], "nonMatches": ["Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"]}, {"regex": "^[ABCEGHJKLMNPRSTVXY][0-9][A-Z]\\s?[0-9][A-Z][0-9]$", "exceptionStackTrace": null, "matches": ["X0A 0A0", "V0A 0A0", "T0A 0A0", "S0A 0A0", "R0A 0A0", "P0A 0A0", "N0A 0A0", "M0A 0A0", "L0A 0A0", "K0A 0A0", "J0A 0A0", "H0A 0A0", "G0A 0A0", "E0A 0A0", "C0A 0A0", "B0A 0A0", "A0A 0A0", "Y0A0A0", "Y0A 0A0"], "nonMatches": ["Y0A  0A0", "D0A 0A0"]}, {"regex": "^((0[0-9])|(1[0-2])|(2[1-9])|(3[0-2])|(6[1-9])|(7[0-2])|80)([0-9]{7})$", "exceptionStackTrace": null, "matches": ["800000000", "700000000", "610000000", "300000000", "210000000", "100000000", "000000000"], "nonMatches": ["730000000", "600000000", "330000000", "200000000", "130000000", "0000000000", "00000000"]}, {"regex": "(\\[url=?&quot;?)([^\\]&quot;]*)(&quot;?\\])([^\\[]*)(\\[/url\\])", "exceptionStackTrace": null, "matches": ["[url=&quot;evil&quot;]][/url]", "[url=&quot;evil&quot;]=[/url]", "[url=&quot;evil&quot;];[/url]", "[url=&quot;evil&quot;]/[/url]", "[url=&quot;evil&quot;]&[/url]", "[url=&quot;evil&quot;]eVil[/url]", "[url=&quot;evil&quot;]EVIL[/url]", "[url=&quot;evil&quot;]ev_il[/url]", "[url=&quot;evil&quot;]ev il[/url]", "[url=&quot;evil&quot;]ev4il[/url]", "[url=&quot;evil&quot;]e[/url]", "[url=&quot;evil&quot;] [/url]", "[url=&quot;evil&quot;]6[/url]", "[url=&quot;evil&quot;]_[/url]", "[url=&quot;evil&quot;][/url]", "[url=&quot;evil&quot]evil[/url]", "[url=&quot;[&quot;]evil[/url]", "[url=&quot;=&quot;]evil[/url]", "[url=&quot;/&quot;]evil[/url]", "[url=&quot;eVil&quot;]evil[/url]", "[url=&quot;EVIL&quot;]evil[/url]", "[url=&quot;ev_il&quot;]evil[/url]", "[url=&quot;ev il&quot;]evil[/url]", "[url=&quot;ev4il&quot;]evil[/url]", "[url=&quot;e&quot;]evil[/url]", "[url=&quot; &quot;]evil[/url]", "[url=&quot;6&quot;]evil[/url]", "[url=&quot;_&quot;]evil[/url]", "[url=&quot;&quot;]evil[/url]", "[url=&quotevil&quot;]evil[/url]", "[url&quot;evil&quot;]evil[/url]", "[url&quot&quot][/url]", "[url=&quot;evil&quot;]evil[/url]"], "nonMatches": ["[url=&quot;evil&quot;][[/url]", "[url=&quot;evil&quot;;]evil[/url]", "[url=&quot;]&quot;]evil[/url]", "[url=&quot;;&quot;]evil[/url]", "[url=&quot;&&quot;]evil[/url]", "[url=&quot;;evil&quot;]evil[/url]", "[url==&quot;evil&quot;]evil[/url]"]}, {"regex": "^[1-9][0-9]{0,2}$", "exceptionStackTrace": null, "matches": ["100", "1", "10"], "nonMatches": ["1000", "00"]}, {"regex": "^((0[1-9]|[12][0-9]|3[01])([/])(0[13578]|[1][02])([/])(19[0-9][0-9]|20[0-9][0-9]))|((0[1-9]|[12][0-9]|30)([/])(0[469]|11)([/])(19[0-9][0-9]|20[0-9][0-9]))|((0[1-9]|[1][0-9]|[2][0-8])([/])(02)([/])(19[0-9][0-9]|20[0-9][0-9]))|((29)([/])(02)([/])(190[48]|19[13579][26]|19[2468][048]|20[02468][048]|20[13579][26]))$", "exceptionStackTrace": null, "matches": ["29/02/2092", "29/02/2076", "29/02/2056", "29/02/2036", "29/02/2016", "29/02/2084", "29/02/2080", "29/02/2068", "29/02/2048", "29/02/2028", "29/02/2008", "29/02/1984", "29/02/1980", "29/02/1968", "29/02/1948", "29/02/1928", "29/02/1992", "29/02/1976", "29/02/1956", "29/02/1936", "29/02/1916", "29/02/1904", "10/09/1900", "01/06/1900", "01/04/1900", "30/08/1900", "10/08/1900", "01/10/1900", "01/07/1900", "01/05/1900", "01/03/1900", "01/01/1900", "29/02/2096", "29/02/2088", "29/02/1988", "29/02/1996", "29/02/1908", "20/02/1900", "10/02/1900", "01/02/2000", "01/02/1900", "30/09/1900", "20/09/1900", "01/11/1900", "01/09/2000", "01/09/1900", "31/08/1900", "20/08/1900", "01/12/1900", "01/08/2000", "01/08/1900"], "nonMatches": ["29/02/2090", "29/02/2006", "29/02/2081", "29/02/2018", "29/02/1981", "29/02/1990", "29/02/1906", "29/02/1900", "00/02/1900", "00/09/1900", "32/08/1900", "01/00/1900", "00/08/1900"]}, {"regex": "(SELECT\\s(?:DISTINCT)?[A-Za-z0-9_\\*\\)\\(,\\s\\.&#39;\\+\\|\\:=]+?)\\s(?:FROM\\s[\\w\\.]+)", "exceptionStackTrace": null, "matches": ["SELECT DISTINCTevil FROM .", "SELECT DISTINCTevil FROM eVil", "SELECT DISTINCTevil FROM EVIL", "SELECT DISTINCTevil FROM ev_il", "SELECT DISTINCTevil FROM ev il", "SELECT DISTINCTevil FROM ev4il", "SELECT DISTINCTevil FROM e", "SELECT DISTINCTevil FROM 6", "SELECT DISTINCTevil FROM _", "SELECT DISTINCT| FROM evil", "SELECT DISTINCT= FROM evil", "SELECT DISTINCT; FROM evil", "SELECT DISTINCT: FROM evil", "SELECT DISTINCT. FROM evil", "SELECT DISTINCT, FROM evil", "SELECT DISTINCT+ FROM evil", "SELECT DISTINCT* FROM evil", "SELECT DISTINCT) FROM evil", "SELECT DISTINCT( FROM evil", "SELECT DISTINCT& FROM evil", "SELECT DISTINCT# FROM evil", "SELECT DISTINCTeVil FROM evil", "SELECT DISTINCTEVIL FROM evil", "SELECT DISTINCTev_il FROM evil", "SELECT DISTINCTev il FROM evil", "SELECT DISTINCTev4il FROM evil", "SELECT DISTINCTe FROM evil", "SELECT DISTINCT  FROM evil", "SELECT DISTINCT6 FROM evil", "SELECT DISTINCT_ FROM evil", "SELECT DISTINCT FROM evil", "SELECT DISTINCTDISTINCTevil FROM evil", "SELECT evil FROM evil", "SELECT DISTINCTevil FROM evil"], "nonMatches": ["SELECT DISTINCTevil FROM |", "SELECT DISTINCTevil FROM =", "SELECT DISTINCTevil FROM ;", "SELECT DISTINCTevil FROM :", "SELECT DISTINCTevil FROM ,", "SELECT DISTINCTevil FROM +", "SELECT DISTINCTevil FROM *", "SELECT DISTINCTevil FROM )", "SELECT DISTINCTevil FROM (", "SELECT DISTINCTevil FROM &", "SELECT DISTINCTevil FROM #", "SELECT DISTINCTevil FROM  ", "SELECT DISTINCTevil FROM "]}, {"regex": "^[-+]??(\\\\d++[.]\\\\d*?|[.]\\\\d+?|\\\\d+(?=[eE]))([eE][-+]??\\\\d++)?$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "multiple repeat"}, "matches": []}, {"regex": "^((\\+\\s?\\d{2}|\\(?00\\s?\\d{2}\\)?)\\s?\\d{2}\\s?\\d{3}\\s?\\d{4})", "exceptionStackTrace": null, "matches": ["(00 00 00 000 0000", "(0000) 00 000 0000", "00 00) 00 000 0000", "+ 00 00 000 00000", "+ 00 00 0000000", "+ 00 00000 0000", "+ 0000 000 0000", "+00 00 000 0000", "0000000000000", "+00000000000", "(00 00) 00 000 0000", "+ 00 00 000 0000"], "nonMatches": ["(00 00)) 00 000 0000", "(00 000) 00 000 0000", "(00 0) 00 000 0000", "(00  00) 00 000 0000", "((00 00) 00 000 0000", "+ 00 00 000 000", "+ 00 00 000  0000", "+ 00 00 0000 0000", "+ 00 00 00 0000", "+ 00 00  000 0000", "+ 00 000 000 0000", "+ 00 0 000 0000", "+ 00  00 000 0000", "+ 000 00 000 0000", "+ 0 00 000 0000", "+  00 00 000 0000"]}, {"regex": "^((\\+)?(\\d{2}[-])?(\\d{10}){1})?(\\d{11}){0,1}?$", "exceptionStackTrace": null, "matches": ["+00-0000000000", "00000000000", "+000000000000000000000", "00-000000000000000000000", "", "+00-000000000000000000000"], "nonMatches": ["+00-00000000000000000000000000000000", "+00-0000000000+00-000000000000000000000", "+00-0000000000000000000000000000000", "+00-00000000000", "+00-0000000000000000000000", "+00-00000000000000000000", "+00-00-000000000000000000000", "+000-000000000000000000000", "+0-000000000000000000000", "++00-000000000000000000000"]}, {"regex": "(https?://)?((?:(\\w+-)*\\w+)\\.)+(?:com|org|net|edu|gov|biz|info|name|museum|[a-z]{2})(\\/?\\w?-?=?_?\\??&?)+[\\.]?[a-z0-9\\?=&_\\-%#]*", "exceptionStackTrace": null, "matches": ["https://evil-evil.aaa/a-=_?&.evil", "https://evil-evil.com/a-=_?&.?", "https://evil-evil.com/a-=_?&.=", "https://evil-evil.com/a-=_?&.:", "https://evil-evil.com/a-=_?&./", "https://evil-evil.com/a-=_?&..", "https://evil-evil.com/a-=_?&.-", "https://evil-evil.com/a-=_?&.&", "https://evil-evil.com/a-=_?&.%", "https://evil-evil.com/a-=_?&.#", "https://evil-evil.com/a-=_?&.eVil", "https://evil-evil.com/a-=_?&.EVIL", "https://evil-evil.com/a-=_?&.ev_il", "https://evil-evil.com/a-=_?&.ev il", "https://evil-evil.com/a-=_?&.ev4il", "https://evil-evil.com/a-=_?&.e", "https://evil-evil.com/a-=_?&. ", "https://evil-evil.com/a-=_?&.6", "https://evil-evil.com/a-=_?&._", "https://evil-evil.com/a-=_?&.", "https://evil-evil.com/a-=_?&..evil", "https://evil-evil.com/a-=_?&evil", "https://evil-evil.com/a-=_?&/a-=_?&.evil", "https://evil-evil.com.evil", "https://evil-evil.com/a-=_?&&.evil", "https://evil-evil.com/a-=_?.evil", "https://evil-evil.com/a-=_??&.evil", "https://evil-evil.com/a-=_&.evil", "https://evil-evil.com/a-=__?&.evil", "https://evil-evil.com/a-=?&.evil", "https://evil-evil.com/a-==_?&.evil", "https://evil-evil.com/a-_?&.evil", "https://evil-evil.com/a--=_?&.evil", "https://evil-evil.com/a=_?&.evil", "https://evil-evil.com/aa-=_?&.evil", "https://evil-evil.com/-=_?&.evil", "https://evil-evil.com/_-=_?&.evil", "https://evil-evil.com/A-=_?&.evil", "https://evil-evil.com/0-=_?&.evil", "https://evil-evil.com//a-=_?&.evil", "https://evil-evil.coma-=_?&.evil", "https://evil-evil.evil-evil.com/a-=_?&.evil", "https://evil-eVil.com/a-=_?&.evil", "https://evil-EVIL.com/a-=_?&.evil", "https://evil-ev_il.com/a-=_?&.evil", "https://evil-ev il.com/a-=_?&.evil", "https://evil-ev4il.com/a-=_?&.evil", "https://evil-e.com/a-=_?&.evil", "https://evil-6.com/a-=_?&.evil", "https://evil-_.com/a-=_?&.evil", "https://evil-evil-evil.com/a-=_?&.evil", "https://evil.com/a-=_?&.evil", "https://eVil-evil.com/a-=_?&.evil", "https://EVIL-evil.com/a-=_?&.evil", "https://ev_il-evil.com/a-=_?&.evil", "https://ev il-evil.com/a-=_?&.evil", "https://ev4il-evil.com/a-=_?&.evil", "https://e-evil.com/a-=_?&.evil", "https:// -evil.com/a-=_?&.evil", "https://6-evil.com/a-=_?&.evil", "https://_-evil.com/a-=_?&.evil", "https://-evil.com/a-=_?&.evil", "https://https://evil-evil.com/a-=_?&.evil", "evil-evil.com/a-=_?&.evil", "httpss://evil-evil.com/a-=_?&.evil", "http://evil-evil.com/a-=_?&.evil", "evil.aa", "evil.museum", "evil.name", "evil.info", "evil.biz", "evil.gov", "evil.edu", "evil.net", "evil.org", "evil.com", "https://evil-evil.aa/a-=_?&.evil", "https://evil-evil.museum/a-=_?&.evil", "https://evil-evil.name/a-=_?&.evil", "https://evil-evil.info/a-=_?&.evil", "https://evil-evil.biz/a-=_?&.evil", "https://evil-evil.gov/a-=_?&.evil", "https://evil-evil.edu/a-=_?&.evil", "https://evil-evil.net/a-=_?&.evil", "https://evil-evil.org/a-=_?&.evil", "https://evil-evil.com/a-=_?&.evil"], "nonMatches": ["https://evil-evil.a/a-=_?&.evil", "https://com/a-=_?&.evil", "https://evil- .com/a-=_?&.evil", "https://evil-.com/a-=_?&.evil"]}, {"regex": "(?=^.{8,30}$)(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&amp;*()_+}{&quot;&quot;:;&#39;?/&gt;.&lt;,]).*$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["}", "{", "^", "@", "?", ";", ":", "/", ".", ",", "+", "*", ")", "(", "&", "%", "$", "#", "!", "eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", " ", "6", "_", "", "evil"]}, {"regex": "(http|ftp|https)://[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,4}(/\\S*)?$", "exceptionStackTrace": null, "matches": ["http://evil.AA/evil/evil", "http://evil.AA/:", "http://evil.AA//", "http://evil.AA/.", "http://evil.AA/-", "http://evil.AA/eVil", "http://evil.AA/EVIL", "http://evil.AA/ev_il", "http://evil.AA/ev4il", "http://evil.AA/e", "http://evil.AA/6", "http://evil.AA/_", "http://evil.AA/", "http://evil.AAAA/evil", "http://evil.aA/evil", "http://..AA/evil", "http://-.AA/evil", "http://eVil.AA/evil", "http://EVIL.AA/evil", "http://ev4il.AA/evil", "http://e.AA/evil", "http://6.AA/evil", "https://evil.AA", "ftp://evil.AA", "http://evil.AA", "https://evil.AA/evil", "ftp://evil.AA/evil", "http://evil.AA/evil"], "nonMatches": ["http://evil.AA/ev il", "http://evil.AA/ ", "http://evil.AAAAA/evil", "http://evil.A/evil", "http://:.AA/evil", "http:///.AA/evil", "http://ev_il.AA/evil", "http://ev il.AA/evil", "http:// .AA/evil", "http://_.AA/evil", "http://.AA/evil"]}, {"regex": "(?<=\\d{7}_).+((?=\\x5B\\d\\x5D)|.{3})", "exceptionStackTrace": null, "matches": [], "nonMatches": ["evilaaaa", "evilaa", "evil_aa", "evil]aa", "evil[aa", "evilAaa", "evil0aa", "evil aa", "]", "[", "eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", " ", "6", "_", "", "evilaaa", "evil"]}, {"regex": "[URL=[a-zA-Z0-9.:/_\\-]+\\][a-zA-Z0-9._/ ]+\\[/URL\\]", "exceptionStackTrace": null, "matches": ["evil]/[/URL]", "evil].[/URL]", "evil]eVil[/URL]", "evil]EVIL[/URL]", "evil]ev_il[/URL]", "evil]ev il[/URL]", "evil]ev4il[/URL]", "evil]e[/URL]", "evil] [/URL]", "evil]6[/URL]", "evil]_[/URL]", "[]evil[/URL]", "=]evil[/URL]", ":]evil[/URL]", "/]evil[/URL]", ".]evil[/URL]", "-]evil[/URL]", "eVil]evil[/URL]", "EVIL]evil[/URL]", "ev_il]evil[/URL]", "ev il]evil[/URL]", "ev4il]evil[/URL]", "e]evil[/URL]", "6]evil[/URL]", "_]evil[/URL]", "evil]evil[/URL]"], "nonMatches": ["evil]][/URL]", "evil][[/URL]", "evil]=[/URL]", "evil]:[/URL]", "evil]-[/URL]", "evil][/URL]", "]]evil[/URL]", " ]evil[/URL]", "]evil[/URL]"]}, {"regex": "[B\\][a-zA-Z0-9._/ ]+\\[/B\\]", "exceptionStackTrace": null, "matches": ["][/B]", "[[/B]", "/[/B]", ".[/B]", "eVil[/B]", "EVIL[/B]", "ev_il[/B]", "ev il[/B]", "ev4il[/B]", "e[/B]", " [/B]", "6[/B]", "_[/B]", "evil[/B]"], "nonMatches": ["[/B]"]}, {"regex": "^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-9]|[0-5][0-9])$", "exceptionStackTrace": null, "matches": ["20:0", "10:0", "00:0", "0:00", "0:0"], "nonMatches": ["24:0", "0:60"]}, {"regex": "(?<=[^a-zA-Z0-9])((\\+351|00351|351)?)(2\\d{1}|(9(3|6|2|1)))\\d{7}(?=[^a-zA-Z0-9])", "exceptionStackTrace": null, "matches": [], "nonMatches": ["+3512000000000", "+35120000000", "+351+351200000000", "910000000", "920000000", "960000000", "930000000", "200000000", "351200000000", "00351200000000", "+351910000000", "+351920000000", "+351960000000", "+351930000000", "+351200000000"]}, {"regex": "^[0-9]{5}$", "exceptionStackTrace": null, "matches": ["00000"], "nonMatches": ["000000", "0000"]}, {"regex": "^([\\!#\\$%&&#39;\\*\\+/\\=?\\^`\\{\\|\\}~a-zA-Z0-9_-]+[\\.]?)+[\\!#\\$%&&#39;\\*\\+/\\=?\\^`\\{\\|\\}~a-zA-Z0-9_-]+@{1}((([0-9A-Za-z_-]+)([\\.]{1}[0-9A-Za-z_-]+)*\\.{1}([A-Za-z]){1,6})|(([0-9]{1,3}[\\.]{1}){3}([0-9]{1,3}){1}))$", "exceptionStackTrace": null, "matches": ["evil.evil@0.0.0.00", "evil.evil@0.0.0.000", "evil.evil@000.0.0.0", "evil.evil@evil.evil.aaaaaa", "evil.evil@evil.evil.A", "evil.evil@evil.evila", "evil.evil@evil.evil.evil.a", "evil.evil@evil.a", "evil.evil@evil.-.a", "evil.evil@evil.eVil.a", "evil.evil@evil.EVIL.a", "evil.evil@evil.ev_il.a", "evil.evil@evil.ev4il.a", "evil.evil@evil.e.a", "evil.evil@evil.6.a", "evil.evil@evil._.a", "evil.evil@evilevil.a", "evil.evil@-.evil.a", "evil.evil@eVil.evil.a", "evil.evil@EVIL.evil.a", "evil.evil@ev_il.evil.a", "evil.evil@ev4il.evil.a", "evil.evil@e.evil.a", "evil.evil@6.evil.a", "evil.evil@_.evil.a", "evil.~@evil.evil.a", "evil.}@evil.evil.a", "evil.|@evil.evil.a", "evil.{@evil.evil.a", "evil.`@evil.evil.a", "evil.^@evil.evil.a", "evil.?@evil.evil.a", "evil.=@evil.evil.a", "evil.;@evil.evil.a", "evil./@evil.evil.a", "evil.-@evil.evil.a", "evil.+@evil.evil.a", "evil.*@evil.evil.a", "evil.&@evil.evil.a", "evil.%@evil.evil.a", "evil.$@evil.evil.a", "evil.#@evil.evil.a", "evil.!@evil.evil.a", "evil.eVil@evil.evil.a", "evil.EVIL@evil.evil.a", "evil.ev_il@evil.evil.a", "evil.ev4il@evil.evil.a", "evil.e@evil.evil.a", "evil.6@evil.evil.a", "evil._@evil.evil.a", "evil.evil.evil@evil.evil.a", "evil@evil.evil.a", "evilevil@evil.evil.a", "~.evil@evil.evil.a", "}.evil@evil.evil.a", "|.evil@evil.evil.a", "{.evil@evil.evil.a", "`.evil@evil.evil.a", "^.evil@evil.evil.a", "?.evil@evil.evil.a", "=.evil@evil.evil.a", ";.evil@evil.evil.a", "/.evil@evil.evil.a", "-.evil@evil.evil.a", "+.evil@evil.evil.a", "*.evil@evil.evil.a", "&.evil@evil.evil.a", "%.evil@evil.evil.a", "$.evil@evil.evil.a", "#.evil@evil.evil.a", "!.evil@evil.evil.a", "eVil.evil@evil.evil.a", "EVIL.evil@evil.evil.a", "ev_il.evil@evil.evil.a", "ev4il.evil@evil.evil.a", "e.evil@evil.evil.a", "6.evil@evil.evil.a", "_.evil@evil.evil.a", "evilevil@0.0.0.0", "evilevil@evil.a", "evil.evil@0.0.0.0", "evil.evil@evil.evil.a"], "nonMatches": ["evil.evil@0.0.0.0000", "evil.evil@0.0.0.", "evil.evil@0.0.0.0.0", "evil.evil@0.0.0", "evil.evil@0..0.0.0", "evil.evil@00.0.0", "evil.evil@0000.0.0.0", "evil.evil@.0.0.0", "evil.evil@evil.evil.aaaaaaa", "evil.evil@evil.evil.", "evil.evil@evil.evil..a", "evil.evil@evil.~.a", "evil.evil@evil.}.a", "evil.evil@evil.|.a", "evil.evil@evil.{.a", "evil.evil@evil.`.a", "evil.evil@evil.^.a", "evil.evil@evil.@.a", "evil.evil@evil.?.a", "evil.evil@evil.=.a", "evil.evil@evil.;.a", "evil.evil@evil./.a", "evil.evil@evil...a", "evil.evil@evil.+.a", "evil.evil@evil.*.a", "evil.evil@evil.&.a", "evil.evil@evil.%.a", "evil.evil@evil.$.a", "evil.evil@evil.#.a", "evil.evil@evil.!.a", "evil.evil@evil.ev il.a", "evil.evil@evil. .a", "evil.evil@evil..a", "evil.evil@evil..evil.a", "evil.evil@~.evil.a", "evil.evil@}.evil.a", "evil.evil@|.evil.a", "evil.evil@{.evil.a", "evil.evil@`.evil.a", "evil.evil@^.evil.a", "evil.evil@@.evil.a", "evil.evil@?.evil.a", "evil.evil@=.evil.a", "evil.evil@;.evil.a", "evil.evil@/.evil.a", "evil.evil@..evil.a", "evil.evil@+.evil.a", "evil.evil@*.evil.a", "evil.evil@&.evil.a", "evil.evil@%.evil.a", "evil.evil@$.evil.a", "evil.evil@#.evil.a", "evil.evil@!.evil.a", "evil.evil@ev il.evil.a", "evil.evil@ .evil.a", "evil.evil@.evil.a", "evil.evil@@evil.evil.a", "evil.evilevil.evil.a", "evil.@@evil.evil.a", "evil..@evil.evil.a", "evil.ev il@evil.evil.a", "evil. @evil.evil.a", "evil.@evil.evil.a", "evil..evil@evil.evil.a", "@.evil@evil.evil.a", "..evil@evil.evil.a", "ev il.evil@evil.evil.a", " .evil@evil.evil.a", ".evil@evil.evil.a"]}, {"regex": "(((\\[?(?<Database>[\\w]+)\\]?)?\\.)?(\\[?(?<Owner>[\\w]+)\\]?)?\\.)?\\[?(?<Object>[\\w]+)\\]?", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<D"}, "matches": []}, {"regex": "((?<Owner>\\[?[\\w\\d]+\\]?)\\.{1})?(?<Column>\\[?[\\w\\d]+\\]?)(\\s*(([><=]{1,2})|(Not|In\\(|Between){1,2})\\s*)(?<Value>[\\w\\d\\&#39;]+)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<O"}, "matches": []}, {"regex": "([^\\=&]+)(?<!param1|param2|param3)\\=([^\\=&]+)(&)?", "exceptionStackTrace": null, "matches": ["evil=evil&&", "evil=eVil&", "evil=EVIL&", "evil=ev_il&", "evil=ev il&", "evil=ev4il&", "evil=e&", "evil= &", "evil=6&", "evil=_&", "eVil=evil&", "EVIL=evil&", "ev_il=evil&", "ev il=evil&", "ev4il=evil&", "e=evil&", " =evil&", "6=evil&", "_=evil&", "evil=evil", "evil=evil&"], "nonMatches": ["evil==&", "evil=&&", "evil=&", "==evil&", "&=evil&", "=evil&"]}, {"regex": "^3(?:[47]\\d([ -]?)\\d{4}(?:\\1\\d{4}){2}|0[0-5]\\d{11}|[68]\\d{12})$|^4(?:\\d\\d\\d)?([ -]?)\\d{4}(?:\\2\\d{4}){2}$|^6011([ -]?)\\d{4}(?:\\3\\d{4}){2}$|^5[1-5]\\d\\d([ -]?)\\d{4}(?:\\4\\d{4}){2}$|^2014\\d{11}$|^2149\\d{11}$|^2131\\d{11}$|^1800\\d{11}$|^3\\d{15}$", "exceptionStackTrace": null, "matches": ["4-0000-0000-0000", "36000000000000", "340-0000-0000-0000", "3000000000000000", "180000000000000", "213100000000000", "214900000000000", "201400000000000", "5100-0000-0000-0000", "6011-0000-0000-0000", "4000-0000-0000-0000", "38000000000000", "30000000000000", "370-0000-0000-0000"], "nonMatches": ["30000000000000000", "1800000000000000", "18000000000000", "2131000000000000", "21310000000000", "2149000000000000", "21490000000000", "2014000000000000", "20140000000000", "5100-0000-0000-0000-0000", "5100-0000-0000", "5100-0000-00000-0000", "5100-0000-000-0000", "5100-00000-0000-0000", "5100-000-0000-0000", "5100--0000-0000-0000", "5100 0000-0000-0000", "5000-0000-0000-0000", "6011-0000-0000-0000-0000", "6011-0000-0000", "6011-0000-00000-0000", "6011-0000-000-0000", "6011-00000-0000-0000", "6011-000-0000-0000", "6011--0000-0000-0000", "6011 0000-0000-0000", "4000-0000-0000-0000-0000", "4000-0000-0000", "4000-0000-00000-0000", "4000-0000-000-0000", "4000-00000-0000-0000", "4000-000-0000-0000", "4000--0000-0000-0000", "40000000-0000-0000", "4000 0000-0000-0000", "4000000-0000-0000-0000", "380000000000000", "3800000000000", "300000000000000", "3000000000000", "30600000000000", "370-0000-0000-0000-0000", "370-0000-0000", "370-0000-00000-0000", "370-0000-000-0000", "370-00000-0000-0000", "370-000-0000-0000", "370--0000-0000-0000", "370 0000-0000-0000", "300-0000-0000-0000", "51000000-0000-0000", "60110000-0000-0000", "40000-0000-0000", "3700000-0000-0000"]}, {"regex": "We are providing best Facebook Tech Support Service at an affordable price without claiming extra charges of our service.", "exceptionStackTrace": null, "matches": ["We are providing best Facebook Tech Support Service at an affordable price without claiming extra charges of our service_", "We are providing best Facebook Tech Support Service at an affordable price without claiming extra charges of our serviceA", "We are providing best Facebook Tech Support Service at an affordable price without claiming extra charges of our service0", "We are providing best Facebook Tech Support Service at an affordable price without claiming extra charges of our service ", "We are providing best Facebook Tech Support Service at an affordable price without claiming extra charges of our servicea"], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber"], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber"], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber"], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber"], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber"], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber"], "nonMatches": []}, {"regex": "QUICKBOOKSSUPPORTPHONENUMBER,QUICKBOOKSSUPPORTNUMBER", "exceptionStackTrace": null, "matches": ["QUICKBOOKSSUPPORTPHONENUMBER,QUICKBOOKSSUPPORTNUMBER"], "nonMatches": []}, {"regex": "QUICKBOOKSSUPPORTPHONENUMBER,QUICKBOOKSSUPPORTNUMBER", "exceptionStackTrace": null, "matches": ["QUICKBOOKSSUPPORTPHONENUMBER,QUICKBOOKSSUPPORTNUMBER"], "nonMatches": []}, {"regex": "QUICKBOOKSSUPPORTPHONENUMBER,QUICKBOOKSSUPPORTNUMBER", "exceptionStackTrace": null, "matches": ["QUICKBOOKSSUPPORTPHONENUMBER,QUICKBOOKSSUPPORTNUMBER"], "nonMatches": []}, {"regex": "QUICKBOOKSSUPPORTPHONENUMBER,QUICKBOOKSSUPPORTNUMBER", "exceptionStackTrace": null, "matches": ["QUICKBOOKSSUPPORTPHONENUMBER,QUICKBOOKSSUPPORTNUMBER"], "nonMatches": []}, {"regex": "QUICKBOOKSSUPPORTPHONENUMBER,QUICKBOOKSSUPPORTNUMBER", "exceptionStackTrace": null, "matches": ["QUICKBOOKSSUPPORTPHONENUMBER,QUICKBOOKSSUPPORTNUMBER"], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber"], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber"], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber"], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber"], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber"], "nonMatches": []}, {"regex": "Amazon Prime Customer Service Phone Number ", "exceptionStackTrace": null, "matches": ["Amazon Prime Customer Service Phone Number "], "nonMatches": []}, {"regex": "Amazon Prime Customer Service Phone Number ", "exceptionStackTrace": null, "matches": ["Amazon Prime Customer Service Phone Number "], "nonMatches": []}, {"regex": "Amazon Prime Customer Service Phone Number ", "exceptionStackTrace": null, "matches": ["Amazon Prime Customer Service Phone Number "], "nonMatches": []}, {"regex": "Amazon Prime Customer Service Phone Number ", "exceptionStackTrace": null, "matches": ["Amazon Prime Customer Service Phone Number "], "nonMatches": []}, {"regex": "Amazon Prime Customer Service Phone Number ", "exceptionStackTrace": null, "matches": ["Amazon Prime Customer Service Phone Number "], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber"], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber"], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber"], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber"], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber"], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber"], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber"], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber"], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber"], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber"], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber"], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber"], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber"], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber"], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber"], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber,AmazonPrimeRefund,AmazonPrimeMembershipCancellation ", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber,AmazonPrimeRefund,AmazonPrimeMembershipCancellation "], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber,AmazonPrimeRefund,AmazonPrimeMembershipCancellation ", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber,AmazonPrimeRefund,AmazonPrimeMembershipCancellation "], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber,AmazonPrimeRefund,AmazonPrimeMembershipCancellation ", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber,AmazonPrimeRefund,AmazonPrimeMembershipCancellation "], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber,AmazonPrimeRefund,AmazonPrimeMembershipCancellation ", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber,AmazonPrimeRefund,AmazonPrimeMembershipCancellation "], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber,AmazonPrimeRefund,AmazonPrimeMembershipCancellation ", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber,AmazonPrimeRefund,AmazonPrimeMembershipCancellation "], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber,AmazonPrimeRefund,AmazonPrimeMembershipCancellation ", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber,AmazonPrimeRefund,AmazonPrimeMembershipCancellation "], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber,AmazonPrimeRefund,AmazonPrimeMembershipCancellation ", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber,AmazonPrimeRefund,AmazonPrimeMembershipCancellation "], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber,AmazonPrimeRefund,AmazonPrimeMembershipCancellation ", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber,AmazonPrimeRefund,AmazonPrimeMembershipCancellation "], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber,AmazonPrimeRefund,AmazonPrimeMembershipCancellation ", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber,AmazonPrimeRefund,AmazonPrimeMembershipCancellation "], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber,AmazonPrimeRefund,AmazonPrimeMembershipCancellation ", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber,AmazonPrimeRefund,AmazonPrimeMembershipCancellation "], "nonMatches": []}, {"regex": "Dial Amazon Prime Customer Service Phone Number 1-844-479-2863 to fix Amazon Prime trouble.", "exceptionStackTrace": null, "matches": ["Dial Amazon Prime Customer Service Phone Number 1-844-479-2863 to fix Amazon Prime troubleA", "Dial Amazon Prime Customer Service Phone Number 1-844-479-2863 to fix Amazon Prime trouble0", "Dial Amazon Prime Customer Service Phone Number 1-844-479-2863 to fix Amazon Prime trouble-", "Dial Amazon Prime Customer Service Phone Number 1-844-479-2863 to fix Amazon Prime trouble ", "Dial Amazon Prime Customer Service Phone Number 1-844-479-2863 to fix Amazon Prime troublea"], "nonMatches": []}, {"regex": "AmazonPrimeCustomerServicePhoneNumber,AmazonPrimeRefund,AmazonPrimeMembershipCancellation ", "exceptionStackTrace": null, "matches": ["AmazonPrimeCustomerServicePhoneNumber,AmazonPrimeRefund,AmazonPrimeMembershipCancellation "], "nonMatches": []}, {"regex": "^[ \\t]+|[ \\t]+$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\t"}, "matches": [], "nonMatches": []}, {"regex": "^([\\.\\&quot;\\&#39;-/ \\(/)\\s\\[\\]\\\\\\,\\<\\>\\;\\:\\{\\}]?)([0-9]{3})([\\.\\&quot;\\&#39;-/\\(/)\\s\\[\\]\\\\\\,\\<\\>\\;\\:\\{\\}]?)([0-9]{3})([\\,\\.\\&quot;\\&#39;-/\\(/)\\s\\[\\]\\\\\\<\\>\\;\\:\\{\\}]?)([0-9]{4})$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character range ;-/"}, "matches": []}, {"regex": "^[^a-zA-Z0-9]+$", "exceptionStackTrace": null, "matches": [" ", "_"], "nonMatches": ["eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", "6", "", "evil"]}, {"regex": "^(http(s)?\\:\\/\\/\\S+)\\s", "exceptionStackTrace": null, "matches": ["https://: ", "https:/// ", "https://eVil ", "https://EVIL ", "https://ev_il ", "https://ev il ", "https://ev4il ", "https://e ", "https://6 ", "https://_ ", "http://evil ", "https://evil "], "nonMatches": ["https://  ", "https:// ", "httpss://evil "]}, {"regex": "<(.|\\n)*?>", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\n"}, "matches": [], "nonMatches": []}, {"regex": "\\b([A-Za-z]+) +(\\1\\b)", "exceptionStackTrace": null, "matches": ["evil  evil", "evil evil"], "nonMatches": ["evilevil", "eVil evil", "EVIL evil", "ev_il evil", "ev il evil", "ev4il evil", "e evil", "  evil", "6 evil", "_ evil", " evil"]}, {"regex": "[^a-zA-Z0-9]+", "exceptionStackTrace": null, "matches": ["ev_il", "ev il", " ", "_"], "nonMatches": ["eVil", "EVIL", "ev4il", "e", "6", "", "evil"]}, {"regex": "^(http|https|ftp)\\://[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,3}(:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\\-\\._\\?\\,\\&#39;/\\\\\\+&amp;%\\$#\\=~])*[^\\.\\,\\)\\(\\s]$", "exceptionStackTrace": null, "matches": ["http://evil.AA:evil/~~", "http://evil.AA:evil/~_", "http://evil.AA:evil/~\\", "http://evil.AA:evil/~A", "http://evil.AA:evil/~?", "http://evil.AA:evil/~=", "http://evil.AA:evil/~;", "http://evil.AA:evil/~:", "http://evil.AA:evil/~0", "http://evil.AA:evil/~/", "http://evil.AA:evil/~-", "http://evil.AA:evil/~+", "http://evil.AA:evil/~&", "http://evil.AA:evil/~%", "http://evil.AA:evil/~$", "http://evil.AA:evil/~#", "http://evil.AA:evil/~~a", "http://evil.AA:evil/a", "http://evil.AA:evil/pa", "http://evil.AA:evil/ma", "http://evil.AA:evil/ba", "http://evil.AA:evil/aa", "http://evil.AA:evil/_a", "http://evil.AA:evil/\\a", "http://evil.AA:evil/Aa", "http://evil.AA:evil/?a", "http://evil.AA:evil/=a", "http://evil.AA:evil/;a", "http://evil.AA:evil/9a", "http://evil.AA:evil/3a", "http://evil.AA:evil/0a", "http://evil.AA:evil//a", "http://evil.AA:evil/.a", "http://evil.AA:evil/-a", "http://evil.AA:evil/,a", "http://evil.AA:evil/+a", "http://evil.AA:evil/&a", "http://evil.AA:evil/%a", "http://evil.AA:evil/$a", "http://evil.AA:evil/#a", "http://evil.AA:evil//~a", "http://evil.AA:evil~a", "http://evil.AA/~a", "http://evil.AA:eVil/~a", "http://evil.AA:EVIL/~a", "http://evil.AA:ev_il/~a", "http://evil.AA:ev4il/~a", "http://evil.AA:e/~a", "http://evil.AA:6/~a", "http://evil.AA:_/~a", "http://evil.AA:/~a", "http://evil.AAA:evil/~a", "http://evil.aA:evil/~a", "http://..AA:evil/~a", "http://-.AA:evil/~a", "http://eVil.AA:evil/~a", "http://EVIL.AA:evil/~a", "http://ev4il.AA:evil/~a", "http://e.AA:evil/~a", "http://6.AA:evil/~a", "ftp://evil.AAa", "https://evil.AAa", "http://evil.AAa", "ftp://evil.AA:evil/~a", "https://evil.AA:evil/~a", "http://evil.AA:evil/~a"], "nonMatches": ["http://evil.AA:evil/~.", "http://evil.AA:evil/~,", "http://evil.AA:evil/~)", "http://evil.AA:evil/~(", "http://evil.AA:evil/~ ", "http://evil.AA:evil:evil/~a", "http://evil.AA:ev il/~a", "http://evil.AA: /~a", "http://evil.AAAA:evil/~a", "http://evil.A:evil/~a", "http://~.AA:evil/~a", "http://\\.AA:evil/~a", "http://?.AA:evil/~a", "http://=.AA:evil/~a", "http://;.AA:evil/~a", "http://:.AA:evil/~a", "http:///.AA:evil/~a", "http://,.AA:evil/~a", "http://+.AA:evil/~a", "http://).AA:evil/~a", "http://(.AA:evil/~a", "http://&.AA:evil/~a", "http://%.AA:evil/~a", "http://$.AA:evil/~a", "http://#.AA:evil/~a", "http://ev_il.AA:evil/~a", "http://ev il.AA:evil/~a", "http:// .AA:evil/~a", "http://_.AA:evil/~a", "http://.AA:evil/~a"]}, {"regex": "Greatest Garcinia", "exceptionStackTrace": null, "matches": ["Greatest Garcinia"], "nonMatches": []}, {"regex": "\\B(\\s)(?!(?:[^&quot;]*&quot;[^&quot;]*&quot;)*[^&quot;]*$)", "exceptionStackTrace": null, "matches": [], "nonMatches": [" "]}, {"regex": "\\b[A-Za-z]{2}(?=([0-9]*[1-9]){1,})\\d{1,5}\\b", "exceptionStackTrace": null, "matches": [], "nonMatches": ["aa000000", "aa00000", "aa", "aaa0", "a0", "Aa0", "aa0"]}, {"regex": "OA", "exceptionStackTrace": null, "matches": ["OA"], "nonMatches": []}, {"regex": "OA", "exceptionStackTrace": null, "matches": ["OA"], "nonMatches": []}, {"regex": "\\*[\\d\\D]*?\\*", "exceptionStackTrace": null, "matches": ["***", "*eVil*", "*EVIL*", "*ev_il*", "*ev il*", "*ev4il*", "*e*", "* *", "*6*", "*_*", "**", "*evil*"], "nonMatches": []}, {"regex": "^#?([a-f]|[A-F]|[0-9]){3}(([a-f]|[A-F]|[0-9]){3})?$", "exceptionStackTrace": null, "matches": ["#aaa", "aaaaaa", "000", "A00", "a00", "#000aaa", "#AAAaaa", "#aaa000", "#aaaAAA", "#aaaaaa"], "nonMatches": ["#GAAaaa", "#aaaGAA", "#aaaaaaaaa", "#aaagaa", "#aaaaaaa", "#aaaaa", "#gaaaaa", "##aaaaaa"]}, {"regex": "(AUX|PRN|NUL|COM\\d|LPT\\d)+\\s*$", "exceptionStackTrace": null, "matches": ["AUX  ", "AUXAUX ", "LPT0", "COM0", "NUL", "PRN", "AUX", "LPT0 ", "COM0 ", "NUL ", "PRN ", "AUX "], "nonMatches": [" "]}, {"regex": "var phonePattern = /^(([^\\.\\-\\,a-wy-z]([\\(]?(\\+|[x])?\\d+[\\)]?)?[\\s\\.\\-\\,]?([\\(]?\\d+[\\)]?)?[\\s\\.\\-\\,]?(\\d+[\\s\\.\\-\\,]?)+[^\\.\\-\\,a-z])|((\\+|[x])?\\d+))$/i", "exceptionStackTrace": null, "matches": [], "nonMatches": ["var phonePattern = /+00/i", "var phonePattern = /+/i", "var phonePattern = /++0/i", "var phonePattern = /x(+0),(0),0,a/i", "var phonePattern = /x(+0),(0),0,=/i", "var phonePattern = /x(+0),(0),0,0/i", "var phonePattern = /x(+0),(0),0,//i", "var phonePattern = /x(+0),(0),0,./i", "var phonePattern = /x(+0),(0),0,-/i", "var phonePattern = /x(+0),(0),0,,/i", "var phonePattern = /x(+0),(0),0,+/i", "var phonePattern = /x(+0),(0),0,)/i", "var phonePattern = /x(+0),(0),0,(/i", "var phonePattern = /x(+0),(0),0, /i", "var phonePattern = /x(+0),(0),0,0,A/i", "var phonePattern = /x(+0),(0),A/i", "var phonePattern = /x(+0),(0),0,,A/i", "var phonePattern = /x(+0),(0),0A/i", "var phonePattern = /x(+0),(0),0.A/i", "var phonePattern = /x(+0),(0),0-A/i", "var phonePattern = /x(+0),(0),0 A/i", "var phonePattern = /x(+0),(0),00,A/i", "var phonePattern = /x(+0),(0),,A/i", "var phonePattern = /x(+0),(0),,0,A/i", "var phonePattern = /x(+0),(0)0,A/i", "var phonePattern = /x(+0),(0).0,A/i", "var phonePattern = /x(+0),(0)-0,A/i", "var phonePattern = /x(+0),(0) 0,A/i", "var phonePattern = /x(+0),(0)(0),0,A/i", "var phonePattern = /x(+0),,0,A/i", "var phonePattern = /x(+0),(0)),0,A/i", "var phonePattern = /x(+0),(0,0,A/i", "var phonePattern = /x(+0),(00),0,A/i", "var phonePattern = /x(+0),(),0,A/i", "var phonePattern = /x(+0),((0),0,A/i", "var phonePattern = /x(+0),0),0,A/i", "var phonePattern = /x(+0),,(0),0,A/i", "var phonePattern = /x(+0)(0),0,A/i", "var phonePattern = /x(+0).(0),0,A/i", "var phonePattern = /x(+0)-(0),0,A/i", "var phonePattern = /x(+0) (0),0,A/i", "var phonePattern = /x(+0)(+0),(0),0,A/i", "var phonePattern = /x,(0),0,A/i", "var phonePattern = /x(+0)),(0),0,A/i", "var phonePattern = /x(+0,(0),0,A/i", "var phonePattern = /x(+00),(0),0,A/i", "var phonePattern = /x(+),(0),0,A/i", "var phonePattern = /x(++0),(0),0,A/i", "var phonePattern = /x(0),(0),0,A/i", "var phonePattern = /x((+0),(0),0,A/i", "var phonePattern = /x+0),(0),0,A/i", "var phonePattern = /y(+0),(0),0,A/i", "var phonePattern = /a(+0),(0),0,A/i", "var phonePattern = /A(+0),(0),0,A/i", "var phonePattern = /=(+0),(0),0,A/i", "var phonePattern = /0(+0),(0),0,A/i", "var phonePattern = //(+0),(0),0,A/i", "var phonePattern = /.(+0),(0),0,A/i", "var phonePattern = /-(+0),(0),0,A/i", "var phonePattern = /,(+0),(0),0,A/i", "var phonePattern = /+(+0),(0),0,A/i", "var phonePattern = /)(+0),(0),0,A/i", "var phonePattern = /((+0),(0),0,A/i", "var phonePattern = / (+0),(0),0,A/i", "var phonePattern = /0/i", "var phonePattern = /x0A/i", "var phonePattern = /x0/i", "var phonePattern = /+0/i", "var phonePattern = /x(x0),(0),0,A/i", "var phonePattern = /x(+0),(0),0,A/i"]}, {"regex": "Kaspersky Support Canada | 1-844-888-3870", "exceptionStackTrace": null, "matches": [" 1-844-888-3870", "Kaspersky Support Canada "], "nonMatches": []}, {"regex": "^(3(([0-5][0-9]{0,2})|60))|([1-2][0-9]{2})|(^[1-9]$)|(^[1-9]{2}$)$", "exceptionStackTrace": null, "matches": ["111", "1000", "30000", "3000", "30", "11", "1", "100", "360", "300"], "nonMatches": ["01", "0", "10", "000"]}, {"regex": "^[\\.\\w&#230;&#248;&#229;-]+@([a-z&#230;&#248;&#229;0-9]+([\\.-]{0,1}[a-z&#230;&#248;&#229;0-9]+|[a-z&#230;&#248;&#229;0-9]?))+\\.[a-z]{2,6}$", "exceptionStackTrace": null, "matches": ["evil@evil;;.aa", "evil@evila.aa", "evil@evil9.aa", "evil@evil8.aa", "evil@evil4.aa", "evil@evil3.aa", "evil@evil2.aa", "evil@evil1.aa", "evil@evil0.aa", "evil@evil&.aa", "evil@evil#.aa", "evil@evil-evil.aaaaaa", "evil@evil-evilevil-evil.aa", "evil@evil-;.aa", "evil@evil-&.aa", "evil@evil-#.aa", "evil@evil-ev4il.aa", "evil@evil-e.aa", "evil@evil-6.aa", "evil@evil.evil.aa", "evil@;-evil.aa", "evil@&-evil.aa", "evil@#-evil.aa", "evil@ev4il-evil.aa", "evil@e-evil.aa", "evil@6-evil.aa", ";@evil-evil.aa", ".@evil-evil.aa", "-@evil-evil.aa", "&@evil-evil.aa", "#@evil-evil.aa", "eVil@evil-evil.aa", "EVIL@evil-evil.aa", "ev_il@evil-evil.aa", "ev4il@evil-evil.aa", "e@evil-evil.aa", "6@evil-evil.aa", "_@evil-evil.aa", "evil@evil.aa", "evil@evilevil.aa", "evil@evil;.aa", "evil@evil-evil.aa"], "nonMatches": ["evil@evil-evil.aaaaaaa", "evil@evil-evil.a", "evil@.aa", "evil@evil-@.aa", "evil@evil-..aa", "evil@evil--.aa", "evil@evil-eVil.aa", "evil@evil-EVIL.aa", "evil@evil-ev_il.aa", "evil@evil-ev il.aa", "evil@evil- .aa", "evil@evil-_.aa", "evil@evil-.aa", "evil@evil--evil.aa", "evil@@-evil.aa", "evil@.-evil.aa", "evil@--evil.aa", "evil@eVil-evil.aa", "evil@EVIL-evil.aa", "evil@ev_il-evil.aa", "evil@ev il-evil.aa", "evil@ -evil.aa", "evil@_-evil.aa", "evil@-evil.aa", "@@evil-evil.aa", "ev il@evil-evil.aa", " @evil-evil.aa", "@evil-evil.aa"]}, {"regex": "(\\[[Ii][Mm][Gg]\\])(\\S+?)(\\[\\/[Ii][Mm][Gg]\\])", "exceptionStackTrace": null, "matches": ["[img]evil[/imG]", "[img]evil[/iMg]", "[img]evil[/Img]", "[img]][/img]", "[img][[/img]", "[img]/[/img]", "[img]eVil[/img]", "[img]EVIL[/img]", "[img]ev_il[/img]", "[img]ev4il[/img]", "[img]e[/img]", "[img]6[/img]", "[img]_[/img]", "[imG]evil[/img]", "[iMg]evil[/img]", "[Img]evil[/img]", "[img]evil[/img]"], "nonMatches": ["[img]evil[/ima]", "[img]evil[/imA]", "[img]evil[/iag]", "[img]evil[/iAg]", "[img]evil[/amg]", "[img]evil[/Amg]", "[img]ev il[/img]", "[img] [/img]", "[img][/img]", "[ima]evil[/img]", "[imA]evil[/img]", "[iag]evil[/img]", "[iAg]evil[/img]", "[amg]evil[/img]", "[Amg]evil[/img]"]}, {"regex": "^((192\\.168\\.0\\.)(1[7-9]|2[0-9]|3[0-2]))$", "exceptionStackTrace": null, "matches": ["192.168.0.30", "192.168.0.20", "192.168.0.17"], "nonMatches": ["192.168.0.33", "192.168.0.10"]}, {"regex": "(\\S*)+(\\u007C)+(\\S*)", "exceptionStackTrace": null, "matches": ["evil||", "evil|eVil", "evil|EVIL", "evil|ev_il", "evil|ev il", "evil|ev4il", "evil|e", "evil| ", "evil|6", "evil|_", "evil|", "evil||evil", "evilevil|evil", "||evil", "eVil|evil", "EVIL|evil", "ev_il|evil", "ev il|evil", "ev4il|evil", "e|evil", " |evil", "6|evil", "_|evil", "|evil", "|", "evil|evil"], "nonMatches": ["evilevil"]}, {"regex": "^(\\d{3}-\\d{2}-\\d{4})|(\\d{3}\\d{2}\\d{4})$", "exceptionStackTrace": null, "matches": ["0000000000", "000-00-00000", "000000000", "000-00-0000"], "nonMatches": ["00000000", "000-00-000", "000-000-0000", "000-0-0000", "0000-00-0000", "00-00-0000"]}, {"regex": "^(\\d{4})-((0[1-9])|(1[0-2]))-(0[1-9]|[12][0-9]|3[01])$", "exceptionStackTrace": null, "matches": ["0000-01-30", "0000-01-10", "0000-10-01", "0000-01-31", "0000-01-20", "0000-01-01"], "nonMatches": ["0000-13-01", "0000-01-32", "0000-01-00", "0000-00-01", "00000-01-01", "000-01-01"]}, {"regex": "grdhg", "exceptionStackTrace": null, "matches": ["grdhg"], "nonMatches": []}, {"regex": "^[0-3]{1}[0-9]{1}[ ]{1}(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec){1}[ ]{1}[0-9]{2}$", "exceptionStackTrace": null, "matches": ["00 dec 00", "00 nov 00", "00 oct 00", "00 sep 00", "00 aug 00", "00 jul 00", "00 jun 00", "00 may 00", "00 apr 00", "00 mar 00", "00 feb 00", "00 jan 00", "00 DEC 00", "00 NOV 00", "00 OCT 00", "00 SEP 00", "00 AUG 00", "00 JUL 00", "00 JUN 00", "00 MAY 00", "00 APR 00", "00 MAR 00", "00 FEB 00", "00 JAN 00", "00 Dec 00", "00 Nov 00", "00 Oct 00", "00 Sep 00", "00 Aug 00", "00 Jul 00", "00 Jun 00", "00 May 00", "00 Apr 00", "00 Mar 00", "00 Feb 00", "00 Jan 00"], "nonMatches": ["00 Jan 000", "00 Jan 0", "00 Jan  00", "00 Jan00", "00 JanJan 00", "00  00", "00  Jan 00", "00Jan 00", "000 Jan 00", "0 Jan 00", "40 Jan 00"]}, {"regex": "^(?=.*[A-Z])(?=.*\\d)(?=.*[$@$!%*?&_#.^()\\s&#39;-~])[A-Za-z\\d$@$!%*?&_#.^()\\s&#39;-~]{6,20}", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (bad range): Invalid range: ;-~"}, "matches": [], "nonMatches": []}, {"regex": "^((29-02-(19|20)(([02468][048])|([13579][26])))|(31-((0[13578])|(1[02]))|(30-((0[13456789])|(1[0-2])))|(29-((0[13456789])|(1[0-2])))|(((0[1-9]|)|(1[0-9])|(2[0-8]))-((0[1-9])|(1[0-2])))-((19|20)[0-9][0-9])))$", "exceptionStackTrace": null, "matches": ["29-08", "29-07", "29-06", "29-05", "29-04", "29-03", "29-01", "30-08", "30-07", "30-06", "30-05", "30-04", "30-03", "30-01", "31-10", "31-07", "31-05", "31-03", "31-01", "29-02-1992", "29-02-1976", "29-02-1956", "29-02-1936", "29-02-1916", "29-02-1984", "29-02-1980", "29-02-1968", "29-02-1948", "29-02-1928", "29-02-1908", "-10-1900", "-01-2000", "-01-1900", "20-01-1900", "10-01-1900", "01-10-1900", "01-01-2000", "01-01-1900", "29-10", "29-09", "30-10", "30-09", "31-12", "31-08", "29-02-2088", "29-02-1996", "29-02-1988"], "nonMatches": ["29-01-1900", "01-13-1900", "01-00-1900", "0101-01-1900", "00-01-1900", "29-13", "29-00", "30-13", "30-00", "31-11", "31-00", "29-02-1990", "29-02-1906", "29-02-1981", "29-02-1918"]}, {"regex": "(?<=<embed\\s[^<>]*?src\\s*?=\\s*?\\x22)[^<>]*?(?=\\x22[^<>]*?>)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "look-behind requires fixed-width pattern"}, "matches": []}, {"regex": "(?<=<param(?=[^<>]*?name\\s*=\\s*\\x22movie\\x22)[^<>]*?value\\s*=\\s*\\x22)[^<>]*?(?=\\x22[^<>]*?>)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "look-behind requires fixed-width pattern"}, "matches": []}, {"regex": "\\A((?:[01]{0,1}\\d)|(?:[2][0123])):([012345]\\d):([012345]\\d)(.\\d{1,3})?([Z]|(?:[+-]?(?:[01]{0,1}\\d)|(?:[2][0123])):([012345]\\d))\\Z", "exceptionStackTrace": null, "matches": ["22:50:50a0Z", "21:50:50a0Z", "10:50:50a024:50", "10:50:50a022:50", "10:50:50a021:50", "10:50:50a020:50", "10:50:50a0-10:40", "10:50:50a0-10:30", "10:50:50a0-10:20", "10:50:50a0-10:10", "10:50:50a0-10:00", "10:50:50a0-0:50", "10:50:50a0-00:50", "10:50:50a010:50", "10:50:50a0+10:50", "10:50:50Z", "10:50:50a000Z", "10:50:50A0Z", "10:50:50:0Z", "10:50:5000Z", "10:50:50-0Z", "10:50:50+0Z", "10:50:50 0Z", "10:50:40a0Z", "10:50:30a0Z", "10:50:20a0Z", "10:50:10a0Z", "10:50:00a0Z", "10:40:50a0Z", "10:30:50a0Z", "10:20:50a0Z", "10:10:50a0Z", "10:00:50a0Z", "0:50:50a0Z", "20:50:50a0Z", "00:50:50a0Z", "23:50:50Z", "0:50:5023:50", "0:50:500:50", "0:50:50Z", "23:50:50a0Z", "10:50:50a023:50", "10:50:50a0-10:50", "10:50:50a0Z"], "nonMatches": ["24:50:50a0Z", "10:50:50a0-10:60", "10:50:50a0-110:50", "10:50:50a0-20:50", "10:50:50a0--10:50", "10:50:50a0a0Z", "10:50:50a0000Z", "10:50:50aZ", "10:50:60a0Z", "10:60:50a0Z", "110:50:50a0Z"]}, {"regex": "\\A-?(\\d{4,})-(\\d{2})-(\\d{2})([Z]|(?:[+-]?(?:[01]\\d)|(?:[2][0123])):(?:[012345]\\d))\\Z", "exceptionStackTrace": null, "matches": ["-0000-00-0022:50", "-0000-00-0021:50", "-0000-00-0020:50", "-0000-00-00-10:40", "-0000-00-00-10:30", "-0000-00-00-10:20", "-0000-00-00-10:10", "-0000-00-00-10:00", "-0000-00-00-00:50", "-0000-00-0010:50", "-0000-00-00+10:50", "0000-00-0023:50", "0000-00-0010:50", "0000-00-00Z", "-0000-00-0023:50", "-0000-00-00-10:50", "-0000-00-00Z"], "nonMatches": ["-0000-00-0024:50", "-0000-00-00-10:60", "-0000-00-00-20:50", "-0000-00-00--10:50", "-0000-00-000Z", "-0000-00-0Z", "-0000-000-00Z", "-0000-0-00Z", "-000-00-00Z", "--0000-00-00Z"]}, {"regex": "^[a-zA-Z0-9\\_\\-]+[a-zA-Z0-9\\.\\_\\-]*@([a-zA-Z0-9\\_\\-]+\\.)+([a-zA-Z]{2,4}|travel|museum)$", "exceptionStackTrace": null, "matches": ["evilevil@evil.AAAA", "evilevil@evil.aA", "evilevil@evil.evil.AA", "evilevil@-.AA", "evilevil@eVil.AA", "evilevil@EVIL.AA", "evilevil@ev_il.AA", "evilevil@ev4il.AA", "evilevil@e.AA", "evilevil@6.AA", "evilevil@_.AA", "evil.@evil.AA", "evil-@evil.AA", "evileVil@evil.AA", "evilEVIL@evil.AA", "evilev_il@evil.AA", "evilev4il@evil.AA", "evile@evil.AA", "evil6@evil.AA", "evil_@evil.AA", "-evil@evil.AA", "eVilevil@evil.AA", "EVILevil@evil.AA", "ev_ilevil@evil.AA", "ev4ilevil@evil.AA", "eevil@evil.AA", "6evil@evil.AA", "_evil@evil.AA", "evil@evil.museum", "evil@evil.travel", "evil@evil.AA", "evilevil@evil.museum", "evilevil@evil.travel", "evilevil@evil.AA"], "nonMatches": ["evilevil@evil.AAAAA", "evilevil@evil.A", "evilevil@AA", "evilevil@@.AA", "evilevil@..AA", "evilevil@ev il.AA", "evilevil@ .AA", "evilevil@.AA", "evil@@evil.AA", "evilev il@evil.AA", "evil @evil.AA", "@evil@evil.AA", ".evil@evil.AA", "ev ilevil@evil.AA", " evil@evil.AA"]}, {"regex": "%[\\-\\+0\\s\\#]{0,1}(\\d+){0,1}(\\.\\d+){0,1}[hlI]{0,1}[cCdiouxXeEfgGnpsS]{1}", "exceptionStackTrace": null, "matches": ["%#0.0ISS", "%#0.0Ix", "%#0.0Iu", "%#0.0Is", "%#0.0Ip", "%#0.0Io", "%#0.0In", "%#0.0Ii", "%#0.0Ig", "%#0.0If", "%#0.0Ie", "%#0.0Id", "%#0.0Ic", "%#0.0IX", "%#0.0IG", "%#0.0IE", "%#0.0IC", "%#0.0S", "%#0.0lS", "%#0.0hS", "%#0IS", "%#0.00IS", "%#00.0IS", "%#.0IS", "%0.0IS", "%10.0IS", "%00.0IS", "%-0.0IS", "%+0.0IS", "% 0.0IS", "%S", "%#0.0IS"], "nonMatches": ["%#0.0I", "%#0.0Ia", "%#0.0IA", "%#0.0IIS", "%#0.0aS", "%#0.0AS", "%#0.0.0IS", "%#0.IS", "%##0.0IS"]}, {"regex": "\\b[1-9]\\d{3}\\ +[A-Z]{2}\\b", "exceptionStackTrace": null, "matches": ["1000  AA", "1000 AA"], "nonMatches": ["1000 AAA", "1000 A", "1000AA", "10000 AA", "100 AA", "0000 AA"]}, {"regex": "(?<Day>[0-3][0-9]|[1-9])/(?<Month>[1-9]|1[0-2]|0[1-9])/(?<Year>[12]\\d{3}|\\d{2})", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<D"}, "matches": []}, {"regex": "(?&lt;Day&gt;[1-9]|[0-3][0-9])/(?&lt;Month&gt;[01][012]|[1-9]|0[1-9])/(?&lt;Year&gt;[12]\\d{3}|\\d{2}) \n", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?&"}, "matches": []}, {"regex": "^(([+]|00)39)?((3[1-6][0-9]))(\\d{7})$", "exceptionStackTrace": null, "matches": ["3100000000", "00393100000000", "+393100000000"], "nonMatches": ["+3931000000000", "+39310000000", "+393000000000", "+39+393100000000"]}, {"regex": "^[a-zA-Z0-9][\\w-]*@[a-zA-Z0-9][\\w-\\.]*\\.[a-zA-Z0-9][\\w-]*$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character range \\w-\\."}, "matches": []}, {"regex": "^(?:(w){3}\\.)?[0-9a-zA-Z]+\\.[A-Za-z]{2,4}$", "exceptionStackTrace": null, "matches": ["www.evil.aaaa", "www.evil.Aa", "www.eVil.aa", "www.EVIL.aa", "www.ev4il.aa", "www.e.aa", "www.6.aa", "evil.aa", "www.evil.aa"], "nonMatches": ["www.evil.aaaaa", "www.evil.a", "www.ev_il.aa", "www.ev il.aa", "www. .aa", "www._.aa", "www..aa", "www.www.evil.aa", "wwww.evil.aa", "ww.evil.aa"]}, {"regex": "^-?([1-8]?[0-9]\\.{1}\\d{1,6}$|90\\.{1}0{1,6}$)", "exceptionStackTrace": null, "matches": ["-90.000000", "-10.000000", "-0.0", "10.0", "90.0", "0.0", "-90.0", "-10.0"], "nonMatches": ["-90.0000000", "-90.", "-90..0", "-900", "-10.0000000", "-10.", "-10..0", "-100", "-110.0", "-00.0", "--10.0"]}, {"regex": "^-?((([1]?[0-7][0-9]|[1-9]?[0-9])\\.{1}\\d{1,6}$)|[1]?[1-8][0]\\.{1}0{1,6}$)", "exceptionStackTrace": null, "matches": ["-110.000000", "-0.0", "-100.000000", "-180.0", "-00.0", "100.0", "10.0", "0.0", "00.0", "-110.0", "-10.0", "-100.0"], "nonMatches": ["-110.0000000", "-110.", "-110..0", "-1100", "-1110.0", "-100.0000000", "-100.", "-100..0", "-1000", "-1100.0", "--100.0"]}, {"regex": "^[A-Z]+[A-Z0-9,\\x5F]*$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["evil,", "evileVil", "evilEVIL", "evilev_il", "evilev il", "evilev4il", "evile", "evil ", "evil6", "evil_", "eVilevil", "EVILevil", "ev_ilevil", "ev ilevil", "ev4ilevil", "eevil", " evil", "6evil", "_evil", "evil", "evilevil"]}, {"regex": "df", "exceptionStackTrace": null, "matches": ["df"], "nonMatches": []}, {"regex": "\\[\\x01-\\x7f])*&quot;\\x20*)*(?<angle><))?((?!\\.)(?>\\.?[a-zA-Z\\d!#$%&&#39;*+\\-/=?^_`{|}~]+)+|&quot;((?=[\\x01-\\x7f])[^&quot;\\\\]|\\\\[\\x01-\\x7f])*&quot;)@(((?!-)[a-zA-Z\\d\\-]+(?<!-)\\.)+[a-zA-Z]{2,}|\\[(((?(?<!\\[)\\.)(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)){4}|[a-zA-Z\\d\\-]*[a-zA-Z\\d]:((?=[\\x01-\\x7f])[^\\\\\\[\\]]|\\\\[\\x01-\\x7f])+)\\])(?(angle)>)$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unbalanced parenthesis"}, "matches": []}, {"regex": "gdfhg", "exceptionStackTrace": null, "matches": ["gdfhg"], "nonMatches": []}, {"regex": "^(?!0,?\\d)([0-9]{2}[0-9]{0,}(\\.[0-9]{2}))$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["000.000", "000.0", "0000.00", "00.00", "000.00"]}, {"regex": "@([_a-zA-Z]+)", "exceptionStackTrace": null, "matches": ["@eVil", "@EVIL", "@ev_il", "@ev il", "@ev4il", "@e", "@_", "@evil"], "nonMatches": ["@@", "@ ", "@6", "@"]}, {"regex": "^(http\\://){1}(((www\\.){1}([a-zA-Z0-9\\-]*\\.){1,}){1}|([a-zA-Z0-9\\-]*\\.){1,10}){1}([a-zA-Z]{2,6}\\.){1}([a-zA-Z0-9\\-\\._\\?\\,\\&#39;/\\\\\\+&amp;%\\$#\\=~])*", "exceptionStackTrace": null, "matches": ["http://evil.evil.evil.evil.evil.evil.evil.evil.evil.evil.evil.AA.~", "http://evil.evil.evil.evil.evil.evil.evil.evil.evil.evil.AA.~", "http://..AA.~", "http://-.AA.~", "http://eVil.AA.~", "http://EVIL.AA.~", "http://ev4il.AA.~", "http://e.AA.~", "http://6.AA.~", "http://.AA.~", "http://www.evil.AA.~~", "http://www.evil.AA.", "http://www.evil.AA.p", "http://www.evil.AA.m", "http://www.evil.AA.b", "http://www.evil.AA.a", "http://www.evil.AA._", "http://www.evil.AA.\\", "http://www.evil.AA.A", "http://www.evil.AA.?", "http://www.evil.AA.=", "http://www.evil.AA.;", "http://www.evil.AA.9", "http://www.evil.AA.3", "http://www.evil.AA.0", "http://www.evil.AA./", "http://www.evil.AA..", "http://www.evil.AA.-", "http://www.evil.AA.,", "http://www.evil.AA.+", "http://www.evil.AA.&", "http://www.evil.AA.%", "http://www.evil.AA.$", "http://www.evil.AA.#", "http://www.evil.AA.AA.~", "http://www.evil.~", "http://www.evil.AAAAAAA.~", "http://www.evil.AAAAAA.~", "http://www.evil.A.~", "http://www.evil.aA.~", "http://www.evil.www.evil.AA.~", "http://www.evil.evil.AA.~", "http://www.AA.~", "http://www...AA.~", "http://www.-.AA.~", "http://www.eVil.AA.~", "http://www.EVIL.AA.~", "http://www.ev4il.AA.~", "http://www.e.AA.~", "http://www.6.AA.~", "http://www..AA.~", "http://www.www.evil.AA.~", "http://.AA.", "http://www..AA.", "http://evil.AA.~", "http://www.evil.AA.~"], "nonMatches": ["http://~.AA.~", "http://\\.AA.~", "http://?.AA.~", "http://=.AA.~", "http://;.AA.~", "http://:.AA.~", "http:///.AA.~", "http://,.AA.~", "http://+.AA.~", "http://&.AA.~", "http://%.AA.~", "http://$.AA.~", "http://#.AA.~", "http://ev_il.AA.~", "http://ev il.AA.~", "http:// .AA.~", "http://_.AA.~", "http://AA.~", "http://www.~.AA.~", "http://www.\\.AA.~", "http://www.?.AA.~", "http://www.=.AA.~", "http://www.;.AA.~", "http://www.:.AA.~", "http://www./.AA.~", "http://www.,.AA.~", "http://www.+.AA.~", "http://www.&.AA.~", "http://www.%.AA.~", "http://www.$.AA.~", "http://www.#.AA.~", "http://www.ev_il.AA.~", "http://www.ev il.AA.~", "http://www. .AA.~", "http://www._.AA.~", "http://http://www.evil.AA.~", "www.evil.AA.~"]}, {"regex": "^(?![DFIOQUWZ])[A-Z]{1}[0-9]{1}(?![DFIOQU])[A-Z]{1}[ ]{1}[0-9]{1}(?![DFIOQU])[A-Z]{1}[0-9]{1}$", "exceptionStackTrace": null, "matches": ["A0A 0A0"], "nonMatches": ["A0A 0A00", "A0A 0A", "A0A 0AA0", "A0A 00", "A0A 00A0", "A0A A0", "A0A  0A0", "A0A0A0", "A0AA 0A0", "A0 0A0", "A00A 0A0", "AA 0A0", "AA0A 0A0", "0A 0A0"]}, {"regex": "^([\\w]+@([\\w]+\\.)+[a-zA-Z]{2,9}(\\s*;\\s*[\\w]+@([\\w]+\\.)+[a-zA-Z]{2,9})*)$ ", "exceptionStackTrace": null, "matches": [], "nonMatches": ["evil@evil.AA ; evil@evil.AA ; evil@evil.AA ", "evil@evil.AA ; evil@evil.AAAAAAAAAA ", "evil@evil.AA ; evil@evil.AAAAAAAAA ", "evil@evil.AA ; evil@evil.A ", "evil@evil.AA ; evil@evil.aA ", "evil@evil.AA ; evil@evil.evil.AA ", "evil@evil.AA ; evil@AA ", "evil@evil.AA ; evil@eVil.AA ", "evil@evil.AA ; evil@EVIL.AA ", "evil@evil.AA ; evil@ev_il.AA ", "evil@evil.AA ; evil@ev il.AA ", "evil@evil.AA ; evil@ev4il.AA ", "evil@evil.AA ; evil@e.AA ", "evil@evil.AA ; evil@ .AA ", "evil@evil.AA ; evil@6.AA ", "evil@evil.AA ; evil@_.AA ", "evil@evil.AA ; evil@.AA ", "evil@evil.AA ; eVil@evil.AA ", "evil@evil.AA ; EVIL@evil.AA ", "evil@evil.AA ; ev_il@evil.AA ", "evil@evil.AA ; ev il@evil.AA ", "evil@evil.AA ; ev4il@evil.AA ", "evil@evil.AA ; e@evil.AA ", "evil@evil.AA ;  @evil.AA ", "evil@evil.AA ; 6@evil.AA ", "evil@evil.AA ; _@evil.AA ", "evil@evil.AA ; @evil.AA ", "evil@evil.AA ;  evil@evil.AA ", "evil@evil.AA ;evil@evil.AA ", "evil@evil.AA  ; evil@evil.AA ", "evil@evil.AA; evil@evil.AA ", "evil@evil.AAAAAAAAAA ; evil@evil.AA ", "evil@evil.AAAAAAAAA ; evil@evil.AA ", "evil@evil.A ; evil@evil.AA ", "evil@evil.aA ; evil@evil.AA ", "evil@evil.evil.AA ; evil@evil.AA ", "evil@AA ; evil@evil.AA ", "evil@eVil.AA ; evil@evil.AA ", "evil@EVIL.AA ; evil@evil.AA ", "evil@ev_il.AA ; evil@evil.AA ", "evil@ev il.AA ; evil@evil.AA ", "evil@ev4il.AA ; evil@evil.AA ", "evil@e.AA ; evil@evil.AA ", "evil@ .AA ; evil@evil.AA ", "evil@6.AA ; evil@evil.AA ", "evil@_.AA ; evil@evil.AA ", "evil@.AA ; evil@evil.AA ", "eVil@evil.AA ; evil@evil.AA ", "EVIL@evil.AA ; evil@evil.AA ", "ev_il@evil.AA ; evil@evil.AA ", "ev il@evil.AA ; evil@evil.AA ", "ev4il@evil.AA ; evil@evil.AA ", "e@evil.AA ; evil@evil.AA ", " @evil.AA ; evil@evil.AA ", "6@evil.AA ; evil@evil.AA ", "_@evil.AA ; evil@evil.AA ", "@evil.AA ; evil@evil.AA ", "evil@evil.AA ", "evil@evil.AA ; evil@evil.AA "]}, {"regex": "[0-9]*[-| ][0-9]*[-| ][0-9]*[-| ][0-9]*[-| ][0-9]*", "exceptionStackTrace": null, "matches": ["0 0 0 0 00", "0 0 0 0 ", "0 0 0 0|0", "0 0 0 0-0", "0 0 0 00 0", "0 0 0  0", "0 0 0|0 0", "0 0 0-0 0", "0 0 00 0 0", "0 0  0 0", "0 0|0 0 0", "0 0-0 0 0", "0 00 0 0 0", "0  0 0 0", "0|0 0 0 0", "0-0 0 0 0", "00 0 0 0 0", " 0 0 0 0", "    ", "0 0 0 0 0"], "nonMatches": []}, {"regex": "^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$", "exceptionStackTrace": null, "matches": ["evil-evil-evil", "evil-eVil", "evil-EVIL", "evil-ev_il", "evil-ev il", "evil-ev4il", "evil-e", "evil-6", "evil_evil", "evil evil", "eVil-evil", "EVIL-evil", "ev_il-evil", "ev il-evil", "ev4il-evil", "e-evil", "6-evil", "evil", "evil-evil"], "nonMatches": ["evil- ", "evil-_", "evil-", " -evil", "_-evil", "-evil"]}, {"regex": "\\w{5,255}", "exceptionStackTrace": null, "matches": ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "_aaaa", "Aaaaa", "0aaaa", "aaaaa"], "nonMatches": ["aaaa"]}, {"regex": "((0[1-9])|(1[0-2]))\\/(([0-9])|([0-2][0-9])|(3[0-1]))/\\d{2}", "exceptionStackTrace": null, "matches": ["01/0/000", "10/0/00", "01/30/00", "01/00/00", "01/0/00"], "nonMatches": ["13/0/00", "01/32/00", "01/0/0", "00/0/00"]}, {"regex": "\\$?GP[a-z]{3,},([a-z0-9\\.]*,)+([a-z0-9]{1,2}\\*[a-z0-9]{1,2})", "exceptionStackTrace": null, "matches": ["$GPaaa,evil,0*000", "$GPaaa,evil,0*00", "$GPaaa,evil,0*a", "$GPaaa,evil,00*0", "$GPaaa,evil,a*0", "$GPaaa,evil,evil,0*0", "$GPaaa,.,0*0", "$GPaaa,,,0*0", "$GPaaa,ev4il,0*0", "$GPaaa,e,0*0", "$GPaaa,6,0*0", "$GPaaa,,0*0", "$$GPaaa,evil,0*0", "GPaaa,evil,0*0", "GPaaa,,0*0", "$GPaaa,evil,0*0"], "nonMatches": ["$GPaaa,evil,0*", "$GPaaa,evil,000*0", "$GPaaa,evil,*0", "$GPaaa,0*0", "$GPaaa,*,0*0", "$GPaaa,$,0*0", "$GPaaa,eVil,0*0", "$GPaaa,EVIL,0*0", "$GPaaa,ev_il,0*0", "$GPaaa,ev il,0*0", "$GPaaa, ,0*0", "$GPaaa,_,0*0", "$GPaa,evil,0*0"]}, {"regex": "^(http(s?):\\/\\/)(www.)?(\\w|-)+(\\.(\\w|-)+)*((\\.[a-zA-Z]{2,3})|\\.(aero|coop|info|museum|name))+(\\/)?$", "exceptionStackTrace": null, "matches": ["https://wwwaa.a.AA", "https://wwwaa.a.AA.AA/", "https://wwwaa.a.AAA/", "https://wwwaa.a.aA/", "https://wwwaa.a.a.AA/", "https://wwwaa.AA/", "https://wwwaa.aa.AA/", "https://wwwaa._.AA/", "https://wwwaa.A.AA/", "https://wwwaa.0.AA/", "https://wwwaaa.a.AA/", "https://wwwa.a.AA/", "https://wwwa_.a.AA/", "https://wwwaA.a.AA/", "https://wwwa0.a.AA/", "https://wwwawwwaa.a.AA/", "https://a.a.AA/", "https://wwwAa.a.AA/", "https://www:a.a.AA/", "https://www0a.a.AA/", "https://www/a.a.AA/", "https://www.a.a.AA/", "https://www-a.a.AA/", "https://www a.a.AA/", "http://wwwaa.a.AA/", "http://-.AA", "http://a.name", "http://a.museum", "http://a.info", "http://a.coop", "http://a.aero", "http://a.AA", "https://wwwa-.a.AA/", "https://wwwaa.-.AA/", "https://wwwaa.a.name/", "https://wwwaa.a.museum/", "https://wwwaa.a.info/", "https://wwwaa.a.coop/", "https://wwwaa.a.aero/", "https://wwwaa.a.AA/"], "nonMatches": ["https://wwwaa.a.AA//", "https://wwwaa.a/", "https://wwwaa.a.AAAA/", "https://wwwaa.a.A/", "https://wwwaa..AA/", "httpss://wwwaa.a.AA/"]}, {"regex": "^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,8}[a-zA-Z0-9]$", "exceptionStackTrace": null, "matches": ["0..a", "0..A", "0........0", "0a.0", "0_.0", "0A.0", "00.0", "0-.0", "a..0", "A..0", "0..0"], "nonMatches": ["0.........0", "0.0"]}, {"regex": "^(\\+27|27)?(\\()?0?([7][1-9]|[8][2-4])(\\))?( |-|\\.|_)?(\\d{3})( |-|\\.|_)?(\\d{4})", "exceptionStackTrace": null, "matches": ["+27(071) 000 00000", "+27(071) 0000000", "+27(071)000 0000", "+27(071 000 0000", "+27(71) 000 0000", "+27071) 000 0000", "(071) 000 0000", "820000000", "710000000", "27(071) 000 0000", "+27(082) 000 0000", "+27(071)_000 0000", "+27(071).000 0000", "+27(071)-000 0000", "+27(071) 000_0000", "+27(071) 000.0000", "+27(071) 000-0000", "+27(071) 000 0000"], "nonMatches": ["+27(080) 000 0000", "+27(071) 000 000", "+27(071) 000  0000", "+27(071) 0000 0000", "+27(071) 00 0000", "+27(071)  000 0000", "+27(071)) 000 0000", "+27(070) 000 0000", "+27(0071) 000 0000", "+27((071) 000 0000", "+27+27(071) 000 0000"]}, {"regex": "(^-?\\d{0,14})+(\\.\\d{0,18})?)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unbalanced parenthesis"}, "matches": []}, {"regex": "&quot;[A-Za-z0-9]{3}&quot;", "exceptionStackTrace": null, "matches": ["&quot;a00&quot;", "&quot;A00&quot;", "&quot;000&quot;"], "nonMatches": ["&quot;0000&quot;", "&quot;00&quot;"]}, {"regex": "^[\\\\(]{0,1}([0-9]){3}[\\\\)]{0,1}[ ]?([^0-1]){1}([0-9]){2}[ ]?[-]?[ ]?([0-9]){4}[ ]*((x){0,1}([0-9]){1,5}){0,1}$", "exceptionStackTrace": null, "matches": ["(000) a00 - 0000 ", "(000) a00 - 0000 x00000", "(000) a00 - 0000 0", "(000) a00 - 0000  x0", "(000) a00 - 0000x0", "(000) a00 -0000 x0", "(000) a00  0000 x0", "(000) a00- 0000 x0", "(000) 00 - 0000 x0", "(000) \\00 - 0000 x0", "(000) A00 - 0000 x0", "(000) 200 - 0000 x0", "(000) -00 - 0000 x0", "(000) )00 - 0000 x0", "(000) (00 - 0000 x0", "(000)  00 - 0000 x0", "(000)a00 - 0000 x0", "(000 a00 - 0000 x0", "(000\\ a00 - 0000 x0", "000) a00 - 0000 x0", "\\000) a00 - 0000 x0", "000a000000", "(000) a00 - 0000 x0"], "nonMatches": ["(000) a00 - 0000 x0x0", "(000) a00 - 0000 x000000", "(000) a00 - 0000 x", "(000) a00 - 0000 xx0", "(000) a00 - 00000 x0", "(000) a00 - 000 x0", "(000) a00 -  0000 x0", "(000) a00 -- 0000 x0", "(000) a00  - 0000 x0", "(000) a000 - 0000 x0", "(000) a0 - 0000 x0", "(000) aa00 - 0000 x0", "(000) 000 - 0000 x0", "(000)  a00 - 0000 x0", "(000)) a00 - 0000 x0", "(0000) a00 - 0000 x0", "(00) a00 - 0000 x0", "((000) a00 - 0000 x0"]}, {"regex": "^[\\w]+[-\\.\\w]*@[-\\w]+\\.[a-z]{2,6}(\\.[a-z]{2,6})?$", "exceptionStackTrace": null, "matches": ["evilevil@evil.aa", "evilevil@evil.aa.aaaaaa", "evilevil@evil.aaaaaa.aa", "evilevil@-.aa.aa", "evilevil@eVil.aa.aa", "evilevil@EVIL.aa.aa", "evilevil@ev_il.aa.aa", "evilevil@ev4il.aa.aa", "evilevil@e.aa.aa", "evilevil@6.aa.aa", "evilevil@_.aa.aa", "evil.@evil.aa.aa", "evil-@evil.aa.aa", "evileVil@evil.aa.aa", "evilEVIL@evil.aa.aa", "evilev_il@evil.aa.aa", "evilev4il@evil.aa.aa", "evile@evil.aa.aa", "evil6@evil.aa.aa", "evil_@evil.aa.aa", "eVilevil@evil.aa.aa", "EVILevil@evil.aa.aa", "ev_ilevil@evil.aa.aa", "ev4ilevil@evil.aa.aa", "eevil@evil.aa.aa", "6evil@evil.aa.aa", "_evil@evil.aa.aa", "evil@evil.aa.aa", "evil@evil.aa", "evilevil@evil.aa.aa"], "nonMatches": ["evilevil@evil.aa.aa.aa", "evilevil@evil.aa.aaaaaaa", "evilevil@evil.aa.a", "evilevil@evil.aaaaaaa.aa", "evilevil@evil.a.aa", "evilevil@@.aa.aa", "evilevil@..aa.aa", "evilevil@ev il.aa.aa", "evilevil@ .aa.aa", "evilevil@.aa.aa", "evil@@evil.aa.aa", "evilev il@evil.aa.aa", "evil @evil.aa.aa", "ev ilevil@evil.aa.aa", " evil@evil.aa.aa"]}, {"regex": "[a-z]{3,4}s?:\\/\\/[-\\w.]+(\\/[-.\\w%&=?]+)*", "exceptionStackTrace": null, "matches": ["aaas://evil/evil/evil", "aaas://evil", "aaas://evil/?", "aaas://evil/=", "aaas://evil/:", "aaas://evil//", "aaas://evil/.", "aaas://evil/-", "aaas://evil/&", "aaas://evil/%", "aaas://evil/eVil", "aaas://evil/EVIL", "aaas://evil/ev_il", "aaas://evil/ev il", "aaas://evil/ev4il", "aaas://evil/e", "aaas://evil/ ", "aaas://evil/6", "aaas://evil/_", "aaas://evil/", "aaas://./evil", "aaas://-/evil", "aaas://eVil/evil", "aaas://EVIL/evil", "aaas://ev_il/evil", "aaas://ev il/evil", "aaas://ev4il/evil", "aaas://e/evil", "aaas://6/evil", "aaas://_/evil", "aaass://evil/evil", "aaa://evil/evil", "aaaaas://evil/evil", "aaaas://evil/evil", "aas://evil/evil", "aaa://evil", "aaas://evil/evil"], "nonMatches": ["aaas://?/evil", "aaas://=/evil", "aaas://:/evil", "aaas:////evil", "aaas://&/evil", "aaas://%/evil", "aaas:// /evil", "aaas:///evil"]}, {"regex": "pipo de clown", "exceptionStackTrace": null, "matches": ["pipo de clown"], "nonMatches": []}, {"regex": "url\\(\\s*(?:(?:(&quot;(?!([&#39;&quot;]+))(?!(((data|http(s)*):)|\\s*&quot;))[^&#39;&quot;]*&quot;)|(?:(&#39;(?!([&#39;&quot;]+))(?!(((data|http(s)*):)|\\s*&#39;))[^&#39;&quot;]*&#39;))|(?:((?!([&#39;&quot;\\s]+))(?!(((data|http(s)*):)|\\s*&#39;)).*[^&#39;&quot;]))))\\s*\\)", "exceptionStackTrace": null, "matches": ["url( evilu )", "url( evilt )", "url( evilq )", "url( evilo )", "url( evilA )", "url( evil; )", "url( evil: )", "url( evil9 )", "url( evil3 )", "url( evil0 )", "url( evil) )", "url( evil( )", "url( evil& )", "url( evil# )", "url( evil  )", "url( :a )", "url( )a )", "url( (a )", "url( eVila )", "url( EVILa )", "url( ev_ila )", "url( ev ila )", "url( ev4ila )", "url( ea )", "url(  a )", "url( 6a )", "url( _a )", "url( a )", "url( &#39;:&#39; )", "url( &#39;)&#39; )", "url( &#39;(&#39; )", "url( &#39;eVil&#39; )", "url( &#39;EVIL&#39; )", "url( &#39;ev_il&#39; )", "url( &#39;ev il&#39; )", "url( &#39;ev4il&#39; )", "url( &#39;e&#39; )", "url( &#39;6&#39; )", "url( &#39;_&#39; )", "url( &quot;evil&quot;  )", "url( &quot;evil&quot;)", "url( &quot;:&quot; )", "url( &quot;)&quot; )", "url( &quot;(&quot; )", "url( &quot;eVil&quot; )", "url( &quot;EVIL&quot; )", "url( &quot;ev_il&quot; )", "url( &quot;ev il&quot; )", "url( &quot;ev4il&quot; )", "url( &quot;e&quot; )", "url( &quot;6&quot; )", "url( &quot;_&quot; )", "url(  &quot;evil&quot; )", "url(&quot;evil&quot; )", "url(a)", "url( evila )", "url( &#39;evil&#39; )", "url( &quot;evil&quot; )"], "nonMatches": ["url( ;a )", "url( &a )", "url( #a )", "url( &#39;;&#39; )", "url( &#39;&&#39; )", "url( &#39;#&#39; )", "url( &#39; &#39; )", "url( &#39;&#39; )", "url( &quot;;&quot; )", "url( &quot;&&quot; )", "url( &quot;#&quot; )", "url( &quot; &quot; )", "url( &quot;&quot; )", "url(&#39;&#39;)", "url(&quot;&quot;)"]}, {"regex": "dfhghbf", "exceptionStackTrace": null, "matches": ["dfhghbf"], "nonMatches": []}, {"regex": "http://[^/]*/", "exceptionStackTrace": null, "matches": ["http://:/", "http:////", "http://eVil/", "http://EVIL/", "http://ev_il/", "http://ev il/", "http://ev4il/", "http://e/", "http:// /", "http://6/", "http://_/", "http:///", "http://evil/"], "nonMatches": []}, {"regex": "^\\s*(http[s]*\\:\\/\\/)?([wwW]{3}\\.)+[a-zA-Z0-9]+\\.[a-zA-Z]{2,3}.*$|^http[s]*\\:\\/\\/[^w]{3}[a-zA-Z0-9]+\\.[a-zA-Z]{2,3}.*$|http[s]*\\:\\/\\/[0-9]{2,3}\\.[0-9]{2,3}\\.[0-9]{2,3}\\.[0-9]{2,3}.*$", "exceptionStackTrace": null, "matches": ["https://00.00.00.00:", "https://00.00.00.00/", "https://00.00.00.00.", "https://00.00.00.00eVil", "https://00.00.00.00EVIL", "https://00.00.00.00ev_il", "https://00.00.00.00ev il", "https://00.00.00.00ev4il", "https://00.00.00.00e", "https://00.00.00.00 ", "https://00.00.00.006", "https://00.00.00.00_", "https://00.00.00.00", "https://00.00.00.0000evil", "https://00.00.00.000evil", "https://00.00.000.00evil", "https://00.000.00.00evil", "https://000.00.00.00evil", "httpss://00.00.00.00evil", "http://00.00.00.00evil", "https://aaaevil.AA:", "https://aaaevil.AA/", "https://aaaevil.AA.", "https://aaaevil.AAeVil", "https://aaaevil.AAEVIL", "https://aaaevil.AAev_il", "https://aaaevil.AAev il", "https://aaaevil.AAev4il", "https://aaaevil.AAe", "https://aaaevil.AA ", "https://aaaevil.AA6", "https://aaaevil.AA_", "https://aaaevil.AA", "https://aaaevil.AAAAevil", "https://aaaevil.AAAevil", "https://aaaevil.Aevil", "https://aaaevil.aAevil", "https://aaaeVil.AAevil", "https://aaaEVIL.AAevil", "https://aaaev4il.AAevil", "https://aaae.AAevil", "https://aaa6.AAevil", "https://aaaaevil.AAevil", "https://aaevil.AAevil", "https://Aaaevil.AAevil", "https://:aaevil.AAevil", "https://0aaevil.AAevil", "https:///aaevil.AAevil", "https://.aaevil.AAevil", "https:// aaevil.AAevil", "httpss://aaaevil.AAevil", "http://aaaevil.AAevil", " https://WWW.evil.AA:", " https://WWW.evil.AA/", " https://WWW.evil.AA.", " https://WWW.evil.AAeVil", " https://WWW.evil.AAEVIL", " https://WWW.evil.AAev_il", " https://WWW.evil.AAev il", " https://WWW.evil.AAev4il", " https://WWW.evil.AAe", " https://WWW.evil.AA ", " https://WWW.evil.AA6", " https://WWW.evil.AA_", " https://WWW.evil.AA", " https://WWW.evil.AAAAevil", " https://WWW.evil.AAAevil", " https://WWW.evil.Aevil", " https://WWW.evil.aAevil", " https://WWW.eVil.AAevil", " https://WWW.EVIL.AAevil", " https://WWW.ev4il.AAevil", " https://WWW.e.AAevil", " https://WWW.6.AAevil", " https://WWW.WWW.evil.AAevil", " https://wWW.evil.AAevil", " WWW.evil.AAevil", " httpss://WWW.evil.AAevil", " http://WWW.evil.AAevil", "  https://WWW.evil.AAevil", "https://WWW.evil.AAevil", "http://00.00.00.00", "http://aaaevil.AA", "WWW.evil.AA", "https://00.00.00.00evil", "https://aaaevil.AAevil", " https://WWW.evil.AAevil"], "nonMatches": ["https://00.00.00.0evil", "https://00.00.0000.00evil", "https://00.00.0.00evil", "https://00.0000.00.00evil", "https://00.0.00.00evil", "https://0000.00.00.00evil", "https://0.00.00.00evil", "https://aaaev_il.AAevil", "https://aaaev il.AAevil", "https://aaa .AAevil", "https://aaa_.AAevil", "https://aaa.AAevil", "https://waaevil.AAevil", " https://WWW.ev_il.AAevil", " https://WWW.ev il.AAevil", " https://WWW. .AAevil", " https://WWW._.AAevil", " https://WWW..AAevil", " https://evil.AAevil", " https://WWWW.evil.AAevil", " https://WW.evil.AAevil", " https://aWW.evil.AAevil", " https://AWW.evil.AAevil", " https://https://WWW.evil.AAevil"]}, {"regex": "fgrdvd", "exceptionStackTrace": null, "matches": ["fgrdvd"], "nonMatches": []}, {"regex": "(([A-Za-z0-9_\\\\-]+\\\\.?)*)[A-Za-z0-9_\\\\-]+\\\\.[A-Za-z0-9_\\\\-]{2,6}", "exceptionStackTrace": null, "matches": ["evil\\aevil\\a-------", "evil\\aevil\\a------", "evil\\aevil\\a-", "evil\\aevil\\aa-", "evil\\aevil\\a_-", "evil\\aevil\\a\\-", "evil\\aevil\\aA-", "evil\\aevil\\a0-", "evil\\aevil\\_--", "evil\\aevil\\\\--", "evil\\aevil\\A--", "evil\\aevil\\0--", "evil\\aevil\\---", "evil\\aevil\\ --", "evil\\a\\\\a--", "evil\\a-\\a--", "evil\\aeVil\\a--", "evil\\aEVIL\\a--", "evil\\aev_il\\a--", "evil\\aev il\\a--", "evil\\aev4il\\a--", "evil\\ae\\a--", "evil\\a6\\a--", "evil\\a_\\a--", "evil\\a\\a--", "evil\\aevil\\aevil\\a--", "evil\\aaevil\\a--", "evil\\evil\\a--", "evil\\_evil\\a--", "evil\\\\evil\\a--", "evil\\Aevil\\a--", "evil\\0evil\\a--", "evil\\-evil\\a--", "evil\\ evil\\a--", "\\\\aevil\\a--", "-\\aevil\\a--", "eVil\\aevil\\a--", "EVIL\\aevil\\a--", "ev_il\\aevil\\a--", "ev il\\aevil\\a--", "ev4il\\aevil\\a--", "e\\aevil\\a--", " \\aevil\\a--", "6\\aevil\\a--", "_\\aevil\\a--", "\\aevil\\a--", "evil\\a--", "evil\\aevil\\a--"], "nonMatches": ["evil\\a \\a--"]}, {"regex": "name.matches(&quot;a-z&quot;)", "exceptionStackTrace": null, "matches": ["nameAmatches&quot;a-z&quot;", "name;matches&quot;a-z&quot;", "name0matches&quot;a-z&quot;", "name-matches&quot;a-z&quot;", "name&matches&quot;a-z&quot;", "name matches&quot;a-z&quot;", "nameamatches&quot;a-z&quot;"], "nonMatches": []}, {"regex": "(^[a-fA-F]+[+-]?$)\n", "exceptionStackTrace": null, "matches": ["A+\n", "AA-\n", "a-\n", "A\n", "A-\n"], "nonMatches": ["A--\n", "-\n", "g-\n", "G-\n"]}, {"regex": "\\d{5,12}|\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}|\\d{1,10}\\.\\d{1,10}", "exceptionStackTrace": null, "matches": ["0.00000000000", "0.0000000000", "00000000000.0", "0000000000.0", "0.0.00000000000", "0.0.0000000000", "0.0.", "0.00000000000.0", "0.0000000000.0", "00000000000.0.0", "0000000000.0.0", ".0.0", "0000000000000", "000000000000", "0.0", "0.0.0", "00000"], "nonMatches": ["0.", ".0", "0..0", "0000"]}, {"regex": "[0-9]{4}[A-Z]{2}", "exceptionStackTrace": null, "matches": ["0000AAA", "00000AA", "0000AA"], "nonMatches": ["0000A", "000AA"]}, {"regex": "(?:\\([2-9][0-8]\\d\\)\\ ?|[2-9][0-8]\\d[\\-\\ \\.\\/]?)[2-9]\\d{2}[- \\.\\/]?\\d{4}\\b", "exceptionStackTrace": null, "matches": ["200200/0000", "200.200/0000", "200-200/0000", "200 200/0000", "(200) 2000000", "(200) 200.0000", "(200) 200-0000", "(200) 200 0000", "(200)200/0000", "2002000000", "(200)2000000", "200/200/0000", "(200) 200/0000"], "nonMatches": ["200//200/0000", "290/200/0000", "000/200/0000", "(200) 200/00000", "(200) 200/000", "(200) 200//0000", "(200) 2000/0000", "(200) 20/0000", "(200) 000/0000", "(200)  200/0000", "(290) 200/0000", "(000) 200/0000"]}, {"regex": "\\b([2-9][p-z][a-h][2-9]{1,2}[a-z]+[p-z][2-9][p-z][2-9][p-z]|[a-z][a-z]+\\d{2}[a-z]|[2-9][p-z]{2}[a-h][2-9]{1,2}[a-z]+[p-z][2-9]{3}[p-z]|\\d{12}|[2-9][p-z][a-h][2-9][a-z0-9]+[p-z][2-9]{3}[p-z])\\b", "exceptionStackTrace": null, "matches": ["2pa2ev4ilp222p", "2pa2ep222p", "2pa26p222p", "2ppa2ep222p", "2ppa22evilp222p", "aev il00a", "ae00a", "2pa2ep2p2p", "2pa22evilp2p2p", "2pa2evilp222p", "000000000000", "2ppa2evilp222p", "aevil00a", "2pa2evilp2p2p"], "nonMatches": ["2pa2evilp222a", "2pa2evilp2222p", "2pa2evilp22p", "2pa2evilp022p", "2pa2evila222p", "2pa2eVilp222p", "2pa2EVILp222p", "2pa2ev_ilp222p", "2pa2ev ilp222p", "2pa2 p222p", "2pa2_p222p", "2pa2p222p", "2pa0evilp222p", "2pi2evilp222p", "2aa2evilp222p", "0pa2evilp222p", "0000000000000", "00000000000", "2ppa2evilp222a", "2ppa2evilp2222p", "2ppa2evilp22p", "2ppa2evilp022p", "2ppa2evila222p", "2ppa2eVilp222p", "2ppa2EVILp222p", "2ppa2ev_ilp222p", "2ppa2ev ilp222p", "2ppa2ev4ilp222p", "2ppa2 p222p", "2ppa26p222p", "2ppa2_p222p", "2ppa2p222p", "2ppa222evilp222p", "2ppaevilp222p", "2ppa0evilp222p", "2ppi2evilp222p", "2pppa2evilp222p", "2apa2evilp222p", "0ppa2evilp222p", "aevil000a", "aevil0a", "aeVil00a", "aEVIL00a", "aev_il00a", "aev4il00a", "a 00a", "a600a", "a_00a", "a00a", "2pa2evilp2p2a", "2pa2evilp2p0p", "2pa2evilp2a2p", "2pa2evilp0p2p", "2pa2evila2p2p", "2pa2eVilp2p2p", "2pa2EVILp2p2p", "2pa2ev_ilp2p2p", "2pa2ev ilp2p2p", "2pa2ev4ilp2p2p", "2pa2 p2p2p", "2pa26p2p2p", "2pa2_p2p2p", "2pa2p2p2p", "2pa222evilp2p2p", "2paevilp2p2p", "2pa0evilp2p2p", "2pi2evilp2p2p", "2aa2evilp2p2p", "0pa2evilp2p2p"]}, {"regex": "(-?[1-9]*\\d*[02468])(?=\\D)", "exceptionStackTrace": null, "matches": [], "nonMatches": ["-106", "-104", "-102", "-101", "-100", "-1008", "-18", "-1108", "-08", "-008", "--108", "108", "8", "-108"]}, {"regex": "^(?([0-1])[0-1][0-9]|2[0-3])\\:[0-5][0-9]$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character in group name '[0-1]'"}, "matches": []}, {"regex": "testing", "exceptionStackTrace": null, "matches": ["testing"], "nonMatches": []}, {"regex": "^([0-9a-f]{4}\\.[0-9a-f]{4}\\.[0-9a-f]{4})$", "exceptionStackTrace": null, "matches": ["aaaa.aaaa.0aaa", "aaaa.0aaa.aaaa", "0aaa.aaaa.aaaa", "aaaa.aaaa.aaaa"], "nonMatches": ["aaaa.aaaa.aaaaa", "aaaa.aaaa.aaa", "aaaa.aaaa.gaaa", "aaaa.aaaaa.aaaa", "aaaa.aaa.aaaa", "aaaa.gaaa.aaaa", "aaaaa.aaaa.aaaa", "aaa.aaaa.aaaa", "gaaa.aaaa.aaaa"]}, {"regex": "<a.*? href=[&quot;|&#39;].*\\?(?<query>.*?)[&quot;|&#39;].*?>", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<q"}, "matches": []}, {"regex": "^([0-1][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])([Z]|\\.[0-9]{4}|[-|\\+]([0-1][0-9]|2[0-3]):([0-5][0-9]))?$", "exceptionStackTrace": null, "matches": ["00:00:00|00:00", "00:00:00-00:00", "20:00:00", "00:00:00", "20:00:00Z", "00:00:00+20:00", "00:00:00+00:00", "00:00:00.0000", "00:00:00Z"], "nonMatches": ["24:00:00Z", "00:00:00+24:00", "00:00:00+00:60", "00:00:00.00000", "00:00:00.000", "00:00:00ZZ", "00:00:60Z", "00:60:00Z"]}, {"regex": "^((1[6789]|[2-9][0-9])[0-9]{2}-(0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))$|^((1[6789]|[2-9][0-9])[0-9]{2}-(0[469]|11)-(0[1-9]|[12][0-9]|30))$|^((16|[248][048]|[3579][26])00)|(1[6789]|[2-9][0-9])(0[48]|[13579][26]|[2468][048])-02-(0[1-9]|1[0-9]|2[0-9])$|^(1[6789]|[2-9][0-9])[0-9]{2}-02-(0[1-9]|1[0-9]|2[0-8])$", "exceptionStackTrace": null, "matches": ["1800-02-01", "1700-02-01", "1600-02-01", "1984-02-01", "1981-02-01", "1980-02-01", "1968-02-01", "1948-02-01", "1928-02-01", "1992-02-01", "1990-02-01", "1976-02-01", "1956-02-01", "1936-02-01", "1916-02-01", "1906-02-01", "1904-02-01", "1808-02-01", "1708-02-01", "1608-02-01", "9200", "7600", "5600", "3600", "8400", "8000", "4800", "2800", "1900-09-10", "1900-06-01", "1900-04-01", "1800-09-01", "1700-09-01", "1600-09-01", "1900-10-01", "1900-08-30", "1900-08-10", "1900-07-01", "1900-05-01", "1900-03-01", "1900-01-01", "1800-08-01", "1700-08-01", "1600-08-01", "2000-02-01", "1900-02-20", "1900-02-10", "1900-02-01", "2008-02-01", "1988-02-01", "1996-02-01", "1908-02-20", "1908-02-10", "1908-02-01", "9600", "8800", "1600", "2000-09-01", "1900-11-01", "1900-09-30", "1900-09-20", "1900-09-01", "2000-08-01", "1900-12-01", "1900-08-31", "1900-08-20", "1900-08-01"], "nonMatches": ["0000-02-01", "1900-02-29", "1900-02-00", "19000-02-01", "190-02-01", "1000-02-01", "0008-02-01", "1908-02-00", "1008-02-01", "9000", "0600", "8100", "0800", "0000-09-01", "1900-09-00", "19000-09-01", "190-09-01", "1000-09-01", "0000-08-01", "1900-08-32", "1900-08-00", "1900-00-01", "19000-08-01", "190-08-01", "1000-08-01"]}, {"regex": "(?:[a-z]{3},\\s+)?(\\d{1,2})\\s+([a-z]{3})\\s+(\\d{4})\\s+([01][0-9]|2[0-3])\\:([0-5][0-9])", "exceptionStackTrace": null, "matches": ["aaa, 0 aaa 0000 00:00", "aaa, 0 aaa 0000  10:00", "aaa, 0 aaa  0000 10:00", "aaa, 0  aaa 0000 10:00", "aaa, 000 aaa 0000 10:00", "aaa, 00 aaa 0000 10:00", "aaa, aaa, 0 aaa 0000 10:00", "aaa,  0 aaa 0000 10:00", "aaa,0 aaa 0000 10:00", "aaaa, 0 aaa 0000 10:00", "aa, 0 aaa 0000 10:00", "0 aaa 0000 20:00", "0 aaa 0000 10:00", "aaa, 0 aaa 0000 20:00", "aaa, 0 aaa 0000 10:00"], "nonMatches": ["aaa, 0 aaa 0000 24:00", "aaa, 0 aaa 0000 10:60", "aaa, 0 aaa 000010:00", "aaa, 0 aaa 00000 10:00", "aaa, 0 aaa 000 10:00", "aaa, 0 aaa0000 10:00", "aaa, 0 aaaa 0000 10:00", "aaa, 0 aa 0000 10:00", "aaa, 0aaa 0000 10:00", "aaa,  aaa 0000 10:00"]}, {"regex": "^(\\d{3,})\\s?(\\w{0,5})\\s([a-zA-Z]{2,30})\\s([a-zA-Z]{2,15})\\.?\\s?(\\w{0,5})$", "exceptionStackTrace": null, "matches": ["000 a AA AA. aaaaa", "000 a AA AA. ", "000 a AA AA. _", "000 a AA AA. A", "000 a AA AA. 0", "000 a AA AA.a", "000 a AA AA a", "000 a AA AAAAAAAAAAAAAAA. a", "000 a AA aA. a", "000 a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AA. a", "000 a aA AA. a", "000 aaaaa AA AA. a", "000  AA AA. a", "000 _ AA AA. a", "000 A AA AA. a", "000 0 AA AA. a", "000a AA AA. a", "000 AA AA", "000 a AA AA. a"], "nonMatches": ["000 a AA AA. aaaaaa", "000 a AA AA.  a", "000 a AA AA.. a", "000 a AA AAAAAAAAAAAAAAAA. a", "000 a AA A. a", "000 a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AA. a", "000 a A AA. a", "000 aaaaaa AA AA. a", "000  a AA AA. a", "00 a AA AA. a"]}, {"regex": "&#39;`.*?((http|ftp|https)://[\\w#$&+,\\/:;=?@.-]+)[^\\w#$&+,\\/:;=?@.-]*?`i&#39;", "exceptionStackTrace": null, "matches": ["&#39;`evilhttp://evil``i&#39;", "&#39;`evilhttp://evil@`i&#39;", "&#39;`evilhttp://evil?`i&#39;", "&#39;`evilhttp://evil=`i&#39;", "&#39;`evilhttp://evil;`i&#39;", "&#39;`evilhttp://evil:`i&#39;", "&#39;`evilhttp://evil/`i&#39;", "&#39;`evilhttp://evil.`i&#39;", "&#39;`evilhttp://evil-`i&#39;", "&#39;`evilhttp://evil,`i&#39;", "&#39;`evilhttp://evil+`i&#39;", "&#39;`evilhttp://evil&`i&#39;", "&#39;`evilhttp://evil$`i&#39;", "&#39;`evilhttp://evil#`i&#39;", "&#39;`evilhttp://evileVil`i&#39;", "&#39;`evilhttp://evilEVIL`i&#39;", "&#39;`evilhttp://evilev_il`i&#39;", "&#39;`evilhttp://evilev4il`i&#39;", "&#39;`evilhttp://evile`i&#39;", "&#39;`evilhttp://evil `i&#39;", "&#39;`evilhttp://evil6`i&#39;", "&#39;`evilhttp://evil_`i&#39;", "&#39;`evilhttp://@evil`i&#39;", "&#39;`evilhttp://?evil`i&#39;", "&#39;`evilhttp://=evil`i&#39;", "&#39;`evilhttp://;evil`i&#39;", "&#39;`evilhttp://:evil`i&#39;", "&#39;`evilhttp:///evil`i&#39;", "&#39;`evilhttp://.evil`i&#39;", "&#39;`evilhttp://-evil`i&#39;", "&#39;`evilhttp://,evil`i&#39;", "&#39;`evilhttp://+evil`i&#39;", "&#39;`evilhttp://&evil`i&#39;", "&#39;`evilhttp://$evil`i&#39;", "&#39;`evilhttp://#evil`i&#39;", "&#39;`evilhttp://eVilevil`i&#39;", "&#39;`evilhttp://EVILevil`i&#39;", "&#39;`evilhttp://ev_ilevil`i&#39;", "&#39;`evilhttp://ev4ilevil`i&#39;", "&#39;`evilhttp://eevil`i&#39;", "&#39;`evilhttp://6evil`i&#39;", "&#39;`evilhttp://_evil`i&#39;", "&#39;`evilhttp://evil`i&#39;", "&#39;``http://evilevil`i&#39;", "&#39;`@http://evilevil`i&#39;", "&#39;`?http://evilevil`i&#39;", "&#39;`=http://evilevil`i&#39;", "&#39;`;http://evilevil`i&#39;", "&#39;`:http://evilevil`i&#39;", "&#39;`/http://evilevil`i&#39;", "&#39;`.http://evilevil`i&#39;", "&#39;`-http://evilevil`i&#39;", "&#39;`,http://evilevil`i&#39;", "&#39;`+http://evilevil`i&#39;", "&#39;`&http://evilevil`i&#39;", "&#39;`$http://evilevil`i&#39;", "&#39;`#http://evilevil`i&#39;", "&#39;`eVilhttp://evilevil`i&#39;", "&#39;`EVILhttp://evilevil`i&#39;", "&#39;`ev_ilhttp://evilevil`i&#39;", "&#39;`ev ilhttp://evilevil`i&#39;", "&#39;`ev4ilhttp://evilevil`i&#39;", "&#39;`ehttp://evilevil`i&#39;", "&#39;` http://evilevil`i&#39;", "&#39;`6http://evilevil`i&#39;", "&#39;`_http://evilevil`i&#39;", "&#39;`http://evilevil`i&#39;", "&#39;`https://evil`i&#39;", "&#39;`ftp://evil`i&#39;", "&#39;`http://evil`i&#39;", "&#39;`evilhttps://evilevil`i&#39;", "&#39;`evilftp://evilevil`i&#39;", "&#39;`evilhttp://evilevil`i&#39;"], "nonMatches": ["&#39;`evilhttp://evilev il`i&#39;", "&#39;`evilhttp://`evil`i&#39;", "&#39;`evilhttp://ev ilevil`i&#39;", "&#39;`evilhttp:// evil`i&#39;"]}, {"regex": "^((((31\\/(0?[13578]|1[02]))|((29|30)\\/(0?[1,3-9]|1[0-2])))\\/(1[6-9]|[2-9]\\d)?\\d{2})|(29\\/0?2\\/(((1[6-9]|[2-9]\\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))|(0?[1-9]|1\\d|2[0-8])\\/((0?[1-9])|(1[0-2]))\\/((1[6-9]|[2-9]\\d)?\\d{2})) (20|21|22|23|[0-1]?\\d):([0-5]?)\\d$", "exceptionStackTrace": null, "matches": ["01/01/00 20:00", "01/1/1600 20:00", "1/01/1600 20:00", "29/02/9200 20:00", "29/02/7600 20:00", "29/02/5600 20:00", "29/02/3600 20:00", "29/02/8400 20:00", "29/02/8000 20:00", "29/02/6800 20:00", "29/02/4800 20:00", "29/02/2800 20:00", "29/02/1692 20:00", "29/02/1676 20:00", "29/02/1656 20:00", "29/02/1636 20:00", "29/02/1616 20:00", "29/02/1684 20:00", "29/02/1680 20:00", "29/02/1668 20:00", "29/02/1648 20:00", "29/02/1628 20:00", "29/02/1604 20:00", "29/02/08 20:00", "29/2/1608 20:00", "29/03/1600 20:00", "29/01/1600 20:00", "29/,/1600 20:00", "31/10/1600 20:00", "31/08/1600 0:00", "31/08/1600 20:0", "31/08/00 20:00", "31/07/1600 20:00", "31/05/1600 20:00", "31/03/1600 20:00", "31/01/1600 20:00", "31/8/1600 20:00", "20/1/00 20:0", "10/1/00 20:0", "1/10/00 20:0", "1/1/00 20:0", "29/2/9600 20:0", "29/2/8800 20:0", "29/2/1600 20:0", "29/2/96 20:0", "29/2/88 20:0", "29/2/08 20:0", "30/,/00 20:0", "29/10/00 20:0", "29/,/00 20:0", "31/12/00 20:0", "31/8/00 0:0", "31/8/00 23:0", "31/8/00 22:0", "31/8/00 21:0", "31/8/00 20:0", "20/01/1600 20:00", "10/01/1600 20:00", "01/10/1600 20:00", "01/01/2000 20:00", "01/01/1600 20:00", "29/02/9600 20:00", "29/02/8800 20:00", "29/02/1600 20:00", "29/02/2008 20:00", "29/02/1696 20:00", "29/02/1688 20:00", "29/02/1608 20:00", "30/0,/1600 20:00", "29/10/1600 20:00", "29/0,/1600 20:00", "31/12/1600 20:00", "31/08/2000 20:00", "31/08/1600 00:00", "31/08/1600 23:00", "31/08/1600 22:00", "31/08/1600 21:00", "31/08/1600 20:00"], "nonMatches": ["01/13/1600 20:00", "01/01/0000 20:00", "01/01/16000 20:00", "01/01/160 20:00", "01/01/161600 20:00", "01/01/1000 20:00", "01/00/1600 20:00", "01/001/1600 20:00", "00/01/1600 20:00", "001/01/1600 20:00", "29/02/9000 20:00", "29/02/0600 20:00", "29/02/8100 20:00", "29/02/0800 20:00", "29/02/0008 20:00", "29/02/1690 20:00", "29/02/1606 20:00", "29/02/1681 20:00", "29/02/161608 20:00", "29/02/1008 20:00", "29/002/1608 20:00", "29/13/1600 20:00", "29/00/1600 20:00", "29/00,/1600 20:00", "31/11/1600 20:00", "31/08/0000 20:00", "31/08/1600 000:00", "31/08/1600 20:000", "31/08/1600 20:60", "31/08/16000 20:00", "31/08/160 20:00", "31/08/161600 20:00", "31/08/1000 20:00", "31/00/1600 20:00", "31/008/1600 20:00"]}, {"regex": "Windows live support number UK", "exceptionStackTrace": null, "matches": ["Windows live support number UK"], "nonMatches": []}, {"regex": "Zeevafertility", "exceptionStackTrace": null, "matches": ["Zeevafertility"], "nonMatches": []}, {"regex": "(\\d{3}\\-\\d{2}\\-\\d{4})", "exceptionStackTrace": null, "matches": ["000-00-00000", "0000-00-0000", "000-00-0000"], "nonMatches": ["000-00-000", "000-000-0000", "000-0-0000", "00-00-0000"]}, {"regex": "((?!^[0-4])^(\\d+))$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["00", "", "0"]}, {"regex": "((\\d{1,6}\\-\\d{1,6})|(\\d{1,6}\\\\\\d{1,6})|(\\d{1,6})(\\/)(\\d{1,6})|(\\w{1}\\-?\\d{1,6})|(\\w{1}\\s\\d{1,6})|((P\\.?O\\.?\\s)((BOX)|(Box))(\\s\\d{1,6}))|((([R]{2})|([H][C]))(\\s\\d{1,6}\\s)((BOX)|(Box))(\\s\\d{1,6}))?)$", "exceptionStackTrace": null, "matches": ["RR 0 BOX 0RR 0 BOX 0", "RR 0 BOX 0000000", "RR 0 BOX 000000", "RR 0 BOX ", "RR 0000000 BOX 0", "RR 000000 BOX 0", "RR  BOX 0", "RRR 0 BOX 0", "R 0 BOX 0", "P.O. BOX 0000000", "P.O. BOX 000000", "P.O. BOX ", "P.O.. BOX 0", "P.O BOX 0", "P..O. BOX 0", "PO. BOX 0", "a 0000000", "a 000000", "a ", "aa 0", " 0", "_ 0", "A 0", "0 0", "a-0000000", "a-000000", "a-", "a--0", "aa-0", "_-0", "A-0", "0/0000000", "0/000000", "0/", "0000000/0", "000000/0", "/0", "0\\0000000", "0\\000000", "0\\", "0000000\\0", "000000\\0", "\\0", "0-0000000", "0-000000", "0-", "0000000-0", "000000-0", "-0", "", "PO Box 0", "PO BOX 0", "a0", "HC 0 BOX 0", "RR 0 Box 0", "RR 0 BOX 0", "P.O. Box 0", "P.O. BOX 0", "a 0", "a-0", "0/0", "0\\0", "0-0"], "nonMatches": []}, {"regex": "^http://\\\\.?video\\\\.google+\\\\.\\\\w{2,3}/videoplay\\\\?docid=[\\\\w-]{19}", "exceptionStackTrace": null, "matches": ["http://\\avideo\\agoogle\\a\\ww/videoplay\\docid=--------------------", "http://\\avideo\\agoogle\\a\\ww/videoplay\\docid=w------------------", "http://\\avideo\\agoogle\\a\\ww/videoplay\\docid=\\------------------", "http://\\avideo\\agoogle\\a\\ww/videoplaydocid=-------------------", "http://\\avideo\\agoogle\\a\\www/videoplay\\docid=-------------------", "http://\\avideo\\agoogle\\\\\\ww/videoplay\\docid=-------------------", "http://\\avideo\\agoogle\\A\\ww/videoplay\\docid=-------------------", "http://\\avideo\\agoogle\\=\\ww/videoplay\\docid=-------------------", "http://\\avideo\\agoogle\\:\\ww/videoplay\\docid=-------------------", "http://\\avideo\\agoogle\\0\\ww/videoplay\\docid=-------------------", "http://\\avideo\\agoogle\\/\\ww/videoplay\\docid=-------------------", "http://\\avideo\\agoogle\\-\\ww/videoplay\\docid=-------------------", "http://\\avideo\\agoogle\\ \\ww/videoplay\\docid=-------------------", "http://\\avideo\\agooglee\\a\\ww/videoplay\\docid=-------------------", "http://\\avideo\\\\google\\a\\ww/videoplay\\docid=-------------------", "http://\\avideo\\Agoogle\\a\\ww/videoplay\\docid=-------------------", "http://\\avideo\\=google\\a\\ww/videoplay\\docid=-------------------", "http://\\avideo\\:google\\a\\ww/videoplay\\docid=-------------------", "http://\\avideo\\0google\\a\\ww/videoplay\\docid=-------------------", "http://\\avideo\\/google\\a\\ww/videoplay\\docid=-------------------", "http://\\avideo\\-google\\a\\ww/videoplay\\docid=-------------------", "http://\\avideo\\ google\\a\\ww/videoplay\\docid=-------------------", "http://\\video\\agoogle\\a\\ww/videoplay\\docid=-------------------", "http://\\\\video\\agoogle\\a\\ww/videoplay\\docid=-------------------", "http://\\Avideo\\agoogle\\a\\ww/videoplay\\docid=-------------------", "http://\\=video\\agoogle\\a\\ww/videoplay\\docid=-------------------", "http://\\:video\\agoogle\\a\\ww/videoplay\\docid=-------------------", "http://\\0video\\agoogle\\a\\ww/videoplay\\docid=-------------------", "http://\\/video\\agoogle\\a\\ww/videoplay\\docid=-------------------", "http://\\-video\\agoogle\\a\\ww/videoplay\\docid=-------------------", "http://\\ video\\agoogle\\a\\ww/videoplay\\docid=-------------------", "http://\\video\\agoogle\\a\\ww/videoplaydocid=-------------------", "http://\\avideo\\agoogle\\a\\ww/videoplay\\docid=-------------------"], "nonMatches": ["http://\\avideo\\agoogle\\a\\ww/videoplay\\docid=------------------", "http://\\avideo\\agoogle\\a\\ww/videoplay\\docid=a------------------", "http://\\avideo\\agoogle\\a\\ww/videoplay\\\\docid=-------------------", "http://\\avideo\\agoogle\\a\\wwww/videoplay\\docid=-------------------", "http://\\avideo\\agoogle\\a\\w/videoplay\\docid=-------------------", "http://\\avideo\\agoogl\\a\\ww/videoplay\\docid=-------------------", "http://\\aavideo\\agoogle\\a\\ww/videoplay\\docid=-------------------"]}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "facebookcustomerservice", "exceptionStackTrace": null, "matches": ["facebookcustomerservice"], "nonMatches": []}, {"regex": "How to Avert Spotting on Oral Contraceptive?", "exceptionStackTrace": null, "matches": ["How to Avert Spotting on Oral Contraceptivee", "How to Avert Spotting on Oral Contraceptiv", "How to Avert Spotting on Oral Contraceptive"], "nonMatches": []}, {"regex": "^\\s*[a-zA-Z\\s]+\\,[0-9\\s]+\\s*$", "exceptionStackTrace": null, "matches": [" evil,   ", " evil, ", " evil,0 ", " eVil,  ", " EVIL,  ", " ev il,  ", " e,  ", "  ,  ", " ,  ", "  evil,  ", "evil,  ", "evil, ", " evil,  "], "nonMatches": [" ev_il,  ", " ev4il,  ", " 6,  ", " _,  "]}, {"regex": "^\\d{5}(\\d{3})?$", "exceptionStackTrace": null, "matches": ["00000", "00000000"], "nonMatches": ["00000000000", "000000000", "0000000"]}, {"regex": "(\\d{3}.?\\d{3}.?\\d{3}-?\\d{2})", "exceptionStackTrace": null, "matches": ["000a000a000-000", "000a000a00000", "000a000000-00", "000a000A000-00", "000a0000000-00", "000a000-000-00", "000a000 000-00", "000000a000-00", "000A000a000-00", "0000000a000-00", "000-000a000-00", "000 000a000-00", "0000a000a000-00", "00000000000", "000a000a000-00"], "nonMatches": ["000a000a000-0", "000a000a000--00", "000a000a0000-00", "000a000a00-00", "000a000aa000-00", "000a0000a000-00", "000a00a000-00", "000aa000a000-00", "00a000a000-00"]}, {"regex": "\\w+([-+.]\\w+)*@(?!(hotmail|gmail|yahoo|msn|excite|lycos|aol|live)\\.com$)\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*", "exceptionStackTrace": null, "matches": ["evil.evil@evil.evil.evil.eVil", "evil.evil@evil.evil.evil.EVIL", "evil.evil@evil.evil.evil.ev_il", "evil.evil@evil.evil.evil.ev il", "evil.evil@evil.evil.evil.ev4il", "evil.evil@evil.evil.evil.e", "evil.evil@evil.evil.evil. ", "evil.evil@evil.evil.evil.6", "evil.evil@evil.evil.evil._", "evil.evil@evil.evil.evil.", "evil.evil@evil.evil.evil-evil", "evil.evil@evil.evil.eVil.evil", "evil.evil@evil.evil.EVIL.evil", "evil.evil@evil.evil.ev_il.evil", "evil.evil@evil.evil.ev il.evil", "evil.evil@evil.evil.ev4il.evil", "evil.evil@evil.evil.e.evil", "evil.evil@evil.evil. .evil", "evil.evil@evil.evil.6.evil", "evil.evil@evil.evil._.evil", "evil.evil@evil.evil..evil", "evil.evil@evil.evil.evil.evil.evil", "evil.evil@evil.evil.evil", "evil.evil@evil.eVil.evil.evil", "evil.evil@evil.EVIL.evil.evil", "evil.evil@evil.ev_il.evil.evil", "evil.evil@evil.ev il.evil.evil", "evil.evil@evil.ev4il.evil.evil", "evil.evil@evil.e.evil.evil", "evil.evil@evil.6.evil.evil", "evil.evil@evil._.evil.evil", "evil.evil@evil-evil.evil.evil", "evil.evil@eVil.evil.evil.evil", "evil.evil@EVIL.evil.evil.evil", "evil.evil@ev_il.evil.evil.evil", "evil.evil@ev4il.evil.evil.evil", "evil.evil@e.evil.evil.evil", "evil.evil@6.evil.evil.evil", "evil.evil@_.evil.evil.evil", "evil.evil.evil@evil.evil.evil.evil", "evil@evil.evil.evil.evil", "evil.eVil@evil.evil.evil.evil", "evil.EVIL@evil.evil.evil.evil", "evil.ev_il@evil.evil.evil.evil", "evil.ev il@evil.evil.evil.evil", "evil.ev4il@evil.evil.evil.evil", "evil.e@evil.evil.evil.evil", "evil.6@evil.evil.evil.evil", "evil._@evil.evil.evil.evil", "evil-evil@evil.evil.evil.evil", "evil+evil@evil.evil.evil.evil", "eVil.evil@evil.evil.evil.evil", "EVIL.evil@evil.evil.evil.evil", "ev_il.evil@evil.evil.evil.evil", "ev il.evil@evil.evil.evil.evil", "ev4il.evil@evil.evil.evil.evil", "e.evil@evil.evil.evil.evil", " .evil@evil.evil.evil.evil", "6.evil@evil.evil.evil.evil", "_.evil@evil.evil.evil.evil", ".evil@evil.evil.evil.evil", "evil@evil.evil", "evil.evil@evil.evil.evil.evil"], "nonMatches": ["evil.evil@evil. .evil.evil", "evil.evil@evil..evil.evil", "evil.evil@ev il.evil.evil.evil", "evil.evil@ .evil.evil.evil", "evil.evil@.evil.evil.evil", "evil. @evil.evil.evil.evil", "evil.@evil.evil.evil.evil"]}, {"regex": "(Word1|Word2).*?(10|[1-9])", "exceptionStackTrace": null, "matches": ["Word1eVil10", "Word1EVIL10", "Word1ev_il10", "Word1ev il10", "Word1ev4il10", "Word1e10", "Word1 10", "Word1610", "Word1_10", "Word210", "Word11", "Word110", "Word2evil10", "Word1evil1", "Word1evil10"], "nonMatches": ["Word1evil0"]}, {"regex": "^\\d{1,7}$", "exceptionStackTrace": null, "matches": ["0000000", "0"], "nonMatches": ["00000000", ""]}, {"regex": "^((0|1[0-9]{0,2}|2[0-9]{0,1}|2[0-4][0-9]|25[0-5]|[3-9][0-9]{0,1})\\.){3}(0|1[0-9]{0,2}|2[0-9]{0,1}|2[0-4][0-9]|25[0-5]|[3-9][0-9]{0,1})(?(\\/)\\/([0-9]|[1-2][0-9]|3[0-2])|)$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character in group name '\\\\/'"}, "matches": []}, {"regex": "^(?:(\\\\d{1,6})-)?(\\\\d{2,10})/(\\\\d{4})$", "exceptionStackTrace": null, "matches": ["\\d-\\dddddddddd/\\dddd", "\\dddddd-\\dd/\\dddd", "\\dd/\\dddd", "\\d-\\dd/\\dddd"], "nonMatches": ["\\d-\\dd/\\ddddd", "\\d-\\dd/\\ddd", "\\d-\\ddddddddddd/\\dddd", "\\d-\\d/\\dddd", "\\d-\\d-\\dd/\\dddd", "\\ddddddd-\\dd/\\dddd", "\\-\\dd/\\dddd"]}, {"regex": "(((ht|f)tp(s)?://)|www.){1}([\\w-]+\\.)+[\\w-]+(/[\\w- ./?%&=]*)?", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character range \\w- "}, "matches": []}, {"regex": "(?=^.{6,10}$)(?=.*\\$)(?=.*[a-z])(?=.*[A-Z])(?=.*[!~@#$%^&amp;*()_+}{&quot;:;&#39;?/&gt;.&lt;,])(?!.*\\s).*$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["~", "}", "{", "^", "@", "?", ";", ":", "/", ".", ",", "+", "*", ")", "(", "&", "%", "$", "#", "!", "eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", " ", "6", "_", "", "evil"]}, {"regex": "^0?(5[024])(\\-)?\\d{7}$", "exceptionStackTrace": null, "matches": ["0540000000", "052-0000000", "050-0000000", "54-0000000", "540000000", "054-0000000"], "nonMatches": ["054-00000000", "054-000000", "054--0000000", "051-0000000", "0054-0000000"]}, {"regex": "((?:[\\\\?&](?:[a-z\\d\\\\.\\\\[\\\\]%-]+)(?:=[a-z\\\\d\\\\.\\\\[\\\\]%-]*)?)*)", "exceptionStackTrace": null, "matches": ["&\\%-]=\\%-]&\\%-]=\\%-]", "&\\%-]=\\%-]=\\%-]", "&\\%-]", "&\\%-]=\\%-]]", "&\\%-]=\\%-", "&\\%-]=d%-]", "&\\%-]=a%-]", "&\\%-]=[%-]", "&\\%-]=.%-]", "&\\%-]]=\\%-]", "&\\%-=\\%-]", "&a%-]=\\%-]", "&[%-]=\\%-]", "&0%-]=\\%-]", "&.%-]=\\%-]", "\\\\%-]=\\%-]", "?\\%-]=\\%-]", "", "&\\%-]=\\%-]"], "nonMatches": []}, {"regex": "Our History 1995,Shenyang DM was established in Shenyang Liaoning province.", "exceptionStackTrace": null, "matches": ["Our History 1995,Shenyang DM was established in Shenyang Liaoning provinceA", "Our History 1995,Shenyang DM was established in Shenyang Liaoning province0", "Our History 1995,Shenyang DM was established in Shenyang Liaoning province,", "Our History 1995,Shenyang DM was established in Shenyang Liaoning province ", "Our History 1995,Shenyang DM was established in Shenyang Liaoning provincea"], "nonMatches": []}, {"regex": "1 Inch Class 150 slip on flange", "exceptionStackTrace": null, "matches": ["1 Inch Class 150 slip on flange"], "nonMatches": []}, {"regex": "(^(\\+?\\-? *[0-9]+)([,0-9 ]*)([0-9 ])*$)|(^ *$)", "exceptionStackTrace": null, "matches": ["  ", "+- 0 0", "+- 0   ", "+- 0 ", "+- 00 ", "+- 0, ", "+- 00  ", "+-  0  ", "+-0  ", "+ 0  ", "- 0  ", "", "0", " ", "+- 0  "], "nonMatches": ["+-   ", "+-- 0  ", "++- 0  "]}, {"regex": "^Content-Type:\\s*(\\w+)\\s*/?\\s*(\\w*)?\\s*;\\s*((\\w+)?\\s*=\\s*((&quot;.+&quot;)|(\\S+)))?", "exceptionStackTrace": null, "matches": ["Content-Type: evil / evil ; evil = =", "Content-Type: evil / evil ; evil = ;", "Content-Type: evil / evil ; evil = :", "Content-Type: evil / evil ; evil = /", "Content-Type: evil / evil ; evil = -", "Content-Type: evil / evil ; evil = &", "Content-Type: evil / evil ; evil = eVil", "Content-Type: evil / evil ; evil = EVIL", "Content-Type: evil / evil ; evil = ev_il", "Content-Type: evil / evil ; evil = ev il", "Content-Type: evil / evil ; evil = ev4il", "Content-Type: evil / evil ; evil = e", "Content-Type: evil / evil ; evil =  ", "Content-Type: evil / evil ; evil = 6", "Content-Type: evil / evil ; evil = _", "Content-Type: evil / evil ; evil = ", "Content-Type: evil / evil ; evil = &quot;evil&quot;evil = &quot;evil&quot;", "Content-Type: evil / evil ; ", "Content-Type: evil / evil ; evil = &quot;=&quot;", "Content-Type: evil / evil ; evil = &quot;;&quot;", "Content-Type: evil / evil ; evil = &quot;:&quot;", "Content-Type: evil / evil ; evil = &quot;/&quot;", "Content-Type: evil / evil ; evil = &quot;-&quot;", "Content-Type: evil / evil ; evil = &quot;&&quot;", "Content-Type: evil / evil ; evil = &quot;eVil&quot;", "Content-Type: evil / evil ; evil = &quot;EVIL&quot;", "Content-Type: evil / evil ; evil = &quot;ev_il&quot;", "Content-Type: evil / evil ; evil = &quot;ev il&quot;", "Content-Type: evil / evil ; evil = &quot;ev4il&quot;", "Content-Type: evil / evil ; evil = &quot;e&quot;", "Content-Type: evil / evil ; evil = &quot; &quot;", "Content-Type: evil / evil ; evil = &quot;6&quot;", "Content-Type: evil / evil ; evil = &quot;_&quot;", "Content-Type: evil / evil ; evil = &quot;&quot;", "Content-Type: evil / evil ; evil =  &quot;evil&quot;", "Content-Type: evil / evil ; evil =&quot;evil&quot;", "Content-Type: evil / evil ; evil  = &quot;evil&quot;", "Content-Type: evil / evil ; evil= &quot;evil&quot;", "Content-Type: evil / evil ; evilevil = &quot;evil&quot;", "Content-Type: evil / evil ; eVil = &quot;evil&quot;", "Content-Type: evil / evil ; EVIL = &quot;evil&quot;", "Content-Type: evil / evil ; ev_il = &quot;evil&quot;", "Content-Type: evil / evil ; ev il = &quot;evil&quot;", "Content-Type: evil / evil ; ev4il = &quot;evil&quot;", "Content-Type: evil / evil ; e = &quot;evil&quot;", "Content-Type: evil / evil ;   = &quot;evil&quot;", "Content-Type: evil / evil ; 6 = &quot;evil&quot;", "Content-Type: evil / evil ; _ = &quot;evil&quot;", "Content-Type: evil / evil ;  = &quot;evil&quot;", "Content-Type: evil / evil ;  evil = &quot;evil&quot;", "Content-Type: evil / evil ;evil = &quot;evil&quot;", "Content-Type: evil / evil  ; evil = &quot;evil&quot;", "Content-Type: evil / evil; evil = &quot;evil&quot;", "Content-Type: evil / evilevil ; evil = &quot;evil&quot;", "Content-Type: evil / eVil ; evil = &quot;evil&quot;", "Content-Type: evil / EVIL ; evil = &quot;evil&quot;", "Content-Type: evil / ev_il ; evil = &quot;evil&quot;", "Content-Type: evil / ev4il ; evil = &quot;evil&quot;", "Content-Type: evil / e ; evil = &quot;evil&quot;", "Content-Type: evil /   ; evil = &quot;evil&quot;", "Content-Type: evil / 6 ; evil = &quot;evil&quot;", "Content-Type: evil / _ ; evil = &quot;evil&quot;", "Content-Type: evil /  ; evil = &quot;evil&quot;", "Content-Type: evil /  evil ; evil = &quot;evil&quot;", "Content-Type: evil /evil ; evil = &quot;evil&quot;", "Content-Type: evil  evil ; evil = &quot;evil&quot;", "Content-Type: evil  / evil ; evil = &quot;evil&quot;", "Content-Type: evil/ evil ; evil = &quot;evil&quot;", "Content-Type: eVil / evil ; evil = &quot;evil&quot;", "Content-Type: EVIL / evil ; evil = &quot;evil&quot;", "Content-Type: ev_il / evil ; evil = &quot;evil&quot;", "Content-Type: ev4il / evil ; evil = &quot;evil&quot;", "Content-Type: e / evil ; evil = &quot;evil&quot;", "Content-Type: 6 / evil ; evil = &quot;evil&quot;", "Content-Type: _ / evil ; evil = &quot;evil&quot;", "Content-Type:  evil / evil ; evil = &quot;evil&quot;", "Content-Type:evil / evil ; evil = &quot;evil&quot;", "Content-Type:evil;", "Content-Type: evil / evil ; evil = evil", "Content-Type: evil / evil ; evil = &quot;evil&quot;"], "nonMatches": ["Content-Type: evil / ev il ; evil = &quot;evil&quot;", "Content-Type: evil // evil ; evil = &quot;evil&quot;", "Content-Type: ev il / evil ; evil = &quot;evil&quot;", "Content-Type:   / evil ; evil = &quot;evil&quot;", "Content-Type:  / evil ; evil = &quot;evil&quot;"]}, {"regex": "(^1$) #^%Ed&#39;[]&#39;3[ce]c&lt;&gt;R#]ce&#39;xaaaac{}{}!@{!AFS}\n\n#f\\\\\\\\\\\\//4fx\\{}{}#{}!!!$$$$$%(%#@T%$)()(){}{}{}!!!!!!$$$!#@!\\#-**-*****a*sa*\n#!! Don&#39;t try to understand it!", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "multiple repeat"}, "matches": []}, {"regex": "^([A-Z]|[a-z]|[0-9])(([A-Z])*(([a-z])*([0-9])*(%)*(&)*(&#39;)*(\\+)*(-)*(@)*(_)*(\\.)*)|(\\ )[^  ])+$", "exceptionStackTrace": null, "matches": ["A _", "A A", "A @", "A ;", "A 0", "A .", "A -", "A +", "A &", "A %", "A #", "AAa0%&&#39;+-@_.Aa0%&&#39;+-@_.", "AAa0%&&#39;+-@_..", "AAa0%&&#39;+-@_", "AAa0%&&#39;+-@__.", "AAa0%&&#39;+-@.", "AAa0%&&#39;+-@@_.", "AAa0%&&#39;+-_.", "AAa0%&&#39;+--@_.", "AAa0%&&#39;+@_.", "AAa0%&&#39;++-@_.", "AAa0%&&#39;-@_.", "AAa0%&&#39;&#39;+-@_.", "AAa0%&+-@_.", "AAa0%&&&#39;+-@_.", "AAa0%&#39;+-@_.", "AAa0%%&&#39;+-@_.", "AAa0&&#39;+-@_.", "AAa00%&&#39;+-@_.", "AAa%&&#39;+-@_.", "AAaa0%&&#39;+-@_.", "AA0%&&#39;+-@_.", "AAAa0%&&#39;+-@_.", "Aa0%&&#39;+-@_.", "0", "a", "A", "0Aa0%&&#39;+-@_.", "aAa0%&&#39;+-@_.", "A a", "AAa0%&&#39;+-@_."], "nonMatches": ["A  "]}, {"regex": "^[A-Z]{3}[G|A|F|C|T|H|P]{1}[A-Z]{1}\\d{4}[A-Z]{1}$", "exceptionStackTrace": null, "matches": ["AAA|A0000A", "AAATA0000A", "AAAHA0000A", "AAAGA0000A", "AAAFA0000A", "AAACA0000A", "AAAAA0000A", "AAAPA0000A"], "nonMatches": ["AAAPA0000AA", "AAAPA0000", "AAAPA00000A", "AAAPA000A", "AAAPAA0000A", "AAAP0000A", "AAAPPA0000A", "AAAA0000A", "AAABA0000A", "AAAAPA0000A", "AAPA0000A"]}, {"regex": "^(?:[\\w]+[\\&amp;\\-_\\.]*)+@(?:(?:[\\w]+[\\-_\\.]*)\\.(?:[a-zA-Z]{2,}?))$", "exceptionStackTrace": null, "matches": ["evil.@evil..aA", "evil.@evil...AA", "evil.@evil.AA", "evil.@evil_.AA", "evil.@evil-.AA", "evil.@eVil..AA", "evil.@EVIL..AA", "evil.@ev_il..AA", "evil.@ev4il..AA", "evil.@e..AA", "evil.@6..AA", "evil.@_..AA", "evil.evil.@evil..AA", "evil..@evil..AA", "evil@evil..AA", "evilp@evil..AA", "evilm@evil..AA", "evilb@evil..AA", "evila@evil..AA", "evil_@evil..AA", "evil;@evil..AA", "evil-@evil..AA", "evil&@evil..AA", "eVil.@evil..AA", "EVIL.@evil..AA", "ev_il.@evil..AA", "ev4il.@evil..AA", "e.@evil..AA", "6.@evil..AA", "_.@evil..AA", "evil@evil.AA", "evil.@evil..AA"], "nonMatches": ["evil.@evil..A", "evil.@ev il..AA", "evil.@ ..AA", "evil.@..AA", "@evil..AA", "ev il.@evil..AA", " .@evil..AA", ".@evil..AA"]}, {"regex": "^[AaWaKkNn][a-zA-Z]?[0-9][a-zA-Z]{1,3}$", "exceptionStackTrace": null, "matches": ["nA0AAA", "nA0a", "na0A", "kA0A", "aA0A", "WA0A", "NA0A", "KA0A", "AA0A", "n0A", "nA0A"], "nonMatches": ["nA0AAAA", "nA0", "nAA0A", "bA0A", "BA0A"]}, {"regex": "[0-9A-Fa-f]{2}(\\.?)[0-9A-Fa-f]{2}(\\.?)[0-9A-Fa-f]{2}(\\.?)[0-9A-Fa-f]{2}", "exceptionStackTrace": null, "matches": ["aa.aa.aa.aaa", "aa.aa.aa.Aa", "aa.aa.aa.0a", "aa.aa.aaaa", "aa.aa.Aa.aa", "aa.aa.0a.aa", "aa.aaaa.aa", "aa.Aa.aa.aa", "aa.0a.aa.aa", "aaaa.aa.aa", "aaa.aa.aa.aa", "Aa.aa.aa.aa", "0a.aa.aa.aa", "aaaaaaaa", "aa.aa.aa.aa"], "nonMatches": ["aa.aa.aa.a", "aa.aa.aa.ga", "aa.aa.aa.Ga", "aa.aa.aa..aa", "aa.aa.aaa.aa", "aa.aa.a.aa", "aa.aa.ga.aa", "aa.aa.Ga.aa", "aa.aa..aa.aa", "aa.aaa.aa.aa", "aa.a.aa.aa", "aa.ga.aa.aa", "aa.Ga.aa.aa", "aa..aa.aa.aa", "a.aa.aa.aa", "ga.aa.aa.aa", "Ga.aa.aa.aa"]}, {"regex": "[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}", "exceptionStackTrace": null, "matches": ["0.0.0.0000", "0.0.0.000", "0.0.000.0", "0.000.0.0", "0000.0.0.0", "000.0.0.0", "0.0.0.0"], "nonMatches": ["0.0.0.", "0.0.0000.0", "0.0..0", "0.0000.0.0", "0..0.0", ".0.0.0"]}, {"regex": "^((([sS]|[nN])[a-hA-Hj-zJ-Z])|(([tT]|[oO])[abfglmqrvwABFGLMQRVW])|([hH][l-zL-Z])|([jJ][lmqrvwLMQRVW]))([0-9]{2})?([0-9]{2})?([0-9]{2})?([0-9]{2})?([0-9]{2})?$", "exceptionStackTrace": null, "matches": ["Jw0000000000", "Jv0000000000", "Jr0000000000", "Jq0000000000", "Jm0000000000", "Jl0000000000", "JV0000000000", "JR0000000000", "JQ0000000000", "JM0000000000", "JL0000000000", "jW0000000000", "Hl0000000000", "hL0000000000", "oW0000000000", "Tw0000000000", "Tv0000000000", "Tr0000000000", "Tq0000000000", "Tm0000000000", "Tl0000000000", "Tg0000000000", "Tf0000000000", "Tb0000000000", "Ta0000000000", "TV0000000000", "TR0000000000", "TQ0000000000", "TM0000000000", "TL0000000000", "TG0000000000", "TF0000000000", "TB0000000000", "TA0000000000", "tW0000000000", "nJ0000000000", "SJ00000000", "Sj0000000000", "Sa0000000000", "SA0000000000", "sJ0000000000", "JW", "HL", "OW", "TW", "NJ", "SJ", "JW0000000000", "HL0000000000", "OW0000000000", "TW0000000000", "NJ0000000000", "SJ0000000000"], "nonMatches": ["Ja0000000000", "JA0000000000", "Ha0000000000", "HA0000000000", "aL0000000000", "AL0000000000", "Tc0000000000", "TC0000000000", "aW0000000000", "AW0000000000", "SJ000000000000", "SJ00000000000", "SJ000000000", "Si0000000000", "SI0000000000", "aJ0000000000", "AJ0000000000"]}, {"regex": "((([sS]|[nN])[a-hA-Hj-zJ-Z])|(([tT]|[oO])[abfglmqrvwABFGLMQRVW])|([hH][l-zL-Z])|([jJ][lmqrvwLMQRVW]))([0-9]{2})?(([a-np-zA-NP-Z]{1}?|([0-9]{2})?([0-9]{2})?([0-9]{2})?([0-9]{2})?))", "exceptionStackTrace": null, "matches": ["Jw00P", "Jv00P", "Jr00P", "Jq00P", "Jm00P", "Jl00P", "JV00P", "JR00P", "JQ00P", "JM00P", "JL00P", "jW00P", "Hl00P", "hL00P", "oW00P", "Tw00P", "Tv00P", "Tr00P", "Tq00P", "Tm00P", "Tl00P", "Tg00P", "Tf00P", "Tb00P", "Ta00P", "TV00P", "TR00P", "TQ00P", "TM00P", "TL00P", "TG00P", "TF00P", "TB00P", "TA00P", "tW00P", "nJ00P", "SJ000000000000", "SJ00000000", "SJ00000000000", "SJ000000000", "SJ00PP", "SJ00", "SJ00p", "SJ00o", "SJ00a", "SJ00O", "SJ00A", "SJ0000P", "SJ000P", "SJ0P", "Sj00P", "Sa00P", "SA00P", "sJ00P", "JWP", "HLP", "OWP", "TWP", "NJP", "SJ", "SJP", "JW00P", "HL00P", "OW00P", "TW00P", "NJ00P", "SJ0000000000", "SJ00P"], "nonMatches": ["Ja00P", "JA00P", "Ha00P", "HA00P", "aL00P", "AL00P", "Tc00P", "TC00P", "aW00P", "AW00P", "Si00P", "SI00P", "aJ00P", "AJ00P"]}, {"regex": "^\\.{0,2}[\\/\\\\]", "exceptionStackTrace": null, "matches": ["./", "..\\", "\\", ".\\"], "nonMatches": ["...\\"]}, {"regex": "^((http|https|ftp)\\://|www\\.)[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,4}(/[a-zA-Z0-9\\-\\._\\?=\\,\\&#39;\\+%\\$#~]*[^\\.\\,\\)\\(\\s])*$", "exceptionStackTrace": null, "matches": ["http://evil.AA/evila/evila", "http://evil.AA/evil~", "http://evil.AA/evil_", "http://evil.AA/evilA", "http://evil.AA/evil?", "http://evil.AA/evil=", "http://evil.AA/evil;", "http://evil.AA/evil:", "http://evil.AA/evil0", "http://evil.AA/evil/", "http://evil.AA/evil-", "http://evil.AA/evil+", "http://evil.AA/evil&", "http://evil.AA/evil%", "http://evil.AA/evil$", "http://evil.AA/evil#", "http://evil.AA/~a", "http://evil.AA/?a", "http://evil.AA/=a", "http://evil.AA/;a", "http://evil.AA/.a", "http://evil.AA/-a", "http://evil.AA/,a", "http://evil.AA/+a", "http://evil.AA/&a", "http://evil.AA/%a", "http://evil.AA/$a", "http://evil.AA/#a", "http://evil.AA/eVila", "http://evil.AA/EVILa", "http://evil.AA/ev_ila", "http://evil.AA/ev4ila", "http://evil.AA/ea", "http://evil.AA/6a", "http://evil.AA/_a", "http://evil.AA/a", "http://evil.AAAA/evila", "http://evil.aA/evila", "http://..AA/evila", "http://-.AA/evila", "http://eVil.AA/evila", "http://EVIL.AA/evila", "http://ev4il.AA/evila", "http://e.AA/evila", "http://6.AA/evila", "www.evil.AA", "ftp://evil.AA", "https://evil.AA", "http://evil.AA", "www.evil.AA/evila", "ftp://evil.AA/evila", "https://evil.AA/evila", "http://evil.AA/evila"], "nonMatches": ["http://evil.AA/evil.", "http://evil.AA/evil,", "http://evil.AA/evil)", "http://evil.AA/evil(", "http://evil.AA/evil ", "http://evil.AA/:a", "http://evil.AA//a", "http://evil.AA/)a", "http://evil.AA/(a", "http://evil.AA/ev ila", "http://evil.AA/ a", "http://evil.AAAAA/evila", "http://evil.A/evila", "http://~.AA/evila", "http://?.AA/evila", "http://=.AA/evila", "http://;.AA/evila", "http://:.AA/evila", "http:///.AA/evila", "http://,.AA/evila", "http://+.AA/evila", "http://).AA/evila", "http://(.AA/evila", "http://&.AA/evila", "http://%.AA/evila", "http://$.AA/evila", "http://#.AA/evila", "http://ev_il.AA/evila", "http://ev il.AA/evila", "http:// .AA/evila", "http://_.AA/evila", "http://.AA/evila"]}, {"regex": "^(?<1>.*[\\\\/])(?<2>.+)\\.(?<3>.+)?$|^(?<1>.*[\\\\/])(?<2>.+)$|^(?<2>.+)\\.(?<3>.+)?$|^(?<2>.+)$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<1"}, "matches": []}, {"regex": "^([\\w\\s\\W]+[\\w\\W]?)\\s([\\d\\-\\\\\\/\\w]*)?", "exceptionStackTrace": null, "matches": ["evil; evilevil", "evil; \\", "evil; /", "evil; -", "evil; eVil", "evil; EVIL", "evil; ev_il", "evil; ev il", "evil; ev4il", "evil; e", "evil;  ", "evil; 6", "evil; _", "evil; ", "evil;; evil", "evil evil", "evila evil", "evil_ evil", "evil\\ evil", "evilA evil", "evil0 evil", "evil/ evil", "evil- evil", "evil  evil", "eVil; evil", "EVIL; evil", "ev_il; evil", "ev il; evil", "ev4il; evil", "e; evil", " ; evil", "6; evil", "_; evil", "; evil", "evil ", "evil; evil"], "nonMatches": []}, {"regex": "(?<prefix>[\\d]{3})[\\s+\\/\\\\\\-]+(?<number>[\\d\\-\\s]+)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<p"}, "matches": []}, {"regex": "^(~?/|[a-zA-Z]:[\\\\/]).+", "exceptionStackTrace": null, "matches": ["A:\\evil", "a:/evil", "~/~", "~/\\", "~/:", "~//", "~/eVil", "~/EVIL", "~/ev_il", "~/ev il", "~/ev4il", "~/e", "~/ ", "~/6", "~/_", "/evil", "A:/evil", "~/evil"], "nonMatches": ["~/", "~~/evil"]}, {"regex": "(?=^.{1,160}$)^(?:(?<Workspace>(?<Root>(?:(?<Drive>[a-zA-Z]\\:)|(?<Server>\\\\{2}[a-zA-Z]\\w*)))(?<DirectoryTree>(?:\\\\(?<Directory>(?:(?![\\w\\.]*\\.(?:gdb|mdb|sde|mdf))[^\\\\/:*?<>&quot;| .]+[^\\\\/:*?<>&quot;|]*[^\\\\/:*?<>&quot;| .]+)))*)(?:\\\\(?<Geodatabase>(?<GDBName>[a-zA-Z]\\w*)(?<Extension>\\.(?:gdb|mdb|sde|mdf))))?)\\\\?(?<FeatureDataset>[a-zA-Z]\\w*)?(?:\\\\(?<BaseName>[a-zA-Z]\\w*(?:\\.shp)?)(?<!.+\\k<Extension>.+\\.shp|(?<!.+\\k<Extension>.+)(?<!.+\\.shp))))$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<W"}, "matches": []}, {"regex": "&quot;^([a-z0-9,!#\\$%&&#39;\\*\\+/=\\?\\^_`\\{\\|}~-]+(\\.[a-z0-9,!#\\$%&&#39;\\*\\+/=\\?\\^_`\\{\\|}~-]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*\\.([a-z]{2,})){1}(;[a-z0-9,!#\\$%&&#39;\\*\\+/=\\?\\^_`\\{\\|}~-]+(\\.[a-z0-9,!#\\$%&&#39;\\*\\+/=\\?\\^_`\\{\\|}~-]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*\\.([a-z]{2,}))*$&quot;", "exceptionStackTrace": null, "matches": [], "nonMatches": ["&quot;evil.evil@evil.evil.aa;evil.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil.evil.a&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil.evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil.~.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil.}.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil.|.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil.{.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil.`.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil.^.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil.@.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil.?.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil.=.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil.;.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil./.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil...aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil.-.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil.,.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil.+.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil.*.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil.&.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil.%.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil.$.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil.#.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil.!.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil.eVil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil.EVIL.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil.ev_il.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil.ev il.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil.ev4il.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil.e.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil. .aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil.6.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil._.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil..aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@~.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@}.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@|.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@{.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@`.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@^.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@@.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@?.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@=.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@;.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@/.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@..evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@-.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@,.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@+.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@*.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@&.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@%.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@$.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@#.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@!.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@eVil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@EVIL.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@ev_il.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@ev il.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@ev4il.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@e.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@ .evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@6.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@_.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.~@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.}@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.|@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.{@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.`@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.^@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.@@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.?@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.=@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.;@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil./@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil..@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.-@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.,@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.+@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.*@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.&@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.%@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.$@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.#@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.!@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.eVil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.EVIL@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.ev_il@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.ev il@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.ev4il@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.e@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil. @evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.6@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil._@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;~.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;}.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;|.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;{.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;`.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;^.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;@.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;?.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;=.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;;.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;/.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;..evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;-.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;,.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;+.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;*.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;&.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;%.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;$.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;#.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;!.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;eVil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;EVIL.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;ev_il.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;ev il.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;ev4il.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;e.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa; .evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;6.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;_.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.aaevil.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.a;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.~.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.}.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.|.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.{.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.`.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.^.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.@.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.?.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.=.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.;.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil./.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil...aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.-.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.,.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.+.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.*.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.&.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.%.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.$.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.#.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.!.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.eVil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.EVIL.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.ev_il.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.ev il.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.ev4il.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.e.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil. .aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil.6.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil._.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@evil..aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@~.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@}.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@|.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@{.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@`.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@^.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@@.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@?.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@=.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@;.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@/.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@..evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@-.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@,.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@+.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@*.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@&.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@%.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@$.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@#.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@!.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@eVil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@EVIL.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@ev_il.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@ev il.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@ev4il.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@e.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@ .evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@6.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@_.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil@.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.evil.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.~@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.}@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.|@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.{@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.`@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.^@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.@@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.?@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.=@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.;@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil./@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil..@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.-@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.,@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.+@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.*@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.&@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.%@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.$@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.#@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.!@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.eVil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.EVIL@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.ev_il@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.ev il@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.ev4il@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.e@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil. @evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.6@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil._@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil.@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;~.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;}.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;|.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;{.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;`.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;^.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;@.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;?.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;=.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;;.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;/.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;..evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;-.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;,.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;+.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;*.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;&.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;%.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;$.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;#.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;!.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;eVil.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;EVIL.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;ev_il.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;ev il.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;ev4il.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;e.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot; .evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;6.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;_.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;", "&quot;evil@evil.aa&quot;", "&quot;evil.evil@evil.evil.aa;evil.evil@evil.evil.aa&quot;"]}, {"regex": "(^\\d*\\.?\\d*[1-9]+\\d*$)|(^[1-9]+\\d*\\.\\d*$)", "exceptionStackTrace": null, "matches": ["10.00", "10.", "100.0", "1.0", "110.0", "0.0100", "0.01", "0.0110", "0.0010", "0.10", "0010", "00.010", ".010", "1.", "1", "10.0", "0.010"], "nonMatches": ["0.0", "00.0", "0.00", "0.000", "0..010"]}, {"regex": "(^-\\d*\\.?\\d*[1-9]+\\d*$)|(^-[1-9]+\\d*\\.\\d*$)", "exceptionStackTrace": null, "matches": ["-10.00", "-10.", "-100.0", "-1.0", "-110.0", "-0.0100", "-0.01", "-0.0110", "-0.0010", "-0.10", "-0010", "-00.010", "-.010", "-1.", "-1", "-10.0", "-0.010"], "nonMatches": ["-0.0", "-00.0", "-0.00", "-0.000", "-0..010"]}, {"regex": "^(?=.*[1-9].*$)\\d{0,7}(?:\\.\\d{0,9})?$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["0.0.0", "0", "0.0000000000", "0.000000000", "0.", "00000000.0", "0000000.0", ".0", "", "0.0"]}, {"regex": "^([0-1]?[0-9]|[2][0-3]):([0-5][0-9]):([0-5][0-9])$", "exceptionStackTrace": null, "matches": ["0:00:00", "20:00:00", "00:00:00"], "nonMatches": ["24:00:00", "00:00:60", "00:60:00", "000:00:00"]}, {"regex": "\\d+(,\\d{1,2})?", "exceptionStackTrace": null, "matches": ["0,0,0", "0,000", "0,00", "0,", "00,0", ",0", "0", "0,0"], "nonMatches": []}, {"regex": "^[0-9]+([\\,|\\.]{0,1}[0-9]{2}){0,1}$", "exceptionStackTrace": null, "matches": ["000", "0|00", "0,00", "00.00", "0", "0.00"], "nonMatches": ["0.00.00", "0.000", "0.0", "0..00", ".00"]}, {"regex": "^((A[ABEHKLMPRSTWXYZ])|(B[ABEHKLMT])|(C[ABEHKLR])|(E[ABEHKLMPRSTWXYZ])|(GY)|(H[ABEHKLMPRSTWXYZ])|(J[ABCEGHJKLMNPRSTWXYZ])|(K[ABEHKLMPRSTWXYZ])|(L[ABEHKLMPRSTWXYZ])|(M[AWX])|(N[ABEHLMPRSWXYZ])|(O[ABEHKLMPRSX])|(P[ABCEGHJLMNPRSTWXY])|(R[ABEHKMPRSTWXYZ])|(S[ABCGHJKLMNPRSTWXYZ])|(T[ABEHKLMPRSTWXYZ])|(W[ABEKLMP])|(Y[ABEHKLMPRSTWXYZ])|(Z[ABEHKLMPRSTWXY]))\\d{6}([A-D]|\\s)$", "exceptionStackTrace": null, "matches": ["ZX000000A", "ZW000000A", "ZT000000A", "ZS000000A", "ZR000000A", "ZP000000A", "ZM000000A", "ZL000000A", "ZK000000A", "ZH000000A", "ZE000000A", "ZB000000A", "ZA000000A", "YY000000A", "YX000000A", "YW000000A", "YT000000A", "YS000000A", "YR000000A", "YP000000A", "YM000000A", "YL000000A", "YK000000A", "YH000000A", "YE000000A", "YB000000A", "YA000000A", "WM000000A", "WL000000A", "WK000000A", "WE000000A", "WB000000A", "WA000000A", "TY000000A", "TX000000A", "TW000000A", "TT000000A", "TS000000A", "TR000000A", "TP000000A", "TM000000A", "TL000000A", "TK000000A", "TH000000A", "TE000000A", "TB000000A", "TA000000A", "SY000000A", "SX000000A", "SW000000A", "ST000000A", "SS000000A", "SR000000A", "SP000000A", "SN000000A", "SM000000A", "SL000000A", "SK000000A", "SJ000000A", "SH000000A", "SG000000A", "SC000000A", "SB000000A", "SA000000A", "RY000000A", "RX000000A", "RW000000A", "RT000000A", "RS000000A", "RR000000A", "RP000000A", "RM000000A", "RK000000A", "RH000000A", "RE000000A", "RB000000A", "RA000000A", "PX000000A", "PW000000A", "PT000000A", "PS000000A", "PR000000A", "PP000000A", "PN000000A", "PM000000A", "PL000000A", "PJ000000A", "PH000000A", "PG000000A", "PE000000A", "PC000000A", "PB000000A", "PA000000A", "OS000000A", "OR000000A", "OP000000A", "OM000000A", "OL000000A", "OK000000A", "OH000000A", "OE000000A", "OB000000A", "OA000000A", "NY000000A", "NX000000A", "NW000000A", "NS000000A", "NR000000A", "NP000000A", "NM000000A", "NL000000A", "NH000000A", "NE000000A", "NB000000A", "NA000000A", "MW000000A", "MA000000A", "LY000000A", "LX000000A", "LW000000A", "LT000000A", "LS000000A", "LR000000A", "LP000000A", "LM000000A", "LL000000A", "LK000000A", "LH000000A", "LE000000A", "LB000000A", "LA000000A", "KY000000A", "KX000000A", "KW000000A", "KT000000A", "KS000000A", "KR000000A", "KP000000A", "KM000000A", "KL000000A", "KK000000A", "KH000000A", "KE000000A", "KB000000A", "KA000000A", "JY000000A", "JX000000A", "JW000000A", "JT000000A", "JS000000A", "JR000000A", "JP000000A", "JN000000A", "JM000000A", "JL000000A", "JK000000A", "JJ000000A", "JH000000A", "JG000000A", "JE000000A", "JC000000A", "JB000000A", "JA000000A", "HY000000A", "HX000000A", "HW000000A", "HT000000A", "HS000000A", "HR000000A", "HP000000A", "HM000000A", "HL000000A", "HK000000A", "HH000000A", "HE000000A", "HB000000A", "HA000000A", "EY000000A", "EX000000A", "EW000000A", "ET000000A", "ES000000A", "ER000000A", "EP000000A", "EM000000A", "EL000000A", "EK000000A", "EH000000A", "EE000000A", "EB000000A", "EA000000A", "CL000000A", "CK000000A", "CH000000A", "CE000000A", "CB000000A", "CA000000A", "BM000000A", "BL000000A", "BK000000A", "BH000000A", "BE000000A", "BB000000A", "BA000000A", "AY000000A", "AX000000A", "AW000000A", "AT000000A", "AS000000A", "AR000000A", "AP000000A", "AM000000A", "AL000000A", "AK000000A", "AH000000A", "AE000000A", "AB000000A", "AA000000A", "ZY000000A", "YZ000000A", "WP000000A", "TZ000000A", "SZ000000A", "RZ000000A", "PY000000A", "OX000000A", "NZ000000A", "MX000000A", "LZ000000A", "KZ000000A", "JZ000000A", "HZ000000A", "GY000000A", "EZ000000A", "CR000000A", "BT000000A", "AZ000000 ", "AZ000000A"], "nonMatches": ["ZC000000A", "YC000000A", "WC000000A", "TC000000A", "SD000000A", "RC000000A", "PD000000A", "OC000000A", "NC000000A", "MB000000A", "LC000000A", "KC000000A", "JD000000A", "HC000000A", "EC000000A", "CC000000A", "BC000000A", "AZ000000E", "AZ0000000A", "AZ00000A", "AC000000A"]}, {"regex": "^[A-Z1-9]{5}-[A-Z1-9]{5}-[A-Z1-9]{5}-[A-Z1-9]{5}-[A-Z1-9]{5}$", "exceptionStackTrace": null, "matches": ["11111-11111-11111-11111-A1111", "11111-11111-11111-A1111-11111", "11111-11111-A1111-11111-11111", "11111-A1111-11111-11111-11111", "A1111-11111-11111-11111-11111", "11111-11111-11111-11111-11111"], "nonMatches": ["11111-11111-11111-11111-111111", "11111-11111-11111-11111-1111", "11111-11111-11111-11111-01111", "11111-11111-11111-111111-11111", "11111-11111-11111-1111-11111", "11111-11111-11111-01111-11111", "11111-11111-111111-11111-11111", "11111-11111-1111-11111-11111", "11111-11111-01111-11111-11111", "11111-111111-11111-11111-11111", "11111-1111-11111-11111-11111", "11111-01111-11111-11111-11111", "111111-11111-11111-11111-11111", "1111-11111-11111-11111-11111", "01111-11111-11111-11111-11111"]}, {"regex": "^[A-Z]{3}\\d{8}$", "exceptionStackTrace": null, "matches": ["AAA00000000"], "nonMatches": ["AAA000000000", "AAA0000000", "AAAA00000000", "AA00000000"]}, {"regex": "^(ht|f)tp((?<=http)s)?://((?<=http://)www|(?<=https://)www|(?<=ftp://)ftp)\\.(([a-z][0-9])|([0-9][a-z])|([a-z0-9][a-z0-9\\-]{1,2}[a-z0-9])|([a-z0-9][a-z0-9\\-](([a-z0-9\\-][a-z0-9])|([a-z0-9][a-z0-9\\-]))[a-z0-9\\-]*[a-z0-9]))\\.(co|me|org|ltd|plc|net|sch|ac|mod|nhs|police|gov)\\.uk(:\\d+)?\\/?$", "exceptionStackTrace": null, "matches": ["https://www.0-0aevil0.co.uk:0/", "https://www.0-a-evil0.co.uk:0/", "https://www.0--0evila.co.uk:0/", "https://www.0--0-0.co.uk:0/", "https://www.0--0ev4il0.co.uk:0/", "https://www.0--0e0.co.uk:0/", "https://www.0--060.co.uk:0/", "https://www.0--00.co.uk:0/", "https://www.0--aevil0.co.uk:0/", "https://www.0-a0evil0.co.uk:0/", "https://www.0-00evil0.co.uk:0/", "https://www.0a-0evil0.co.uk:0/", "https://www.00-0evil0.co.uk:0/", "https://www.a--0evil0.co.uk:0/", "https://www.0-a.co.uk:0/", "https://www.0--0.co.uk:0/", "https://www.0a0.co.uk:0/", "https://www.000.co.uk:0/", "https://www.a-0.co.uk:0/", "https://www.a0.co.uk:0", "https://www.a0.co.uk/", "https://www.a0.co.uk:00/", "http://www.a0.co.uk:0/", "http://www.0-0-0.co.uk", "http://www.0--00.co.uk", "http://www.0-0.co.uk", "http://www.0a.co.uk", "http://www.a0.gov.uk", "http://www.a0.police.uk", "http://www.a0.nhs.uk", "http://www.a0.mod.uk", "http://www.a0.ac.uk", "http://www.a0.sch.uk", "http://www.a0.net.uk", "http://www.a0.plc.uk", "http://www.a0.ltd.uk", "http://www.a0.org.uk", "http://www.a0.me.uk", "http://www.a0.co.uk", "https://www.0-0-evil0.co.uk:0/", "https://www.0--0evil0.co.uk:0/", "https://www.0-0.co.uk:0/", "https://www.0a.co.uk:0/", "https://www.a0.gov.uk:0/", "https://www.a0.police.uk:0/", "https://www.a0.nhs.uk:0/", "https://www.a0.mod.uk:0/", "https://www.a0.ac.uk:0/", "https://www.a0.sch.uk:0/", "https://www.a0.net.uk:0/", "https://www.a0.plc.uk:0/", "https://www.a0.ltd.uk:0/", "https://www.a0.org.uk:0/", "https://www.a0.me.uk:0/", "https://www.a0.co.uk:0/"], "nonMatches": ["https://www.0--0:0.co.uk:0/", "https://www.0--0/0.co.uk:0/", "https://www.0--0.0.co.uk:0/", "https://www.0--0eVil0.co.uk:0/", "https://www.0--0EVIL0.co.uk:0/", "https://www.0--0ev_il0.co.uk:0/", "https://www.0--0ev il0.co.uk:0/", "https://www.0--0 0.co.uk:0/", "https://www.0--0_0.co.uk:0/", "https://www.0---0.co.uk:0/", "https://www.00.co.uk:0/", "https://www.a0.co.uk:0//", "https://www.a0.co.uk:0:0/", "https://www.a0.co.uk:/", "httpss://www.a0.co.uk:0/", "ftp://www.a0.co.uk", "http://ftp.a0.co.uk", "ftps://www.a0.co.uk:0/", "https://ftp.a0.co.uk:0/"]}, {"regex": "^(([a-z][0-9])|([0-9][a-z])|([a-z0-9][a-z0-9\\-]{1,2}[a-z0-9])|([a-z0-9][a-z0-9\\-](([a-z0-9\\-][a-z0-9])|([a-z0-9][a-z0-9\\-]))[a-z0-9\\-]*[a-z0-9]))\\.(co|me|org|ltd|plc|net|sch|ac|mod|nhs|police|gov)\\.uk$", "exceptionStackTrace": null, "matches": ["0-0aevil0.co.uk", "0-a-evil0.co.uk", "0--0evila.co.uk", "0--0-0.co.uk", "0--0ev4il0.co.uk", "0--0e0.co.uk", "0--060.co.uk", "0--aevil0.co.uk", "0-a0evil0.co.uk", "0-00evil0.co.uk", "0a-0evil0.co.uk", "00-0evil0.co.uk", "a--0evil0.co.uk", "0-a.co.uk", "0--0.co.uk", "0a0.co.uk", "000.co.uk", "a-0.co.uk", "0-0-0.co.uk", "0--00.co.uk", "0-0-evil0.co.uk", "0--0evil0.co.uk", "0-0.co.uk", "0a.co.uk", "a0.gov.uk", "a0.police.uk", "a0.nhs.uk", "a0.mod.uk", "a0.ac.uk", "a0.sch.uk", "a0.net.uk", "a0.plc.uk", "a0.ltd.uk", "a0.org.uk", "a0.me.uk", "a0.co.uk"], "nonMatches": ["0--0.0.co.uk", "0--0eVil0.co.uk", "0--0EVIL0.co.uk", "0--0ev_il0.co.uk", "0--0ev il0.co.uk", "0--0 0.co.uk", "0--0_0.co.uk", "0---0.co.uk", "00.co.uk"]}, {"regex": "^(ht|f)tp((?<=http)s)?://((?<=http://)www|(?<=https://)www|(?<=ftp://)ftp)\\.(([a-z][0-9])|([0-9][a-z])|([a-z0-9][a-z0-9\\-]{1,2}[a-z0-9])|([a-z0-9][a-z0-9\\-](([a-z0-9\\-][a-z0-9])|([a-z0-9][a-z0-9\\-]))[a-z0-9\\-]*[a-z0-9]))\\.(co|me|org|ltd|plc|net|sch|ac|mod|nhs|police|gov)\\.uk$", "exceptionStackTrace": null, "matches": ["https://www.0-0aevil0.co.uk", "https://www.0-a-evil0.co.uk", "https://www.0--0evila.co.uk", "https://www.0--0-0.co.uk", "https://www.0--0ev4il0.co.uk", "https://www.0--0e0.co.uk", "https://www.0--060.co.uk", "https://www.0--00.co.uk", "https://www.0--aevil0.co.uk", "https://www.0-a0evil0.co.uk", "https://www.0-00evil0.co.uk", "https://www.0a-0evil0.co.uk", "https://www.00-0evil0.co.uk", "https://www.a--0evil0.co.uk", "https://www.0-a.co.uk", "https://www.0--0.co.uk", "https://www.0a0.co.uk", "https://www.000.co.uk", "https://www.a-0.co.uk", "http://www.0-0-0.co.uk", "http://www.0--00.co.uk", "http://www.0-0.co.uk", "http://www.0a.co.uk", "http://www.a0.gov.uk", "http://www.a0.police.uk", "http://www.a0.nhs.uk", "http://www.a0.mod.uk", "http://www.a0.ac.uk", "http://www.a0.sch.uk", "http://www.a0.net.uk", "http://www.a0.plc.uk", "http://www.a0.ltd.uk", "http://www.a0.org.uk", "http://www.a0.me.uk", "http://www.a0.co.uk", "https://www.0-0-evil0.co.uk", "https://www.0--0evil0.co.uk", "https://www.0-0.co.uk", "https://www.0a.co.uk", "https://www.a0.gov.uk", "https://www.a0.police.uk", "https://www.a0.nhs.uk", "https://www.a0.mod.uk", "https://www.a0.ac.uk", "https://www.a0.sch.uk", "https://www.a0.net.uk", "https://www.a0.plc.uk", "https://www.a0.ltd.uk", "https://www.a0.org.uk", "https://www.a0.me.uk", "https://www.a0.co.uk"], "nonMatches": ["https://www.0--0:0.co.uk", "https://www.0--0/0.co.uk", "https://www.0--0.0.co.uk", "https://www.0--0eVil0.co.uk", "https://www.0--0EVIL0.co.uk", "https://www.0--0ev_il0.co.uk", "https://www.0--0ev il0.co.uk", "https://www.0--0 0.co.uk", "https://www.0--0_0.co.uk", "https://www.0---0.co.uk", "https://www.00.co.uk", "httpss://www.a0.co.uk", "ftp://www.a0.co.uk", "http://ftp.a0.co.uk", "ftps://www.a0.co.uk", "https://ftp.a0.co.uk"]}, {"regex": "^((A(((H[MX])|(M(P|SN))|(X((D[ACH])|(M[DS]))?)))?)|(K7(A)?)|(D(H[DLM])?))(\\d{3,4})[ABD-G][CHJK-NPQT-Y][Q-TV][1-4][B-E]$", "exceptionStackTrace": null, "matches": ["DHL000BQV1B", "DHD000BQV1B", "AXMD000BQV1B", "AX000BQV1B", "AXDC000BQV1B", "AXDA000BQV1B", "AHX000BQQ1B", "AHX000BTV1B", "AHX000BPV1B", "AHX000BKV1B", "AHX000BJV1B", "AHX000BHV1B", "AHX000BCV1B", "AHX000DQV1B", "AHX000AQV1B", "AHX0000BQV1B", "AHM000BQV1B", "D000BQV1B", "K7000BQV1B", "A000BQV1B", "DHM000BQV1B", "K7A000BQV1B", "AXMS000BQV1B", "AXDH000BQV1B", "AMSN000BQV1B", "AMP000BQV1B", "AHX000BQV1B"], "nonMatches": ["DHMHM000BQV1B", "DHA000BQV1B", "K7AA000BQV1B", "AXMA000BQV1B", "AXDHDH000BQV1B", "AXDB000BQV1B", "AHX000BQV1A", "AHX000BQV0B", "AHX000BQA1B", "AHX000BAV1B", "AHX000CQV1B", "AHX00000BQV1B", "AHX00BQV1B", "AHXHX000BQV1B", "AHA000BQV1B"]}, {"regex": "^([A-Z]{3}\\s?(\\d{3}|\\d{2}|d{1})\\s?[A-Z])|([A-Z]\\s?(\\d{3}|\\d{2}|\\d{1})\\s?[A-Z]{3})|(([A-HK-PRSVWY][A-HJ-PR-Y])\\s?([0][2-9]|[1-9][0-9])\\s?[A-HJ-PR-Z]{3})$", "exceptionStackTrace": null, "matches": ["YR 02 RRRR", "YR 02 JRR", "YR 02 IRR", "YR 02 ARR", "YR 02RRR", "YR 00 RRR", "YR02 RRR", "YJ 02 RRR", "YI 02 RRR", "YA 02 RRR", "WR 02 RRR", "VR 02 RRR", "SR 02 RRR", "RR 02 RRR", "KR 02 RRR", "IR 02 RRR", "AR 02 RRR", "A 000 AAAA", "A 000AAA", "A000 AAA", "AAA 000A", "AAA000 A", "YR10RRR", "YR02RRR", "A0AAA", "A00AAA", "A000AAA", "AAAdA", "AAA00A", "AAA000A", "YR 10 RRR", "YR 02 RRR", "A 0 AAA", "A 00 AAA", "A 000 AAA", "AAA d A", "AAA 00 A", "AAA 000 A"], "nonMatches": ["YR 02 RR", "YR 02  RRR", "YR  02 RRR", "A  AAA", "A 000 AA", "A 000  AAA", "A 0000 AAA", "A  000 AAA", "AAA dd A", "AAA  A", "AAA 0 A", "AAA 000  A", "AAA 0000 A", "AAA  000 A", "AAAA 000 A", "AA 000 A"]}, {"regex": "^([A-HK-PRSVWY][A-HJ-PR-Y])\\s?([0][2-9]|[1-9][0-9])\\s?[A-HJ-PR-Z]{3}$", "exceptionStackTrace": null, "matches": ["YR 02 JRR", "YR 02 ARR", "YR 02RRR", "YR02 RRR", "YJ 02 RRR", "YA 02 RRR", "WR 02 RRR", "VR 02 RRR", "SR 02 RRR", "RR 02 RRR", "KR 02 RRR", "AR 02 RRR", "YR10RRR", "YR02RRR", "YR 10 RRR", "YR 02 RRR"], "nonMatches": ["YR 02 RRRR", "YR 02 RR", "YR 02 IRR", "YR 02  RRR", "YR 00 RRR", "YR  02 RRR", "YI 02 RRR", "IR 02 RRR"]}, {"regex": "^([A-Z]{3}\\s?(\\d{3}|\\d{2}|d{1})\\s?[A-Z])|([A-Z]\\s?(\\d{3}|\\d{2}|\\d{1})\\s?[A-Z]{3})$", "exceptionStackTrace": null, "matches": ["A 000AAA", "A000 AAA", "AAA 000A", "AAA000 A", "A0AAA", "A00AAA", "A000AAA", "AAAdA", "AAA00A", "AAA000A", "A 0 AAA", "A 00 AAA", "A 000 AAA", "AAA d A", "AAA 00 A", "AAA 000 A"], "nonMatches": ["A  AAA", "A 000 AAAA", "A 000 AA", "A 000  AAA", "A 0000 AAA", "A  000 AAA", "AAA dd A", "AAA  A", "AAA 0 A", "AAA 000  A", "AAA 0000 A", "AAA  000 A", "AAAA 000 A", "AA 000 A"]}, {"regex": "^(\\+44\\s?7\\d{3}|\\(?07\\d{3}\\)?)\\s?\\d{3}\\s?\\d{3}$", "exceptionStackTrace": null, "matches": ["(07000 000 000", "07000) 000 000", "+44 7000 000000", "+44 7000000 000", "+447000 000 000", "07000000000", "+447000000000", "(07000) 000 000", "+44 7000 000 000"], "nonMatches": ["(07000)) 000 000", "(070000) 000 000", "(0700) 000 000", "((07000) 000 000", "+44 7000 000 0000", "+44 7000 000 00", "+44 7000 000  000", "+44 7000 0000 000", "+44 7000 00 000", "+44 7000  000 000", "+44 70000 000 000", "+44 700 000 000", "+44  7000 000 000"]}, {"regex": "^(((\\+44\\s?\\d{4}|\\(?0\\d{4}\\)?)\\s?\\d{3}\\s?\\d{3})|((\\+44\\s?\\d{3}|\\(?0\\d{3}\\)?)\\s?\\d{3}\\s?\\d{4})|((\\+44\\s?\\d{2}|\\(?0\\d{2}\\)?)\\s?\\d{4}\\s?\\d{4}))(\\s?\\#(\\d{4}|\\d{3}))?$", "exceptionStackTrace": null, "matches": ["(000 0000 0000 #0000", "000) 0000 0000 #0000", "+44 00 00000000 #0000", "+4400 0000 0000 #0000", "(0000 000 0000 #0000", "0000) 000 0000 #0000", "+44 000 0000000 #0000", "+44 000000 0000 #0000", "+44000 000 0000 #0000", "(00000 000 000 #0000", "00000) 000 000 #0000", "+44 0000 000 000", "+44 0000 000 000#0000", "+44 0000 000000 #0000", "+44 0000000 000 #0000", "+440000 000 000 #0000", "00000000000", "+440000000000", "(000) 0000 0000 #0000", "+44 00 0000 0000 #0000", "(0000) 000 0000 #0000", "+44 000 000 0000 #0000", "(00000) 000 000 #0000", "+44 0000 000 000 #000", "+44 0000 000 000 #0000"], "nonMatches": ["(000)) 0000 0000 #0000", "(0000) 0000 0000 #0000", "(00) 0000 0000 #0000", "((000) 0000 0000 #0000", "+44 00 0000 00000 #0000", "+44 00 0000 000 #0000", "+44 00 0000  0000 #0000", "+44 00 00000 0000 #0000", "+44 00  0000 0000 #0000", "+44 0 0000 0000 #0000", "+44  00 0000 0000 #0000", "(0000)) 000 0000 #0000", "(00000) 000 0000 #0000", "(000) 000 0000 #0000", "((0000) 000 0000 #0000", "+44 000 000 00000 #0000", "+44 000 000  0000 #0000", "+44 000 0000 0000 #0000", "+44 000 00 0000 #0000", "+44 000  000 0000 #0000", "+44 00 000 0000 #0000", "+44  000 000 0000 #0000", "(00000)) 000 000 #0000", "(000000) 000 000 #0000", "(0000) 000 000 #0000", "((00000) 000 000 #0000", "+44 0000 000 000 #00", "+44 0000 000 000 #0000 #0000", "+44 0000 000 000 #00000", "+44 0000 000 000  #0000", "+44 0000 000 0000 #0000", "+44 0000 000 00 #0000", "+44 0000 000  000 #0000", "+44 0000 0000 000 #0000", "+44 0000 00 000 #0000", "+44 0000  000 000 #0000", "+44 00000 000 000 #0000", "+44 000 000 000 #0000", "+44  0000 000 000 #0000"]}, {"regex": "^((\\(?0\\d{4}\\)?\\s?\\d{3}\\s?\\d{3})|(\\(?0\\d{3}\\)?\\s?\\d{3}\\s?\\d{4})|(\\(?0\\d{2}\\)?\\s?\\d{4}\\s?\\d{4}))(\\s?\\#(\\d{4}|\\d{3}))?$", "exceptionStackTrace": null, "matches": ["(000) 00000000 #0000", "(000)0000 0000 #0000", "(000 0000 0000 #0000", "000) 0000 0000 #0000", "(0000) 0000000 #0000", "(0000)000 0000 #0000", "(0000 000 0000 #0000", "0000) 000 0000 #0000", "(00000) 000 000", "(00000) 000 000#0000", "(00000) 000000 #0000", "(00000)000 000 #0000", "(00000 000 000 #0000", "00000) 000 000 #0000", "00000000000", "(000) 0000 0000 #0000", "(0000) 000 0000 #0000", "(00000) 000 000 #000", "(00000) 000 000 #0000"], "nonMatches": ["(000) 0000 00000 #0000", "(000) 0000 000 #0000", "(000) 0000  0000 #0000", "(000) 00000 0000 #0000", "(000)  0000 0000 #0000", "(000)) 0000 0000 #0000", "(00) 0000 0000 #0000", "((000) 0000 0000 #0000", "(0000) 000 00000 #0000", "(0000) 000  0000 #0000", "(0000) 0000 0000 #0000", "(0000) 00 0000 #0000", "(0000)  000 0000 #0000", "(0000)) 000 0000 #0000", "(000) 000 0000 #0000", "((0000) 000 0000 #0000", "(00000) 000 000 #00", "(00000) 000 000 #0000 #0000", "(00000) 000 000 #00000", "(00000) 000 000  #0000", "(00000) 000 0000 #0000", "(00000) 000 00 #0000", "(00000) 000  000 #0000", "(00000) 0000 000 #0000", "(00000) 00 000 #0000", "(00000)  000 000 #0000", "(00000)) 000 000 #0000", "(000000) 000 000 #0000", "(0000) 000 000 #0000", "((00000) 000 000 #0000"]}, {"regex": "[1-9][0-9]{3}(?!SS|SA|SD)[A-Z]{2}", "exceptionStackTrace": null, "matches": ["1000AAA", "1000AA"], "nonMatches": ["1000A", "10000AA", "100AA", "0000AA"]}, {"regex": "(?-i)(?=^.{8,}$)((?!.*\\s)(?=.*[A-Z])(?=.*[a-z]))((?=(.*\\d){1,})|(?=(.*\\W){1,}))^.*$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "missing :"}, "matches": []}, {"regex": "^(0[1-9]|1[012])[/](0[1-9]|[12][0-9]|3[01])[/][0-9]{4}(\\s((0[1-9]|1[012])\\:([0-5][0-9])((\\s)|(\\:([0-5][0-9])\\s))([AM|PM|]{2,2})))?$", "exceptionStackTrace": null, "matches": ["11/01/0000 01:00 ||", "10/01/0000 01:00 ||", "01/30/0000 01:00 ||", "01/10/0000 01:00 ||", "01/01/0000 11:00 ||", "01/01/0000 10:00 ||", "01/01/0000 01:00 P|", "01/01/0000 01:00 M|", "01/01/0000 01:00 A|", "12/01/0000", "01/31/0000", "01/20/0000", "01/01/0000", "12/01/0000 01:00 ||", "01/31/0000 01:00 ||", "01/20/0000 01:00 ||", "01/01/0000 12:00 ||", "01/01/0000 01:00:00 ||", "01/01/0000 01:00 ||"], "nonMatches": ["13/01/0000 01:00 ||", "01/32/0000 01:00 ||", "01/01/0000 13:00 ||", "01/01/0000 01:00:60 ||", "01/01/0000 01:00 || 01:00 ||", "01/01/0000 01:00 |||", "01/01/0000 01:00 |", "01/01/0000 01:00 B|", "01/01/0000 01:60 ||", "01/01/0000 00:00 ||", "01/01/00000 01:00 ||", "01/01/000 01:00 ||", "01/00/0000 01:00 ||", "00/01/0000 01:00 ||"]}, {"regex": "^(0?\\d|1[012])\\/([012]?\\d|3[01])\\/(\\d{2}|\\d{4})$", "exceptionStackTrace": null, "matches": ["11/20/00", "10/20/00", "00/0/00", "00/30/00", "00/10/00", "00/00/00", "0/20/00", "12/0/00", "0/31/00", "0/0/0000", "0/0/00", "12/20/00", "00/31/00", "00/20/0000", "00/20/00"], "nonMatches": ["13/20/00", "00/32/00", "00/20/00000", "00/20/000", "00/20/0", "00/220/00", "000/20/00"]}, {"regex": "regular", "exceptionStackTrace": null, "matches": ["regular"], "nonMatches": []}, {"regex": "<!--\\s*\\#\\s*include\\s+(file|virtual)\\s*=\\s*([&quot;&#39;])([^&quot;&#39;<>\\|\\b]+/)*([^&quot;&#39;<>/\\|\\b]+)\\2\\s*-->", "exceptionStackTrace": null, "matches": ["<!-- # include file = ;evil/evil;  -->", "<!-- # include file = ;evil/evil;-->", "<!-- # include file = ;evil/=; -->", "<!-- # include file = ;evil/-; -->", "<!-- # include file = ;evil/!; -->", "<!-- # include file = ;evil/eVil; -->", "<!-- # include file = ;evil/EVIL; -->", "<!-- # include file = ;evil/ev_il; -->", "<!-- # include file = ;evil/ev il; -->", "<!-- # include file = ;evil/ev4il; -->", "<!-- # include file = ;evil/e; -->", "<!-- # include file = ;evil/ ; -->", "<!-- # include file = ;evil/6; -->", "<!-- # include file = ;evil/_; -->", "<!-- # include file = ;evil/evil/evil; -->", "<!-- # include file = ;evil; -->", "<!-- # include file = ;=/evil; -->", "<!-- # include file = ;//evil; -->", "<!-- # include file = ;-/evil; -->", "<!-- # include file = ;!/evil; -->", "<!-- # include file = ;eVil/evil; -->", "<!-- # include file = ;EVIL/evil; -->", "<!-- # include file = ;ev_il/evil; -->", "<!-- # include file = ;ev il/evil; -->", "<!-- # include file = ;ev4il/evil; -->", "<!-- # include file = ;e/evil; -->", "<!-- # include file = ; /evil; -->", "<!-- # include file = ;6/evil; -->", "<!-- # include file = ;_/evil; -->", "<!-- # include file =  ;evil/evil; -->", "<!-- # include file =;evil/evil; -->", "<!-- # include file  = ;evil/evil; -->", "<!-- # include file= ;evil/evil; -->", "<!-- # include  file = ;evil/evil; -->", "<!-- #  include file = ;evil/evil; -->", "<!-- #include file = ;evil/evil; -->", "<!--  # include file = ;evil/evil; -->", "<!--# include file = ;evil/evil; -->", "<!--#include virtual=;evil;-->", "<!--#include file=;evil;-->", "<!-- # include virtual = ;evil/evil; -->", "<!-- # include file = ;evil/evil; -->"], "nonMatches": ["<!-- # include file = ;evil/|; -->", "<!-- # include file = ;evil/>; -->", "<!-- # include file = ;evil/<; -->", "<!-- # include file = ;evil/;; -->", "<!-- # include file = ;evil//; -->", "<!-- # include file = ;evil/&; -->", "<!-- # include file = ;evil/#; -->", "<!-- # include file = ;evil/; -->", "<!-- # include file = ;|/evil; -->", "<!-- # include file = ;>/evil; -->", "<!-- # include file = ;</evil; -->", "<!-- # include file = ;;/evil; -->", "<!-- # include file = ;&/evil; -->", "<!-- # include file = ;#/evil; -->", "<!-- # include file = ;/evil; -->", "<!-- # include file = uevil/evil; -->", "<!-- # include file = tevil/evil; -->", "<!-- # include file = qevil/evil; -->", "<!-- # include file = oevil/evil; -->", "<!-- # include file = aevil/evil; -->", "<!-- # include file = 9evil/evil; -->", "<!-- # include file = 3evil/evil; -->", "<!-- # include file = 0evil/evil; -->", "<!-- # include file = &evil/evil; -->", "<!-- # include file = #evil/evil; -->", "<!-- # includefile = ;evil/evil; -->"]}, {"regex": "^((0[1-9])|(1[0-2]))\\/(\\d{2})$", "exceptionStackTrace": null, "matches": ["10/00", "01/00"], "nonMatches": ["13/00", "01/000", "01/0", "00/00"]}, {"regex": "^(20|21|22|23|[01]\\d|\\d)(([:.][0-5]\\d){1,2})$", "exceptionStackTrace": null, "matches": ["00.00", "20.00.00", "20:00", "0.00", "10.00", "23.00", "22.00", "21.00", "20.00"], "nonMatches": ["20.00.00.00", "20", "20.60"]}, {"regex": "((^\\d{5}$)|(^\\d{8}$))|(^\\d{5}-\\d{3}$)", "exceptionStackTrace": null, "matches": ["00000-000", "00000000", "00000"], "nonMatches": ["00000-0000", "00000-00", "000000-000", "0000-000", "000000000", "0000000", "000000", "0000"]}, {"regex": "^(\\d{2,3}|\\(\\d{2,3}\\))?[ ]?\\d{3,4}[-]?\\d{3,4}$", "exceptionStackTrace": null, "matches": ["(000) 000-000", "00 000-0000", "00 000000", "00 0000-000", "00000-000", " 000-000", "000 000-000", "000000", "(00) 000-000", "00 000-000"], "nonMatches": ["(0000) 000-000", "(0) 000-000", "00 000-00000", "00 000-00", "00 000--000", "00 00000-000", "00 00-000", "00  000-000", "0000 000-000", "0 000-000"]}, {"regex": "^(\\d{2,3}|\\(\\d{2,3}\\))[ ]?\\d{3,4}[-]?\\d{3,4}$", "exceptionStackTrace": null, "matches": ["(000) 000-000", "00 000-0000", "00 000000", "00 0000-000", "00000-000", "000 000-000", "(00)000000", "00000000", "(00) 000-000", "00 000-000"], "nonMatches": ["(0000) 000-000", "(0) 000-000", "00 000-00000", "00 000-00", "00 000--000", "00 00000-000", "00 00-000", "00  000-000", "0000 000-000", "0 000-000"]}, {"regex": "^((\\+|00)[1-9]{1,3})?(\\-| {0,1})?(([\\d]{0,3})(\\-| {0,1})?([\\d]{5,11})){1}$", "exceptionStackTrace": null, "matches": ["+1-0-00000000000", "+1-000000", "+1-000-00000", "+1--00000", "+10-00000", "-0-00000", "+111-0-00000", "00000", "001-0-00000", "+1 0-00000", "+1-0 00000", "+1-0-00000"], "nonMatches": ["+1  0-00000", "+1-0  00000", "+1-0-000000-00000", "+1-", "+1-0-000000000000", "+1-0-0000", "+1-0--00000", "+1-0000-00000", "+1--0-00000", "+1+1-0-00000", "+1111-0-00000", "+-0-00000", "+0-0-00000"]}, {"regex": "^\\d{2}[\\-\\/]\\d{2}[\\-\\/]\\d{4}$", "exceptionStackTrace": null, "matches": ["00/00-0000", "00-00/0000", "00/00/0000"], "nonMatches": ["00/00/00000", "00/00/000", "00/000/0000", "00/0/0000", "000/00/0000", "0/00/0000"]}, {"regex": "(antifraud\\.ref\\.num)[0-9]*(@citibank\\.com)", "exceptionStackTrace": null, "matches": ["antifraud.ref.num00@citibank.com", "antifraud.ref.num@citibank.com", "antifraud.ref.num0@citibank.com"], "nonMatches": []}, {"regex": "(^.+\\|+[A-Za-z])", "exceptionStackTrace": null, "matches": ["evil|A", "evil||a", "||a", "eVil|a", "EVIL|a", "ev_il|a", "ev il|a", "ev4il|a", "e|a", " |a", "6|a", "_|a", "evil|a"], "nonMatches": ["evila", "|a"]}, {"regex": "(?i)(pharmacy)|((p(.{1,3})?h(.{1,3})?a(.{1,3})?r(.{1,3)?m(.{1,3})?a(.{1,3})?c(.{1,3})?y))", "exceptionStackTrace": null, "matches": ["pahaaara{1,3maaacaay", "pahaaara{1,3maaacaaay", "pahaaara{1,3maaacy", "pahaaara{1,3maaac{y", "pahaaara{1,3maaacAy", "pahaaara{1,3maaac0y", "pahaaara{1,3maaac,y", "pahaaara{1,3maaac y", "pahaaara{1,3maa{cay", "pahaaara{1,3maaAcay", "pahaaara{1,3maa0cay", "pahaaara{1,3maa,cay", "pahaaara{1,3maa cay", "pahaaara{1,3maaaacay", "pahaaara{1,3maaaaaacay", "pahaaara{1,3maaaaacay", "pahaaara{1,3maacay", "pahaaara{1,3m{aacay", "pahaaara{1,3mAaacay", "pahaaara{1,3m0aacay", "pahaaara{1,3m,aacay", "pahaaara{1,3m aacay", "pahaaarmaaacay", "pahaaar{{1,3maaacay", "pahaaarA{1,3maaacay", "pahaaar0{1,3maaacay", "pahaaar,{1,3maaacay", "pahaaar {1,3maaacay", "pahaa{ra{1,3maaacay", "pahaaAra{1,3maaacay", "pahaa0ra{1,3maaacay", "pahaa,ra{1,3maaacay", "pahaa ra{1,3maaacay", "pahaaaara{1,3maaacay", "pahaaaaaara{1,3maaacay", "pahaaaaara{1,3maaacay", "pahaara{1,3maaacay", "pah{aara{1,3maaacay", "pahAaara{1,3maaacay", "pah0aara{1,3maaacay", "pah,aara{1,3maaacay", "pah aara{1,3maaacay", "paahaaara{1,3maaacay", "paaahaaara{1,3maaacay", "phaaara{1,3maaacay", "p{haaara{1,3maaacay", "pAhaaara{1,3maaacay", "p0haaara{1,3maaacay", "p,haaara{1,3maaacay", "p haaara{1,3maaacay", "pahaaara{1,3maaacay", "pharmacy"], "nonMatches": ["pahaaara{1,3maaacaaaay", "pahaaara{1,3a{1,3maaacay", "paaaahaaara{1,3maaacay"]}, {"regex": "^[0-2]?[1-9]{1}$|^3{1}[01]{1}$", "exceptionStackTrace": null, "matches": ["3", "30", "1", "31", "01"], "nonMatches": ["311", "32", "331", "011", "0", "00", "001"]}, {"regex": "href=[\\&quot;\\&#39;]?((?:[^&gt;]|[^\\s]|[^&quot;]|[^&#39;])+)[\\&quot;\\&#39;]?", "exceptionStackTrace": null, "matches": ["href=;9;", "href=;3;", "href=;u;", "href=;q;", "href=;o;", "href=;a;;", "href=;a", "href=;au", "href=;at", "href=;aq", "href=;ao", "href=;aa", "href=;a9", "href=;a3", "href=;a0", "href=;a&", "href=;a#", "href=;aa;", "href=;;", "href=;t;", "href=;g;", "href=;A;", "href=;=;", "href=;;;", "href=;0;", "href=;&;", "href=;#;", "href=; ;", "href=;;a;", "href=a;", "href=ua;", "href=ta;", "href=qa;", "href=oa;", "href=aa;", "href=9a;", "href=3a;", "href=0a;", "href=&a;", "href=#a;", "href=a", "href=;a;"], "nonMatches": []}, {"regex": "^(?=.*\\S)[-!#$%&\\&#39;*+\\/=?^_`{|}~,.a-z0-9]{1,64}[@]{1}[-.a-z&#229;&#228;&#246;0-9]{4,253}$", "exceptionStackTrace": null, "matches": [".@;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;", ".@a;;;", ".@9;;;", ".@8;;;", ".@6;;;", ".@4;;;", ".@2;;;", ".@0;;;", ".@.;;;", ".@-;;;", ".@&;;;", ".@#;;;", "................................................................@;;;;", "~@;;;;", "}@;;;;", "|@;;;;", "{@;;;;", "a@;;;;", "`@;;;;", "_@;;;;", "^@;;;;", "?@;;;;", "=@;;;;", ";@;;;;", "9@;;;;", "3@;;;;", "0@;;;;", "/@;;;;", "-@;;;;", ",@;;;;", "+@;;;;", "*@;;;;", "&@;;;;", "%@;;;;", "$@;;;;", "#@;;;;", "!@;;;;", ".@;;;;"], "nonMatches": [".@;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;", ".@;;;", ".@@;;;;", ".;;;;", ".................................................................@;;;;", "@;;;;"]}, {"regex": "^\\S{1}(?:.){4,}\\S$", "exceptionStackTrace": null, "matches": ["aaaaa_", "aaaaaA", "aaaaa0", "a_aaaa", "aAaaaa", "a0aaaa", "a aaaa", "aaaaaaa", "_aaaaa", "Aaaaaa", "0aaaaa", "aaaaaa"], "nonMatches": ["aaaaa ", "aaaaa", " aaaaa"]}, {"regex": "\\b(((20)((0[0-9])|(1[0-1])))|(([1][^0-8])?\\d{2}))((0[1-9])|1[0-2])((0[1-9])|(2[0-9])|(3[01]))[-+]?\\d{4}[,.]?\\b", "exceptionStackTrace": null, "matches": ["000101+0000.", "1A000101+0000.", "19000101+0000.", "1.000101+0000.", "1-000101+0000.", "1,000101+0000.", "1+000101+0000.", "1 000101+0000.", "20000130+0000.", "20000101+0000..", "20000101+0000", "20000101+0000,", "200001010000.", "20000101-0000.", "0001010000", "201001010000", "200010010000", "200001310000", "200001200000", "200001010000", "1a000101+0000.", "20100101+0000.", "20001001+0000.", "20000131+0000.", "20000120+0000.", "20000101+0000."], "nonMatches": ["1a0000101+0000.", "1a00101+0000.", "1a1a000101+0000.", "10000101+0000.", "20120101+0000.", "20001301+0000.", "20000132+0000.", "20000101+00000.", "20000101+000.", "20000101++0000.", "20000100+0000.", "20000001+0000."]}, {"regex": "^(((20)((0[0-9])|(1[0-1])))|(([1][^0-8])?\\d{2}))((0[1-9])|1[0-2])((0[1-9])|(2[0-9])|(3[01]))[-]?\\d{4}$", "exceptionStackTrace": null, "matches": ["000101-0000", "1A000101-0000", "19000101-0000", "1-000101-0000", "1 000101-0000", "20000130-0000", "0001010000", "201001010000", "200010010000", "200001310000", "200001200000", "200001010000", "1a000101-0000", "20100101-0000", "20001001-0000", "20000131-0000", "20000120-0000", "20000101-0000"], "nonMatches": ["1a0000101-0000", "1a00101-0000", "1a1a000101-0000", "10000101-0000", "20120101-0000", "20001301-0000", "20000132-0000", "20000101-00000", "20000101-000", "20000101--0000", "20000100-0000", "20000001-0000"]}, {"regex": "^(((2|8|9)\\d{2})|((02|08|09)\\d{2})|([1-9]\\d{3}))$", "exceptionStackTrace": null, "matches": ["2000", "1000", "0900", "0800", "0200", "900", "800", "200"], "nonMatches": ["10000", "100", "0000", "02000", "020", "20"]}, {"regex": "^\\d(\\d)?(\\d)?$", "exceptionStackTrace": null, "matches": ["00", "0", "000"], "nonMatches": ["0000"]}, {"regex": "(^\\*\\.[a-zA-Z][a-zA-Z][a-zA-Z]$)|(^\\*\\.\\*$)", "exceptionStackTrace": null, "matches": ["*.AAa", "*.AaA", "*.aAA", "*.*", "*.AAA"], "nonMatches": []}, {"regex": "^[+]\\d{1,2}\\(\\d{2,3}\\)\\d{6,8}(\\#\\d{1,10})?$", "exceptionStackTrace": null, "matches": ["+0(00)000000#0000000000", "+0(00)00000000#0", "+0(000)000000#0", "+00(00)000000#0", "+0(00)000000", "+0(00)000000#0"], "nonMatches": ["+0(00)000000#0#0", "+0(00)000000#00000000000", "+0(00)000000#", "+0(00)000000000#0", "+0(00)00000#0", "+0(0000)000000#0", "+0(0)000000#0", "+000(00)000000#0", "+(00)000000#0"]}, {"regex": "(?!000)[0-9]{1,3}(.(?!000)[0-9]{3}(-(?!00)[0-9]{2}(.(?!00000000)[0-9]{8})))", "exceptionStackTrace": null, "matches": [], "nonMatches": ["0a000-00a000000000", "0a000-00a0000000", "0a000-00A00000000", "0a000-00000000000", "0a000-00-00000000", "0a000-00 00000000", "0a000-000a00000000", "0a000-0a00000000", "0a0000-00a00000000", "0a00-00a00000000", "0A000-00a00000000", "00000-00a00000000", "0-000-00a00000000", "0 000-00a00000000", "0000a000-00a00000000", "000a000-00a00000000", "a000-00a00000000", "0a000-00a00000000"]}, {"regex": "^(https?|ftp)(:\\/\\/)(([\\w]{3,}\\.[\\w]+\\.[\\w]{2,6})|([\\d]{3}\\.[\\d]{1,3}\\.[\\d]{3}\\.[\\d]{1,3}))(\\:[0,9]+)*(\\/?$|((\\/[\\w\\W]+)+\\.[\\w]{3,4})?$)", "exceptionStackTrace": null, "matches": ["https://000.0.000.000:9/", "https://000.000.000.0:9/", "https://aaa.evil.aa:9/evil.aaa/evil.aaa", "https://aaa.evil.aa:9/evil.aaaa", "https://aaa.evil.aa:9/evil._aa", "https://aaa.evil.aa:9/evil.Aaa", "https://aaa.evil.aa:9/evil.0aa", "https://aaa.evil.aa:9/evil/evil.aaa", "https://aaa.evil.aa:9/eVil.aaa", "https://aaa.evil.aa:9/EVIL.aaa", "https://aaa.evil.aa:9/ev_il.aaa", "https://aaa.evil.aa:9/ev il.aaa", "https://aaa.evil.aa:9/ev4il.aaa", "https://aaa.evil.aa:9/e.aaa", "https://aaa.evil.aa:9/ .aaa", "https://aaa.evil.aa:9/6.aaa", "https://aaa.evil.aa:9/_.aaa", "https://aaa.evil.aa:9", "https://aaa.evil.aa:9:9/", "https://aaa.evil.aa/", "https://aaa.evil.aa:99/", "https://aaa.evil.aa:0/", "https://aaa.evil.aa:,/", "https://aaa.evil.aaaaaa:9/", "https://aaa.evil._a:9/", "https://aaa.evil.Aa:9/", "https://aaa.evil.0a:9/", "https://aaa.eVil.aa:9/", "https://aaa.EVIL.aa:9/", "https://aaa.ev_il.aa:9/", "https://aaa.ev4il.aa:9/", "https://aaa.e.aa:9/", "https://aaa.6.aa:9/", "https://aaa._.aa:9/", "https://_aa.evil.aa:9/", "https://Aaa.evil.aa:9/", "https://0aa.evil.aa:9/", "http://aaa.evil.aa:9/", "ftp://aaa.evil.aa", "http://000.0.000.0", "http://aaa.evil.aa", "ftp://aaa.evil.aa:9/", "https://000.0.000.0:9/", "https://aaa.evil.aa:9/evil.aaa", "https://aaa.evil.aa:9/"], "nonMatches": ["https://000.0.000.0000:9/", "https://000.0.000.:9/", "https://000.0.0000.0:9/", "https://000.0.00.0:9/", "https://000.0000.000.0:9/", "https://000..000.0:9/", "https://0000.0.000.0:9/", "https://00.0.000.0:9/", "https://aaa.evil.aa:9/evil.aaaaa", "https://aaa.evil.aa:9/evil.aa", "https://aaa.evil.aa:9.aaa", "https://aaa.evil.aa:9/.aaa", "https://aaa.evil.aa:9//", "https://aaa.evil.aa:/", "https://aaa.evil.aa:1/", "https://aaa.evil.aaaaaaa:9/", "https://aaa.evil.a:9/", "https://aaa.ev il.aa:9/", "https://aaa. .aa:9/", "https://aaa..aa:9/", "https://aa.evil.aa:9/", "httpss://aaa.evil.aa:9/"]}, {"regex": "^([0-9]{2})?(\\([0-9]{2})\\)([0-9]{3}|[0-9]{4})-[0-9]{4}$", "exceptionStackTrace": null, "matches": ["(00)0000-0000", "(00)000-0000", "00(00)0000-0000", "00(00)000-0000"], "nonMatches": ["00(00)00000-0000", "00(00)000-00000", "00(00)000-000", "00(00)00-0000", "00(000)000-0000", "00(0)000-0000", "0000(00)000-0000", "000(00)000-0000", "0(00)000-0000"]}, {"regex": "^\\d{2}(\\x2e)(\\d{3})(-\\d{3})?$", "exceptionStackTrace": null, "matches": ["00.000", "00.000-000"], "nonMatches": ["00.000-000-000", "00.000-0000", "00.000-00", "00.0000-000", "00.00-000", "000.000-000", "0.000-000"]}, {"regex": "^((nntp|sftp|ftp(s)?|http(s)?|gopher|news|file|telnet):\\/\\/)?(([a-zA-Z0-9\\._-]*([a-zA-Z0-9]\\.[a-zA-Z0-9])[a-zA-Z]{1,6})|(([0-9]{1,3}\\.){3}[0-9]{1,3}))(:\\d+)?(\\/[^:][^\\s]*)?$", "exceptionStackTrace": null, "matches": ["http://evil0.0A:0/aevil", "ftp://evil0.0A:0/aevil", "nntp://0.0.0.000:0/aevil", "nntp://000.0.0.0:0/aevil", "nntp://evil0.0A:0/aevil/aevil", "nntp://evil0.0A:0", "nntp://evil0.0A:0/a:", "nntp://evil0.0A:0/a/", "nntp://evil0.0A:0/a.", "nntp://evil0.0A:0/a-", "nntp://evil0.0A:0/aeVil", "nntp://evil0.0A:0/aEVIL", "nntp://evil0.0A:0/aev_il", "nntp://evil0.0A:0/aev4il", "nntp://evil0.0A:0/ae", "nntp://evil0.0A:0/a6", "nntp://evil0.0A:0/a_", "nntp://evil0.0A:0/a", "nntp://evil0.0A:0/_evil", "nntp://evil0.0A:0/Aevil", "nntp://evil0.0A:0/0evil", "nntp://evil0.0A:0//evil", "nntp://evil0.0A:0/.evil", "nntp://evil0.0A:0/-evil", "nntp://evil0.0A:0/ evil", "nntp://evil0.0A/aevil", "nntp://evil0.0A:00/aevil", "nntp://evil0.0AAAAAA:0/aevil", "nntp://evil0.0a:0/aevil", "nntp://evil0.aA:0/aevil", "nntp://evil0.AA:0/aevil", "nntp://evila.0A:0/aevil", "nntp://evilA.0A:0/aevil", "nntp://.0.0A:0/aevil", "nntp://-0.0A:0/aevil", "nntp://eVil0.0A:0/aevil", "nntp://EVIL0.0A:0/aevil", "nntp://ev_il0.0A:0/aevil", "nntp://ev4il0.0A:0/aevil", "nntp://e0.0A:0/aevil", "nntp://60.0A:0/aevil", "nntp://_0.0A:0/aevil", "nntp://0.0A:0/aevil", "evil0.0A:0/aevil", "0.0.0.0", "0.0A", "telnet://evil0.0A:0/aevil", "file://evil0.0A:0/aevil", "news://evil0.0A:0/aevil", "gopher://evil0.0A:0/aevil", "https://evil0.0A:0/aevil", "ftps://evil0.0A:0/aevil", "sftp://evil0.0A:0/aevil", "nntp://0.0.0.0:0/aevil", "nntp://evil0.0A:0/aevil"], "nonMatches": ["httpss://evil0.0A:0/aevil", "ftpss://evil0.0A:0/aevil", "nntp://0.0.0.0000:0/aevil", "nntp://0.0.0.:0/aevil", "nntp://0.0.0.0.0:0/aevil", "nntp://0.0.0:0/aevil", "nntp://0000.0.0.0:0/aevil", "nntp://.0.0.0:0/aevil", "nntp://evil0.0A:0/aev il", "nntp://evil0.0A:0/a ", "nntp://evil0.0A:0/:evil", "nntp://evil0.0A:0:0/aevil", "nntp://evil0.0A:/aevil", "nntp://evil0.0AAAAAAA:0/aevil", "nntp://evil0.0:0/aevil", "nntp://:0.0A:0/aevil", "nntp:///0.0A:0/aevil", "nntp://ev il0.0A:0/aevil", "nntp:// 0.0A:0/aevil", "nntp://nntp://evil0.0A:0/aevil"]}, {"regex": "^\\s*([A-Za-z]{2,4}\\.?\\s*)?([&#39;\\-A-Za-z]+\\s*){1,2}([A-Za-z]+\\.?\\s*)?([&#39;\\-A-Za-z]+\\s*){1,2}(([jJsSrR]{2}\\.)|([XIV]{1,6}))?\\s*$", "exceptionStackTrace": null, "matches": [" aa. evil evil. evil VVVVVVV ", " aa. evil evil. evil VVVVVV ", " aa. evil evil. evil X ", " aa. evil evil. evil I ", " aa. evil evil. evil A ", " aa. evil evil. evil RR.  ", " aa. evil evil. evil RR.", " aa. evil evil. evil  ", " aa. evil evil. evil RRR. ", " aa. evil evil. evil sR. ", " aa. evil evil. evil rR. ", " aa. evil evil. evil jR. ", " aa. evil evil. evil SR. ", " aa. evil evil. evil JR. ", " aa. evil evil. evil evil RR. ", " aa. evil evil. evil  RR. ", " aa. evil evil. evilRR. ", " aa. evil evil. ; RR. ", " aa. evil evil. - RR. ", " aa. evil evil. & RR. ", " aa. evil evil. # RR. ", " aa. evil evil. eVil RR. ", " aa. evil evil. EVIL RR. ", " aa. evil evil. ev il RR. ", " aa. evil evil. e RR. ", " aa. evil evil RR. ", " aa. evil evil.  evil RR. ", " aa. evil evil.evil RR. ", " aa. evil evil evil RR. ", " aa. evil eVil. evil RR. ", " aa. evil EVIL. evil RR. ", " aa. evil ev il. evil RR. ", " aa. evil e. evil RR. ", " aa. evil evil evil. evil RR. ", " aa. evil. evil RR. ", " aa. evil  evil. evil RR. ", " aa. evilevil. evil RR. ", " aa. ; evil. evil RR. ", " aa. - evil. evil RR. ", " aa. & evil. evil RR. ", " aa. # evil. evil RR. ", " aa. eVil evil. evil RR. ", " aa. EVIL evil. evil RR. ", " aa. ev il evil. evil RR. ", " aa. e evil. evil RR. ", " aa.   evil. evil RR. ", " aa.  evil. evil RR. ", " evil evil. evil RR. ", " aa.  evil evil. evil RR. ", " aa.evil evil. evil RR. ", " aa evil evil. evil RR. ", " aaaa. evil evil. evil RR. ", " Aa. evil evil. evil RR. ", "  aa. evil evil. evil RR. ", "aa. evil evil. evil RR. ", "evilevil", " aa. evil evil. evil V ", " aa. evil evil. evil RR. "], "nonMatches": [" aa. evil evil. evil RR.RR. ", " aa. evil evil. evil R. ", " aa. evil evil. evil aR. ", " aa. evil evil. evil AR. ", " aa. evil evil. evil evil evil RR. ", " aa. evil evil. RR. ", " aa. evil evil. . RR. ", " aa. evil evil. ev_il RR. ", " aa. evil evil. ev4il RR. ", " aa. evil evil.   RR. ", " aa. evil evil. 6 RR. ", " aa. evil evil. _ RR. ", " aa. evil evil.  RR. ", " aa. evil evil. evil. evil RR. ", " aa. evil evil.. evil RR. ", " aa. evil ev_il. evil RR. ", " aa. evil ev4il. evil RR. ", " aa. evil  . evil RR. ", " aa. evil 6. evil RR. ", " aa. evil _. evil RR. ", " aa. evil . evil RR. ", " aa. evil evil evil evil. evil RR. ", " aa. . evil. evil RR. ", " aa. ev_il evil. evil RR. ", " aa. ev4il evil. evil RR. ", " aa. 6 evil. evil RR. ", " aa. _ evil. evil RR. ", " aa. aa. evil evil. evil RR. ", " aa.. evil evil. evil RR. ", " aaaaa. evil evil. evil RR. ", " a. evil evil. evil RR. "]}, {"regex": "^((\\+)?[1-9]{1,4})?([-\\s\\.\\/])?((\\(\\d{1,4}\\))|\\d{1,4})(([-\\s\\.\\/])?[0-9]{1,6}){2,6}(\\s?(ext|x)\\s?[0-9]{1,6})?$", "exceptionStackTrace": null, "matches": ["+1/00000/0/0 ext 0", "+1/0000/0/0 ext 0", "+1/(0)/0/0", "+1/(0)/0/0 ext 000000", "+1/(0)/0/0 ext0", "+1/(0)/0/0ext 0", "+1/(0)/0/0/0/0/0/0 ext 0", "+1/(0)/0000000/0 ext 0", "+1/(0)/000000/0 ext 0", "+1/(0)0/0 ext 0", "+1/(0).0/0 ext 0", "+1/(0)-0/0 ext 0", "+1/(0) 0/0 ext 0", "+1/(0000)/0/0 ext 0", "+1(0)/0/0 ext 0", "+1.(0)/0/0 ext 0", "+1-(0)/0/0 ext 0", "+1 (0)/0/0 ext 0", "/(0)/0/0 ext 0", "+1111/(0)/0/0 ext 0", "1/(0)/0/0 ext 0", "00/0", "(0)0/0", "+1/0/0/0 ext 0", "+1/(0)/0/0 x 0", "+1/(0)/0/0 ext 0"], "nonMatches": ["+1//0/0 ext 0", "+1/(0)/0/0 ext 0 ext 0", "+1/(0)/0/0 ext 0000000", "+1/(0)/0/0 ext ", "+1/(0)/0/0 ext  0", "+1/(0)/0/0  ext 0", "+1/(0)/0/0/0/0/0/0/0 ext 0", "+1/(0)/0 ext 0", "+1/(0)//0 ext 0", "+1/(0)//0/0 ext 0", "+1/(00000)/0/0 ext 0", "+1/()/0/0 ext 0", "+1//(0)/0/0 ext 0", "+1+1/(0)/0/0 ext 0", "+11111/(0)/0/0 ext 0", "+/(0)/0/0 ext 0", "+0/(0)/0/0 ext 0", "++1/(0)/0/0 ext 0"]}, {"regex": "http[s]?://(www.facebook|[a-zA-Z]{2}-[a-zA-Z]{2}.facebook|facebook)\\.com/(events/[0-9]+|[a-zA-Z0-9\\.-]+)[/]?$", "exceptionStackTrace": null, "matches": ["https://AA-AAAfacebook.com/events/0/", "https://AA-AA:facebook.com/events/0/", "https://AA-AA0facebook.com/events/0/", "https://AA-AA/facebook.com/events/0/", "https://AA-AA.facebook.com/events/0/", "https://AA-AA-facebook.com/events/0/", "https://AA-AA facebook.com/events/0/", "https://AA-aAafacebook.com/events/0/", "https://aA-AAafacebook.com/events/0/", "https://wwwafacebook.com/./", "https://wwwafacebook.com/-/", "https://wwwafacebook.com/eVil/", "https://wwwafacebook.com/EVIL/", "https://wwwafacebook.com/ev4il/", "https://wwwafacebook.com/e/", "https://wwwafacebook.com/6/", "https://wwwafacebook.com/events/0", "https://wwwafacebook.com/events/00/", "https://wwwAfacebook.com/events/0/", "https://www:facebook.com/events/0/", "https://www0facebook.com/events/0/", "https://www/facebook.com/events/0/", "https://www.facebook.com/events/0/", "https://www-facebook.com/events/0/", "https://www facebook.com/events/0/", "http://wwwafacebook.com/events/0/", "http://facebook.com/events/0", "http://AA-AAafacebook.com/events/0", "http://wwwafacebook.com/evil", "http://wwwafacebook.com/events/0", "https://facebook.com/events/0/", "https://AA-AAafacebook.com/events/0/", "https://wwwafacebook.com/evil/", "https://wwwafacebook.com/events/0/"], "nonMatches": ["https://AA-AAAafacebook.com/events/0/", "https://AA-Aafacebook.com/events/0/", "https://AAA-AAafacebook.com/events/0/", "https://A-AAafacebook.com/events/0/", "https://wwwafacebook.com/:/", "https://wwwafacebook.com///", "https://wwwafacebook.com/ev_il/", "https://wwwafacebook.com/ev il/", "https://wwwafacebook.com/ /", "https://wwwafacebook.com/_/", "https://wwwafacebook.com//", "https://wwwafacebook.com/events/0//", "https://wwwafacebook.com/events//", "httpss://wwwafacebook.com/events/0/"]}, {"regex": "^([a-zA-Z0-9\\.\\_\\-\\&]+)@[a-zA-Z0-9]+\\.[a-zA-Z]{3}|(.[a-zA-Z]{2}(\\.[a-zA-Z]{2}))$", "exceptionStackTrace": null, "matches": ["aAA.aA", "aAAA.AA", "aaA.AA", "_AA.AA", "AAA.AA", "@AA.AA", "0AA.AA", ".AA.AA", "-AA.AA", "&AA.AA", " AA.AA", "evil@evil.AAAA", "evil@evil.AA", "evil@evil.aAA", "evil@eVil.AAA", "evil@EVIL.AAA", "evil@ev4il.AAA", "evil@e.AAA", "evil@6.AAA", ".@evil.AAA", "-@evil.AAA", "&@evil.AAA", "eVil@evil.AAA", "EVIL@evil.AAA", "ev_il@evil.AAA", "ev4il@evil.AAA", "e@evil.AAA", "6@evil.AAA", "_@evil.AAA", "aAA.AA", "evil@evil.AAA"], "nonMatches": ["aAA.AAA", "aAA.A", "aA.AA", "evil@ev_il.AAA", "evil@ev il.AAA", "evil@ .AAA", "evil@_.AAA", "evil@.AAA", "@@evil.AAA", "ev il@evil.AAA", " @evil.AAA", "@evil.AAA"]}, {"regex": ">(?:(?<t>[^<]*))", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<t"}, "matches": []}, {"regex": "how to block pdf spam", "exceptionStackTrace": null, "matches": ["how to block pdf spam"], "nonMatches": []}, {"regex": "^([a-z0-9]{32})$", "exceptionStackTrace": null, "matches": ["a0000000000000000000000000000000", "00000000000000000000000000000000"], "nonMatches": ["000000000000000000000000000000000", "0000000000000000000000000000000"]}, {"regex": "^(\\d{1,2})(\\/)(\\d{1,2})(\\/)(\\d{4})(T|\\s{1,2})(([0-1][0-9])|(2[0-3])):([0-5][0-9])+$", "exceptionStackTrace": null, "matches": ["0/0/0000  00:00", "0/0/0000T00:0000", "0/00/0000T00:00", "00/0/0000T00:00", "0/0/0000 00:00", "0/0/0000T20:00", "0/0/0000T00:00"], "nonMatches": ["0/0/0000   00:00", "0/0/000000:00", "0/0/0000T24:00", "0/0/0000T00:", "0/0/0000T00:60", "0/0/00000T00:00", "0/0/000T00:00", "0/000/0000T00:00", "0//0000T00:00", "000/0/0000T00:00", "/0/0000T00:00"]}, {"regex": "(GB-?)?([1-9][0-9]{2}\\ ?[0-9]{4}\\ ?[0-9]{2})|([1-9][0-9]{2}\\ ?[0-9]{4}\\ ?[0-9]{2}\\ ?[0-9]{3})|((GD|HA)[0-9]{3})", "exceptionStackTrace": null, "matches": ["GD0000", "100 0000 00 0000", "100 0000 00 00", "100 0000 00  000", "100 0000 00000", "100 0000 000 000", "100 000000 000", "1000000 00 000", "GB-100 0000 000", "GB-100 000000", "GB-1000000 00", "GB-GB-100 0000 00", "100 0000 00", "GB--100 0000 00", "GB100 0000 00", "100000000000", "100000000", "HA000", "GD000", "100 0000 00 000", "GB-100 0000 00"], "nonMatches": ["GD00", "100 0000 0 000", "100 0000  00 000", "100 00000 00 000", "100 000 00 000", "100  0000 00 000", "1000 0000 00 000", "10 0000 00 000", "000 0000 00 000", "GB-100 0000 0", "GB-100 0000  00", "GB-100 00000 00", "GB-100 000 00", "GB-100  0000 00", "GB-1000 0000 00", "GB-10 0000 00", "GB-000 0000 00"]}, {"regex": "(IE-?)?[0-9][0-9A-Z\\+\\*][0-9]{5}[A-Z]", "exceptionStackTrace": null, "matches": ["IE-0A00000A", "IE-0000000A", "IE-0+00000A", "IE-IE-0*00000A", "IE--0*00000A", "IE0*00000A", "0*00000A", "IE-0*00000A"], "nonMatches": ["IE-0*000000A", "IE-0*0000A"]}, {"regex": "(LT-?)?([0-9]{9}|[0-9]{12})", "exceptionStackTrace": null, "matches": ["LT-0000000000000", "LT-00000000000", "LT-0000000000", "LT-LT-000000000", "LT--000000000", "LT000000000", "000000000000", "000000000", "LT-000000000000", "LT-000000000"], "nonMatches": ["LT-00000000"]}, {"regex": "(NL-?)?[0-9]{9}B[0-9]{2}", "exceptionStackTrace": null, "matches": ["NL-000000000B000", "NL-0000000000B00", "NL-NL-000000000B00", "NL--000000000B00", "NL000000000B00", "000000000B00", "NL-000000000B00"], "nonMatches": ["NL-000000000B0", "NL-00000000B00"]}, {"regex": "((0|1[0-9]{0,2}|2[0-9]?|2[0-4][0-9]|25[0-5]|[3-9][0-9]?)\\.){3}(0|1[0-9]{0,2}|2[0-9]?|2[0-4][0-9]|25[0-5]|[3-9][0-9]?)", "exceptionStackTrace": null, "matches": ["300.30.30.0", "00.30.30.0", "256.250.250.0", "250.200.200.0", "200.20.20.0", "2.20.20.0", "1000.10.10.0", "100.10.10.0", "1.10.10.0", "0.0.0.300", "0.0.0.3", "0.0.0.00", "0.0.0.256", "0.0.0.2", "0.0.0.1000", "0.0.0.100", "0.0.0.1", "0.0.0.0.0", "3.30.30.0", "250.30.30.0", "200.30.30.0", "2.30.30.0", "1.30.30.0", "0.30.30.3", "0.30.30.250", "0.30.30.200", "0.30.30.2", "0.30.30.1", "0.30.30.0", "30.30.30.0", "250.250.250.0", "200.200.200.0", "20.20.20.0", "10.10.10.0", "0.0.0.30", "0.0.0.250", "0.0.0.200", "0.0.0.20", "0.0.0.10", "0.0.0.0"], "nonMatches": ["0.0.0"]}, {"regex": "(0[289][0-9]{2})|([1345689][0-9]{3})|(2[0-8][0-9]{2})|(290[0-9])|(291[0-4])|(7[0-4][0-9]{2})|(7[8-9][0-9]{2})", "exceptionStackTrace": null, "matches": ["78000", "70000", "20000", "90000", "8000", "6000", "5000", "4000", "3000", "1000", "09000", "0800", "0200", "7800", "7000", "2910", "2900", "2000", "9000", "0900"], "nonMatches": ["780", "700", "7500", "2915", "200", "900", "090", "0000"]}, {"regex": "([ABCEGHJKLMNPRSTVXY][0-9][ABCEGHJKLMNPRSTVWXYZ])\\ ?([0-9][ABCEGHJKLMNPRSTVWXYZ][0-9])", "exceptionStackTrace": null, "matches": ["Y0Z 0Y0", "Y0Z 0X0", "Y0Z 0W0", "Y0Z 0V0", "Y0Z 0T0", "Y0Z 0S0", "Y0Z 0R0", "Y0Z 0P0", "Y0Z 0N0", "Y0Z 0M0", "Y0Z 0L0", "Y0Z 0K0", "Y0Z 0J0", "Y0Z 0H0", "Y0Z 0G0", "Y0Z 0E0", "Y0Z 0C0", "Y0Z 0B0", "Y0Z 0A0", "Y0Y 0Z0", "Y0X 0Z0", "Y0W 0Z0", "Y0V 0Z0", "Y0T 0Z0", "Y0S 0Z0", "Y0R 0Z0", "Y0P 0Z0", "Y0N 0Z0", "Y0M 0Z0", "Y0L 0Z0", "Y0K 0Z0", "Y0J 0Z0", "Y0H 0Z0", "Y0G 0Z0", "Y0E 0Z0", "Y0C 0Z0", "Y0B 0Z0", "Y0A 0Z0", "X0Z 0Z0", "V0Z 0Z0", "T0Z 0Z0", "S0Z 0Z0", "R0Z 0Z0", "P0Z 0Z0", "N0Z 0Z0", "M0Z 0Z0", "L0Z 0Z0", "K0Z 0Z0", "J0Z 0Z0", "H0Z 0Z0", "G0Z 0Z0", "E0Z 0Z0", "C0Z 0Z0", "B0Z 0Z0", "A0Z 0Z0", "Y0Z0Z0", "Y0Z 0Z0"], "nonMatches": ["Y0Z 0D0", "Y0Z  0Z0", "Y0D 0Z0", "D0Z 0Z0"]}, {"regex": "((0[13-7]|1[1235789]|[257][0-9]|3[0-35-9]|4[0124-9]|6[013-79]|8[0124-9]|9[0-5789])[0-9]{3}|10([2-9][0-9]{2}|1([2-9][0-9]|11[5-9]))|14([01][0-9]{2}|715))", "exceptionStackTrace": null, "matches": ["141000", "14000", "101110", "102000", "98000", "97000", "90000", "84000", "81000", "80000", "63000", "61000", "60000", "44000", "41000", "40000", "30000", "50000", "20000", "18000", "17000", "15000", "13000", "12000", "11000", "010000", "03000", "14715", "14100", "101115", "10120", "10200", "99000", "82000", "69000", "42000", "35000", "70000", "19000", "01000"], "nonMatches": ["1410", "14200", "10100", "1020", "96000", "83000", "62000", "43000", "34000", "10000", "0100", "00000"]}, {"regex": "(([A-Z]{1,2}[0-9][0-9A-Z]?)\\ ([0-9][A-Z]{2}))|(GIR\\ 0AA)", "exceptionStackTrace": null, "matches": ["A0A 0AAA", "A00 0AA", "AAA0A 0AA", "AA0A 0AA", "A0 0AA", "GIR 0AA", "A0A 0AA"], "nonMatches": ["A0A 0A", "A0AA 0AA", "0A 0AA"]}, {"regex": "((EE|EL|DE|PT)-?)?[0-9]{9}", "exceptionStackTrace": null, "matches": ["EE-0000000000", "EE-EE-000000000", "EE--000000000", "EE000000000", "000000000", "PT-000000000", "DE-000000000", "EL-000000000", "EE-000000000"], "nonMatches": ["EE-00000000"]}, {"regex": "((FI|HU|LU|MT|SI)-?)?[0-9]{8}", "exceptionStackTrace": null, "matches": ["FI-000000000", "FI-FI-00000000", "FI--00000000", "FI00000000", "00000000", "SI-00000000", "MT-00000000", "LU-00000000", "HU-00000000", "FI-00000000"], "nonMatches": ["FI-0000000"]}, {"regex": "((PL|SK)-?)?[0-9]{10}", "exceptionStackTrace": null, "matches": ["PL-00000000000", "PL-PL-0000000000", "PL--0000000000", "PL0000000000", "0000000000", "SK-0000000000", "PL-0000000000"], "nonMatches": ["PL-000000000"]}, {"regex": "((IT|LV)-?)?[0-9]{11}", "exceptionStackTrace": null, "matches": ["IT-000000000000", "IT-IT-00000000000", "IT--00000000000", "IT00000000000", "00000000000", "LV-00000000000", "IT-00000000000"], "nonMatches": ["IT-0000000000"]}, {"regex": "(SE-?)?[0-9]{12}", "exceptionStackTrace": null, "matches": ["SE-0000000000000", "SE-SE-000000000000", "SE--000000000000", "SE000000000000", "000000000000", "SE-000000000000"], "nonMatches": ["SE-00000000000"]}, {"regex": "(BE-?)?0?[0-9]{9}", "exceptionStackTrace": null, "matches": ["BE-00000000000", "BE-000000000", "BE-BE-0000000000", "0000000000", "BE--0000000000", "BE0000000000", "000000000", "BE-0000000000"], "nonMatches": []}, {"regex": "(CY-?)?[0-9]{8}[A-Z]", "exceptionStackTrace": null, "matches": ["CY-000000000A", "CY-CY-00000000A", "CY--00000000A", "CY00000000A", "00000000A", "CY-00000000A"], "nonMatches": ["CY-0000000A"]}, {"regex": "(CZ-?)?[0-9]{8,10}", "exceptionStackTrace": null, "matches": ["CZ-00000000000", "CZ-0000000000", "CZ-CZ-00000000", "CZ--00000000", "CZ00000000", "00000000", "CZ-00000000"], "nonMatches": ["CZ-0000000"]}, {"regex": "(DK-?)?([0-9]{2}\\ ?){3}[0-9]{2}", "exceptionStackTrace": null, "matches": ["DK-00 00 00 000", "DK-00 00 00 00 00", "DK-0000 00 00", "DK-000 00 00 00", "DK-DK-00 00 00 00", "00 00 00 00", "DK--00 00 00 00", "DK00 00 00 00", "0000 00 00", "DK-00 00 00 00"], "nonMatches": ["DK-00 00 00 0", "DK-00 00 00", "DK-00  00 00 00", "DK-0 00 00 00"]}, {"regex": "(ES-?)?([0-9A-Z][0-9]{7}[A-Z])|([A-Z][0-9]{7}[0-9A-Z])", "exceptionStackTrace": null, "matches": ["A00000000", "A00000000A", "ES-A00000000A", "ES-00000000A", "ES-ES-A0000000A", "ES--A0000000A", "ESA0000000A", "A0000000A", "ES-A0000000A"], "nonMatches": ["A000000A", "ES-A000000A"]}, {"regex": "(FR-?)?[0-9A-Z]{2}\\ ?[0-9]{9}", "exceptionStackTrace": null, "matches": ["FR-AA 0000000000", "FR-AA000000000", "FR-AAA 000000000", "FR-0A 000000000", "FR-FR-AA 000000000", "AA 000000000", "FR--AA 000000000", "FRAA 000000000", "AA000000000", "FR-AA 000000000"], "nonMatches": ["FR-AA 00000000", "FR-AA  000000000", "FR-A 000000000"]}, {"regex": "(([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?){1}", "exceptionStackTrace": null, "matches": ["///////==", "/////==", "////a/==", "////A/==", "////0/==", "////+/==", "///////=///////=", "///////=///=", "////", "////a//=", "////A//=", "////0//=", "////+//=", "///////////=", "///=", "////////=", "//////=", "a//////=", "A//////=", "0//////=", "+//////=", "", "//////==", "///////="], "nonMatches": []}, {"regex": "&amp;#([0-9]{1,5}|x[0-9a-fA-F]{1,4});", "exceptionStackTrace": null, "matches": ["&amp;#xAAAA;", "&amp;#xa;", "&amp;#x0;", "&amp;#00000;", "&amp;#xA;", "&amp;#0;"], "nonMatches": ["&amp;#xAAAAA;", "&amp;#x;", "&amp;#xg;", "&amp;#xG;", "&amp;#000000;", "&amp;#;"]}, {"regex": "((\\+?1)(\\ \\.-)?)?\\([2-9][0-9]{2}|\\([2-9][0-9]{2}\\))(\\ \\.-)?[0-9]{3}(\\ \\.-)?[0-9]{4}", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unbalanced parenthesis"}, "matches": []}, {"regex": "(Jan(uary)?|Feb(ruary)?|Mar(ch)?|Apr(il)?|May|Jun(e)?|Jul(y)?|Aug(ust)?|Sep(tember)?|Oct(ober)?|(Nov|Dec)(ember)?)", "exceptionStackTrace": null, "matches": ["Novemberember", "Octoberober", "Septembertember", "Augustust", "Julyy", "Junee", "Aprilil", "Marchch", "Februaryruary", "Januaryuary", "Dec", "Nov", "Oct", "Sep", "Aug", "Jul", "Jun", "Apr", "Mar", "Feb", "Jan", "December", "November", "October", "September", "August", "July", "June", "May", "April", "March", "February", "January"], "nonMatches": []}, {"regex": "(Mo(n(day)?)?|Tu(e(sday)?)?|We(d(nesday)?)?|Th(u(rsday)?)?|Fr(i(day)?)?|Sa(t(urday)?)?|Su(n(day)?)?)", "exceptionStackTrace": null, "matches": ["Sundaynday", "Sundayday", "Sun", "Saturdayturday", "Saturdayurday", "Sat", "Fridayiday", "Fridayday", "Fri", "Thursdayursday", "Thursdayrsday", "Thu", "Wednesdaydnesday", "Wednesdaynesday", "Wed", "Tuesdayesday", "Tuesdaysday", "Tue", "Mondaynday", "Mondayday", "Mon", "Su", "Sa", "Fr", "Th", "We", "Tu", "Mo", "Sunday", "Saturday", "Friday", "Thursday", "Wednesday", "Tuesday", "Monday"], "nonMatches": []}, {"regex": "(?&lt;group5&gt;[0-9]{5})-?(?&lt;group4&gt;[0-9]{4})?", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?&"}, "matches": []}, {"regex": "^[-\\w&#39;+*$^&%=~!?{}#|/`]{1}([-\\w&#39;+*$^&%=~!?{}#|`.]?[-\\w&#39;+*$^&%=~!?{}#|`]{1}){0,31}[-\\w&#39;+*$^&%=~!?{}#|`]?@(([a-zA-Z0-9]{1}([-a-zA-Z0-9]?[a-zA-Z0-9]{1}){0,31})\\.{1})+([a-zA-Z]{2}|[a-zA-Z]{3}|[a-zA-Z]{4}|[a-zA-Z]{6}){1}$", "exceptionStackTrace": null, "matches": ["`.``@0-0.aAAAAA", "`.``@0-0.aAAA", "`.``@0-0.aAA", "`.``@0-0.aA", "`.``@0-0.0-0.AA", "`.``@0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0.AA", "`.``@0.AA", "`.``@0-00.AA", "`.``@0-a.AA", "`.``@0-A.AA", "`.``@00.AA", "`.``@0a0.AA", "`.``@0A0.AA", "`.``@000.AA", "`.``@00-0.AA", "`.``@a-0.AA", "`.``@A-0.AA", "`.`~@0-0.AA", "`.`}@0-0.AA", "`.`|@0-0.AA", "`.`{@0-0.AA", "`.`a@0-0.AA", "`.`_@0-0.AA", "`.`^@0-0.AA", "`.`A@0-0.AA", "`.`?@0-0.AA", "`.`=@0-0.AA", "`.`;@0-0.AA", "`.`9@0-0.AA", "`.`3@0-0.AA", "`.`0@0-0.AA", "`.`-@0-0.AA", "`.`+@0-0.AA", "`.`*@0-0.AA", "`.`&@0-0.AA", "`.`%@0-0.AA", "`.`$@0-0.AA", "`.`#@0-0.AA", "`.`!@0-0.AA", "`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.``@0-0.AA", "``@0-0.AA", "`.```@0-0.AA", "`.`@0-0.AA", "`.~`@0-0.AA", "`.}`@0-0.AA", "`.|`@0-0.AA", "`.{`@0-0.AA", "`.a`@0-0.AA", "`._`@0-0.AA", "`.^`@0-0.AA", "`.A`@0-0.AA", "`.?`@0-0.AA", "`.=`@0-0.AA", "`.;`@0-0.AA", "`.9`@0-0.AA", "`.3`@0-0.AA", "`.0`@0-0.AA", "`.-`@0-0.AA", "`.+`@0-0.AA", "`.*`@0-0.AA", "`.&`@0-0.AA", "`.%`@0-0.AA", "`.$`@0-0.AA", "`.#`@0-0.AA", "`.!`@0-0.AA", "```@0-0.AA", "`~``@0-0.AA", "`}``@0-0.AA", "`|``@0-0.AA", "`{``@0-0.AA", "`a``@0-0.AA", "````@0-0.AA", "`_``@0-0.AA", "`^``@0-0.AA", "`A``@0-0.AA", "`?``@0-0.AA", "`=``@0-0.AA", "`;``@0-0.AA", "`9``@0-0.AA", "`3``@0-0.AA", "`0``@0-0.AA", "`-``@0-0.AA", "`+``@0-0.AA", "`*``@0-0.AA", "`&``@0-0.AA", "`%``@0-0.AA", "`$``@0-0.AA", "`#``@0-0.AA", "`!``@0-0.AA", "``.``@0-0.AA", "~.``@0-0.AA", "}.``@0-0.AA", "|.``@0-0.AA", "{.``@0-0.AA", "a.``@0-0.AA", "_.``@0-0.AA", "^.``@0-0.AA", "A.``@0-0.AA", "?.``@0-0.AA", "=.``@0-0.AA", ";.``@0-0.AA", "9.``@0-0.AA", "3.``@0-0.AA", "0.``@0-0.AA", "/.``@0-0.AA", "-.``@0-0.AA", "+.``@0-0.AA", "*.``@0-0.AA", "&.``@0-0.AA", "%.``@0-0.AA", "$.``@0-0.AA", "#.``@0-0.AA", "!.``@0-0.AA", "`@0.AAAAAA", "`@0.AAAA", "`@0.AAA", "`@0.AA", "`.``@0-0.AAAAAA", "`.``@0-0.AAAA", "`.``@0-0.AAA", "`.``@0-0.AA"], "nonMatches": ["`.``@0-0.AAAAAAA", "`.``@0-0.AAAAA", "`.``@0-0.", "`.``@0-0.A", "`.``@AA", "`.``@0-0..AA", "`.``@0-0AA", "`.``@0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0.AA", "`.``@0-.AA", "`.``@0--0.AA", "`.``@-0.AA", "`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.``@0-0.AA", "`..``@0-0.AA", ".``@0-0.AA"]}, {"regex": "^(1|1(\\s|\\s?-\\s?|\\s?\\.\\s?|\\s?/\\s?))?((\\(?[2-9]{1}[\\d]{2}\\)?(\\s|\\s?-\\s?|\\s?\\.\\s?|\\s?/\\s?)?))?(\\d{3})(\\s|\\s?-\\s?|\\s?\\.\\s?|\\s?/\\s?)?(\\d{4})$\n", "exceptionStackTrace": null, "matches": ["1 /(200) 000 0000\n", "1/ (200) 000 0000\n", "1 .(200) 000 0000\n", "1. (200) 000 0000\n", "1 -(200) 000 0000\n", "1- (200) 000 0000\n", "1(200) /000 0000\n", "1(200)/ 000 0000\n", "1(200) .000 0000\n", "1(200). 000 0000\n", "1(200) -000 0000\n", "1(200)- 000 0000\n", "1(200) 000 /0000\n", "1(200) 000/ 0000\n", "1(200) 000 .0000\n", "1(200) 000. 0000\n", "1(200) 000 -0000\n", "1(200) 000- 0000\n", "1(200) 0000000\n", "1000 0000\n", "1(200)000 0000\n", "1(200 000 0000\n", "1200) 000 0000\n", "(200) 000 0000\n", "0000000\n", "1 / (200) 000 0000\n", "1 . (200) 000 0000\n", "1 - (200) 000 0000\n", "1 (200) 000 0000\n", "1(200) / 000 0000\n", "1(200) . 000 0000\n", "1(200) - 000 0000\n", "1(200) 000 / 0000\n", "1(200) 000 . 0000\n", "1(200) 000 - 0000\n", "1(200) 000 0000\n"], "nonMatches": ["1 /  (200) 000 0000\n", "1  / (200) 000 0000\n", "1 .  (200) 000 0000\n", "1  . (200) 000 0000\n", "1 -  (200) 000 0000\n", "1  - (200) 000 0000\n", "1(200) /  000 0000\n", "1(200)  / 000 0000\n", "1(200) .  000 0000\n", "1(200)  . 000 0000\n", "1(200) -  000 0000\n", "1(200)  - 000 0000\n", "1(200) 000 /  0000\n", "1(200) 000  / 0000\n", "1(200) 000 .  0000\n", "1(200) 000  . 0000\n", "1(200) 000 -  0000\n", "1(200) 000  - 0000\n", "1(200) 000 00000\n", "1(200) 000 000\n", "1(200) 000  0000\n", "1(200) 0000 0000\n", "1(200) 00 0000\n", "1(200) (200) 000 0000\n", "1(200)  000 0000\n", "1(200)) 000 0000\n", "1(2000) 000 0000\n", "1(20) 000 0000\n", "1(2200) 000 0000\n", "1(00) 000 0000\n", "1(000) 000 0000\n", "1((200) 000 0000\n", "11(200) 000 0000\n"]}, {"regex": "^(000-)(\\\\d{5}-){2}\\\\d{3}$", "exceptionStackTrace": null, "matches": ["000-\\ddddd-\\ddddd-\\ddd"], "nonMatches": ["000-\\ddddd-\\ddddd-\\dddd", "000-\\ddddd-\\ddddd-\\dd", "000-\\ddddd-\\ddddd-\\ddddd-\\ddd", "000-\\ddddd-\\ddd", "000-\\dddddd-\\ddddd-\\ddd", "000-\\dddd-\\ddddd-\\ddd"]}, {"regex": "^(?!0,?\\d)(?:\\d{1,3}(?:([, .])\\d{2})?(?:\\1\\d{2})*|(?:\\d+))((?!\\1)[,.]\\d{1,2})?$", "exceptionStackTrace": null, "matches": ["0.00.00", "0.00.00.00", "0.00.00,0", "0", "0.0"], "nonMatches": ["00.0", ".0", "0.00.00.0.0", "0.00.00.000", "0.00.00.", "0.00.000.0", "0.00.0.0", "0.00.00.00.0", "0.00.0", "0.000.00.0", "0.0.00.0", "0,00.00.0", "0 00.00.0", "0000.00.00.0", "000.00.00.0", ".00.00.0", "0.00.00.0"]}, {"regex": "fdg", "exceptionStackTrace": null, "matches": ["fdg"], "nonMatches": []}, {"regex": "(\\+1|\\+|1)|([^0-9])", "exceptionStackTrace": null, "matches": ["A", " ", "a", "1", "+", "+1"], "nonMatches": ["0"]}, {"regex": "(?i:[aeiou]+)\\B", "exceptionStackTrace": null, "matches": [], "nonMatches": [""]}, {"regex": "([a-z\\u4e00-\\u9eff\\u00C0-\\u017F0-9-_]+(?:\\.[a-z\\u4e00-\\u9eff\\u00C0-\\u017F0-9-_]+)*)@((?:[a-z\\u4e00-\\u9eff\\u00C0-\\u017F0-9-_]+\\.)*[a-z\\u4e00-\\u9eff\\u00C0-\\u017F0-9-_]{0,66})\\.([a-z\\u4e00-\\u9eff\\u00C0-\\u017F_]{2,6}(?:\\.[a-z\\u4e00-\\u9eff\\u00C0-\\u017F_]{2})?)", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 19968"}, "matches": [], "nonMatches": []}, {"regex": "([a-z\\u4e00-\\u9eff\\u00C0-\\u017F0-9-_]+(?:\\.[a-z\\u4e00-\\u9eff\\u00C0-\\u017F0-9-_]+)*)@((?:[a-z\\u4e00-\\u9eff\\u00C0-\\u017F0-9-_]+\\.)*[a-z\\u4e00-\\u9eff\\u00C0-\\u017F0-9-_]{0,66})\\.([a-z\\u4e00-\\u9eff\\u00C0-\\u017F_]{2,6}(?:\\.[a-z\\u4e00-\\u9eff\\u00C0-\\u017F_]{2})?)", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 19968"}, "matches": [], "nonMatches": []}, {"regex": "(^[0-9]{1,8}|(^[0-9]{1,8}\\.{0,1}[0-9]{1,2}))$", "exceptionStackTrace": null, "matches": ["0.00", "00000000.0", "000000000", "00000000", "00", "0.0", "0"], "nonMatches": ["0.000", "0.", "0..0", "000000000.0", ".0", ""]}, {"regex": "^((0[1-9])|(1[0-2]))$", "exceptionStackTrace": null, "matches": ["10", "01"], "nonMatches": ["13", "00"]}, {"regex": "^([1-9]{0,1})([0-9]{1})(\\.[0-9])?$", "exceptionStackTrace": null, "matches": ["10", "1.0", "0.0", "0", "10.0"], "nonMatches": ["10.0.0", "100.0", "110.0", "00.0"]}, {"regex": "[-+]((0[0-9]|1[0-3]):([03]0|45)|14:00)", "exceptionStackTrace": null, "matches": ["+00:00", "-00:30", "+14:00", "+10:30", "+00:45", "+00:30"], "nonMatches": ["+14:30", "+00:10"]}, {"regex": "gtfhf", "exceptionStackTrace": null, "matches": ["gtfhf"], "nonMatches": []}, {"regex": "\\b(?:AB|ALB|Alta|alberta|BC|CB|British Columbia|LB|Labrador|MB|Man|Manitoba|N[BLTSU]|Nfld|NF|Newfoundland|NWT|Northwest Territories|Nova Scotia|New Brunswick|Nunavut|ON|ONT|Ontario|PE|PEI|IPE|Prince Edward Island|QC|PC|QUE|QU|Quebec|SK|Sask|Saskatchewan|YT|Yukon|Yukon Territories)\\b", "exceptionStackTrace": null, "matches": ["NT", "NS", "NL", "NB", "Yukon Territories", "Yukon", "YT", "Saskatchewan", "Sask", "SK", "Quebec", "QU", "QUE", "PC", "QC", "Prince Edward Island", "IPE", "PEI", "PE", "Ontario", "ONT", "ON", "Nunavut", "New Brunswick", "Nova Scotia", "Northwest Territories", "NWT", "Newfoundland", "NF", "Nfld", "NU", "Manitoba", "Man", "MB", "Labrador", "LB", "British Columbia", "CB", "BC", "alberta", "Alta", "ALB", "AB"], "nonMatches": ["NA"]}, {"regex": "^[^#]([^ ]+ ){6}[^ ]+$", "exceptionStackTrace": null, "matches": ["aevil evil evil evil evil evil #", "aevil evil evil evil evil evil eVil", "aevil evil evil evil evil evil EVIL", "aevil evil evil evil evil evil ev_il", "aevil evil evil evil evil evil ev4il", "aevil evil evil evil evil evil e", "aevil evil evil evil evil evil 6", "aevil evil evil evil evil evil _", "a# evil evil evil evil evil evil", "aeVil evil evil evil evil evil evil", "aEVIL evil evil evil evil evil evil", "aev_il evil evil evil evil evil evil", "aev4il evil evil evil evil evil evil", "ae evil evil evil evil evil evil", "a6 evil evil evil evil evil evil", "a_ evil evil evil evil evil evil", "Aevil evil evil evil evil evil evil", "0evil evil evil evil evil evil evil", " evil evil evil evil evil evil evil", "aevil evil evil evil evil evil evil"], "nonMatches": ["aevil evil evil evil evil evil ev il", "aevil evil evil evil evil evil  ", "aevil evil evil evil evil evil ", "aevil evil evil evil evil evil evil evil", "aevil evil evil evil evil evil", "aev il evil evil evil evil evil evil", "a  evil evil evil evil evil evil", "a evil evil evil evil evil evil", "#evil evil evil evil evil evil evil"]}, {"regex": "(?:(?:(?<Feet>\\d+)[ ]*(?:&#39;|ft)){0,1}[ ]*(?<Inches>\\d*(?![/\\w])){0,1}(?:[ ,\\-]){0,1}(?<Fraction>(?<FracNum>\\d*)\\/(?<FracDem>\\d*)){0,1}(?<Decimal>\\.\\d*){0,1}(?:\\x22| in))|(?:(?<Feet>\\d+)[ ]*(?:&#39;|ft)[ ]*){1}", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<F"}, "matches": []}, {"regex": "^((\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*)\\s*[,]{0,1}\\s*)+$", "exceptionStackTrace": null, "matches": ["evil.evil@evil.evil.evil.evil , evil.evil@evil.evil.evil.evil , ", "evil.evil@evil.evil.evil.evil ,  ", "evil.evil@evil.evil.evil.evil ,", "evil.evil@evil.evil.evil.evil  ", "evil.evil@evil.evil.evil.evil  , ", "evil.evil@evil.evil.evil.evil, ", "evil.evil@evil.evil.evil.eVil , ", "evil.evil@evil.evil.evil.EVIL , ", "evil.evil@evil.evil.evil.ev_il , ", "evil.evil@evil.evil.evil.ev4il , ", "evil.evil@evil.evil.evil.e , ", "evil.evil@evil.evil.evil.6 , ", "evil.evil@evil.evil.evil._ , ", "evil.evil@evil.evil.evil-evil , ", "evil.evil@evil.evil.eVil.evil , ", "evil.evil@evil.evil.EVIL.evil , ", "evil.evil@evil.evil.ev_il.evil , ", "evil.evil@evil.evil.ev4il.evil , ", "evil.evil@evil.evil.e.evil , ", "evil.evil@evil.evil.6.evil , ", "evil.evil@evil.evil._.evil , ", "evil.evil@evil.evil.evil.evil.evil , ", "evil.evil@evil.evil.evil , ", "evil.evil@evil.eVil.evil.evil , ", "evil.evil@evil.EVIL.evil.evil , ", "evil.evil@evil.ev_il.evil.evil , ", "evil.evil@evil.ev4il.evil.evil , ", "evil.evil@evil.e.evil.evil , ", "evil.evil@evil.6.evil.evil , ", "evil.evil@evil._.evil.evil , ", "evil.evil@evil-evil.evil.evil , ", "evil.evil@eVil.evil.evil.evil , ", "evil.evil@EVIL.evil.evil.evil , ", "evil.evil@ev_il.evil.evil.evil , ", "evil.evil@ev4il.evil.evil.evil , ", "evil.evil@e.evil.evil.evil , ", "evil.evil@6.evil.evil.evil , ", "evil.evil@_.evil.evil.evil , ", "evil.evil.evil@evil.evil.evil.evil , ", "evil@evil.evil.evil.evil , ", "evil.eVil@evil.evil.evil.evil , ", "evil.EVIL@evil.evil.evil.evil , ", "evil.ev_il@evil.evil.evil.evil , ", "evil.ev4il@evil.evil.evil.evil , ", "evil.e@evil.evil.evil.evil , ", "evil.6@evil.evil.evil.evil , ", "evil._@evil.evil.evil.evil , ", "evil-evil@evil.evil.evil.evil , ", "evil+evil@evil.evil.evil.evil , ", "eVil.evil@evil.evil.evil.evil , ", "EVIL.evil@evil.evil.evil.evil , ", "ev_il.evil@evil.evil.evil.evil , ", "ev4il.evil@evil.evil.evil.evil , ", "e.evil@evil.evil.evil.evil , ", "6.evil@evil.evil.evil.evil , ", "_.evil@evil.evil.evil.evil , ", "evil@evil.evil", "evil.evil@evil.evil.evil.evil , "], "nonMatches": ["", "evil.evil@evil.evil.evil.evil ,, ", "evil.evil@evil.evil.evil.ev il , ", "evil.evil@evil.evil.evil.  , ", "evil.evil@evil.evil.evil. , ", "evil.evil@evil.evil.ev il.evil , ", "evil.evil@evil.evil. .evil , ", "evil.evil@evil.evil..evil , ", "evil.evil@evil.ev il.evil.evil , ", "evil.evil@evil. .evil.evil , ", "evil.evil@evil..evil.evil , ", "evil.evil@ev il.evil.evil.evil , ", "evil.evil@ .evil.evil.evil , ", "evil.evil@.evil.evil.evil , ", "evil.ev il@evil.evil.evil.evil , ", "evil. @evil.evil.evil.evil , ", "evil.@evil.evil.evil.evil , ", "ev il.evil@evil.evil.evil.evil , ", " .evil@evil.evil.evil.evil , ", ".evil@evil.evil.evil.evil , "]}, {"regex": "(\\<!--\\s*.*?((--\\>)|$))", "exceptionStackTrace": null, "matches": ["<!-- >-->", "<!-- <-->", "<!-- --->", "<!-- !-->", "<!-- eVil-->", "<!-- EVIL-->", "<!-- ev_il-->", "<!-- ev il-->", "<!-- ev4il-->", "<!-- e-->", "<!--  -->", "<!-- 6-->", "<!-- _-->", "<!-- -->", "<!--  evil-->", "<!--evil-->", "<!--", "<!---->", "<!-- evil", "<!-- evil-->"], "nonMatches": []}, {"regex": "(\\<\\?php\\s+.*?((\\?\\>)|$))", "exceptionStackTrace": null, "matches": ["<?php ??>", "<?php >?>", "<?php <?>", "<?php eVil?>", "<?php EVIL?>", "<?php ev_il?>", "<?php ev il?>", "<?php ev4il?>", "<?php e?>", "<?php  ?>", "<?php 6?>", "<?php _?>", "<?php  evil?>", "<?php ", "<?php ?>", "<?php evil", "<?php evil?>"], "nonMatches": ["<?phpevil?>"]}, {"regex": "[a-z0-9!#$%&&#39;*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&&#39;*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+(?:[A-Z]{2}|com|org|net|gov|biz|info|name|aero|biz|info|jobs|museum)\\b", "exceptionStackTrace": null, "matches": ["evil.evil@0evil0.0evil0.AA", "evil.evil@0evil0evil0.AA", "evil.evil@0.AA", "evil.evil@0evila.AA", "evil.evil@0@0.AA", "evil.evil@0.0.AA", "evil.evil@0-0.AA", "evil.evil@0ev4il0.AA", "evil.evil@0e0.AA", "evil.evil@060.AA", "evil.evil@00.AA", "evil.evil@aevil0.AA", "evil.evil.evil@0evil0.AA", "evil@0evil0.AA", "evil.~@0evil0.AA", "evil.}@0evil0.AA", "evil.|@0evil0.AA", "evil.{@0evil0.AA", "evil.`@0evil0.AA", "evil.^@0evil0.AA", "evil.?@0evil0.AA", "evil.=@0evil0.AA", "evil.;@0evil0.AA", "evil./@0evil0.AA", "evil.-@0evil0.AA", "evil.+@0evil0.AA", "evil.*@0evil0.AA", "evil.&@0evil0.AA", "evil.%@0evil0.AA", "evil.$@0evil0.AA", "evil.#@0evil0.AA", "evil.!@0evil0.AA", "evil.eVil@0evil0.AA", "evil.ev_il@0evil0.AA", "evil.ev il@0evil0.AA", "evil.ev4il@0evil0.AA", "evil.e@0evil0.AA", "evil.6@0evil0.AA", "evil._@0evil0.AA", "~.evil@0evil0.AA", "}.evil@0evil0.AA", "|.evil@0evil0.AA", "{.evil@0evil0.AA", "`.evil@0evil0.AA", "^.evil@0evil0.AA", "@.evil@0evil0.AA", "?.evil@0evil0.AA", "=.evil@0evil0.AA", ";.evil@0evil0.AA", "/.evil@0evil0.AA", "..evil@0evil0.AA", "-.evil@0evil0.AA", "+.evil@0evil0.AA", "*.evil@0evil0.AA", "&.evil@0evil0.AA", "%.evil@0evil0.AA", "$.evil@0evil0.AA", "#.evil@0evil0.AA", "!.evil@0evil0.AA", "eVil.evil@0evil0.AA", "EVIL.evil@0evil0.AA", "ev_il.evil@0evil0.AA", "ev il.evil@0evil0.AA", "ev4il.evil@0evil0.AA", "e.evil@0evil0.AA", " .evil@0evil0.AA", "6.evil@0evil0.AA", "_.evil@0evil0.AA", ".evil@0evil0.AA", "evil@0.museum", "evil@0.jobs", "evil@0.aero", "evil@0.name", "evil@0.info", "evil@0.biz", "evil@0.gov", "evil@0.net", "evil@0.org", "evil@0.com", "evil@0.AA", "evil.evil@0evil0.museum", "evil.evil@0evil0.jobs", "evil.evil@0evil0.aero", "evil.evil@0evil0.name", "evil.evil@0evil0.info", "evil.evil@0evil0.biz", "evil.evil@0evil0.gov", "evil.evil@0evil0.net", "evil.evil@0evil0.org", "evil.evil@0evil0.com", "evil.evil@0evil0.AA"], "nonMatches": ["evil.evil@0evil0.AAA", "evil.evil@0evil0.A", "evil.evil@AA", "evil.evil@0~0.AA", "evil.evil@0}0.AA", "evil.evil@0|0.AA", "evil.evil@0{0.AA", "evil.evil@0`0.AA", "evil.evil@0^0.AA", "evil.evil@0?0.AA", "evil.evil@0=0.AA", "evil.evil@0;0.AA", "evil.evil@0/0.AA", "evil.evil@0+0.AA", "evil.evil@0*0.AA", "evil.evil@0&0.AA", "evil.evil@0%0.AA", "evil.evil@0$0.AA", "evil.evil@0#0.AA", "evil.evil@0!0.AA", "evil.evil@0eVil0.AA", "evil.evil@0EVIL0.AA", "evil.evil@0ev_il0.AA", "evil.evil@0ev il0.AA", "evil.evil@0 0.AA", "evil.evil@0_0.AA", "evil.@@0evil0.AA", "evil..@0evil0.AA", "evil.EVIL@0evil0.AA", "evil. @0evil0.AA", "evil.@0evil0.AA"]}, {"regex": "^([1-9]|1[0-2]|0[1-9]){1}(:[0-5][0-9][aApP][mM]){1}$", "exceptionStackTrace": null, "matches": ["1:00Pm", "1:00pM", "1:00aM", "1:00AM", "11:00PM", "01:00PM", "10:00PM", "1:00PM"], "nonMatches": ["00:00PM", "13:00PM", "1:00PM:00PM", "1", "1:00Pa", "1:00PA", "1:00bM", "1:00BM", "1:60PM", ":00PM", "0:00PM"]}, {"regex": "^[a-zA-Z0-9_\\s-]+$", "exceptionStackTrace": null, "matches": ["-", "eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", " ", "6", "_", "evil"], "nonMatches": [""]}, {"regex": "^((([\\+][\\s]{0,1})|([0]{2}[\\s-]{0,1}))([358]{3})([\\s-]{0,1})|([0]{1}))(([1-9]{1}[0-9]{0,1})([\\s-]{0,1})([0-9]{2,4})([\\s-]{0,1})([0-9]{2,4})([\\s-]{0,1}))([0-9]{0,3}){1}$", "exceptionStackTrace": null, "matches": ["00888-10-00-00-0", "00 888-10-00-00-0", "+ 888-10-00-00-00", "+ 888-10-00-00-000", "+ 888-10-00-00-", "+ 888-10-00-000", "+ 888-10-00-00 0", "+ 888-10-00-0000-0", "+ 888-10-0000-0", "+ 888-10-00 00-0", "+ 888-10-0000-00-0", "+ 888-1000-00-0", "+ 888-10 00-00-0", "+ 888-1-00-00-0", "+ 88810-00-00-0", "+ 888 10-00-00-0", "+ 588-10-00-00-0", "+ 388-10-00-00-0", "+888-10-00-00-0", "010000", "0088810000", "+88810000", "010-00-00-0", "00-888-10-00-00-0", "+ 888-10-00-00-0"], "nonMatches": ["0010-00-00-0", "10-00-00-0", "00--888-10-00-00-0", "000-888-10-00-00-0", "0-888-10-00-00-0", "+ 888-10-00-00-0000", "+ 888-10-00-00--0", "+ 888-10-00-00000-0", "+ 888-10-00-0-0", "+ 888-10-00--00-0", "+ 888-10-00000-00-0", "+ 888-10-0-00-0", "+ 888-10--00-00-0", "+ 888-100-00-00-0", "+ 888-110-00-00-0", "+ 888-0-00-00-0", "+ 888-00-00-00-0", "+ 888--10-00-00-0", "+ 8888-10-00-00-0", "+ 88-10-00-00-0", "+ 088-10-00-00-0", "+  888-10-00-00-0"]}, {"regex": "2", "exceptionStackTrace": null, "matches": ["2"], "nonMatches": []}, {"regex": "^([1-9]|(0|1|2)[0-9]|30)(/|-)([1-9]|1[0-2]|0[1-9])(/|-)(14[0-9]{2})$", "exceptionStackTrace": null, "matches": ["30/1/1400", "20/1/1400", "10/1/1400", "00/1/1400", "1-1/1400", "1/01/1400", "1/10/1400", "1/1-1400", "1/1/1400"], "nonMatches": ["1/00/1400", "1/13/1400", "1/1/14000", "1/1/140", "1/0/1400", "0/1/1400"]}, {"regex": "^[2-7]{1}[0-9]{3}$", "exceptionStackTrace": null, "matches": ["2000"], "nonMatches": ["20000", "200", "22000", "000", "0000"]}, {"regex": "^(-?\\$?([1-9]\\d{0,2}(,\\d{3})*|[1-9]\\d*|0|)(.\\d{1,2})?|\\(\\$?([1-9]\\d{0,2}(,\\d{3})*|[1-9]\\d*|0|)(.\\d{1,2})?\\))$", "exceptionStackTrace": null, "matches": ["($a0)", "($100a0)", "($1a0)", "($10,000)", "($10,000a00)", "($10,000A0)", "($10,00000)", "($10,000-0)", "($10,000,0)", "($10,000)0)", "($10,000(0)", "($10,000$0)", "($10,000 0)", "($10,000,000a0)", "($100,000a0)", "($1,000a0)", "(10,000a0)", "-$a0", "-$100a0", "-$1a0", "-$10,000", "-$10,000a00", "-$10,000A0", "-$10,00000", "-$10,000-0", "-$10,000,0", "-$10,000)0", "-$10,000(0", "-$10,000$0", "-$10,000 0", "-$10,000,000a0", "-$100,000a0", "-$1,000a0", "-10,000a0", "$10,000a0", "()", "(1)", "", "1", "($0a0)", "($10a0)", "($10,000a0)", "-$0a0", "-$10a0", "-$10,000a0"], "nonMatches": ["($00a0)", "($10,000a0a0)", "($10,000a000)", "($10,000a)", "($10,0000a0)", "($10,00a0)", "($1000,000a0)", "($00,000a0)", "($$10,000a0)", "-$00a0", "-$10,000a0a0", "-$10,000a000", "-$10,000a", "-$10,0000a0", "-$10,00a0", "-$1000,000a0", "-$00,000a0", "-$$10,000a0", "--$10,000a0"]}, {"regex": "^((?!000)(?!666)([0-6]\\d{2}|7[0-2][0-9]|73[0-3]|7[5-6][0-9]|77[0-1]))(\\s|\\-)((?!00)\\d{2})(\\s|\\-)((?!0000)\\d{4})$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["772 00 0000", "734 00 0000", "000 00 00000", "000 00 000", "000 000 0000", "000 0 0000", "0000 00 0000", "00 00 0000", "770 00 0000", "750 00 0000", "730 00 0000", "700 00 0000", "000-00 0000", "000 00-0000", "000 00 0000"]}, {"regex": "yes", "exceptionStackTrace": null, "matches": ["yes"], "nonMatches": []}, {"regex": "^(\\d)?[ ]*[\\(\\.\\-]?(\\d{3})[\\)\\.\\-]?[ ]*(\\d{3})[\\.\\- ]?(\\d{4})[ ]*(x|ext\\.?)?[ ]*(\\d{1,7})?$", "exceptionStackTrace": null, "matches": ["0 -000- 000 0000 ext 0", "0 -000- 000 0000 x 00", "0 -000- 000 0000 x 0000000", "0 -000- 000 0000 x ", "0 -000- 000 0000 x  0", "0 -000- 000 0000 x0", "0 -000- 000 0000  0", "0 -000- 000 0000  x 0", "0 -000- 000 0000x 0", "0 -000- 0000000 x 0", "0 -000- 000.0000 x 0", "0 -000- 000-0000 x 0", "0 -000-  000 0000 x 0", "0 -000-000 0000 x 0", "0 -000 000 0000 x 0", "0 -000. 000 0000 x 0", "0 -000) 000 0000 x 0", "0 000- 000 0000 x 0", "0 .000- 000 0000 x 0", "0 (000- 000 0000 x 0", "0  -000- 000 0000 x 0", "0-000- 000 0000 x 0", " -000- 000 0000 x 0", "0000000000", "0 -000- 000 0000 ext. 0", "0 -000- 000 0000 x 0"], "nonMatches": ["0 -000- 000 0000 ext.. 0", "0 -000- 000 0000 x 00000000", "0 -000- 000 0000 xx 0", "0 -000- 000 00000 x 0", "0 -000- 000 000 x 0", "0 -000- 000  0000 x 0", "0 -000- 0000 0000 x 0", "0 -000- 00 0000 x 0", "0 -000-- 000 0000 x 0", "0 -0000- 000 0000 x 0", "0 -00- 000 0000 x 0", "0 --000- 000 0000 x 0", "00 -000- 000 0000 x 0"]}, {"regex": "^([0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\\w]*[0-9a-zA-Z]\\.)+[a-zA-Z]{2,9})$", "exceptionStackTrace": null, "matches": ["AevilA@AevilA.AAAAAAAAA", "AevilA@AevilA.aA", "AevilA@AevilA.AevilA.AA", "AevilA@Aevila.AA", "AevilA@Aevil0.AA", "AevilA@A-A.AA", "AevilA@AeVilA.AA", "AevilA@AEVILA.AA", "AevilA@Aev_ilA.AA", "AevilA@Aev4ilA.AA", "AevilA@AeA.AA", "AevilA@A6A.AA", "AevilA@A_A.AA", "AevilA@AA.AA", "AevilA@aevilA.AA", "AevilA@0evilA.AA", "AevilAevilA@AevilA.AA", "A@AevilA.AA", "Aevila@AevilA.AA", "Aevil0@AevilA.AA", "A.A@AevilA.AA", "A-A@AevilA.AA", "AeVilA@AevilA.AA", "AEVILA@AevilA.AA", "Aev_ilA@AevilA.AA", "Aev4ilA@AevilA.AA", "AeA@AevilA.AA", "A6A@AevilA.AA", "A_A@AevilA.AA", "AA@AevilA.AA", "aevilA@AevilA.AA", "0evilA@AevilA.AA", "A@AA.AA", "AevilA@AevilA.AA"], "nonMatches": ["AevilA@AevilA.AAAAAAAAAA", "AevilA@AevilA.A", "AevilA@AA", "AevilA@A@A.AA", "AevilA@A.A.AA", "AevilA@Aev ilA.AA", "AevilA@A A.AA", "A@A@AevilA.AA", "Aev ilA@AevilA.AA", "A A@AevilA.AA"]}, {"regex": "^[A-Z0-9\\\\-\\\\&-]{5,12}$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (bad range): Invalid range: \\-\\"}, "matches": [], "nonMatches": []}, {"regex": "^((\\+44\\s?\\d{4}|\\(?\\d{5}\\)?)\\s?\\d{6})|((\\+44\\s?|0)7\\d{3}\\s?\\d{6})$", "exceptionStackTrace": null, "matches": ["+44 7000 0000000", "+44 7000000000", "+447000 000000", "(00000 000000", "00000) 000000", "+44 0000 0000000", "+44 0000000000", "+440000 000000", "07000000000", "+447000000000", "00000000000", "+440000000000", "07000 000000", "+44 7000 000000", "(00000) 000000", "+44 0000 000000"], "nonMatches": ["+44 7000 00000", "+44 7000  000000", "+44 70000 000000", "+44 700 000000", "+44  7000 000000", "(00000)) 000000", "(000000) 000000", "(0000) 000000", "((00000) 000000", "+44 0000 00000", "+44 0000  000000", "+44 00000 000000", "+44 000 000000", "+44  0000 000000"]}, {"regex": "^(net.tcp\\://|(ht|f)tp(s?)\\://)\\S+", "exceptionStackTrace": null, "matches": ["netatcp://:", "netatcp:///", "netatcp://eVil", "netatcp://EVIL", "netatcp://ev_il", "netatcp://ev il", "netatcp://ev4il", "netatcp://e", "netatcp://6", "netatcp://_", "netAtcp://evil", "net:tcp://evil", "net0tcp://evil", "net/tcp://evil", "net tcp://evil", "ftp://evil", "http://evil", "ftps://evil", "https://evil", "netatcp://evil"], "nonMatches": ["httpss://evil", "netatcp:// ", "netatcp://"]}, {"regex": "^(?:(?:\\(|)0|\\+27|27)(?:1[12345678]|2[123478]|3[1234569]|4[\\d]|5[134678])(?:\\) | |-|)\\d{3}(?: |-|)\\d{4}$", "exceptionStackTrace": null, "matches": ["(057) 000 0000", "(056) 000 0000", "(054) 000 0000", "(053) 000 0000", "(051) 000 0000", "(036) 000 0000", "(035) 000 0000", "(034) 000 0000", "(033) 000 0000", "(032) 000 0000", "(031) 000 0000", "(027) 000 0000", "(024) 000 0000", "(023) 000 0000", "(022) 000 0000", "(021) 000 0000", "(018000 0000", "(018) 0000000", "(017) 000 0000", "(016) 000 0000", "(015) 000 0000", "(014) 000 0000", "(013) 000 0000", "(012) 000 0000", "(011) 000 0000", "058) 000 0000", "040) 000 0000", "039) 000 0000", "028) 000 0000", "018000 0000", "018 000 0000", "018) 0000000", "018) 000 0000", "2718) 000 0000", "+2718) 000 0000", "(058) 000 0000", "(040) 000 0000", "(039) 000 0000", "(028) 000 0000", "(018-000 0000", "(018 000 0000", "(018) 000-0000", "(018) 000 0000"], "nonMatches": ["(050) 000 0000", "(030) 000 0000", "(020) 000 0000", "(018--000 0000", "(018) 000--0000", "(018) 000 00000", "(018) 000 000", "(018) 0000 0000", "(018) 00 0000", "(010) 000 0000", "((018) 000 0000"]}, {"regex": "[^0-9]((\\(?(\\+420|00420)\\)?( |-)?)?([0-9]{3} ?(([0-9]{3} ?[0-9]{3})|([0-9]{2} ?[0-9]{2} ?[0-9]{2})))|([0-9]{3}-(([0-9]{3}-[0-9]{3})|([0-9]{2}-[0-9]{2}-[0-9]{2}))))[^0-9|/]", "exceptionStackTrace": null, "matches": ["a(+420) 000 00 0000a", "a(+420) 000 0000 00a", "a(+420) 000 000 000A", "a(+420) 000 000 000-", "a(+420) 000 000 000+", "a(+420) 000 000 000)", "a(+420) 000 000 000(", "a(+420) 000 000 000 ", "a(+420) 000 000000a", "a(+420) 000000 000a", "a(+420) (+420) 000 000 000a", "a000 000 000a", "a(+420)  000 000 000a", "a(+420)000 000 000a", "a(+420)) 000 000 000a", "a(+420 000 000 000a", "a((+420) 000 000 000a", "a+420) 000 000 000a", "|(+420) 000 000 000a", "A(+420) 000 000 000a", "0(+420) 000 000 000a", "/(+420) 000 000 000a", "-(+420) 000 000 000a", "+(+420) 000 000 000a", ")(+420) 000 000 000a", "((+420) 000 000 000a", " (+420) 000 000 000a", "a000000000a", "a000-00-00-00a", "a000-000-000a", "a(00420) 000 000 000a", "a(+420)-000 000 000a", "a(+420) 000 00 00 00a", "a(+420) 000 000 000a"], "nonMatches": ["a000-00-00-000a", "a000-00-00-0a", "a000-00-000-00a", "a000-00-0-00a", "a000-000-00-00a", "a000-0-00-00a", "a000-000-0000a", "a000-000-00a", "a000-0000-000a", "a000-00-000a", "a0000-000-000a", "a00-000-000a", "a(+420) 000 00 00 000a", "a(+420) 000 00 00 0a", "a(+420) 000 00 00  00a", "a(+420) 000 00 000 00a", "a(+420) 000 00 0 00a", "a(+420) 000 00  00 00a", "a(+420) 000 000 00 00a", "a(+420) 000 0 00 00a", "a(+420) 000 000 000|", "a(+420) 000 000 0000", "a(+420) 000 000 000/", "a(+420) 000 000 0000a", "a(+420) 000 000 00a", "a(+420) 000 000  000a", "a(+420) 000 0000 000a", "a(+420) 000 00 000a", "a(+420) 000  000 000a", "a(+420) 0000 000 000a", "a(+420) 00 000 000a"]}, {"regex": "^(([1-9]{1}[0-9]{0,5}([.]{1}[0-9]{0,2})?)|(([0]{1}))([.]{1}[0-9]{0,2})?)$", "exceptionStackTrace": null, "matches": ["0.00", "0.", "10", "10.00", "10.", "100", "100000.0", "1.0", "110.0", "0", "1", "0.0", "10.0"], "nonMatches": ["0.0.0", "0.000", "0..0", "00", ".0", "10.0.0", "10.000", "10..0", "1000000.0", "00.0"]}, {"regex": "^(([0-2]*[0-9]+[0-9]+)\\.([0-2]*[0-9]+[0-9]+)\\.([0-2]*[0-9]+[0-9]+)\\.([0-2]*[0-9]+[0-9]+))$", "exceptionStackTrace": null, "matches": ["000.000.000.0000", "000.000.000.00", "000.000.000.300", "000.000.0000.000", "000.000.00.000", "000.000.300.000", "000.0000.000.000", "000.00.000.000", "000.300.000.000", "0000.000.000.000", "00.000.000.000", "300.000.000.000", "00.00.00.00", "000.000.000.000"], "nonMatches": []}, {"regex": "^(\\{|\\[|\\().+(\\}|\\]|\\)).+$", "exceptionStackTrace": null, "matches": ["{evil}}", "{evil}{", "{evil}]", "{evil}[", "{evil})", "{evil}(", "{evil}eVil", "{evil}EVIL", "{evil}ev_il", "{evil}ev il", "{evil}ev4il", "{evil}e", "{evil} ", "{evil}6", "{evil}_", "{}}evil", "{{}evil", "{]}evil", "{[}evil", "{)}evil", "{(}evil", "{eVil}evil", "{EVIL}evil", "{ev_il}evil", "{ev il}evil", "{ev4il}evil", "{e}evil", "{ }evil", "{6}evil", "{_}evil", "(evil}evil", "[evil}evil", "{evil)evil", "{evil]evil", "{evil}evil"], "nonMatches": ["{evil}", "{}evil"]}, {"regex": "^\\s*-?(\\d*\\.)?([0-2])?[0-9]:([0-5])?[0-9]:([0-5])?[0-9](\\.[0-9]{1,7})?\\s*$", "exceptionStackTrace": null, "matches": [" -0.00:00:00.0  ", " -0.00:00:00.0", " -0.00:00:00 ", " -0.00:00:00.0000000 ", " -0.00:00:0.0 ", " -0.00:0:00.0 ", " -0.0:00:00.0 ", " -00:00:00.0 ", " -00.00:00:00.0 ", " -.00:00:00.0 ", " 0.00:00:00.0 ", "  -0.00:00:00.0 ", "-0.00:00:00.0 ", "0:0:0", " -0.00:00:00.0 "], "nonMatches": [" -0.00:00:00.0.0 ", " -0.00:00:00.00000000 ", " -0.00:00:00. ", " -0.00:00:000.0 ", " -0.00:00:60.0 ", " -0.00:000:00.0 ", " -0.00:60:00.0 ", " -0.000:00:00.0 ", " -0.30:00:00.0 ", " -0.0.00:00:00.0 ", " --0.00:00:00.0 "]}, {"regex": "(?<=((\\s|\\n)[XYZABCIJKxyzabcijk]))-?((\\d*\\.\\d+)|(\\d+\\.\\d*)|(\\d+\\.\\d+))(\\s|\\n)", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\n"}, "matches": [], "nonMatches": []}, {"regex": "^-?((\\d*\\.\\d+)|(\\d+\\.\\d*)|(\\d+\\.\\d+))$", "exceptionStackTrace": null, "matches": ["-0.00", "-0.", "-00.0", "-.0", "0.0", "0.", ".0", "-0.0"], "nonMatches": ["--0.0"]}, {"regex": "(([a-z&#39;]?[a-z&#39; ]*)|([a-z][\\.])?([a-z][\\.]))", "exceptionStackTrace": null, "matches": ["a.a.a.", ";;", ";.", ";&", ";#", ";eVil", ";EVIL", ";ev_il", ";ev il", ";ev4il", ";e", "; ", ";6", ";_", ";", ";;evil", "evil", "aevil", "9evil", "3evil", "0evil", "&evil", "#evil", "a.", "", "a.a.", ";evil"], "nonMatches": []}, {"regex": "^[0-9]{4} {0,1}[A-Z]{2}$", "exceptionStackTrace": null, "matches": ["0000AA", "0000 AA"], "nonMatches": ["0000 AAA", "0000 A", "0000  AA", "00000 AA", "000 AA"]}, {"regex": "fvrdgg", "exceptionStackTrace": null, "matches": ["fvrdgg"], "nonMatches": []}, {"regex": "^-?(\\d+(,\\d{3})*(\\.\\d+)?|\\d?(\\.\\d+))$", "exceptionStackTrace": null, "matches": ["-0.00", "-00.0", "-.0", "-0,000", "-0,000.00", "-0,000,000.0", "-00,000.0", "0,000.0", ".0", "0", "-0.0", "-0,000.0"], "nonMatches": ["-0.", "-0,000.0.0", "-0,000.", "-0,0000.0", "-0,00.0", "-,000.0", "--0,000.0"]}, {"regex": "(?<!\\.)(?<!e[+-])(\\b\\d+\\b)(?!\\.)", "exceptionStackTrace": null, "matches": ["00", "0"], "nonMatches": [""]}, {"regex": "NGO", "exceptionStackTrace": null, "matches": ["NGO"], "nonMatches": []}, {"regex": "((\\d{0}[0-9]|\\d{0}[1]\\d{0}[0-2])(\\:)\\d{0}[0-5]\\d{0}[0-9](\\:)\\d{0}[0-5]\\d{0}[0-9]\\s(AM|PM))", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (pointless repeat): pointless repeat quantifier {0}"}, "matches": [], "nonMatches": []}, {"regex": "^([0-9]{2})?((\\([0-9]{2})\\)|[0-9]{2})?([0-9]{3}|[0-9]{4})(\\-)?[0-9]{4}$", "exceptionStackTrace": null, "matches": ["00000000-0000", "000000-0000", "00(00)0000000", "00000-0000", "(00)000-0000", "00000000", "0000000", "0000000-0000", "00(00)0000-0000", "00(00)000-0000"], "nonMatches": ["00(00)00000-0000", "00(00)000-00000", "00(00)000-000", "00(00)000--0000", "00(00)00-0000", "00(00)(00)000-0000", "00(000)000-0000", "00(0)000-0000", "0000(00)000-0000", "000(00)000-0000", "0(00)000-0000"]}, {"regex": "^(((((((0?[13578])|(1[02]))[\\.\\-/]?((0?[1-9])|([12]\\d)|(3[01])))|(((0?[469])|(11))[\\.\\-/]?((0?[1-9])|([12]\\d)|(30)))|((0?2)[\\.\\-/]?((0?[1-9])|(1\\d)|(2[0-8]))))[\\.\\-/]?(((19)|(20))?([\\d][\\d]))))|((0?2)[\\.\\-/]?(29)[\\.\\-/]?(((19)|(20))?(([02468][048])|([13579][26])))))$", "exceptionStackTrace": null, "matches": ["02/29/1992", "02/29/1976", "02/29/1956", "02/29/1936", "02/29/1916", "02/29/1984", "02/29/1980", "02/29/1968", "02/29/1948", "02/29/1928", "02/29/1908", "02/29/88", "02/291988", "02/29.1988", "02/29-1988", "0229/1988", "02.29/1988", "02-29/1988", "2/29/1988", "02/29/1900", "02/1/1900", "0201/1900", "02.01/1900", "02-01/1900", "2/01/1900", "09/10/1900", "09/1/1900", "0901/1900", "09.01/1900", "09-01/1900", "06/01/1900", "04/01/1900", "9/01/1900", "10/01/1900", "08/30/1900", "08/10/1900", "08/01/00", "08/011900", "08/01.1900", "08/01-1900", "08/1/1900", "0801/1900", "08.01/1900", "08-01/1900", "07/01/1900", "05/01/1900", "03/01/1900", "01/01/1900", "8/01/1900", "22996", "22988", "22000", "21000", "2100", "11100", "93000", "92000", "9100", "12100", "83100", "82000", "8100", "02/29/2088", "02/29/1996", "02/29/1988", "02/20/1900", "02/10/1900", "02/01/1900", "11/01/1900", "09/30/1900", "09/20/1900", "09/01/1900", "12/01/1900", "08/31/1900", "08/20/1900", "08/01/2000", "08/01/1900"], "nonMatches": ["02/29/1990", "02/29/1906", "02/29/1981", "02/29/1918", "02/29/191988", "02/29//1988", "02//29/1988", "002/29/1988", "02/00/1900", "02/001/1900", "02//01/1900", "002/01/1900", "09/00/1900", "09/001/1900", "09//01/1900", "009/01/1900", "08/32/1900", "08/01/191900", "08/01//1900", "08/00/1900", "08/001/1900", "08//01/1900", "00/01/1900", "008/01/1900"]}, {"regex": "\\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b", "exceptionStackTrace": null, "matches": ["10a250a250a250", "00a250a250a250", "000a250a250a250", "250a10a250a250", "250a00a250a250", "250a000a250a250", "250a250a10a250", "250a250a00a250", "250a250a000a250", "250a250a250a10", "250a250a250a00", "250a250a250a000", "250a250a250_250", "250a250a250A250", "250a250a2500250", "250a250a250 250", "250a250_250a250", "250a250A250a250", "250a2500250a250", "250a250 250a250", "250_250a250a250", "250A250a250a250", "2500250a250a250", "250 250a250a250", "0a250a250a250", "250a0a250a250", "250a250a0a250", "250a250a250a0", "100a250a250a250", "200a250a250a250", "250a100a250a250", "250a200a250a250", "250a250a100a250", "250a250a200a250", "250a250a250a100", "250a250a250a200", "250a250a250a250"], "nonMatches": ["1000a250a250a250", "1100a250a250a250", "250a1000a250a250", "250a1100a250a250", "250a250a1000a250", "250a250a1100a250", "250a250a250a1000", "250a250a250a1100", "250a250a250a256", "250a250a256a250", "250a256a250a250", "256a250a250a250"]}, {"regex": "^[-]?[0-9]*\\.?[0-9]?[0-9]?[0-9]?[0-9]?", "exceptionStackTrace": null, "matches": ["-0.00000", "-0.000", "-0..0000", "-00000", "-00.0000", "-.0000", "--0.0000", "0.0000", "", "-0.0000"], "nonMatches": []}, {"regex": "[^(\\&amp;)](\\w*)+(\\=)[\\w\\d ]*", "exceptionStackTrace": null, "matches": ["bevil=eVil", "bevil=EVIL", "bevil=ev_il", "bevil=ev il", "bevil=ev4il", "bevil=e", "bevil= ", "bevil=6", "bevil=_", "bevil=", "bevilevil=evil", "beVil=evil", "bEVIL=evil", "bev_il=evil", "bev il=evil", "bev4il=evil", "be=evil", "b =evil", "b6=evil", "b_=evil", "b=evil", "pevil=evil", "mevil=evil", "aevil=evil", "Aevil=evil", "=evil=evil", ";evil=evil", "0evil=evil", ")evil=evil", "(evil=evil", "&evil=evil", " evil=evil", "b=", "bevil=evil"], "nonMatches": []}, {"regex": "^(?:(?:1\\d?\\d|[1-9]?\\d|2[0-4]\\d|25[0-5])\\.){3}(?:1\\d?\\d|[1-9]?\\d|2[0-4]\\d|25[0-5])$", "exceptionStackTrace": null, "matches": ["250.200.200.100", "110.10.10.100", "0.10.10.100", "100.100.100.110", "100.100.100.0", "10.100.100.100", "250.250.250.10", "200.250.250.10", "0.250.250.10", "10.250.250.250", "10.250.250.200", "10.250.250.0", "10.250.250.10", "250.250.250.100", "200.200.200.100", "10.10.10.100", "100.100.100.250", "100.100.100.200", "100.100.100.10", "100.100.100.100"], "nonMatches": ["256.250.250.100", "00.10.10.100", "100.100.100.256", "100.100.100.00", "100.100.100.1000", "100.100.100.100.100", "100.100.100", "1000.100.100.100"]}, {"regex": "BV_SessionID=@@@@0106700396.1206001747@@@@&BV_EngineID=ccckadedjddehggcefecehidfhfdflg.0", "exceptionStackTrace": null, "matches": ["BV_SessionID=@@@@0106700396a1206001747@@@@&BV_EngineID=ccckadedjddehggcefecehidfhfdflg_0", "BV_SessionID=@@@@0106700396a1206001747@@@@&BV_EngineID=ccckadedjddehggcefecehidfhfdflgA0", "BV_SessionID=@@@@0106700396a1206001747@@@@&BV_EngineID=ccckadedjddehggcefecehidfhfdflg@0", "BV_SessionID=@@@@0106700396a1206001747@@@@&BV_EngineID=ccckadedjddehggcefecehidfhfdflg=0", "BV_SessionID=@@@@0106700396a1206001747@@@@&BV_EngineID=ccckadedjddehggcefecehidfhfdflg00", "BV_SessionID=@@@@0106700396a1206001747@@@@&BV_EngineID=ccckadedjddehggcefecehidfhfdflg&0", "BV_SessionID=@@@@0106700396a1206001747@@@@&BV_EngineID=ccckadedjddehggcefecehidfhfdflg 0", "BV_SessionID=@@@@0106700396_1206001747@@@@&BV_EngineID=ccckadedjddehggcefecehidfhfdflga0", "BV_SessionID=@@@@0106700396A1206001747@@@@&BV_EngineID=ccckadedjddehggcefecehidfhfdflga0", "BV_SessionID=@@@@0106700396@1206001747@@@@&BV_EngineID=ccckadedjddehggcefecehidfhfdflga0", "BV_SessionID=@@@@0106700396=1206001747@@@@&BV_EngineID=ccckadedjddehggcefecehidfhfdflga0", "BV_SessionID=@@@@010670039601206001747@@@@&BV_EngineID=ccckadedjddehggcefecehidfhfdflga0", "BV_SessionID=@@@@0106700396&1206001747@@@@&BV_EngineID=ccckadedjddehggcefecehidfhfdflga0", "BV_SessionID=@@@@0106700396 1206001747@@@@&BV_EngineID=ccckadedjddehggcefecehidfhfdflga0", "BV_SessionID=@@@@0106700396a1206001747@@@@&BV_EngineID=ccckadedjddehggcefecehidfhfdflga0"], "nonMatches": []}, {"regex": "qr/(Alabama|Alaska|Arizona|Arkansas|California|Colorado|Connecticut|Delaware|Florida|Georgia|Hawaii|Idaho|Illinois|Indiana|Iowa|Kansas|Kentucky|Louisiana|Maine|Maryland|Massachusetts|Michigan|Minnesota|Mississippi|Missouri|Montana|Nebraska|Nevada|New\\sHampshire|New\\sJersey|New\\sMexico|New\\sYork|North\\sCarolina|North\\sDakota|Ohio|Oklahoma|Oregon|Pennsylvania|Rhode\\sIsland|South\\sCarolina|South\\sDakota|Tennessee|Texas|Utah|Vermont|Virginia|Washington|West\\sVirginia|Wisconsin|Wyoming)/", "exceptionStackTrace": null, "matches": ["qr/Wyoming/", "qr/Wisconsin/", "qr/West Virginia/", "qr/Washington/", "qr/Virginia/", "qr/Vermont/", "qr/Utah/", "qr/Texas/", "qr/Tennessee/", "qr/South Dakota/", "qr/South Carolina/", "qr/Rhode Island/", "qr/Pennsylvania/", "qr/Oregon/", "qr/Oklahoma/", "qr/Ohio/", "qr/North Dakota/", "qr/North Carolina/", "qr/New York/", "qr/New Mexico/", "qr/New Jersey/", "qr/New Hampshire/", "qr/Nevada/", "qr/Nebraska/", "qr/Montana/", "qr/Missouri/", "qr/Mississippi/", "qr/Minnesota/", "qr/Michigan/", "qr/Massachusetts/", "qr/Maryland/", "qr/Maine/", "qr/Louisiana/", "qr/Kentucky/", "qr/Kansas/", "qr/Iowa/", "qr/Indiana/", "qr/Illinois/", "qr/Idaho/", "qr/Hawaii/", "qr/Georgia/", "qr/Florida/", "qr/Delaware/", "qr/Connecticut/", "qr/Colorado/", "qr/California/", "qr/Arkansas/", "qr/Arizona/", "qr/Alaska/", "qr/Alabama/"], "nonMatches": []}, {"regex": "((ht|f)tp(s?))(:((\\/\\/)(?!\\/)))(((w){3}\\.)?)([a-zA-Z0-9\\-_]+(\\.(com|edu|gov|int|mil|net|org|biz|info|name|pro|museum|co\\.uk)))(\\/(?!\\/))(([a-zA-Z0-9\\-_\\/]*)?)([a-zA-Z0-9])+\\.((jpg|jpeg|gif|png)(?!(\\w|\\W)))", "exceptionStackTrace": null, "matches": ["https://www.evil.com/evil00.jpg", "https://www.evil.com/evil.jpg", "https://www.evil.com/evila.jpg", "https://www.evil.com/evilA.jpg", "https://www.evil.com/evilevil0.jpg", "https://www.evil.com/-0.jpg", "https://www.evil.com/eVil0.jpg", "https://www.evil.com/EVIL0.jpg", "https://www.evil.com/ev_il0.jpg", "https://www.evil.com/ev4il0.jpg", "https://www.evil.com/e0.jpg", "https://www.evil.com/60.jpg", "https://www.evil.com/_0.jpg", "https://www.evil.com/0.jpg", "https://www.-.com/evil0.jpg", "https://www.eVil.com/evil0.jpg", "https://www.EVIL.com/evil0.jpg", "https://www.ev_il.com/evil0.jpg", "https://www.ev4il.com/evil0.jpg", "https://www.e.com/evil0.jpg", "https://www.6.com/evil0.jpg", "https://www._.com/evil0.jpg", "https://evil.com/evil0.jpg", "http://www.evil.com/evil0.jpg", "ftp://evil.com/0.jpg", "http://evil.co.uk/0.jpg", "http://evil.museum/0.jpg", "http://evil.pro/0.jpg", "http://evil.name/0.jpg", "http://evil.info/0.jpg", "http://evil.biz/0.jpg", "http://evil.org/0.jpg", "http://evil.net/0.jpg", "http://evil.mil/0.jpg", "http://evil.int/0.jpg", "http://evil.gov/0.jpg", "http://evil.edu/0.jpg", "http://evil.com/0.png", "http://evil.com/0.gif", "http://evil.com/0.jpeg", "http://evil.com/0.jpg", "ftps://www.evil.com/evil0.jpg", "https://www.evil.co.uk/evil0.jpg", "https://www.evil.museum/evil0.jpg", "https://www.evil.pro/evil0.jpg", "https://www.evil.name/evil0.jpg", "https://www.evil.info/evil0.jpg", "https://www.evil.biz/evil0.jpg", "https://www.evil.org/evil0.jpg", "https://www.evil.net/evil0.jpg", "https://www.evil.mil/evil0.jpg", "https://www.evil.int/evil0.jpg", "https://www.evil.gov/evil0.jpg", "https://www.evil.edu/evil0.jpg", "https://www.evil.com/evil0.png", "https://www.evil.com/evil0.gif", "https://www.evil.com/evil0.jpeg", "https://www.evil.com/evil0.jpg"], "nonMatches": ["https://www.evil.com/:0.jpg", "https://www.evil.com//0.jpg", "https://www.evil.com/.0.jpg", "https://www.evil.com/ev il0.jpg", "https://www.evil.com/ 0.jpg", "https://www.:.com/evil0.jpg", "https://www./.com/evil0.jpg", "https://www...com/evil0.jpg", "https://www.ev il.com/evil0.jpg", "https://www. .com/evil0.jpg", "https://www..com/evil0.jpg", "https://www.www.evil.com/evil0.jpg", "https://wwww.evil.com/evil0.jpg", "https://ww.evil.com/evil0.jpg", "httpss://www.evil.com/evil0.jpg"]}, {"regex": "^(\\d{4})[.](0{0,1}[1-9]|1[012])[.](0{0,1}[1-9]|[12][0-9]|3[01])[.](\\d{2})$", "exceptionStackTrace": null, "matches": ["0000.11.01.00", "0000.10.01.00", "0000.01.30.00", "0000.01.10.00", "0000.01.1.00", "0000.1.01.00", "0000.12.1.00", "0000.1.31.00", "0000.1.20.00", "0000.1.1.00", "0000.12.01.00", "0000.01.31.00", "0000.01.20.00", "0000.01.01.00"], "nonMatches": ["0000.13.01.00", "0000.01.32.00", "0000.01.01.000", "0000.01.01.0", "0000.01.00.00", "0000.01.001.00", "0000.00.01.00", "0000.001.01.00", "00000.01.01.00", "000.01.01.00"]}, {"regex": "^[1-9]\\d$", "exceptionStackTrace": null, "matches": ["10"], "nonMatches": ["00"]}, {"regex": "^(\\d{1}\\.){0,1}\\d{1,3}\\,\\d{2}$", "exceptionStackTrace": null, "matches": ["0.000,00", "0,00", "0.0,00"], "nonMatches": ["0.0,000", "0.0,0", "0.0000,00", "0.,00", "0.0.0,00", "00.0,00", ".0,00"]}, {"regex": "^([Aa][LKSZRAEPlkszraep]|[Cc][AOTaot]|[Dd][ECec]|[Ff][LMlm]|[Gg][AUau]|[Hh][Ii]|[Ii][ADLNadln]|[Kk][SYsy]|[Ll][Aa]|[Mm][ADEHINOPSTadehinopst]|[Nn][CDEHJMVYcdehjmvy]|[Oo][HKRhkr]|[Pp][ARWarw]|[Rr][Ii]|[Ss][CDcd]|[Tt][NXnx]|[Uu][Tt]|[Vv][AITait]|[Ww][AIVYaivy])$", "exceptionStackTrace": null, "matches": ["wv", "wi", "wa", "wY", "wV", "wI", "wA", "Wy", "vi", "va", "vT", "vI", "vA", "Vt", "uT", "Ut", "tn", "tX", "tN", "Tx", "sc", "sD", "sC", "Sd", "rI", "Ri", "pr", "pa", "pW", "pR", "pA", "Pw", "ok", "oh", "oR", "oK", "oH", "Or", "Ar", "nv", "nm", "nj", "nh", "ne", "nd", "nc", "nY", "nV", "nM", "nJ", "nH", "nE", "nD", "nC", "Ny", "ms", "mp", "mo", "mn", "mi", "mh", "me", "md", "ma", "mT", "mS", "mP", "mO", "mN", "mI", "mH", "mE", "mD", "mA", "Mt", "lA", "La", "Aa", "ks", "kY", "kS", "Ky", "il", "id", "ia", "iN", "iL", "iD", "iA", "In", "hI", "Hi", "ga", "gU", "gA", "Gu", "fl", "fM", "fL", "Fm", "de", "dE", "dC", "Dc", "co", "ca", "cT", "cO", "cA", "Ct", "az", "as", "ar", "al", "ak", "ae", "aa", "aZ", "aS", "aR", "aP", "aL", "aK", "aE", "aA", "Ap", "wy", "vt", "ut", "tx", "sd", "ri", "pw", "or", "ny", "mt", "la", "ky", "in", "hi", "gu", "fm", "dc", "ct", "ap"], "nonMatches": ["wb", "wB", "vb", "vB", "ua", "uA", "ta", "tA", "ax", "Ax", "sa", "sA", "ad", "Ad", "ra", "rA", "pb", "pB", "aw", "Aw", "oa", "oA", "na", "nA", "mb", "mB", "lb", "lB", "ka", "kA", "ay", "Ay", "ib", "iB", "an", "An", "ha", "hA", "ai", "Ai", "gb", "gB", "au", "Au", "fa", "fA", "am", "Am", "da", "dA", "ac", "Ac", "cb", "cB", "at", "At", "ab", "aB", "bp", "Bp"]}, {"regex": "^([A-Z]{2}\\s?(\\d{2})?(-)?([A-Z]{1}|\\d{1})?([A-Z]{1}|\\d{1}))$", "exceptionStackTrace": null, "matches": ["AA 00-A", "AA 00AA", "AA -AA", "AA00-AA", "AA0", "AAA", "AA 00-0A", "AA 00-A0", "AA 00-AA"], "nonMatches": ["AA 00-00A", "AA 00-A00", "AA 00-AAA", "AA 00--AA", "AA 0000-AA", "AA 000-AA", "AA 0-AA", "AA  00-AA", "AAA 00-AA", "A 00-AA"]}, {"regex": "^([A-Z]{2}\\s?(\\d{2})?(-)?([A-Z]{1}|\\d{1})?([A-Z]{1}|\\d{1})?( )?(\\d{4}))$", "exceptionStackTrace": null, "matches": ["AA 00-AA0000", "AA 00-A 0000", "AA 00AA 0000", "AA -AA 0000", "AA00-AA 0000", "AA0000", "AA 00-0A 0000", "AA 00-A0 0000", "AA 00-AA 0000"], "nonMatches": ["AA 00-00A 0000", "AA 00-A00 0000", "AA 00-AA 00000", "AA 00-AA 000", "AA 00-AA  0000", "AA 00-AAA 0000", "AA 00--AA 0000", "AA 0000-AA 0000", "AA 000-AA 0000", "AA 0-AA 0000", "AA  00-AA 0000", "AAA 00-AA 0000", "A 00-AA 0000"]}, {"regex": "(?:\\[(?:[\\u0000-\\u005C]|[\\u005E-\\uFFFF]|\\]\\])+\\])|(?:\\u0022(?:[\\u0000-\\u0021]|[\\u0023-\\uFFFF]|\\u0022\\u0022)+\\u0022)|(?:[a-zA-Z_][a-zA-Z0-9_]*)", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 0"}, "matches": [], "nonMatches": []}, {"regex": "(^\\d{5}\\-\\d{3}$)|(^\\d{2}\\.\\d{3}\\-\\d{3}$)|(^\\d{8}$)", "exceptionStackTrace": null, "matches": ["00000000", "00.000-000", "00000-000"], "nonMatches": ["000000000", "0000000", "00.000-0000", "00.000-00", "00.0000-000", "00.00-000", "000.000-000", "0.000-000", "00000-0000", "00000-00", "000000-000", "0000-000"]}, {"regex": "(?&lt;entryname&gt;[\\w_0-9]+)\\s*=\\s+\\(\\s*DESCRIPTION\\s*=\\s+\\(\\s*ADDRESS_LIST\\s*=\\s+\\(\\s*ADDRESS\\s*=\\s*\\(\\s*PROTOCOL\\s*=\\s*(?&lt;protocol&gt;\\w+)\\)\\s*\\(\\s*HOST\\s*=\\s*(?&lt;host&gt;[^\\)]+)\\)\\s*\\(\\s*PORT\\s*=\\s*(?&lt;port&gt;\\d+)\\s*\\)\\s*\\)\\s+\\)\\s+\\(\\s*CONNECT_DATA\\s*=\\s+\\(\\s*SERVICE_NAME\\s*=\\s*(?&lt;svcname&gt;\\w+)\\s*\\)\\s+\\)\\s+\\)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?&"}, "matches": []}, {"regex": "^(atuvwdxyzad|abcefdghijd|almnodpqrsd|a&#223;?ded???&#181;d?p?sd)(ktuvwdxyzad|kbcefdghijd|klmnodpqrsd|k&#223;?ded???&#181;d?p?sd)*", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "multiple repeat"}, "matches": []}, {"regex": "^[1-9]{1}[0-9]{3}\\s?[A-Z]{2}$", "exceptionStackTrace": null, "matches": ["1000AA", "1000 AA"], "nonMatches": ["1000 AAA", "1000 A", "1000  AA", "10000 AA", "100 AA", "11000 AA", "000 AA", "0000 AA"]}, {"regex": "^([0-1]?\\d|2[0-3]):([0-5]\\d)$", "exceptionStackTrace": null, "matches": ["0:00", "20:00", "00:00"], "nonMatches": ["24:00", "00:60", "000:00"]}, {"regex": "(?<expo>public\\:|protected\\:|private\\:) (?<ret>(const )*(void|int|unsigned int|long|unsigned long|float|double|(class .*)|(enum .*))) (?<decl>__thiscall|__cdecl|__stdcall|__fastcall|__clrcall) (?<ns>.*)\\:\\:(?<class>(.*)((<.*>)*))\\:\\:(?<method>(.*)((<.*>)*))\\((?<params>((.*(<.*>)?)(,)?)*)\\)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<e"}, "matches": []}, {"regex": "([0-0]{1}[1-9]{1}[0-9]{9})|[1-9]{1}[0-9]{9}", "exceptionStackTrace": null, "matches": ["10000000000", "010000000000", "011000000000", "001000000000", "11000000000", "1000000000", "01000000000"], "nonMatches": ["100000000", "000000000", "0100000000", "0000000000", "00000000000"]}, {"regex": "(src|href|action)\\s*=\\s*(&#39;|&quot;|(?!&quot;|&#39;))(?!(http:|ftp:|mailto:|https:|#))", "exceptionStackTrace": null, "matches": ["src =  &#39;", "src =&#39;", "src  = &#39;", "src= &#39;", "action=&#39;", "href=&#39;", "src=", "src=&quot;", "src=&#39;", "action = &#39;", "href = &#39;", "src = ", "src = &quot;", "src = &#39;"], "nonMatches": []}, {"regex": "[0-9][0-9][0-9][0-9]-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])\\s{1}(0[0-9]|1[0-9]|2[0-3]):([0-5][0-9])", "exceptionStackTrace": null, "matches": ["0000-10-01 00:00", "0000-01-30 00:00", "0000-01-20 00:00", "0000-01-10 00:00", "0000-01-01 20:00", "0000-01-01 10:00", "0000-01-01 00:00"], "nonMatches": ["0000-13-01 00:00", "0000-01-32 00:00", "0000-01-01 24:00", "0000-01-01 00:60", "0000-01-01  00:00", "0000-01-0100:00", "0000-01-00 00:00", "0000-00-01 00:00"]}, {"regex": "(?:(?:[123]|I{1,3})\\s*)?(?:[A-Z][a-zA-Z]+|Song of Songs|Song of Solomon).?\\s*(?:1?[0-9]?[0-9]):\\s*\\d{1,3}(?:[,-]\\s*\\d{1,3})*(?:;\\s*(?:(?:[123]|I{1,3})\\s*)?(?:[A-Z][a-zA-Z]+|Song of Songs|Song of Solomon)?.?\\s*(?:1?[0-9]?[0-9]):\\s*\\d{1,3}(?:[,-]\\s*\\d{1,3})*)*", "exceptionStackTrace": null, "matches": ["IIII Aevila 100: 0- 0; 3 Aevila 100: 0- 0", "III Aevila 100: 0- 0; 3 Aevila 100: 0- 0", " Aevila 100: 0- 0; 3 Aevila 100: 0- 0", "3 Aevila 100: 0- 0; IIII Aevila 100: 0- 0", "3 Aevila 100: 0- 0; III Aevila 100: 0- 0", "3 Aevila 100: 0- 0;  Aevila 100: 0- 0", "3 Aevila 100: 0- 0; 3 Aevila 100: 0- 0; 3 Aevila 100: 0- 0", "3 Aevila 100: 0- 0", "3 Aevila 100: 0- 0; 3 Aevila 100: 0- 0- 0", "3 Aevila 100: 0- 0; 3 Aevila 100: 0", "3 Aevila 100: 0- 0; 3 Aevila 100: 0- 0000", "3 Aevila 100: 0- 0; 3 Aevila 100: 0- 000", "3 Aevila 100: 0- 0; 3 Aevila 100: 0- ", "3 Aevila 100: 0- 0; 3 Aevila 100: 0-  0", "3 Aevila 100: 0- 0; 3 Aevila 100: 0-0", "3 Aevila 100: 0- 0; 3 Aevila 100: 0, 0", "3 Aevila 100: 0- 0; 3 Aevila 100: 0000- 0", "3 Aevila 100: 0- 0; 3 Aevila 100: 000- 0", "3 Aevila 100: 0- 0; 3 Aevila 100: - 0", "3 Aevila 100: 0- 0; 3 Aevila 100:  0- 0", "3 Aevila 100: 0- 0; 3 Aevila 100:0- 0", "3 Aevila 100: 0- 0; 3 Aevila 1000: 0- 0", "3 Aevila 100: 0- 0; 3 Aevila 10: 0- 0", "3 Aevila 100: 0- 0; 3 Aevila 1100: 0- 0", "3 Aevila 100: 0- 0; 3 Aevila 00: 0- 0", "3 Aevila 100: 0- 0; 3 Aevila  100: 0- 0", "3 Aevila 100: 0- 0; 3 Aevila100: 0- 0", "3 Aevila 100: 0- 0; 3 Aevilaa 100: 0- 0", "3 Aevila 100: 0- 0; 3 Aevil 100: 0- 0", "3 Aevila 100: 0- 0; 3 AevilA 100: 0- 0", "3 Aevila 100: 0- 0; 3 Aevil; 100: 0- 0", "3 Aevila 100: 0- 0; 3 Aevil: 100: 0- 0", "3 Aevila 100: 0- 0; 3 Aevil0 100: 0- 0", "3 Aevila 100: 0- 0; 3 Aevil- 100: 0- 0", "3 Aevila 100: 0- 0; 3 Aevil, 100: 0- 0", "3 Aevila 100: 0- 0; 3 Aevil  100: 0- 0", "3 Aevila 100: 0- 0; 3 AevilAevila 100: 0- 0", "3 Aevila 100: 0- 0; 3 a 100: 0- 0", "3 Aevila 100: 0- 0; 3 AeVila 100: 0- 0", "3 Aevila 100: 0- 0; 3 AEVILa 100: 0- 0", "3 Aevila 100: 0- 0; 3 Aev_ila 100: 0- 0", "3 Aevila 100: 0- 0; 3 Aev ila 100: 0- 0", "3 Aevila 100: 0- 0; 3 Aev4ila 100: 0- 0", "3 Aevila 100: 0- 0; 3 Aea 100: 0- 0", "3 Aevila 100: 0- 0; 3 A a 100: 0- 0", "3 Aevila 100: 0- 0; 3 A6a 100: 0- 0", "3 Aevila 100: 0- 0; 3 A_a 100: 0- 0", "3 Aevila 100: 0- 0; 3 Aa 100: 0- 0", "3 Aevila 100: 0- 0; 3 3 Aevila 100: 0- 0", "3 Aevila 100: 0- 0; Aevila 100: 0- 0", "3 Aevila 100: 0- 0; 3  Aevila 100: 0- 0", "3 Aevila 100: 0- 0; 3Aevila 100: 0- 0", "3 Aevila 100: 0- 0; 2 Aevila 100: 0- 0", "3 Aevila 100: 0- 0; 1 Aevila 100: 0- 0", "3 Aevila 100: 0- 0; 0 Aevila 100: 0- 0", "3 Aevila 100: 0- 0;  3 Aevila 100: 0- 0", "3 Aevila 100: 0- 0;3 Aevila 100: 0- 0", "3 Aevila 100: 0- 0- 0; 3 Aevila 100: 0- 0", "3 Aevila 100: 0; 3 Aevila 100: 0- 0", "3 Aevila 100: 0- 0000; 3 Aevila 100: 0- 0", "3 Aevila 100: 0- 000; 3 Aevila 100: 0- 0", "3 Aevila 100: 0- ; 3 Aevila 100: 0- 0", "3 Aevila 100: 0-  0; 3 Aevila 100: 0- 0", "3 Aevila 100: 0-0; 3 Aevila 100: 0- 0", "3 Aevila 100: 0, 0; 3 Aevila 100: 0- 0", "3 Aevila 100: 0000- 0; 3 Aevila 100: 0- 0", "3 Aevila 100: 000- 0; 3 Aevila 100: 0- 0", "3 Aevila 100: - 0; 3 Aevila 100: 0- 0", "3 Aevila 100:  0- 0; 3 Aevila 100: 0- 0", "3 Aevila 100:0- 0; 3 Aevila 100: 0- 0", "3 Aevila 1000: 0- 0; 3 Aevila 100: 0- 0", "3 Aevila 10: 0- 0; 3 Aevila 100: 0- 0", "3 Aevila 1100: 0- 0; 3 Aevila 100: 0- 0", "3 Aevila 00: 0- 0; 3 Aevila 100: 0- 0", "3 Aevila  100: 0- 0; 3 Aevila 100: 0- 0", "3 Aevila100: 0- 0; 3 Aevila 100: 0- 0", "3 Aevilaa 100: 0- 0; 3 Aevila 100: 0- 0", "3 Aevil 100: 0- 0; 3 Aevila 100: 0- 0", "3 AevilA 100: 0- 0; 3 Aevila 100: 0- 0", "3 Aevil; 100: 0- 0; 3 Aevila 100: 0- 0", "3 Aevil: 100: 0- 0; 3 Aevila 100: 0- 0", "3 Aevil0 100: 0- 0; 3 Aevila 100: 0- 0", "3 Aevil- 100: 0- 0; 3 Aevila 100: 0- 0", "3 Aevil, 100: 0- 0; 3 Aevila 100: 0- 0", "3 Aevil  100: 0- 0; 3 Aevila 100: 0- 0", "3 AeVila 100: 0- 0; 3 Aevila 100: 0- 0", "3 AEVILa 100: 0- 0; 3 Aevila 100: 0- 0", "3 Aev_ila 100: 0- 0; 3 Aevila 100: 0- 0", "3 Aev ila 100: 0- 0; 3 Aevila 100: 0- 0", "3 Aev4ila 100: 0- 0; 3 Aevila 100: 0- 0", "3 Aea 100: 0- 0; 3 Aevila 100: 0- 0", "3 A a 100: 0- 0; 3 Aevila 100: 0- 0", "3 A6a 100: 0- 0; 3 Aevila 100: 0- 0", "3 A_a 100: 0- 0; 3 Aevila 100: 0- 0", "3 Aa 100: 0- 0; 3 Aevila 100: 0- 0", "3 3 Aevila 100: 0- 0; 3 Aevila 100: 0- 0", "Aevila 100: 0- 0; 3 Aevila 100: 0- 0", "3  Aevila 100: 0- 0; 3 Aevila 100: 0- 0", "3Aevila 100: 0- 0; 3 Aevila 100: 0- 0", "2 Aevila 100: 0- 0; 3 Aevila 100: 0- 0", "1 Aevila 100: 0- 0; 3 Aevila 100: 0- 0", "0 Aevila 100: 0- 0; 3 Aevila 100: 0- 0", "Song of Solomon0:0", "Song of Songs0:0", "Aevil0:0", "I Aevila 100: 0- 0; 3 Aevila 100: 0- 0", "3 Song of Solomona 100: 0- 0; 3 Aevila 100: 0- 0", "3 Song of Songsa 100: 0- 0; 3 Aevila 100: 0- 0", "3 Aevila 100: 0- 0; I Aevila 100: 0- 0", "3 Aevila 100: 0- 0; 3 Song of Solomona 100: 0- 0", "3 Aevila 100: 0- 0; 3 Song of Songsa 100: 0- 0", "3 Aevila 100: 0- 0; 3 Aevila 100: 0- 0"], "nonMatches": []}, {"regex": "^\\$[0-9]+(\\.[0-9][0-9])?$", "exceptionStackTrace": null, "matches": ["$00.00", "$0", "$0.00"], "nonMatches": ["$0.00.00", "$.00"]}, {"regex": "^(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1})([\\/])(0[1-9]{1}|1[0-2]{1})([\\/])([19|20]+[0-9]{2})$", "exceptionStackTrace": null, "matches": ["01/01/0000", "01/01/|00", "01/01/900", "01/01/200", "01/01/100", "30/01/000", "10/01/000", "01/10/000", "01/01/000"], "nonMatches": ["300/01/000", "3/01/000", "32/01/000", "100/01/000", "1/01/000", "110/01/000", "01/100/000", "01/1/000", "01/13/000", "01/01/00", "01/01/300", "01/011/000", "01/0/000", "01/00/000", "011/01/000", "0/01/000", "00/01/000"]}, {"regex": "^[^&#39;]*?\\&lt;\\s*Assembly\\s*:\\s*AssemblyVersion\\s*\\(\\s*&quot;(\\*|[0-9]+.\\*|[0-9]+.[0-9]+.\\*|[0-9]+.[0-9]+.[0-9]+.\\*|[0-9]+.[0-9]+.[0-9]+.[0-9]+)&quot;\\s*\\)\\s*\\&gt;.*$", "exceptionStackTrace": null, "matches": ["evil&lt; Assembly : AssemblyVersion ( &quot;0a0a0a00&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0a0A0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0a0;0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0a0:0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0a000&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0a0*0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0a0)0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0a0(0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0a0&0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0a0#0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0a0 0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0a00a0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0A0a0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0;0a0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0:0a0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a000a0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0*0a0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0)0a0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0(0a0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0&0a0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0#0a0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0 0a0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a00a0a0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0A0a0a0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0;0a0a0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0:0a0a0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;000a0a0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0*0a0a0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0)0a0a0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0(0a0a0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0&0a0a0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0#0a0a0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0 0a0a0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;00a0a0a0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0a0A*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0a0;*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0a0:*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0a00*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0a0**&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0a0)*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0a0(*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0a0&*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0a0#*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0a0 *&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0a00a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0A0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0;0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0:0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a000a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0*0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0)0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0(0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0&0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0#0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0 0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a00a0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0A0a0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0;0a0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0:0a0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;000a0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0*0a0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0)0a0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0(0a0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0&0a0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0#0a0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0 0a0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;00a0a0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0A*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0;*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0:*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a00*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0**&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0)*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0(*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0&*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0#*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0 *&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a00a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0A0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0;0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0:0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;000a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0*0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0)0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0(0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0&0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0#0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0 0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;00a0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0A*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0;*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0:*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;00*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0**&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0)*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0(*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0&*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0#*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0 *&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;00a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;;", "evil&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;:", "evil&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;*", "evil&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;)", "evil&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;(", "evil&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;&", "evil&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;#", "evil&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;eVil", "evil&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;EVIL", "evil&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;ev_il", "evil&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;ev il", "evil&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;ev4il", "evil&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;e", "evil&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt; ", "evil&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;6", "evil&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;_", "evil&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;", "evil&lt; Assembly : AssemblyVersion ( &quot;*&quot; )  &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;*&quot; )&gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;*&quot;  ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;*&quot;) &gt;evil", "evil&lt; Assembly : AssemblyVersion (  &quot;*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion (&quot;*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion  ( &quot;*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion( &quot;*&quot; ) &gt;evil", "evil&lt; Assembly :  AssemblyVersion ( &quot;*&quot; ) &gt;evil", "evil&lt; Assembly :AssemblyVersion ( &quot;*&quot; ) &gt;evil", "evil&lt; Assembly  : AssemblyVersion ( &quot;*&quot; ) &gt;evil", "evil&lt; Assembly: AssemblyVersion ( &quot;*&quot; ) &gt;evil", "evil&lt;  Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;evil", "evil&lt;Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;evil", ":&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;evil", "*&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;evil", ")&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;evil", "(&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;evil", "eVil&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;evil", "EVIL&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;evil", "ev_il&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;evil", "ev il&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;evil", "ev4il&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;evil", "e&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;evil", " &lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;evil", "6&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;evil", "_&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;evil", "&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;evil", "&lt;Assembly:AssemblyVersion(&quot;0a0a0a0&quot;)&gt;", "&lt;Assembly:AssemblyVersion(&quot;0a0a0a*&quot;)&gt;", "&lt;Assembly:AssemblyVersion(&quot;0a0a*&quot;)&gt;", "&lt;Assembly:AssemblyVersion(&quot;0a*&quot;)&gt;", "&lt;Assembly:AssemblyVersion(&quot;*&quot;)&gt;", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0a0a0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0a0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;evil"], "nonMatches": ["evil&lt; Assembly : AssemblyVersion ( &quot;0a0a0a&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0aa0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0aa0a0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;a0a0a0&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0a0aa*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0aa0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;a0a0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;0aa*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;a0a*&quot; ) &gt;evil", "evil&lt; Assembly : AssemblyVersion ( &quot;a*&quot; ) &gt;evil", ";&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;evil", "&&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;evil", "#&lt; Assembly : AssemblyVersion ( &quot;*&quot; ) &gt;evil"]}, {"regex": "([a-zA-Z0-9_\\-\\.]+)(@[a-zA-Z0-9_\\-\\.]+)", "exceptionStackTrace": null, "matches": ["evil@.", "evil@-", "evil@eVil", "evil@EVIL", "evil@ev_il", "evil@ev il", "evil@ev4il", "evil@e", "evil@6", "evil@_", ".@evil", "-@evil", "eVil@evil", "EVIL@evil", "ev_il@evil", "ev il@evil", "ev4il@evil", "e@evil", "6@evil", "_@evil", "evil@evil"], "nonMatches": ["evil@@", "evil@ ", "evil@", "@@evil", " @evil", "@evil"]}, {"regex": "(?:(?:(?:http|ftp|gopher|telnet|news)://)(?:w{3}\\.)?(?:[a-zA-Z0-9/;\\?&=:\\-_\\$\\+!\\*&#39;\\(\\|\\\\~\\[\\]#%\\.])+)", "exceptionStackTrace": null, "matches": ["http://www...", "http://www.", "http://www.~", "http://www.|", "http://www.a", "http://www._", "http://www.]", "http://www.\\", "http://www.[", "http://www.A", "http://www.?", "http://www.=", "http://www.;", "http://www.:", "http://www.9", "http://www.3", "http://www.0", "http://www./", "http://www.-", "http://www.+", "http://www.*", "http://www.(", "http://www.&", "http://www.%", "http://www.$", "http://www.#", "http://www.!", "http://www.www..", "http://wwww..", "http://ww..", "news://.", "telnet://.", "gopher://.", "ftp://.", "http://.", "news://www..", "telnet://www..", "gopher://www..", "ftp://www..", "http://www.."], "nonMatches": []}, {"regex": "(?:(?:(?:\\+)?1[\\-\\s\\.])?(?:\\s?\\()?(?:[2-9][0-8][0-9])(?:\\))?(?:[\\s|\\-|\\.])?)(?:(?:(?:[2-9][0-9|A-Z][0-9|A-Z])(?:[\\s|\\-|\\.])?)(?:[0-9|A-Z][0-9|A-Z][0-9|A-Z][0-9|A-Z]))", "exceptionStackTrace": null, "matches": ["+1. (200).2||.|||A", "+1. (200).2||.|||0", "+1. (200).2||.||A|", "+1. (200).2||.||0|", "+1. (200).2||.|A||", "+1. (200).2||.|0||", "+1. (200).2||.A|||", "+1. (200).2||.0|||", "+1. (200).2||||||", "+1. (200).2|||||||", "+1. (200).2||-||||", "+1. (200).2|| ||||", "+1. (200).2|A.||||", "+1. (200).2|0.||||", "+1. (200).2A|.||||", "+1. (200).20|.||||", "+1. (200)2||.||||", "+1. (200)|2||.||||", "+1. (200)-2||.||||", "+1. (200) 2||.||||", "+1. (200.2||.||||", "+1. ( (200).2||.||||", "+1.200).2||.||||", "+1.  (200).2||.||||", "+1.(200).2||.||||", "+1.+1. (200).2||.||||", " (200).2||.||||", "+1- (200).2||.||||", "+1  (200).2||.||||", "++1. (200).2||.||||", "1. (200).2||.||||", "2002||||||", "+1. (200).2||.||||"], "nonMatches": ["+1. (200).2||..||||", "+1. (200).0||.||||", "+1. (200)..2||.||||", "+1. (200)).2||.||||", "+1. (290).2||.||||", "+1. (000).2||.||||"]}, {"regex": "^[???-??-?a-zA-Z????????]{2}\\d{6}$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (bad range): Invalid range: ?-?"}, "matches": [], "nonMatches": []}, {"regex": "for mobile:^[0][1-9]{1}[0-9]{9}$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["for mobile:010000000000", "for mobile:0100000000", "for mobile:011000000000", "for mobile:0000000000", "for mobile:00000000000", "for mobile:01000000000"]}, {"regex": "^[0][1-9]{2}(-)[0-9]{8}$  and  ^[0][1-9]{3}(-)[0-9]{7}$  and  ^[0][1-9]{4}(-)[0-9]{6}$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["011-00000000  and  0111-0000000  and  01111-0000000", "011-00000000  and  0111-0000000  and  01111-00000", "011-00000000  and  0111-0000000  and  011111-000000", "011-00000000  and  0111-0000000  and  0111-000000", "011-00000000  and  0111-0000000  and  00111-000000", "011-00000000  and  0111-00000000  and  01111-000000", "011-00000000  and  0111-000000  and  01111-000000", "011-00000000  and  01111-0000000  and  01111-000000", "011-00000000  and  011-0000000  and  01111-000000", "011-00000000  and  0011-0000000  and  01111-000000", "011-000000000  and  0111-0000000  and  01111-000000", "011-0000000  and  0111-0000000  and  01111-000000", "0111-00000000  and  0111-0000000  and  01111-000000", "01-00000000  and  0111-0000000  and  01111-000000", "001-00000000  and  0111-0000000  and  01111-000000", "011-00000000  and  0111-0000000  and  01111-000000"]}, {"regex": "\\w+([-+.&#39;]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*", "exceptionStackTrace": null, "matches": ["evil;evil@evil.evil.evil.eVil", "evil;evil@evil.evil.evil.EVIL", "evil;evil@evil.evil.evil.ev_il", "evil;evil@evil.evil.evil.ev il", "evil;evil@evil.evil.evil.ev4il", "evil;evil@evil.evil.evil.e", "evil;evil@evil.evil.evil. ", "evil;evil@evil.evil.evil.6", "evil;evil@evil.evil.evil._", "evil;evil@evil.evil.evil.", "evil;evil@evil.evil.evil-evil", "evil;evil@evil.evil.eVil.evil", "evil;evil@evil.evil.EVIL.evil", "evil;evil@evil.evil.ev_il.evil", "evil;evil@evil.evil.ev il.evil", "evil;evil@evil.evil.ev4il.evil", "evil;evil@evil.evil.e.evil", "evil;evil@evil.evil. .evil", "evil;evil@evil.evil.6.evil", "evil;evil@evil.evil._.evil", "evil;evil@evil.evil..evil", "evil;evil@evil.evil.evil.evil.evil", "evil;evil@evil.evil.evil", "evil;evil@evil.eVil.evil.evil", "evil;evil@evil.EVIL.evil.evil", "evil;evil@evil.ev_il.evil.evil", "evil;evil@evil.ev il.evil.evil", "evil;evil@evil.ev4il.evil.evil", "evil;evil@evil.e.evil.evil", "evil;evil@evil.6.evil.evil", "evil;evil@evil._.evil.evil", "evil;evil@evil-evil.evil.evil", "evil;evil@eVil.evil.evil.evil", "evil;evil@EVIL.evil.evil.evil", "evil;evil@ev_il.evil.evil.evil", "evil;evil@ev4il.evil.evil.evil", "evil;evil@e.evil.evil.evil", "evil;evil@6.evil.evil.evil", "evil;evil@_.evil.evil.evil", "evil;evil;evil@evil.evil.evil.evil", "evil@evil.evil.evil.evil", "evil;eVil@evil.evil.evil.evil", "evil;EVIL@evil.evil.evil.evil", "evil;ev_il@evil.evil.evil.evil", "evil;ev il@evil.evil.evil.evil", "evil;ev4il@evil.evil.evil.evil", "evil;e@evil.evil.evil.evil", "evil;6@evil.evil.evil.evil", "evil;_@evil.evil.evil.evil", "evil9evil@evil.evil.evil.evil", "evil3evil@evil.evil.evil.evil", "evil0evil@evil.evil.evil.evil", "evil.evil@evil.evil.evil.evil", "evil-evil@evil.evil.evil.evil", "evil+evil@evil.evil.evil.evil", "evil&evil@evil.evil.evil.evil", "evil#evil@evil.evil.evil.evil", "eVil;evil@evil.evil.evil.evil", "EVIL;evil@evil.evil.evil.evil", "ev_il;evil@evil.evil.evil.evil", "ev il;evil@evil.evil.evil.evil", "ev4il;evil@evil.evil.evil.evil", "e;evil@evil.evil.evil.evil", " ;evil@evil.evil.evil.evil", "6;evil@evil.evil.evil.evil", "_;evil@evil.evil.evil.evil", ";evil@evil.evil.evil.evil", "evil@evil.evil", "evil;evil@evil.evil.evil.evil"], "nonMatches": ["evil;evil@evil. .evil.evil", "evil;evil@evil..evil.evil", "evil;evil@ev il.evil.evil.evil", "evil;evil@ .evil.evil.evil", "evil;evil@.evil.evil.evil", "evil; @evil.evil.evil.evil", "evil;@evil.evil.evil.evil"]}, {"regex": "^((\\+){1}91){1}[1-9]{1}[0-9]{9}$", "exceptionStackTrace": null, "matches": ["+911000000000"], "nonMatches": ["+9110000000000", "+91100000000", "+9111000000000", "+91000000000", "+910000000000", "+91+911000000000", "1000000000", "++911000000000", "911000000000"]}, {"regex": "^(?<full>(?<part1>[ABCEGHJKLMNPRSTVXY]{1}\\d{1}[A-Z]{1})(?:[ ](?=\\d))?(?<part2>\\d{1}[A-Z]{1}\\d{1}))$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<f"}, "matches": []}, {"regex": "^(((Ctrl\\+Shift\\+Alt\\+|Ctrl\\+Shift\\+|Ctrl\\+Alt\\+|Shift\\+Alt\\+|Ctrl\\+|Alt\\+){1}(F1[0-2]|F[1-9]|[A-Za-z0-9\\-\\=\\[\\]\\\\\\;\\&#39;\\,\\.\\/]){1}){1}|(Shift\\+)?(F1[0-2]|F[1-9]){1})$", "exceptionStackTrace": null, "matches": ["Ctrl+Shift+Alt+a", "Ctrl+Shift+Alt+]", "Ctrl+Shift+Alt+\\", "Ctrl+Shift+Alt+[", "Ctrl+Shift+Alt+A", "Ctrl+Shift+Alt+=", "Ctrl+Shift+Alt+;", "Ctrl+Shift+Alt+9", "Ctrl+Shift+Alt+3", "Ctrl+Shift+Alt+0", "Ctrl+Shift+Alt+.", "Ctrl+Shift+Alt+-", "Ctrl+Shift+Alt+,", "Ctrl+Shift+Alt+&", "Ctrl+Shift+Alt+#", "F1", "F10", "Shift+F1", "Shift+F10", "Alt+F10", "Ctrl+F10", "Shift+Alt+F10", "Ctrl+Alt+F10", "Ctrl+Shift+F10", "Ctrl+Shift+Alt+/", "Ctrl+Shift+Alt+F1", "Ctrl+Shift+Alt+F10"], "nonMatches": ["Shift+F0", "Shift+F10F10", "Shift+", "Shift+F13", "Shift+Shift+F10", "Ctrl+Shift+Alt+F0", "Ctrl+Shift+Alt+F10Ctrl+Shift+Alt+F10", "", "Ctrl+Shift+Alt+F10F10", "Ctrl+Shift+Alt+", "Ctrl+Shift+Alt+F13", "Ctrl+Shift+Alt+Ctrl+Shift+Alt+F10"]}, {"regex": "^(((Ctrl\\+Alt\\+Shift\\+Cmd\\+|Ctrl\\+Shift\\+Cmd\\+|Ctrl\\+Alt\\+Shift\\+|Ctrl\\+Alt\\+Cmd\\+|Alt\\+Shift\\+Cmd\\+|Shift\\+Cmd\\+|Ctrl\\+Shift\\+|Ctrl\\+Cmd\\+|Ctrl\\+Alt\\+|Alt\\+Shift\\+|Alt\\+Cmd\\+|Cmd\\+|Alt\\+)(F1[0-2]|F[1-9]|[A-Za-z0-9\\-\\=\\[\\]\\\\\\;\\&#39;\\,\\.\\/]))|(Shift\\+)?(F1[0-2]|F[1-9]))$", "exceptionStackTrace": null, "matches": ["Ctrl+Alt+Shift+Cmd+a", "Ctrl+Alt+Shift+Cmd+]", "Ctrl+Alt+Shift+Cmd+\\", "Ctrl+Alt+Shift+Cmd+[", "Ctrl+Alt+Shift+Cmd+A", "Ctrl+Alt+Shift+Cmd+=", "Ctrl+Alt+Shift+Cmd+;", "Ctrl+Alt+Shift+Cmd+9", "Ctrl+Alt+Shift+Cmd+3", "Ctrl+Alt+Shift+Cmd+0", "Ctrl+Alt+Shift+Cmd+.", "Ctrl+Alt+Shift+Cmd+-", "Ctrl+Alt+Shift+Cmd+,", "Ctrl+Alt+Shift+Cmd+&", "Ctrl+Alt+Shift+Cmd+#", "F1", "F10", "Shift+F1", "Shift+F10", "Alt+F10", "Cmd+F10", "Alt+Cmd+F10", "Alt+Shift+F10", "Ctrl+Alt+F10", "Ctrl+Cmd+F10", "Ctrl+Shift+F10", "Shift+Cmd+F10", "Alt+Shift+Cmd+F10", "Ctrl+Alt+Cmd+F10", "Ctrl+Alt+Shift+F10", "Ctrl+Shift+Cmd+F10", "Ctrl+Alt+Shift+Cmd+/", "Ctrl+Alt+Shift+Cmd+F1", "Ctrl+Alt+Shift+Cmd+F10"], "nonMatches": ["Shift+F0", "Shift+F13", "Shift+Shift+F10", "Ctrl+Alt+Shift+Cmd+F0", "Ctrl+Alt+Shift+Cmd+F13"]}, {"regex": "^[1-9]{1}$|^[1-9]{1}[0-9]{1}$|^[1-3]{1}[0-6]{1}[0-5]{1}$|^365$", "exceptionStackTrace": null, "matches": ["110", "11", "365", "100", "10", "1"], "nonMatches": ["106", "1000", "170", "1100", "000", "00", "", "0"]}, {"regex": "grdgr", "exceptionStackTrace": null, "matches": ["grdgr"], "nonMatches": []}, {"regex": "^\\s*(?&#39;num&#39;\\d+(\\.\\d+)?)\\s*(?&#39;unit&#39;((w(eek)?)|(wk)|(d(ay)?)|(h(our)?)|(hr))s?)(\\s*$)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?&"}, "matches": []}, {"regex": "^(GIR\\\\s{0,1}0AA|[A-PR-UWYZ]([0-9]{1,2}|([A-HK-Y][0-9]|[A-HK-Y][0-9]([0-9]|[ABEHMNPRV-Y]))|[0-9][A-HJKS-UW])\\\\s{0,1}[0-9][ABD-HJLNP-UW-Z]{2})$", "exceptionStackTrace": null, "matches": ["Z0S\\s0NN", "Z0K\\s0NN", "Z0J\\s0NN", "Z0A\\s0NN", "ZK0V\\s0NN", "ZK0P\\s0NN", "ZK0N\\s0NN", "ZK0M\\s0NN", "ZK0H\\s0NN", "ZK0E\\s0NN", "ZK0B\\s0NN", "ZK0A\\s0NN", "ZA00\\s0NN", "ZA0\\s0NN", "Z0\\s0WN", "Z0\\s0PN", "Z0\\s0LN", "Z0\\s0JN", "Z0\\s0DN", "Z0\\s0BN", "Z0\\s0AN", "Z00\\s0NN", "Y0\\s0NN", "W0\\s0NN", "R0\\s0NN", "A0\\s0NN", "Z0W\\0NN", "ZK0R\\0NN", "ZK00\\0NN", "ZK0\\0NN", "Z0\\0NN", "GIR\\0AA", "Z0W\\s0NN", "ZK0R\\s0NN", "ZK00\\s0NN", "ZK0\\s0NN", "Z0\\s0NN", "GIR\\s0AA"], "nonMatches": ["Z0I\\s0NN", "ZK0C\\s0NN", "ZI00\\s0NN", "ZI0\\s0NN", "Z0\\s0NNN", "Z0\\s0N", "Z0\\s0CN", "Z0\\ss0NN", "Z000\\s0NN", "Z\\s0NN", "Q0\\s0NN", "GIR\\ss0AA"]}, {"regex": "^.*(?=.{8,})(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(^[a-zA-Z0-9@\\$=!:.#%]+$)", "exceptionStackTrace": null, "matches": [], "nonMatches": ["evil@", "evil=", "evil:", "evil.", "evil%", "evil$", "evil#", "evil!", "evileVil", "evilEVIL", "evilev_il", "evilev il", "evilev4il", "evile", "evil ", "evil6", "evil_", "@evil", "=evil", ":evil", ".evil", "%evil", "$evil", "#evil", "!evil", "eVilevil", "EVILevil", "ev_ilevil", "ev ilevil", "ev4ilevil", "eevil", " evil", "6evil", "_evil", "evil", "evilevil"]}, {"regex": "http://www.spreety.com/", "exceptionStackTrace": null, "matches": ["http://wwwaspreetyAcom/", "http://wwwaspreety:com/", "http://wwwaspreety0com/", "http://wwwaspreety/com/", "http://wwwaspreety com/", "http://wwwAspreetyacom/", "http://www:spreetyacom/", "http://www0spreetyacom/", "http://www/spreetyacom/", "http://www spreetyacom/", "http://wwwaspreetyacom/"], "nonMatches": []}, {"regex": "^[-+]?(?:\\d+\\.?|\\.\\d)\\d*(?:[Ee][-+]?\\d+)?$", "exceptionStackTrace": null, "matches": ["+0.0", "+0.0e+00", "+0.0e0", "+0.0e-0", "+0.0E+0", "+0.00e+0", "+0.e+0", "+00e+0", "+00.0e+0", "+.0e+0", "0.0e+0", "-0.0e+0", ".0", "0", "+.00e+0", "+0.0e+0"], "nonMatches": ["+0.0e+0e+0", "+0.0e+", "+0.0e++0", "+0.0a+0", "+0.0A+0", "+0..0e+0", "++0.0e+0"]}, {"regex": "^([\\+]|0)[(\\s]{0,1}[2-9][0-9]{0,2}[\\s-)]{0,2}[0-9][0-9][0-9\\s-]*[0-9]$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character range \\s-)"}, "matches": []}, {"regex": " &#39;^[0-9]*[a-zA-Z]([-.\\w]*[0-9a-zA-Z])*@([a-zA-Z][-\\w\\.]*[0-9a-zA-Z]\\.)+[a-zA-Z]{2,9})$&#39;", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unbalanced parenthesis"}, "matches": []}, {"regex": "([+(]?\\d{0,2}[)]?)([-/.\\s]?\\d+)+", "exceptionStackTrace": null, "matches": ["(0).0.0", "(0)", "(0).00", "(0).", "(0)..0", "(0)0", "(0)/0", "(0)-0", "(0) 0", "(0)).0", "(0.0", "(000).0", "(00).0", "().0", "((0).0", "0).0", "+0).0", "0", "(0).0"], "nonMatches": []}, {"regex": "[({]?(0x)?[0-9a-fA-F]{8}([-,]?(0x)?[0-9a-fA-F]{4}){2}((-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12})|(,\\{0x[0-9a-fA-F]{2}(,0x[0-9a-fA-F]{2}){7}\\}))[)}]?", "exceptionStackTrace": null, "matches": ["{0xAAAAAAAA,0xAAAA,0xAAAA,{0xAA,0xaA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA}}", "{0xAAAAAAAA,0xAAAA,0xAAAA,{0xAA,0x0A,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA}}", "{0xAAAAAAAA,0xAAAA,0xAAAA,{0xaA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA}}", "{0xAAAAAAAA,0xAAAA,0xAAAA,{0x0A,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA}}", "{0xAAAAAAAA,0xAAAA,0xAAAA-AAAA-AAAAAAAAAAAA}}", "{0xAAAAAAAA,0xAAAA,0xAAAA-AAAA-AAAAAAAAAAAA", "{0xAAAAAAAA,0xAAAA,0xAAAA-AAAA-AAAAAAAAAAAA)", "{0xAAAAAAAA,0xAAAA,0xAAAA-AAAA-AAAAAAAAAAAAA}", "{0xAAAAAAAA,0xAAAA,0xAAAA-AAAA-aAAAAAAAAAAA}", "{0xAAAAAAAA,0xAAAA,0xAAAA-AAAA-0AAAAAAAAAAA}", "{0xAAAAAAAA,0xAAAA,0xAAAA-AAAAAAAAAAAAAAAA}", "{0xAAAAAAAA,0xAAAA,0xAAAA-aAAA-AAAAAAAAAAAA}", "{0xAAAAAAAA,0xAAAA,0xAAAA-0AAA-AAAAAAAAAAAA}", "{0xAAAAAAAA,0xAAAA,0xAAAAAAAA-AAAAAAAAAAAA}", "{0xAAAAAAAA,0xaAAA,0xAAAA-AAAA-AAAAAAAAAAAA}", "{0xAAAAAAAA,0x0AAA,0xAAAA-AAAA-AAAAAAAAAAAA}", "{0xAAAAAAAA,AAAA,0xAAAA-AAAA-AAAAAAAAAAAA}", "{0xAAAAAAAA0xAAAA,0xAAAA-AAAA-AAAAAAAAAAAA}", "{0xAAAAAAAA-0xAAAA,0xAAAA-AAAA-AAAAAAAAAAAA}", "{0xAAAAAAAAA,0xAAAA,0xAAAA-AAAA-AAAAAAAAAAAA}", "{0xaAAAAAAA,0xAAAA,0xAAAA-AAAA-AAAAAAAAAAAA}", "{0x0AAAAAAA,0xAAAA,0xAAAA-AAAA-AAAAAAAAAAAA}", "{0x0xAAAAAAAA,0xAAAA,0xAAAA-AAAA-AAAAAAAAAAAA}", "{AAAAAAAA,0xAAAA,0xAAAA-AAAA-AAAAAAAAAAAA}", "{{0xAAAAAAAA,0xAAAA,0xAAAA-AAAA-AAAAAAAAAAAA}", "0xAAAAAAAA,0xAAAA,0xAAAA-AAAA-AAAAAAAAAAAA}", "(0xAAAAAAAA,0xAAAA,0xAAAA-AAAA-AAAAAAAAAAAA}", "AAAAAAAAAAAA,0xAAAA,{0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA}", "AAAAAAAAAAAA,0xAAAAAAAAAAAAAAAAAAAA", "{0xAAAAAAAA,0xAAAA,0xAAAA,{0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA}}", "{0xAAAAAAAA,0xAAAA,0xAAAA-AAAA-AAAAAAAAAAAA}"], "nonMatches": ["{0xAAAAAAAA,0xAAAA,0xAAAA,{0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA}}", "{0xAAAAAAAA,0xAAAA,0xAAAA,{0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA}}", "{0xAAAAAAAA,0xAAAA,0xAAAA,{0xAA,0xAAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA}}", "{0xAAAAAAAA,0xAAAA,0xAAAA,{0xAA,0xA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA}}", "{0xAAAAAAAA,0xAAAA,0xAAAA,{0xAA,0xgA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA}}", "{0xAAAAAAAA,0xAAAA,0xAAAA,{0xAA,0xGA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA}}", "{0xAAAAAAAA,0xAAAA,0xAAAA,{0xAAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA}}", "{0xAAAAAAAA,0xAAAA,0xAAAA,{0xA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA}}", "{0xAAAAAAAA,0xAAAA,0xAAAA,{0xgA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA}}", "{0xAAAAAAAA,0xAAAA,0xAAAA,{0xGA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA}}", "{0xAAAAAAAA,0xAAAA,0xAAAA-AAAA-AAAAAAAAAAA}", "{0xAAAAAAAA,0xAAAA,0xAAAA-AAAA-gAAAAAAAAAAA}", "{0xAAAAAAAA,0xAAAA,0xAAAA-AAAA-GAAAAAAAAAAA}", "{0xAAAAAAAA,0xAAAA,0xAAAA-AAAA--AAAAAAAAAAAA}", "{0xAAAAAAAA,0xAAAA,0xAAAA-AAAAA-AAAAAAAAAAAA}", "{0xAAAAAAAA,0xAAAA,0xAAAA-AAA-AAAAAAAAAAAA}", "{0xAAAAAAAA,0xAAAA,0xAAAA-gAAA-AAAAAAAAAAAA}", "{0xAAAAAAAA,0xAAAA,0xAAAA-GAAA-AAAAAAAAAAAA}", "{0xAAAAAAAA,0xAAAA,0xAAAA--AAAA-AAAAAAAAAAAA}", "{0xAAAAAAAA,0xAAAA,0xAAAA,0xAAAA-AAAA-AAAAAAAAAAAA}", "{0xAAAAAAAA,0xAAAA-AAAA-AAAAAAAAAAAA}", "{0xAAAAAAAA,0xAAAAA,0xAAAA-AAAA-AAAAAAAAAAAA}", "{0xAAAAAAAA,0xAAA,0xAAAA-AAAA-AAAAAAAAAAAA}", "{0xAAAAAAAA,0xgAAA,0xAAAA-AAAA-AAAAAAAAAAAA}", "{0xAAAAAAAA,0xGAAA,0xAAAA-AAAA-AAAAAAAAAAAA}", "{0xAAAAAAAA,0x0xAAAA,0xAAAA-AAAA-AAAAAAAAAAAA}", "{0xAAAAAAAA,,0xAAAA,0xAAAA-AAAA-AAAAAAAAAAAA}", "{0xAAAAAAA,0xAAAA,0xAAAA-AAAA-AAAAAAAAAAAA}", "{0xgAAAAAAA,0xAAAA,0xAAAA-AAAA-AAAAAAAAAAAA}", "{0xGAAAAAAA,0xAAAA,0xAAAA-AAAA-AAAAAAAAAAAA}"]}, {"regex": "^(0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[012])/((19|20)\\d{2}|\\d{2})$", "exceptionStackTrace": null, "matches": ["30/01/1900", "10/01/1900", "01/11/1900", "01/10/1900", "31/01/1900", "20/01/1900", "01/12/1900", "01/01/00", "01/01/2000", "01/01/1900"], "nonMatches": ["32/01/1900", "01/13/1900", "01/01/000", "01/01/0", "01/01/19000", "01/01/190", "01/00/1900", "00/01/1900"]}, {"regex": "^p(ost)?[ |\\.]*o(ffice)?[ |\\.]*(box)?[ 0-9]*[^[a-z ]]*", "exceptionStackTrace": null, "matches": ["post.office.box A]]", "post.office.box A", "post.office.box |]", "post.office.box a]", "post.office.box ]]", "post.office.box []", "post.office.box 0]", "post.office.box .]", "post.office.box  ]", "post.office.box  A]", "post.office.boxA]", "post.office.box0A]", "post.office.boxbox A]", "post.office. A]", "post.office..box A]", "post.officebox A]", "post.office|box A]", "post.office box A]", "post.o.box A]", "post..office.box A]", "postoffice.box A]", "post|office.box A]", "post office.box A]", "p.office.box A]", "poA", "post.office.box A]"], "nonMatches": ["post.officeffice.box A]", "postost.office.box A]"]}, {"regex": "^-?\\d+([.,]?\\d+)?$", "exceptionStackTrace": null, "matches": ["-0", "-0,00", "-00", "-0.0", "-00,0", "0,0", "0", "-0,0"], "nonMatches": ["-0,0,0", "-0,", "-0,,0", "-,0", "--0,0"]}, {"regex": "^\\d+([.,]?\\d+)?$", "exceptionStackTrace": null, "matches": ["0,00", "00", "0.0", "00,0", "0", "0,0"], "nonMatches": ["0,0,0", "0,", "0,,0", ",0"]}, {"regex": "^-?\\d+([^.,])?$", "exceptionStackTrace": null, "matches": ["-0", "-0A", "-00", "-0-", "-0 ", "-00a", "0a", "0", "-0a"], "nonMatches": ["-0aa", "-0.", "-0,", "-a", "--0a"]}, {"regex": "^\\d+([^.,])?$", "exceptionStackTrace": null, "matches": ["0A", "00", "0 ", "00a", "0", "0a"], "nonMatches": ["0aa", "0.", "0,", "a"]}, {"regex": "(^([0-9]*[.][0-9]*[1-9]+[0-9]*)$)|(^([0-9]*[1-9]+[0-9]*[.][0-9]+)$)|(^([1-9]+[0-9]*)$)", "exceptionStackTrace": null, "matches": ["100", "110", "010.00", "0100.0", "01.0", "0110.0", "0010.0", "10.0", "0.0100", "0.01", "0.0110", "0.0010", "0.10", "00.010", ".010", "1", "1.0", ".1", "10", "010.0", "0.010"], "nonMatches": ["0", "00", "010.", "00.0", "000.0", "0.00", "0.000"]}, {"regex": "((?<html>(href|src)\\s*=\\s*&quot;)|(?<css>url\\())(?<url>.*?)(?(html)&quot;|\\))", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<h"}, "matches": []}, {"regex": "^(GIR|[A-Z]\\d[A-Z\\d]?|[A-Z]{2}\\d[A-Z\\d]?)[ ]??(\\d[A-Z]{0,2})??$", "exceptionStackTrace": null, "matches": ["AA0 0A", "AA0A 0A", "A0 0A", "A0A 0A", "GIR ", "GIR 0AA", "GIR 0", "GIR0A", "AA0", "A0", "GIR", "AA00 0A", "A00 0A", "GIR 0A"], "nonMatches": ["AA000 0A", "AAA00 0A", "A000 0A", "GIR 0A0A", "GIR 0AAA", "GIR  0A"]}, {"regex": "^(GIR|[A-Z]\\d[A-Z\\d]??|[A-Z]{2}\\d[A-Z\\d]??)[ ]??(\\d[A-Z]{2})$", "exceptionStackTrace": null, "matches": ["AA0 0AA", "AA0A 0AA", "A0 0AA", "A0A 0AA", "AA00AA", "A00AA", "GIR0AA", "AA00 0AA", "A00 0AA", "GIR 0AA"], "nonMatches": ["AA000 0AA", "AAA00 0AA", "A000 0AA", "GIR 0AAA", "GIR 0A", "GIR  0AA"]}, {"regex": "(\\s(\\bon[a-zA-Z][a-z]+)\\s?\\=\\s?[\\&#39;\\&quot;]?(javascript\\:)?[\\w\\(\\),\\&#39; ]*;?[\\&#39;\\&quot;]?)+", "exceptionStackTrace": null, "matches": [" onAevil = ;javascript:evil;; onAevil = ;javascript:evil;;", " onAevil = ;javascript:evil;u", " onAevil = ;javascript:evil;t", " onAevil = ;javascript:evil;q", " onAevil = ;javascript:evil;o", " onAevil = ;javascript:evil;a", " onAevil = ;javascript:evil;9", " onAevil = ;javascript:evil;3", " onAevil = ;javascript:evil;0", " onAevil = ;javascript:evil;&", " onAevil = ;javascript:evil;#", " onAevil = ;javascript:evil;;;", " onAevil = ;javascript:evil;", " onAevil = ;javascript:=;;", " onAevil = ;javascript:;;;", " onAevil = ;javascript::;;", " onAevil = ;javascript:,;;", " onAevil = ;javascript:);;", " onAevil = ;javascript:(;;", " onAevil = ;javascript:&;;", " onAevil = ;javascript:#;;", " onAevil = ;javascript:eVil;;", " onAevil = ;javascript:EVIL;;", " onAevil = ;javascript:ev_il;;", " onAevil = ;javascript:ev il;;", " onAevil = ;javascript:ev4il;;", " onAevil = ;javascript:e;;", " onAevil = ;javascript: ;;", " onAevil = ;javascript:6;;", " onAevil = ;javascript:_;;", " onAevil = ;javascript:;;", " onAevil = ;javascript:javascript:evil;;", " onAevil = ;evil;;", " onAevil = ;;javascript:evil;;", " onAevil = javascript:evil;;", " onAevil = ujavascript:evil;;", " onAevil = tjavascript:evil;;", " onAevil = qjavascript:evil;;", " onAevil = ojavascript:evil;;", " onAevil = ajavascript:evil;;", " onAevil = 9javascript:evil;;", " onAevil = 3javascript:evil;;", " onAevil = 0javascript:evil;;", " onAevil = &javascript:evil;;", " onAevil = #javascript:evil;;", " onAevil =  ;javascript:evil;;", " onAevil =;javascript:evil;;", " onAevil= ;javascript:evil;;", " onAe = ;javascript:evil;;", " onaevil = ;javascript:evil;;", " onAevil=", " onAevil = ;javascript:evil;;"], "nonMatches": ["", " onAevil  = ;javascript:evil;;", " onAeVil = ;javascript:evil;;", " onAEVIL = ;javascript:evil;;", " onAev_il = ;javascript:evil;;", " onAev il = ;javascript:evil;;", " onAev4il = ;javascript:evil;;", " onA  = ;javascript:evil;;", " onA6 = ;javascript:evil;;", " onA_ = ;javascript:evil;;", " onA = ;javascript:evil;;"]}, {"regex": "^((0[1-9])|(1[0-2]))\\/(\\d{4})$", "exceptionStackTrace": null, "matches": ["10/0000", "01/0000"], "nonMatches": ["13/0000", "01/00000", "01/000", "00/0000"]}, {"regex": "(href=|url|import).*[\\&#39;&quot;]([^(http:)].*css)[\\&#39;&quot;]", "exceptionStackTrace": null, "matches": ["href=evil;aevilcssu", "href=evil;aevilcsst", "href=evil;aevilcssq", "href=evil;aevilcsso", "href=evil;aevilcss9", "href=evil;aevilcss3", "href=evil;aevilcss&", "href=evil;aevilcss#", "href=evil;a=css;", "href=evil;a;css;", "href=evil;a:css;", "href=evil;a)css;", "href=evil;a(css;", "href=evil;a&css;", "href=evil;a#css;", "href=evil;aeVilcss;", "href=evil;aEVILcss;", "href=evil;aev_ilcss;", "href=evil;aev ilcss;", "href=evil;aev4ilcss;", "href=evil;aecss;", "href=evil;a css;", "href=evil;a6css;", "href=evil;a_css;", "href=evil;acss;", "href=evil;tevilcss;", "href=evil;Aevilcss;", "href=evil;=evilcss;", "href=evil;;evilcss;", "href=evil;0evilcss;", "href=evil;&evilcss;", "href=evil;#evilcss;", "href=evil; evilcss;", "href=eviluaevilcss;", "href=eviltaevilcss;", "href=evilqaevilcss;", "href=eviloaevilcss;", "href=evil9aevilcss;", "href=evil3aevilcss;", "href=evil&aevilcss;", "href=evil#aevilcss;", "href==;aevilcss;", "href=;;aevilcss;", "href=:;aevilcss;", "href=);aevilcss;", "href=(;aevilcss;", "href=&;aevilcss;", "href=#;aevilcss;", "href=eVil;aevilcss;", "href=EVIL;aevilcss;", "href=ev_il;aevilcss;", "href=ev il;aevilcss;", "href=ev4il;aevilcss;", "href=e;aevilcss;", "href= ;aevilcss;", "href=6;aevilcss;", "href=_;aevilcss;", "href=;aevilcss;", "import;acss;", "url;acss;", "href=;acss;", "importevil;aevilcss;", "urlevil;aevilcss;", "href=evil;aevilcss;"], "nonMatches": ["href=evil;aevilcssa", "href=evil;aevilcss0", "href=evil;pevilcss;", "href=evil;hevilcss;", "href=evil;:evilcss;", "href=evil;)evilcss;", "href=evil;(evilcss;", "href=evilaaevilcss;", "href=evil0aevilcss;"]}, {"regex": "^(([a-h,A-H,j-n,J-N,p-z,P-Z,0-9]{9})([a-h,A-H,j-n,J-N,p,P,r-t,R-T,v-z,V-Z,0-9])([a-h,A-H,j-n,J-N,p-z,P-Z,0-9])(\\d{6}))$", "exceptionStackTrace": null, "matches": [",,,,,,,,,,p000000", ",,,,,,,,,,j000000", ",,,,,,,,,,a000000", ",,,,,,,,,,P000000", ",,,,,,,,,,J000000", ",,,,,,,,,,A000000", ",,,,,,,,,,0000000", ",,,,,,,,,v,000000", ",,,,,,,,,r,000000", ",,,,,,,,,p,000000", ",,,,,,,,,j,000000", ",,,,,,,,,a,000000", ",,,,,,,,,V,000000", ",,,,,,,,,R,000000", ",,,,,,,,,P,000000", ",,,,,,,,,J,000000", ",,,,,,,,,A,000000", ",,,,,,,,,0,000000", "p,,,,,,,,,,000000", "j,,,,,,,,,,000000", "a,,,,,,,,,,000000", "P,,,,,,,,,,000000", "J,,,,,,,,,,000000", "A,,,,,,,,,,000000", "0,,,,,,,,,,000000", ",,,,,,,,,,,000000"], "nonMatches": [",,,,,,,,,,,0000000", ",,,,,,,,,,,00000", ",,,,,,,,,,i000000", ",,,,,,,,,,I000000", ",,,,,,,,,i,000000", ",,,,,,,,,I,000000", ",,,,,,,,,,,,000000", ",,,,,,,,,,000000", "i,,,,,,,,,,000000", "I,,,,,,,,,,000000"]}, {"regex": "^[a-zA-Z]{1,2}[0-9][0-9A-Za-z]{0,1} {0,1}[0-9][A-Za-z]{2}$", "exceptionStackTrace": null, "matches": ["A0a 0Aa", "A0a0aa", "A0 0aa", "A0A 0aa", "A00 0aa", "AA0a 0aa", "a0a 0aa", "A00aa", "A0a 0aa"], "nonMatches": ["A0a 0aaa", "A0a 0a", "A0a  0aa", "A0aa 0aa", "AAA0a 0aa", "0a 0aa"]}, {"regex": "^\\$?(\\d{1,3},?(\\d{3},?)*\\d{3}(\\.\\d{0,2})?|\\d{1,3}(\\.\\d{0,2})?|\\.\\d{1,2}?)$", "exceptionStackTrace": null, "matches": ["$.00", "$0", "$0.00", "$0.", "$0000.0", "$000.0", "$0,000,000", "$0,000,000.00", "$0,000,000.", "$0,000,000,000.0", "$0,000.0", "$0,000000.0", "$0000,000.0", "$0000,000,000.0", "$000,000,000.0", "0,000,000.0", ".0", "0", "0000", "$.0", "$0.0", "$0,000,000.0"], "nonMatches": ["$.000", "$.", "$0.0.0", "$0.000", "$0,000,000.0.0", "$0,000,000.000", "$0,000,0000.0", "$0,000,00.0", "$0,000,,000.0", "$0,0000,000.0", "$0,00,000.0", "$0,,000,000.0", "$,000,000.0", "$$0,000,000.0"]}, {"regex": "876987698", "exceptionStackTrace": null, "matches": ["876987698"], "nonMatches": []}, {"regex": "^((6011)((-|\\s)?[0-9]{4}){3})$", "exceptionStackTrace": null, "matches": ["60110000-0000-0000", "60110000 0000 0000", "6011 0000 0000 0000", "6011-0000-0000-0000"], "nonMatches": ["6011-0000-0000-0000-0000", "6011-0000-0000", "6011-00000-0000-0000", "6011-000-0000-0000", "6011--0000-0000-0000"]}, {"regex": "^((5[1-5])([0-9]{2})((-|\\s)?[0-9]{4}){3})$", "exceptionStackTrace": null, "matches": ["51000000-0000-0000", "51000000 0000 0000", "5100 0000 0000 0000", "5100-0000-0000-0000"], "nonMatches": ["5100-0000-0000-0000-0000", "5100-0000-0000", "5100-00000-0000-0000", "5100-000-0000-0000", "5100--0000-0000-0000", "51000-0000-0000-0000", "510-0000-0000-0000", "5000-0000-0000-0000"]}, {"regex": "^([a-zA-Z0-9!@#$%^&amp;*()-_=+;:&#39;&quot;|~`&lt;&gt;?/{}]{1,5})$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (bad range): Invalid range: )-_"}, "matches": [], "nonMatches": []}, {"regex": "^([^\\.]+).([^\\.]+).([^\\.]+).([^\\.]+)$", "exceptionStackTrace": null, "matches": ["evilaevilaevilaeVil", "evilaevilaevilaEVIL", "evilaevilaevilaev_il", "evilaevilaevilaev il", "evilaevilaevilaev4il", "evilaevilaevilae", "evilaevilaevila ", "evilaevilaevila6", "evilaevilaevila_", "evilaevilaevila", "evilaevilaevilAevil", "evilaevilaevil0evil", "evilaevilaevil.evil", "evilaevilaevil evil", "evilaevila.aevil", "evilaevilaeVilaevil", "evilaevilaEVILaevil", "evilaevilaev_ilaevil", "evilaevilaev ilaevil", "evilaevilaev4ilaevil", "evilaevilaeaevil", "evilaevila aevil", "evilaevila6aevil", "evilaevila_aevil", "evilaevilaaevil", "evilaevilAevilaevil", "evilaevil0evilaevil", "evilaevil.evilaevil", "evilaevil evilaevil", "evila.aevilaevil", "evilaeVilaevilaevil", "evilaEVILaevilaevil", "evilaev_ilaevilaevil", "evilaev ilaevilaevil", "evilaev4ilaevilaevil", "evilaeaevilaevil", "evila aevilaevil", "evila6aevilaevil", "evila_aevilaevil", "evilaaevilaevil", "evilAevilaevilaevil", "evil0evilaevilaevil", "evil.evilaevilaevil", "evil evilaevilaevil", "eVilaevilaevilaevil", "EVILaevilaevilaevil", "ev_ilaevilaevilaevil", "ev ilaevilaevilaevil", "ev4ilaevilaevilaevil", "eaevilaevilaevil", " aevilaevilaevil", "6aevilaevilaevil", "_aevilaevilaevil", "aevilaevilaevil", "evilaevilaevilaevil"], "nonMatches": ["evilaevilaevila.", ".aevilaevilaevil"]}, {"regex": "Gmail Support", "exceptionStackTrace": null, "matches": ["Gmail Support"], "nonMatches": []}, {"regex": "^\\$?\\d{1,3}(,?\\d{3})*(\\.\\d{1,2})?$", "exceptionStackTrace": null, "matches": ["$0,000", "$0,000.00", "$0,000,000.0", "$0.0", "$0000.0", "$0000,000.0", "$000,000.0", "0,000.0", "0", "$0,000.0"], "nonMatches": ["$0,000.0.0", "$0,000.000", "$0,000.", "$0,0000.0", "$0,00.0", "$0,,000.0", "$,000.0", "$$0,000.0"]}, {"regex": "^\\d{1,8}$|^\\d{1,3},\\d{3}$|^\\d{1,2},\\d{3},\\d{3}$", "exceptionStackTrace": null, "matches": ["00,000,000", "000,000", "00000000", "0,000,000", "0,000", "0"], "nonMatches": ["0,000,0000", "0,000,00", "0,0000,000", "0,00,000", "000,000,000", ",000,000", "0,0000", "0,00", "0000,000", ",000", "000000000", ""]}, {"regex": "^(?:(?:(?:0?[1-9]|1\\d|2[0-8])\\/(?:0?[1-9]|1[0-2]))\\/(?:(?:1[6-9]|[2-9]\\d)\\d{2}))$|^(?:(?:(?:31\\/0?[13578]|1[02])|(?:(?:29|30)\\/(?:0?[1,3-9]|1[0-2])))\\/(?:(?:1[6-9]|[2-9]\\d)\\d{2}))$|^(?:29\\/0?2\\/(?:(?:(?:1[6-9]|[2-9]\\d)(?:0[48]|[2468][048]|[13579][26]))))$", "exceptionStackTrace": null, "matches": ["29/02/1692", "29/02/1676", "29/02/1656", "29/02/1636", "29/02/1616", "29/02/1684", "29/02/1680", "29/02/1668", "29/02/1648", "29/02/1628", "29/02/1604", "29/03/1600", "10/1600", "31/07/1600", "31/05/1600", "31/03/1600", "31/01/1600", "29/01/1600", "01/1/1600", "1/01/1600", "29/2/2008", "29/2/1696", "29/2/1688", "29/2/1608", "30/,/1600", "29/,/1600", "31/8/2000", "31/8/1600", "20/1/1600", "10/1/1600", "1/10/1600", "1/1/2000", "1/1/1600", "29/02/2008", "29/02/1696", "29/02/1688", "29/02/1608", "30/0,/1600", "29/10/1600", "29/0,/1600", "12/1600", "31/08/2000", "31/08/1600", "20/01/1600", "10/01/1600", "01/10/1600", "01/01/2000", "01/01/1600"], "nonMatches": ["29/02/0008", "29/02/1690", "29/02/1606", "29/02/1681", "29/02/1600", "29/02/1008", "29/002/1608", "29/13/1600", "29/00/1600", "29/00,/1600", "11/1600", "31/08/0000", "31/08/16000", "31/08/160", "31/08/1000", "31/00/1600", "31/008/1600", "01/13/1600", "01/01/0000", "01/01/16000", "01/01/160", "01/01/1000", "01/00/1600", "01/001/1600", "00/01/1600", "001/01/1600"]}, {"regex": "&( )", "exceptionStackTrace": null, "matches": ["& "], "nonMatches": []}, {"regex": "^(?:\\([2-9]\\d{2}\\)\\ ?|[2-9]\\d{2}(?:\\-?|\\ ?))[2-9]\\d{2}[- ]?\\d{4}$", "exceptionStackTrace": null, "matches": ["200200 0000", "(200) 2000000", "(200) 200-0000", "(200)200 0000", "2002000000", "(200)2000000", "200 200 0000", "200-200 0000", "(200) 200 0000"], "nonMatches": ["200  200 0000", "200--200 0000", "2000-200 0000", "20-200 0000", "000-200 0000", "(200) 200 00000", "(200) 200 000", "(200) 200  0000", "(200) 2000 0000", "(200) 20 0000", "(200) 000 0000", "(200)  200 0000", "(2000) 200 0000", "(20) 200 0000", "(000) 200 0000"]}, {"regex": "^(?:\\([2-9]\\d{2}\\)\\ ?|(?:[2-9]\\d{2}\\-))[2-9]\\d{2}\\-\\d{4}$", "exceptionStackTrace": null, "matches": ["(200)200-0000", "200-200-0000", "(200) 200-0000"], "nonMatches": ["2000-200-0000", "20-200-0000", "000-200-0000", "(200) 200-00000", "(200) 200-000", "(200) 2000-0000", "(200) 20-0000", "(200) 000-0000", "(200)  200-0000", "(2000) 200-0000", "(20) 200-0000", "(000) 200-0000"]}]