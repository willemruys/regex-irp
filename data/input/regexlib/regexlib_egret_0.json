[{"regex": "^[ABCEGHJKLMNPRSTVXYabceghjklmnprstvxy]{1}\\d{1}[A-Za-z]{1}\\d{1}[A-Za-z]{1}\\d{1}$", "exceptionStackTrace": null, "matches": ["y0a0A0", "y0A0a0", "x0a0a0", "v0a0a0", "t0a0a0", "s0a0a0", "r0a0a0", "p0a0a0", "n0a0a0", "m0a0a0", "l0a0a0", "k0a0a0", "j0a0a0", "h0a0a0", "g0a0a0", "e0a0a0", "c0a0a0", "b0a0a0", "a0a0a0", "Y0a0a0", "X0a0a0", "V0a0a0", "T0a0a0", "S0a0a0", "R0a0a0", "P0a0a0", "N0a0a0", "M0a0a0", "L0a0a0", "K0a0a0", "J0a0a0", "H0a0a0", "G0a0a0", "E0a0a0", "C0a0a0", "B0a0a0", "A0a0a0", "y0a0a0"], "nonMatches": ["y0a0a00", "y0a0a", "y0a0aa0", "y0a00", "y0a00a0", "y0aa0", "y0aa0a0", "y00a0", "y00a0a0", "ya0a0", "yy0a0a0", "0a0a0", "d0a0a0", "D0a0a0"]}, {"regex": "^([0][1-9]|[1][0-2]):[0-5][0-9] {1}(AM|PM|am|pm)$", "exceptionStackTrace": null, "matches": ["10:00 AM", "01:00 pm", "01:00 am", "01:00 PM", "01:00 AM"], "nonMatches": ["13:00 AM", "01:00  AM", "01:00AM", "01:60 AM", "00:00 AM"]}, {"regex": "^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$", "exceptionStackTrace": null, "matches": ["AA:AA:AA:AA:AA:Aa", "AA:AA:AA:AA:AA:A0", "AA:AA:AA:AA:AA:aA", "AA:AA:AA:AA:AA:0A", "Aa:AA:AA:AA:AA:AA", "A0:AA:AA:AA:AA:AA", "aA:AA:AA:AA:AA:AA", "0A:AA:AA:AA:AA:AA", "AA:AA:AA:AA:AA:AA"], "nonMatches": ["AA:AA:AA:AA:AA:Ag", "AA:AA:AA:AA:AA:AG", "AA:AA:AA:AA:AA:gA", "AA:AA:AA:AA:AA:GA", "AA:AA:AA:AA:AA:AA:AA", "AA:AA:AA:AA:AA", "Ag:AA:AA:AA:AA:AA", "AG:AA:AA:AA:AA:AA", "gA:AA:AA:AA:AA:AA", "GA:AA:AA:AA:AA:AA"]}, {"regex": "^[13][a-zA-Z0-9]{26,33}$", "exceptionStackTrace": null, "matches": ["3000000000000000000000000000000000", "3a0000000000000000000000000", "3A0000000000000000000000000", "100000000000000000000000000", "300000000000000000000000000"], "nonMatches": ["30000000000000000000000000000000000", "30000000000000000000000000", "000000000000000000000000000"]}, {"regex": "^L[a-zA-Z0-9]{26,33}$", "exceptionStackTrace": null, "matches": ["L000000000000000000000000000000000", "La0000000000000000000000000", "LA0000000000000000000000000", "L00000000000000000000000000"], "nonMatches": ["L0000000000000000000000000000000000", "L0000000000000000000000000"]}, {"regex": "^([1-9]{1}[0-9]{0,7})+((,[1-9]{1}[0-9]{0,7}){0,1})+$", "exceptionStackTrace": null, "matches": ["10,10,10", "10", "10,10000000", "10,1", "10,110", "1010,10", "10000000,10", "1,10", "110,10", "1", "10,10"], "nonMatches": ["10,100000000", "10,0", "10,00", ",10", "100000000,10", "0,10", "00,10"]}, {"regex": "([^\\w\\s\\-\\_])|(\\b\\d)|(\\b[^a-zA-z\\-\\s]\\b)|(\\[^a-zA-z\\-\\s]+\\s)|(\\;+[(\\s)(\\d)(\\W)])", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (bad range): Invalid range: A-z"}, "matches": [], "nonMatches": []}, {"regex": "(^\\d{1,9})+(,\\d{1,9})*$", "exceptionStackTrace": null, "matches": ["0,0,0", "0,000000000", "00,0", "000000000,0", "0", "0,0"], "nonMatches": ["0,0000000000", "0,", "0000000000,0", ",0"]}, {"regex": "[\\u0024\\u20AC\\u00A5A-Z\\s]{0,4}[0-9.,]+[\\s\\u0024\\u20AC\\u00A5A-Z]{0,4}", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 8364"}, "matches": [], "nonMatches": []}, {"regex": "^(((((0[1-9])|(1\\d)|(2[0-8]))[/.-]((0[1-9])|(1[0-2])))|((31[/.-]((0[13578])|(1[02])))|((29|30)[/.-]((0[1,3-9])|(1[0-2])))))[/.-]((000[^0])&amp;([0-9][0-9][0-9][0-9]))|(29[/.-]02[/.-](([0-9][0-9](([02468][48])|([2468][048])|([13579][26])))|((([02468][48])|([2468][048])|([13579][26]))00))))$", "exceptionStackTrace": null, "matches": ["29-02-9200", "29-02-7600", "29-02-5600", "29-02-3600", "29-02-1600", "29-02-8400", "29-02-8000", "29-02-6800", "29-02-4800", "29-02-2800", "29-02-0800", "29-02-0092", "29-02-0076", "29-02-0056", "29-02-0036", "29-02-0016", "29-02-0084", "29-02-0080", "29-02-0068", "29-02-0048", "29-02-0028", "29-02-0008", "29-02/0088", "29-02.0088", "29/02-0088", "29.02-0088", "29-03-000a&amp;0000", "29/0,-000a&amp;0000", "29.0,-000a&amp;0000", "31-10-000a&amp;0000", "31-07-000a&amp;0000", "31-05-000a&amp;0000", "31-03-000a&amp;0000", "31-01-000a&amp;0000", "31/08-000a&amp;0000", "31.08-000a&amp;0000", "29-01-000a&amp;0000", "01-01-000A&amp;0000", "01-01-000;&amp;0000", "01-01-0001&amp;0000", "01-01-000/&amp;0000", "01-01-000.&amp;0000", "01-01-000-&amp;0000", "01-01-000,&amp;0000", "01-01-000&&amp;0000", "01-01-000 &amp;0000", "01-01/000a&amp;0000", "01-01.000a&amp;0000", "01/01-000a&amp;0000", "01.01-000a&amp;0000", "29-02-9600", "29-02-8800", "29-02-0096", "29-02-0088", "30-0,-000a&amp;0000", "29-10-000a&amp;0000", "29-0,-000a&amp;0000", "31-12-000a&amp;0000", "31-08-000a&amp;0000", "20-01-000a&amp;0000", "10-01-000a&amp;0000", "01-10-000a&amp;0000", "01-01-000a&amp;0000"], "nonMatches": ["29-02-9000", "29-02-0600", "29-02-8100", "29-02-1800", "29-02-0090", "29-02-0006", "29-02-0081", "29-02-0018", "29-13-000a&amp;0000", "29-00-000a&amp;0000", "31-11-000a&amp;0000", "31-00-000a&amp;0000", "01-13-000a&amp;0000", "01-01-0000&amp;0000", "01-00-000a&amp;0000", "00-01-000a&amp;0000"]}, {"regex": "^(((((0[1-9])|(1\\d)|(2[0-8]))/((0[1-9])|(1[0-2])))|((31/((0\n[13578])|(1[02])))|((29|30)/((0[1,3-9])|(1[0-2])))))/((000\n[1-9])|(00[1-9][0-9])|(0[1-9][0-9][0-9])|([1-9][0-9][0-9]\n[0-9]))|(29/02/(([0-9][0-9](([02468][48])|([2468][048])|\n([13579][26])))|((([02468][48])|([2468][048])|([13579]\n[26]))00))))$", "exceptionStackTrace": null, "matches": ["29/02/9\n200", "29/02/7\n600", "29/02/5\n600", "29/02/3\n600", "29/02/1\n600", "29/02/8400", "29/02/8000", "29/02/6800", "29/02/4800", "29/02/2800", "29/02/0800", "29/02/00\n92", "29/02/00\n76", "29/02/00\n56", "29/02/00\n36", "29/02/00\n16", "29/02/0084", "29/02/0080", "29/02/0068", "29/02/0048", "29/02/0028", "29/02/0008", "29/03/000\n1", "31/10/000\n1", "31/0\n7/000\n1", "31/0\n5/000\n1", "31/0\n3/000\n1", "31/0\n1/000\n1", "29/01/000\n1", "29/02/9\n600", "29/02/8800", "29/02/00\n96", "29/02/0088", "30/0,/000\n1", "29/10/000\n1", "29/0,/000\n1", "31/12/000\n1", "31/0\n8/000\n1", "20/01/000\n1", "10/01/000\n1", "01/10/000\n1", "01/01/100\n0", "01/01/0100", "01/01/0010", "01/01/000\n1"], "nonMatches": ["29/02/9\n000", "29/02/0\n600", "29/02/8100", "29/02/1800", "29/02/00\n90", "29/02/00\n06", "29/02/0081", "29/02/0018", "29/13/000\n1", "29/00/000\n1", "31/11/000\n1", "31/0\n0/000\n1", "01/13/000\n1", "01/01/0000", "01/01/000\n0", "01/00/000\n1", "00/01/000\n1"]}, {"regex": "[a-z0-9][a-z0-9_\\.-]{0,}[a-z0-9]\\.[a-z0-9][a-z0-9_\\.-]{0,}[a-z0-9][\\.][cn]{2,4}", "exceptionStackTrace": null, "matches": ["0evil0.0evil0.nnnnn", "0evil0.0evil0.nnnn", "0evil0.0evil0.cn", "0evil0.0evila.nn", "0evil0.0.0.nn", "0evil0.0-0.nn", "0evil0.0ev_il0.nn", "0evil0.0ev4il0.nn", "0evil0.0e0.nn", "0evil0.060.nn", "0evil0.0_0.nn", "0evil0.00.nn", "0evil0.aevil0.nn", "0evila.0evil0.nn", "0.0.0evil0.nn", "0-0.0evil0.nn", "0eVil0.0evil0.nn", "0ev_il0.0evil0.nn", "0ev il0.0evil0.nn", "0ev4il0.0evil0.nn", "0e0.0evil0.nn", "060.0evil0.nn", "0_0.0evil0.nn", "00.0evil0.nn", "aevil0.0evil0.nn", "00.00.nn", "0evil0.0evil0.nn"], "nonMatches": ["0evil0.0evil0.n", "0evil0.0evil0.an", "0evil0.0eVil0.nn", "0evil0.0EVIL0.nn", "0evil0.0ev il0.nn", "0evil0.0 0.nn", "0EVIL0.0evil0.nn", "0 0.0evil0.nn"]}, {"regex": "^(\\d{4}((-)?(0[1-9]|1[0-2])((-)?(0[1-9]|[1-2][0-9]|3[0-1])(T(24:00(:00(\\.[0]+)?)?|(([0-1][0-9]|2[0-3])(:)[0-5][0-9])((:)[0-5][0-9](\\.[\\d]+)?)?)((\\+|-)(14:00|(0[0-9]|1[0-3])(:)[0-5][0-9])|Z))?)?)?)$", "exceptionStackTrace": null, "matches": ["0000-01-01T00:00+14:00", "0000-01-01T00:00:00+14:00", "0000-01-01T00:00:00.00+14:00", "0000-01", "0000-01-01", "0000-01-01T24:00+14:00", "0000-01-01T24:00:00+14:00", "0000-01-01T24:00:00.00+14:00", "0000-0101T24:00:00.0+14:00", "000001-01T24:00:00.0+14:00", "0000", "0000-10-01T24:00:00.0+14:00", "0000-01-30T24:00:00.0+14:00", "0000-01-10T24:00:00.0+14:00", "0000-01-01T20:00:00.0+14:00", "0000-01-01T00:00:00.0+14:00", "0000-01-01T24:00:00.0Z", "0000-01-01T24:00:00.0-14:00", "0000-01-01T24:00:00.0+10:00", "0000-01-01T24:00:00.0+00:00", "0000-01-01T24:00:00.0+14:00"], "nonMatches": ["0000-13-01T24:00:00.0+14:00", "0000-01-32T24:00:00.0+14:00", "0000-01-01T00:00:00.0:00.0+14:00", "0000-01-01T00:00:00.0.0+14:00", "0000-01-01T00:00:00.+14:00", "0000-01-01T00:00:60.0+14:00", "0000-01-01T00:60:00.0+14:00", "0000-01-01T24:00:00.0+00:60", "0000-01-01T24:00:00.0+14:00-01-01T24:00:00.0+14:00", "0000-01-01T24:00:00.0+14:00-01T24:00:00.0+14:00", "0000-01-01T24:00:00.0+14:00T24:00:00.0+14:00", "0000-01-01T24:00:00.0:00.0+14:00", "0000-01-01T24:00:00.0.0+14:00", "0000-01-01T24:00:00.+14:00", "0000-01-00T24:00:00.0+14:00", "0000-01--01T24:00:00.0+14:00", "0000-00-01T24:00:00.0+14:00", "0000--01-01T24:00:00.0+14:00", "00000-01-01T24:00:00.0+14:00", "000-01-01T24:00:00.0+14:00"]}, {"regex": "&(?![a-z]+;|#\\d+;)", "exceptionStackTrace": null, "matches": ["&"], "nonMatches": []}, {"regex": "<img[^>]*src=\\&quot;?([^\\&quot;]*)\\&quot;?([^>]*alt=\\&quot;?([^\\&quot;]*)\\&quot;?)?[^>]*>", "exceptionStackTrace": null, "matches": ["<imgevilsrc=&quot;evil&quot;evilalt=&quot;evil&quot;>>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;evil&quot;=>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;evil&quot;<>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;evil&quot;;>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;evil&quot;&>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;evil&quot;eVil>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;evil&quot;EVIL>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;evil&quot;ev_il>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;evil&quot;ev il>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;evil&quot;ev4il>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;evil&quot;e>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;evil&quot; >", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;evil&quot;6>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;evil&quot;_>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;evil&quot;>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;evil&quot;evilalt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;evil&quot;evil>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;evil&quot;;evil>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;evil&quotevil>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;>&quot;evil>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;=&quot;evil>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;<&quot;evil>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;;&quot;evil>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;&&quot;evil>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;eVil&quot;evil>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;EVIL&quot;evil>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;ev_il&quot;evil>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;ev il&quot;evil>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;ev4il&quot;evil>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;e&quot;evil>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot; &quot;evil>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;6&quot;evil>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;_&quot;evil>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;&quot;evil>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;;evil&quot;evil>", "<imgevilsrc=&quot;evil&quot;evilalt=&quotevil&quot;evil>", "<imgevilsrc=&quot;evil&quot;>alt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;evil&quot;=alt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;evil&quot;<alt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;evil&quot;;alt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;evil&quot;&alt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;evil&quot;eVilalt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;evil&quot;EVILalt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;evil&quot;ev_ilalt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;evil&quot;ev ilalt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;evil&quot;ev4ilalt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;evil&quot;ealt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;evil&quot; alt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;evil&quot;6alt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;evil&quot;_alt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;evil&quot;alt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;evil&quot;;evilalt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;evil&quotevilalt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;>&quot;evilalt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;=&quot;evilalt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;<&quot;evilalt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;eVil&quot;evilalt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;EVIL&quot;evilalt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;ev_il&quot;evilalt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;ev il&quot;evilalt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;ev4il&quot;evilalt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;e&quot;evilalt=&quot;evil&quot;evil>", "<imgevilsrc=&quot; &quot;evilalt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;6&quot;evilalt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;_&quot;evilalt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;&quot;evilalt=&quot;evil&quot;evil>", "<imgevilsrc=&quotevil&quot;evilalt=&quot;evil&quot;evil>", "<img=src=&quot;evil&quot;evilalt=&quot;evil&quot;evil>", "<img<src=&quot;evil&quot;evilalt=&quot;evil&quot;evil>", "<img;src=&quot;evil&quot;evilalt=&quot;evil&quot;evil>", "<img&src=&quot;evil&quot;evilalt=&quot;evil&quot;evil>", "<imgeVilsrc=&quot;evil&quot;evilalt=&quot;evil&quot;evil>", "<imgEVILsrc=&quot;evil&quot;evilalt=&quot;evil&quot;evil>", "<imgev_ilsrc=&quot;evil&quot;evilalt=&quot;evil&quot;evil>", "<imgev ilsrc=&quot;evil&quot;evilalt=&quot;evil&quot;evil>", "<imgev4ilsrc=&quot;evil&quot;evilalt=&quot;evil&quot;evil>", "<imgesrc=&quot;evil&quot;evilalt=&quot;evil&quot;evil>", "<img src=&quot;evil&quot;evilalt=&quot;evil&quot;evil>", "<img6src=&quot;evil&quot;evilalt=&quot;evil&quot;evil>", "<img_src=&quot;evil&quot;evilalt=&quot;evil&quot;evil>", "<imgsrc=&quot;evil&quot;evilalt=&quot;evil&quot;evil>", "<imgsrc=&quot&quot>", "<imgevilsrc=&quot;evil&quot;evilalt=&quot;evil&quot;evil>"], "nonMatches": ["<imgevilsrc=&quot;;&quot;evilalt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;&&quot;evilalt=&quot;evil&quot;evil>", "<imgevilsrc=&quot;;evil&quot;evilalt=&quot;evil&quot;evil>", "<img>src=&quot;evil&quot;evilalt=&quot;evil&quot;evil>"]}, {"regex": "^[a-zA-Z]{4}[a-zA-Z]{2}[a-zA-Z0-9]{2}[XXX0-9]{0,3}", "exceptionStackTrace": null, "matches": ["AAAAAA00XXXX", "AAAAAA00XXX", "AAAAAA00A", "AAAAAA000", "AAAAAA000X", "AAAAAA0X", "AAAAAAa0X", "AAAAAAA0X", "AAAAaA00X", "AAAAAAA00X", "aAAAAA00X", "AAAAAA00", "AAAAAA00X"], "nonMatches": ["AAAAA00X"]}, {"regex": "^(((((\\+)?(\\s)?(\\d{2,4}))(\\s)?((\\(0\\))?)(\\s)?|0)(\\s|\\-)?)(\\s|\\d{2})(\\s|\\-)?)?(\\d{3})(\\s|\\-)?(\\d{2})(\\s|\\-)?(\\d{2})", "exceptionStackTrace": null, "matches": ["+ 00 (0)    000 00 000", "+ 00 (0)    000 0000", "+ 00 (0)    00000 00", "000 00 00", "+ 00 (0)   000 00 00", "+ 00     000 00 00", "+ 00(0)    000 00 00", "+ 0000 (0)    000 00 00", "+00 (0)    000 00 00", " 00 (0)    000 00 00", "0000000", "0   000 00 00", "+ 00 (0) -  000 00 00", "+ 00 (0)  00 000 00 00", "+ 00 (0)   -000 00 00", "+ 00 (0)    000-00 00", "+ 00 (0)    000 00-00", "+ 00 (0)    000 00 00"], "nonMatches": ["+ 00 (0)  000 000 00 00", "+ 00 (0)  0 000 00 00", "+ 00 (0)    000 00 0", "+ 00 (0)    000 00  00", "+ 00 (0)    000 000 00", "+ 00 (0)    000 0 00", "+ 00 (0)    000  00 00", "+ 00 (0)    0000 00 00", "+ 00 (0)    00 00 00", "+ 00 (0)    + 00 (0)    000 00 00", "+ 00 (0)     000 00 00", "+ 00 (0)(0)    000 00 00", "+ 00  (0)    000 00 00", "+ 00000 (0)    000 00 00", "+ 0 (0)    000 00 00", "+  00 (0)    000 00 00", "++ 00 (0)    000 00 00"]}, {"regex": "^((((([0-1]?\\d)|(2[0-8]))\\/((0?\\d)|(1[0-2])))|(29\\/((0?[1,3-9])|(1[0-2])))|(30\\/((0?[1,3-9])|(1[0-2])))|(31\\/((0?[13578])|(1[0-2]))))\\/((19\\d{2})|([2-9]\\d{3}))|(29\\/0?2\\/(((([2468][048])|([3579][26]))00)|(((19)|([2-9]\\d))(([2468]0)|([02468][48])|([13579][26]))))))\\s(([01]?\\d)|(2[0-3]))(:[0-5]?\\d){2}$", "exceptionStackTrace": null, "matches": ["29/02/1992 10:00:00", "29/02/1976 10:00:00", "29/02/1956 10:00:00", "29/02/1936 10:00:00", "29/02/1916 10:00:00", "29/02/1984 10:00:00", "29/02/1968 10:00:00", "29/02/1948 10:00:00", "29/02/1928 10:00:00", "29/02/1908 10:00:00", "29/02/1960 10:00:00", "29/02/1940 10:00:00", "29/02/1920 10:00:00", "29/02/9200 10:00:00", "29/02/7600 10:00:00", "29/02/5600 10:00:00", "29/02/3600 10:00:00", "29/02/8400 10:00:00", "29/02/8000 10:00:00", "29/02/6800 10:00:00", "29/02/4800 10:00:00", "29/02/2800 10:00:00", "29/2/8800 10:00:00", "31/07/1900 10:00:00", "31/05/1900 10:00:00", "31/03/1900 10:00:00", "31/01/1900 10:00:00", "31/8/1900 10:00:00", "30/03/1900 10:00:00", "30/01/1900 10:00:00", "30/,/1900 10:00:00", "29/03/1900 10:00:00", "29/01/1900 10:00:00", "29/,/1900 10:00:00", "00/00/1900 10:0:00", "00/00/1900 0:00:00", "00/00/1900 00:00:00", "00/0/1900 10:00:00", "0/00/1900 10:00:00", "29/2/2080 0:0:00", "29/2/1996 0:0:00", "29/2/1988 0:0:00", "29/2/1980 0:0:00", "29/2/9600 0:0:00", "29/2/8800 0:0:00", "31/10/1900 0:0:00", "31/8/1900 0:0:00", "30/10/1900 0:0:00", "30/,/1900 0:0:00", "29/10/1900 0:0:00", "29/,/1900 0:0:00", "20/0/1900 0:0:00", "0/10/1900 0:0:00", "0/0/2000 0:0:00", "0/0/1900 20:0:00", "0/0/1900 0:0:00", "29/02/2080 10:00:00", "29/02/1996 10:00:00", "29/02/1988 10:00:00", "29/02/1980 10:00:00", "29/02/9600 10:00:00", "29/02/8800 10:00:00", "31/10/1900 10:00:00", "31/08/1900 10:00:00", "30/10/1900 10:00:00", "30/0,/1900 10:00:00", "29/10/1900 10:00:00", "29/0,/1900 10:00:00", "20/00/1900 10:00:00", "00/10/1900 10:00:00", "00/00/2000 10:00:00", "00/00/1900 20:00:00", "00/00/1900 10:00:00"], "nonMatches": ["29/02/0080 10:00:00", "29/02/1990 10:00:00", "29/02/1906 10:00:00", "29/02/1918 10:00:00", "29/02/1900 10:00:00", "29/02/9000 10:00:00", "29/02/0600 10:00:00", "29/02/8100 10:00:00", "29/02/0800 10:00:00", "29/002/8800 10:00:00", "31/13/1900 10:00:00", "31/00/1900 10:00:00", "31/008/1900 10:00:00", "30/13/1900 10:00:00", "30/00/1900 10:00:00", "30/00,/1900 10:00:00", "29/13/1900 10:00:00", "29/00,/1900 10:00:00", "29/00/1900 10:00:00", "00/13/1900 10:00:00", "00/00/20000 10:00:00", "00/00/200 10:00:00", "00/00/0000 10:00:00", "00/00/1900 24:00:00", "00/00/1900 10:00:00:00", "00/00/1900 10:00", "00/00/1900 10:000:00", "00/00/1900 10:60:00", "00/00/1900 110:00:00", "00/00/19000 10:00:00", "00/00/190 10:00:00", "00/000/1900 10:00:00", "000/00/1900 10:00:00"]}, {"regex": "\\b(((\\S+)?)(@|mailto\\:|(news|(ht|f)tp(s?))\\://)\\S+)\\b", "exceptionStackTrace": null, "matches": ["evilhttp://evil", "evil@eVil", "evil@EVIL", "evil@ev_il", "evil@ev il", "evil@ev4il", "evil@e", "evil@6", "evil@_", "evilevil@evil", "eVil@evil", "EVIL@evil", "ev_il@evil", "ev il@evil", "ev4il@evil", "e@evil", "6@evil", "_@evil", "ftp://evil", "http://evil", "news://evil", "mailto:evil", "evilftps://evil", "evilhttps://evil", "evilnews://evil", "evilmailto:evil", "evil@evil"], "nonMatches": ["evilhttpss://evil", "evil@@", "evil@:", "evil@/", "evil@ ", "evil@", "@@evil", ":@evil", "/@evil", " @evil", "@evil"]}, {"regex": "^(http|https|ftp)\\://[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,3}(:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\\-\\._\\?\\,\\&#39;/\\\\\\+&amp;%\\$#\\=~])*$", "exceptionStackTrace": null, "matches": ["http://evil.AA:evil/~~", "http://evil.AA:evil/", "http://evil.AA:evil/p", "http://evil.AA:evil/m", "http://evil.AA:evil/b", "http://evil.AA:evil/a", "http://evil.AA:evil/_", "http://evil.AA:evil/\\", "http://evil.AA:evil/A", "http://evil.AA:evil/?", "http://evil.AA:evil/=", "http://evil.AA:evil/;", "http://evil.AA:evil/9", "http://evil.AA:evil/3", "http://evil.AA:evil/0", "http://evil.AA:evil//", "http://evil.AA:evil/.", "http://evil.AA:evil/-", "http://evil.AA:evil/,", "http://evil.AA:evil/+", "http://evil.AA:evil/&", "http://evil.AA:evil/%", "http://evil.AA:evil/$", "http://evil.AA:evil/#", "http://evil.AA:evil//~", "http://evil.AA:evil~", "http://evil.AA/~", "http://evil.AA:eVil/~", "http://evil.AA:EVIL/~", "http://evil.AA:ev_il/~", "http://evil.AA:ev4il/~", "http://evil.AA:e/~", "http://evil.AA:6/~", "http://evil.AA:_/~", "http://evil.AA:/~", "http://evil.AAA:evil/~", "http://evil.aA:evil/~", "http://..AA:evil/~", "http://-.AA:evil/~", "http://eVil.AA:evil/~", "http://EVIL.AA:evil/~", "http://ev4il.AA:evil/~", "http://e.AA:evil/~", "http://6.AA:evil/~", "ftp://evil.AA", "https://evil.AA", "http://evil.AA", "ftp://evil.AA:evil/~", "https://evil.AA:evil/~", "http://evil.AA:evil/~"], "nonMatches": ["http://evil.AA:evil:evil/~", "http://evil.AA:ev il/~", "http://evil.AA: /~", "http://evil.AAAA:evil/~", "http://evil.A:evil/~", "http://~.AA:evil/~", "http://\\.AA:evil/~", "http://?.AA:evil/~", "http://=.AA:evil/~", "http://;.AA:evil/~", "http://:.AA:evil/~", "http:///.AA:evil/~", "http://,.AA:evil/~", "http://+.AA:evil/~", "http://&.AA:evil/~", "http://%.AA:evil/~", "http://$.AA:evil/~", "http://#.AA:evil/~", "http://ev_il.AA:evil/~", "http://ev il.AA:evil/~", "http:// .AA:evil/~", "http://_.AA:evil/~", "http://.AA:evil/~"]}, {"regex": "<[iI][mM][gG][a-zA-Z0-9\\s=&quot;.]*((src)=\\s*(?:&quot;([^&quot;]*)&quot;|&#39;[^&#39;]*&#39;))[a-zA-Z0-9\\s=&quot;.]*/*>(?:</[iI][mM][gG]>)*", "exceptionStackTrace": null, "matches": ["<IMGevilsrc= &#39;>&#39;evil/></IMG>", "<IMGevilsrc= &#39;=&#39;evil/></IMG>", "<IMGevilsrc= &#39;<&#39;evil/></IMG>", "<IMGevilsrc= &#39;/&#39;evil/></IMG>", "<IMGevilsrc= &#39;.&#39;evil/></IMG>", "<IMGevilsrc= &#39;eVil&#39;evil/></IMG>", "<IMGevilsrc= &#39;EVIL&#39;evil/></IMG>", "<IMGevilsrc= &#39;ev_il&#39;evil/></IMG>", "<IMGevilsrc= &#39;ev il&#39;evil/></IMG>", "<IMGevilsrc= &#39;ev4il&#39;evil/></IMG>", "<IMGevilsrc= &#39;e&#39;evil/></IMG>", "<IMGevilsrc= &#39; &#39;evil/></IMG>", "<IMGevilsrc= &#39;6&#39;evil/></IMG>", "<IMGevilsrc= &#39;_&#39;evil/></IMG>", "<IMGevilsrc= &#39;&#39;evil/></IMG>", "<IMGevilsrc= &quot;evil&quot;evil/></IMG></IMG>", "<IMGevilsrc= &quot;evil&quot;evil/>", "<IMGevilsrc= &quot;evil&quot;evil/></IMg>", "<IMGevilsrc= &quot;evil&quot;evil/></IMa>", "<IMGevilsrc= &quot;evil&quot;evil/></IMA>", "<IMGevilsrc= &quot;evil&quot;evil/></ImG>", "<IMGevilsrc= &quot;evil&quot;evil/></IaG>", "<IMGevilsrc= &quot;evil&quot;evil/></IAG>", "<IMGevilsrc= &quot;evil&quot;evil/></iMG>", "<IMGevilsrc= &quot;evil&quot;evil/></aMG>", "<IMGevilsrc= &quot;evil&quot;evil/></AMG>", "<IMGevilsrc= &quot;evil&quot;evil//></IMG>", "<IMGevilsrc= &quot;evil&quot;evil></IMG>", "<IMGevilsrc= &quot;evil&quot;>/></IMG>", "<IMGevilsrc= &quot;evil&quot;=/></IMG>", "<IMGevilsrc= &quot;evil&quot;;/></IMG>", "<IMGevilsrc= &quot;evil&quot;//></IMG>", "<IMGevilsrc= &quot;evil&quot;./></IMG>", "<IMGevilsrc= &quot;evil&quot;&/></IMG>", "<IMGevilsrc= &quot;evil&quot;eVil/></IMG>", "<IMGevilsrc= &quot;evil&quot;EVIL/></IMG>", "<IMGevilsrc= &quot;evil&quot;ev il/></IMG>", "<IMGevilsrc= &quot;evil&quot;ev4il/></IMG>", "<IMGevilsrc= &quot;evil&quot;e/></IMG>", "<IMGevilsrc= &quot;evil&quot; /></IMG>", "<IMGevilsrc= &quot;evil&quot;6/></IMG>", "<IMGevilsrc= &quot;evil&quot;/></IMG>", "<IMGevilsrc= &quot;>&quot;evil/></IMG>", "<IMGevilsrc= &quot;=&quot;evil/></IMG>", "<IMGevilsrc= &quot;<&quot;evil/></IMG>", "<IMGevilsrc= &quot;/&quot;evil/></IMG>", "<IMGevilsrc= &quot;.&quot;evil/></IMG>", "<IMGevilsrc= &quot;#&quot;evil/></IMG>", "<IMGevilsrc= &quot;eVil&quot;evil/></IMG>", "<IMGevilsrc= &quot;EVIL&quot;evil/></IMG>", "<IMGevilsrc= &quot;ev_il&quot;evil/></IMG>", "<IMGevilsrc= &quot;ev il&quot;evil/></IMG>", "<IMGevilsrc= &quot;ev4il&quot;evil/></IMG>", "<IMGevilsrc= &quot;e&quot;evil/></IMG>", "<IMGevilsrc= &quot; &quot;evil/></IMG>", "<IMGevilsrc= &quot;6&quot;evil/></IMG>", "<IMGevilsrc= &quot;_&quot;evil/></IMG>", "<IMGevilsrc= &quot;&quot;evil/></IMG>", "<IMGevilsrc=  &quot;evil&quot;evil/></IMG>", "<IMGevilsrc=&quot;evil&quot;evil/></IMG>", "<IMG=src= &quot;evil&quot;evil/></IMG>", "<IMG;src= &quot;evil&quot;evil/></IMG>", "<IMG.src= &quot;evil&quot;evil/></IMG>", "<IMG&src= &quot;evil&quot;evil/></IMG>", "<IMGeVilsrc= &quot;evil&quot;evil/></IMG>", "<IMGEVILsrc= &quot;evil&quot;evil/></IMG>", "<IMGev ilsrc= &quot;evil&quot;evil/></IMG>", "<IMGev4ilsrc= &quot;evil&quot;evil/></IMG>", "<IMGesrc= &quot;evil&quot;evil/></IMG>", "<IMG src= &quot;evil&quot;evil/></IMG>", "<IMG6src= &quot;evil&quot;evil/></IMG>", "<IMGsrc= &quot;evil&quot;evil/></IMG>", "<IMgevilsrc= &quot;evil&quot;evil/></IMG>", "<ImGevilsrc= &quot;evil&quot;evil/></IMG>", "<iMGevilsrc= &quot;evil&quot;evil/></IMG>", "<IMGsrc=&#39;&#39;>", "<IMGsrc=&quot;&quot;>", "<IMGevilsrc= &#39;evil&#39;evil/></IMG>", "<IMGevilsrc= &quot;evil&quot;evil/></IMG>"], "nonMatches": ["<IMGevilsrc= &#39;;&#39;evil/></IMG>", "<IMGevilsrc= &#39;&&#39;evil/></IMG>", "<IMGevilsrc= &#39;#&#39;evil/></IMG>", "<IMGevilsrc= &quot;evil&quot;</></IMG>", "<IMGevilsrc= &quot;evil&quot;#/></IMG>", "<IMGevilsrc= &quot;evil&quot;ev_il/></IMG>", "<IMGevilsrc= &quot;evil&quot;_/></IMG>", "<IMGevilsrc= &quot;;&quot;evil/></IMG>", "<IMGevilsrc= &quot;&&quot;evil/></IMG>", "<IMG>src= &quot;evil&quot;evil/></IMG>", "<IMG<src= &quot;evil&quot;evil/></IMG>", "<IMG/src= &quot;evil&quot;evil/></IMG>", "<IMG#src= &quot;evil&quot;evil/></IMG>", "<IMGev_ilsrc= &quot;evil&quot;evil/></IMG>", "<IMG_src= &quot;evil&quot;evil/></IMG>", "<IMaevilsrc= &quot;evil&quot;evil/></IMG>", "<IMAevilsrc= &quot;evil&quot;evil/></IMG>", "<IaGevilsrc= &quot;evil&quot;evil/></IMG>", "<IAGevilsrc= &quot;evil&quot;evil/></IMG>", "<aMGevilsrc= &quot;evil&quot;evil/></IMG>", "<AMGevilsrc= &quot;evil&quot;evil/></IMG>"]}, {"regex": "^[+]?100(\\.0{1,2})?%?$|^[+]?\\d{1,2}(\\.\\d{1,2})?%?$", "exceptionStackTrace": null, "matches": ["+0.0", "+0%", "+0.00%", "+00.0%", "0.0%", "+100.0", "+100%", "+100.00%", "100.0%", "0", "100", "+0.0%", "+100.0%"], "nonMatches": ["+0.0%%", "+0.0.0%", "+0.000%", "+0.%", "+000.0%", "+.0%", "++0.0%", "+100.0%%", "+100.0.0%", "+100.000%", "+100.%", "++100.0%"]}, {"regex": "ghythytj", "exceptionStackTrace": null, "matches": ["ghythytj"], "nonMatches": []}, {"regex": "^(?=.*[!@#$%^&*()\\-_=+`~\\[\\]{}?|])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).{8,20}$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["aaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaa", "aaaaaaa", "~aaaaaaa", "}aaaaaaa", "|aaaaaaa", "{aaaaaaa", "`aaaaaaa", "_aaaaaaa", "^aaaaaaa", "]aaaaaaa", "[aaaaaaa", "Aaaaaaaa", "@aaaaaaa", "?aaaaaaa", "=aaaaaaa", "0aaaaaaa", "-aaaaaaa", "+aaaaaaa", "*aaaaaaa", ")aaaaaaa", "(aaaaaaa", "&aaaaaaa", "%aaaaaaa", "$aaaaaaa", "#aaaaaaa", "!aaaaaaa", " aaaaaaa", "aaaaaaaa"]}, {"regex": "(^(?!0{5})(\\d{5})(?!-?0{4})(|-\\d{4})?$)", "exceptionStackTrace": null, "matches": [], "nonMatches": ["00000-0000-0000", "00000-00000", "00000-000", "000000-0000", "0000-0000", "00000", "00000-0000"]}, {"regex": "^[0-9]*[02468]$", "exceptionStackTrace": null, "matches": ["06", "04", "02", "00", "008", "8", "08"], "nonMatches": ["01"]}, {"regex": "^(\\S+\\.{1})(\\S+\\.{1})*([^\\s\\.]+\\s*)$", "exceptionStackTrace": null, "matches": ["evil.evil.evil  ", "evil.evil.evil", "evil.evil.eVil ", "evil.evil.EVIL ", "evil.evil.ev_il ", "evil.evil.ev4il ", "evil.evil.e ", "evil.evil.6 ", "evil.evil._ ", "evil.evil.evil.evil ", "evil.evil ", "evil.evil..evil ", "evil.evilevil ", "evil...evil ", "evil.eVil.evil ", "evil.EVIL.evil ", "evil.ev_il.evil ", "evil.ev4il.evil ", "evil.e.evil ", "evil.6.evil ", "evil._.evil ", "evil..evil ", "evil..evil.evil ", "evilevil.evil ", "..evil.evil ", "eVil.evil.evil ", "EVIL.evil.evil ", "ev_il.evil.evil ", "ev4il.evil.evil ", "e.evil.evil ", "6.evil.evil ", "_.evil.evil ", ".evil.evil ", "evil.evil", "evil.evil.evil "], "nonMatches": ["evil.evil.. ", "evil.evil.ev il ", "evil.evil.  ", "evil.evil. ", "evil.ev il.evil ", "evil. .evil ", "ev il.evil.evil ", " .evil.evil "]}, {"regex": "^([1-9][0][0]|[1-9][0-9][0][0]|[1-9][0-9][0-9][0][0]|[1-9][0-9][0-9][0-9][0][0]|[1-9][0-9][0-9][0-9][0-9][0][0])$", "exceptionStackTrace": null, "matches": ["1000000", "100000", "10000", "1000", "100"], "nonMatches": ["0000000", "000000", "00000", "0000", "000"]}, {"regex": "^jdbc:db2://((?:(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))|(?:(?:(?:(?:[A-Z|a-z])(?:[\\w|-]){0,61}(?:[\\w]?[.]))*)(?:(?:[A-Z|a-z])(?:[\\w|-]){0,61}(?:[\\w]?)))):([0-9]{1,5})/([0-9|A-Z|a-z|_|#|$]{1,16})$", "exceptionStackTrace": null, "matches": ["jdbc:db2://|-a.|-aa:0/$", "jdbc:db2://|-a.|-:0/$", "jdbc:db2://|-a.|-_:0/$", "jdbc:db2://|-a.|-A:0/$", "jdbc:db2://|-a.|-0:0/$", "jdbc:db2://|-a.|-------------------------------------------------------------a:0/$", "jdbc:db2://|-a.|a:0/$", "jdbc:db2://|-a.||a:0/$", "jdbc:db2://|-a.|aa:0/$", "jdbc:db2://|-a.|_a:0/$", "jdbc:db2://|-a.|Aa:0/$", "jdbc:db2://|-a.|0a:0/$", "jdbc:db2://|-a.a-a:0/$", "jdbc:db2://|-a.A-a:0/$", "jdbc:db2://|-a.|-a.|-a:0/$", "jdbc:db2://|-a:0/$", "jdbc:db2://|-aa.|-a:0/$", "jdbc:db2://|-.|-a:0/$", "jdbc:db2://|-_.|-a:0/$", "jdbc:db2://|-A.|-a:0/$", "jdbc:db2://|-0.|-a:0/$", "jdbc:db2://|-------------------------------------------------------------a.|-a:0/$", "jdbc:db2://|a.|-a:0/$", "jdbc:db2://||a.|-a:0/$", "jdbc:db2://|aa.|-a:0/$", "jdbc:db2://|_a.|-a:0/$", "jdbc:db2://|Aa.|-a:0/$", "jdbc:db2://|0a.|-a:0/$", "jdbc:db2://a-a.|-a:0/$", "jdbc:db2://A-a.|-a:0/$", "jdbc:db2://10a100a100a250:0/$", "jdbc:db2://00a100a100a250:0/$", "jdbc:db2://000a100a100a250:0/$", "jdbc:db2://250a200a200a250:0/$", "jdbc:db2://250a250a250a10:0/$", "jdbc:db2://250a250a250a00:0/$", "jdbc:db2://250a250a250a000:0/$", "jdbc:db2://250a250a250a250:0/$$$$$$$$$$$$$$$$", "jdbc:db2://250a250a250a250:0/|", "jdbc:db2://250a250a250a250:0/a", "jdbc:db2://250a250a250a250:0/_", "jdbc:db2://250a250a250a250:0/A", "jdbc:db2://250a250a250a250:0/0", "jdbc:db2://250a250a250a250:0/#", "jdbc:db2://250a250a250a250:00000/$", "jdbc:db2://250a250a250:0/$", "jdbc:db2://250|250a250a250:0/$", "jdbc:db2://250_250a250a250:0/$", "jdbc:db2://250A250a250a250:0/$", "jdbc:db2://250:250a250a250:0/$", "jdbc:db2://2500250a250a250:0/$", "jdbc:db2://250/250a250a250:0/$", "jdbc:db2://250.250a250a250:0/$", "jdbc:db2://250-250a250a250:0/$", "jdbc:db2://250$250a250a250:0/$", "jdbc:db2://250#250a250a250:0/$", "jdbc:db2://250 250a250a250:0/$", "jdbc:db2://|:0/$", "jdbc:db2://0a100a100a250:0/$", "jdbc:db2://200a100a100a250:0/$", "jdbc:db2://250a100a100a0:0/$", "jdbc:db2://250a100a100a200:0/$", "jdbc:db2://250a100a100a250:0/$", "jdbc:db2://|-a.|-a:0/$", "jdbc:db2://100a100a100a250:0/$", "jdbc:db2://200a200a200a250:0/$", "jdbc:db2://250a250a250a100:0/$", "jdbc:db2://250a250a250a200:0/$", "jdbc:db2://250a250a250a250:0/$"], "nonMatches": ["jdbc:db2://|-a.|--------------------------------------------------------------a:0/$", "jdbc:db2://|--------------------------------------------------------------a.|-a:0/$", "jdbc:db2://1000a100a100a250:0/$", "jdbc:db2://1100a100a100a250:0/$", "jdbc:db2://250a250a250a1000:0/$", "jdbc:db2://250a250a250a1100:0/$", "jdbc:db2://250a250a250a250:0/$$$$$$$$$$$$$$$$$", "jdbc:db2://250a250a250a250:0/", "jdbc:db2://250a250a250a250:000000/$", "jdbc:db2://250a250a250a250:/$", "jdbc:db2://250a250a250a256:0/$", "jdbc:db2://250a250a250a250a250:0/$", "jdbc:db2://256a250a250a250:0/$"]}, {"regex": "^(?!\\d[1]{2}|[5]{3})([2-9]\\d{2})([. -]*)\\d{4}$", "exceptionStackTrace": null, "matches": ["200--0000", "200.0000", "200 0000", "2000000", "200-0000"], "nonMatches": ["200-00000", "200-000", "2000-0000", "20-0000", "000-0000"]}, {"regex": "^([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4}$", "exceptionStackTrace": null, "matches": ["a:a:a:a:a:a:a:aaaa", "a:a:a:a:a:a:a:A", "a:a:a:a:a:a:a:0", "aaaa:a:a:a:a:a:a:a", "A:a:a:a:a:a:a:a", "0:a:a:a:a:a:a:a", "a:a:a:a:a:a:a:a"], "nonMatches": ["a:a:a:a:a:a:a:aaaaa", "a:a:a:a:a:a:a:", "a:a:a:a:a:a:a:g", "a:a:a:a:a:a:a:G", "a:a:a:a:a:a:a:a:a", "a:a:a:a:a:a:a", "aaaaa:a:a:a:a:a:a:a", ":a:a:a:a:a:a:a", "g:a:a:a:a:a:a:a", "G:a:a:a:a:a:a:a"]}, {"regex": "Spaccio Moncler,Piumini Moncler,Moncler Piumino,Moncler Giubbotti,Moncler Negozio,Moncler 2011", "exceptionStackTrace": null, "matches": ["Spaccio Moncler,Piumini Moncler,Moncler Piumino,Moncler Giubbotti,Moncler Negozio,Moncler 2011"], "nonMatches": []}, {"regex": "((079)|(078)|(077)){1}[0-9]{7}", "exceptionStackTrace": null, "matches": ["07900000000", "0790790000000", "0770000000", "0780000000", "0790000000"], "nonMatches": ["079000000", "0000000"]}, {"regex": "https://realcoloncleansingworks.com/votofel-force-switzerland/", "exceptionStackTrace": null, "matches": ["https://realcoloncleansingworksAcom/votofel-force-switzerland/", "https://realcoloncleansingworks:com/votofel-force-switzerland/", "https://realcoloncleansingworks0com/votofel-force-switzerland/", "https://realcoloncleansingworks/com/votofel-force-switzerland/", "https://realcoloncleansingworks-com/votofel-force-switzerland/", "https://realcoloncleansingworks com/votofel-force-switzerland/", "https://realcoloncleansingworksacom/votofel-force-switzerland/"], "nonMatches": []}, {"regex": "https://realcoloncleansingworks.com/votofel-force-switzerland/", "exceptionStackTrace": null, "matches": ["https://realcoloncleansingworksAcom/votofel-force-switzerland/", "https://realcoloncleansingworks:com/votofel-force-switzerland/", "https://realcoloncleansingworks0com/votofel-force-switzerland/", "https://realcoloncleansingworks/com/votofel-force-switzerland/", "https://realcoloncleansingworks-com/votofel-force-switzerland/", "https://realcoloncleansingworks com/votofel-force-switzerland/", "https://realcoloncleansingworksacom/votofel-force-switzerland/"], "nonMatches": []}, {"regex": "^(?=.{6,})(?=.*[0-9].*)(?=.*[a-z].*).*$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", " ", "6", "_", "", "evil"]}, {"regex": "<title>(.*?)</title>", "exceptionStackTrace": null, "matches": ["<title>></title>", "<title><</title>", "<title>/</title>", "<title>eVil</title>", "<title>EVIL</title>", "<title>ev_il</title>", "<title>ev il</title>", "<title>ev4il</title>", "<title>e</title>", "<title> </title>", "<title>6</title>", "<title>_</title>", "<title></title>", "<title>evil</title>"], "nonMatches": []}, {"regex": "<script[\\\\.|\\\\W|\\\\w]*?</script>", "exceptionStackTrace": null, "matches": ["<scriptww</script>", "<script|</script>", "<script\\</script>", "<scriptW</script>", "<script.</script>", "<script</script>", "<scriptw</script>"], "nonMatches": ["<scripta</script>", "<scriptA</script>"]}, {"regex": "([ ]?[\\\\*~`!@#\\\\%\\\\^\\\\*\\\\(\\\\)_\\\\-\\&quot;\\&quot;&#39;:;\\\\,\\\\.\\\\?\\\\-\\\\+\\\\{\\\\}\\\\/\\\\& ][ ]?|\\\\b)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character range \\\\-\\&"}, "matches": []}, {"regex": "\\\\(+\\\\d{3}|\\\\d{2}|\\\\d{1}\\\\)?", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "nothing to repeat"}, "matches": []}, {"regex": "\\\\s\\\\d{2}[-]\\\\w{3}-\\\\d{4}", "exceptionStackTrace": null, "matches": ["\\s\\dd-\\www-\\ddddd", "\\s\\dd-\\www-\\dddd"], "nonMatches": ["\\s\\dd-\\www-\\ddd", "\\s\\dd-\\wwww-\\dddd", "\\s\\dd-\\ww-\\dddd", "\\s\\ddd-\\www-\\dddd", "\\s\\d-\\www-\\dddd"]}, {"regex": "\\\\[\\\\w{2}\\\\]", "exceptionStackTrace": null, "matches": ["\\}", "\\{", "\\w", "\\2", "\\\\"], "nonMatches": ["\\a", "\\0"]}, {"regex": "\\\\$\\\\d+[.]?\\\\d*", "exceptionStackTrace": null, "matches": [], "nonMatches": ["\\\\d.\\dd", "\\\\d.\\", "\\\\d..\\d", "\\\\d\\d", "\\\\dd.\\d", "\\\\.\\d", "\\\\d\\", "\\\\d.\\d"]}, {"regex": "<!--[\\\\.|\\\\W|\\\\w]*?-->", "exceptionStackTrace": null, "matches": ["<!--ww-->", "<!--|-->", "<!--\\-->", "<!--W-->", "<!--.-->", "<!---->", "<!--w-->"], "nonMatches": ["<!--a-->", "<!--A-->"]}, {"regex": "(\\\\d{1}-\\\\d{2}\\\\s*)(of +)(\\\\s?\\\\d{5})|(\\\\d{1}-\\\\d{2}\\\\s*)(of +)(\\\\s?\\\\d{4})|(\\\\d{1}-\\\\d{2}\\\\s*)(of +)(\\\\s?\\\\d{3})|(\\\\d{1}-\\\\d{2}\\\\s*)(of +)(\\\\s?\\\\d{2})|(\\\\d{1}-\\\\d{2}\\\\s*)(of +)(\\\\s?\\\\d{1})", "exceptionStackTrace": null, "matches": ["\\d-\\dd\\sof \\\\d", "\\d-\\dd\\sof  \\s\\d", "\\d-\\dd\\ssof \\s\\d", "\\d-\\dd\\of \\s\\d", "\\d-\\dd\\sof \\\\dd", "\\d-\\dd\\sof  \\s\\dd", "\\d-\\dd\\ssof \\s\\dd", "\\d-\\dd\\of \\s\\dd", "\\d-\\dd\\sof \\\\ddd", "\\d-\\dd\\sof  \\s\\ddd", "\\d-\\dd\\ssof \\s\\ddd", "\\d-\\dd\\of \\s\\ddd", "\\d-\\dd\\sof \\\\dddd", "\\d-\\dd\\sof  \\s\\dddd", "\\d-\\dd\\ssof \\s\\dddd", "\\d-\\dd\\of \\s\\dddd", "\\d-\\dd\\sof \\s\\dddddd", "\\d-\\dd\\sof \\\\ddddd", "\\d-\\dd\\sof  \\s\\ddddd", "\\d-\\dd\\ssof \\s\\ddddd", "\\d-\\dd\\of \\s\\ddddd", "\\d-\\dd\\of \\\\d", "\\d-\\dd\\of \\\\dd", "\\d-\\dd\\of \\\\ddd", "\\d-\\dd\\of \\\\dddd", "\\d-\\dd\\of \\\\ddddd", "\\d-\\dd\\sof \\s\\d", "\\d-\\dd\\sof \\s\\dd", "\\d-\\dd\\sof \\s\\ddd", "\\d-\\dd\\sof \\s\\dddd", "\\d-\\dd\\sof \\s\\ddddd"], "nonMatches": ["\\d-\\dd\\sof \\s\\", "\\d-\\dd\\sof \\ss\\d", "\\d-\\dd\\sof\\s\\d", "\\d-\\ddd\\sof \\s\\d", "\\d-\\d\\sof \\s\\d", "\\dd-\\dd\\sof \\s\\d", "\\-\\dd\\sof \\s\\d", "\\d-\\dd\\sof \\ss\\dd", "\\d-\\dd\\sof\\s\\dd", "\\d-\\ddd\\sof \\s\\dd", "\\d-\\d\\sof \\s\\dd", "\\dd-\\dd\\sof \\s\\dd", "\\-\\dd\\sof \\s\\dd", "\\d-\\dd\\sof \\ss\\ddd", "\\d-\\dd\\sof\\s\\ddd", "\\d-\\ddd\\sof \\s\\ddd", "\\d-\\d\\sof \\s\\ddd", "\\dd-\\dd\\sof \\s\\ddd", "\\-\\dd\\sof \\s\\ddd", "\\d-\\dd\\sof \\ss\\dddd", "\\d-\\dd\\sof\\s\\dddd", "\\d-\\ddd\\sof \\s\\dddd", "\\d-\\d\\sof \\s\\dddd", "\\dd-\\dd\\sof \\s\\dddd", "\\-\\dd\\sof \\s\\dddd", "\\d-\\dd\\sof \\ss\\ddddd", "\\d-\\dd\\sof\\s\\ddddd", "\\d-\\ddd\\sof \\s\\ddddd", "\\d-\\d\\sof \\s\\ddddd", "\\dd-\\dd\\sof \\s\\ddddd", "\\-\\dd\\sof \\s\\ddddd"]}, {"regex": "href\\\\s*=\\\\s*\\\\\\&quot;((\\\\/)([\\\\w\\\\-\\\\.,@?~\\\\+#]+)*)\\\\\\", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad escape (end of pattern)"}, "matches": []}, {"regex": "\\d{1,2}d \\d{1,2}h", "exceptionStackTrace": null, "matches": ["0d 00h", "000d 0h", "00d 0h", "0d 0h"], "nonMatches": ["0d 000h", "0d h", "d 0h"]}, {"regex": "&quot;^[^\\&quot;]+$&quot;", "exceptionStackTrace": null, "matches": [], "nonMatches": ["&quot;;&quot;", "&quot;&&quot;", "&quot;eVil&quot;", "&quot;EVIL&quot;", "&quot;ev_il&quot;", "&quot;ev il&quot;", "&quot;ev4il&quot;", "&quot;e&quot;", "&quot; &quot;", "&quot;6&quot;", "&quot;_&quot;", "&quot;&quot;", "&quot;evil&quot;"]}, {"regex": "\\s*(&quot;[^&quot;]+&quot;|[^ ,]+)", "exceptionStackTrace": null, "matches": [" ;", " &", " eVil", " EVIL", " ev_il", " ev il", " ev4il", " e", " 6", " _", " &quot;;&quot;", " &quot;,&quot;", " &quot;&&quot;", " &quot;eVil&quot;", " &quot;EVIL&quot;", " &quot;ev_il&quot;", " &quot;ev il&quot;", " &quot;ev4il&quot;", " &quot;e&quot;", " &quot; &quot;", " &quot;6&quot;", " &quot;_&quot;", " &quot;&quot;", "  &quot;evil&quot;", "evil", "&quot;evil&quot;", " evil", " &quot;evil&quot;"], "nonMatches": [" ,", "  ", " "]}, {"regex": "(http):\\\\/\\\\/[\\\\w\\\\-_]+(\\\\.[\\\\w\\\\-_]+)+(\\\\.[\\\\w\\\\-_]+)(\\\\/)([\\\\w\\\\-\\\\.,@?^=%&amp;:/~\\\\+#]*[\\\\w\\\\-\\\\@?^=%&amp;/~\\\\+#]+)(\\\\/)((\\\\d{8}-)|(\\\\d{9}-)|(\\\\d{10}-)|(\\\\d{11}-))+([\\\\w\\\\-\\\\.,@?^=%&amp;:/~\\\\+#]*[\\\\w\\\\-\\\\@?+html^])?", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (bad range): Invalid range: \\-_"}, "matches": [], "nonMatches": []}, {"regex": "(\\d)+\\<\\/a\\>", "exceptionStackTrace": null, "matches": ["00</a>", "0</a>"], "nonMatches": ["</a>"]}, {"regex": "href\\s*=\\s*\\&quot;((\\/)([i])(\\/)+([\\w\\-\\.,@?^=%&amp;:/~\\+#]*[\\w\\-\\@?^=%&amp;/~\\+#]+)*)\\&quot;", "exceptionStackTrace": null, "matches": ["href = &quot;/i/evilevilevilevil&quot;", "href = &quot;/i/&quot;", "href = &quot;/i/evil~&quot;", "href = &quot;/i/evil^&quot;", "href = &quot;/i/evil@&quot;", "href = &quot;/i/evil?&quot;", "href = &quot;/i/evil=&quot;", "href = &quot;/i/evil;&quot;", "href = &quot;/i/evil/&quot;", "href = &quot;/i/evil-&quot;", "href = &quot;/i/evil+&quot;", "href = &quot;/i/evil&&quot;", "href = &quot;/i/evil%&quot;", "href = &quot;/i/evil#&quot;", "href = &quot;/i/evileVil&quot;", "href = &quot;/i/evilEVIL&quot;", "href = &quot;/i/evilev_il&quot;", "href = &quot;/i/evilev4il&quot;", "href = &quot;/i/evile&quot;", "href = &quot;/i/evil6&quot;", "href = &quot;/i/evil_&quot;", "href = &quot;/i/~evil&quot;", "href = &quot;/i/^evil&quot;", "href = &quot;/i/@evil&quot;", "href = &quot;/i/?evil&quot;", "href = &quot;/i/=evil&quot;", "href = &quot;/i/;evil&quot;", "href = &quot;/i/:evil&quot;", "href = &quot;/i//evil&quot;", "href = &quot;/i/.evil&quot;", "href = &quot;/i/-evil&quot;", "href = &quot;/i/,evil&quot;", "href = &quot;/i/+evil&quot;", "href = &quot;/i/&evil&quot;", "href = &quot;/i/%evil&quot;", "href = &quot;/i/#evil&quot;", "href = &quot;/i/eVilevil&quot;", "href = &quot;/i/EVILevil&quot;", "href = &quot;/i/ev_ilevil&quot;", "href = &quot;/i/ev4ilevil&quot;", "href = &quot;/i/eevil&quot;", "href = &quot;/i/6evil&quot;", "href = &quot;/i/_evil&quot;", "href = &quot;/i/evil&quot;", "href = &quot;/i//evilevil&quot;", "href =  &quot;/i/evilevil&quot;", "href =&quot;/i/evilevil&quot;", "href  = &quot;/i/evilevil&quot;", "href= &quot;/i/evilevil&quot;", "href=&quot;/i/&quot;", "href = &quot;/i/evilevil&quot;"], "nonMatches": ["href = &quot;/i/evil:&quot;", "href = &quot;/i/evil.&quot;", "href = &quot;/i/evil,&quot;", "href = &quot;/i/evilev il&quot;", "href = &quot;/i/evil &quot;", "href = &quot;/i/ev ilevil&quot;", "href = &quot;/i/ evil&quot;", "href = &quot;/ievilevil&quot;"]}, {"regex": "^[-a-z0-9~!$%^&*_=+}{\\&#39;?]+(\\.[-a-z0-9~!$%^&*_=+}{\\&#39;?]+)*@([a-z0-9_][-a-z0-9_]*(\\.[-a-z0-9_]+)*\\.(aero|arpa|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro|travel|mobi|[a-z][a-z])|([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}))(:[0-9]{1,5})?$", "exceptionStackTrace": null, "matches": ["evil.evil@0.0.0.000:0", "evil.evil@0.0.000.0:0", "evil.evil@0.000.0.0:0", "evil.evil@000.0.0.0:0", "evil.evil@_evil.evil.aero", "evil.evil@_evil.evil.aero:00000", "evil.evil@_evil.evil.evil.aero:0", "evil.evil@_evil.aero:0", "evil.evil@_evil.-.aero:0", "evil.evil@_evil.ev_il.aero:0", "evil.evil@_evil.ev4il.aero:0", "evil.evil@_evil.e.aero:0", "evil.evil@_evil.6.aero:0", "evil.evil@_evil._.aero:0", "evil.evil@_-.evil.aero:0", "evil.evil@_ev_il.evil.aero:0", "evil.evil@_ev4il.evil.aero:0", "evil.evil@_e.evil.aero:0", "evil.evil@_6.evil.aero:0", "evil.evil@__.evil.aero:0", "evil.evil@_.evil.aero:0", "evil.evil@aevil.evil.aero:0", "evil.evil@0evil.evil.aero:0", "evil.evil.evil@_evil.evil.aero:0", "evil@_evil.evil.aero:0", "evil.~@_evil.evil.aero:0", "evil.}@_evil.evil.aero:0", "evil.{@_evil.evil.aero:0", "evil.^@_evil.evil.aero:0", "evil.?@_evil.evil.aero:0", "evil.=@_evil.evil.aero:0", "evil.;@_evil.evil.aero:0", "evil.-@_evil.evil.aero:0", "evil.+@_evil.evil.aero:0", "evil.*@_evil.evil.aero:0", "evil.&@_evil.evil.aero:0", "evil.%@_evil.evil.aero:0", "evil.$@_evil.evil.aero:0", "evil.#@_evil.evil.aero:0", "evil.!@_evil.evil.aero:0", "evil.ev_il@_evil.evil.aero:0", "evil.ev4il@_evil.evil.aero:0", "evil.e@_evil.evil.aero:0", "evil.6@_evil.evil.aero:0", "evil._@_evil.evil.aero:0", "~.evil@_evil.evil.aero:0", "}.evil@_evil.evil.aero:0", "{.evil@_evil.evil.aero:0", "^.evil@_evil.evil.aero:0", "?.evil@_evil.evil.aero:0", "=.evil@_evil.evil.aero:0", ";.evil@_evil.evil.aero:0", "-.evil@_evil.evil.aero:0", "+.evil@_evil.evil.aero:0", "*.evil@_evil.evil.aero:0", "&.evil@_evil.evil.aero:0", "%.evil@_evil.evil.aero:0", "$.evil@_evil.evil.aero:0", "#.evil@_evil.evil.aero:0", "!.evil@_evil.evil.aero:0", "ev_il.evil@_evil.evil.aero:0", "ev4il.evil@_evil.evil.aero:0", "e.evil@_evil.evil.aero:0", "6.evil@_evil.evil.aero:0", "_.evil@_evil.evil.aero:0", "evil@0.0.0.0", "evil@_.aa", "evil@_.mobi", "evil@_.travel", "evil@_.pro", "evil@_.org", "evil@_.net", "evil@_.name", "evil@_.museum", "evil@_.mil", "evil@_.int", "evil@_.info", "evil@_.gov", "evil@_.edu", "evil@_.coop", "evil@_.com", "evil@_.biz", "evil@_.arpa", "evil@_.aero", "evil.evil@0.0.0.0:0", "evil.evil@_evil.evil.aa:0", "evil.evil@_evil.evil.mobi:0", "evil.evil@_evil.evil.travel:0", "evil.evil@_evil.evil.pro:0", "evil.evil@_evil.evil.org:0", "evil.evil@_evil.evil.net:0", "evil.evil@_evil.evil.name:0", "evil.evil@_evil.evil.museum:0", "evil.evil@_evil.evil.mil:0", "evil.evil@_evil.evil.int:0", "evil.evil@_evil.evil.info:0", "evil.evil@_evil.evil.gov:0", "evil.evil@_evil.evil.edu:0", "evil.evil@_evil.evil.coop:0", "evil.evil@_evil.evil.com:0", "evil.evil@_evil.evil.biz:0", "evil.evil@_evil.evil.arpa:0", "evil.evil@_evil.evil.aero:0"], "nonMatches": ["evil.evil@0.0.0.0000:0", "evil.evil@0.0.0.:0", "evil.evil@0.0.0000.0:0", "evil.evil@0.0..0:0", "evil.evil@0.0000.0.0:0", "evil.evil@0..0.0:0", "evil.evil@0000.0.0.0:0", "evil.evil@.0.0.0:0", "evil.evil@_evil.evil.aero:0:0", "evil.evil@_evil.evil.aero:000000", "evil.evil@_evil.evil.aero:", "evil.evil@_evil.~.aero:0", "evil.evil@_evil.}.aero:0", "evil.evil@_evil.{.aero:0", "evil.evil@_evil.^.aero:0", "evil.evil@_evil.@.aero:0", "evil.evil@_evil.?.aero:0", "evil.evil@_evil.=.aero:0", "evil.evil@_evil.;.aero:0", "evil.evil@_evil.:.aero:0", "evil.evil@_evil...aero:0", "evil.evil@_evil.+.aero:0", "evil.evil@_evil.*.aero:0", "evil.evil@_evil.&.aero:0", "evil.evil@_evil.%.aero:0", "evil.evil@_evil.$.aero:0", "evil.evil@_evil.#.aero:0", "evil.evil@_evil.!.aero:0", "evil.evil@_evil.eVil.aero:0", "evil.evil@_evil.EVIL.aero:0", "evil.evil@_evil.ev il.aero:0", "evil.evil@_evil. .aero:0", "evil.evil@_evil..aero:0", "evil.evil@_~.evil.aero:0", "evil.evil@_}.evil.aero:0", "evil.evil@_{.evil.aero:0", "evil.evil@_^.evil.aero:0", "evil.evil@_@.evil.aero:0", "evil.evil@_?.evil.aero:0", "evil.evil@_=.evil.aero:0", "evil.evil@_;.evil.aero:0", "evil.evil@_:.evil.aero:0", "evil.evil@_..evil.aero:0", "evil.evil@_+.evil.aero:0", "evil.evil@_*.evil.aero:0", "evil.evil@_&.evil.aero:0", "evil.evil@_%.evil.aero:0", "evil.evil@_$.evil.aero:0", "evil.evil@_#.evil.aero:0", "evil.evil@_!.evil.aero:0", "evil.evil@_eVil.evil.aero:0", "evil.evil@_EVIL.evil.aero:0", "evil.evil@_ev il.evil.aero:0", "evil.evil@_ .evil.aero:0", "evil.@@_evil.evil.aero:0", "evil.:@_evil.evil.aero:0", "evil..@_evil.evil.aero:0", "evil.eVil@_evil.evil.aero:0", "evil.EVIL@_evil.evil.aero:0", "evil.ev il@_evil.evil.aero:0", "evil. @_evil.evil.aero:0", "evil.@_evil.evil.aero:0", "@.evil@_evil.evil.aero:0", ":.evil@_evil.evil.aero:0", "..evil@_evil.evil.aero:0", "eVil.evil@_evil.evil.aero:0", "EVIL.evil@_evil.evil.aero:0", "ev il.evil@_evil.evil.aero:0", " .evil@_evil.evil.aero:0", ".evil@_evil.evil.aero:0"]}, {"regex": "&quot;^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$&quot;", "exceptionStackTrace": null, "matches": [], "nonMatches": ["&quot;evil@evil.@&quot;", "&quot;evil@evil.;&quot;", "&quot;evil@evil..&quot;", "&quot;evil@evil.-&quot;", "&quot;evil@evil.+&quot;", "&quot;evil@evil.&&quot;", "&quot;evil@evil.eVil&quot;", "&quot;evil@evil.EVIL&quot;", "&quot;evil@evil.ev_il&quot;", "&quot;evil@evil.ev il&quot;", "&quot;evil@evil.ev4il&quot;", "&quot;evil@evil.e&quot;", "&quot;evil@evil. &quot;", "&quot;evil@evil.6&quot;", "&quot;evil@evil._&quot;", "&quot;evil@evil.&quot;", "&quot;evil@@.evil&quot;", "&quot;evil@;.evil&quot;", "&quot;evil@..evil&quot;", "&quot;evil@-.evil&quot;", "&quot;evil@+.evil&quot;", "&quot;evil@&.evil&quot;", "&quot;evil@eVil.evil&quot;", "&quot;evil@EVIL.evil&quot;", "&quot;evil@ev_il.evil&quot;", "&quot;evil@ev il.evil&quot;", "&quot;evil@ev4il.evil&quot;", "&quot;evil@e.evil&quot;", "&quot;evil@ .evil&quot;", "&quot;evil@6.evil&quot;", "&quot;evil@_.evil&quot;", "&quot;evil@.evil&quot;", "&quot;@@evil.evil&quot;", "&quot;;@evil.evil&quot;", "&quot;.@evil.evil&quot;", "&quot;-@evil.evil&quot;", "&quot;+@evil.evil&quot;", "&quot;&@evil.evil&quot;", "&quot;eVil@evil.evil&quot;", "&quot;EVIL@evil.evil&quot;", "&quot;ev_il@evil.evil&quot;", "&quot;ev il@evil.evil&quot;", "&quot;ev4il@evil.evil&quot;", "&quot;e@evil.evil&quot;", "&quot; @evil.evil&quot;", "&quot;6@evil.evil&quot;", "&quot;_@evil.evil&quot;", "&quot;@evil.evil&quot;", "&quot;evil@evil.evil&quot;"]}, {"regex": "http://(www\\.)?([^\\.]+)\\.com ", "exceptionStackTrace": null, "matches": ["http://www.:.com ", "http://www./.com ", "http://www.eVil.com ", "http://www.EVIL.com ", "http://www.ev_il.com ", "http://www.ev il.com ", "http://www.ev4il.com ", "http://www.e.com ", "http://www. .com ", "http://www.6.com ", "http://www._.com ", "http://evil.com ", "http://www.evil.com "], "nonMatches": ["http://www...com ", "http://www..com ", "http://www.www.evil.com "]}, {"regex": "^(\\+97[\\s]{0,1}[\\-]{0,1}[\\s]{0,1}1|0)50[\\s]{0,1}[\\-]{0,1}[\\s]{0,1}[1-9]{1}[0-9]{6}$", "exceptionStackTrace": null, "matches": ["+97 - 150 -1000000", "+97 - 150  1000000", "+97 - 150- 1000000", "+97 -150 - 1000000", "+97  150 - 1000000", "+97- 150 - 1000000", "0501000000", "+971501000000", "050 - 1000000", "+97 - 150 - 1000000"], "nonMatches": ["+97 - 150 - 10000000", "+97 - 150 - 100000", "+97 - 150 - 11000000", "+97 - 150 - 000000", "+97 - 150 - 0000000", "+97 - 150 -  1000000", "+97 - 150 -- 1000000", "+97 - 150  - 1000000", "+97 -  150 - 1000000", "+97 -- 150 - 1000000", "+97  - 150 - 1000000"]}, {"regex": "^0[234679]{1}[\\s]{0,1}[\\-]{0,1}[\\s]{0,1}[1-9]{1}[0-9]{6}$", "exceptionStackTrace": null, "matches": ["09 -1000000", "09  1000000", "09- 1000000", "07 - 1000000", "06 - 1000000", "04 - 1000000", "03 - 1000000", "02 - 1000000", "091000000", "09 - 1000000"], "nonMatches": ["09 - 10000000", "09 - 100000", "09 - 11000000", "09 - 000000", "09 - 0000000", "09 -  1000000", "09 -- 1000000", "09  - 1000000", "099 - 1000000", "0 - 1000000", "00 - 1000000"]}, {"regex": "^0{0,1}[1-9]{1}[0-9]{2}[\\s]{0,1}[\\-]{0,1}[\\s]{0,1}[1-9]{1}[0-9]{6}$", "exceptionStackTrace": null, "matches": ["0100 -1000000", "0100  1000000", "0100- 1000000", "100 - 1000000", "1001000000", "0100 - 1000000"], "nonMatches": ["0100 - 10000000", "0100 - 100000", "0100 - 11000000", "0100 - 000000", "0100 - 0000000", "0100 -  1000000", "0100 -- 1000000", "0100  - 1000000", "01000 - 1000000", "010 - 1000000", "01100 - 1000000", "000 - 1000000", "0000 - 1000000", "00100 - 1000000"]}, {"regex": "^((\\+){0,1}91(\\s){0,1}(\\-){0,1}(\\s){0,1}){0,1}98(\\s){0,1}(\\-){0,1}(\\s){0,1}[1-9]{1}[0-9]{7}$", "exceptionStackTrace": null, "matches": ["+91 - 98 -10000000", "+91 - 98  10000000", "+91 - 98- 10000000", "98 - 10000000", "+91 -98 - 10000000", "+91  98 - 10000000", "+91- 98 - 10000000", "91 - 98 - 10000000", "9810000000", "+91 - 98 - 10000000"], "nonMatches": ["+91 - 98 - 100000000", "+91 - 98 - 1000000", "+91 - 98 - 110000000", "+91 - 98 - 0000000", "+91 - 98 - 00000000", "+91 - 98 -  10000000", "+91 - 98 -- 10000000", "+91 - 98  - 10000000", "+91 - +91 - 98 - 10000000", "+91 -  98 - 10000000", "+91 -- 98 - 10000000", "+91  - 98 - 10000000", "++91 - 98 - 10000000"]}, {"regex": "-[0-9]*[x][0-9]*", "exceptionStackTrace": null, "matches": ["-0x00", "-0x", "-00x0", "-x0", "-x", "-0x0"], "nonMatches": []}, {"regex": "^((11|12|13|14|15|21|22|23|31|32|33|34|35|36|37|41|42|43|44|45|46|50|51|52|53|54|61|62|63|64|65|71|81|82|91)\\d{4})((((((19|20)(([02468][048])|([13579][26]))0229))|((20[0-9][0-9])|(19[0-9][0-9]))((((0[1-9])|(1[0-2]))((0[1-9])|(1\\d)|(2[0-8])))|((((0[1,3-9])|(1[0-2]))(29|30))|(((0[13578])|(1[02]))31))))((\\d{3}(x|X))|(\\d{4})))|((((([02468][048])|([13579][26]))0229)|(\\d{2}((((0[1-9])|(1[0-2]))((0[1-9])|(1\\d)|(2[0-8])))|(((0[1,3-9])|(1[0-2]))(29|30))|(((0[13578])|(1[02]))31))))\\d{3}))$", "exceptionStackTrace": null, "matches": ["110000001031000", "110000000731000", "110000000531000", "110000000331000", "110000000131000", "110000000329000", "110000000129000", "110000920229000", "110000760229000", "110000560229000", "110000360229000", "110000160229000", "110000840229000", "110000800229000", "110000680229000", "110000480229000", "110000280229000", "110000080229000", "11000020001031000x", "11000020000731000x", "11000020000531000x", "11000020000331000x", "11000020000131000x", "11000020000329000x", "11000020000129000x", "11000019920229000x", "11000019760229000x", "11000019560229000x", "11000019360229000x", "11000019160229000x", "11000019840229000x", "11000019800229000x", "11000019680229000x", "11000019480229000x", "11000019280229000x", "11000019080229000x", "91000019880229000x", "82000019880229000x", "81000019880229000x", "71000019880229000x", "65000019880229000x", "64000019880229000x", "63000019880229000x", "62000019880229000x", "61000019880229000x", "54000019880229000x", "53000019880229000x", "52000019880229000x", "51000019880229000x", "50000019880229000x", "46000019880229000x", "45000019880229000x", "44000019880229000x", "43000019880229000x", "42000019880229000x", "41000019880229000x", "37000019880229000x", "36000019880229000x", "35000019880229000x", "34000019880229000x", "33000019880229000x", "32000019880229000x", "31000019880229000x", "23000019880229000x", "22000019880229000x", "21000019880229000x", "15000019880229000x", "14000019880229000x", "13000019880229000x", "12000019880229000x", "110000001231000", "110000000831000", "110000001029000", "110000000,30000", "110000000,29000", "110000001001000", "110000000120000", "110000000110000", "110000000101000", "110000960229000", "110000880229000", "11000019000101000x", "11000020001231000x", "11000020000831000x", "11000020001029000x", "11000020000,30000x", "11000020000,29000x", "11000020001001000x", "11000020000120000x", "11000020000110000x", "11000020000101000x", "11000020880229000x", "11000019960229000x", "110000198802290000", "11000019880229000X", "11000019880229000x"], "nonMatches": ["110000001131000", "110000000031000", "110000001329000", "110000000029000", "110000001301000", "110000000100000", "110000000001000", "1100000000101000", "11000000101000", "110000900229000", "110000060229000", "1100008802290000", "11000088022900", "110000810229000", "110000180229000", "11000020001131000x", "11000020000031000x", "11000020001329000x", "11000020000029000x", "11000020001301000x", "11000020000100000x", "11000020000001000x", "11000019900229000x", "11000019060229000x", "1100001988022900000", "11000019880229000", "110000198802290000x", "1100001988022900x", "11000019810229000x", "11000019180229000x", "110000019880229000x", "1100019880229000x"]}, {"regex": "^[-]?\\d{1,10}\\.?([0-9][0-9])?$", "exceptionStackTrace": null, "matches": ["-0.", "-000", "-0000000000.00", "0.00", "0", "-0.00"], "nonMatches": ["-0.0000", "-0..00", "-00000000000.00", "-.00", "--0.00"]}, {"regex": "^([A-Za-z]\\d[A-Za-z][-]?\\d[A-Za-z]\\d)", "exceptionStackTrace": null, "matches": ["a0a-0A0", "a0A-0a0", "A0a-0a0", "a0a0a0", "a0a-0a0"], "nonMatches": ["a0a--0a0"]}, {"regex": "^(([_\\w-+!#$%&amp;&#39;*/=?^`{}|~]+(\\.[_\\w-+!#$%&amp;&#39;*/=?^`{}|~]+)*)|(&quot;([ _\\w-+!#$%&amp;&#39;*/=?^`{}|~]+(\\.[ _\\w-+!#$%&amp;&#39;*/=?^`{}|~]+)*)&quot;))@[\\w-]{1,63}(\\\\.[\\w-]{1,63})*(\\.[_\\w-]{2,6})$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character range \\w-+"}, "matches": []}, {"regex": "\\d{4}\\s\\d{4}\\s\\d{4}\\s\\d{4}$", "exceptionStackTrace": null, "matches": ["00000 0000 0000 0000", "0000 0000 0000 0000"], "nonMatches": ["0000 0000 0000 00000", "0000 0000 0000 000", "0000 0000 00000 0000", "0000 0000 000 0000", "0000 00000 0000 0000", "0000 000 0000 0000", "000 0000 0000 0000"]}, {"regex": "((\\(\\d{3}\\)?)|(\\d{3}))([\\s-./]?)(\\d{3})([\\s-./]?)(\\d{4})", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character range \\s-."}, "matches": []}, {"regex": "^\\s*[a-zA-Z,\\s]+\\s*$", "exceptionStackTrace": null, "matches": [" evil  ", " evil", " , ", " eVil ", " EVIL ", " ev il ", " e ", "   ", "  ", "  evil ", "evil ", "evil", " evil "], "nonMatches": [" ev_il ", " ev4il ", " 6 ", " _ "]}, {"regex": "^[a-zA-Z0-9\\s.\\-]+$", "exceptionStackTrace": null, "matches": [".", "-", "eVil", "EVIL", "ev il", "ev4il", "e", " ", "6", "evil"], "nonMatches": ["ev_il", "_", ""]}, {"regex": "&lt;a[a-zA-Z0-9 =&quot;&#39;.:;?]*(name=){1}[a-zA-Z0-9 =&quot;&#39;.:;?]*\\s*((/&gt;)|(&gt;[a-zA-Z0-9 =&quot;&#39;&lt;&gt;.:;?]*&lt;/a&gt;))", "exceptionStackTrace": null, "matches": ["&lt;aevilname=evil &gt;?&lt;/a&gt;", "&lt;aevilname=evil &gt;=&lt;/a&gt;", "&lt;aevilname=evil &gt;;&lt;/a&gt;", "&lt;aevilname=evil &gt;:&lt;/a&gt;", "&lt;aevilname=evil &gt;.&lt;/a&gt;", "&lt;aevilname=evil &gt;&&lt;/a&gt;", "&lt;aevilname=evil &gt;#&lt;/a&gt;", "&lt;aevilname=evil &gt;eVil&lt;/a&gt;", "&lt;aevilname=evil &gt;EVIL&lt;/a&gt;", "&lt;aevilname=evil &gt;ev il&lt;/a&gt;", "&lt;aevilname=evil &gt;ev4il&lt;/a&gt;", "&lt;aevilname=evil &gt;e&lt;/a&gt;", "&lt;aevilname=evil &gt; &lt;/a&gt;", "&lt;aevilname=evil &gt;6&lt;/a&gt;", "&lt;aevilname=evil &gt;&lt;/a&gt;", "&lt;aevilname=evil  /&gt;", "&lt;aevilname=evil/&gt;", "&lt;aevilname=? /&gt;", "&lt;aevilname== /&gt;", "&lt;aevilname=; /&gt;", "&lt;aevilname=: /&gt;", "&lt;aevilname=. /&gt;", "&lt;aevilname=& /&gt;", "&lt;aevilname=# /&gt;", "&lt;aevilname=eVil /&gt;", "&lt;aevilname=EVIL /&gt;", "&lt;aevilname=ev il /&gt;", "&lt;aevilname=ev4il /&gt;", "&lt;aevilname=e /&gt;", "&lt;aevilname=  /&gt;", "&lt;aevilname=6 /&gt;", "&lt;aevilname= /&gt;", "&lt;aevilname=name=evil /&gt;", "&lt;a?name=evil /&gt;", "&lt;a=name=evil /&gt;", "&lt;a;name=evil /&gt;", "&lt;a:name=evil /&gt;", "&lt;a.name=evil /&gt;", "&lt;a&name=evil /&gt;", "&lt;a#name=evil /&gt;", "&lt;aeVilname=evil /&gt;", "&lt;aEVILname=evil /&gt;", "&lt;aev ilname=evil /&gt;", "&lt;aev4ilname=evil /&gt;", "&lt;aename=evil /&gt;", "&lt;a name=evil /&gt;", "&lt;a6name=evil /&gt;", "&lt;aname=evil /&gt;", "&lt;aname=&gt;&lt;/a&gt;", "&lt;aname=/&gt;", "&lt;aevilname=evil &gt;evil&lt;/a&gt;", "&lt;aevilname=evil /&gt;"], "nonMatches": ["&lt;aevilname=evil &gt;/&lt;/a&gt;", "&lt;aevilname=evil &gt;ev_il&lt;/a&gt;", "&lt;aevilname=evil &gt;_&lt;/a&gt;", "&lt;aevilname=/ /&gt;", "&lt;aevilname=ev_il /&gt;", "&lt;aevilname=_ /&gt;", "&lt;aevilevil /&gt;", "&lt;a/name=evil /&gt;", "&lt;aev_ilname=evil /&gt;", "&lt;a_name=evil /&gt;"]}, {"regex": "&lt;a[a-zA-Z0-9 =&quot;&#39;.?_/]*(href\\s*=\\s*){1}[a-zA-Z0-9 =&quot;&#39;.?_/]*\\s*((/&gt;)|(&gt;[a-zA-Z0-9 =&quot;&#39;&lt;&gt;.?_/]*&lt;/a&gt;))", "exceptionStackTrace": null, "matches": ["&lt;aevilhref = evil &gt;?&lt;/a&gt;", "&lt;aevilhref = evil &gt;=&lt;/a&gt;", "&lt;aevilhref = evil &gt;;&lt;/a&gt;", "&lt;aevilhref = evil &gt;/&lt;/a&gt;", "&lt;aevilhref = evil &gt;.&lt;/a&gt;", "&lt;aevilhref = evil &gt;&&lt;/a&gt;", "&lt;aevilhref = evil &gt;#&lt;/a&gt;", "&lt;aevilhref = evil &gt;eVil&lt;/a&gt;", "&lt;aevilhref = evil &gt;EVIL&lt;/a&gt;", "&lt;aevilhref = evil &gt;ev_il&lt;/a&gt;", "&lt;aevilhref = evil &gt;ev il&lt;/a&gt;", "&lt;aevilhref = evil &gt;ev4il&lt;/a&gt;", "&lt;aevilhref = evil &gt;e&lt;/a&gt;", "&lt;aevilhref = evil &gt; &lt;/a&gt;", "&lt;aevilhref = evil &gt;6&lt;/a&gt;", "&lt;aevilhref = evil &gt;_&lt;/a&gt;", "&lt;aevilhref = evil &gt;&lt;/a&gt;", "&lt;aevilhref = evil  /&gt;", "&lt;aevilhref = evil/&gt;", "&lt;aevilhref = ? /&gt;", "&lt;aevilhref = = /&gt;", "&lt;aevilhref = ; /&gt;", "&lt;aevilhref = / /&gt;", "&lt;aevilhref = . /&gt;", "&lt;aevilhref = & /&gt;", "&lt;aevilhref = # /&gt;", "&lt;aevilhref = eVil /&gt;", "&lt;aevilhref = EVIL /&gt;", "&lt;aevilhref = ev_il /&gt;", "&lt;aevilhref = ev il /&gt;", "&lt;aevilhref = ev4il /&gt;", "&lt;aevilhref = e /&gt;", "&lt;aevilhref =   /&gt;", "&lt;aevilhref = 6 /&gt;", "&lt;aevilhref = _ /&gt;", "&lt;aevilhref =  /&gt;", "&lt;aevilhref = href = evil /&gt;", "&lt;aevilhref =  evil /&gt;", "&lt;aevilhref =evil /&gt;", "&lt;aevilhref  = evil /&gt;", "&lt;aevilhref= evil /&gt;", "&lt;a?href = evil /&gt;", "&lt;a=href = evil /&gt;", "&lt;a;href = evil /&gt;", "&lt;a/href = evil /&gt;", "&lt;a.href = evil /&gt;", "&lt;a&href = evil /&gt;", "&lt;a#href = evil /&gt;", "&lt;aeVilhref = evil /&gt;", "&lt;aEVILhref = evil /&gt;", "&lt;aev_ilhref = evil /&gt;", "&lt;aev ilhref = evil /&gt;", "&lt;aev4ilhref = evil /&gt;", "&lt;aehref = evil /&gt;", "&lt;a href = evil /&gt;", "&lt;a6href = evil /&gt;", "&lt;a_href = evil /&gt;", "&lt;ahref = evil /&gt;", "&lt;ahref=&gt;&lt;/a&gt;", "&lt;ahref=/&gt;", "&lt;aevilhref = evil &gt;evil&lt;/a&gt;", "&lt;aevilhref = evil /&gt;"], "nonMatches": ["&lt;aevilevil /&gt;"]}, {"regex": "https://alphajackedhelp.com/renuvaline-ireland/", "exceptionStackTrace": null, "matches": ["https://alphajackedhelpAcom/renuvaline-ireland/", "https://alphajackedhelp:com/renuvaline-ireland/", "https://alphajackedhelp0com/renuvaline-ireland/", "https://alphajackedhelp/com/renuvaline-ireland/", "https://alphajackedhelp-com/renuvaline-ireland/", "https://alphajackedhelp com/renuvaline-ireland/", "https://alphajackedhelpacom/renuvaline-ireland/"], "nonMatches": []}, {"regex": "Remove - Guys, Burn Belly Fat Off The Straightforward Way", "exceptionStackTrace": null, "matches": ["Remove - Guys, Burn Belly Fat Off The Straightforward Way"], "nonMatches": []}, {"regex": "^(1?)(-| ?)(\\()?([0-9]{3})(\\)|-| |\\)-|\\) )?([0-9]{3})(-| )?([0-9]{4}|[0-9]{4})$", "exceptionStackTrace": null, "matches": ["1(000)000-0000", "1-(000)0000000", "1-(000000-0000", "1-000)000-0000", "-(000)000-0000", "0000000000", "-0000000000", "1 (000)000-0000", "1-(000) 000-0000", "1-(000)-000-0000", "1-(000 000-0000", "1-(000-000-0000", "1-(000)000 0000", "1-(000)000-0000"], "nonMatches": ["1  (000)000-0000", "1-(000)000-00000", "1-(000)000-000", "1-(000)000--0000", "1-(000)0000-0000", "1-(000)00-0000", "1-(000))000-0000", "1-(0000)000-0000", "1-(00)000-0000", "1-((000)000-0000", "11-(000)000-0000"]}, {"regex": "^(?=.*\\d)(?=.*[a-zA-Z])(?!.*[\\W_\\x7B-\\xFF]).{6,15}$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 255"}, "matches": [], "nonMatches": []}, {"regex": "(\\/\\*[\\s\\S.]+?\\*\\/|[/]{2,}.*|\\/((\\\\\\/)|.??)*\\/[gim]{0,3}|&#39;((\\\\\\&#39;)|.??)*&#39;|&quot;((\\\\\\&quot;)|.??)*&quot;|-?\\d+\\.\\d+e?-?e?\\d*|-?\\.\\d+e-?\\d+|\\w+|[\\[\\]\\(\\)\\{\\}:=;&quot;&#39;\\-&!|+,.\\/*])", "exceptionStackTrace": null, "matches": ["}", "|", "{", "u", "t", "q", "o", "a", "]", "[", "=", ";", ":", "9", "3", "0", "/", ".", "-", ",", "+", ")", "(", "&", "#", "!", "eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", "6", "_", "-.0e-00", "-.0e-", "-.0e--0", "-.0e0", "-.00e-0", "-.e-0", "--.0e-0", ".0e-0", "-0.0e-e00", "-0.0e-e", "-0.0e-ee0", "-0.0e-0", "-0.0e--e0", "-0.0ee0", "-0.0ee-e0", "-0.0-e0", "-0.00e-e0", "-0.e-e0", "-00.0e-e0", "-.0e-e0", "--0.0e-e0", "0.0e-e0", "&quot;aa&quot;", "&quot;}&quot;", "&quot;|&quot;", "&quot;{&quot;", "&quot;]&quot;", "&quot;\\&quot;", "&quot;[&quot;", "&quot;A&quot;", "&quot;=&quot;", "&quot;;&quot;", "&quot;:&quot;", "&quot;0&quot;", "&quot;/&quot;", "&quot;.&quot;", "&quot;-&quot;", "&quot;,&quot;", "&quot;+&quot;", "&quot;*&quot;", "&quot;)&quot;", "&quot;(&quot;", "&quot;&&quot;", "&quot;#&quot;", "&quot;!&quot;", "&quot; &quot;", "&quot;\\&quot;\\&quot;&quot;", "&#39;aa&#39;", "&#39;}&#39;", "&#39;|&#39;", "&#39;{&#39;", "&#39;]&#39;", "&#39;\\&#39;", "&#39;[&#39;", "&#39;A&#39;", "&#39;=&#39;", "&#39;;&#39;", "&#39;:&#39;", "&#39;0&#39;", "&#39;/&#39;", "&#39;.&#39;", "&#39;-&#39;", "&#39;,&#39;", "&#39;+&#39;", "&#39;*&#39;", "&#39;)&#39;", "&#39;(&#39;", "&#39;&&#39;", "&#39;#&#39;", "&#39;!&#39;", "&#39; &#39;", "&#39;\\&#39;\\&#39;&#39;", "/aa/m", "/}/m", "/|/m", "/{/m", "/]/m", "/\\/m", "/[/m", "/A/m", "/=/m", "/;/m", "/:/m", "/0/m", "///m", "/./m", "/-/m", "/,/m", "/+/m", "/*/m", "/)/m", "/(/m", "/&/m", "/#/m", "/!/m", "/ /m", "/\\//mmmm", "/\\//mmm", "/\\//", "/\\//i", "/\\//g", "/\\//a", "/\\/\\//m", "//m", "//}", "//|", "//{", "//]", "//\\", "//[", "//=", "//;", "//:", "///", "//.", "//-", "//,", "//+", "//*", "//)", "//(", "//&", "//#", "//!", "//eVil", "//EVIL", "//ev_il", "//ev il", "//ev4il", "//e", "// ", "//6", "//_", "/evil", "/*}*/", "/*|*/", "/*{*/", "/*]*/", "/*\\*/", "/*[*/", "/*=*/", "/*;*/", "/*:*/", "/*/*/", "/*.*/", "/*-*/", "/*,*/", "/*+*/", "/***/", "/*)*/", "/*(*/", "/*&*/", "/*#*/", "/*!*/", "/*eVil*/", "/*EVIL*/", "/*ev_il*/", "/*ev il*/", "/*ev4il*/", "/*e*/", "/* */", "/*6*/", "/*_*/", "/**/", ".0e0", "0.0", "&quot;&quot;", "&#39;&#39;", "//", "*", "evil", "-.0e-0", "-0.0e-e0", "&quot;a&quot;", "&quot;\\&quot;&quot;", "&#39;a&#39;", "&#39;\\&#39;&#39;", "/a/m", "/\\//m", "//evil", "/*evil*/"], "nonMatches": [" ", ""]}, {"regex": "(\\w+[\\.\\_\\-]*)*\\w+@[\\w]+(.)*\\w+$", "exceptionStackTrace": null, "matches": ["evil-evil@evilaeVil", "evil-evil@evilaEVIL", "evil-evil@evilaev_il", "evil-evil@evilaev il", "evil-evil@evilaev4il", "evil-evil@evilae", "evil-evil@evila6", "evil-evil@evila_", "evil-evil@evila", "evil-evil@evilaaevil", "evil-evil@evilevil", "evil-evil@evil_evil", "evil-evil@evilAevil", "evil-evil@evil@evil", "evil-evil@evil0evil", "evil-evil@evil.evil", "evil-evil@evil-evil", "evil-evil@evil evil", "evil-evil@eVilaevil", "evil-evil@EVILaevil", "evil-evil@ev_ilaevil", "evil-evil@ev ilaevil", "evil-evil@ev4ilaevil", "evil-evil@eaevil", "evil-evil@6aevil", "evil-evil@_aevil", "evil-evil@aevil", "evil-eVil@evilaevil", "evil-EVIL@evilaevil", "evil-ev_il@evilaevil", "evil-ev il@evilaevil", "evil-ev4il@evilaevil", "evil-e@evilaevil", "evil-6@evilaevil", "evil-_@evilaevil", "evil-evil-evil@evilaevil", "evil@evilaevil", "evil--evil@evilaevil", "evilevil@evilaevil", "evil_evil@evilaevil", "evil.evil@evilaevil", "eVil-evil@evilaevil", "EVIL-evil@evilaevil", "ev_il-evil@evilaevil", "ev il-evil@evilaevil", "ev4il-evil@evilaevil", "e-evil@evilaevil", " -evil@evilaevil", "6-evil@evilaevil", "_-evil@evilaevil", "-evil@evilaevil", "evil@evilevil", "evil-evil@evilaevil"], "nonMatches": ["evil-evil@evila ", "evil-evil@ aevil", "evil- @evilaevil", "evil-@evilaevil"]}, {"regex": "(?i)((sun(day)?|mon(day)?|tue(sday)?|wed(nesday)?|thu(rsday)?|fri(day)?|sat(urday)?),?\\s)?((jan(uary)?|feb(ruary)?|mar(ch)?|apr(il)?|may|jun(e)?|jul(y)?|aug(ust)?|sep(tember)?|oct(ober)?|nov(ember)?|dec(ember)?)\\s)+((0?[1-9]|[1-2][0-9]|3[0-1]),?\\s)+([1-2][0-9][0-9][0-9])", "exceptionStackTrace": null, "matches": ["saturdayurday, january 01, 1000", "sat, january 01, 1000", "fridayday, january 01, 1000", "fri, january 01, 1000", "thursdayrsday, january 01, 1000", "thu, january 01, 1000", "wednesdaynesday, january 01, 1000", "wed, january 01, 1000", "tuesdaysday, january 01, 1000", "tue, january 01, 1000", "mondayday, january 01, 1000", "mon, january 01, 1000", "sunday, dec 01, 1000", "sunday, nov 01, 1000", "sunday, oct 01, 1000", "sunday, sep 01, 1000", "sunday, aug 01, 1000", "sunday, jul 01, 1000", "sunday, jun 01, 1000", "sunday, apr 01, 1000", "sunday, mar 01, 1000", "sunday, feb 01, 1000", "sunday, january 01, 01, 1000", "sunday, january 01 1000", "sunday, january 1, 1000", "sunday, january january 01, 1000", "sunday, jan 01, 1000", "sunday, sunday, january 01, 1000", "january 01, 1000", "sunday,, january 01, 1000", "sunday january 01, 1000", "sundayday, january 01, 1000", "sun, january 01, 1000", "dec 1 1000", "nov 1 1000", "oct 1 1000", "sep 1 1000", "aug 1 1000", "jul 1 1000", "jun 1 1000", "may 1 1000", "apr 1 1000", "mar 1 1000", "feb 1 1000", "jan 30 1000", "jan 10 1000", "jan 1 1000", "saturday, january 01, 1000", "friday, january 01, 1000", "thursday, january 01, 1000", "wednesday, january 01, 1000", "tuesday, january 01, 1000", "monday, january 01, 1000", "sunday, december 01, 1000", "sunday, november 01, 1000", "sunday, october 01, 1000", "sunday, september 01, 1000", "sunday, august 01, 1000", "sunday, july 01, 1000", "sunday, june 01, 1000", "sunday, may 01, 1000", "sunday, april 01, 1000", "sunday, march 01, 1000", "sunday, february 01, 1000", "sunday, january 30, 1000", "sunday, january 10, 1000", "sunday, january 01, 1000"], "nonMatches": ["sunday, decemberember 01, 1000", "sunday, novemberember 01, 1000", "sunday, octoberober 01, 1000", "sunday, septembertember 01, 1000", "sunday, augustust 01, 1000", "sunday, julyy 01, 1000", "sunday, junee 01, 1000", "sunday, aprilil 01, 1000", "sunday, marchch 01, 1000", "sunday, februaryruary 01, 1000", "sunday, january 32, 1000", "sunday, january 01, 0000", "sunday, january 1000", "sunday, january 01,, 1000", "sunday, january 00, 1000", "sunday, january 001, 1000", "sunday, 01, 1000", "sunday, januaryuary 01, 1000"]}, {"regex": "fdhfh", "exceptionStackTrace": null, "matches": ["fdhfh"], "nonMatches": []}, {"regex": "(^(\\d+)$)|(^(\\d{1,3}[ ,\\.](\\d{3}[ ,\\.])*\\d{3}|\\d{1,3})$)", "exceptionStackTrace": null, "matches": ["0000", "000", "0.000.000.000", "0.000,000", "0.000 000", "0,000.000", "0 000.000", "000.000.000", "00", "0.000", "0.000.000", "0"], "nonMatches": ["0.000.0000", "0.000.00", "0.0000.000", "0.00.000", "0000.000.000", ".000.000", ""]}, {"regex": "^[\\w0-9&#228;&#196;&#246;&#214;&#252;&#220;&#223;\\-_]+\\.[a-zA-Z0-9]{2,6}$", "exceptionStackTrace": null, "matches": ["evil.000000", "evil.a0", "evil.A0", ";.00", "-.00", "&.00", "#.00", "eVil.00", "EVIL.00", "ev_il.00", "ev4il.00", "e.00", "6.00", "_.00", "evil.00"], "nonMatches": ["evil.0000000", "evil.0", "..00", "ev il.00", " .00", ".00"]}, {"regex": "(A|B|AB|O)[+-]", "exceptionStackTrace": null, "matches": ["A+", "O-", "AB-", "B-", "A-"], "nonMatches": []}, {"regex": "(?:\\s+)|((?:&quot;(?:.+?)&quot;)|(?:&#39;(?:.+?)&#39;)) ", "exceptionStackTrace": null, "matches": ["&#39;;&#39; ", "&#39;&&#39; ", "&#39;#&#39; ", "&#39;eVil&#39; ", "&#39;EVIL&#39; ", "&#39;ev_il&#39; ", "&#39;ev il&#39; ", "&#39;ev4il&#39; ", "&#39;e&#39; ", "&#39; &#39; ", "&#39;6&#39; ", "&#39;_&#39; ", "&#39;&#39; ", "&quot;;&quot; ", "&quot;&&quot; ", "&quot;#&quot; ", "&quot;eVil&quot; ", "&quot;EVIL&quot; ", "&quot;ev_il&quot; ", "&quot;ev il&quot; ", "&quot;ev4il&quot; ", "&quot;e&quot; ", "&quot; &quot; ", "&quot;6&quot; ", "&quot;_&quot; ", "&quot;&quot; ", "  ", "&#39;evil&#39; ", "&quot;evil&quot; ", " "], "nonMatches": [""]}, {"regex": "\\d+\\s*[.&#39;-]\\s*\\d+\\s*[\\d+.m\\&quot;]*", "exceptionStackTrace": null, "matches": ["0 - 0 ;;", "0 - 0 ", "0 - 0 u", "0 - 0 t", "0 - 0 q", "0 - 0 o", "0 - 0 m", "0 - 0 a", "0 - 0 0", "0 - 0 .", "0 - 0 +", "0 - 0 &", "0 - 0  ;", "0 - 0;", "0 - 00 ;", "0 -  0 ;", "0 -0 ;", "0 ; 0 ;", "0 9 0 ;", "0 3 0 ;", "0 . 0 ;", "0 & 0 ;", "0 # 0 ;", "0  - 0 ;", "0- 0 ;", "00 - 0 ;", "0-0", "0 - 0 ;"], "nonMatches": ["0 -  ;", "0 0 0 ;", " - 0 ;"]}, {"regex": "^(\\d{4})(?:-([0]\\d|[1][0-2]))(?:-([0-2]\\d|[3][01]))(?:T([01]\\d|2[0-3]))(?::([0-5]\\d))(?::([0-5]\\d)(?:\\.(\\d{1,7}?)|)|)(Z|([+-])([01]\\d|2[0-3])(?::([0-5]\\d)))$", "exceptionStackTrace": null, "matches": ["0000-00-00T10:00:00.0-00:00", "0000-00-00T10:00:00.0+10:00", "0000-00-00T10:00:00Z", "0000-00-00T10:00:00.0000000Z", "0000-00-00T00:00:00.0Z", "0000-00-30T10:00:00.0Z", "0000-10-00T10:00Z", "0000-00-31T10:00Z", "0000-00-00T20:00Z", "0000-00-00T10:00-20:00", "0000-00-00T10:00-10:00", "0000-00-00T10:00Z", "0000-10-00T10:00:00.0Z", "0000-00-31T10:00:00.0Z", "0000-00-00T20:00:00.0Z", "0000-00-00T10:00:00.0-20:00", "0000-00-00T10:00:00.0-10:00", "0000-00-00T10:00:00.0Z"], "nonMatches": ["0000-13-00T10:00:00.0Z", "0000-00-32T10:00:00.0Z", "0000-00-00T24:00:00.0Z", "0000-00-00T10:00:00.0-24:00", "0000-00-00T10:00:00.0-10:60", "0000-00-00T10:00:00.0:00.0Z", "0000-00-00T10:00:00.0.0Z", "0000-00-00T10:00:00.00000000Z", "0000-00-00T10:00:00.Z", "0000-00-00T10:00:60.0Z", "0000-00-00T10:60:00.0Z", "00000-00-00T10:00:00.0Z", "000-00-00T10:00:00.0Z"]}, {"regex": "[a-zA-Z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u01FF]", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 192"}, "matches": [], "nonMatches": []}, {"regex": "^([\\u00c0-\\u01ffa-zA-Z&#39;\\-]+[ ]?[\\u00c0-\\u01ffa-zA-Z&#39;\\-]*)+$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 192"}, "matches": [], "nonMatches": []}, {"regex": "(\\d\\d\\d\\d)-?(\\d\\d)-?(\\d\\d)T?(\\d\\d):?(\\d\\d)(?::?(\\d\\d)(\\.\\d+)*?)?(Z|[+-])(?:(\\d\\d):?(\\d\\d))?", "exceptionStackTrace": null, "matches": ["0000-00-00T00:00:00.0+00:00", "0000-00-00T00:00:00.0Z00:0000:00", "0000-00-00T00:00:00.0Z", "0000-00-00T00:00:00.0Z00::00", "0000-00-00T00:00:00.0Z0000", "0000-00-00T00:00Z00:00", "0000-00-00T00:00:00.0.0Z00:00", "0000-00-00T00:00:00Z00:00", "0000-00-00T00:00:00.00Z00:00", "0000-00-00T00:0000.0Z00:00", "0000-00-00T0000:00.0Z00:00", "0000-00-0000:00:00.0Z00:00", "0000-0000T00:00:00.0Z00:00", "000000-00T00:00:00.0Z00:00", "000000000000-", "000000000000Z", "0000-00-00T00:00:00.0-00:00", "0000-00-00T00:00:00.0Z00:00"], "nonMatches": ["0000-00-00T00:00:00.0:00.0Z00:00", "0000-00-00T00:00:00.Z00:00", "0000-00-00T00:00::00.0Z00:00", "0000-00-00T00::00:00.0Z00:00", "0000-00-00TT00:00:00.0Z00:00", "0000-00--00T00:00:00.0Z00:00", "0000--00-00T00:00:00.0Z00:00"]}, {"regex": "((^[{])|^)[A-Za-z0-9]{8}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{12}(?(2)[}]$|$)", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (internal): Unexpected extension ?("}, "matches": [], "nonMatches": []}, {"regex": "^[{][A-Za-z0-9]{8}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{12}[}]$|^[A-Za-z0-9]{8}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{12}$", "exceptionStackTrace": null, "matches": ["00000000-0000-0000-0000-a00000000000", "00000000-0000-0000-0000-A00000000000", "00000000-0000-0000-a000-000000000000", "00000000-0000-0000-A000-000000000000", "00000000-0000-a000-0000-000000000000", "00000000-0000-A000-0000-000000000000", "00000000-a000-0000-0000-000000000000", "00000000-A000-0000-0000-000000000000", "a0000000-0000-0000-0000-000000000000", "A0000000-0000-0000-0000-000000000000", "{00000000-0000-0000-0000-a00000000000}", "{00000000-0000-0000-0000-A00000000000}", "{00000000-0000-0000-a000-000000000000}", "{00000000-0000-0000-A000-000000000000}", "{00000000-0000-a000-0000-000000000000}", "{00000000-0000-A000-0000-000000000000}", "{00000000-a000-0000-0000-000000000000}", "{00000000-A000-0000-0000-000000000000}", "{a0000000-0000-0000-0000-000000000000}", "{A0000000-0000-0000-0000-000000000000}", "00000000-0000-0000-0000-000000000000", "{00000000-0000-0000-0000-000000000000}"], "nonMatches": ["00000000-0000-0000-0000-0000000000000", "00000000-0000-0000-0000-00000000000", "00000000-0000-0000-00000-000000000000", "00000000-0000-0000-000-000000000000", "00000000-0000-00000-0000-000000000000", "00000000-0000-000-0000-000000000000", "00000000-00000-0000-0000-000000000000", "00000000-000-0000-0000-000000000000", "000000000-0000-0000-0000-000000000000", "0000000-0000-0000-0000-000000000000", "{00000000-0000-0000-0000-0000000000000}", "{00000000-0000-0000-0000-00000000000}", "{00000000-0000-0000-00000-000000000000}", "{00000000-0000-0000-000-000000000000}", "{00000000-0000-00000-0000-000000000000}", "{00000000-0000-000-0000-000000000000}", "{00000000-00000-0000-0000-000000000000}", "{00000000-000-0000-0000-000000000000}", "{000000000-0000-0000-0000-000000000000}", "{0000000-0000-0000-0000-000000000000}"]}, {"regex": "^(?=.*(\\W.*){4,}).*$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", " ", "6", "_", "", "evil"]}, {"regex": "(?<!and\\snot|and|not|or)\\s+(?!(and\\snot|or|-)|([^&quot;]*&quot;[^&quot;]*&quot;)*[^&quot;]*&quot;[^&quot;]*$)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "look-behind requires fixed-width pattern"}, "matches": []}, {"regex": "\\&quot;[^&quot;]+\\&quot;|\\([^)]+\\)|[^\\&quot;\\s\\()]+", "exceptionStackTrace": null, "matches": ["eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", "6", "_", "(;)", "(()", "(&)", "(eVil)", "(EVIL)", "(ev_il)", "(ev il)", "(ev4il)", "(e)", "( )", "(6)", "(_)", "&quot;)&quot;", "&quot;(&quot;", "&quot;eVil&quot;", "&quot;EVIL&quot;", "&quot;ev_il&quot;", "&quot;ev il&quot;", "&quot;ev4il&quot;", "&quot;e&quot;", "&quot; &quot;", "&quot;6&quot;", "&quot;_&quot;", "evil", "(evil)", "&quot;evil&quot;"], "nonMatches": [";", ")", "(", "&", " ", "", "())", "()", "&quot;;&quot;", "&quot;&&quot;", "&quot;&quot;"]}, {"regex": "(?!\\bnot\\b|\\band\\b|\\bor\\b|\\b\\&quot;[^&quot;]+\\&quot;\\b)((?<=\\s|\\-|\\(|^)[^\\&quot;\\s\\()]+(?=\\s|\\*|\\)|$))", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "look-behind requires fixed-width pattern"}, "matches": []}, {"regex": "(?<=(?:^|\\s|,)&quot;)[^&quot;]*?(?=&quot;)|(?<=\\s|^)(?!&quot;)[\\w\\W]+?(?=\\s|$)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "look-behind requires fixed-width pattern"}, "matches": []}, {"regex": "<\\/*?(?![^>]*?\\b(?:a|img)\\b)[^>]*?>", "exceptionStackTrace": null, "matches": ["</>>", "</<>", "<//>", "</eVil>", "</EVIL>", "</ev_il>", "</ev il>", "</ev4il>", "</e>", "</ >", "</6>", "</_>", "</>", "<//evil>", "<evil>", "<>", "</evil>"], "nonMatches": []}, {"regex": "<(script|style)[^>]*?>(?:.|\\n)*?</\\s*\\1\\s*>", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\n"}, "matches": [], "nonMatches": []}, {"regex": "[^ _0-9a-zA-Z\\$\\%\\&#39;\\-\\@\\{\\}\\~\\!\\#\\(\\)\\&\\^]", "exceptionStackTrace": null, "matches": ["\""], "nonMatches": ["~", "}", "{", "a", "_", "^", "A", "@", ";", "9", "3", "0", "-", ")", "(", "&", "%", "$", "#", "!", " "]}, {"regex": "^(?=^.{8,}$)(?=.*\\d)(?=.*\\W+)(?=.*[a-z])(?=.*[A-Z])(?i-msnx:(?!.*pass|.*password|.*word|.*god|.*\\s))(?!^.*\\n).*$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown flag"}, "matches": []}, {"regex": "^[ .a-zA-Z0-9:-]{1,150}$", "exceptionStackTrace": null, "matches": ["------------------------------------------------------------------------------------------------------------------------------------------------------", "a", "A", ":", "0", ".", " ", "-"], "nonMatches": ["-------------------------------------------------------------------------------------------------------------------------------------------------------", ""]}, {"regex": "FacebookPhoneNumber", "exceptionStackTrace": null, "matches": ["FacebookPhoneNumber"], "nonMatches": []}, {"regex": "FacebookPhoneNumber", "exceptionStackTrace": null, "matches": ["FacebookPhoneNumber"], "nonMatches": []}, {"regex": "FacebookPhoneNumber", "exceptionStackTrace": null, "matches": ["FacebookPhoneNumber"], "nonMatches": []}, {"regex": "^\\-?[0-9]{1,3}(\\,[0-9]{3})*(\\.[0-9]+)?$|^[0-9]+(\\.[0-9]+)?$", "exceptionStackTrace": null, "matches": ["0.00", "00.0", "-0,000", "-0,000.00", "-0,000,000.0", "-0.0", "-000,000.0", "0,000.0", "0", "0.0", "-0,000.0"], "nonMatches": ["0.0.0", "0.", ".0", "-0,000.0.0", "-0,000.", "-0,0000.0", "-0,00.0", "-0000,000.0", "-,000.0", "--0,000.0"]}, {"regex": "^\\$?(\\d{1,3},?(\\d{3},?)*\\d{3}(\\.\\d{1,3})?|\\d{1,3}(\\.\\d{2})?)$", "exceptionStackTrace": null, "matches": ["$0", "$0000.00", "$000.00", "$0,000,000", "$0,000,000.000", "$0,000,000,000.0", "$0,000.0", "$0,000000.0", "$0000,000.0", "$0000,000,000.0", "$000,000,000.0", "0,000,000.0", "0", "0000", "$0.00", "$0,000,000.0"], "nonMatches": ["$0.00.00", "$0.000", "$0.0", "$.00", "$0,000,000.0.0", "$0,000,000.0000", "$0,000,000.", "$0,000,0000.0", "$0,000,00.0", "$0,000,,000.0", "$0,0000,000.0", "$0,00,000.0", "$0,,000,000.0", "$,000,000.0", "$$0,000,000.0"]}, {"regex": "^\\d{0,2}(\\.\\d{1,4})? *%?$", "exceptionStackTrace": null, "matches": ["0.0 ", "0.0  %", "0.0%", "0 %", "0.0000 %", "00.0 %", ".0 %", "", "0.0 %"], "nonMatches": ["0.0 %%", "0.0.0 %", "0.00000 %", "0. %", "000.0 %"]}, {"regex": "cfsdrg", "exceptionStackTrace": null, "matches": ["cfsdrg"], "nonMatches": []}, {"regex": "(^\\d*\\.\\d{2}$)", "exceptionStackTrace": null, "matches": ["00.00", ".00", "0.00"], "nonMatches": ["0.000", "0.0"]}, {"regex": "^[a-zA-Z]:(\\\\|(\\\\[^\\\\/\\s:*&quot;<>|]+)+)>", "exceptionStackTrace": null, "matches": ["A:\\evil\\evil>", "A:\\>>", "A:\\eVil>", "A:\\EVIL>", "A:\\ev_il>", "A:\\ev4il>", "A:\\e>", "A:\\6>", "A:\\_>", "a:\\>", "A:\\evil>", "A:\\>"], "nonMatches": ["A:>", "A:\\|>", "A:\\\\>", "A:\\<>", "A:\\;>", "A:\\:>", "A:\\/>", "A:\\*>", "A:\\&>", "A:\\ev il>", "A:\\ >"]}, {"regex": "[p|P][\\s]*[o|O][\\s]*[b|B][\\s]*[o|O][\\s]*[x|X][\\s]*[a-zA-Z0-9]*|\\b[P|p]+(OST|ost|o|O)?\\.?\\s*[O|o|0]+(ffice|FFICE)?\\.?\\s*[B|b][O|o|0]?[X|x]+\\.?\\s+[#]?(\\d+)*(\\D+)*\\b", "exceptionStackTrace": null, "matches": ["pOST. 0ffice. b0x. #0evilevil", "pOST. 0ffice. b0x. #0|", "pOST. 0ffice. b0x. #0.", "pOST. 0ffice. b0x. #0#", "pOST. 0ffice. b0x. #0eVil", "pOST. 0ffice. b0x. #0EVIL", "pOST. 0ffice. b0x. #0ev_il", "pOST. 0ffice. b0x. #0ev il", "pOST. 0ffice. b0x. #0ev4il", "pOST. 0ffice. b0x. #0e", "pOST. 0ffice. b0x. #0 ", "pOST. 0ffice. b0x. #06", "pOST. 0ffice. b0x. #0_", "pOST. 0ffice. b0x. #0", "pOST. 0ffice. b0x. #00evil", "pOST. 0ffice. b0x. #evil", "pOST. 0ffice. b0x. ##0evil", "pOST. 0ffice. b0x. 0evil", "pOST. 0ffice. b0x.  #0evil", "pOST. 0ffice. b0x #0evil", "pOST. 0ffice. b0xx. #0evil", "pOST. 0ffice. b0|. #0evil", "pOST. 0ffice. b0X. #0evil", "pOST. 0ffice. bx. #0evil", "pOST. 0ffice. b|x. #0evil", "pOST. 0ffice. box. #0evil", "pOST. 0ffice. bOx. #0evil", "pOST. 0ffice. |0x. #0evil", "pOST. 0ffice. B0x. #0evil", "pOST. 0ffice.  b0x. #0evil", "pOST. 0ffice.b0x. #0evil", "pOST. 0ffice b0x. #0evil", "pOST. 0. b0x. #0evil", "pOST. 00ffice. b0x. #0evil", "pOST. |ffice. b0x. #0evil", "pOST. office. b0x. #0evil", "pOST. Office. b0x. #0evil", "pOST.  0ffice. b0x. #0evil", "pOST.0ffice. b0x. #0evil", "pOST 0ffice. b0x. #0evil", "p. 0ffice. b0x. #0evil", "ppOST. 0ffice. b0x. #0evil", "POST. 0ffice. b0x. #0evil", "P O B O X eVil", "P O B O X EVIL", "P O B O X ev_il", "P O B O X ev il", "P O B O X ev4il", "P O B O X e", "P O B O X  ", "P O B O X 6", "P O B O X _", "P O B O X ", "P O B O X  evil", "P O B O Xevil", "P O B O | evil", "P O B O x evil", "P O B O  X evil", "P O B OX evil", "P O B | X evil", "P O B o X evil", "P O B  O X evil", "P O BO X evil", "P O | O X evil", "P O b O X evil", "P O  B O X evil", "P OB O X evil", "P | B O X evil", "P o B O X evil", "P  O B O X evil", "PO B O X evil", "| O B O X evil", "p O B O X evil", "POBOX", "pO. 0ffice. b0x. #0evil", "po. 0ffice. b0x. #0evil", "post. 0ffice. b0x. #0evil", "pOST. 0FFICE. b0x. #0evil", "pOST. 0ffice. b0x. #0evil", "P O B O X evil"], "nonMatches": ["pOST. 0ffice. b0x.#0evil", "pOST. 0ffice. b0x.. #0evil", "pOST. 0ffice. b0. #0evil", "pOST. 0ffice. b0a. #0evil", "pOST. 0ffice. b0A. #0evil", "pOST. 0ffice. b00x. #0evil", "pOST. 0ffice. bax. #0evil", "pOST. 0ffice. bAx. #0evil", "pOST. 0ffice. b1x. #0evil", "pOST. 0ffice. a0x. #0evil", "pOST. 0ffice. A0x. #0evil", "pOST. 0ffice.. b0x. #0evil", "pOST. 0fficeffice. b0x. #0evil", "pOST. ffice. b0x. #0evil", "pOST. affice. b0x. #0evil", "pOST. Affice. b0x. #0evil", "pOST. 1ffice. b0x. #0evil", "pOST.. 0ffice. b0x. #0evil", "pOSTOST. 0ffice. b0x. #0evil", "OST. 0ffice. b0x. #0evil", "|OST. 0ffice. b0x. #0evil", "aOST. 0ffice. b0x. #0evil", "AOST. 0ffice. b0x. #0evil", "P O B O a evil", "P O B O A evil", "P O B a X evil", "P O B A X evil", "P O a O X evil", "P O A O X evil", "P a B O X evil", "P A B O X evil", "a O B O X evil", "A O B O X evil", "p0bx "]}, {"regex": "(((^[>]?1.0)(\\d)?(\\d)?)|(^[<]?1.0(([1-9])|(\\d[1-9])|([1-9]\\d)))|(^[<]?1.4(0)?(0)?)|(^[<>]?1.(([123])(\\d)?(\\d)?)))$", "exceptionStackTrace": null, "matches": [">1a30", ">1a200", ">1a100", ">1A300", ">1>300", ">1<300", ">10300", ">1 300", "1a300", "<1a300", "<1a40", "<1A400", "<1>400", "<1<400", "<10400", "<1 400", "1a400", "<1A01", "<1>01", "<1<01", "<1001", "<1 01", ">1a00", ">1A000", ">1>000", ">1<000", ">10000", ">1 000", "1a000", "1a3", "1a4", "1a010", "1a001", "1a01", "1a0", ">1a300", "<1a400", "<1a010", "<1a001", "<1a01", ">1a000"], "nonMatches": [">1a3000", ">>1a300", "<1a4000", "<<1a400", "<1a000", "<1a00", "<<1a01", ">1a0000", ">>1a000"]}, {"regex": "(^(4|5)\\d{3}-?\\d{4}-?\\d{4}-?\\d{4}|(4|5)\\d{15})|(^(6011)-?\\d{4}-?\\d{4}-?\\d{4}|(6011)-?\\d{12})|(^((3\\d{3}))-\\d{6}-\\d{5}|^((3\\d{14})))", "exceptionStackTrace": null, "matches": ["3000000000000000", "3000-000000-000000", "6011-0000000000000", "6011-0000-0000-00000", "6011-0000-00000000", "6011-00000000-0000", "60110000-0000-0000", "40000000000000000", "4000-0000-0000-00000", "4000-0000-00000000", "4000-00000000-0000", "40000000-0000-0000", "6011000000000000", "300000000000000", "3000-000000-00000", "6011-000000000000", "6011-0000-0000-0000", "5000000000000000", "4000000000000000", "5000-0000-0000-0000", "4000-0000-0000-0000"], "nonMatches": ["30000000000000", "3000-000000-0000", "3000-0000000-00000", "3000-00000-00000", "30000-000000-00000", "300-000000-00000", "6011-00000000000", "6011--000000000000", "6011-0000-0000-000", "6011-0000-0000--0000", "6011-0000-00000-0000", "6011-0000-000-0000", "6011-0000--0000-0000", "6011-00000-0000-0000", "6011-000-0000-0000", "6011--0000-0000-0000", "400000000000000", "4000-0000-0000-000", "4000-0000-0000--0000", "4000-0000-00000-0000", "4000-0000-000-0000", "4000-0000--0000-0000", "4000-00000-0000-0000", "4000-000-0000-0000", "4000--0000-0000-0000", "40000-0000-0000-0000", "400-0000-0000-0000"]}, {"regex": "^(?=.*[a-zA-Z])[^\\*\\s]{4,8}$", "exceptionStackTrace": null, "matches": ["aaaaaaaa", "Aaaa", "0aaa", "aaaa"], "nonMatches": ["aaaaaaaaa", "aaa", "*aaa", " aaa"]}, {"regex": "^(?:(?#local-part)(?#quoted)&quot;[^\\&quot;]*&quot;|(?#non-quoted)[a-z0-9&+_-](?:\\.?[a-z0-9&+_-]+)*)@(?:(?#domain)(?#domain-name)[a-z0-9](?:[a-z0-9-]*[a-z0-9])*(?:\\.[a-z0-9](?:[a-z0-9-]*[a-z0-9])*)*|(?#ip)(\\[)?(?:[01]?\\d?\\d|2[0-4]\\d|25[0-5])(?:\\.(?:[01]?\\d?\\d|2[0-4]\\d|25[0-5])){3}(?(1)\\]|))$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (internal): Unexpected extension ?("}, "matches": [], "nonMatches": []}, {"regex": "hgtrfht", "exceptionStackTrace": null, "matches": ["hgtrfht"], "nonMatches": []}, {"regex": "(\\&quot;(?<word>[^\\&quot;]+|\\&quot;\\&quot;)*\\&quot;|(?<word>[^,]*))", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<w"}, "matches": []}, {"regex": "^(\\{1}[2-9]{1}[0-9]{2}\\){1}[ ]?[2-9]{1}[0-9]{2}(-| )?[0-9]{4}|[2-9]{1}[0-9]{2}[ ]{1}[2-9]{1}[0-9]{2}[ ]{1}[0-9]{4}|[2-9]{1}[0-9]{2}[2-9]{1}[0-9]{6}|[2-9]{1}[0-9]{2}-{1}[2-9]{1}[0-9]{2}-{1}[0-9]{4}){1}$", "exceptionStackTrace": null, "matches": ["{1}200) 2000000", "{1}200)200-0000", "{1}200)2000000", "200-200-0000", "2002000000", "200 200 0000", "{1}200) 200 0000", "{1}200) 200-0000"], "nonMatches": ["200-200-00000", "200-200-000", "200-200--0000", "200-2000000", "200-2000-0000", "200-20-0000", "200-2200-0000", "200-00-0000", "200-000-0000", "200--200-0000", "200200-0000", "2000-200-0000", "20-200-0000", "2200-200-0000", "00-200-0000", "000-200-0000", "20020000000", "200200000", "20022000000", "200000000", "2000000000", "20002000000", "202000000", "22002000000", "002000000", "0002000000", "200 200 00000", "200 200 000", "200 200  0000", "200 2000000", "200 2000 0000", "200 20 0000", "200 2200 0000", "200 00 0000", "200 000 0000", "200  200 0000", "200200 0000", "2000 200 0000", "20 200 0000", "2200 200 0000", "00 200 0000", "000 200 0000", "{1}200) 200-0000{1}200) 200-0000", "", "{1}200) 200-00000", "{1}200) 200-000", "{1}200) 200--0000", "{1}200) 2000-0000", "{1}200) 20-0000", "{1}200) 2200-0000", "{1}200) 00-0000", "{1}200) 000-0000", "{1}200)  200-0000", "{1}200)) 200-0000", "{1}200 200-0000", "{1}2000) 200-0000", "{1}20) 200-0000", "{1}2200) 200-0000", "{1}00) 200-0000", "{1}000) 200-0000"]}, {"regex": "^((Sir|Dr.|Mr.|Mrs.|Ms.|Rev.){1}[ ]?)?([A-Z]{1}[.]{1}([A-Z]{1}[.]{1})?|[A-Z]{1}[a-z]{1,}|[A-Z]{1}[a-z]{1,}[-]{1}[A-Z]{1}[a-z]{1,}|[A-Z]{1}[a-z]{0,}[ ]{1}[A-Z]{1}[a-z]{0,}){1}$", "exceptionStackTrace": null, "matches": ["RevA A.A.", "Rev0 A.A.", "Rev. A.A.", "Rev- A.A.", "Rev  A.A.", "MsA A.A.", "Ms0 A.A.", "Ms. A.A.", "Ms- A.A.", "Ms  A.A.", "MrsA A.A.", "Mrs0 A.A.", "Mrs. A.A.", "Mrs- A.A.", "Mrs  A.A.", "MrA A.A.", "Mr0 A.A.", "Mr. A.A.", "Mr- A.A.", "Mr  A.A.", "DrA A.A.", "Dr0 A.A.", "Dr. A.A.", "Dr- A.A.", "Dr  A.A.", "Sir Aevil Ae", "Sir Aevil A", "Sir Ae Aevil", "Sir A Aevil", "Sir Aevil-Ae", "Sir Ae-Aevil", "Sir Ae", "Sir A", "Sir A.", "A.A.", "SirA.A.", "A A", "Aevil-Aevil", "Aevil", "A.", "Reva A.A.", "Msa A.A.", "Mrsa A.A.", "Mra A.A.", "Dra A.A.", "Sir Aevil Aevil", "Sir Aevil-Aevil", "Sir Aevil", "Sir A.A."], "nonMatches": ["Sir Aevil AeVil", "Sir Aevil AEVIL", "Sir Aevil Aev_il", "Sir Aevil Aev il", "Sir Aevil Aev4il", "Sir Aevil A ", "Sir Aevil A6", "Sir Aevil A_", "Sir Aevil AAevil", "Sir Aevil evil", "Sir Aevil  Aevil", "Sir AeVil Aevil", "Sir AEVIL Aevil", "Sir Aev_il Aevil", "Sir Aev il Aevil", "Sir Aev4il Aevil", "Sir A  Aevil", "Sir A6 Aevil", "Sir A_ Aevil", "Sir AAevil Aevil", "Sir evil Aevil", "Sir Aevil-AeVil", "Sir Aevil-AEVIL", "Sir Aevil-Aev_il", "Sir Aevil-Aev il", "Sir Aevil-Aev4il", "Sir Aevil-A ", "Sir Aevil-A6", "Sir Aevil-A_", "Sir Aevil-A", "Sir Aevil-AAevil", "Sir Aevil-evil", "Sir Aevil--Aevil", "Sir AevilAevil", "Sir AeVil-Aevil", "Sir AEVIL-Aevil", "Sir Aev_il-Aevil", "Sir Aev il-Aevil", "Sir Aev4il-Aevil", "Sir A -Aevil", "Sir A6-Aevil", "Sir A_-Aevil", "Sir A-Aevil", "Sir AAevil-Aevil", "Sir evil-Aevil", "Sir AeVil", "Sir AEVIL", "Sir Aev_il", "Sir Aev il", "Sir Aev4il", "Sir A ", "Sir A6", "Sir A_", "Sir AAevil", "Sir evil", "Sir A.A.A.A.", "Sir ", "Sir A.A.A.", "Sir A.A..", "Sir A.A", "Sir A.AA.", "Sir A..", "Sir A..A.", "Sir AA.", "Sir AA.A.", "Sir .A.", "Sir Sir A.A.", "Sir  A.A.", "SirSir A.A.", " A.A."]}, {"regex": "<[^>]*>", "exceptionStackTrace": null, "matches": ["<>>", "<<>", "<eVil>", "<EVIL>", "<ev_il>", "<ev il>", "<ev4il>", "<e>", "< >", "<6>", "<_>", "<>", "<evil>"], "nonMatches": []}, {"regex": "&lt;(.*?)&gt;", "exceptionStackTrace": null, "matches": ["&lt;;&gt;", "&lt;&&gt;", "&lt;eVil&gt;", "&lt;EVIL&gt;", "&lt;ev_il&gt;", "&lt;ev il&gt;", "&lt;ev4il&gt;", "&lt;e&gt;", "&lt; &gt;", "&lt;6&gt;", "&lt;_&gt;", "&lt;&gt;", "&lt;evil&gt;"], "nonMatches": []}, {"regex": "^([0-9]{6}[\\s\\-]{1}[0-9]{12}|[0-9]{18})$", "exceptionStackTrace": null, "matches": ["000000 000000000000", "000000000000000000", "000000-000000000000"], "nonMatches": ["0000000000000000000", "00000000000000000", "000000-0000000000000", "000000-00000000000", "000000--000000000000", "0000000-000000000000", "00000-000000000000"]}, {"regex": "^(?!0\\d)([0-9]{1,}(,[0-9]{2}))$", "exceptionStackTrace": null, "matches": ["0,00"], "nonMatches": ["0,000", "0,0", "00,00", ",00"]}, {"regex": "(^[1-9]\\d{2}\\s*-\\s*\\d{3}\\s*-\\s*\\d{4}$|^[2-9]\\d{9}|^\\x28\\s*[2-9]\\d{2}\\s*\\x29\\s*\\d{3}\\s*-\\s*\\d{4}$)", "exceptionStackTrace": null, "matches": ["( 200 ) 000 -  0000", "( 200 ) 000 -0000", "( 200 ) 000  - 0000", "( 200 ) 000- 0000", "( 200 )  000 - 0000", "( 200 )000 - 0000", "( 200  ) 000 - 0000", "( 200) 000 - 0000", "(  200 ) 000 - 0000", "(200 ) 000 - 0000", "20000000000", "100 - 000 -  0000", "100 - 000 -0000", "100 - 000  - 0000", "100 - 000- 0000", "100 -  000 - 0000", "100 -000 - 0000", "100  - 000 - 0000", "100- 000 - 0000", "(200)000-0000", "100-000-0000", "( 200 ) 000 - 0000", "2000000000", "100 - 000 - 0000"], "nonMatches": ["( 200 ) 000 - 00000", "( 200 ) 000 - 000", "( 200 ) 0000 - 0000", "( 200 ) 00 - 0000", "( 2000 ) 000 - 0000", "( 20 ) 000 - 0000", "( 000 ) 000 - 0000", "200000000", "0000000000", "100 - 000 - 00000", "100 - 000 - 000", "100 - 0000 - 0000", "100 - 00 - 0000", "1000 - 000 - 0000", "10 - 000 - 0000", "000 - 000 - 0000"]}, {"regex": "^ ?(([BEGLMNSWbeglmnsw][0-9][0-9]?)|(([A-PR-UWYZa-pr-uwyz][A-HK-Ya-hk-y][0-9][0-9]?)|(([ENWenw][0-9][A-HJKSTUWa-hjkstuw])|([ENWenw][A-HK-Ya-hk-y][0-9][ABEHMNPRVWXYabehmnprvwxy])))) ?[0-9][ABD-HJLNP-UW-Zabd-hjlnp-uw-z]{2}$", "exceptionStackTrace": null, "matches": [" wk0x 0nn", " wk0w 0nn", " wk0v 0nn", " wk0r 0nn", " wk0p 0nn", " wk0n 0nn", " wk0m 0nn", " wk0h 0nn", " wk0e 0nn", " wk0b 0nn", " wk0a 0nn", " wk0Y 0nn", " wk0X 0nn", " wk0W 0nn", " wk0V 0nn", " wk0R 0nn", " wk0P 0nn", " wk0N 0nn", " wk0M 0nn", " wk0H 0nn", " wk0E 0nn", " wk0B 0nn", " wk0A 0nn", " wa0y 0nn", " wK0y 0nn", " wA0y 0nn", " nk0y 0nn", " ek0y 0nn", " Wk0y 0nn", " Nk0y 0nn", " Ek0y 0nn", " w0u 0nn", " w0t 0nn", " w0s 0nn", " w0k 0nn", " w0j 0nn", " w0a 0nn", " w0W 0nn", " w0U 0nn", " w0T 0nn", " w0S 0nn", " w0K 0nn", " w0J 0nn", " w0A 0nn", " n0w 0nn", " e0w 0nn", " W0w 0nn", " N0w 0nn", " E0w 0nn", " zk0 0nn", " za00 0nn", " zK00 0nn", " zA00 0nn", " yk00 0nn", " wk00 0nn", " rk00 0nn", " ak00 0nn", " Zk00 0nn", " Yk00 0nn", " Wk00 0nn", " Rk00 0nn", " Ak00 0nn", " w00 0wn", " w00 0pn", " w00 0ln", " w00 0jn", " w00 0dn", " w00 0bn", " w00 0an", " w00 0Wn", " w00 0Pn", " w00 0Nn", " w00 0Ln", " w00 0Jn", " w00 0Dn", " w00 0Bn", " w00 0An", " w000nn", " w0 0nn", " s00 0nn", " n00 0nn", " m00 0nn", " l00 0nn", " g00 0nn", " e00 0nn", " b00 0nn", " W00 0nn", " S00 0nn", " N00 0nn", " M00 0nn", " L00 0nn", " G00 0nn", " E00 0nn", " B00 0nn", "w00 0nn", "wk0y0nn", "w0w0nn", "zk00nn", "w00nn", " wk0y 0nn", " w0w 0nn", " zk00 0nn", " w00 0nn"], "nonMatches": [" wk0c 0nn", " wk0C 0nn", " wi0y 0nn", " wI0y 0nn", " ak0y 0nn", " Ak0y 0nn", " w0i 0nn", " w0I 0nn", " a0w 0nn", " A0w 0nn", " zk000 0nn", " zi00 0nn", " zI00 0nn", " qk00 0nn", " Qk00 0nn", " w00 0nnn", " w00 0n", " w00 0cn", " w00 0Cn", " w00  0nn", " w000 0nn", " a00 0nn", " A00 0nn", "  w00 0nn"]}, {"regex": "^#?(([a-fA-F0-9]{3}){1,2})$", "exceptionStackTrace": null, "matches": ["#000000", "#a00", "#A00", "000", "#000"], "nonMatches": ["#000000000", "#", "#0000", "#00", "#g00", "#G00", "##000"]}, {"regex": "(^\\d{20}$)|(^((:[a-fA-F0-9]{1,4}){6}|::)ffff:(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[0-9]{1,2})(\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[0-9]{1,2})){3}$)|(^((:[a-fA-F0-9]{1,4}){6}|::)ffff(:[a-fA-F0-9]{1,4}){2}$)|(^([a-fA-F0-9]{1,4}) (:[a-fA-F0-9]{1,4}){7}$)|(^:(:[a-fA-F0-9]{1,4}(::)?){1,6}$)|(^((::)?[a-fA-F0-9]{1,4}:){1,6}:$)|(^::$)", "exceptionStackTrace": null, "matches": ["::0:::0:::0:::0:::0:::0::", "::0000::", "::a::", "::A::", "0 :0000:0:0:0:0:0:0", "0 :a:0:0:0:0:0:0", "0 :A:0:0:0:0:0:0", "0000 :0:0:0:0:0:0:0", "a :0:0:0:0:0:0:0", "A :0:0:0:0:0:0:0", ":0:0:0:0:0:0ffff:0000:0", ":0:0:0:0:0:0ffff:a:0", ":0:0:0:0:0:0ffff:A:0", ":0000:0:0:0:0:0ffff:0:0", ":a:0:0:0:0:0ffff:0:0", ":A:0:0:0:0:0ffff:0:0", ":0:0:0:0:0:0ffff:00.250.250.250", ":0:0:0:0:0:0ffff:250.00.0.0", ":0:0:0:0:0:0ffff:250.250.200.200", ":0000:0:0:0:0:0ffff:250.250.250.250", ":a:0:0:0:0:0ffff:250.250.250.250", ":A:0:0:0:0:0ffff:250.250.250.250", "0::", "::0", ":0:0:0:0:0:0ffff:250.0.250.250", ":0:0:0:0:0:0ffff:250.100.250.250", ":0:0:0:0:0:0ffff:250.200.250.250", "::", "::0::", "0 :0:0:0:0:0:0:0", "::ffff:0:0", ":0:0:0:0:0:0ffff:0:0", "::ffff:250.250.250.250", ":0:0:0:0:0:0ffff:0.250.250.250", ":0:0:0:0:0:0ffff:100.250.250.250", ":0:0:0:0:0:0ffff:200.250.250.250", ":0:0:0:0:0:0ffff:250.0.0.0", ":0:0:0:0:0:0ffff:250.100.100.100", ":0:0:0:0:0:0ffff:250.200.200.200", ":0:0:0:0:0:0ffff:250.250.250.250", "00000000000000000000"], "nonMatches": ["::::0::", "::0:::0:::0:::0:::0:::0:::0::", ":", "::0::::", "::00000::", "::::", "::g::", "::G::", "0 :0:0:0:0:0:0:0:0", "0 :0:0:0:0:0:0", "0 :00000:0:0:0:0:0:0", "0 ::0:0:0:0:0:0", "0 :g:0:0:0:0:0:0", "0 :G:0:0:0:0:0:0", "00000 :0:0:0:0:0:0:0", " :0:0:0:0:0:0:0", "g :0:0:0:0:0:0:0", "G :0:0:0:0:0:0:0", ":0:0:0:0:0:0ffff:0:0:0", ":0:0:0:0:0:0ffff:0", ":0:0:0:0:0:0ffff:00000:0", ":0:0:0:0:0:0ffff::0", ":0:0:0:0:0:0ffff:g:0", ":0:0:0:0:0:0ffff:G:0", ":0:0:0:0:0:0:0ffff:0:0", ":0:0:0:0:0ffff:0:0", ":00000:0:0:0:0:0ffff:0:0", "::0:0:0:0:0ffff:0:0", ":g:0:0:0:0:0ffff:0:0", ":G:0:0:0:0:0ffff:0:0", ":0:0:0:0:0:0ffff:000.250.250.250", ":0:0:0:0:0:0ffff:.250.250.250", ":0:0:0:0:0:0ffff:250.000.0.0", ":0:0:0:0:0:0ffff:250..0.0", ":0:0:0:0:0:0ffff:250.250.250.250.250", ":0:0:0:0:0:0ffff:250.250.250", ":0:0:0:0:0:0ffff:250.256.250.250", ":0:0:0:0:0:0ffff:256.250.250.250", ":0:0:0:0:0:0:0ffff:250.250.250.250", ":0:0:0:0:0ffff:250.250.250.250", ":00000:0:0:0:0:0ffff:250.250.250.250", "::0:0:0:0:0ffff:250.250.250.250", ":g:0:0:0:0:0ffff:250.250.250.250", ":G:0:0:0:0:0ffff:250.250.250.250", "000000000000000000000", "0000000000000000000"]}, {"regex": "^[+-]?[0-9]+$", "exceptionStackTrace": null, "matches": ["-00", "+0", "0", "-0"], "nonMatches": ["-", "--0"]}, {"regex": "^[+-]?\\d*(([,.]\\d{3})+)?([,.]\\d+)?([eE][+-]?\\d+)?$", "exceptionStackTrace": null, "matches": ["-0.000.0", "-0.000.0E-00", "-0.000.0E0", "-0.000.0E+0", "-0.000.0e-0", "-0.000E-0", "-0.000.00E-0", "-0.000,0E-0", "-0.000.000.0E-0", "-0.0E-0", "-0,000.0E-0", "-00.000.0E-0", "-.000.0E-0", "0.000.0E-0", "+0.000.0E-0", "", "-0.000.0E-0"], "nonMatches": ["-0.000.0E-0E-0", "-0.000.0E-", "-0.000.0E--0", "-0.000.0a-0", "-0.000.0A-0", "-0.000.0.0E-0", "-0.000.E-0", "-0.0000.0E-0", "-0.00.0E-0", "--0.000.0E-0"]}, {"regex": "^(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[0-9]{1,2})(\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[0-9]{1,2})){3}$", "exceptionStackTrace": null, "matches": ["00.250.250.250", "250.00.0.0", "250.250.200.200", "250.0.250.250", "250.100.250.250", "250.200.250.250", "0.250.250.250", "100.250.250.250", "200.250.250.250", "250.0.0.0", "250.100.100.100", "250.200.200.200", "250.250.250.250"], "nonMatches": ["000.250.250.250", ".250.250.250", "250.000.0.0", "250..0.0", "250.250.250.250.250", "250.250.250", "250.256.250.250", "256.250.250.250"]}, {"regex": "^(\\(?[0-9]{3}[\\)-\\.]?\\ ?)?[0-9]{3}[-\\.]?[0-9]{4}$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (bad range): Invalid range: )-."}, "matches": [], "nonMatches": []}, {"regex": "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9])(?!.*\\s).{8,20}$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["aaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaa", "aaaaaaa", "_aaaaaaa", "Aaaaaaaa", "0aaaaaaa", " aaaaaaa", "aaaaaaaa"]}, {"regex": "^\\+?([0-9]{2})\\)?[-. ]?([0-9]{4})[-. ]?([0-9]{4})$", "exceptionStackTrace": null, "matches": ["+00) 00000000", "+00) 0000.0000", "+00) 0000-0000", "+00)0000 0000", "+00).0000 0000", "+00)-0000 0000", "+00 0000 0000", "00) 0000 0000", "0000000000", "+00) 0000 0000"], "nonMatches": ["+00) 0000 00000", "+00) 0000 000", "+00) 0000  0000", "+00) 00000 0000", "+00) 000 0000", "+00)  0000 0000", "+00)) 0000 0000", "+000) 0000 0000", "+0) 0000 0000", "++00) 0000 0000"]}, {"regex": "[A-Za-z0-9!#$%&&#39;*+/=?^_`{|}~-]+(?:\\.[A-Za-z0-9!#$%&&#39;*+/=?^_`{|}~-]+)*@(?:[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+(?:\\.)+(?:[A-Z]{2}|aero|asia|biz|cat|com|coop|edu|gov|info|int|jobs|mil|mobi|museum|name|net|org|pro|tel|travel|xxx|us)\\b", "exceptionStackTrace": null, "matches": ["evil.evil@0evil0..AA", "evil.evil@0evil00evil0.AA", "evil.evil@0evil0evil0.AA", "evil.evil@0.AA", "evil.evil@0evila.AA", "evil.evil@0evilA.AA", "evil.evil@0@0.AA", "evil.evil@0-0.AA", "evil.evil@0eVil0.AA", "evil.evil@0EVIL0.AA", "evil.evil@0ev4il0.AA", "evil.evil@0e0.AA", "evil.evil@060.AA", "evil.evil@00.AA", "evil.evil@aevil0.AA", "evil.evil@Aevil0.AA", "evil.evil.evil@0evil0.AA", "evil@0evil0.AA", "evil.~@0evil0.AA", "evil.}@0evil0.AA", "evil.|@0evil0.AA", "evil.{@0evil0.AA", "evil.`@0evil0.AA", "evil.^@0evil0.AA", "evil.?@0evil0.AA", "evil.=@0evil0.AA", "evil.;@0evil0.AA", "evil./@0evil0.AA", "evil.-@0evil0.AA", "evil.+@0evil0.AA", "evil.*@0evil0.AA", "evil.&@0evil0.AA", "evil.%@0evil0.AA", "evil.$@0evil0.AA", "evil.#@0evil0.AA", "evil.!@0evil0.AA", "evil.eVil@0evil0.AA", "evil.EVIL@0evil0.AA", "evil.ev_il@0evil0.AA", "evil.ev il@0evil0.AA", "evil.ev4il@0evil0.AA", "evil.e@0evil0.AA", "evil.6@0evil0.AA", "evil._@0evil0.AA", "~.evil@0evil0.AA", "}.evil@0evil0.AA", "|.evil@0evil0.AA", "{.evil@0evil0.AA", "`.evil@0evil0.AA", "^.evil@0evil0.AA", "@.evil@0evil0.AA", "?.evil@0evil0.AA", "=.evil@0evil0.AA", ";.evil@0evil0.AA", "/.evil@0evil0.AA", "..evil@0evil0.AA", "-.evil@0evil0.AA", "+.evil@0evil0.AA", "*.evil@0evil0.AA", "&.evil@0evil0.AA", "%.evil@0evil0.AA", "$.evil@0evil0.AA", "#.evil@0evil0.AA", "!.evil@0evil0.AA", "eVil.evil@0evil0.AA", "EVIL.evil@0evil0.AA", "ev_il.evil@0evil0.AA", "ev il.evil@0evil0.AA", "ev4il.evil@0evil0.AA", "e.evil@0evil0.AA", " .evil@0evil0.AA", "6.evil@0evil0.AA", "_.evil@0evil0.AA", ".evil@0evil0.AA", "evil@0.us", "evil@0.xxx", "evil@0.travel", "evil@0.tel", "evil@0.pro", "evil@0.org", "evil@0.net", "evil@0.name", "evil@0.museum", "evil@0.mobi", "evil@0.mil", "evil@0.jobs", "evil@0.int", "evil@0.info", "evil@0.gov", "evil@0.edu", "evil@0.coop", "evil@0.com", "evil@0.cat", "evil@0.biz", "evil@0.asia", "evil@0.aero", "evil@0.AA", "evil.evil@0evil0.us", "evil.evil@0evil0.xxx", "evil.evil@0evil0.travel", "evil.evil@0evil0.tel", "evil.evil@0evil0.pro", "evil.evil@0evil0.org", "evil.evil@0evil0.net", "evil.evil@0evil0.name", "evil.evil@0evil0.museum", "evil.evil@0evil0.mobi", "evil.evil@0evil0.mil", "evil.evil@0evil0.jobs", "evil.evil@0evil0.int", "evil.evil@0evil0.info", "evil.evil@0evil0.gov", "evil.evil@0evil0.edu", "evil.evil@0evil0.coop", "evil.evil@0evil0.com", "evil.evil@0evil0.cat", "evil.evil@0evil0.biz", "evil.evil@0evil0.asia", "evil.evil@0evil0.aero", "evil.evil@0evil0.AA"], "nonMatches": ["evil.evil@0evil0.AAA", "evil.evil@0evil0.A", "evil.evil@0evil0AA", "evil.evil@.AA", "evil.evil@0~0.AA", "evil.evil@0}0.AA", "evil.evil@0|0.AA", "evil.evil@0{0.AA", "evil.evil@0`0.AA", "evil.evil@0^0.AA", "evil.evil@0?0.AA", "evil.evil@0=0.AA", "evil.evil@0;0.AA", "evil.evil@0/0.AA", "evil.evil@0.0.AA", "evil.evil@0+0.AA", "evil.evil@0*0.AA", "evil.evil@0&0.AA", "evil.evil@0%0.AA", "evil.evil@0$0.AA", "evil.evil@0#0.AA", "evil.evil@0!0.AA", "evil.evil@0ev_il0.AA", "evil.evil@0ev il0.AA", "evil.evil@0 0.AA", "evil.evil@0_0.AA", "evil.@@0evil0.AA", "evil..@0evil0.AA", "evil. @0evil0.AA", "evil.@0evil0.AA"]}, {"regex": "^((19|20)\\d\\d)[- /.](([1-9]|[0][1-9]|1[012]))[- /.](([1-9]|[0][1-9]|1[012])|([12][0-9]|3[01]))$", "exceptionStackTrace": null, "matches": ["1900.11.1", "1900.10.1", "1900.1.30", "1900.1.13", "1900.1.11", "1900.1.10", "1900.1/1", "1900.1-1", "1900.1 1", "1900/1.1", "1900-1.1", "1900 1.1", "2000.1.1", "1900.12.1", "1900.01.1", "1900.1.31", "1900.1.20", "1900.1.12", "1900.1.01", "1900.1.1"], "nonMatches": ["1900.13.1", "1900.00.1", "1900.1.32", "1900.1.00", "1900.1.0", "1900.0.1"]}, {"regex": "\\b(((?!\\d\\d\\d)\\d+|1\\d\\d|2[0-4]\\d|25[0-5])(\\b|\\.)){4}", "exceptionStackTrace": null, "matches": ["0.0.0.0."], "nonMatches": ["256250250250", "250200200200", "00000", "000", "200250250250", "100250250250", "0.250250250", "0250250250", "250250250250", "200200200200", "100100100100", "0000"]}, {"regex": "\\w*$", "exceptionStackTrace": null, "matches": ["eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", " ", "6", "_", "", "evil"], "nonMatches": []}, {"regex": "\\w*$", "exceptionStackTrace": null, "matches": ["eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", " ", "6", "_", "", "evil"], "nonMatches": []}, {"regex": "\\d{0,7}([\\.|\\,]\\d{0,2})?", "exceptionStackTrace": null, "matches": ["0,0,0", "0", "0,000", "0,00", "0,", "0|0", "0.0", "00000000,0", "0000000,0", ",0", "", "0,0"], "nonMatches": []}, {"regex": "\\d+([\\.|\\,][0]+?[1-9]+)?", "exceptionStackTrace": null, "matches": ["0,01,01", "0,011", "0,0", "0,00", "0,001", "0,1", "0|01", "0.01", "00,01", ",01", "0", "0,01"], "nonMatches": []}, {"regex": "(<(!--.*|script)(.|\\n[^<])*(--|script)>)|(<|&lt;)(/?[\\w!?]+)\\s?[^<]*(>|&gt;)|(\\&[\\w]+\\;)", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\n"}, "matches": [], "nonMatches": []}, {"regex": "^(\\d{5}-\\d{4}|\\d{5})$|^([a-zA-Z]\\d[a-zA-Z] \\d[a-zA-Z]\\d)$", "exceptionStackTrace": null, "matches": ["A0A 0a0", "A0a 0A0", "a0A 0A0", "A0A 0A0", "00000", "00000-0000"], "nonMatches": ["000000", "0000", "00000-00000", "00000-000", "000000-0000", "0000-0000"]}, {"regex": "^(user=([a-z0-9]+,)*(([a-z0-9]+){1});)?(group=([a-z0-9]+,)*(([a-z0-9]+){1});)?(level=[0-9]+;)?$", "exceptionStackTrace": null, "matches": ["user=evil,evil;group=evil,evil;", "user=evil,evil;group=evil,evil;level=00;", "user=evil,evil;level=0;", "user=evil,evil;group=evil,evilevil;level=0;", "user=evil,evil;group=evil,ev4il;level=0;", "user=evil,evil;group=evil,e;level=0;", "user=evil,evil;group=evil,6;level=0;", "user=evil,evil;group=evil,evil,evil;level=0;", "user=evil,evil;group=evil;level=0;", "user=evil,evil;group=ev4il,evil;level=0;", "user=evil,evil;group=e,evil;level=0;", "user=evil,evil;group=6,evil;level=0;", "group=evil,evil;level=0;", "user=evil,evilevil;group=evil,evil;level=0;", "user=evil,ev4il;group=evil,evil;level=0;", "user=evil,e;group=evil,evil;level=0;", "user=evil,6;group=evil,evil;level=0;", "user=evil,evil,evil;group=evil,evil;level=0;", "user=evil;group=evil,evil;level=0;", "user=ev4il,evil;group=evil,evil;level=0;", "user=e,evil;group=evil,evil;level=0;", "user=6,evil;group=evil,evil;level=0;", "", "user=evil,evil;group=evil,evil;level=0;"], "nonMatches": ["user=evil,evil;group=evil,evil;level=0;level=0;", "user=evil,evil;group=evil,evil;level=;", "user=evil,evil;group=evil,evil;group=evil,evil;level=0;", "user=evil,evil;group=evil,eVil;level=0;", "user=evil,evil;group=evil,EVIL;level=0;", "user=evil,evil;group=evil,ev_il;level=0;", "user=evil,evil;group=evil,ev il;level=0;", "user=evil,evil;group=evil, ;level=0;", "user=evil,evil;group=evil,_;level=0;", "user=evil,evil;group=evil,;level=0;", "user=evil,evil;group=eVil,evil;level=0;", "user=evil,evil;group=EVIL,evil;level=0;", "user=evil,evil;group=ev_il,evil;level=0;", "user=evil,evil;group=ev il,evil;level=0;", "user=evil,evil;group= ,evil;level=0;", "user=evil,evil;group=_,evil;level=0;", "user=evil,evil;group=,evil;level=0;", "user=evil,evil;user=evil,evil;group=evil,evil;level=0;", "user=evil,eVil;group=evil,evil;level=0;", "user=evil,EVIL;group=evil,evil;level=0;", "user=evil,ev_il;group=evil,evil;level=0;", "user=evil,ev il;group=evil,evil;level=0;", "user=evil, ;group=evil,evil;level=0;", "user=evil,_;group=evil,evil;level=0;", "user=evil,;group=evil,evil;level=0;", "user=eVil,evil;group=evil,evil;level=0;", "user=EVIL,evil;group=evil,evil;level=0;", "user=ev_il,evil;group=evil,evil;level=0;", "user=ev il,evil;group=evil,evil;level=0;", "user= ,evil;group=evil,evil;level=0;", "user=_,evil;group=evil,evil;level=0;", "user=,evil;group=evil,evil;level=0;"]}, {"regex": "&quot;^[0-9]{2}&quot;", "exceptionStackTrace": null, "matches": [], "nonMatches": ["&quot;000&quot;", "&quot;0&quot;", "&quot;00&quot;"]}, {"regex": "^[1-9][0-9]{3}$ ", "exceptionStackTrace": null, "matches": [], "nonMatches": ["10000 ", "100 ", "0000 ", "1000 "]}, {"regex": "^([a-zA-Z0_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,3}|[0-9]{1,3})(\\]?)$", "exceptionStackTrace": null, "matches": ["evil@evil.evil.AA]", "evil@-.AA]", "evil@eVil.AA]", "evil@EVIL.AA]", "evil@ev4il.AA]", "evil@e.AA]", "evil@6.AA]", "evil@[0.0.0.000]", "evil@[0.0.0.AAA]", "evil@[0.0.0.aA]", "evil@[0.0.000.AA]", "evil@[0.000.0.AA]", "evil@[000.0.0.AA]", ".@[0.0.0.AA]", "-@[0.0.0.AA]", "eVil@[0.0.0.AA]", "EVIL@[0.0.0.AA]", "ev_il@[0.0.0.AA]", "e@[0.0.0.AA]", "_@[0.0.0.AA]", "evil@evil.AA", "evil@[0.0.0.0", "evil@[0.0.0.AA", "evil@evil.AA]", "evil@[0.0.0.0]", "evil@[0.0.0.AA]"], "nonMatches": ["evil@AA]", "evil@].AA]", "evil@[.AA]", "evil@@.AA]", "evil@..AA]", "evil@ev_il.AA]", "evil@ev il.AA]", "evil@ .AA]", "evil@_.AA]", "evil@.AA]", "evil@[0.0.0.0000]", "evil@[0.0.0.]", "evil@[0.0.0.AA]]", "evil@[0.0.0.AAAA]", "evil@[0.0.0.A]", "evil@[0.0.0000.AA]", "evil@[0.0..AA]", "evil@[0.0000.0.AA]", "evil@[0..0.AA]", "evil@[0000.0.0.AA]", "evil@[.0.0.AA]", "]@[0.0.0.AA]", "[@[0.0.0.AA]", "@@[0.0.0.AA]", "ev il@[0.0.0.AA]", "ev4il@[0.0.0.AA]", " @[0.0.0.AA]", "6@[0.0.0.AA]", "@[0.0.0.AA]"]}, {"regex": "^((((((0[1-9])|(1\\d)|(2[0-8]))\\.((0[123456789])|(1[0-2])))|(((29)|(30))\\.((0[13456789])|(1[0-2])))|((31)\\.((0[13578])|(1[02]))))\\.\\d{4})|((29)\\.(02)\\.\\d{2}(([02468][048])|([13579][26]))))(\\s((0\\d)|(1\\d)|(2[0-3]))\\:([0-5]\\d)\\:([0-5]\\d)\\.\\d{7})$", "exceptionStackTrace": null, "matches": ["29.02.0092 00:00:00.0000000", "29.02.0076 00:00:00.0000000", "29.02.0056 00:00:00.0000000", "29.02.0036 00:00:00.0000000", "29.02.0016 00:00:00.0000000", "29.02.0084 00:00:00.0000000", "29.02.0080 00:00:00.0000000", "29.02.0068 00:00:00.0000000", "29.02.0048 00:00:00.0000000", "29.02.0028 00:00:00.0000000", "29.02.0008 00:00:00.0000000", "31.10.0000 00:00:00.0000000", "31.07.0000 00:00:00.0000000", "31.05.0000 00:00:00.0000000", "31.03.0000 00:00:00.0000000", "31.01.0000 00:00:00.0000000", "29.08.0000 00:00:00.0000000", "29.07.0000 00:00:00.0000000", "29.06.0000 00:00:00.0000000", "29.05.0000 00:00:00.0000000", "29.04.0000 00:00:00.0000000", "29.03.0000 00:00:00.0000000", "29.01.0000 00:00:00.0000000", "01.08.0000 00:00:00.0000000", "01.07.0000 00:00:00.0000000", "01.06.0000 00:00:00.0000000", "01.05.0000 00:00:00.0000000", "01.04.0000 00:00:00.0000000", "01.03.0000 00:00:00.0000000", "01.02.0000 00:00:00.0000000", "01.01.0000 00:00:00.0000000", "29.02.0096 00:00:00.0000000", "29.02.0088 00:00:00.0000000", "31.12.0000 00:00:00.0000000", "31.08.0000 00:00:00.0000000", "30.09.0000 00:00:00.0000000", "29.10.0000 00:00:00.0000000", "29.09.0000 00:00:00.0000000", "20.09.0000 00:00:00.0000000", "10.09.0000 00:00:00.0000000", "01.10.0000 00:00:00.0000000", "01.09.0000 20:00:00.0000000", "01.09.0000 10:00:00.0000000", "01.09.0000 00:00:00.0000000"], "nonMatches": ["29.02.0090 00:00:00.0000000", "29.02.0006 00:00:00.0000000", "29.02.0081 00:00:00.0000000", "29.02.0018 00:00:00.0000000", "29.02.00088 00:00:00.0000000", "29.02.088 00:00:00.0000000", "31.11.0000 00:00:00.0000000", "31.00.0000 00:00:00.0000000", "29.13.0000 00:00:00.0000000", "29.00.0000 00:00:00.0000000", "01.13.0000 00:00:00.0000000", "01.09.0000 24:00:00.0000000", "01.09.0000 00:00:00.00000000", "01.09.0000 00:00:00.000000", "01.09.0000 00:00:60.0000000", "01.09.0000 00:60:00.0000000", "01.09.00000 00:00:00.0000000", "01.09.000 00:00:00.0000000", "01.00.0000 00:00:00.0000000", "00.09.0000 00:00:00.0000000"]}, {"regex": "^(([0-9])|([0-2][0-9])|(3[0-1]))\\/(([1-9])|(0[1-9])|(1[0-2]))\\/(([0-9][0-9])|([1-2][0,9][0-9][0-9]))$", "exceptionStackTrace": null, "matches": ["0/1/1000", "0/1/1,00", "30/1/00", "00/1/00", "0/10/00", "0/01/00", "0/1/1900", "0/1/00"], "nonMatches": ["32/1/00", "0/13/00", "0/00/00", "0/1/1100", "0/1/0900", "0/0/00"]}, {"regex": "^(3[0-1]|2[0-9]|1[0-9]|0[1-9])(0[0-9]|1[0-9]|2[0-3])([0-5][0-9])\\sUTC\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s[0-9]{2}$", "exceptionStackTrace": null, "matches": ["010000 UTC Jan 00", "100000 UTC Jan 00", "200000 UTC Jan 00", "302000 UTC Jan 00", "301000 UTC Jan 00", "300000 UTC Dec 00", "300000 UTC Nov 00", "300000 UTC Oct 00", "300000 UTC Sep 00", "300000 UTC Aug 00", "300000 UTC Jul 00", "300000 UTC Jun 00", "300000 UTC May 00", "300000 UTC Apr 00", "300000 UTC Mar 00", "300000 UTC Feb 00", "300000 UTC Jan 00"], "nonMatches": ["000000 UTC Jan 00", "302400 UTC Jan 00", "300000 UTC Jan 000", "300000 UTC Jan 0", "300060 UTC Jan 00", "320000 UTC Jan 00"]}, {"regex": "&quot;[^&quot;\\r\\n]*&quot;", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\r"}, "matches": [], "nonMatches": []}, {"regex": "Microsoft Office 2010 Launch", "exceptionStackTrace": null, "matches": ["Microsoft Office 2010 Launch"], "nonMatches": []}, {"regex": "^[A-Z]{1}-[0-9]{7}$", "exceptionStackTrace": null, "matches": ["A-0000000"], "nonMatches": ["A-00000000", "A-000000", "AA-0000000", "-0000000"]}, {"regex": "(?=.*[A-Z]+.*)[A-Z0-9&%./-]*", "exceptionStackTrace": null, "matches": ["eVil", "EVIL"], "nonMatches": ["/", ".", "-", "&", "%", "ev_il", "ev il", "ev4il", "e", " ", "6", "_", "", "evil"]}, {"regex": "^\\.{1}", "exceptionStackTrace": null, "matches": ["..", "."], "nonMatches": [""]}, {"regex": "^(\\d*\\s*\\-?\\s*\\d*)$", "exceptionStackTrace": null, "matches": ["0 - 00", "0 - ", "0 -  0", "0 -0", "0  0", "0  - 0", "0- 0", "00 - 0", " - 0", "", "0 - 0"], "nonMatches": ["0 -- 0"]}, {"regex": "^(((\\+44\\s?|0044\\s?)?|(\\(?0))((2[03489]\\)?\\s?\\d{4}\\s?\\d{4})|(1[23456789]1\\)?\\s?\\d{3}\\s?\\d{4})|(1[23456789][234578][0234679]\\)?\\s?\\d{6})|(1[2579][0245][0467]\\)?\\s?\\d{5})|(11[345678]\\)?\\s?\\d{3}\\s?\\d{4})|(1[35679][234689]\\s?[46789][234567]\\)?\\s?\\d{4,5})|([389]\\d{2}\\s?\\d{3}\\s?\\d{4})|([57][0-9]\\s?\\d{4}\\s?\\d{4})|(500\\s?\\d{6})|(7[456789]\\d{2}\\s?\\d{6})))$", "exceptionStackTrace": null, "matches": ["029) 0000 0000", "004429) 0000 0000", "+44 7900000000", "+44 7800 000000", "+44 7700 000000", "+44 7600 000000", "+44 7500 000000", "+44 7400 000000", "+44 500000000", "+44 70 00000000", "+44 700000 0000", "+44 50 0000 0000", "+44 900 0000000", "+44 900000 0000", "+44 800 000 0000", "+44 300 000 0000", "+44 199 97) 00000", "+44 199 97)0000", "+44 199 97 0000", "+44 199 96) 0000", "+44 199 95) 0000", "+44 199 94) 0000", "+44 199 93) 0000", "+44 199 92) 0000", "+44 199 87) 0000", "+44 199 77) 0000", "+44 199 67) 0000", "+44 199 47) 0000", "+44 19997) 0000", "+44 198 97) 0000", "+44 196 97) 0000", "+44 194 97) 0000", "+44 193 97) 0000", "+44 192 97) 0000", "+44 179 97) 0000", "+44 169 97) 0000", "+44 159 97) 0000", "+44 139 97) 0000", "+44 118) 0000000", "+44 118)000 0000", "+44 118 000 0000", "+44 117) 000 0000", "+44 116) 000 0000", "+44 115) 000 0000", "+44 114) 000 0000", "+44 113) 000 0000", "+44 1957) 000000", "+44 1957)00000", "+44 1957 00000", "+44 1956) 00000", "+44 1954) 00000", "+44 1950) 00000", "+44 1947) 00000", "+44 1927) 00000", "+44 1907) 00000", "+44 1757) 00000", "+44 1557) 00000", "+44 1257) 00000", "+44 1989)000000", "+44 1989 000000", "+44 1987) 000000", "+44 1986) 000000", "+44 1984) 000000", "+44 1983) 000000", "+44 1982) 000000", "+44 1980) 000000", "+44 1979) 000000", "+44 1959) 000000", "+44 1949) 000000", "+44 1939) 000000", "+44 1929) 000000", "+44 1889) 000000", "+44 1789) 000000", "+44 1689) 000000", "+44 1589) 000000", "+44 1489) 000000", "+44 1389) 000000", "+44 1289) 000000", "+44 191) 0000000", "+44 191)000 0000", "+44 191 000 0000", "+44 181) 000 0000", "+44 171) 000 0000", "+44 161) 000 0000", "+44 151) 000 0000", "+44 141) 000 0000", "+44 131) 000 0000", "+44 121) 000 0000", "+44 29) 00000000", "+44 29)0000 0000", "+44 29 0000 0000", "+44 28) 0000 0000", "+44 24) 0000 0000", "+44 23) 0000 0000", "+44 20) 0000 0000", "29) 0000 0000", "+4429) 0000 0000", "02900000000", "7900000000", "500000000", "7000000000", "9000000000", "199970000", "1180000000", "195700000", "1989000000", "1910000000", "2900000000", "(029) 0000 0000", "0044 29) 0000 0000", "+44 7900 000000", "+44 500 000000", "+44 70 0000 0000", "+44 900 000 0000", "+44 199 97) 0000", "+44 118) 000 0000", "+44 1957) 00000", "+44 1989) 000000", "+44 191) 000 0000", "+44 29) 0000 0000"], "nonMatches": ["((029) 0000 0000", "0044  29) 0000 0000", "+44 7900 0000000", "+44 7900 00000", "+44 7900  000000", "+44 79000 000000", "+44 790 000000", "+44 7000 000000", "+44 500 0000000", "+44 500 00000", "+44 500  000000", "+44 70 0000 00000", "+44 70 0000 000", "+44 70 0000  0000", "+44 70 00000 0000", "+44 70 000 0000", "+44 70  0000 0000", "+44 00 0000 0000", "+44 900 000 00000", "+44 900 000 000", "+44 900 000  0000", "+44 900 0000 0000", "+44 900 00 0000", "+44 900  000 0000", "+44 9000 000 0000", "+44 90 000 0000", "+44 000 000 0000", "+44 199 97) 000000", "+44 199 97) 000", "+44 199 97)  0000", "+44 199 97)) 0000", "+44 199 90) 0000", "+44 199 07) 0000", "+44 199  97) 0000", "+44 190 97) 0000", "+44 109 97) 0000", "+44 118) 000 00000", "+44 118) 000 000", "+44 118) 000  0000", "+44 118) 0000 0000", "+44 118) 00 0000", "+44 118)  000 0000", "+44 118)) 000 0000", "+44 110) 000 0000", "+44 1957) 0000", "+44 1957)  00000", "+44 1957)) 00000", "+44 1951) 00000", "+44 1917) 00000", "+44 1057) 00000", "+44 1989) 0000000", "+44 1989) 00000", "+44 1989)  000000", "+44 1989)) 000000", "+44 1981) 000000", "+44 1909) 000000", "+44 1089) 000000", "+44 191) 000 00000", "+44 191) 000 000", "+44 191) 000  0000", "+44 191) 0000 0000", "+44 191) 00 0000", "+44 191)  000 0000", "+44 191)) 000 0000", "+44 101) 000 0000", "+44 29) 0000 00000", "+44 29) 0000 000", "+44 29) 0000  0000", "+44 29) 00000 0000", "+44 29) 000 0000", "+44 29)  0000 0000", "+44 29)) 0000 0000", "+44 21) 0000 0000", "+44 +44 29) 0000 0000", "+44  29) 0000 0000"]}, {"regex": "Gmail login", "exceptionStackTrace": null, "matches": ["Gmail login"], "nonMatches": []}, {"regex": "Gmail login", "exceptionStackTrace": null, "matches": ["Gmail login"], "nonMatches": []}, {"regex": "Gmail login", "exceptionStackTrace": null, "matches": ["Gmail login"], "nonMatches": []}, {"regex": "Gmail login", "exceptionStackTrace": null, "matches": ["Gmail login"], "nonMatches": []}, {"regex": "^0*(\\d{1,3}(\\.?\\d{3})*)\\-?([\\dkK])$", "exceptionStackTrace": null, "matches": ["00.000-k", "00.000-0", "00.000K", "00.000.000-K", "00-K", "00000-K", "00000.000-K", "0000.000-K", "000.000-K", "0.000-K", "0K", "00.000-K"], "nonMatches": ["00.000-a", "00.000-A", "00.000--K", "00.0000-K", "00.00-K", "00..000-K"]}, {"regex": "[0-9]{4}-([0][0-9]|[1][0-2])-([0][0-9]|[1][0-9]|[2][0-9]|[3][0-1])", "exceptionStackTrace": null, "matches": ["00000-00-00", "0000-10-00", "0000-00-30", "0000-00-20", "0000-00-10", "0000-00-00"], "nonMatches": ["0000-13-00", "0000-00-32", "000-00-00"]}, {"regex": "2", "exceptionStackTrace": null, "matches": ["2"], "nonMatches": []}, {"regex": "Amazon prime phone number ", "exceptionStackTrace": null, "matches": ["Amazon prime phone number "], "nonMatches": []}, {"regex": "Amazon prime phone number ", "exceptionStackTrace": null, "matches": ["Amazon prime phone number "], "nonMatches": []}, {"regex": "Amazon prime phone number ", "exceptionStackTrace": null, "matches": ["Amazon prime phone number "], "nonMatches": []}, {"regex": "Amazon prime phone number ", "exceptionStackTrace": null, "matches": ["Amazon prime phone number "], "nonMatches": []}, {"regex": "Amazon prime phone number ", "exceptionStackTrace": null, "matches": ["Amazon prime phone number "], "nonMatches": []}, {"regex": "Amazon Prime Phone number ", "exceptionStackTrace": null, "matches": ["Amazon Prime Phone number "], "nonMatches": []}, {"regex": "Amazon Prime Phone number ", "exceptionStackTrace": null, "matches": ["Amazon Prime Phone number "], "nonMatches": []}, {"regex": "Amazon Prime Phone number ", "exceptionStackTrace": null, "matches": ["Amazon Prime Phone number "], "nonMatches": []}, {"regex": "Amazon Prime Phone number ", "exceptionStackTrace": null, "matches": ["Amazon Prime Phone number "], "nonMatches": []}, {"regex": "Amazon Prime Phone number ", "exceptionStackTrace": null, "matches": ["Amazon Prime Phone number "], "nonMatches": []}, {"regex": "Amazon Prime Phone Number", "exceptionStackTrace": null, "matches": ["Amazon Prime Phone Number"], "nonMatches": []}, {"regex": "Amazon Prime Phone Number", "exceptionStackTrace": null, "matches": ["Amazon Prime Phone Number"], "nonMatches": []}, {"regex": "Amazon Prime Phone Number", "exceptionStackTrace": null, "matches": ["Amazon Prime Phone Number"], "nonMatches": []}, {"regex": "Amazon Prime Phone Number", "exceptionStackTrace": null, "matches": ["Amazon Prime Phone Number"], "nonMatches": []}, {"regex": "Amazon Prime Phone Number", "exceptionStackTrace": null, "matches": ["Amazon Prime Phone Number"], "nonMatches": []}, {"regex": "Amazon prime phone number ", "exceptionStackTrace": null, "matches": ["Amazon prime phone number "], "nonMatches": []}, {"regex": "Amazon prime phone number ", "exceptionStackTrace": null, "matches": ["Amazon prime phone number "], "nonMatches": []}, {"regex": "Amazon prime phone number ", "exceptionStackTrace": null, "matches": ["Amazon prime phone number "], "nonMatches": []}, {"regex": "Amazon prime phone number ", "exceptionStackTrace": null, "matches": ["Amazon prime phone number "], "nonMatches": []}, {"regex": "Amazon prime phone number ", "exceptionStackTrace": null, "matches": ["Amazon prime phone number "], "nonMatches": []}, {"regex": "Amazon prime phone number", "exceptionStackTrace": null, "matches": ["Amazon prime phone number"], "nonMatches": []}, {"regex": "Amazon prime phone number", "exceptionStackTrace": null, "matches": ["Amazon prime phone number"], "nonMatches": []}, {"regex": "Amazon prime phone number", "exceptionStackTrace": null, "matches": ["Amazon prime phone number"], "nonMatches": []}, {"regex": "Amazon prime phone number", "exceptionStackTrace": null, "matches": ["Amazon prime phone number"], "nonMatches": []}, {"regex": "Amazon prime phone number", "exceptionStackTrace": null, "matches": ["Amazon prime phone number"], "nonMatches": []}, {"regex": "amazon prime phone number", "exceptionStackTrace": null, "matches": ["amazon prime phone number"], "nonMatches": []}, {"regex": "amazon prime phone number", "exceptionStackTrace": null, "matches": ["amazon prime phone number"], "nonMatches": []}, {"regex": "amazon prime phone number", "exceptionStackTrace": null, "matches": ["amazon prime phone number"], "nonMatches": []}, {"regex": "amazon prime phone number", "exceptionStackTrace": null, "matches": ["amazon prime phone number"], "nonMatches": []}, {"regex": "amazon prime phone number", "exceptionStackTrace": null, "matches": ["amazon prime phone number"], "nonMatches": []}, {"regex": "amazon prime phone number", "exceptionStackTrace": null, "matches": ["amazon prime phone number"], "nonMatches": []}, {"regex": "amazon prime phone number", "exceptionStackTrace": null, "matches": ["amazon prime phone number"], "nonMatches": []}, {"regex": "amazon prime phone number", "exceptionStackTrace": null, "matches": ["amazon prime phone number"], "nonMatches": []}, {"regex": "amazon prime phone number", "exceptionStackTrace": null, "matches": ["amazon prime phone number"], "nonMatches": []}, {"regex": "amazon prime phone number", "exceptionStackTrace": null, "matches": ["amazon prime phone number"], "nonMatches": []}, {"regex": "Amazon Prime Phone Number ", "exceptionStackTrace": null, "matches": ["Amazon Prime Phone Number "], "nonMatches": []}, {"regex": "Amazon Prime Phone Number ", "exceptionStackTrace": null, "matches": ["Amazon Prime Phone Number "], "nonMatches": []}, {"regex": "Amazon Prime Phone Number ", "exceptionStackTrace": null, "matches": ["Amazon Prime Phone Number "], "nonMatches": []}, {"regex": "Doftware", "exceptionStackTrace": null, "matches": ["Doftware"], "nonMatches": []}, {"regex": "(?!^[0-9]*$)(?!^[a-zA-Z]*$)^([a-zA-Z0-9]{6,8})$", "exceptionStackTrace": null, "matches": ["a00000", "A00000"], "nonMatches": ["000000000", "00000000", "00000", "000000"]}, {"regex": "^([\\w\\.\\-]+)@([\\w\\-]+)((\\.(\\w){2,3})+)$", "exceptionStackTrace": null, "matches": ["evil@evil.aa.aa", "evil@evil.aaa", "evil@evil._a", "evil@evil.Aa", "evil@evil.0a", "evil@-.aa", "evil@eVil.aa", "evil@EVIL.aa", "evil@ev_il.aa", "evil@ev4il.aa", "evil@e.aa", "evil@6.aa", "evil@_.aa", ".@evil.aa", "-@evil.aa", "eVil@evil.aa", "EVIL@evil.aa", "ev_il@evil.aa", "ev4il@evil.aa", "e@evil.aa", "6@evil.aa", "_@evil.aa", "evil@evil.aa"], "nonMatches": ["evil@evil", "evil@evil.aaaa", "evil@evil.a", "evil@@.aa", "evil@..aa", "evil@ev il.aa", "evil@ .aa", "evil@.aa", "@@evil.aa", "ev il@evil.aa", " @evil.aa", "@evil.aa"]}, {"regex": "^[+]\\d{2}?[- .]?(\\([2-9]\\d{2}\\)|[2-9]\\d{2})[- .]?\\d{3}[- .]?\\d{4}$", "exceptionStackTrace": null, "matches": ["+00.(200).0000000", "+00.(200).000-0000", "+00.(200).000 0000", "+00.(200)000.0000", "+00.(200)-000.0000", "+00.(200) 000.0000", "+00(200).000.0000", "+00-(200).000.0000", "+00 (200).000.0000", "+002000000000", "+00(200)0000000", "+00.200.000.0000", "+00.(200).000.0000"], "nonMatches": ["+00.2000.000.0000", "+00.20.000.0000", "+00.000.000.0000", "+00.(200).000.00000", "+00.(200).000.000", "+00.(200).000..0000", "+00.(200).0000.0000", "+00.(200).00.0000", "+00.(200)..000.0000", "+00.(2000).000.0000", "+00.(20).000.0000", "+00.(000).000.0000", "+00..(200).000.0000", "+000.(200).000.0000", "+0.(200).000.0000"]}, {"regex": "^\\d{5}[- .]?\\d{7}[- .]?\\d{1}$", "exceptionStackTrace": null, "matches": ["00000.00000000", "00000.0000000-0", "00000.0000000 0", "000000000000.0", "00000-0000000.0", "00000 0000000.0", "0000000000000", "00000.0000000.0"], "nonMatches": ["00000.0000000.00", "00000.0000000.", "00000.0000000..0", "00000.00000000.0", "00000.000000.0", "00000..0000000.0", "000000.0000000.0", "0000.0000000.0"]}, {"regex": "^([a-zA-Z][a-zA-Z0-9]{1,100})$", "exceptionStackTrace": null, "matches": ["A0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "Aa", "AA", "a0", "A0"], "nonMatches": ["A00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "A"]}, {"regex": "&(?!\\w+;|#\\d+;)\\S*", "exceptionStackTrace": null, "matches": ["&;", "&&", "&#", "&eVil", "&EVIL", "&ev_il", "&ev il", "&ev4il", "&e", "& ", "&6", "&_", "&", "&evil"], "nonMatches": []}, {"regex": "^(?:(?:((?![0-9_])[a-zA-Z0-9_]+)\\.?)+)(?<!\\.)$", "exceptionStackTrace": null, "matches": ["evil"], "nonMatches": ["evil.evil.", "", "evil..", "..", "eVil.", "EVIL.", "ev_il.", "ev il.", "ev4il.", "e.", " .", "6.", "_.", ".", "evil."]}, {"regex": "Need solution for QuickBooks Payroll Service?", "exceptionStackTrace": null, "matches": ["Need solution for QuickBooks Payroll Servicee", "Need solution for QuickBooks Payroll Servic", "Need solution for QuickBooks Payroll Service"], "nonMatches": []}, {"regex": "^[2-9]{2}[0-9]{8}$", "exceptionStackTrace": null, "matches": ["2200000000"], "nonMatches": ["22000000000", "220000000", "22200000000", "200000000", "0200000000"]}, {"regex": "^[^ ,0]*$", "exceptionStackTrace": null, "matches": ["eVil", "EVIL", "ev_il", "ev4il", "e", "6", "_", "", "evil"], "nonMatches": [",", "ev il", " "]}, {"regex": "^[^0-9]*(?:(\\d)[^0-9]*){10}$", "exceptionStackTrace": null, "matches": ["evil0eVil0evil0evil0evil0evil0evil0evil0evil0evil0evil", "evil0EVIL0evil0evil0evil0evil0evil0evil0evil0evil0evil", "evil0ev_il0evil0evil0evil0evil0evil0evil0evil0evil0evil", "evil0ev il0evil0evil0evil0evil0evil0evil0evil0evil0evil", "evil0e0evil0evil0evil0evil0evil0evil0evil0evil0evil", "evil0 0evil0evil0evil0evil0evil0evil0evil0evil0evil", "evil0_0evil0evil0evil0evil0evil0evil0evil0evil0evil", "evil00evil0evil0evil0evil0evil0evil0evil0evil0evil", "eVil0evil0evil0evil0evil0evil0evil0evil0evil0evil0evil", "EVIL0evil0evil0evil0evil0evil0evil0evil0evil0evil0evil", "ev_il0evil0evil0evil0evil0evil0evil0evil0evil0evil0evil", "ev il0evil0evil0evil0evil0evil0evil0evil0evil0evil0evil", "e0evil0evil0evil0evil0evil0evil0evil0evil0evil0evil", " 0evil0evil0evil0evil0evil0evil0evil0evil0evil0evil", "_0evil0evil0evil0evil0evil0evil0evil0evil0evil0evil", "0evil0evil0evil0evil0evil0evil0evil0evil0evil0evil", "00evil0evil0evil0evil0evil0evil0evil0evil0evil", "evil0evil0evil0evil0evil0evil0evil0evil0evil0evil0evil"], "nonMatches": ["evil0evil0evil0evil0evil0evil0evil0evil0evil0evil0evil0evil", "evil0evil0evil0evil0evil0evil0evil0evil0evil0evil", "evil0ev4il0evil0evil0evil0evil0evil0evil0evil0evil0evil", "evil060evil0evil0evil0evil0evil0evil0evil0evil0evil", "ev4il0evil0evil0evil0evil0evil0evil0evil0evil0evil0evil", "60evil0evil0evil0evil0evil0evil0evil0evil0evil0evil"]}, {"regex": "^((4(\\d{12}|\\d{15}))|(5\\d{15})|(6011\\d{12})|(3(4|7)\\d{13}))$", "exceptionStackTrace": null, "matches": ["370000000000000", "340000000000000", "6011000000000000", "5000000000000000", "4000000000000000", "4000000000000"], "nonMatches": ["3400000000000000", "34000000000000", "60110000000000000", "601100000000000", "50000000000000000", "500000000000000", "40000000000000000", "400000000000000", "40000000000000", "400000000000"]}, {"regex": "^(?!000)\\d{3,4}$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["00000", "0000", "00", "000"]}, {"regex": "^100(\\.0{0,2}?)?$|^\\d{0,2}(\\.\\d{0,2})?$", "exceptionStackTrace": null, "matches": ["0", "0.00", "0.", "00.0", ".0", "100.00", "100.", "", "100", "0.0", "100.0"], "nonMatches": ["0.0.0", "0.000", "000.0", "100.0.0", "100.000"]}, {"regex": "^([\\u20AC]?[1-9]\\d*\\.\\d{3}(?:,\\d{2})?|[\\u20AC]?[1-9]\\d*(?:,\\d{2})?|[\\u20AC]?[1-9]\\d*)$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported hex value 8364"}, "matches": [], "nonMatches": []}, {"regex": "^([0-5]?\\d?\\d?\\d?\\d|6[0-4]\\d\\d\\d|65[0-4]\\d\\d|655[0-2]\\d|6553[0-5])$", "exceptionStackTrace": null, "matches": ["0000", "0", "65530", "65500", "65000", "60000", "00000"], "nonMatches": ["65536", "000000"]}, {"regex": "^(?<national>\\+?(?:86)?)(?<separator>\\s?-?)(?<phone>(?<vender>13[0-4])(?<area>\\d{4})(?<id>\\d{4}))$", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<n"}, "matches": []}, {"regex": "\\*.*(\\R.+)+\\*/\nor\n/\\*.*((\\r\\n).+)+\\*", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad escape \\R"}, "matches": []}, {"regex": "gvdrtgbth", "exceptionStackTrace": null, "matches": ["gvdrtgbth"], "nonMatches": []}, {"regex": "^([a-zA-Z1-9]*)\\.(((a|A)(s|S)(p|P)(x|X))|((h|H)(T|t)(m|M)(l|L))|((h|H)(t|T)(M|m))|((a|A)(s|S)(p|P)))", "exceptionStackTrace": null, "matches": ["11.aspx", "a.aspx", "A.aspx", ".Asp", ".aSp", ".asP", ".asp", ".HtM", ".hTM", ".htm", ".htM", ".HTml", ".html", ".hTMl", ".hTmL", ".hTml", ".Aspx", ".aSpx", ".asPx", ".aspX", ".aspx", "1.Asp", "1.aSp", "1.asP", "1.asp", "1.HtM", "1.hTM", "1.htm", "1.htM", "1.HTml", "1.html", "1.hTMl", "1.hTmL", "1.hTml", "1.Aspx", "1.aSpx", "1.asPx", "1.aspX", "1.aspx"], "nonMatches": ["0.aspx"]}, {"regex": "(((ht|f)tp(s?):\\/\\/)(www\\.[^ \\[\\]\\(\\)\\n\\r\\t]+)|(([012]?[0-9]{1,2}\\.){3}[012]?[0-9]{1,2})\\/)([^ \\[\\]\\(\\),;&quot;\\&#39;&lt;&gt;\\n\\r\\t]+)([^\\. \\[\\]\\(\\),;&quot;\\&#39;&lt;&gt;\\n\\r\\t])|(([012]?[0-9]{1,2}\\.){3}[012]?[0-9]{1,2})", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\n"}, "matches": [], "nonMatches": []}, {"regex": "dsc", "exceptionStackTrace": null, "matches": ["dsc"], "nonMatches": []}, {"regex": "Express&#227;o regular para Telefones do Brasil.", "exceptionStackTrace": null, "matches": ["Express&#227;o regular para Telefones do BrasilA", "Express&#227;o regular para Telefones do Brasil;", "Express&#227;o regular para Telefones do Brasil0", "Express&#227;o regular para Telefones do Brasil&", "Express&#227;o regular para Telefones do Brasil#", "Express&#227;o regular para Telefones do Brasil ", "Express&#227;o regular para Telefones do Brasila"], "nonMatches": []}, {"regex": "new era hats", "exceptionStackTrace": null, "matches": ["new era hats"], "nonMatches": []}, {"regex": "^(((0|((\\+)?91(\\-)?))|((\\((\\+)?91\\)(\\-)?)))?[7-9]\\d{9})?$", "exceptionStackTrace": null, "matches": ["(+91)7000000000", "(91)-7000000000", "+917000000000", "91-7000000000", "7000000000", "", "(+91)-7000000000", "+91-7000000000", "07000000000"], "nonMatches": ["(+91)--7000000000", "(++91)-7000000000", "+91--7000000000", "++91-7000000000", "0700000000007000000000", "070000000000", "0700000000", "00000000000", "007000000000"]}, {"regex": "^\\$?(([1-9],)?([0-9]{3},){0,3}[0-9]{3}|[0-9]{0,16})(\\.[0-9]{0,3})?$", "exceptionStackTrace": null, "matches": ["$0000000000000000.0", "$.0", "$1,000,000", "$1,000,000.000", "$1,000,000.", "$1,000,000,000,000.0", "$1,000.0", "$000,000.0", "1,000,000.0", "", "000", "$0.0", "$1,000,000.0"], "nonMatches": ["$00000000000000000.0", "$1,000,000.0.0", "$1,000,000.0000", "$1,000,0000.0", "$1,000,00.0", "$1,000,000,000,000,000.0", "$1,0000,000.0", "$1,00,000.0", "$1,1,000,000.0", "$0,000,000.0", "$$1,000,000.0"]}, {"regex": "s/\\b(\\w+)\\b/ucfirst($1)/ge", "exceptionStackTrace": null, "matches": [], "nonMatches": ["s/eVil/ucfirst1/ge", "s/EVIL/ucfirst1/ge", "s/ev_il/ucfirst1/ge", "s/ev il/ucfirst1/ge", "s/ev4il/ucfirst1/ge", "s/e/ucfirst1/ge", "s/ /ucfirst1/ge", "s/6/ucfirst1/ge", "s/_/ucfirst1/ge", "s//ucfirst1/ge", "s/evil/ucfirst1/ge"]}, {"regex": "\\s*([a-z\\. ]+)\\s*\\n\\s*([a-z0-9\\. #]+)\\s*\\n\\s*([a-z \\.]+)\\s*,\\s*([a-z \\.]+)\\s*\\n?(?:\\s*(\\d{1,15}(?:-\\d{1,4})?)\\s*\\n)?(?:\\s*(\\+?(?:1\\s*[-\\/\\.]?)?(?:\\((?:\\d{3})\\)|(?:\\d{3}))\\s*[-\\/\\.]?\\s*(?:\\d{3})\\s*[-\\/\\.]?\\s*(?:\\d{4})(?:(?:[ \\t]*[xX]|[eE][xX][tT])\\.?[ \\t]*(?:\\d+))*))?", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\n"}, "matches": [], "nonMatches": []}, {"regex": "^(?=.*[\\d])(?=.*[A-Z])(?=.*[a-z])[\\w\\d!@#$%_]{6,40}$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["_________________________________________", "________________________________________", "_____", "a_____", "A_____", "@_____", "0_____", "%_____", "$_____", "#_____", "!_____", "______"]}, {"regex": "^((?:[A-Z](?:(&#39;|(?:[a-z]{1,3}))[A-Z])?[a-z]+)|(?:[A-Z]\\.))(?:([ -])((?:[A-Z](?:(&#39;|(?:[a-z]{1,3}))[A-Z])?[a-z]+)|(?:[A-Z]\\.)))?$", "exceptionStackTrace": null, "matches": ["AaaaAevil-A&#39;Aevil", "A&#39;Aevil-AaaaAevil", "A&#39;Aevil", "A&#39;Aevil-A&#39;Ae", "A&#39;Aevil-Aevil", "A&#39;Aevil A&#39;Aevil", "A&#39;Ae-A&#39;Aevil", "Aevil-A&#39;Aevil", "A.", "Aevil", "A.-A&#39;Aevil", "AaAevil-A&#39;Aevil", "A&#39;Aevil-A.", "A&#39;Aevil-AaAevil", "A&#39;Aevil-A&#39;Aevil"], "nonMatches": ["AaaaaAevil-A&#39;Aevil", "AAevil-A&#39;Aevil", "A&#39;Aevil-AaaaaAevil", "A&#39;Aevil-AAevil", "A&#39;Aevil-A&#39;Aevil-A&#39;Aevil", "A&#39;Aevil-A&#39;AeVil", "A&#39;Aevil-A&#39;AEVIL", "A&#39;Aevil-A&#39;Aev_il", "A&#39;Aevil-A&#39;Aev il", "A&#39;Aevil-A&#39;Aev4il", "A&#39;Aevil-A&#39;A ", "A&#39;Aevil-A&#39;A6", "A&#39;Aevil-A&#39;A_", "A&#39;Aevil-A&#39;A", "A&#39;Aevil-A&#39;A&#39;Aevil", "A&#39;AeVil-A&#39;Aevil", "A&#39;AEVIL-A&#39;Aevil", "A&#39;Aev_il-A&#39;Aevil", "A&#39;Aev il-A&#39;Aevil", "A&#39;Aev4il-A&#39;Aevil", "A&#39;A -A&#39;Aevil", "A&#39;A6-A&#39;Aevil", "A&#39;A_-A&#39;Aevil", "A&#39;A-A&#39;Aevil", "A&#39;A&#39;Aevil-A&#39;Aevil"]}, {"regex": "(REM [\\d\\D]*?[\\r\\n])|(?<SL>\\&#39;[\\d\\D]*?[\\r\\n])", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<S"}, "matches": []}, {"regex": "(/\\*[\\d\\D]*?\\*/)|(\\/\\*(\\s*|.*?)*\\*\\/)|(\\/\\/.*)|(/\\\\*[\\\\d\\\\D]*?\\\\*/)|([\\r\\n ]*//[^\\r\\n]*)+", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\r"}, "matches": [], "nonMatches": []}, {"regex": "\\d{3}[.-]?\\d{3}[.-]?\\d{4}", "exceptionStackTrace": null, "matches": ["000-000-00000", "000-0000000", "000-000.0000", "000000-0000", "000.000-0000", "0000-000-0000", "0000000000", "000-000-0000"], "nonMatches": ["000-000-000", "000-000--0000", "000-0000-0000", "000-00-0000", "000--000-0000", "00-000-0000"]}, {"regex": "(?:2[0-3]|[01]?[0-9])[:.][0-5]?[0-9]", "exceptionStackTrace": null, "matches": ["110.00", "0.00", "00.00", "20.000", "20.60", "20:00", "24.00", "0.0", "20.0", "10.00", "20.00"], "nonMatches": []}, {"regex": "(?:1[0-2]|0?[1-9])[:.][0-5]?[0-9][\\t ]+(?:AM|PM)", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\t"}, "matches": [], "nonMatches": []}, {"regex": "(?:2[0-3]|[01]?[0-9])[:.][0-5]?[0-9][:.][0-5]?[0-9]", "exceptionStackTrace": null, "matches": ["110.00.00", "0.00.00", "00.00.00", "20.00.000", "20.00.0", "20.00.60", "20.00:00", "20.0.00", "20:00.00", "24.00.00", "0.0.0", "20.0.0", "10.00.00", "20.00.00"], "nonMatches": ["20.000.00", "20.60.00"]}, {"regex": "https?://[\\d.A-Za-z-]+\\.[A-Za-z]{2,6}/?", "exceptionStackTrace": null, "matches": ["https://evil.aa//", "https://evil.aa", "https://evil.aaaaaaa/", "https://evil.aaaaaa/", "https://evil.Aa/", "https://..aa/", "https://-.aa/", "https://eVil.aa/", "https://EVIL.aa/", "https://ev4il.aa/", "https://e.aa/", "https://6.aa/", "http://evil.aa/", "http://evil.aa", "https://evil.aa/"], "nonMatches": ["https://evil.a/", "https://:.aa/", "https:///.aa/", "https://ev_il.aa/", "https://ev il.aa/", "https:// .aa/", "https://_.aa/", "https://.aa/", "httpss://evil.aa/"]}, {"regex": "(?:https?://|www\\.)[\\d.A-Za-z-]+\\.[A-Za-z]{2,6}/?", "exceptionStackTrace": null, "matches": ["https://evil.aa//", "https://evil.aa", "https://evil.aaaaaaa/", "https://evil.aaaaaa/", "https://evil.Aa/", "https://..aa/", "https://-.aa/", "https://eVil.aa/", "https://EVIL.aa/", "https://ev4il.aa/", "https://e.aa/", "https://6.aa/", "http://evil.aa/", "www.evil.aa", "http://evil.aa", "www.evil.aa/", "https://evil.aa/"], "nonMatches": ["https://evil.a/", "https://:.aa/", "https:///.aa/", "https://ev_il.aa/", "https://ev il.aa/", "https:// .aa/", "https://_.aa/", "https://.aa/", "httpss://evil.aa/"]}, {"regex": "^([0-1]?[0-9]{1}|2[0-3]{1}):([0-5]{1}[0-9]{1})$", "exceptionStackTrace": null, "matches": ["2:00", "0:00", "20:00", "00:00"], "nonMatches": ["200:00", "24:00", "00:000", "00:0", "00:60", "000:00"]}, {"regex": "^([A-Z]{2}?(\\d{7}))$", "exceptionStackTrace": null, "matches": ["AA0000000"], "nonMatches": ["AA00000000", "AA000000", "AAA0000000", "A0000000"]}, {"regex": "(0?[1-9]|[12][0-9]|3[01])-(0?[1-9]|1[012])-((19|20)\\\\d\\\\d)", "exceptionStackTrace": null, "matches": ["32-01-19\\d\\d", "30-01-19\\d\\d", "10-01-19\\d\\d", "01-11-19\\d\\d", "01-10-19\\d\\d", "01-1-19\\d\\d", "001-01-19\\d\\d", "1-01-19\\d\\d", "31-1-19\\d\\d", "20-1-19\\d\\d", "1-12-19\\d\\d", "1-1-20\\d\\d", "1-1-19\\d\\d", "31-01-19\\d\\d", "20-01-19\\d\\d", "01-12-19\\d\\d", "01-01-20\\d\\d", "01-01-19\\d\\d"], "nonMatches": ["01-13-19\\d\\d", "01-00-19\\d\\d", "01-001-19\\d\\d", "00-01-19\\d\\d"]}, {"regex": "^((((0[13578]|10|12)([-./])(0[1-9]|[12][0-9]|3[01])([-./])(\\d{4}))|((0[469]|1&#173;1)([-./])([0][1-9]|[12][0-9]|30)([-./])(\\d{4}))|((2)([-./])(0[1-9]|1[0-9]|2&#173;[0-8])([-./])(\\d{4}))|((2)(\\.|-|\\/)(29)([-./])([02468][048]00))|((2)([-./])&#173;(29)([-./])([13579][26]00))|((2)([-./])(29)([-./])([0-9][0-9][0][48]))|((2)&#173;([-./])(29)([-./])([0-9][0-9][2468][048]))|((2)([-./])(29)([-./])([0-9][0-9&#173;][13579][26]))))$", "exceptionStackTrace": null, "matches": ["2/29/0;92", "2/29/0;76", "2/29/0;56", "2/29/0;36", "2/29/0;16", "2/29/0796", "2/29/0396", "2/29/0196", "2/29/0096", "2/29/0&96", "2/29/0#96", "2/29.0;96", "2/29-0;96", "2.29/0;96", "2-29/0;96", "2&#173;/29/0084", "2&#173;/29/0080", "2&#173;/29/0068", "2&#173;/29/0048", "2&#173;/29/0028", "2&#173;/29.0088", "2&#173;/29-0088", "2&#173;.29/0088", "2&#173;-29/0088", "2/29/0004", "2/29/0000", "2/29.0008", "2/29-0008", "2.29/0008", "2-29/0008", "2/&#173;29/9200", "2/&#173;29/7600", "2/&#173;29/5600", "2/&#173;29/3600", "2/&#173;29/1600", "2/&#173;29.9600", "2/&#173;29-9600", "2.&#173;29/9600", "2-&#173;29/9600", "2.29/8400", "2.29/8000", "2.29/6800", "2.29/4800", "2.29/2800", "2.29/0800", "2.29.8800", "2.29-8800", "2/01.0000", "2/01-0000", "2.01/0000", "2-01/0000", "09/10/0000", "09/01.0000", "09/01-0000", "09.01/0000", "09-01/0000", "06/01/0000", "04/01/0000", "08/30/0000", "08/10/0000", "08/01.0000", "08/01-0000", "08.01/0000", "08-01/0000", "07/01/0000", "05/01/0000", "03/01/0000", "01/01/0000", "2/29/0;96", "2&#173;/29/0088", "2/29/0008", "2/&#173;29/9600", "2/29/8800", "2-29/8800", "2.29/8800", "2/2&#173;0/0000", "2/10/0000", "2/01/0000", "1&#173;1/01/0000", "09/30/0000", "09/20/0000", "09/01/0000", "12/01/0000", "10/01/0000", "08/31/0000", "08/20/0000", "08/01/0000"], "nonMatches": ["2/29/0;90", "2/29/0;06", "2&#173;/29/0081", "2&#173;/29/0008", "2/&#173;29/9000", "2/&#173;29/0600", "2.29/8100", "2.29/1800", "2/2&#173;9/0000", "2/01/00000", "2/01/000", "2/00/0000", "09/01/00000", "09/01/000", "09/00/0000", "08/32/0000", "08/01/00000", "08/01/000", "08/00/0000", "00/01/0000"]}, {"regex": "\\d+(/\\d+)?", "exceptionStackTrace": null, "matches": ["0/0/0", "0/00", "0/", "00/0", "/0", "0", "0/0"], "nonMatches": []}, {"regex": "&lt;[^&gt;]+&gt;", "exceptionStackTrace": null, "matches": ["&lt;eVil&gt;", "&lt;EVIL&gt;", "&lt;ev_il&gt;", "&lt;ev il&gt;", "&lt;ev4il&gt;", "&lt;e&gt;", "&lt; &gt;", "&lt;6&gt;", "&lt;_&gt;", "&lt;evil&gt;"], "nonMatches": ["&lt;;&gt;", "&lt;&&gt;", "&lt;&gt;"]}, {"regex": "^((((0?[13578]|1[02])\\/([0-2]?[1-9]|20|3[0-1]))|((0?[469]|11)\\/([0-2]?[1-9]|20|30))|(0?2\\/([0-1]?[1-9]|2[0-8])))\\/((19|20)?\\d{2}))|(0?2\\/29\\/((19|20)?(04|08|12|16|20|24|28|32|36|40|44|48|52|56|60|64|68|72|76|80|84|88|92|96)|2000))$", "exceptionStackTrace": null, "matches": ["02/29/04", "002/29/1904", "2/29/1904", "02/1/1900", "02/21/1900", "2/01/1900", "09/1/1900", "06/01/1900", "04/01/1900", "9/01/1900", "10/01/1900", "08/01/19000", "08/01/190", "08/01/191900", "08/01/00", "08/1/1900", "08/31/1900", "07/01/1900", "05/01/1900", "03/01/1900", "01/01/1900", "8/01/1900", "2/29/2000", "2/29/96", "2/29/92", "2/29/88", "2/29/84", "2/29/80", "2/29/76", "2/29/72", "2/29/68", "2/29/64", "2/29/60", "2/29/56", "2/29/52", "2/29/48", "2/29/44", "2/29/40", "2/29/36", "2/29/32", "2/29/28", "2/29/24", "2/29/20", "2/29/16", "2/29/12", "2/29/08", "2/29/04", "2/20/00", "2/1/00", "11/1/00", "9/30/00", "9/20/00", "9/1/00", "12/1/00", "8/30/00", "8/20/00", "8/1/00", "02/29/2000", "02/29/2004", "02/29/1996", "02/29/1992", "02/29/1988", "02/29/1984", "02/29/1980", "02/29/1976", "02/29/1972", "02/29/1968", "02/29/1964", "02/29/1960", "02/29/1956", "02/29/1952", "02/29/1948", "02/29/1944", "02/29/1940", "02/29/1936", "02/29/1932", "02/29/1928", "02/29/1924", "02/29/1920", "02/29/1916", "02/29/1912", "02/29/1908", "02/29/1904", "02/20/1900", "02/01/1900", "11/01/1900", "09/30/1900", "09/20/1900", "09/01/1900", "12/01/1900", "08/30/1900", "08/20/1900", "08/01/2000", "08/01/1900"], "nonMatches": ["02/29/191904", "02/29/1900", "02/00/1900", "02/001/1900", "002/01/1900", "09/00/1900", "09/001/1900", "09/31/1900", "009/01/1900", "08/32/1900", "08/00/1900", "08/001/1900", "00/01/1900", "008/01/1900"]}, {"regex": "^((([a-z0-9])+([\\w.-]{1})?)+([^\\W_]{1}))+@((([a-z0-9])+([\\w-]{1})?)+([^\\W_]{1}))+\\.[a-z]{2,3}(\\.[a-z]{2,4})?$", "exceptionStackTrace": null, "matches": ["0-a@0-a.aa", "0-a@0-a.aa.aaaa", "0-a@0-a.aaa.aa", "0-a@0-a0-a.aa.aa", "0-a@0-aa.aa.aa", "0-a@0-A.aa.aa", "0-a@0-0.aa.aa", "0-a@0-0-a.aa.aa", "0-a@0a.aa.aa", "0-a@0aa.aa.aa", "0-a@0_a.aa.aa", "0-a@0Aa.aa.aa", "0-a@00a.aa.aa", "0-a@00-a.aa.aa", "0-a@a-a.aa.aa", "0-a0-a@0-a.aa.aa", "0-aa@0-a.aa.aa", "0-A@0-a.aa.aa", "0-0@0-a.aa.aa", "0-0-a@0-a.aa.aa", "0a@0-a.aa.aa", "0aa@0-a.aa.aa", "0_a@0-a.aa.aa", "0Aa@0-a.aa.aa", "00a@0-a.aa.aa", "0.a@0-a.aa.aa", "00-a@0-a.aa.aa", "a-a@0-a.aa.aa", "0a@0a.aa", "0-a@0-a.aa.aa"], "nonMatches": ["0-a@0-a.aa.aa.aa", "0-a@0-a.aa.aaaaa", "0-a@0-a.aa.a", "0-a@0-a.aaaa.aa", "0-a@0-a.a.aa", "0-a@.aa.aa", "0-a@0-.aa.aa", "0-a@0-_.aa.aa", "0-a@0-@.aa.aa", "0-a@0-..aa.aa", "0-a@0--.aa.aa", "0-a@0- .aa.aa", "0-a@a.aa.aa", "0-a@0--a.aa.aa", "0-a@-a.aa.aa", "@0-a.aa.aa", "0-@0-a.aa.aa", "0-_@0-a.aa.aa", "0-@@0-a.aa.aa", "0-.@0-a.aa.aa", "0--@0-a.aa.aa", "0- @0-a.aa.aa", "a@0-a.aa.aa", "0--a@0-a.aa.aa", "-a@0-a.aa.aa"]}, {"regex": "https://mp3converter.zone  ", "exceptionStackTrace": null, "matches": ["https://mp3converterAzone  ", "https://mp3converter:zone  ", "https://mp3converter0zone  ", "https://mp3converter/zone  ", "https://mp3converter zone  ", "https://mp3converterazone  "], "nonMatches": []}, {"regex": "https://mp3converter.zone  ", "exceptionStackTrace": null, "matches": ["https://mp3converterAzone  ", "https://mp3converter:zone  ", "https://mp3converter0zone  ", "https://mp3converter/zone  ", "https://mp3converter zone  ", "https://mp3converterazone  "], "nonMatches": []}, {"regex": "(/^[A-Z][a-z]*(([\\&#39;\\,\\.\\-]?[A-Z])?[a-z]*)((\\s)?((Jr.(\\.))|I|II|III]))?$/,", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "missing ), unterminated subpattern"}, "matches": []}, {"regex": "((A[FGIKLMNPRSUZ]S?X?|DAL?L?A?E?S?|DE|DE[LNRST]L?A?E?H?I?O?S?|DI[AE]?|DOS?|DU|EIT?N?E?|ELS?|EN|ETT?|HAI?|HE[NT]|HIN?A?I?N?R?|HOI|IL|IM|ISA|KA|KE|LAS|LES?|LH?IS?|LOS?|LO?U|MA?C|N[AIY]|O[IP]|SI|T[AEO]N?R?|U[MN][AEOS]?|VAN|VE[LR]|VO[MN]|Y[ENR]|ZU[MR]?) )?((LAS?|LOS?|DEN?R?|ZU) )?[A-Z0/&#39;\\.-]+( |$)(SR|JR|II+V?|VI+|[1-9][STRDH]+)?", "exceptionStackTrace": null, "matches": ["ZURR LAS evil SR", "ZU LAS evil SR", "ZUM LAS evil SR", "ZUA LAS evil SR", "YN LAS evil SR", "YE LAS evil SR", "YA LAS evil SR", "VOM LAS evil SR", "VOA LAS evil SR", "VEL LAS evil SR", "VEA LAS evil SR", "UNSS LAS evil SR", "UN LAS evil SR", "UNO LAS evil SR", "UNE LAS evil SR", "UNB LAS evil SR", "UNA LAS evil SR", "UMS LAS evil SR", "UAS LAS evil SR", "TONRR LAS evil SR", "TON LAS evil SR", "TONNR LAS evil SR", "TOR LAS evil SR", "TENR LAS evil SR", "TBNR LAS evil SR", "TANR LAS evil SR", "OI LAS evil SR", "OA LAS evil SR", "NI LAS evil SR", "NB LAS evil SR", "NA LAS evil SR", "MAAC LAS evil SR", "MC LAS evil SR", "LOOU LAS evil SR", "LU LAS evil SR", "LOSS LAS evil SR", "LO LAS evil SR", "LHISS LAS evil SR", "LHI LAS evil SR", "LHHIS LAS evil SR", "LIS LAS evil SR", "LESS LAS evil SR", "LE LAS evil SR", "HINAINRR LAS evil SR", "HINAIN LAS evil SR", "HINAINNR LAS evil SR", "HINAIR LAS evil SR", "HINAIINR LAS evil SR", "HINANR LAS evil SR", "HINAAINR LAS evil SR", "HININR LAS evil SR", "HINNAINR LAS evil SR", "HIAINR LAS evil SR", "HEN LAS evil SR", "HEA LAS evil SR", "HAII LAS evil SR", "HA LAS evil SR", "ETTT LAS evil SR", "ET LAS evil SR", "ELSS LAS evil SR", "EL LAS evil SR", "EITNEE LAS evil SR", "EITN LAS evil SR", "EITNNE LAS evil SR", "EITE LAS evil SR", "EITTNE LAS evil SR", "EINE LAS evil SR", "DOSS LAS evil SR", "DO LAS evil SR", "DIEE LAS evil SR", "DI LAS evil SR", "DIB LAS evil SR", "DIA LAS evil SR", "DETLAEHIOSS LAS evil SR", "DETLAEHIO LAS evil SR", "DETLAEHIOOS LAS evil SR", "DETLAEHIS LAS evil SR", "DETLAEHIIOS LAS evil SR", "DETLAEHOS LAS evil SR", "DETLAEHHIOS LAS evil SR", "DETLAEIOS LAS evil SR", "DETLAEEHIOS LAS evil SR", "DETLAHIOS LAS evil SR", "DETLAAEHIOS LAS evil SR", "DETLEHIOS LAS evil SR", "DETLLAEHIOS LAS evil SR", "DETAEHIOS LAS evil SR", "DESLAEHIOS LAS evil SR", "DERLAEHIOS LAS evil SR", "DENLAEHIOS LAS evil SR", "DELLAEHIOS LAS evil SR", "DEALAEHIOS LAS evil SR", "DALLAESS LAS evil SR", "DALLAE LAS evil SR", "DALLAEES LAS evil SR", "DALLAS LAS evil SR", "DALLAAES LAS evil SR", "DALLES LAS evil SR", "DALLLAES LAS evil SR", "DALAES LAS evil SR", "AZSX DENRR evil SR", "AZSX DEN evil SR", "AZSX DENNR evil SR", "AZSX DER evil SR", "AZSX LOSS evil SR", "AZSX LO evil SR", "AZSX LAS evil 1HH", "AZSX LAS evil 1", "AZSX LAS evil 1T", "AZSX LAS evil 1S", "AZSX LAS evil 1R", "AZSX LAS evil 1D", "AZSX LAS evil 1A", "AZSX LAS evil 0H", "AZSX LAS evil VII", "AZSX LAS evil V", "AZSX LAS evil IIVV", "AZSX LAS evil II", "AZSX LAS evil IIIV", "AZSX LAS evil IV", "AZSX LAS evil SRSR", "AZSX LAS evil ", "AZSX LAS ; SR", "AZSX LAS / SR", "AZSX LAS . SR", "AZSX LAS - SR", "AZSX LAS & SR", "AZSX LAS # SR", "AZSX LAS eVil SR", "AZSX LAS EVIL SR", "AZSX LAS ev_il SR", "AZSX LAS ev il SR", "AZSX LAS ev4il SR", "AZSX LAS e SR", "AZSX LAS   SR", "AZSX LAS 6 SR", "AZSX LAS _ SR", "AZSX LAS  SR", "AZSX LAS LAS evil SR", "AZSX evil SR", "AZSX LASS evil SR", "AZSX LA evil SR", "AZSX AZSX LAS evil SR", "LAS evil SR", "AZSXX LAS evil SR", "AZS LAS evil SR", "AZSSX LAS evil SR", "AZX LAS evil SR", "AUSX LAS evil SR", "ASSX LAS evil SR", "ARSX LAS evil SR", "APSX LAS evil SR", "ANSX LAS evil SR", "AMSX LAS evil SR", "ALSX LAS evil SR", "AKSX LAS evil SR", "AISX LAS evil SR", "AGSX LAS evil SR", "AFSX LAS evil SR", "AASX LAS evil SR", "ZUR LAS evil SR", "YR LAS evil SR", "VON LAS evil SR", "VER LAS evil SR", "VAN LAS evil SR", "UNS LAS evil SR", "TONR LAS evil SR", "SI LAS evil SR", "OP LAS evil SR", "NY LAS evil SR", "MAC LAS evil SR", "LOU LAS evil SR", "LOS LAS evil SR", "LHIS LAS evil SR", "LES LAS evil SR", "LAS LAS evil SR", "KE LAS evil SR", "KA LAS evil SR", "ISA LAS evil SR", "IM LAS evil SR", "IL LAS evil SR", "HOI LAS evil SR", "HINAINR LAS evil SR", "HET LAS evil SR", "HAI LAS evil SR", "ETT LAS evil SR", "EN LAS evil SR", "ELS LAS evil SR", "EITNE LAS evil SR", "DU LAS evil SR", "DOS LAS evil SR", "DIE LAS evil SR", "DETLAEHIOS LAS evil SR", "DE LAS evil SR", "DALLAES LAS evil SR", "AZSX ZU evil SR", "AZSX DENR evil SR", "AZSX LOS evil SR", "AZSX LAS evilSR", "AZSX LAS evil 1H", "AZSX LAS evil VI", "AZSX LAS evil IIV", "AZSX LAS evil JR", "AZSX LAS evil SR"], "nonMatches": ["evil", "evil "]}, {"regex": "^(?=.*[a-z].*[a-z])(?=.*[A-Z].*[A-Z])(?=.*\\d.*\\d)(?=.*\\W.*\\W)[a-zA-Z0-9\\S]{9,}$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["aaaaaaaa", "_aaaaaaaa", "Aaaaaaaaa", "0aaaaaaaa", " aaaaaaaa", "aaaaaaaaa"]}, {"regex": "Facebook Customer Service ", "exceptionStackTrace": null, "matches": ["Facebook Customer Service "], "nonMatches": []}, {"regex": "Facebook Customer Service ", "exceptionStackTrace": null, "matches": ["Facebook Customer Service "], "nonMatches": []}, {"regex": "Facebook Customer Service ", "exceptionStackTrace": null, "matches": ["Facebook Customer Service "], "nonMatches": []}, {"regex": "Facebook Customer Service ", "exceptionStackTrace": null, "matches": ["Facebook Customer Service "], "nonMatches": []}, {"regex": "Facebook Customer Service ", "exceptionStackTrace": null, "matches": ["Facebook Customer Service "], "nonMatches": []}, {"regex": "Facebook Customer Service ", "exceptionStackTrace": null, "matches": ["Facebook Customer Service "], "nonMatches": []}, {"regex": "Facebook Customer Service ", "exceptionStackTrace": null, "matches": ["Facebook Customer Service "], "nonMatches": []}, {"regex": "Facebook Customer Service ", "exceptionStackTrace": null, "matches": ["Facebook Customer Service "], "nonMatches": []}, {"regex": "Facebook Customer Service ", "exceptionStackTrace": null, "matches": ["Facebook Customer Service "], "nonMatches": []}, {"regex": "Facebook Customer Service ", "exceptionStackTrace": null, "matches": ["Facebook Customer Service "], "nonMatches": []}, {"regex": "^[A-Za-z0-9]{8}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{12}$", "exceptionStackTrace": null, "matches": ["00000000-0000-0000-0000-a00000000000", "00000000-0000-0000-0000-A00000000000", "00000000-0000-0000-a000-000000000000", "00000000-0000-0000-A000-000000000000", "00000000-0000-a000-0000-000000000000", "00000000-0000-A000-0000-000000000000", "00000000-a000-0000-0000-000000000000", "00000000-A000-0000-0000-000000000000", "a0000000-0000-0000-0000-000000000000", "A0000000-0000-0000-0000-000000000000", "00000000-0000-0000-0000-000000000000"], "nonMatches": ["00000000-0000-0000-0000-0000000000000", "00000000-0000-0000-0000-00000000000", "00000000-0000-0000-00000-000000000000", "00000000-0000-0000-000-000000000000", "00000000-0000-00000-0000-000000000000", "00000000-0000-000-0000-000000000000", "00000000-00000-0000-0000-000000000000", "00000000-000-0000-0000-000000000000", "000000000-0000-0000-0000-000000000000", "0000000-0000-0000-0000-000000000000"]}, {"regex": "^(LV-)[0-9]{4}$", "exceptionStackTrace": null, "matches": ["LV-0000"], "nonMatches": ["LV-00000", "LV-000"]}, {"regex": "(?<=select).*(?]from)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?]"}, "matches": []}, {"regex": "&lt;table&gt;(&lt;tr&gt;((&lt;td&gt;([A-Za-z0-9])*&lt;/td&gt;)+)&lt;/tr&gt;)*&lt;/table&gt;", "exceptionStackTrace": null, "matches": ["&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;", "&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;", "&lt;table&gt;&lt;tr&gt;&lt;td&gt;00&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;", "&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;", "&lt;table&gt;&lt;tr&gt;&lt;td&gt;a&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;", "&lt;table&gt;&lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;", "&lt;table&gt;&lt;/table&gt;", "&lt;table&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;"], "nonMatches": ["&lt;table&gt;&lt;tr&gt;&lt;/tr&gt;&lt;/table&gt;"]}, {"regex": "^(958([0-9])+([0-9])+([0-9])+([0-9])+([0-9])+([0-9])+)|(958-([0-9])+([0-9])+([0-9])+([0-9])+([0-9])+([0-9])+)$", "exceptionStackTrace": null, "matches": ["958-0000000", "9580000000", "958-000000", "958000000"], "nonMatches": ["958-00000", "95800000"]}, {"regex": "(\\s)*(int|void|float|char|double|string)((\\s)|(\\*))*(\\&?)(\\s)+([a-z])([a-z0-9])*(\\s)*(\\()(\\s)*((int|void|float|char|double|string)((\\s)|(\\*))*(\\&?)(\\s)+([a-z])([a-z0-9])*((\\s)*[,](\\s)*(int|void|float|char|double|string)((\\s)|(\\*))*(\\&?)(\\s)+([a-z])([a-z0-9])*)*)?(\\s)*(\\))(\\s)*;", "exceptionStackTrace": null, "matches": [" int & a0 ( int & a0 , int & a0 )  ;", " int & a0 ( int & a0 , int & a0 );", " int & a0 ( int & a0 , int & a0  ) ;", " int & a0 ( int & a0 , int & a0) ;", " int & a0 (  ) ;", " int & a0 ( int & a0 , int & a0 , int & a0 ) ;", " int & a0 ( int & a0 ) ;", " int & a0 ( int & a0 , int & a00 ) ;", " int & a0 ( int & a0 , int & a ) ;", " int & a0 ( int & a0 , int & aa ) ;", " int & a0 ( int & a0 , int &  a0 ) ;", " int & a0 ( int & a0 , int  a0 ) ;", " int & a0 ( int & a0 , int  & a0 ) ;", " int & a0 ( int & a0 , int& a0 ) ;", " int & a0 ( int & a0 ,  int & a0 ) ;", " int & a0 ( int & a0 ,int & a0 ) ;", " int & a0 ( int & a0  , int & a0 ) ;", " int & a0 ( int & a0, int & a0 ) ;", " int & a0 ( int & a00 , int & a0 ) ;", " int & a0 ( int & a , int & a0 ) ;", " int & a0 ( int & aa , int & a0 ) ;", " int & a0 ( int &  a0 , int & a0 ) ;", " int & a0 ( int  a0 , int & a0 ) ;", " int & a0 ( int  & a0 , int & a0 ) ;", " int & a0 ( int& a0 , int & a0 ) ;", " int & a0 (  int & a0 , int & a0 ) ;", " int & a0 (int & a0 , int & a0 ) ;", " int & a0  ( int & a0 , int & a0 ) ;", " int & a0( int & a0 , int & a0 ) ;", " int & a00 ( int & a0 , int & a0 ) ;", " int & a ( int & a0 , int & a0 ) ;", " int & aa ( int & a0 , int & a0 ) ;", " int &  a0 ( int & a0 , int & a0 ) ;", " int  a0 ( int & a0 , int & a0 ) ;", " int  & a0 ( int & a0 , int & a0 ) ;", " int& a0 ( int & a0 , int & a0 ) ;", "  int & a0 ( int & a0 , int & a0 ) ;", "int & a0 ( int & a0 , int & a0 ) ;", "string a();", "double a();", "char a();", "float a();", "void a();", "int a();", " string & a0 ( int & a0 , int & a0 ) ;", " double & a0 ( int & a0 , int & a0 ) ;", " char & a0 ( int & a0 , int & a0 ) ;", " float & a0 ( int & a0 , int & a0 ) ;", " void & a0 ( int & a0 , int & a0 ) ;", " int*& a0 ( int & a0 , int & a0 ) ;", " int & a0 ( string & a0 , int & a0 ) ;", " int & a0 ( double & a0 , int & a0 ) ;", " int & a0 ( char & a0 , int & a0 ) ;", " int & a0 ( float & a0 , int & a0 ) ;", " int & a0 ( void & a0 , int & a0 ) ;", " int & a0 ( int*& a0 , int & a0 ) ;", " int & a0 ( int & a0 , string & a0 ) ;", " int & a0 ( int & a0 , double & a0 ) ;", " int & a0 ( int & a0 , char & a0 ) ;", " int & a0 ( int & a0 , float & a0 ) ;", " int & a0 ( int & a0 , void & a0 ) ;", " int & a0 ( int & a0 , int*& a0 ) ;", " int & a0 ( int & a0 , int & a0 ) ;"], "nonMatches": [" int & a0 ( int & a0 , int & a0int & a0 , int & a0 ) ;", " int & a0 ( int & a0 , int &a0 ) ;", " int & a0 ( int & a0 , int && a0 ) ;", " int & a0 ( int &a0 , int & a0 ) ;", " int & a0 ( int && a0 , int & a0 ) ;", " int &a0 ( int & a0 , int & a0 ) ;", " int && a0 ( int & a0 , int & a0 ) ;"]}, {"regex": "^(?:(?:1\\d{0,2}|[3-9]\\d?|2(?:[0-5]{1,2}|\\d)?|0)\\.){3}(?:1\\d{0,2}|[3-9]\\d?|2(?:[0-5]{1,2}|\\d)?|0)$", "exceptionStackTrace": null, "matches": ["200.20.20.10", "2.20.20.10", "26.20.20.10", "3.30.30.10", "10.10.10.200", "10.10.10.2", "10.10.10.26", "10.10.10.3", "10.10.10.100", "10.10.10.1", "100.10.10.10", "1.10.10.10", "0.0.0.1", "2.0.0.1", "3.0.0.1", "1.0.0.0", "1.0.0.2", "1.0.0.3", "1.0.0.1", "0.0.0.10", "20.20.20.10", "30.30.30.10", "10.10.10.0", "10.10.10.20", "10.10.10.30", "10.10.10.10"], "nonMatches": ["2000.20.20.10", "300.30.30.10", "00.30.30.10", "10.10.10.2000", "10.10.10.300", "10.10.10.00", "10.10.10.1000", "10.10.10.10.10", "10.10.10", "1000.10.10.10"]}, {"regex": "(private|public|protected)\\s\\w(.)*\\((.)*\\)[^;]", "exceptionStackTrace": null, "matches": ["private aa(a)A", "private aa(a)0", "private aa(a))", "private aa(a)(", "private aa(a) ", "private aa(aa)a", "private aa()a", "private aa(A)a", "private aa(;)a", "private aa(0)a", "private aa())a", "private aa(()a", "private aa( )a", "private aaa(a)a", "private a(a)a", "private aA(a)a", "private a;(a)a", "private a0(a)a", "private a)(a)a", "private a((a)a", "private a (a)a", "private _a(a)a", "private Aa(a)a", "private 0a(a)a", "protected a()a", "public a()a", "private a()a", "protected aa(a)a", "public aa(a)a", "private aa(a)a"], "nonMatches": ["private aa(a);"]}, {"regex": "^(([0-9])|([0-1][0-9])|([2][0-3])):?([0-5][0-9])$", "exceptionStackTrace": null, "matches": ["2000", "0000", "000", "20:00", "00:00", "0:00"], "nonMatches": ["24:00", "0:60", "0::00"]}, {"regex": "^([1-9]{1}[0-9]{3}[,]?)*([1-9]{1}[0-9]{3})$", "exceptionStackTrace": null, "matches": ["1000,1000,1000", "10001000", "1000", "1000,1000"], "nonMatches": ["1000,10000", "1000,100", "1000,11000", "1000,000", "1000,0000", "1000,,1000", "10000,1000", "100,1000", "11000,1000", "000,1000", "0000,1000"]}, {"regex": "^([a-zA-Z].*|[1-9].*|[:./].*)\\.(((a|A)(s|S)(p|P)(x|X)))$", "exceptionStackTrace": null, "matches": ["/:.aspx", "//.aspx", "/..aspx", "/eVil.aspx", "/EVIL.aspx", "/ev_il.aspx", "/ev il.aspx", "/ev4il.aspx", "/e.aspx", "/ .aspx", "/6.aspx", "/_.aspx", ":evil.aspx", ".evil.aspx", "1:.aspx", "1/.aspx", "1..aspx", "1eVil.aspx", "1EVIL.aspx", "1ev_il.aspx", "1ev il.aspx", "1ev4il.aspx", "1e.aspx", "1 .aspx", "16.aspx", "1_.aspx", "A:.aspx", "A/.aspx", "A..aspx", "AeVil.aspx", "AEVIL.aspx", "Aev_il.aspx", "Aev il.aspx", "Aev4il.aspx", "Ae.aspx", "A .aspx", "A6.aspx", "A_.aspx", "aevil.aspx", "/.aspx", "1.aspx", "A.Aspx", "A.aSpx", "A.asPx", "A.aspX", "A.aspx", "/evil.aspx", "1evil.aspx", "Aevil.Aspx", "Aevil.aSpx", "Aevil.asPx", "Aevil.aspX", "Aevil.aspx"], "nonMatches": ["0evil.aspx"]}, {"regex": "^([A-Z]{2}[9]{3}|[A-Z]{3}[9]{2}|[A-Z]{4}[9]{1}|[A-Z]{5})[0-9]{6}([A-Z]{1}[9]{1}|[A-Z]{2})[A-Z0-9]{3}[0-9]{2}$", "exceptionStackTrace": null, "matches": ["AA999000000A9A0000", "AAAAA000000A900000", "AAAA9000000A900000", "AAA99000000A900000", "AA999000000AA00000", "AA999000000A900000"], "nonMatches": ["AAAAAA000000A900000", "AAAA000000A900000", "AAAAA9000000A900000", "AAA9000000A900000", "AAAA99000000A900000", "AA999000000AAA00000", "AA999000000A9000000", "AA999000000A90000", "AA999000000A9900000", "AA999000000A00000", "AA999000000AA900000", "AA999000000900000", "AA9990000000A900000", "AA99900000A900000", "AA9999000000A900000", "AA99000000A900000", "AAA999000000A900000", "A999000000A900000"]}, {"regex": "^[0][5][0]-\\d{7}|[0][5][2]-\\d{7}|[0][5][4]-\\d{7}|[0][5][7]-\\d{7}|[0][7][7]-\\d{7}|[0][2]-\\d{7}|[0][3]-\\d{7}|[0][4]-\\d{7}|[0][8]-\\d{7}|[0][9]-\\d{7}|[0][5][0]\\d{7}|[0][5][2]\\d{7}|[0][5][4]\\d{7}|[0][5][7]\\d{7}|[0][7][7]\\d{7}|[0][2]\\d{7}|[0][3]\\d{7}|[0][4]\\d{7}|[0][8]\\d{7}|[0][9]\\d{7}$", "exceptionStackTrace": null, "matches": ["0800000000", "0400000000", "0300000000", "0200000000", "07700000000", "05700000000", "05400000000", "05200000000", "05000000000", "09-00000000", "08-00000000", "04-00000000", "03-00000000", "02-00000000", "077-00000000", "057-00000000", "054-00000000", "052-00000000", "050-00000000", "090000000", "080000000", "040000000", "030000000", "020000000", "0770000000", "0570000000", "0540000000", "0520000000", "0500000000", "09-0000000", "08-0000000", "04-0000000", "03-0000000", "02-0000000", "077-0000000", "057-0000000", "054-0000000", "052-0000000", "050-0000000"], "nonMatches": ["0900000000", "09000000", "08000000", "04000000", "03000000", "02000000", "077000000", "057000000", "054000000", "052000000", "050000000", "09-000000", "08-000000", "04-000000", "03-000000", "02-000000", "077-000000", "057-000000", "054-000000", "052-000000", "050-000000"]}, {"regex": "^(\\d{5}\\-\\d{3})|(\\d{8})$", "exceptionStackTrace": null, "matches": ["000000000", "00000-0000", "00000000", "00000-000"], "nonMatches": ["0000000", "00000-00", "000000-000", "0000-000"]}, {"regex": "(^\\d{5}-\\d{3}|^\\d{2}.\\d{3}-\\d{3}|\\d{8})", "exceptionStackTrace": null, "matches": ["000000000", "00a000-0000", "00A000-000", "00-000-000", "00 000-000", "00000-0000", "000000-000", "00000000", "00a000-000", "00000-000"], "nonMatches": ["0000000", "00a000-00", "00a0000-000", "00a00-000", "000a000-000", "0a000-000", "00000-00", "0000-000"]}, {"regex": "^(ac|AC|al|AL|am|AM|ap|AP|ba|BA|ce|CE|df|DF|es|ES|go|GO|ma|MA|mg|MG|ms|MS|mt|MT|pa|PA|pb|PB|pe|PE|pi|PI|pr|PR|rj|RJ|rn|RN|ro|RO|rr|RR|rs|RS|sc|SC|se|SE|sp|SP|to|TO)$", "exceptionStackTrace": null, "matches": ["TO", "to", "SP", "sp", "SE", "se", "SC", "sc", "RS", "rs", "RR", "rr", "RO", "ro", "RN", "rn", "RJ", "rj", "PR", "pr", "PI", "pi", "PE", "pe", "PB", "pb", "PA", "pa", "MT", "mt", "MS", "ms", "MG", "mg", "MA", "ma", "GO", "go", "ES", "es", "DF", "df", "CE", "ce", "BA", "ba", "AP", "ap", "AM", "am", "AL", "al", "AC", "ac"], "nonMatches": []}, {"regex": "^[a-zA-Z0-9\\040]+$", "exceptionStackTrace": null, "matches": ["eVil", "EVIL", "ev il", "ev4il", "e", " ", "6", "evil"], "nonMatches": ["ev_il", "_", ""]}, {"regex": "([\\(]?(?<AreaCode>[0-9]{3})[\\)]?)?[ \\.\\-]?(?<Exchange>[0-9]{3})[ \\.\\-](?<Number>[0-9]{4})", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<A"}, "matches": []}, {"regex": "^\\s*([\\w*]+)\\s*(?:(-?[\\d]+)?\\s*[(]?\\s*(%[\\w]+)?\\s*,?\\s*(%[\\w]+)\\s*,?\\s*([\\d]+)?[)]?|([$\\d]+))\\s*(?:,\\s*(-?[\\d]+)?\\s*[(]?\\s*(%[\\w]+)?\\s*,?\\s*(%[\\w]+)\\s*,?\\s*([\\d]+)?[)]?)?\\s*$", "exceptionStackTrace": null, "matches": [" evil $$ , -0 ( %evil , %evil , 0) ", " evil 0 , -0 ( %evil , %evil , 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0)  ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0)", " evil -0 ( %evil , %evil , 0)  ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0 ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 00) ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil , %evil , ) ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil , %evil ,  0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil , %evil ,0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil , %evil  0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil , %evil  , 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil , %evil, 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil , %eVil , 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil , %EVIL , 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil , %ev_il , 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil , %ev4il , 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil , %e , 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil , %6 , 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil , %_ , 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil ,  %evil , 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil ,%evil , 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil  %evil , 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil  , %evil , 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil, %evil , 0) ", " evil -0 ( %evil , %evil , 0) , -0 (  , %evil , 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %eVil , %evil , 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %EVIL , %evil , 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %ev_il , %evil , 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %ev4il , %evil , 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %e , %evil , 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %6 , %evil , 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %_ , %evil , 0) ", " evil -0 ( %evil , %evil , 0) , -0 (  %evil , %evil , 0) ", " evil -0 ( %evil , %evil , 0) , -0 (%evil , %evil , 0) ", " evil -0 ( %evil , %evil , 0) , -0  %evil , %evil , 0) ", " evil -0 ( %evil , %evil , 0) , -0  ( %evil , %evil , 0) ", " evil -0 ( %evil , %evil , 0) , -0( %evil , %evil , 0) ", " evil -0 ( %evil , %evil , 0) ,  ( %evil , %evil , 0) ", " evil -0 ( %evil , %evil , 0) , -00 ( %evil , %evil , 0) ", " evil -0 ( %evil , %evil , 0) , 0 ( %evil , %evil , 0) ", " evil -0 ( %evil , %evil , 0) ,  -0 ( %evil , %evil , 0) ", " evil -0 ( %evil , %evil , 0) ,-0 ( %evil , %evil , 0) ", " evil -0 ( %evil , %evil , 0)  , -0 ( %evil , %evil , 0) ", " evil -0 ( %evil , %evil , 0), -0 ( %evil , %evil , 0) ", " evil -0 ( %evil , %evil , 0 , -0 ( %evil , %evil , 0) ", " evil -0 ( %evil , %evil , 00) , -0 ( %evil , %evil , 0) ", " evil -0 ( %evil , %evil , ) , -0 ( %evil , %evil , 0) ", " evil -0 ( %evil , %evil ,  0) , -0 ( %evil , %evil , 0) ", " evil -0 ( %evil , %evil ,0) , -0 ( %evil , %evil , 0) ", " evil -0 ( %evil , %evil  0) , -0 ( %evil , %evil , 0) ", " evil -0 ( %evil , %evil  , 0) , -0 ( %evil , %evil , 0) ", " evil -0 ( %evil , %evil, 0) , -0 ( %evil , %evil , 0) ", " evil -0 ( %evil , %eVil , 0) , -0 ( %evil , %evil , 0) ", " evil -0 ( %evil , %EVIL , 0) , -0 ( %evil , %evil , 0) ", " evil -0 ( %evil , %ev_il , 0) , -0 ( %evil , %evil , 0) ", " evil -0 ( %evil , %ev4il , 0) , -0 ( %evil , %evil , 0) ", " evil -0 ( %evil , %e , 0) , -0 ( %evil , %evil , 0) ", " evil -0 ( %evil , %6 , 0) , -0 ( %evil , %evil , 0) ", " evil -0 ( %evil , %_ , 0) , -0 ( %evil , %evil , 0) ", " evil -0 ( %evil ,  %evil , 0) , -0 ( %evil , %evil , 0) ", " evil -0 ( %evil ,%evil , 0) , -0 ( %evil , %evil , 0) ", " evil -0 ( %evil  %evil , 0) , -0 ( %evil , %evil , 0) ", " evil -0 ( %evil  , %evil , 0) , -0 ( %evil , %evil , 0) ", " evil -0 ( %evil, %evil , 0) , -0 ( %evil , %evil , 0) ", " evil -0 (  , %evil , 0) , -0 ( %evil , %evil , 0) ", " evil -0 ( %eVil , %evil , 0) , -0 ( %evil , %evil , 0) ", " evil -0 ( %EVIL , %evil , 0) , -0 ( %evil , %evil , 0) ", " evil -0 ( %ev_il , %evil , 0) , -0 ( %evil , %evil , 0) ", " evil -0 ( %ev4il , %evil , 0) , -0 ( %evil , %evil , 0) ", " evil -0 ( %e , %evil , 0) , -0 ( %evil , %evil , 0) ", " evil -0 ( %6 , %evil , 0) , -0 ( %evil , %evil , 0) ", " evil -0 ( %_ , %evil , 0) , -0 ( %evil , %evil , 0) ", " evil -0 (  %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", " evil -0 (%evil , %evil , 0) , -0 ( %evil , %evil , 0) ", " evil -0  %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", " evil -0  ( %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", " evil -0( %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", " evil  ( %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", " evil -00 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", " evil 0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", " evil  -0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", " evil-0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", " * -0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", " eVil -0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", " EVIL -0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", " ev_il -0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", " ev4il -0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", " e -0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", " 6 -0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", " _ -0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", "  evil -0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", "evil -0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", "evil$", "evil%evil", " evil $ , -0 ( %evil , %evil , 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0) "], "nonMatches": [" evil  , -0 ( %evil , %evil , 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0), -0 ( %evil , %evil , 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0)) ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil , %evil ,, 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil , %ev il , 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil , %  , 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil , % , 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil ,, %evil , 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %evil%evil , %evil , 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %ev il , %evil , 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( %  , %evil , 0) ", " evil -0 ( %evil , %evil , 0) , -0 ( % , %evil , 0) ", " evil -0 ( %evil , %evil , 0) , -0 (( %evil , %evil , 0) ", " evil -0 ( %evil , %evil , 0) , -0-0 ( %evil , %evil , 0) ", " evil -0 ( %evil , %evil , 0) , - ( %evil , %evil , 0) ", " evil -0 ( %evil , %evil , 0) , --0 ( %evil , %evil , 0) ", " evil -0 ( %evil , %evil , 0)) , -0 ( %evil , %evil , 0) ", " evil -0 ( %evil , %evil ,, 0) , -0 ( %evil , %evil , 0) ", " evil -0 ( %evil , %ev il , 0) , -0 ( %evil , %evil , 0) ", " evil -0 ( %evil , %  , 0) , -0 ( %evil , %evil , 0) ", " evil -0 ( %evil , % , 0) , -0 ( %evil , %evil , 0) ", " evil -0 ( %evil ,, %evil , 0) , -0 ( %evil , %evil , 0) ", " evil -0 ( %evil%evil , %evil , 0) , -0 ( %evil , %evil , 0) ", " evil -0 ( %ev il , %evil , 0) , -0 ( %evil , %evil , 0) ", " evil -0 ( %  , %evil , 0) , -0 ( %evil , %evil , 0) ", " evil -0 ( % , %evil , 0) , -0 ( %evil , %evil , 0) ", " evil -0 (( %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", " evil -0-0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", " evil - ( %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", " evil --0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", " - -0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", " , -0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", " ) -0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", " ( -0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", " % -0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", " $ -0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", " ev il -0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", "   -0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0) ", "  -0 ( %evil , %evil , 0) , -0 ( %evil , %evil , 0) "]}, {"regex": "class\\s+([a-z0-9_]+)(?:\\s+extends\\s+[a-z0-9_]+)?(?:\\s+implements\\s+(?:[a-z0-9_]+\\s*,*\\s*)+)?\\s*\\{", "exceptionStackTrace": null, "matches": ["class evil extends evil implements evil ,  implements evil ,  {", "class evil extends evil {", "class evil extends evil implements evil , evil ,  {", "class evil extends evil implements evil ,   {", "class evil extends evil implements evil , {", "class evil extends evil implements evil ,,  {", "class evil extends evil implements evil   {", "class evil extends evil implements evil  ,  {", "class evil extends evil implements evil,  {", "class evil extends evil implements ev_il ,  {", "class evil extends evil implements ev il ,  {", "class evil extends evil implements ev4il ,  {", "class evil extends evil implements e ,  {", "class evil extends evil implements 6 ,  {", "class evil extends evil implements _ ,  {", "class evil extends evil implements  evil ,  {", "class evil extends evil  implements evil ,  {", "class evil implements evil ,  {", "class evil extends ev_il implements evil ,  {", "class evil extends ev4il implements evil ,  {", "class evil extends e implements evil ,  {", "class evil extends 6 implements evil ,  {", "class evil extends _ implements evil ,  {", "class evil extends  evil implements evil ,  {", "class evil  extends evil implements evil ,  {", "class ev_il extends evil implements evil ,  {", "class ev4il extends evil implements evil ,  {", "class e extends evil implements evil ,  {", "class 6 extends evil implements evil ,  {", "class _ extends evil implements evil ,  {", "class  evil extends evil implements evil ,  {", "class evil{", "class evil extends evil implements evil ,  {"], "nonMatches": ["class evil extends evil implements  {", "class evil extends evil implements { ,  {", "class evil extends evil implements , ,  {", "class evil extends evil implements eVil ,  {", "class evil extends evil implements EVIL ,  {", "class evil extends evil implements   ,  {", "class evil extends evil implements  ,  {", "class evil extends evil implementsevil ,  {", "class evil extends evilimplements evil ,  {", "class evil extends evil extends evil implements evil ,  {", "class evil extends { implements evil ,  {", "class evil extends , implements evil ,  {", "class evil extends eVil implements evil ,  {", "class evil extends EVIL implements evil ,  {", "class evil extends ev il implements evil ,  {", "class evil extends   implements evil ,  {", "class evil extends  implements evil ,  {", "class evil extendsevil implements evil ,  {", "class evilextends evil implements evil ,  {", "class { extends evil implements evil ,  {", "class , extends evil implements evil ,  {", "class eVil extends evil implements evil ,  {", "class EVIL extends evil implements evil ,  {", "class ev il extends evil implements evil ,  {", "class   extends evil implements evil ,  {", "class  extends evil implements evil ,  {", "classevil extends evil implements evil ,  {"]}, {"regex": "(^[0-9]*[1-9]+[0-9]*\\.[0-9]*$)|(^[0-9]*\\.[0-9]*[1-9]+[0-9]*$)|(^[0-9]*[1-9]+[0-9]*$)", "exceptionStackTrace": null, "matches": ["0100", "01", "0110", "0010", "10", "0.0100", "0.01", "0.0110", "0.0010", "0.10", "00.010", ".010", "010.00", "010.", "0100.0", "01.0", "0110.0", "0010.0", "10.0", "1", ".1", "1.", "010", "0.010", "010.0"], "nonMatches": ["00", "000", "0.00", "0.000", "00.0", "000.0"]}, {"regex": "(&quot;.+&quot;\\s)?<?[a-z\\._0-9]+[^\\._]@([a-z0-9]+\\.)+[a-z0-9]{2,6}>?;?", "exceptionStackTrace": null, "matches": ["&quot;evil&quot; <evila@evil.00>;;", "&quot;evil&quot; <evila@evil.00>", "&quot;evil&quot; <evila@evil.00>>;", "&quot;evil&quot; <evila@evil.00;", "&quot;evil&quot; <evila@evil.0000000>;", "&quot;evil&quot; <evila@evil.000000>;", "&quot;evil&quot; <evila@evil.a0>;", "&quot;evil&quot; <evila@evil.evil.00>;", "&quot;evil&quot; <evila@ev4il.00>;", "&quot;evil&quot; <evila@e.00>;", "&quot;evil&quot; <evila@6.00>;", "&quot;evil&quot; <evilA@evil.00>;", "&quot;evil&quot; <evil@@evil.00>;", "&quot;evil&quot; <evil>@evil.00>;", "&quot;evil&quot; <evil<@evil.00>;", "&quot;evil&quot; <evil;@evil.00>;", "&quot;evil&quot; <evil0@evil.00>;", "&quot;evil&quot; <evil&@evil.00>;", "&quot;evil&quot; <evil @evil.00>;", "&quot;evil&quot; <.a@evil.00>;", "&quot;evil&quot; <eVila@evil.00>;", "&quot;evil&quot; <ev_ila@evil.00>;", "&quot;evil&quot; <ev ila@evil.00>;", "&quot;evil&quot; <ev4ila@evil.00>;", "&quot;evil&quot; <ea@evil.00>;", "&quot;evil&quot; <6a@evil.00>;", "&quot;evil&quot; <_a@evil.00>;", "&quot;evil&quot; <<evila@evil.00>;", "&quot;evil&quot; evila@evil.00>;", "&quot;evil&quot; &quot;evil&quot; <evila@evil.00>;", "<evila@evil.00>;", "&quot;@&quot; <evila@evil.00>;", "&quot;>&quot; <evila@evil.00>;", "&quot;<&quot; <evila@evil.00>;", "&quot;;&quot; <evila@evil.00>;", "&quot;.&quot; <evila@evil.00>;", "&quot;&&quot; <evila@evil.00>;", "&quot;eVil&quot; <evila@evil.00>;", "&quot;EVIL&quot; <evila@evil.00>;", "&quot;ev_il&quot; <evila@evil.00>;", "&quot;ev il&quot; <evila@evil.00>;", "&quot;ev4il&quot; <evila@evil.00>;", "&quot;e&quot; <evila@evil.00>;", "&quot; &quot; <evila@evil.00>;", "&quot;6&quot; <evila@evil.00>;", "&quot;_&quot; <evila@evil.00>;", "&quot;&quot; <evila@evil.00>;", "evila@evil.00", "&quot;evil&quot; <evila@evil.00>;"], "nonMatches": ["&quot;evil&quot; <evila@evil.0>;", "&quot;evil&quot; <evila@00>;", "&quot;evil&quot; <evila@eVil.00>;", "&quot;evil&quot; <evila@EVIL.00>;", "&quot;evil&quot; <evila@ev_il.00>;", "&quot;evil&quot; <evila@ev il.00>;", "&quot;evil&quot; <evila@ .00>;", "&quot;evil&quot; <evila@_.00>;", "&quot;evil&quot; <evila@.00>;", "&quot;evil&quot; <evil_@evil.00>;", "&quot;evil&quot; <evil.@evil.00>;", "&quot;evil&quot; <@a@evil.00>;", "&quot;evil&quot; <>a@evil.00>;", "&quot;evil&quot; <<a@evil.00>;", "&quot;evil&quot; <;a@evil.00>;", "&quot;evil&quot; <&a@evil.00>;", "&quot;evil&quot; <EVILa@evil.00>;", "&quot;evil&quot; < a@evil.00>;", "&quot;evil&quot; <a@evil.00>;"]}, {"regex": "[\\+]?[\\s]?(\\d(\\-|\\s)?)?(\\(\\d{3}\\)\\s?|\\d{3}\\-?)\\d{3}(-|\\s-\\s)?\\d{4}(\\s(ex|ext)\\s?\\d+)?", "exceptionStackTrace": null, "matches": ["+ 0-000000-0000 ex 0", "+ 0-0000-000-0000 ex 0", "+ 0-(000) 000-0000 ex 0 ex 0", "+ 0-(000) 000-0000", "+ 0-(000) 000-0000 ex 00", "+ 0-(000) 000-0000 ex ", "+ 0-(000) 000-0000 ex  0", "+ 0-(000) 000-0000 ex0", "+ 0-(000) 000-00000 ex 0", "+ 0-(000) 0000000 ex 0", "+ 0-(000)000-0000 ex 0", "+ 0-0-(000) 000-0000 ex 0", "+ (000) 000-0000 ex 0", "+ 0--(000) 000-0000 ex 0", "+ 0(000) 000-0000 ex 0", "+  0-(000) 000-0000 ex 0", "+0-(000) 000-0000 ex 0", "++ 0-(000) 000-0000 ex 0", " 0-(000) 000-0000 ex 0", "0000000000", "(000)0000000", "+ 0 (000) 000-0000 ex 0", "+ 0-000-000-0000 ex 0", "+ 0-(000) 000 - 0000 ex 0", "+ 0-(000) 000-0000 ext 0", "+ 0-(000) 000-0000 ex 0"], "nonMatches": ["+ 0-000--000-0000 ex 0", "+ 0-00-000-0000 ex 0", "+ 0-(000) 000-000 ex 0", "+ 0-(000) 000--0000 ex 0", "+ 0-(000) 0000-0000 ex 0", "+ 0-(000) 00-0000 ex 0", "+ 0-(000)  000-0000 ex 0", "+ 0-(0000) 000-0000 ex 0", "+ 0-(00) 000-0000 ex 0"]}, {"regex": "([^\\w]+)|([^A-Za-z])|(\\b[^aeiouy]+\\b)|(\\b(\\w{2})\\b)", "exceptionStackTrace": null, "matches": ["_a", "Aa", "0a", "A", "EVIL", "ev_il", "ev il", "ev4il", " ", "6", "_", "aa", "0"], "nonMatches": ["aaa", "a", "eVil", "e", "", "evil"]}, {"regex": "^\\+(?:[0-9] ?){6,14}[0-9]$", "exceptionStackTrace": null, "matches": ["+0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "+00 0 0 0 0 0", "+0 0 0 0 0 0 0"], "nonMatches": ["+0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "+0 0 0 0 0 0", "+0  0 0 0 0 0 0"]}, {"regex": "^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$", "exceptionStackTrace": null, "matches": ["evil@evila.", "evil@evila-", "evil@evilaeVil", "evil@evilaEVIL", "evil@evilaev_il", "evil@evilaev il", "evil@evilaev4il", "evil@evilae", "evil@evila6", "evil@evila", "evil@evil_evil", "evil@evilAevil", "evil@evil@evil", "evil@evil0evil", "evil@evil.evil", "evil@evil-evil", "evil@evil evil", "evil@-aevil", "evil@eVilaevil", "evil@EVILaevil", "evil@ev_ilaevil", "evil@ev ilaevil", "evil@ev4ilaevil", "evil@eaevil", "evil@6aevil", "evil@aevil", ".@evilaevil", "-@evilaevil", "eVil@evilaevil", "EVIL@evilaevil", "ev_il@evilaevil", "ev4il@evilaevil", "e@evilaevil", "6@evilaevil", "_@evilaevil", "evil@evilaevil"], "nonMatches": ["evil@evila@", "evil@evila ", "evil@evila_", "evil@@aevil", "evil@.aevil", "evil@ aevil", "evil@_aevil", "@@evilaevil", "ev il@evilaevil", " @evilaevil", "@evilaevil"]}, {"regex": "\\*[^\\/]+", "exceptionStackTrace": null, "matches": ["**", "*eVil", "*EVIL", "*ev_il", "*ev il", "*ev4il", "*e", "* ", "*6", "*_", "*evil"], "nonMatches": ["*/", "*"]}, {"regex": "(a|A)", "exceptionStackTrace": null, "matches": ["A", "a"], "nonMatches": []}, {"regex": "^(\\w+([_.]{1}\\w+)*@\\w+([_.]{1}\\w+)*\\.[A-Za-z]{2,3}[;]?)*$", "exceptionStackTrace": null, "matches": ["evil.evil@evil.evil.aa;evil.evil@evil.evil.aa;", "evil.evil@evil.evil.aa", "evil.evil@evil.evil.aaa;", "evil.evil@evil.evil.Aa;", "evil.evil@evil.evil.evil.aa;", "evil.evil@evil.aa;", "evil.evil@evil.eVil.aa;", "evil.evil@evil.EVIL.aa;", "evil.evil@evil.ev_il.aa;", "evil.evil@evil.ev4il.aa;", "evil.evil@evil.e.aa;", "evil.evil@evil.6.aa;", "evil.evil@evil._.aa;", "evil.evil@evilevil.aa;", "evil.evil@evil_evil.aa;", "evil.evil@eVil.evil.aa;", "evil.evil@EVIL.evil.aa;", "evil.evil@ev_il.evil.aa;", "evil.evil@ev4il.evil.aa;", "evil.evil@e.evil.aa;", "evil.evil@6.evil.aa;", "evil.evil@_.evil.aa;", "evil.evil.evil@evil.evil.aa;", "evil@evil.evil.aa;", "evil.eVil@evil.evil.aa;", "evil.EVIL@evil.evil.aa;", "evil.ev_il@evil.evil.aa;", "evil.ev4il@evil.evil.aa;", "evil.e@evil.evil.aa;", "evil.6@evil.evil.aa;", "evil._@evil.evil.aa;", "evilevil@evil.evil.aa;", "evil_evil@evil.evil.aa;", "eVil.evil@evil.evil.aa;", "EVIL.evil@evil.evil.aa;", "ev_il.evil@evil.evil.aa;", "ev4il.evil@evil.evil.aa;", "e.evil@evil.evil.aa;", "6.evil@evil.evil.aa;", "_.evil@evil.evil.aa;", "", "evil.evil@evil.evil.aa;"], "nonMatches": ["evil.evil@evil.evil.aa;;", "evil.evil@evil.evil.aaaa;", "evil.evil@evil.evil.a;", "evil.evil@evil.ev il.aa;", "evil.evil@evil. .aa;", "evil.evil@evil..aa;", "evil.evil@evil..evil.aa;", "evil.evil@ev il.evil.aa;", "evil.evil@ .evil.aa;", "evil.evil@.evil.aa;", "evil.ev il@evil.evil.aa;", "evil. @evil.evil.aa;", "evil.@evil.evil.aa;", "evil..evil@evil.evil.aa;", "ev il.evil@evil.evil.aa;", " .evil@evil.evil.aa;", ".evil@evil.evil.aa;"]}, {"regex": "(((s*)(ftp)(s*)|(http)(s*)|mailto|news|file|webcal):(\\S*))|((www.)(\\S*))", "exceptionStackTrace": null, "matches": ["wwwa:", "wwwaeVil", "wwwaEVIL", "wwwaev_il", "wwwaev il", "wwwaev4il", "wwwae", "wwwa ", "wwwa6", "wwwa_", "wwwAevil", "www:evil", "www0evil", "www evil", "httpss:evil", "http:evil", "sftps::", "sftps:eVil", "sftps:EVIL", "sftps:ev_il", "sftps:ev il", "sftps:ev4il", "sftps:e", "sftps: ", "sftps:6", "sftps:_", "sftps:", "sftpss:evil", "sftp:evil", "ssftps:evil", "ftps:evil", "wwwa", "webcal:", "file:", "news:", "mailto:", "http:", "ftp:", "wwwaevil", "webcal:evil", "file:evil", "news:evil", "mailto:evil", "https:evil", "sftps:evil"], "nonMatches": []}, {"regex": "^[0-9]{10}GBR[0-9]{7}[U,M,F]{1}[0-9]{9}$", "exceptionStackTrace": null, "matches": ["0000000000GBR0000000U000000000", "0000000000GBR0000000M000000000", "0000000000GBR0000000,000000000", "0000000000GBR0000000F000000000"], "nonMatches": ["0000000000GBR0000000F0000000000", "0000000000GBR0000000F00000000", "0000000000GBR0000000FF000000000", "0000000000GBR0000000000000000", "0000000000GBR0000000A000000000", "0000000000GBR00000000F000000000", "0000000000GBR000000F000000000", "00000000000GBR0000000F000000000", "000000000GBR0000000F000000000"]}, {"regex": "^([A-Z]{2}[9]{3}|[A-Z]{3}[9]{2}|[A-Z]{4}[9]{1}|[A-Z]{5})[0-9]{6}([A-Z]{1}[9]{1}|[A-Z]{2})[A-Z0,9]{3}$", "exceptionStackTrace": null, "matches": ["AA999000000A9A99", "AA999000000A9099", "AA999000000A9,99", "AAAAA000000A9999", "AAAA9000000A9999", "AAA99000000A9999", "AA999000000AA999", "AA999000000A9999"], "nonMatches": ["AAAAAA000000A9999", "AAAA000000A9999", "AAAAA9000000A9999", "AAA9000000A9999", "AAAA99000000A9999", "AA999000000AAA999", "AA999000000A9199", "AA999000000A99999", "AA999000000A999", "AA999000000AA9999", "AA9990000009999", "AA9990000000A9999", "AA99900000A9999", "AA9999000000A9999", "AA99000000A9999", "AAA999000000A9999", "A999000000A9999"]}, {"regex": "^[A-Z0-9<]{9}[0-9]{1}[A-Z]{3}[0-9]{7}[A-Z]{1}[0-9]{7}[A-Z0-9<]{14}[0-9]{2}$", "exceptionStackTrace": null, "matches": ["<<<<<<<<<0AAA0000000A0000000A<<<<<<<<<<<<<00", "<<<<<<<<<0AAA0000000A00000000<<<<<<<<<<<<<00", "A<<<<<<<<0AAA0000000A0000000<<<<<<<<<<<<<<00", "0<<<<<<<<0AAA0000000A0000000<<<<<<<<<<<<<<00", "<<<<<<<<<0AAA0000000A0000000<<<<<<<<<<<<<<00"], "nonMatches": ["<<<<<<<<<0AAA0000000A0000000<<<<<<<<<<<<<<000", "<<<<<<<<<0AAA0000000A0000000<<<<<<<<<<<<<<0", "<<<<<<<<<0AAA0000000A0000000<<<<<<<<<<<<<<<00", "<<<<<<<<<0AAA0000000A0000000<<<<<<<<<<<<<00", "<<<<<<<<<0AAA0000000A00000000<<<<<<<<<<<<<<00", "<<<<<<<<<0AAA0000000A000000<<<<<<<<<<<<<<00", "<<<<<<<<<0AAA0000000AA0000000<<<<<<<<<<<<<<00", "<<<<<<<<<0AAA00000000000000<<<<<<<<<<<<<<00", "<<<<<<<<<0AAA00000000A0000000<<<<<<<<<<<<<<00", "<<<<<<<<<0AAA000000A0000000<<<<<<<<<<<<<<00", "<<<<<<<<<0AAAA0000000A0000000<<<<<<<<<<<<<<00", "<<<<<<<<<0AA0000000A0000000<<<<<<<<<<<<<<00", "<<<<<<<<<00AAA0000000A0000000<<<<<<<<<<<<<<00", "<<<<<<<<<AAA0000000A0000000<<<<<<<<<<<<<<00", "<<<<<<<<<<0AAA0000000A0000000<<<<<<<<<<<<<<00", "<<<<<<<<0AAA0000000A0000000<<<<<<<<<<<<<<00"]}, {"regex": "(((0[123456789]|10|11|12)(([1][9][0-9][0-9])|([2][0-9][0-9][0-9]))))", "exceptionStackTrace": null, "matches": ["081900", "071900", "061900", "051900", "041900", "031900", "021900", "011900", "121900", "111900", "101900", "092000", "091900"], "nonMatches": ["001900"]}, {"regex": "(?!^0*\\.0*$)^\\d{1,10}(\\.\\d{1,2})?$", "exceptionStackTrace": null, "matches": ["0"], "nonMatches": ["0.0.0", "0.000", "0.00", "0.", "00000000000.0", "0000000000.0", ".0", "0.0"]}, {"regex": "^((?:(?:[a-zA-Z]:)|\\\\)\\\\)?((?:\\.\\.?\\\\)|(?:[^\\0-\\31<>:&quot;/\\\\|?*]+(?<![ .])\\\\))*([^\\0-\\31<>:&quot;/\\\\|?*]+(?<![ .]))?$", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\0"}, "matches": [], "nonMatches": []}, {"regex": "(\\A|\\s)(((>[:;=+])|[>:;=+])[,*]?[-~+o]?(\\)+|\\(+|\\}+|\\{+|\\]+|\\[+|\\|+|\\\\+|/+|>+|<+|D+|[@#!OoPpXxZS$03])|>?[xX8][-~+o]?(\\)+|\\(+|\\}+|\\{+|\\]+|\\[+|\\|+|\\\\+|/+|>+|<+|D+))(\\Z|\\s)", "exceptionStackTrace": null, "matches": [">8oDD", ">8o<<", ">8o>>", ">8o//", ">8o\\\\", ">8o||", ">8o[[", ">8o]]", ">8o{{", ">8o}}", ">8o((", ">8o))", ">8)", ">8~)", ">8-)", ">8+)", ">xo)", ">Xo)", "8o)", ">*o)", "=*o)", ";*o)", ":*o)", ">+*ox", ">+*op", ">+*oo", ">+*oZ", ">+*oX", ">+*oS", ">+*oP", ">+*oO", ">+*o@", ">+*o0", ">+*o$", ">+*o#", ">+*o!", ">+*oDD", ">+*o<<", ">+*o>>", ">+*o//", ">+*o\\\\", ">+*o||", ">+*o[[", ">+*o]]", ">+*o{{", ">+*o}}", ">+*o((", ">+*o))", ">+*o", ">+*)", ">+*~)", ">+*-)", ">+*+)", ">+o)", ">+,o)", ">=*o)", ">;*o)", ">:*o)", " >+)", "8D", "8<", "8>", "8/", "8\\", "8|", "8[", "8]", "8{", "8}", "8(", "8)", "+)", ">+3", ">+D", ">+<", ">+>", ">+/", ">+\\", ">+|", ">+[", ">+]", ">+{", ">+}", ">+(", ">+) ", ">+)", " >+*o)", ">8oD", ">8o<", ">8o>", ">8o/", ">8o\\", ">8o|", ">8o[", ">8o]", ">8o{", ">8o}", ">8o(", ">8o)", "+*o)", ">+*o3", ">+*oD", ">+*o<", ">+*o>", ">+*o/", ">+*o\\", ">+*o|", ">+*o[", ">+*o]", ">+*o{", ">+*o}", ">+*o(", ">+*o) ", ">+*o)"], "nonMatches": [">8o", ">8oo)", ">8a)", ">ao)", ">Ao)", ">0o)", ">>8o)", ">+*oa", ">+*oA", ">+*o1", ">+*oo)", ">+*a)", ">+**o)"]}, {"regex": "(\\A|\\s)((\\)+|\\(+|\\}+|\\{+|\\]+|\\[+|\\|+|\\\\+|/+|>+|<+|D+|[@#!OoXxZS$0])[-~+o]?[,*]?((<[:;=+])|[<:;=+])|(\\)+|\\(+|\\}+|\\{+|\\]+|\\[+|\\|+|\\\\+|/+|>+|<+|D+)[-~+o]?[xX8]<?)(\\Z|\\s)", "exceptionStackTrace": null, "matches": ["DDo8<", "<<o8<", ">>o8<", "//o8<", "\\\\o8<", "||o8<", "[[o8<", "]]o8<", "{{o8<", "}}o8<", "((o8<", ")o8", ")ox<", ")oX<", ")8<", ")~8<", ")-8<", ")+8<", "))o8<", "xo*<+", "oo*<+", "Zo*<+", "Xo*<+", "So*<+", "Oo*<+", "@o*<+", "$o*<+", "#o*<+", "!o*<+", "DDo*<+", "<<o*<+", ">>o*<+", "//o*<+", "\\\\o*<+", "||o*<+", "[[o*<+", "]]o*<+", "{{o*<+", "}}o*<+", "((o*<+", ")o*=", ")o*<", ")o*;", ")o*:", ")o*<=", ")o*<;", ")o*<:", ")o<+", ")o,<+", ")*<+", ")~*<+", ")-*<+", ")+*<+", "))o*<+", "o*<+", " )<+", "D8", "<8", ">8", "/8", "\\8", "|8", "[8", "]8", "{8", "}8", "(8", ")8", "0<+", "D<+", "<<+", "><+", "/<+", "\\<+", "|<+", "[<+", "]<+", "{<+", "}<+", "(<+", ")+", ")<+ ", ")<+", " )o*<+", "Do8<", "<o8<", ">o8<", "/o8<", "\\o8<", "|o8<", "[o8<", "]o8<", "{o8<", "}o8<", "(o8<", ")o8<", "0o*<+", "Do*<+", "<o*<+", ">o*<+", "/o*<+", "\\o*<+", "|o*<+", "[o*<+", "]o*<+", "{o*<+", "}o*<+", "(o*<+", ")o*+", ")o*<+ ", ")o*<+"], "nonMatches": [")o8<<", ")oa<", ")oA<", ")o0<", ")oo8<", ")a8<", "o8<", "ao*<+", "Ao*<+", "1o*<+", ")o**<+", ")oo*<+", ")a*<+"]}, {"regex": "Facebook phone number ", "exceptionStackTrace": null, "matches": ["Facebook phone number "], "nonMatches": []}, {"regex": "Facebook phone number ", "exceptionStackTrace": null, "matches": ["Facebook phone number "], "nonMatches": []}, {"regex": "Facebook phone number ", "exceptionStackTrace": null, "matches": ["Facebook phone number "], "nonMatches": []}, {"regex": "Facebook phone number ", "exceptionStackTrace": null, "matches": ["Facebook phone number "], "nonMatches": []}, {"regex": "Facebook phone number ", "exceptionStackTrace": null, "matches": ["Facebook phone number "], "nonMatches": []}, {"regex": "Facebook phone number ", "exceptionStackTrace": null, "matches": ["Facebook phone number "], "nonMatches": []}, {"regex": "Facebook phone number ", "exceptionStackTrace": null, "matches": ["Facebook phone number "], "nonMatches": []}, {"regex": "facebook customer service", "exceptionStackTrace": null, "matches": ["facebook customer service"], "nonMatches": []}, {"regex": "facebook customer service", "exceptionStackTrace": null, "matches": ["facebook customer service"], "nonMatches": []}, {"regex": "facebook customer service", "exceptionStackTrace": null, "matches": ["facebook customer service"], "nonMatches": []}, {"regex": "facebook customer service", "exceptionStackTrace": null, "matches": ["facebook customer service"], "nonMatches": []}, {"regex": "facebook customer service", "exceptionStackTrace": null, "matches": ["facebook customer service"], "nonMatches": []}, {"regex": "facebook customer service", "exceptionStackTrace": null, "matches": ["facebook customer service"], "nonMatches": []}, {"regex": "facebook customer service", "exceptionStackTrace": null, "matches": ["facebook customer service"], "nonMatches": []}, {"regex": "facebook customer service", "exceptionStackTrace": null, "matches": ["facebook customer service"], "nonMatches": []}, {"regex": "facebook customer service", "exceptionStackTrace": null, "matches": ["facebook customer service"], "nonMatches": []}, {"regex": "facebook customer service", "exceptionStackTrace": null, "matches": ["facebook customer service"], "nonMatches": []}, {"regex": "facebook customer service", "exceptionStackTrace": null, "matches": ["facebook customer service"], "nonMatches": []}, {"regex": "facebook customer service", "exceptionStackTrace": null, "matches": ["facebook customer service"], "nonMatches": []}, {"regex": "facebook customer service", "exceptionStackTrace": null, "matches": ["facebook customer service"], "nonMatches": []}, {"regex": "facebook customer service", "exceptionStackTrace": null, "matches": ["facebook customer service"], "nonMatches": []}, {"regex": "facebook customer service", "exceptionStackTrace": null, "matches": ["facebook customer service"], "nonMatches": []}, {"regex": "Facebook phone number ", "exceptionStackTrace": null, "matches": ["Facebook phone number "], "nonMatches": []}, {"regex": "Facebook phone number ", "exceptionStackTrace": null, "matches": ["Facebook phone number "], "nonMatches": []}, {"regex": "Facebook phone number ", "exceptionStackTrace": null, "matches": ["Facebook phone number "], "nonMatches": []}, {"regex": "Facebook phone number ", "exceptionStackTrace": null, "matches": ["Facebook phone number "], "nonMatches": []}, {"regex": "Facebook phone number ", "exceptionStackTrace": null, "matches": ["Facebook phone number "], "nonMatches": []}, {"regex": "facebook customer service", "exceptionStackTrace": null, "matches": ["facebook customer service"], "nonMatches": []}, {"regex": "facebook customer service", "exceptionStackTrace": null, "matches": ["facebook customer service"], "nonMatches": []}, {"regex": "facebook customer service", "exceptionStackTrace": null, "matches": ["facebook customer service"], "nonMatches": []}, {"regex": "facebook customer service", "exceptionStackTrace": null, "matches": ["facebook customer service"], "nonMatches": []}, {"regex": "facebook customer service", "exceptionStackTrace": null, "matches": ["facebook customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "yahoo customer service", "exceptionStackTrace": null, "matches": ["yahoo customer service"], "nonMatches": []}, {"regex": "Forgot Gmail Password   ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password   "], "nonMatches": []}, {"regex": "Forgot Gmail Password   ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password   "], "nonMatches": []}, {"regex": "Forgot Gmail Password   ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password   "], "nonMatches": []}, {"regex": "Forgot Gmail Password   ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password   "], "nonMatches": []}, {"regex": "Forgot Gmail Password   ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password   "], "nonMatches": []}, {"regex": "Forgot Gmail Password   ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password   "], "nonMatches": []}, {"regex": "Forgot Gmail Password   ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password   "], "nonMatches": []}, {"regex": "Forgot Gmail Password   ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password   "], "nonMatches": []}, {"regex": "Forgot Gmail Password   ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password   "], "nonMatches": []}, {"regex": "Forgot Gmail Password   ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password   "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Facebook phone number ", "exceptionStackTrace": null, "matches": ["Facebook phone number "], "nonMatches": []}, {"regex": "Facebook phone number ", "exceptionStackTrace": null, "matches": ["Facebook phone number "], "nonMatches": []}, {"regex": "Facebook phone number ", "exceptionStackTrace": null, "matches": ["Facebook phone number "], "nonMatches": []}, {"regex": "Facebook phone number ", "exceptionStackTrace": null, "matches": ["Facebook phone number "], "nonMatches": []}, {"regex": "Facebook phone number ", "exceptionStackTrace": null, "matches": ["Facebook phone number "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "Forgot Gmail Password ", "exceptionStackTrace": null, "matches": ["Forgot Gmail Password "], "nonMatches": []}, {"regex": "(\\A|\\s)[({\\[]*([\\^\\*\\-@#$%<>XxVvOo0ZzTt+&#39;&#172;](_+|\\.)[\\^\\*\\-@#$%<>XxVvOo0ZzTt+&#39;&#172;]|\\._\\.|[\\^\\*@#$%<>XxVOo0ZTt&#39;]\\-[\\^\\*@#$%<>XxVOo0ZTt&#39;]|>>|><|<<|o[O0]|[O0]o)[)}\\]]*[;.?]*[&#39;&quot;]?(\\Z|\\s)", "exceptionStackTrace": null, "matches": ["[Oo]?;", "[oO]?;", "[;-x]?;", "[;-t]?;", "[;-o]?;", "[;-^]?;", "[;-Z]?;", "[;-X]?;", "[;-V]?;", "[;-T]?;", "[;-O]?;", "[;-@]?;", "[;->]?;", "[;-<]?;", "[;-9]?;", "[;-3]?;", "[;-0]?;", "[;-*]?;", "[;-&]?;", "[;-%]?;", "[;-$]?;", "[;-#]?;", "[x-;]?;", "[t-;]?;", "[o-;]?;", "[^-;]?;", "[Z-;]?;", "[X-;]?;", "[V-;]?;", "[T-;]?;", "[O-;]?;", "[@-;]?;", "[>-;]?;", "[<-;]?;", "[9-;]?;", "[3-;]?;", "[0-;]?;", "[*-;]?;", "[&-;]?;", "[%-;]?;", "[$-;]?;", "[#-;]?;", "[;_;]?;;", "[;_;]?", "[;_;]?u", "[;_;]?t", "[;_;]?q", "[;_;]?o", "[;_;]?9", "[;_;]?3", "[;_;]?&", "[;_;]?#", "[;_;]??;", "[;_;];", "[;_;];;", "[;_;].;", "[;_;]]?;", "[;_;?;", "[;_;}?;", "[;_;)?;", "[;_z]?;", "[;_x]?;", "[;_v]?;", "[;_t]?;", "[;_o]?;", "[;_^]?;", "[;_Z]?;", "[;_X]?;", "[;_V]?;", "[;_T]?;", "[;_O]?;", "[;_@]?;", "[;_>]?;", "[;_<]?;", "[;_9]?;", "[;_7]?;", "[;_3]?;", "[;_2]?;", "[;_1]?;", "[;_0]?;", "[;_-]?;", "[;_+]?;", "[;_*]?;", "[;_&]?;", "[;_%]?;", "[;_$]?;", "[;_#]?;", "[;__;]?;", "[z_;]?;", "[x_;]?;", "[v_;]?;", "[t_;]?;", "[o_;]?;", "[^_;]?;", "[Z_;]?;", "[X_;]?;", "[V_;]?;", "[T_;]?;", "[O_;]?;", "[@_;]?;", "[>_;]?;", "[<_;]?;", "[9_;]?;", "[7_;]?;", "[3_;]?;", "[2_;]?;", "[1_;]?;", "[0_;]?;", "[-_;]?;", "[+_;]?;", "[*_;]?;", "[&_;]?;", "[%_;]?;", "[$_;]?;", "[#_;]?;", "[[;_;]?;", ";_;]?;", "{;_;]?;", "(;_;]?;", " ;_;", "0o", "o0", "<<", "><", ">>", ";-;", "._.", ";.;", ";_; ", ";_;", " [;_;]?;", "[0o]?;", "[o0]?;", "[<<]?;", "[><]?;", "[>>]?;", "[;-;]?;", "[._.]?;", "[;.;]?;", "[;_;]?; ", "[;_;]?;"], "nonMatches": ["[Ao]?;", "[1o]?;", "[oA]?;", "[o1]?;", "[;-a]?;", "[;-A]?;", "[;-1]?;", "[a-;]?;", "[A-;]?;", "[1-;]?;", "[;_;]?a", "[;_;]?0", "[;_a]?;", "[;_A]?;", "[;_4]?;", "[;;]?;", "[a_;]?;", "[A_;]?;", "[4_;]?;"]}, {"regex": "<blockquote>(?:\\s*([^<]+)<br>\\s*)+</blockquote>", "exceptionStackTrace": null, "matches": ["<blockquote> evil<br>  evil<br> </blockquote>", "<blockquote> evil<br>  </blockquote>", "<blockquote> evil<br></blockquote>", "<blockquote> ><br> </blockquote>", "<blockquote> /<br> </blockquote>", "<blockquote> eVil<br> </blockquote>", "<blockquote> EVIL<br> </blockquote>", "<blockquote> ev_il<br> </blockquote>", "<blockquote> ev il<br> </blockquote>", "<blockquote> ev4il<br> </blockquote>", "<blockquote> e<br> </blockquote>", "<blockquote>  <br> </blockquote>", "<blockquote> 6<br> </blockquote>", "<blockquote> _<br> </blockquote>", "<blockquote> <br> </blockquote>", "<blockquote>  evil<br> </blockquote>", "<blockquote>evil<br> </blockquote>", "<blockquote>evil<br></blockquote>", "<blockquote> evil<br> </blockquote>"], "nonMatches": ["<blockquote></blockquote>", "<blockquote> <<br> </blockquote>"]}, {"regex": "^([-]?[0-9])$|^([-]?[1][0-2])$\n", "exceptionStackTrace": null, "matches": ["10\n", "0", "-10\n", "-0"], "nonMatches": ["-13\n", "--10\n", "--0"]}, {"regex": "^([-]?[0-9]?(\\.[0-9]{0,2})?)$|^([-]?([1][0-1])(\\.[0-9]{0,2})?)$|^([-]?([1][0-3](\\.[0]{0,2})))$", "exceptionStackTrace": null, "matches": ["-10", "-10.00", "-10.", "-12.0", "10.0", "-0", "-0.00", "-0.", "-.0", "0.0", "10.", "10", "", "-10.0", "-0.0"], "nonMatches": ["-14.0", "-10.0.0", "-10.000", "--10.0", "-0.0.0", "-0.000", "-00.0", "--0.0"]}, {"regex": "(?<=<(\\S|\\s)*)((?<=(href=(&#39;|&quot;)+))|(?<=(href=))[^(&#39;|&quot;)])([^&#39;>&quot;\\s)]*)(?=(&#39;|&quot;|[\\S])?)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "look-behind requires fixed-width pattern"}, "matches": []}, {"regex": "(?<=<[\\/?]?)\\w+(?::\\w+)?", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "look-behind requires fixed-width pattern"}, "matches": []}, {"regex": "@&quot;([^&quot;]|[&quot;]{2})*&quot;|&quot;.*?(?<=[^\\\\]|[\\\\]{2})&quot;", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "look-behind requires fixed-width pattern"}, "matches": []}, {"regex": "^([a-z]{2,3}(\\.[a-zA-Z][a-zA-Z_$0-9]*)*)\\.([A-Z][a-zA-Z_$0-9]*)$", "exceptionStackTrace": null, "matches": ["aa.Aevil.A$", "aa.Aevil.AeVil", "aa.Aevil.AEVIL", "aa.Aevil.Aev_il", "aa.Aevil.Aev4il", "aa.Aevil.Ae", "aa.Aevil.A6", "aa.Aevil.A_", "aa.Aevil.A", "aa.Aevil.Aevil.Aevil", "aa.Aevil", "aa.A$.Aevil", "aa.AeVil.Aevil", "aa.AEVIL.Aevil", "aa.Aev_il.Aevil", "aa.Aev4il.Aevil", "aa.Ae.Aevil", "aa.A6.Aevil", "aa.A_.Aevil", "aa.A.Aevil", "aa.aevil.Aevil", "aaa.Aevil.Aevil", "aa.A", "aa.Aevil.Aevil"], "nonMatches": ["aa.Aevil.A.", "aa.Aevil.Aev il", "aa.Aevil.A ", "aa.A..Aevil", "aa.Aev il.Aevil", "aa.A .Aevil", "aaaa.Aevil.Aevil", "a.Aevil.Aevil"]}, {"regex": "^(([a-zA-Z][a-zA-Z_$0-9]*(\\.[a-zA-Z][a-zA-Z_$0-9]*)*)\\.)?([a-zA-Z][a-zA-Z_$0-9]*)$", "exceptionStackTrace": null, "matches": ["Aevil.Aevil.A$", "Aevil.Aevil.AeVil", "Aevil.Aevil.AEVIL", "Aevil.Aevil.Aev_il", "Aevil.Aevil.Aev4il", "Aevil.Aevil.Ae", "Aevil.Aevil.A6", "Aevil.Aevil.A_", "Aevil.Aevil.A", "Aevil.Aevil.aevil", "Aevil.Aevil.Aevil.Aevil.Aevil", "Aevil", "Aevil.Aevil.Aevil.Aevil", "Aevil.Aevil", "Aevil.A$.Aevil", "Aevil.AeVil.Aevil", "Aevil.AEVIL.Aevil", "Aevil.Aev_il.Aevil", "Aevil.Aev4il.Aevil", "Aevil.Ae.Aevil", "Aevil.A6.Aevil", "Aevil.A_.Aevil", "Aevil.A.Aevil", "Aevil.aevil.Aevil", "A$.Aevil.Aevil", "AeVil.Aevil.Aevil", "AEVIL.Aevil.Aevil", "Aev_il.Aevil.Aevil", "Aev4il.Aevil.Aevil", "Ae.Aevil.Aevil", "A6.Aevil.Aevil", "A_.Aevil.Aevil", "A.Aevil.Aevil", "aevil.Aevil.Aevil", "A", "Aevil.Aevil.Aevil"], "nonMatches": ["Aevil.Aevil.A.", "Aevil.Aevil.Aev il", "Aevil.Aevil.A ", "Aevil.A..Aevil", "Aevil.Aev il.Aevil", "Aevil.A .Aevil", "A..Aevil.Aevil", "Aev il.Aevil.Aevil", "A .Aevil.Aevil"]}, {"regex": "^(\\+?36)?[ -]?(\\d{1,2}|(\\(\\d{1,2}\\)))/?([ -]?\\d){6,7}$", "exceptionStackTrace": null, "matches": ["+36-(00)/-0-0-0-0-0-0", "+36-0/-0-0-0-0-0-0-0", "+36-0/0-0-0-0-0-0", "+36-0/ 0-0-0-0-0-0", "+36-0-0-0-0-0-0-0", "+36-00/-0-0-0-0-0-0", "+360/-0-0-0-0-0-0", "+36 0/-0-0-0-0-0-0", "-0/-0-0-0-0-0-0", "36-0/-0-0-0-0-0-0", "(0)0-0-0-0-0-0", "00-0-0-0-0-0", "+36-(0)/-0-0-0-0-0-0", "+36-0/-0-0-0-0-0-0"], "nonMatches": ["+36-(000)/-0-0-0-0-0-0", "+36-()/-0-0-0-0-0-0", "+36-0/-0-0-0-0-0-0-0-0", "+36-0/-0-0-0-0-0", "+36-0/--0-0-0-0-0-0", "+36-0//-0-0-0-0-0-0", "+36-000/-0-0-0-0-0-0", "+36-/-0-0-0-0-0-0", "+36--0/-0-0-0-0-0-0", "+36+36-0/-0-0-0-0-0-0", "++36-0/-0-0-0-0-0-0"]}, {"regex": "^[A-Z]{2}-[0-9]{2}-[0-9]{2}|[0-9]{2}-[0-9]{2}-[A-Z]{2}|[0-9]{2}-[A-Z]{2}-[0-9]{2}|[A-Z]{2}-[0-9]{2}-[A-Z]{2}|[A-Z]{2}-[A-Z]{2}-[0-9]{2}|}|[0-9]{2}-[A-Z]{2}-[A-Z]{2}|[0-9]{2}-[A-Z]{3}-[0-9]{1}|[0-9]{1}-[A-Z]{3}-[0-9]{2}$", "exceptionStackTrace": null, "matches": ["000-AAA-0", "00-AA-AAA", "000-AA-AA", "AA-AA-000", "AAA-AA-00", "AA-00-AAA", "AAA-00-AA", "00-AA-000", "00-AAA-00", "000-AA-00", "00-00-AAA", "000-00-AA", "AA-00-000", "0-AAA-00", "00-AAA-0", "00-AA-AA", "}", "AA-AA-00", "AA-00-AA", "00-AA-00", "00-00-AA", "AA-00-00"], "nonMatches": ["0-AAA-000", "0-AAAA-00", "-AAA-00", "00-AAA-", "00-AAAA-0", "0-AAA-0", "00-AA-A", "00-AAA-AA", "00-A-AA", "0-AA-AA", "AA-AA-0", "AA-AAA-00", "AA-A-00", "A-AA-00", "AA-00-A", "AA-000-AA", "AA-0-AA", "A-00-AA", "00-AA-0", "00-A-00", "0-AA-00", "00-00-A", "00-000-AA", "00-0-AA", "0-00-AA", "AA-00-0", "AA-000-00", "AA-0-00", "AAA-00-00", "A-00-00"]}, {"regex": "<[^>]*?>", "exceptionStackTrace": null, "matches": ["<>>", "<<>", "<eVil>", "<EVIL>", "<ev_il>", "<ev il>", "<ev4il>", "<e>", "< >", "<6>", "<_>", "<>", "<evil>"], "nonMatches": []}, {"regex": "^\\d* \\d*\\/{1}\\d*$|^\\d*$", "exceptionStackTrace": null, "matches": ["00", "0 0/00", "0 0/", "0 00/0", "0 /0", "00 0/0", " 0/0", "", " /", "0", "0 0/0"], "nonMatches": ["0 0//0", "0 00"]}, {"regex": "(a|b|c).(a.b)*.b+.c", "exceptionStackTrace": null, "matches": ["aaaabab_c", "aaaababAc", "aaaabab0c", "aaaabab c", "aaaababbac", "aaaab_bac", "aaaabAbac", "aaaab0bac", "aaaab bac", "aaaabaababac", "aaa_babac", "aaaAbabac", "aaa0babac", "aaa babac", "a_aababac", "aAaababac", "a0aababac", "a aababac", "caabac", "baabac", "aaabac", "caaababac", "baaababac", "aaaababac"], "nonMatches": ["aaaabaac"]}, {"regex": "[-+]?((\\.[0-9]+|[0-9]+\\.[0-9]+)([eE][-+][0-9]+)?|[0-9]+)", "exceptionStackTrace": null, "matches": ["+00", "+0.00E+0", "+0.E+0", "+00.0E+0", "+.0E+0E+0", "+.0", "+.0E+00", "+.0E+", "+.0E-0", "+.0e+0", "+.0a+0", "+.0A+0", "+.00E+0", "+.E+0", "++.0E+0", ".0E+0", "-.0E+0", "0", "0.0", ".0", "+0", "+0.0E+0", "+.0E+0"], "nonMatches": ["+"]}, {"regex": "^([0-1]?[0-9]|[2][0-3]):([0-5][0-9])$", "exceptionStackTrace": null, "matches": ["0:00", "20:00", "00:00"], "nonMatches": ["24:00", "00:60", "000:00"]}, {"regex": "^[+-]?\\d+(\\.\\d{1,4})? *%?$", "exceptionStackTrace": null, "matches": ["-0.0 ", "-0.0  %", "-0.0%", "-0 %", "-0.0000 %", "-00.0 %", "0.0 %", "+0.0 %", "0", "-0.0 %"], "nonMatches": ["-0.0 %%", "-0.0.0 %", "-0.00000 %", "-0. %", "-.0 %", "--0.0 %"]}, {"regex": "(^0[78][2347][0-9]{7})", "exceptionStackTrace": null, "matches": ["08700000000", "0840000000", "0830000000", "0820000000", "0770000000", "0870000000"], "nonMatches": ["087000000", "0800000000", "0070000000"]}, {"regex": "(^(?!000)\\d{3}) ([- ]?) ((?!00)\\d{2}) ([- ]?) ((?!0000)\\d{4})", "exceptionStackTrace": null, "matches": [], "nonMatches": ["000   00   00000", "000   00   000", "000   00    0000", "000   00  0000", "000   00 - 0000", "000   000   0000", "000   0   0000", "000    00   0000", "000  00   0000", "000 - 00   0000", "0000   00   0000", "00   00   0000", "000  00  0000", "000   00   0000"]}, {"regex": "(^(?!00)\\d{2}) ([- ]?) ((?!0000000)\\d{7})", "exceptionStackTrace": null, "matches": [], "nonMatches": ["00   00000000", "00   000000", "00    0000000", "00 - 0000000", "000   0000000", "0   0000000", "00  0000000", "00   0000000"]}, {"regex": "^([2][0]\\d{2}\\/([0]\\d|[1][0-2])\\/([0-2]\\d|[3][0-1]))$|^([2][0]\\d{2}\\/([0]\\d|[1][0-2])\\/([0-2]\\d|[3][0-1])\\s([0-1]\\d|[2][0-3])\\:[0-5]\\d\\:[0-5]\\d)$", "exceptionStackTrace": null, "matches": ["2000/10/00 00:00:00", "2000/00/30 00:00:00", "2000/00/00 20:00:00", "2000/00/00 00:00:00", "2000/10/00", "2000/00/30", "2000/00/00"], "nonMatches": ["2000/13/00 00:00:00", "2000/00/32 00:00:00", "2000/00/00 24:00:00", "2000/00/00 00:00:60", "2000/00/00 00:60:00", "20000/00/00 00:00:00", "200/00/00 00:00:00", "2000/13/00", "2000/00/32", "20000/00/00", "200/00/00"]}, {"regex": "^([a-z0-9]+[.+-])*([a-z0-9]+)+@(([a-z0-9]+[.-])+([a-z]{2,})$|(([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])(\\.|$)){4})", "exceptionStackTrace": null, "matches": ["evil-evil@250.200.200.200.", "evil-evil@100.10.10.10.", "evil-evil@1.10.10.10.", "evil-evil@0.0.0.0.0.", "evil-evil@evil-evil-aa", "evil-evil@evil.aa", "evil-evil@ev4il-aa", "evil-evil@e-aa", "evil-evil@6-aa", "evil-evilevil@evil-aa", "evil-ev4il@evil-aa", "evil-e@evil-aa", "evil-6@evil-aa", "evil-evil-evil@evil-aa", "evil.evil@evil-aa", "evil+evil@evil-aa", "ev4il-evil@evil-aa", "e-evil@evil-aa", "6-evil@evil-aa", "evil@250.250.250.250.", "evil@200.250.250.250.", "evil@10.250.250.250.", "evil@0.250.250.250.", "evil@evil-aa", "evil-evil@250.250.250.250.", "evil-evil@200.200.200.200.", "evil-evil@10.10.10.10.", "evil-evil@0.0.0.0.", "evil-evil@evil-aa"], "nonMatches": ["evil-evil@256.250.250.250.", "evil-evil@1000.10.10.10.", "evil-evil@00.10.10.10.", "evil-evil@0.0.0.", "evil-evil@evil-a", "evil-evil@aa", "evil-evil@eVil-aa", "evil-evil@EVIL-aa", "evil-evil@ev_il-aa", "evil-evil@ev il-aa", "evil-evil@ -aa", "evil-evil@_-aa", "evil-evil@-aa", "evil-eVil@evil-aa", "evil-EVIL@evil-aa", "evil-ev_il@evil-aa", "evil-ev il@evil-aa", "evil- @evil-aa", "evil-_@evil-aa", "evil-@evil-aa", "eVil-evil@evil-aa", "EVIL-evil@evil-aa", "ev_il-evil@evil-aa", "ev il-evil@evil-aa", " -evil@evil-aa", "_-evil@evil-aa", "-evil@evil-aa", "evil@0250.250.250.", "evil-evil@0000"]}, {"regex": "target[ ]*[=]([ ]*)([&quot;]|[&#39;])*([_])*([A-Za-z0-9])+([&quot;])*", "exceptionStackTrace": null, "matches": ["target = 9_0;", "target = 3_0;", "target = 0_0;", "target = #_0;", "target = ;_0;;", "target = ;_0", "target = ;_0u", "target = ;_0t", "target = ;_0q", "target = ;_0o", "target = ;_0a", "target = ;_0&", "target = ;_00;", "target = ;_a;", "target = ;_A;", "target = ;__0;", "target = ;0;", "target = ;;_0;", "target = _0;", "target = u_0;", "target = t_0;", "target = q_0;", "target = o_0;", "target = a_0;", "target = &_0;", "target =  ;_0;", "target =;_0;", "target  = ;_0;", "target= ;_0;", "target=0", "target = ;_0;"], "nonMatches": ["target = ;_;"]}, {"regex": "^((((H|h)(T|t)|(F|f))(T|t)(P|p)((S|s)?))\\://)?(www.|[a-zA-Z0-9].)[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,6}(\\:[0-9]{1,5})*(/($|[a-zA-Z0-9\\.\\,\\;\\?\\&#39;\\\\\\+&amp;%\\$#\\=~_\\-]+))*$", "exceptionStackTrace": null, "matches": ["HTTPS://0~evil.AA:0/", "HTTPS://0_evil.AA:0/", "HTTPS://0\\evil.AA:0/", "HTTPS://0Aevil.AA:0/", "HTTPS://0?evil.AA:0/", "HTTPS://0=evil.AA:0/", "HTTPS://0;evil.AA:0/", "HTTPS://0:evil.AA:0/", "HTTPS://00evil.AA:0/", "HTTPS://0/evil.AA:0/", "HTTPS://0.evil.AA:0/", "HTTPS://0-evil.AA:0/", "HTTPS://0,evil.AA:0/", "HTTPS://0+evil.AA:0/", "HTTPS://0&evil.AA:0/", "HTTPS://0%evil.AA:0/", "HTTPS://0$evil.AA:0/", "HTTPS://0#evil.AA:0/", "HTTPS://0 evil.AA:0/", "HTTPS://aaevil.AA:0/", "HTTPS://Aaevil.AA:0/", "HTTPS://wwwaevil.AA:0/~", "HTTPS://wwwaevil.AA:0/\\", "HTTPS://wwwaevil.AA:0/?", "HTTPS://wwwaevil.AA:0/=", "HTTPS://wwwaevil.AA:0/;", "HTTPS://wwwaevil.AA:0/.", "HTTPS://wwwaevil.AA:0/-", "HTTPS://wwwaevil.AA:0/,", "HTTPS://wwwaevil.AA:0/+", "HTTPS://wwwaevil.AA:0/&", "HTTPS://wwwaevil.AA:0/%", "HTTPS://wwwaevil.AA:0/$", "HTTPS://wwwaevil.AA:0/#", "HTTPS://wwwaevil.AA:0/eVil", "HTTPS://wwwaevil.AA:0/EVIL", "HTTPS://wwwaevil.AA:0/ev_il", "HTTPS://wwwaevil.AA:0/ev4il", "HTTPS://wwwaevil.AA:0/e", "HTTPS://wwwaevil.AA:0/6", "HTTPS://wwwaevil.AA:0/_", "HTTPS://wwwaevil.AA:0", "HTTPS://wwwaevil.AA:0:0/", "HTTPS://wwwaevil.AA/", "HTTPS://wwwaevil.AA:00000/", "HTTPS://wwwaevil.AAAAAA:0/", "HTTPS://wwwaevil.aA:0/", "HTTPS://wwwa..AA:0/", "HTTPS://wwwa-.AA:0/", "HTTPS://wwwaeVil.AA:0/", "HTTPS://wwwaEVIL.AA:0/", "HTTPS://wwwaev4il.AA:0/", "HTTPS://wwwae.AA:0/", "HTTPS://wwwa6.AA:0/", "HTTPS://wwwa.AA:0/", "HTTPS://www~evil.AA:0/", "HTTPS://www_evil.AA:0/", "HTTPS://www\\evil.AA:0/", "HTTPS://wwwAevil.AA:0/", "HTTPS://www?evil.AA:0/", "HTTPS://www=evil.AA:0/", "HTTPS://www;evil.AA:0/", "HTTPS://www:evil.AA:0/", "HTTPS://www0evil.AA:0/", "HTTPS://www/evil.AA:0/", "HTTPS://www.evil.AA:0/", "HTTPS://www-evil.AA:0/", "HTTPS://www,evil.AA:0/", "HTTPS://www+evil.AA:0/", "HTTPS://www&evil.AA:0/", "HTTPS://www%evil.AA:0/", "HTTPS://www$evil.AA:0/", "HTTPS://www#evil.AA:0/", "HTTPS://www evil.AA:0/", "wwwaevil.AA:0/", "HTTP://wwwaevil.AA:0/", "0aevil.AA", "wwwaevil.AA", "fTPS://wwwaevil.AA:0/", "FTPS://wwwaevil.AA:0/", "hTTPS://wwwaevil.AA:0/", "HtTPS://wwwaevil.AA:0/", "HTtPS://wwwaevil.AA:0/", "HTTpS://wwwaevil.AA:0/", "HTTPs://wwwaevil.AA:0/", "HTTPS://0aevil.AA:0/", "HTTPS://wwwaevil.AA:0/evil", "HTTPS://wwwaevil.AA:0/"], "nonMatches": ["HTTPS://wwwaevil.AA:0/:", "HTTPS://wwwaevil.AA:0/ev il", "HTTPS://wwwaevil.AA:0/ ", "HTTPS://wwwaevil.AA:0//", "HTTPS://wwwaevil.AA:000000/", "HTTPS://wwwaevil.AA:/", "HTTPS://wwwaevil.AAAAAAA:0/", "HTTPS://wwwaevil.A:0/", "HTTPS://wwwa~.AA:0/", "HTTPS://wwwa\\.AA:0/", "HTTPS://wwwa?.AA:0/", "HTTPS://wwwa=.AA:0/", "HTTPS://wwwa;.AA:0/", "HTTPS://wwwa:.AA:0/", "HTTPS://wwwa/.AA:0/", "HTTPS://wwwa,.AA:0/", "HTTPS://wwwa+.AA:0/", "HTTPS://wwwa&.AA:0/", "HTTPS://wwwa%.AA:0/", "HTTPS://wwwa$.AA:0/", "HTTPS://wwwa#.AA:0/", "HTTPS://wwwaev_il.AA:0/", "HTTPS://wwwaev il.AA:0/", "HTTPS://wwwa .AA:0/", "HTTPS://wwwa_.AA:0/", "HTTPS://HTTPS://wwwaevil.AA:0/", "HTTPSS://wwwaevil.AA:0/"]}, {"regex": "^(((ht|f)tp(s?))\\://).*$", "exceptionStackTrace": null, "matches": ["https://:", "https:///", "https://eVil", "https://EVIL", "https://ev_il", "https://ev il", "https://ev4il", "https://e", "https:// ", "https://6", "https://_", "https://", "http://evil", "ftp://", "http://", "ftps://evil", "https://evil"], "nonMatches": ["httpss://evil"]}, {"regex": "^[1-9]\\d{3}\\s?(?i)(?!(S[ADS]))([A-Z&&[^FIOQUY]]{2})$", "exceptionStackTrace": null, "matches": ["1000 ^]]", "1000 []]", "1000 U]]", "1000 Q]]", "1000 O]]", "1000 I]]", "1000 F]]", "1000 A]]", "1000 &]]", "1000Y]]", "1000 Y]]"], "nonMatches": ["1000 Y]]]", "1000 Y]", "1000  Y]]", "10000 Y]]", "100 Y]]", "0000 Y]]"]}, {"regex": "^\\d*((\\.\\d+)?)*$", "exceptionStackTrace": null, "matches": ["0.0.0", "0", "0.00", "00.0", ".0", "", "0.0"], "nonMatches": ["0."]}, {"regex": "([0]|[-]?[0]\\.[0-9]+)|([-]?([1-9]+\\.[0-9]+))|([-]?[1-9]+)", "exceptionStackTrace": null, "matches": ["-11", "-0", "--1", "-1.00", "-1.", "-11.0", "-.0", "--1.0", "-0.00", "-0.", "--0.0", "1", "1.0", "0.0", "-1", "-1.0", "-0.0", "0"], "nonMatches": ["-"]}, {"regex": "(\\[(\\w+)\\s*(([\\w]*)=(&#39;|&quot;)?([a-zA-Z0-9|:|\\/|=|-|.|\\?|&amp;]*)(\\5)?)*\\])([a-zA-Z0-9|:|\\/|=|-|.|\\?|&amp;|\\s]+)(\\[\\/\\2\\])", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (bad range): Invalid range: |-|"}, "matches": [], "nonMatches": []}, {"regex": "[a-zA-Z0-9_\\\\-]+@([a-zA-Z0-9_\\\\-]+\\\\.)+(com)", "exceptionStackTrace": null, "matches": ["evil@evil\\aevil\\acom", "evil@evil\\_com", "evil@evil\\\\com", "evil@evil\\Acom", "evil@evil\\@com", "evil@evil\\0com", "evil@evil\\-com", "evil@evil\\ com", "evil@\\\\acom", "evil@-\\acom", "evil@eVil\\acom", "evil@EVIL\\acom", "evil@ev_il\\acom", "evil@ev4il\\acom", "evil@e\\acom", "evil@6\\acom", "evil@_\\acom", "\\@evil\\acom", "-@evil\\acom", "eVil@evil\\acom", "EVIL@evil\\acom", "ev_il@evil\\acom", "ev il@evil\\acom", "ev4il@evil\\acom", "e@evil\\acom", "6@evil\\acom", "_@evil\\acom", "evil@evil\\acom"], "nonMatches": ["evil@com", "evil@@\\acom", "evil@ev il\\acom", "evil@ \\acom", "evil@\\acom", "@@evil\\acom", " @evil\\acom", "@evil\\acom"]}, {"regex": "^[\\-]{0,1}[0-9]{1,}(([\\.\\,]{0,1}[0-9]{1,})|([0-9]{0,}))$", "exceptionStackTrace": null, "matches": ["-000", "-0", "-0,00", "-0.0", "-00,0", "0,0", "0", "00", "-00", "-0,0"], "nonMatches": ["-0,", "-0,,0", "-,0", "--0,0"]}, {"regex": "(\\b)(\\w+(\\b|\\n|\\s)){3}", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\n"}, "matches": [], "nonMatches": []}, {"regex": "^[-+]?[1-9](\\d*|((\\d{1,2})?,(\\d{3},)*(\\d{3})))?([eE][-+]\\d+)?$", "exceptionStackTrace": null, "matches": ["+10,000,000,000E+0", "+10,000E+0", "+100,000,000E+0", "+1,000,000E+0", "+10", "+10E+00", "+10E-0", "+10e+0", "+100E+0", "+1E+0", "10E+0", "-10E+0", "1", "+10,000,000E+0", "+10E+0"], "nonMatches": ["+10,000,0000E+0", "+10,000,00E+0", "+10,0000,000E+0", "+10,00,000E+0", "+1000,000,000E+0", "+10E+0E+0", "+10E+", "+10a+0", "+10A+0", "+00E+0", "++10E+0"]}, {"regex": "^[-+]?((\\d*|((\\d{1,3})?,(\\d{3},)*(\\d{3})))?)(\\.\\d*)?([eE][-+]\\d+)?$", "exceptionStackTrace": null, "matches": ["+0,000,000,000.0E+0", "+0,000.0E+0", "+00,000,000.0E+0", "+000,000,000.0E+0", "+,000,000.0E+0", "+0.0", "+0.0E+00", "+0.0E-0", "+0.0e+0", "+0E+0", "+0.00E+0", "+0.E+0", "+00.0E+0", "+.0E+0", "0.0E+0", "-0.0E+0", "", "+0,000,000.0E+0", "+0.0E+0"], "nonMatches": ["+0,000,0000.0E+0", "+0,000,00.0E+0", "+0,0000,000.0E+0", "+0,00,000.0E+0", "+0000,000,000.0E+0", "+0.0E+0E+0", "+0.0E+", "+0.0a+0", "+0.0A+0", "+0.0.0E+0", "++0.0E+0"]}, {"regex": "^\\(?\\+([9]{2}?[6])\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{3})[-. ]?([0-9]{3})$", "exceptionStackTrace": null, "matches": ["(+996) 000 000000", "(+996) 000 000.000", "(+996) 000 000-000", "(+996) 000000 000", "(+996) 000.000 000", "(+996) 000-000 000", "(+996)000 000 000", "(+996).000 000 000", "(+996)-000 000 000", "(+996 000 000 000", "+996) 000 000 000", "+996000000000", "(+996) 000 000 000"], "nonMatches": ["(+996) 000 000 0000", "(+996) 000 000 00", "(+996) 000 000  000", "(+996) 000 0000 000", "(+996) 000 00 000", "(+996) 000  000 000", "(+996) 0000 000 000", "(+996) 00 000 000", "(+996)  000 000 000", "(+996)) 000 000 000", "(+9996) 000 000 000", "(+96) 000 000 000", "((+996) 000 000 000"]}, {"regex": "^[A-Z]{2,4}[0-9][A-Z0-9]+$", "exceptionStackTrace": null, "matches": ["AA0EVIL", "AA06"], "nonMatches": ["AA0eVil", "AA0ev_il", "AA0ev il", "AA0ev4il", "AA0e", "AA0 ", "AA0_", "AA0", "AAAAA0evil", "AAAA0evil", "A0evil", "AA0evil"]}, {"regex": "((^(10|12|0?[13578])(3[01]|[12][0-9]|0?[1-9])((1[8-9]\\d{2})|([2-9]\\d{3}))$)|(^(11|0?[469])(30|[12][0-9]|0?[1-9])((1[8-9]\\d{2})|([2-9]\\d{3}))$)|(^(0?2)(2[0-8]|1[0-9]|0?[1-9])((1[8-9]\\d{2})|([2-9]\\d{3}))$)|(^(0?2)(29)([2468][048]00)$)|(^(0?2)(29)([3579][26]00)$)|(^(0?2)(29)([1][89][0][48])$)|(^(0?2)(29)([2-9][0-9][0][48])$)|(^(0?2)(29)([1][89][2468][048])$)|(^(0?2)(29)([2-9][0-9][2468][048])$)|(^(0?2)(29)([1][89][13579][26])$)|(^(0?2)(29)([2-9][0-9][13579][26])$))", "exceptionStackTrace": null, "matches": ["02292092", "02292076", "02292056", "02292036", "02292016", "02291992", "02291976", "02291956", "02291936", "02291916", "02291896", "02292084", "02292080", "02292068", "02292048", "02292028", "02291984", "02291980", "02291968", "02291948", "02291928", "02291888", "02292004", "02292000", "02291904", "02291808", "02299200", "02297600", "02295600", "02293600", "02298400", "02298000", "02296800", "02294800", "02292800", "0211800", "06301800", "04301800", "11101800", "07311800", "05311800", "03311800", "01311800", "10101800", "10301800", "2292096", "2291996", "2292088", "2291988", "2292008", "2291908", "2299600", "2298800", "211800", "2101800", "2202000", "2201800", "9301800", "1111800", "8311800", "1011800", "02292096", "02291996", "02292088", "02291988", "02292008", "02291908", "02299600", "02298800", "02011800", "02101800", "02202000", "02201800", "09301800", "11011800", "11201800", "11302000", "11301800", "08311800", "12311800", "10011800", "10201800", "10312000", "10311800"], "nonMatches": ["02292090", "02292006", "02290096", "002292096", "02291990", "02291906", "02291096", "002291996", "02292081", "02290088", "002292088", "02291981", "02291088", "002291988", "02290008", "002292008", "02291900", "02291008", "002291908", "02299000", "02290600", "002299600", "02298100", "02290800", "002298800", "02001800", "020011800", "022020000", "0220200", "02200000", "022018000", "0220180", "02201000", "02291800", "002201800", "00301800", "009301800", "110011800", "11001800", "113020000", "1130200", "11300000", "113018000", "1130180", "11301000", "00311800", "008311800", "100011800", "10001800", "103120000", "1031200", "10310000", "103118000", "1031180", "10311000", "10321800"]}, {"regex": "^\\${1}[a-z]{1}[a-z\\d]{0,6}$", "exceptionStackTrace": null, "matches": ["$a000000", "$aa", "$aa0", "$a", "$a0"], "nonMatches": ["$a0000000", "$0", "$$a0", "a0"]}, {"regex": "nghjnyg", "exceptionStackTrace": null, "matches": ["nghjnyg"], "nonMatches": []}, {"regex": "$", "exceptionStackTrace": null, "matches": [""], "nonMatches": []}, {"regex": "fsrvgfrdg", "exceptionStackTrace": null, "matches": ["fsrvgfrdg"], "nonMatches": []}, {"regex": "(((ht|f)tp(s?):\\/\\/)|(www\\.[^ \\[\\]\\(\\)\\n\\r\\t]+)|(([012]?[0-9]{1,2}\\.){3}[012]?[0-9]{1,2})\\/)([^ \\[\\]\\(\\),;&quot;&#39;&lt;&gt;\\n\\r\\t]+)([^\\. \\[\\]\\(\\),;&quot;&#39;&lt;&gt;\\n\\r\\t])|(([012]?[0-9]{1,2}\\.){3}[012]?[0-9]{1,2})", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\n"}, "matches": [], "nonMatches": []}, {"regex": "^([a-zA-Z]+)[0-9]*\\.*[a-zA-Z0-9]+$|^[a-zA-Z]+[0-9]*$", "exceptionStackTrace": null, "matches": ["evil00", "eVil0", "EVIL0", "ev4il0", "e0", "evil0.eVil", "evil0.EVIL", "evil0.ev4il", "evil0.e", "evil0.6", "evil0..evil", "evil0evil", "evil00.evil", "evil.evil", "eVil0.evil", "EVIL0.evil", "e0.evil", "evil", "evilevil", "evil0", "evil0.evil"], "nonMatches": ["ev_il0", "ev il0", " 0", "60", "_0", "0", "evil0.ev_il", "evil0.ev il", "evil0. ", "evil0._", "evil0.", "ev_il0.evil", "ev il0.evil", "ev4il0.evil", " 0.evil", "60.evil", "_0.evil", "0.evil"]}, {"regex": "^(?=.*\\d)\\w+$", "exceptionStackTrace": null, "matches": ["ev4il", "6"], "nonMatches": ["eVil", "EVIL", "ev_il", "ev il", "e", " ", "_", "", "evil"]}, {"regex": "^[a-zA-Z0-9._%-]+@[a-zA-Z0-9._%-]+\\.[a-zA-Z]{2,4}\\s*$", "exceptionStackTrace": null, "matches": ["evil@evil.AA  ", "evil@evil.AAAA ", "evil@evil.aA ", "evil@..AA ", "evil@-.AA ", "evil@%.AA ", "evil@eVil.AA ", "evil@EVIL.AA ", "evil@ev_il.AA ", "evil@ev4il.AA ", "evil@e.AA ", "evil@6.AA ", "evil@_.AA ", ".@evil.AA ", "-@evil.AA ", "%@evil.AA ", "eVil@evil.AA ", "EVIL@evil.AA ", "ev_il@evil.AA ", "ev4il@evil.AA ", "e@evil.AA ", "6@evil.AA ", "_@evil.AA ", "evil@evil.AA", "evil@evil.AA "], "nonMatches": ["evil@evil.AAAAA ", "evil@evil.A ", "evil@@.AA ", "evil@ev il.AA ", "evil@ .AA ", "evil@.AA ", "@@evil.AA ", "ev il@evil.AA ", " @evil.AA ", "@evil.AA "]}, {"regex": "^([0-9]*\\,?[0-9]+|[0-9]+\\,?[0-9]*)?$", "exceptionStackTrace": null, "matches": ["0,00", "0,", "00", "00,0", ",0", "", "0,0"], "nonMatches": ["0,00,0", "0,,0"]}, {"regex": "^([a-zA-Z0-9])+\\\\{1}([a-zA-Z0-9])+$", "exceptionStackTrace": null, "matches": ["0\\00", "0\\a", "0\\A", "00\\0", "a\\0", "A\\0", "0\\0"], "nonMatches": ["0\\", "0\\\\0", "00", "\\0"]}, {"regex": "^(\\()?(787|939)(\\)|-)?([0-9]{3})(-)?([0-9]{4}|[0-9]{4})$", "exceptionStackTrace": null, "matches": ["(787)0000000", "(787000-0000", "787)000-0000", "9390000000", "7870000000", "(939)000-0000", "(787-000-0000", "(787)000-0000"], "nonMatches": ["(787)000-00000", "(787)000-000", "(787)000--0000", "(787)0000-0000", "(787)00-0000", "(787))000-0000", "((787)000-0000"]}, {"regex": "^([1-9]\\d{0,3}|[1-5]\\d{4}|6[0-4]\\d{3}|65[0-4]\\d{2}|655[0-2]\\d|6553[0-5])$", "exceptionStackTrace": null, "matches": ["6500", "6000", "1000", "1", "65530", "65500", "65000", "60000", "10000", "10"], "nonMatches": ["65536", "650000", "600000", "100000", "00000", "00"]}, {"regex": "^\\s+$|^$", "exceptionStackTrace": null, "matches": ["  ", "", " "], "nonMatches": []}, {"regex": "[0-9]+|-[0-9]+", "exceptionStackTrace": null, "matches": ["-00", "00", "-0", "0"], "nonMatches": ["-", ""]}, {"regex": "(?!^0*$)(?!^0*\\.0*$)^\\d{1,5}(\\.\\d{1,5})?$", "exceptionStackTrace": null, "matches": [], "nonMatches": ["0.0.0", "0.000000", "0.00000", "0.", "000000.0", "00000.0", ".0", "0", "0.0"]}, {"regex": "(([0-2]{1}[0-9]{1})|([3-3]{1}[0-1]))/[1-12]{2}/[1900-2999]{4}\\s(([0-0]{1}[0-9]{1})|([1-1]{1}[0-9]{1})|([2-2]{1}[0-3]{1})):[0-5]{1}[0-9]{1}:[0-5]{1}[0-9]{1}", "exceptionStackTrace": null, "matches": ["330/22/9999 00:00:00", "00/22/9999 00:00:000", "00/22/2999 00:00:00", "00/22/1999 00:00:00", "00/22/0999 00:00:00", "00/12/9999 00:00:00", "000/22/9999 00:00:00", "30/22/9999 00:00:00", "00/22/9999 20:00:00", "00/22/9999 10:00:00", "00/22/9999 00:00:00"], "nonMatches": ["32/22/9999 00:00:00", "00/22/9999 200:00:00", "00/22/9999 2:00:00", "00/22/9999 24:00:00", "00/22/9999 220:00:00", "00/22/9999 100:00:00", "00/22/9999 1:00:00", "00/22/9999 110:00:00", "00/22/9999 00:00:0", "00/22/9999 00:00:60", "00/22/9999 00:000:00", "00/22/9999 00:0:00", "00/22/9999 00:60:00", "00/22/9999 000:00:00", "00/22/9999 0:00:00", "00/22/99999 00:00:00", "00/22/999 00:00:00", "00/22/3999 00:00:00", "00/222/9999 00:00:00", "00/2/9999 00:00:00", "00/02/9999 00:00:00", "0/22/9999 00:00:00"]}, {"regex": "(\\w+),\\s+(\\w+)\\s+ (\\((\\w+)\\)\\s+)? (\\w+),\\s+(\\w+)[^\\d]+ (\\d+)\\s+(\\w+)", "exceptionStackTrace": null, "matches": ["evil, evil  (evil)  evil, evilevil 0 eVil", "evil, evil  (evil)  evil, evilevil 0 EVIL", "evil, evil  (evil)  evil, evilevil 0 ev_il", "evil, evil  (evil)  evil, evilevil 0 ev il", "evil, evil  (evil)  evil, evilevil 0 ev4il", "evil, evil  (evil)  evil, evilevil 0 e", "evil, evil  (evil)  evil, evilevil 0 6", "evil, evil  (evil)  evil, evilevil 0 _", "evil, evil  (evil)  evil, evilevil 0  evil", "evil, evil  (evil)  evil, evilevil 00 evil", "evil, evil  (evil)  evil, evil, 0 evil", "evil, evil  (evil)  evil, evil) 0 evil", "evil, evil  (evil)  evil, evil( 0 evil", "evil, evil  (evil)  evil, evileVil 0 evil", "evil, evil  (evil)  evil, evilEVIL 0 evil", "evil, evil  (evil)  evil, evilev_il 0 evil", "evil, evil  (evil)  evil, evilev il 0 evil", "evil, evil  (evil)  evil, evilev4il 0 evil", "evil, evil  (evil)  evil, evile 0 evil", "evil, evil  (evil)  evil, evil  0 evil", "evil, evil  (evil)  evil, evil_ 0 evil", "evil, evil  (evil)  evil, eVilevil 0 evil", "evil, evil  (evil)  evil, EVILevil 0 evil", "evil, evil  (evil)  evil, ev_ilevil 0 evil", "evil, evil  (evil)  evil, ev ilevil 0 evil", "evil, evil  (evil)  evil, ev4ilevil 0 evil", "evil, evil  (evil)  evil, eevil 0 evil", "evil, evil  (evil)  evil,  evil 0 evil", "evil, evil  (evil)  evil, 6evil 0 evil", "evil, evil  (evil)  evil, _evil 0 evil", "evil, evil  (evil)  evil, evil 0 evil", "evil, evil  (evil)  evil,  evilevil 0 evil", "evil, evil  (evil)  eVil, evilevil 0 evil", "evil, evil  (evil)  EVIL, evilevil 0 evil", "evil, evil  (evil)  ev_il, evilevil 0 evil", "evil, evil  (evil)  ev4il, evilevil 0 evil", "evil, evil  (evil)  e, evilevil 0 evil", "evil, evil  (evil)  6, evilevil 0 evil", "evil, evil  (evil)  _, evilevil 0 evil", "evil, evil  (evil)   evil, evilevil 0 evil", "evil, evil  (eVil)  evil, evilevil 0 evil", "evil, evil  (EVIL)  evil, evilevil 0 evil", "evil, evil  (ev_il)  evil, evilevil 0 evil", "evil, evil  (ev4il)  evil, evilevil 0 evil", "evil, evil  (e)  evil, evilevil 0 evil", "evil, evil  (6)  evil, evilevil 0 evil", "evil, evil  (_)  evil, evilevil 0 evil", "evil, evil   (evil)  evil, evilevil 0 evil", "evil, eVil  (evil)  evil, evilevil 0 evil", "evil, EVIL  (evil)  evil, evilevil 0 evil", "evil, ev_il  (evil)  evil, evilevil 0 evil", "evil, ev4il  (evil)  evil, evilevil 0 evil", "evil, e  (evil)  evil, evilevil 0 evil", "evil, 6  (evil)  evil, evilevil 0 evil", "evil, _  (evil)  evil, evilevil 0 evil", "evil,  evil  (evil)  evil, evilevil 0 evil", "eVil, evil  (evil)  evil, evilevil 0 evil", "EVIL, evil  (evil)  evil, evilevil 0 evil", "ev_il, evil  (evil)  evil, evilevil 0 evil", "ev il, evil  (evil)  evil, evilevil 0 evil", "ev4il, evil  (evil)  evil, evilevil 0 evil", "e, evil  (evil)  evil, evilevil 0 evil", "6, evil  (evil)  evil, evilevil 0 evil", "_, evil  (evil)  evil, evilevil 0 evil", "evil, evil   evil, evilevil 0 evil", "evil, evil  (evil)  evil, evilevil 0 evil"], "nonMatches": ["evil, evil  (evil)  evil, evilevil 0  ", "evil, evil  (evil)  evil, evilevil 0 ", "evil, evil  (evil)  evil, evilevil 0evil", "evil, evil  (evil)  evil, evilevil  evil", "evil, evil  (evil)  evil, evil6 0 evil", "evil, evil  (evil)  evil,evilevil 0 evil", "evil, evil  (evil)  ev il, evilevil 0 evil", "evil, evil  (evil)   , evilevil 0 evil", "evil, evil  (evil)  , evilevil 0 evil", "evil, evil  (evil) (evil)  evil, evilevil 0 evil", "evil, evil  (evil) evil, evilevil 0 evil", "evil, evil  (ev il)  evil, evilevil 0 evil", "evil, evil  ( )  evil, evilevil 0 evil", "evil, evil  ()  evil, evilevil 0 evil", "evil, evil (evil)  evil, evilevil 0 evil", "evil, ev il  (evil)  evil, evilevil 0 evil", "evil,    (evil)  evil, evilevil 0 evil", "evil,   (evil)  evil, evilevil 0 evil", "evil,evil  (evil)  evil, evilevil 0 evil", " , evil  (evil)  evil, evilevil 0 evil", ", evil  (evil)  evil, evilevil 0 evil"]}, {"regex": "(\\w+),[^(]+\\((\\w+)\\)\\s+(\\d+)\\s+(\\w+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)", "exceptionStackTrace": null, "matches": ["evil,evil(evil) 0 evil 0 0 0 00", "evil,evil(evil) 0 evil 0 0 0  0", "evil,evil(evil) 0 evil 0 0 00 0", "evil,evil(evil) 0 evil 0 0  0 0", "evil,evil(evil) 0 evil 0 00 0 0", "evil,evil(evil) 0 evil 0  0 0 0", "evil,evil(evil) 0 evil 00 0 0 0", "evil,evil(evil) 0 evil  0 0 0 0", "evil,evil(evil) 0 eVil 0 0 0 0", "evil,evil(evil) 0 EVIL 0 0 0 0", "evil,evil(evil) 0 ev_il 0 0 0 0", "evil,evil(evil) 0 ev4il 0 0 0 0", "evil,evil(evil) 0 e 0 0 0 0", "evil,evil(evil) 0 6 0 0 0 0", "evil,evil(evil) 0 _ 0 0 0 0", "evil,evil(evil) 0  evil 0 0 0 0", "evil,evil(evil) 00 evil 0 0 0 0", "evil,evil(evil)  0 evil 0 0 0 0", "evil,evil(eVil) 0 evil 0 0 0 0", "evil,evil(EVIL) 0 evil 0 0 0 0", "evil,evil(ev_il) 0 evil 0 0 0 0", "evil,evil(ev4il) 0 evil 0 0 0 0", "evil,evil(e) 0 evil 0 0 0 0", "evil,evil(6) 0 evil 0 0 0 0", "evil,evil(_) 0 evil 0 0 0 0", "evil,,(evil) 0 evil 0 0 0 0", "evil,)(evil) 0 evil 0 0 0 0", "evil,eVil(evil) 0 evil 0 0 0 0", "evil,EVIL(evil) 0 evil 0 0 0 0", "evil,ev_il(evil) 0 evil 0 0 0 0", "evil,ev il(evil) 0 evil 0 0 0 0", "evil,ev4il(evil) 0 evil 0 0 0 0", "evil,e(evil) 0 evil 0 0 0 0", "evil, (evil) 0 evil 0 0 0 0", "evil,6(evil) 0 evil 0 0 0 0", "evil,_(evil) 0 evil 0 0 0 0", "eVil,evil(evil) 0 evil 0 0 0 0", "EVIL,evil(evil) 0 evil 0 0 0 0", "ev_il,evil(evil) 0 evil 0 0 0 0", "ev il,evil(evil) 0 evil 0 0 0 0", "ev4il,evil(evil) 0 evil 0 0 0 0", "e,evil(evil) 0 evil 0 0 0 0", "6,evil(evil) 0 evil 0 0 0 0", "_,evil(evil) 0 evil 0 0 0 0", "evil,evil(evil) 0 evil 0 0 0 0"], "nonMatches": ["evil,evil(evil) 0 evil 0 0 0 ", "evil,evil(evil) 0 evil 0 0 00", "evil,evil(evil) 0 evil 0 0  0", "evil,evil(evil) 0 evil 0 00 0", "evil,evil(evil) 0 evil 0  0 0", "evil,evil(evil) 0 evil 00 0 0", "evil,evil(evil) 0 evil  0 0 0", "evil,evil(evil) 0 evil0 0 0 0", "evil,evil(evil) 0 ev il 0 0 0 0", "evil,evil(evil) 0   0 0 0 0", "evil,evil(evil) 0  0 0 0 0", "evil,evil(evil) 0evil 0 0 0 0", "evil,evil(evil)  evil 0 0 0 0", "evil,evil(evil)0 evil 0 0 0 0", "evil,evil(ev il) 0 evil 0 0 0 0", "evil,evil( ) 0 evil 0 0 0 0", "evil,evil() 0 evil 0 0 0 0", "evil,((evil) 0 evil 0 0 0 0", "evil,(evil) 0 evil 0 0 0 0", " ,evil(evil) 0 evil 0 0 0 0", ",evil(evil) 0 evil 0 0 0 0"]}, {"regex": "(\\w+),[^(]+\\((\\w+)\\)\\s+(\\w+)\\s+(\\d+)/(\\d+)\\s+(\\d+)?", "exceptionStackTrace": null, "matches": ["evil,evil(evil) evil 0/0 00", "evil,evil(evil) evil 0/0  0", "evil,evil(evil) evil 0/00 0", "evil,evil(evil) evil 00/0 0", "evil,evil(evil) evil  0/0 0", "evil,evil(evil) eVil 0/0 0", "evil,evil(evil) EVIL 0/0 0", "evil,evil(evil) ev_il 0/0 0", "evil,evil(evil) ev4il 0/0 0", "evil,evil(evil) e 0/0 0", "evil,evil(evil) 6 0/0 0", "evil,evil(evil) _ 0/0 0", "evil,evil(evil)  evil 0/0 0", "evil,evil(eVil) evil 0/0 0", "evil,evil(EVIL) evil 0/0 0", "evil,evil(ev_il) evil 0/0 0", "evil,evil(ev4il) evil 0/0 0", "evil,evil(e) evil 0/0 0", "evil,evil(6) evil 0/0 0", "evil,evil(_) evil 0/0 0", "evil,/(evil) evil 0/0 0", "evil,,(evil) evil 0/0 0", "evil,)(evil) evil 0/0 0", "evil,eVil(evil) evil 0/0 0", "evil,EVIL(evil) evil 0/0 0", "evil,ev_il(evil) evil 0/0 0", "evil,ev il(evil) evil 0/0 0", "evil,ev4il(evil) evil 0/0 0", "evil,e(evil) evil 0/0 0", "evil, (evil) evil 0/0 0", "evil,6(evil) evil 0/0 0", "evil,_(evil) evil 0/0 0", "eVil,evil(evil) evil 0/0 0", "EVIL,evil(evil) evil 0/0 0", "ev_il,evil(evil) evil 0/0 0", "ev il,evil(evil) evil 0/0 0", "ev4il,evil(evil) evil 0/0 0", "e,evil(evil) evil 0/0 0", "6,evil(evil) evil 0/0 0", "_,evil(evil) evil 0/0 0", "evil,evil(evil) evil 0/0 ", "evil,evil(evil) evil 0/0 0"], "nonMatches": ["evil,evil(evil) evil 0/00", "evil,evil(evil) evil 0/ 0", "evil,evil(evil) evil /0 0", "evil,evil(evil) evil0/0 0", "evil,evil(evil) ev il 0/0 0", "evil,evil(evil)   0/0 0", "evil,evil(evil)  0/0 0", "evil,evil(evil)evil 0/0 0", "evil,evil(ev il) evil 0/0 0", "evil,evil( ) evil 0/0 0", "evil,evil() evil 0/0 0", "evil,((evil) evil 0/0 0", "evil,(evil) evil 0/0 0", " ,evil(evil) evil 0/0 0", ",evil(evil) evil 0/0 0"]}, {"regex": "^((([a-zA-Z]:)|(\\\\{2}\\w+)|(\\\\{2}(?:(?:25[0-5]|2[0-4]\\d|[01]\\d\\d|\\d?\\d)(?(?=\\.?\\d)\\.)){4}))(\\\\(\\w[\\w ]*)))", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "bad character in group name '?=\\\\.?\\\\d'"}, "matches": []}, {"regex": "^\\w+.*$", "exceptionStackTrace": null, "matches": ["evileVil", "evilEVIL", "evilev_il", "evilev il", "evilev4il", "evile", "evil ", "evil6", "evil_", "eVilevil", "EVILevil", "ev_ilevil", "ev ilevil", "ev4ilevil", "eevil", "6evil", "_evil", "evil", "evilevil"], "nonMatches": [" evil"]}, {"regex": "[0-9]{2}-?[DF][A-Z]{2}-?[0-9]{1}|[DF][A-Z]{1}-?[0-9]{3}-?[A-Z]{1}|[DF]-?[0-9]{3}-?[A-Z]{2}|[DF][A-Z]{2}-?[0-9]{2}-?[A-Z]{1}$", "exceptionStackTrace": null, "matches": ["FAA-00A", "FAA00-A", "DAA-00-A", "F-000-AAA", "F-000AA", "F000-AA", "D-000-AA", "FA-000-AA", "FA-000A", "FA000-A", "DA-000-A", "00-FAA-00", "00-FAA0", "00-DAA-0", "00FAA-0", "000-FAA-0", "FAA00A", "F000AA", "FA000A", "00FAA0", "FAA-00-A", "F-000-AA", "FA-000-A", "00-FAA-0"], "nonMatches": ["FAA-00-AA", "FAA-00-", "FAA-00--A", "FAA-0-A", "FAA--00-A", "FAAA-00-A", "AAA-00-A", "F-000--AA", "F-0000-AA", "F-00-AA", "F--000-AA", "A-000-AA", "FA-000-", "FA-000--A", "FA-0000-A", "FA-00-A", "FA--000-A", "FAA-000-A", "F-000-A", "AA-000-A", "00-FAA-", "00-FAA--0", "00-FAAA-0", "00-FA-0", "00-AAA-0", "00--FAA-0", "0-FAA-0"]}, {"regex": "([.])([a-z,1-9]{3,4})(\\/)", "exceptionStackTrace": null, "matches": [".,,,,/", ".a,,/", ".1,,/", ".,,,/"], "nonMatches": [".,,,,,/", ".,,/", ".0,,/"]}, {"regex": "(?<!})\\n", "exceptionStackTrace": {"exceptionThrownBy": "EGRET", "exception": "ERROR (unsupported): contains unsupported character \\n"}, "matches": [], "nonMatches": []}, {"regex": "(?<key>[^\\s]+(\\s\\w)*)(?=([\\s]*:[\\s]*))\\2(?<=\\2)(?<value>\\b[^,:]+\\b)", "exceptionStackTrace": {"exceptionThrownBy": "Python", "exception": "unknown extension ?<k"}, "matches": []}, {"regex": "([\\w]+)", "exceptionStackTrace": null, "matches": ["eVil", "EVIL", "ev_il", "ev il", "ev4il", "e", "6", "_", "evil"], "nonMatches": [" ", ""]}, {"regex": "(=)|(<)|(>)|(&#39;)|(--)|(/)|(\\+)|(;)|(\\*)|(!)|({)|(})|(drop table)|(drop stored)|(alter table)|(alter stored)|(sp_)|(xp_)|(exec )|(execute )|(fetch)|(select)|(kill)|(selectsys)|(sysobjects)|(syscolumns)|(isnull)|(coalesce)|(dbo)|(tbl)|(usp)", "exceptionStackTrace": null, "matches": ["usp", "tbl", "dbo", "coalesce", "isnull", "syscolumns", "sysobjects", "selectsys", "kill", "select", "fetch", "execute ", "exec ", "xp_", "sp_", "alter stored", "alter table", "drop stored", "drop table", "}", "{", "!", "*", ";", "+", "/", "--", "&#39;", ">", "<", "="], "nonMatches": []}, {"regex": "(\\d*)&#39;*-*(\\d*)/*(\\d*)&quot;", "exceptionStackTrace": null, "matches": ["0&#39;-0/00&quot;", "0&#39;-0/&quot;", "0&#39;-0//0&quot;", "0&#39;-00&quot;", "0&#39;-00/0&quot;", "0&#39;-/0&quot;", "0&#39;--0/0&quot;", "0&#39;0/0&quot;", "0&#39;;-0/0&quot;", "0&#39-0/0&quot;", "00&#39;-0/0&quot;", "&#39;-0/0&quot;", "&#39&quot;", "0&#39;-0/0&quot;"], "nonMatches": []}, {"regex": "^[01]?[- .]?\\(?(?!\\d[1]{2})[2-9]\\d{2}\\)?[- .]?(?!\\d[1]{2})\\d{3}[- .]?\\d{4}$", "exceptionStackTrace": null, "matches": ["1.(200).0000000", "1.(200).000-0000", "1.(200).000 0000", "1.(200)000.0000", "1.(200)-000.0000", "1.(200) 000.0000", "1.(200.000.0000", "1.200).000.0000", "1(200).000.0000", "1-(200).000.0000", "1 (200).000.0000", ".(200).000.0000", "0.(200).000.0000", "2000000000", "1.(200).000.0000"], "nonMatches": ["1.(200).000.00000", "1.(200).000.000", "1.(200).000..0000", "1.(200).0000.0000", "1.(200).00.0000", "1.(200)..000.0000", "1.(200)).000.0000", "1.(2000).000.0000", "1.(20).000.0000", "1.(000).000.0000", "1.((200).000.0000", "1..(200).000.0000", "11.(200).000.0000", "2.(200).000.0000"]}, {"regex": "^((?:2[0-5]{2}|1\\d{2}|[1-9]\\d|[1-9])\\.(?:(?:2[0-5]{2}|1\\d{2}|[1-9]\\d|\\d)\\.){2}(?:2[0-5]{2}|1\\d{2}|[1-9]\\d|\\d)):(\\d|[1-9]\\d|[1-9]\\d{2,3}|[1-5]\\d{4}|6[0-4]\\d{3}|654\\d{2}|655[0-2]\\d|6553[0-5])$", "exceptionStackTrace": null, "matches": ["200.10.100.200:0", "200.200.200.200:6540", "200.200.200.200:6000", "200.200.200.200:1000", "200.200.200.20:0", "200.20.200.200:0", "20.200.200.200:0", "200.0.200.200:0", "200.10.200.200:0", "200.100.200.200:0", "1.200.200.200:0", "10.200.200.200:0", "100.200.200.200:0", "200.0.0.200:0", "200.10.10.200:0", "200.100.100.200:0", "200.200.200.0:0", "200.200.200.10:0", "200.200.200.100:0", "200.200.200.200:65530", "200.200.200.200:65500", "200.200.200.200:65400", "200.200.200.200:60000", "200.200.200.200:10000", "200.200.200.200:100", "200.200.200.200:10", "200.200.200.200:0"], "nonMatches": ["0.200.200.200:0", "00.200.200.200:0", "1000.200.200.200:0", "200.00.10.200:0", "200.1000.100.200:0", "200.200.200.00:0", "200.200.200.1000:0", "200.200.200.200:65536", "200.200.200.200:654000", "200.200.200.200:600000", "200.200.200.200:65000", "200.200.200.200:100000", "200.200.200.200:00000", "200.200.200.200:000", "200.200.200.200:00", "200.200.200.2000:0", "200.200.200.260:0", "200.200.200.200.200:0", "200.200.200:0", "200.2000.200.200:0", "200.260.200.200:0", "2000.200.200.200:0", "260.200.200.200:0"]}, {"regex": "^[a-zA-Z][a-zA-Z0-9_\\.\\-]+@([a-zA-Z0-9-]{2,}\\.)+([a-zA-Z]{2,4}|[a-zA-Z]{2}\\.[a-zA-Z]{2})$", "exceptionStackTrace": null, "matches": ["Aevil@--.AA.AAA", "Aevil@--.AA.aA", "Aevil@--.AAA.AA", "Aevil@--.aA.AA", "Aevil@--.AAAA", "Aevil@--.aA", "Aevil@--.--.AA", "Aevil@a-.AA", "Aevil@A-.AA", "Aevil@0-.AA", "A.@--.AA", "A-@--.AA", "AeVil@--.AA", "AEVIL@--.AA", "Aev_il@--.AA", "Aev4il@--.AA", "Ae@--.AA", "A6@--.AA", "A_@--.AA", "aevil@--.AA", "Aevil@--.AA.AA", "Aevil@--.AA"], "nonMatches": ["Aevil@--.AA.A", "Aevil@--.A.AA", "Aevil@--.AAAAA", "Aevil@--.A", "Aevil@AA", "Aevil@-.AA", "A@@--.AA", "Aev il@--.AA", "A @--.AA", "A@--.AA"]}, {"regex": "^((http|https|ftp):\\/\\/(www\\.)?|www\\.)[a-zA-Z0-9\\_\\-]+\\.([a-zA-Z]{2,4}|[a-zA-Z]{2}\\.[a-zA-Z]{2})(\\/[a-zA-Z0-9\\-\\._\\?\\&=,&#39;\\+%\\$#~]*)*$", "exceptionStackTrace": null, "matches": ["http://www.evil.AA.aA/evil", "http://www.evil.aA.AA/evil", "http://www.evil.AA/evil/evil", "http://www.evil.AA", "http://www.evil.AA/~", "http://www.evil.AA/?", "http://www.evil.AA/=", "http://www.evil.AA/;", "http://www.evil.AA//", "http://www.evil.AA/.", "http://www.evil.AA/-", "http://www.evil.AA/,", "http://www.evil.AA/+", "http://www.evil.AA/&", "http://www.evil.AA/%", "http://www.evil.AA/$", "http://www.evil.AA/#", "http://www.evil.AA/eVil", "http://www.evil.AA/EVIL", "http://www.evil.AA/ev_il", "http://www.evil.AA/ev4il", "http://www.evil.AA/e", "http://www.evil.AA/6", "http://www.evil.AA/_", "http://www.evil.AA/", "http://www.evil.AAAA/evil", "http://www.evil.aA/evil", "http://www.-.AA/evil", "http://www.eVil.AA/evil", "http://www.EVIL.AA/evil", "http://www.ev_il.AA/evil", "http://www.ev4il.AA/evil", "http://www.e.AA/evil", "http://www.6.AA/evil", "http://www._.AA/evil", "http://evil.AA/evil", "www.evil.AA", "ftp://evil.AA", "https://evil.AA", "http://evil.AA.AA", "http://evil.AA", "www.evil.AA/evil", "ftp://www.evil.AA/evil", "https://www.evil.AA/evil", "http://www.evil.AA.AA/evil", "http://www.evil.AA/evil"], "nonMatches": ["http://www.evil.AA.AAA/evil", "http://www.evil.AA.A/evil", "http://www.evil.AAA.AA/evil", "http://www.evil.A.AA/evil", "http://www.evil.AA/:", "http://www.evil.AA/ev il", "http://www.evil.AA/ ", "http://www.evil.AAAAA/evil", "http://www.evil.A/evil", "http://www.~.AA/evil", "http://www.?.AA/evil", "http://www.=.AA/evil", "http://www.;.AA/evil", "http://www.:.AA/evil", "http://www./.AA/evil", "http://www...AA/evil", "http://www.,.AA/evil", "http://www.+.AA/evil", "http://www.&.AA/evil", "http://www.%.AA/evil", "http://www.$.AA/evil", "http://www.#.AA/evil", "http://www.ev il.AA/evil", "http://www. .AA/evil", "http://www..AA/evil", "http://www.www.evil.AA/evil"]}, {"regex": "^(([0-9]{3})[-]?)*[0-9]{6,7}$", "exceptionStackTrace": null, "matches": ["000-0000000", "000-000-000000", "000000000", "000000", "000-000000"], "nonMatches": ["000-00000000", "000-00000", "000--000000", "0000-000000", "00-000000"]}, {"regex": "replace(MobileNo,&#39; &#39;,&#39;&#39;),&#39;^(\\+44|0044|0)(7)[4-9][0-9]{8}$&#39;", "exceptionStackTrace": null, "matches": [], "nonMatches": ["replaceMobileNo,&#39; &#39;,&#39;&#39;,&#39;+4474000000000&#39;", "replaceMobileNo,&#39; &#39;,&#39;&#39;,&#39;+44740000000&#39;", "replaceMobileNo,&#39; &#39;,&#39;&#39;,&#39;+447000000000&#39;", "replaceMobileNo,&#39; &#39;,&#39;&#39;,&#39;07400000000&#39;", "replaceMobileNo,&#39; &#39;,&#39;&#39;,&#39;00447400000000&#39;", "replaceMobileNo,&#39; &#39;,&#39;&#39;,&#39;+447400000000&#39;"]}, {"regex": "replace(MobileNo,&#39; &#39;,&#39;&#39;),&#39;^(\\+44|0044|0)(7)[4-9][0-9]{8}$&#39;", "exceptionStackTrace": null, "matches": [], "nonMatches": ["replaceMobileNo,&#39; &#39;,&#39;&#39;,&#39;+4474000000000&#39;", "replaceMobileNo,&#39; &#39;,&#39;&#39;,&#39;+44740000000&#39;", "replaceMobileNo,&#39; &#39;,&#39;&#39;,&#39;+447000000000&#39;", "replaceMobileNo,&#39; &#39;,&#39;&#39;,&#39;07400000000&#39;", "replaceMobileNo,&#39; &#39;,&#39;&#39;,&#39;00447400000000&#39;", "replaceMobileNo,&#39; &#39;,&#39;&#39;,&#39;+447400000000&#39;"]}, {"regex": "[\\+]?[1]?[-. ]?(\\(\\d{3}\\)|\\d{3})(|[-. ])?\\d{3}(|[-. ])\\d{4}|\\d{3}(|[-. ])\\d{4}", "exceptionStackTrace": null, "matches": ["000 00000", "000.0000", "000-0000", "0000 0000", "+1 0000 000 0000", "+1 00 000 0000", "+1 (000) 000 00000", "+1 (000) 0000000", "+1 (000) 000.0000", "+1 (000) 000-0000", "+1 (000) 0000 0000", "+1 (000)  000 0000", "+1 (000)000 0000", "+1 (000).000 0000", "+1 (000)-000 0000", "+1 (0000) 000 0000", "+1 (00) 000 0000", "+1  (000) 000 0000", "+1(000) 000 0000", "+1.(000) 000 0000", "+1-(000) 000 0000", "+11 (000) 000 0000", "+ (000) 000 0000", "++1 (000) 000 0000", "1 (000) 000 0000", "0000000", "0000000000", "(000)0000000", "000 0000", "+1 000 000 0000", "+1 (000) 000 0000"], "nonMatches": ["000 000", "000  0000", "00 0000", "+1 (000) 000 000", "+1 (000) 000  0000", "+1 (000) 00 0000"]}, {"regex": "^[1-9][0-9][0-9][0-9]$", "exceptionStackTrace": null, "matches": ["1000"], "nonMatches": ["0000"]}, {"regex": "(t|T)(o|O)\\s\\d{4}($|\\D)", "exceptionStackTrace": null, "matches": ["to 0000_", "to 0000A", "to 0000 ", "To 0000", "tO 0000", "to 0000a", "to 0000"], "nonMatches": ["to 00000", "to 000"]}, {"regex": "^([Vv]+(erdade(iro)?)?|[Ff]+(als[eo])?|[Tt]+(rue)?|0|[\\+\\-]?1)$", "exceptionStackTrace": null, "matches": ["+1", "ttrue", "True", "false", "ffalso", "Falso", "verdade", "vverdadeiro", "Verdadeiro", "1", "t", "f", "v", "-1", "0", "true", "falso", "verdadeiro"], "nonMatches": ["--1", "truerue", "rue", "arue", "Arue", "falsoalso", "falsa", "also", "aalso", "Aalso", "verdadeiroerdadeiro", "verdadeiroiro", "erdadeiro", "aerdadeiro", "Aerdadeiro"]}]